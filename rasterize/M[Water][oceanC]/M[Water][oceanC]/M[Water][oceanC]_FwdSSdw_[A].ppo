#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanC_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _919;
float _3305;
float _3306;
float _3307;
float _3308;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    float _228 = cbPerFrame._m0[22u].x * 0.02999999932944774627685546875;
    float _230 = cbPerFrame._m0[22u].x * (-0.00999999977648258209228515625);
    float _234 = cbPerFrame._m0[22u].x * 6.5;
    uint _237 = uint(int(floor(_234)));
    float _238 = fract(_234);
    uint _239 = _237 + 1u;
    uint _240 = uint(int(cbMtdParam._m0[9u].z * cbMtdParam._m0[9u].y));
    float _243 = float(int(_237 - _240 * (_237 / _240)));
    float _244 = _243 - cbMtdParam._m0[9u].y * trunc(_243 / cbMtdParam._m0[9u].y);
    float _246 = floor(_243 / cbMtdParam._m0[9u].y);
    float _247 = float(int(_239 - _240 * (_239 / _240)));
    float _248 = _247 - cbMtdParam._m0[9u].y * trunc(_247 / cbMtdParam._m0[9u].y);
    float _250 = floor(_247 / cbMtdParam._m0[9u].y);
    float _251 = 1.0 / cbMtdParam._m0[9u].y;
    float _253 = 1.0 / cbMtdParam._m0[9u].z;
    float _254 = fract(_228 + (TEXCOORD.x * 2.0));
    float _255 = fract(_230 + (TEXCOORD.y * 5.0));
    vec4 _276 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_254 + _248) * _251) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_255 + _250) * _253) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _285 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_254 + _244) * _251) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_255 + _246) * _253) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _287 = _285.x;
    float _288 = _285.y;
    float _300 = fract(_228 + (TEXCOORD.x * 0.5));
    float _301 = fract(_230 + (TEXCOORD.y * 0.5));
    vec4 _314 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_300 + _248) * _251) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_301 + _250) * _253) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _322 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_300 + _244) * _251) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_301 + _246) * _253) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _324 = _322.x;
    float _325 = _322.y;
    float _330 = ((_314.x - _324) * _238) + _324;
    float _331 = ((_314.y - _325) * _238) + _325;
    float _340 = (((((((_276.x - _287) * _238) + _287) - _330) * cbMtdParam._m0[9u].x) + _330) * 2.0) + (-1.0);
    float _342 = (((((((_276.y - _288) * _238) + _288) - _331) * cbMtdParam._m0[9u].x) + _331) * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3317 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))));
    float _351 = fma(_348, _214, fma(_342, _206 * TANGENT.x, (_192 * _185) * _340));
    float _354 = fma(_348, _215, fma(_342, _206 * TANGENT.y, (_192 * _186) * _340));
    float _357 = fma(_348, _216, fma(_342, _206 * TANGENT.z, (_192 * _187) * _340));
    float _361 = inversesqrt(dot(vec3(_351, _354, _357), vec3(_351, _354, _357)));
    float _362 = _361 * _351;
    float _363 = _361 * _354;
    float _364 = _361 * _357;
    float _380 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _432 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _422);
    float _433 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _422);
    float _434 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _422);
    float _438 = inversesqrt(dot(vec3(_432, _433, _434), vec3(_432, _433, _434)));
    float _439 = _432 * _438;
    float _440 = _433 * _438;
    float _441 = _434 * _438;
    vec4 _446 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _448 = _446.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _599 = sqrt(((_432 * _432) + (_433 * _433)) + (_434 * _434));
        float _605 = (cbMatDynParam._m0[5u].x * _599) + cbMatDynParam._m0[5u].y;
        float _3328 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _606 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _610 = (cbMatDynParam._m0[5u].z * _599) + cbMatDynParam._m0[5u].w;
        float _3339 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) - _606)) + _606) < ((_448 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _460 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _461 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _481 = fma(_364, cbSceneParam._m0[5u].z, fma(_363, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _362));
    float _484 = fma(_364, cbSceneParam._m0[6u].z, fma(_363, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _362));
    float _487 = fma(_364, cbSceneParam._m0[7u].z, fma(_363, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _362));
    uint _503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _505 = _503 + 9u;
    uint _506 = _505 + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * 0.00369799998588860034942626953125) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * 0.086921997368335723876953125) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * 0.1275610029697418212890625) * cbInstanceData._m0[_506].z;
    float _3350 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _460, cbSceneParam._m0[86u].y * _461));
    float _529 = _526.x * TEXCOORD.z;
    float _530 = dot(vec3(_362, _363, _364), vec3(_439, _440, _441));
    float _533 = _530 * 2.0;
    float _537 = (_533 * _362) - _439;
    float _538 = (_533 * _363) - _440;
    float _539 = (_533 * _364) - _441;
    float _543 = abs(dot(vec3(_439, _440, _441), vec3(_362, _363, _364)));
    float _3383 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _551 = exp2(log2(1.0 - ((isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.999000012874603271484375)) * 4.949747562408447265625);
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _918;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _644 = fma(_588, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580));
        float _648 = fma(_588, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580));
        float _652 = fma(_588, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580));
        float _676 = _580 + _362;
        float _677 = _584 + _363;
        float _678 = _588 + _364;
        float _688 = fma(_678, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676)) - _644;
        float _689 = fma(_678, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676)) - _648;
        float _690 = fma(_678, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676)) - _652;
        float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
        float _707 = ((_694 * _688) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_644 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _708 = ((_694 * _689) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_648 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_694 * _690) / cbModelParam._m0[34u].z) + ((((((_652 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        float _746 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_712.x + (-0.5));
        float _748 = _746 * (_712.y + (-0.5));
        float _749 = _746 * (_712.z + (-0.5));
        float _756 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_719.x + (-0.5));
        float _758 = _756 * (_719.y + (-0.5));
        float _759 = _756 * (_719.z + (-0.5));
        float _766 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_726.x + (-0.5));
        float _768 = _766 * (_726.y + (-0.5));
        float _769 = _766 * (_726.z + (-0.5));
        float _776 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_733.x + (-0.5));
        float _778 = _776 * (_733.y + (-0.5));
        float _779 = _776 * (_733.z + (-0.5));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = _747 * 0.5;
        float _784 = _757 * 0.5;
        float _785 = _767 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _800 = (dot(vec3(_362, _363, _364), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _810 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3431 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_812 + 1.0))) + _817) * _780;
        float _827 = _748 * 0.5;
        float _828 = _758 * 0.5;
        float _829 = _768 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_362, _363, _364), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3464 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_854 + 1.0))) + _859) * _781;
        float _869 = _749 * 0.5;
        float _870 = _759 * 0.5;
        float _871 = _769 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_362, _363, _364), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3497 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_896 + 1.0))) + _901) * _782;
        _918 = _749;
        _920 = _748;
        _921 = _747;
        _922 = _759;
        _923 = _758;
        _924 = _757;
        _925 = _769;
        _926 = _768;
        _927 = _767;
        _928 = _782;
        _929 = _781;
        _930 = _780;
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
    }
    else
    {
        _918 = _919;
        _920 = _919;
        _921 = _919;
        _922 = _919;
        _923 = _919;
        _924 = _919;
        _925 = _919;
        _926 = _919;
        _927 = _919;
        _928 = _919;
        _929 = _919;
        _930 = _919;
        _931 = 0.0;
        _932 = 0.0;
        _933 = 0.0;
    }
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _962 = fma(_588, cbModelParam._m0[30u].z, fma(_584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _580));
        float _966 = fma(_588, cbModelParam._m0[31u].z, fma(_584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _580));
        float _970 = fma(_588, cbModelParam._m0[32u].z, fma(_584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _580));
        float _993 = _580 + _362;
        float _994 = _584 + _363;
        float _995 = _588 + _364;
        float _1005 = fma(_995, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993)) - _962;
        float _1006 = fma(_995, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993)) - _966;
        float _1007 = fma(_995, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993)) - _970;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_962 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_966 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[35u].z) + ((((((_970 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1061 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1028.x + (-0.5));
        float _1063 = _1061 * (_1028.y + (-0.5));
        float _1064 = _1061 * (_1028.z + (-0.5));
        float _1071 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1035.x + (-0.5));
        float _1073 = _1071 * (_1035.y + (-0.5));
        float _1074 = _1071 * (_1035.z + (-0.5));
        float _1081 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1042.x + (-0.5));
        float _1083 = _1081 * (_1042.y + (-0.5));
        float _1084 = _1081 * (_1042.z + (-0.5));
        float _1091 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1049.x + (-0.5));
        float _1093 = _1091 * (_1049.y + (-0.5));
        float _1094 = _1091 * (_1049.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_362, _363, _364), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3560 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1125 + 1.0))) + _1130) * _1095;
        float _1140 = _1063 * 0.5;
        float _1141 = _1073 * 0.5;
        float _1142 = _1083 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_362, _363, _364), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3593 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1167 + 1.0))) + _1172) * _1096;
        float _1182 = _1064 * 0.5;
        float _1183 = _1074 * 0.5;
        float _1184 = _1084 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_362, _363, _364), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3626 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1209 + 1.0))) + _1214) * _1097;
        _1231 = _1064;
        _1232 = _1063;
        _1233 = _1062;
        _1234 = _1074;
        _1235 = _1073;
        _1236 = _1072;
        _1237 = _1084;
        _1238 = _1083;
        _1239 = _1082;
        _1240 = _1097;
        _1241 = _1096;
        _1242 = _1095;
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _919;
        _1232 = _919;
        _1233 = _919;
        _1234 = _919;
        _1235 = _919;
        _1236 = _919;
        _1237 = _919;
        _1238 = _919;
        _1239 = _919;
        _1240 = _919;
        _1241 = _919;
        _1242 = _919;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _931)) + _931;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _932)) + _932;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _933)) + _933;
    float _1278 = fma(_1257, cbSceneParam._m0[89u].z, fma(_1256, cbSceneParam._m0[89u].y, _1255 * cbSceneParam._m0[89u].x));
    float _1281 = fma(_1257, cbSceneParam._m0[90u].z, fma(_1256, cbSceneParam._m0[90u].y, _1255 * cbSceneParam._m0[90u].x));
    float _1284 = fma(_1257, cbSceneParam._m0[91u].z, fma(_1256, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1255));
    float _1299 = _537 * 0.5;
    float _1300 = _538 * 0.5;
    float _1301 = _539 * 0.5;
    float _1302 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1305 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1308 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1342;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1315 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_918, _922, _925, _928));
        float _1319 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_920, _923, _926, _929));
        float _1323 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_921, _924, _927, _930));
        float _1330 = dot(vec4(cbModelParam._m0[39u]), vec4(_1299, _1300, _1301, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1353;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1344 = dot(vec4(cbModelParam._m0[40u]), vec4(_1299, _1300, _1301, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1357 = (_1353 * cbModelParam._m0[1u].x) + (_1342 * (1.0 - cbModelParam._m0[1u].x));
    float _1366 = cbModelParam._m0[25u].z * 0.019999980926513671875;
    float _1368 = isnan(_1366) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1366 : min(cbModelParam._m0[25u].z, _1366));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1417 = fma(_588, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580)) + cbModelParam._m0[13u].w;
        float _1421 = fma(_588, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580)) + cbModelParam._m0[14u].w;
        float _1425 = fma(_588, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580)) + cbModelParam._m0[15u].w;
        float _1428 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1431 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1434 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1461;
        if (_1428 > 0.0)
        {
            _1461 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1461 = frontier_phi_19_17_ladder;
        }
        float _1687;
        if (_1431 > 0.0)
        {
            _1687 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1687 = frontier_phi_28_24_ladder;
        }
        float _1933;
        if (_1434 > 0.0)
        {
            _1933 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1933 = frontier_phi_40_35_ladder;
        }
        float _1935 = isnan(_1687) ? _1461 : (isnan(_1461) ? _1687 : min(_1461, _1687));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1428) + _1417;
        float _1941 = (_1936 * _1431) + _1421;
        float _1942 = (_1936 * _1434) + _1425;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2065 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1368);
            frontier_phi_18_40_ladder = _2065.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2065.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2065.x * cbModelParam._m0[1u].y;
        }
        _1450 = frontier_phi_18_40_ladder_2;
        _1452 = frontier_phi_18_40_ladder_1;
        _1454 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1368);
        _1450 = _1438.x * cbModelParam._m0[1u].y;
        _1452 = _1438.y * cbModelParam._m0[1u].y;
        _1454 = _1438.z * cbModelParam._m0[1u].y;
    }
    float _1457 = cbModelParam._m0[25u].w * 0.019999980926513671875;
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1457 : min(cbModelParam._m0[25u].w, _1457));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_588, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_588, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_588, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1528 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1531 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1692;
        if (_1525 > 0.0)
        {
            _1692 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1692 = frontier_phi_30_26_ladder;
        }
        float _1960;
        if (_1528 > 0.0)
        {
            _1960 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1960 = frontier_phi_42_37_ladder;
        }
        float _2163;
        if (_1531 > 0.0)
        {
            _2163 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2163 = frontier_phi_51_48_ladder;
        }
        float _2165 = isnan(_1960) ? _1692 : (isnan(_1692) ? _1960 : min(_1692, _1960));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1525) + _1514;
        float _2171 = (_2166 * _1528) + _1518;
        float _2172 = (_2166 * _1531) + _1522;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1458);
            frontier_phi_27_51_ladder = _2370.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2370.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2370.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_27_51_ladder_2;
        _1552 = frontier_phi_27_51_ladder_1;
        _1554 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1458);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1566 = ((0.0397587902843952178955078125 - (_551 * 0.03859509527683258056640625)) + (_551 * 0.96097481250762939453125)) * _529;
    float _1567 = _1566 * ((cbModelParam._m0[1u].w * (_1550 - _1450)) + _1450);
    float _1568 = _1566 * ((cbModelParam._m0[1u].w * (_1552 - _1452)) + _1452);
    float _1569 = _1566 * ((cbModelParam._m0[1u].w * (_1554 - _1454)) + _1454);
    float _1572 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    vec4 _1586 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_460, _461));
    float _1588 = _1586.w;
    float _1600 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1588);
    float _1601 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1588);
    float _1602 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1588);
    uvec4 _1606 = floatBitsToUint(cbInstanceData._m0[_503 + 5u]);
    uint _1608 = _1606.x * 14u;
    uint _1609 = _1608 + 13u;
    float _1616 = _529 + (-1.0);
    float _1621 = (cbLight._m0[_1609].x * _1616) + 1.0;
    float _1622 = (cbLight._m0[_1609].y * _1616) + 1.0;
    float _1623 = (cbLight._m0[_1609].z * _1616) + 1.0;
    float _1624 = (cbLight._m0[_1609].w * _1616) + 1.0;
    uint _1625 = _1608 + 5u;
    float _1631 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
    uint _1635 = _1608 + 4u;
    float _1645 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
    uint _1649 = _1608 | 1u;
    float _1660 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_362, _363, _364));
    float _1663 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_362, _363, _364));
    float _3762 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _3773 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1668 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.3183098733425140380859375;
    float _1670 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.3183098733425140380859375;
    float _1677 = ((cbLight._m0[_1625].x * _1631) * _1670) + (((cbLight._m0[_1635].x * _1600) * _1645) * _1668);
    float _1678 = ((_1631 * cbLight._m0[_1625].y) * _1670) + (((cbLight._m0[_1635].y * _1601) * _1645) * _1668);
    float _1679 = ((_1631 * cbLight._m0[_1625].z) * _1670) + (((cbLight._m0[_1635].z * _1602) * _1645) * _1668);
    uvec4 _1684 = floatBitsToUint(cbLight._m0[_1608 + 12u]);
    bool _1686 = _1684.x == 0u;
    float _1697;
    float _1699;
    float _1701;
    if (_1686)
    {
        _1697 = _1677;
        _1699 = _1678;
        _1701 = _1679;
    }
    else
    {
        uint _1705 = _1608 + 6u;
        float _1721 = (dot(vec3(cbLight._m0[_1608 + 2u].xyz), vec3(_362, _363, _364)) * 0.5) + 0.5;
        float _1722 = _1721 * _1721;
        float _3784 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1724 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _1697 = (((cbLight._m0[_1705].x * 0.3183098733425140380859375) * _1723) * _1724) + _1677;
        _1699 = (((cbLight._m0[_1705].y * 0.3183098733425140380859375) * _1723) * _1724) + _1678;
        _1701 = (((cbLight._m0[_1705].z * 0.3183098733425140380859375) * _1723) * _1724) + _1679;
    }
    bool _1704 = _1684.y == 0u;
    float _1742;
    float _1744;
    float _1746;
    if (_1704)
    {
        _1742 = _1697;
        _1744 = _1699;
        _1746 = _1701;
    }
    else
    {
        uint _1904 = _1608 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1608 + 3u].xyz), vec3(_362, _363, _364)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3800 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1923 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1742 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1697;
        _1744 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1699;
        _1746 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1701;
    }
    uint _1749 = _1608 + 8u;
    float _1762 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1608].w)) * 0.949999988079071044921875);
    float _1763 = _1762 * _1762;
    float _1764 = cbLight._m0[_1608].x + _439;
    float _1765 = cbLight._m0[_1608].y + _440;
    float _1766 = cbLight._m0[_1608].z + _441;
    float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
    float _1771 = _1770 * _1764;
    float _1772 = _1770 * _1765;
    float _1773 = _1770 * _1766;
    float _1774 = dot(vec3(_362, _363, _364), vec3(cbLight._m0[_1608].xyz));
    float _3816 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1777 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _1778 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1779 = dot(vec3(_362, _363, _364), vec3(_1771, _1772, _1773));
    float _3838 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1783 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_1771, _1772, _1773));
    float _3849 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1787 = _1763 * _1763;
    float _1791 = ((_1782 * _1782) * (_1787 + (-1.0))) + 1.0;
    float _1802 = (exp2(log2(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = 1.0 - _1763;
    float _1815 = (0.5 / (((_1778 * ((_1777 * _1804) + _1763)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _1804) + _1763) * _1777))) * _1777;
    float _3860 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1787 / ((_1791 * _1791) * 3.141590118408203125));
    uint _1831 = _1608 + 9u;
    float _1841 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1649].w)) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1649].x + _439;
    float _1844 = cbLight._m0[_1649].y + _440;
    float _1845 = cbLight._m0[_1649].z + _441;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_362, _363, _364), vec3(cbLight._m0[_1649].xyz));
    float _3871 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1857 = dot(vec3(_362, _363, _364), vec3(_1850, _1851, _1852));
    float _3882 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1850, _1851, _1852));
    float _3893 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1879 = 1.0 - _1842;
    float _1889 = (0.5 / (((_1778 * ((_1856 * _1879) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _1879) + _1842) * _1856))) * _1856;
    float _3904 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1901 = (((_1878 * cbLight._m0[_1831].x) * _1891) * _1631) + ((((cbLight._m0[_1749].x * _1600) * _1802) * _1817) * _1645);
    float _1902 = (((_1878 * cbLight._m0[_1831].y) * _1891) * _1631) + ((((cbLight._m0[_1749].y * _1601) * _1802) * _1817) * _1645);
    float _1903 = (((_1878 * cbLight._m0[_1831].z) * _1891) * _1631) + ((((cbLight._m0[_1749].z * _1602) * _1802) * _1817) * _1645);
    float _1965;
    float _1967;
    float _1969;
    if (_1686)
    {
        _1965 = _1901;
        _1967 = _1902;
        _1969 = _1903;
    }
    else
    {
        uint _1971 = _1608 + 2u;
        uint _1975 = _1608 + 10u;
        float _1988 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1971].w)) * 0.949999988079071044921875);
        float _1989 = _1988 * _1988;
        float _1990 = cbLight._m0[_1971].x + _439;
        float _1991 = cbLight._m0[_1971].y + _440;
        float _1992 = cbLight._m0[_1971].z + _441;
        float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
        float _1997 = _1996 * _1990;
        float _1998 = _1996 * _1991;
        float _1999 = _1996 * _1992;
        float _2000 = dot(vec3(_362, _363, _364), vec3(cbLight._m0[_1971].xyz));
        float _3915 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2003 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2004 = dot(vec3(_362, _363, _364), vec3(_1997, _1998, _1999));
        float _3926 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2008 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_1997, _1998, _1999));
        float _3937 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2012 = _1989 * _1989;
        float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
        float _2025 = (exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2026 = 1.0 - _1989;
        float _2036 = (0.5 / (((_1778 * ((_2003 * _2026) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _2026) + _1989) * _2003))) * _2003;
        float _3948 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2038 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
        float _2039 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _1965 = (((_2025 * cbLight._m0[_1975].x) * _2038) * _2039) + _1901;
        _1967 = (((_2025 * cbLight._m0[_1975].y) * _2038) * _2039) + _1902;
        _1969 = (((_2025 * cbLight._m0[_1975].z) * _2038) * _2039) + _1903;
    }
    float _2074;
    float _2076;
    float _2078;
    if (_1704)
    {
        _2074 = _1965;
        _2076 = _1967;
        _2078 = _1969;
    }
    else
    {
        uint _2085 = _1608 + 3u;
        uint _2089 = _1608 + 11u;
        float _2102 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_2085].w)) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2085].x + _439;
        float _2105 = cbLight._m0[_2085].y + _440;
        float _2106 = cbLight._m0[_2085].z + _441;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_362, _363, _364), vec3(cbLight._m0[_2085].xyz));
        float _3964 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2118 = dot(vec3(_362, _363, _364), vec3(_2111, _2112, _2113));
        float _3975 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2111, _2112, _2113));
        float _3986 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2140 = 1.0 - _2103;
        float _2150 = (0.5 / (((_1778 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _2140) + _2103) * _2117))) * _2117;
        float _3997 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _2074 = (((_2139 * cbLight._m0[_2089].x) * _2152) * _2153) + _1965;
        _2076 = (((_2139 * cbLight._m0[_2089].y) * _2152) * _2153) + _1967;
        _2078 = (((_2139 * cbLight._m0[_2089].z) * _2152) * _2153) + _1969;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1606.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _461) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _460) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
        }
        else
        {
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            uint _2534 = 0u;
            uint _2543;
            bool _2544;
            for (;;)
            {
                _2543 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                _2544 = _2543 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2544)
                {
                    frontier_phi_68_pred = _2530;
                    frontier_phi_68_pred_1 = _2533;
                    frontier_phi_68_pred_2 = _2532;
                    frontier_phi_68_pred_3 = _2531;
                    frontier_phi_68_pred_4 = _2529;
                    frontier_phi_68_pred_5 = _2528;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2543;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2534 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2229;
                        float _2740 = _2699.y - _2230;
                        float _2741 = _2699.z - _2231;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_481, _484, _487), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4023 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2229;
                        float _2775 = (-0.0) - _2230;
                        float _2776 = (-0.0) - _2231;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2797 = sqrt(1.0 - ((1.0 - (_2791 * _2791)) * 0.999898970127105712890625));
                        float _2798 = _2797 * _2797;
                        float _2799 = _2798 * _2798;
                        float _2800 = _2781 + _2746;
                        float _2801 = _2782 + _2747;
                        float _2802 = _2783 + _2748;
                        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
                        float _2810 = dot(vec3(_481, _484, _487), vec3(_2781, _2782, _2783));
                        float _4039 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2814 = dot(vec3(_481, _484, _487), vec3(_2806 * _2800, _2806 * _2801, _2806 * _2802));
                        float _4050 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2821 = ((_2817 * _2817) * (_2799 + (-1.0))) + 1.0;
                        float _2822 = _2759 * _2798;
                        float _2823 = _2822 * _2822;
                        float _2826 = ((1.0 - _2823) * _2749) + _2823;
                        float _4061 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2828 = 1.0 - _2798;
                        float _2838 = (0.5 / (((_2827 * ((_2813 * _2828) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2827 * _2828) + _2798) * _2813))) * _2827;
                        float _4072 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2849 = (((_2799 * 3.1415927410125732421875) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) / ((_2821 * _2821) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2603 = (_2770 * _2718.x) + _2676;
                        _2604 = (_2770 * _2718.y) + _2677;
                        _2605 = (_2770 * _2718.z) + _2678;
                        _2600 = (_2849 * _2735.x) + _2673;
                        _2601 = (_2849 * _2735.y) + _2674;
                        _2602 = (_2849 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_68_pred = _2602;
                    frontier_phi_68_pred_1 = _2605;
                    frontier_phi_68_pred_2 = _2604;
                    frontier_phi_68_pred_3 = _2603;
                    frontier_phi_68_pred_4 = _2601;
                    frontier_phi_68_pred_5 = _2600;
                }
                _2380 = frontier_phi_68_pred;
                _2386 = frontier_phi_68_pred_1;
                _2384 = frontier_phi_68_pred_2;
                _2382 = frontier_phi_68_pred_3;
                _2378 = frontier_phi_68_pred_4;
                _2376 = frontier_phi_68_pred_5;
                uint _2535 = _2534 + 1u;
                if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2528 = _2376;
                    _2529 = _2378;
                    _2530 = _2380;
                    _2531 = _2382;
                    _2532 = _2384;
                    _2533 = _2386;
                    _2534 = _2535;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
        }
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.z;
        uint _2392 = (_2390 >> 8u) & 15u;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((4294967295u << _2392) & _2275) == 0u)
        {
            _2496 = _2375;
            _2498 = _2377;
            _2500 = _2379;
            _2502 = _2381;
            _2504 = _2383;
            _2506 = _2385;
        }
        else
        {
            float _2521 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2522 = _2521 * _2229;
            float _2523 = _2521 * _2230;
            float _2524 = _2521 * _2231;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2392 < ((_2390 >> 12u) & 15u))
            {
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2656 = _2375;
                float _2657 = _2377;
                float _2658 = _2379;
                float _2659 = _2381;
                float _2660 = _2383;
                float _2661 = _2385;
                uint _2662 = _2392;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2672)
                    {
                        frontier_phi_79_pred = _2661;
                        frontier_phi_79_pred_1 = _2660;
                        frontier_phi_79_pred_2 = _2659;
                        frontier_phi_79_pred_3 = _2658;
                        frontier_phi_79_pred_4 = _2657;
                        frontier_phi_79_pred_5 = _2656;
                    }
                    else
                    {
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _2876 = _2656;
                        float _2877 = _2657;
                        float _2878 = _2658;
                        float _2879 = _2659;
                        float _2880 = _2660;
                        float _2881 = _2661;
                        uint _2882 = _2671;
                        uint _2883;
                        vec4 _2908;
                        float _2909;
                        vec4 _2924;
                        vec3 _2936;
                        vec4 _2952;
                        vec4 _2968;
                        float _3015;
                        bool _3016;
                        for (;;)
                        {
                            uint _2893 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2882));
                            _2883 = (_2882 + 4294967295u) & _2882;
                            uint _2895 = _2893 * 40u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            _2909 = _2908.w;
                            uint _2911 = (_2893 * 40u) + 4u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2926 = (_2893 * 40u) + 8u;
                            _2936 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x));
                            uint _2939 = (_2893 * 40u) + 16u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2893 * 40u) + 20u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2893 * 40u) + 24u;
                            vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2990 = (_2893 * 40u) + 28u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3015 = fma(_2231, _3003.z, fma(_2230, _3003.y, _3003.x * _2229)) + _3003.w;
                            _3016 = !((fma(_2231, _2984.z, fma(_2230, _2984.y, _2984.x * _2229)) + _2984.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3016)
                            {
                                float _3043 = _2908.x - _2229;
                                float _3044 = _2908.y - _2230;
                                float _3045 = _2908.z - _2231;
                                float _3046 = dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045));
                                float _3049 = inversesqrt(_3046);
                                float _3050 = _3049 * _3043;
                                float _3051 = _3049 * _3044;
                                float _3052 = _3049 * _3045;
                                float _3056 = 1.0 - (_3046 / (_2909 * _2909));
                                float _4083 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3061 = sqrt(_3046) * _2924.w;
                                float _3063 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                                float _3064 = _3063 * _3063;
                                float _3067 = ((1.0 - _3064) * dot(vec3(_3050, _3051, _3052), vec3(_481, _484, _487))) + _3064;
                                float _3070 = _3061 * _3061;
                                float _3074 = (fma(_2231, _2952.z, fma(_2230, _2952.y, _2952.x * _2229)) + _2952.w) / _3015;
                                float _3075 = (fma(_2231, _2968.z, fma(_2230, _2968.y, _2968.x * _2229)) + _2968.w) / _3015;
                                float _3079 = 1.0 - dot(vec2(_3074, _3075), vec2(_3074, _3075));
                                float _4099 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3081 = _3080 * (((isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))) * _3057) / ((_3070 * 0.699999988079071044921875) + 1.0));
                                float _3093 = exp2(log2(1.0 / ((_3070 * 3.5) + 5.0)) * 0.25);
                                float _3098 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * 0.999898970127105712890625));
                                float _3099 = _3098 * _3098;
                                float _3100 = _3099 * _3099;
                                float _3101 = _3050 - _2522;
                                float _3102 = _3051 - _2523;
                                float _3103 = _3052 - _2524;
                                float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                                float _3111 = dot(vec3(_481, _484, _487), vec3((-0.0) - _2522, (-0.0) - _2523, (-0.0) - _2524));
                                float _4110 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3115 = dot(vec3(_481, _484, _487), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                                float _4121 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3118 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                                float _3123 = _3063 * _3099;
                                float _3124 = _3123 * _3123;
                                float _3130 = ((1.0 - _3124) * dot(vec3(_481, _484, _487), vec3(_3050, _3051, _3052))) + _3124;
                                float _4132 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3132 = 1.0 - _3099;
                                float _3142 = (0.5 / (((_3131 * ((_3114 * _3132) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3099) * _3114))) * _3131;
                                float _4143 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3152 = (_3080 * _3057) * (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_3122 * _3122) * ((_3070 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3081 * _2924.z;
                                frontier_phi_85_pred_1 = _3081 * _2924.y;
                                frontier_phi_85_pred_2 = _3081 * _2924.x;
                                frontier_phi_85_pred_3 = _3152 * _2936.z;
                                frontier_phi_85_pred_4 = _3152 * _2936.y;
                                frontier_phi_85_pred_5 = _3152 * _2936.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3161 = frontier_phi_85_pred;
                            _3160 = frontier_phi_85_pred_1;
                            _3159 = frontier_phi_85_pred_2;
                            _3158 = frontier_phi_85_pred_3;
                            _3157 = frontier_phi_85_pred_4;
                            _3156 = frontier_phi_85_pred_5;
                            _2866 = _3159 + _2879;
                            _2867 = _3160 + _2880;
                            _2868 = _3161 + _2881;
                            _2863 = _3156 + _2876;
                            _2864 = _3157 + _2877;
                            _2865 = _3158 + _2878;
                            if (_2883 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2883;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2868;
                        frontier_phi_79_pred_1 = _2867;
                        frontier_phi_79_pred_2 = _2866;
                        frontier_phi_79_pred_3 = _2865;
                        frontier_phi_79_pred_4 = _2864;
                        frontier_phi_79_pred_5 = _2863;
                    }
                    _2507 = frontier_phi_79_pred;
                    _2505 = frontier_phi_79_pred_1;
                    _2503 = frontier_phi_79_pred_2;
                    _2501 = frontier_phi_79_pred_3;
                    _2499 = frontier_phi_79_pred_4;
                    _2497 = frontier_phi_79_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2497;
                        _2657 = _2499;
                        _2658 = _2501;
                        _2659 = _2503;
                        _2660 = _2505;
                        _2661 = _2507;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2503;
                frontier_phi_60_61_ladder_1 = _2507;
                frontier_phi_60_61_ladder_2 = _2505;
                frontier_phi_60_61_ladder_3 = _2501;
                frontier_phi_60_61_ladder_4 = _2499;
                frontier_phi_60_61_ladder_5 = _2497;
            }
            else
            {
                frontier_phi_60_61_ladder = _2381;
                frontier_phi_60_61_ladder_1 = _2385;
                frontier_phi_60_61_ladder_2 = _2383;
                frontier_phi_60_61_ladder_3 = _2379;
                frontier_phi_60_61_ladder_4 = _2377;
                frontier_phi_60_61_ladder_5 = _2375;
            }
            _2496 = frontier_phi_60_61_ladder_5;
            _2498 = frontier_phi_60_61_ladder_4;
            _2500 = frontier_phi_60_61_ladder_3;
            _2502 = frontier_phi_60_61_ladder;
            _2504 = frontier_phi_60_61_ladder_2;
            _2506 = frontier_phi_60_61_ladder_1;
        }
        float _2511 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
        _2287 = (_2511 * _2502) + _1742;
        _2289 = (_2511 * _2504) + _1744;
        _2291 = (_2511 * _2506) + _1746;
        _2293 = ((_2496 * 0.039999999105930328369140625) * _2511) + _2074;
        _2295 = ((_2498 * 0.039999999105930328369140625) * _2511) + _2076;
        _2297 = ((_2500 * 0.039999999105930328369140625) * _2511) + _2078;
    }
    else
    {
        _2287 = _1742;
        _2289 = _1744;
        _2291 = _1746;
        _2293 = _2074;
        _2295 = _2076;
        _2297 = _2078;
    }
    float _4159 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4170 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4181 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2314 = ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2287 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _529))) + ((_2293 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1357)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2289 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _529))) + ((_2295 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1357)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2291 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _529))) + ((_2297 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1357)) * cbPerFrame._m0[3u].x);
    uint _2317 = _503 + 6u;
    float _2325 = _460 / cbSceneParam._m0[86u].x;
    float _2326 = _461 / cbSceneParam._m0[86u].y;
    vec4 _2340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, (log2((isnan(cbSceneParam._m0[77u].w) ? _380 : (isnan(_380) ? cbSceneParam._m0[77u].w : min(_380, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2342 = _2340.x;
    float _2343 = _2340.y;
    float _2344 = _2340.z;
    float _2345 = _2340.w;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_380 > cbSceneParam._m0[78u].w)
    {
        float _2400 = isnan(_380) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _380 : min(cbSceneParam._m0[80u].w, _380));
        float _2401 = _2400 / _380;
        float _2412 = _2401 * _432;
        float _2413 = _433 * _2401;
        float _2414 = (-0.0) - _2413;
        float _2415 = _2401 * _434;
        float _2417 = (cbSceneParam._m0[77u].w * _2414) / _2400;
        float _2418 = _2417 + cbSceneParam._m0[79u].w;
        float _2419 = cbSceneParam._m0[79u].w - _2413;
        float _2425 = sqrt(((_2412 * _2412) + (_2413 * _2413)) + (_2415 * _2415));
        float _2428 = (1.0 - (cbSceneParam._m0[77u].w / _2400)) * _2425;
        float _2433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2414 - _2417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2418 > 0.0) ? exp2(_2433 * _2418) : (2.0 - exp2(_2435 * _2418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2428;
        }
        else
        {
            float _2557 = 1.0 / cbSceneParam._m0[80u].x;
            float _2558 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : max(_2418, _2419));
            float _2559 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : min(_2418, _2419));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            _2613 = ((abs(_2425 / _2414) * cbSceneParam._m0[80u].y) * ((((_2568 - _2569) * 2.0) - ((exp2(_2433 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)))) - exp2(_2433 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))))) * _2557)) - ((exp2(_2435 * _2568) - exp2(_2435 * _2569)) * _2557))) + (_2428 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2345);
        _2437 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2342;
        _2439 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2343;
        _2441 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2344;
        _2443 = _2624 * _2345;
    }
    else
    {
        _2437 = _2342;
        _2439 = _2343;
        _2441 = _2344;
        _2443 = _2345;
    }
    bool _2651;
    vec4 _2453;
    vec4 _2476;
    float _2478;
    float _2482;
    float _2483;
    float _2484;
    float _2485;
    bool _2495;
    for (;;)
    {
        _2453 = cbMatDynParam._m0[0u];
        float _2455 = roundEven(_2453.y);
        bool _2456 = _2455 == 3.0;
        float _2458 = log2(_2443);
        float _2465 = exp2(_2458 * cbSceneParam._m0[78u].x) * _2314;
        float _2466 = exp2(_2458 * cbSceneParam._m0[78u].y) * _2315;
        float _2467 = exp2(_2458 * cbSceneParam._m0[78u].z) * _2316;
        float _2474 = _448 + (-0.5);
        _2476 = cbMtdParam._m0[1u];
        _2478 = _2476.y * _2474;
        float _2481 = (_2455 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2482 = _2481 * (_2456 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2437)));
        _2483 = _2481 * (_2456 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2439)));
        _2484 = _2481 * (_2456 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2441)));
        _2485 = _2474 * 0.999000012874603271484375;
        _2495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2495)
        {
            if ((cbInstanceData._m0[_503 + 7u].x + _2485) < 0.5)
            {
                _2651 = true;
                break;
            }
        }
        uint _2592 = _505 + uint(_2453.w);
        if ((cbInstanceData._m0[_2592].w < 1.0) && ((cbInstanceData._m0[_2592].w + _2485) < 0.5))
        {
            _2651 = true;
            break;
        }
        if ((_2478 + 1.0) < _2476.x)
        {
            _2651 = true;
            break;
        }
        _2651 = false;
        break;
    }
    float _2854;
    if (_2651)
    {
        discard_state = true;
        _2854 = 0.0;
    }
    else
    {
        _2854 = cbInstanceData._m0[_2317].w;
    }
    SV_Target.x = _2482;
    SV_Target.y = _2483;
    SV_Target.z = _2484;
    SV_Target.w = _2854;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2317].w;
    discard_exit();
}


