#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec3 TEXCOORD_1;
layout(location = 3, component = 3) out float TEXCOORD_11;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_11 = 0.0;
    float _138 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _140 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _141 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _151 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _152 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _153 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _159 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _161 = texelFetch(g_InstanceIndexBuffer, int(_159));
    uint _162 = _161.x;
    uint _172 = (floatBitsToUint(cbInstanceData._m0[(_162 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _179 = _172 + 1u;
    uint _186 = _172 + 2u;
    precise float _193 = POSITION.x * cbObjMatrix._m0[_172].x;
    precise float _194 = POSITION.y * cbObjMatrix._m0[_172].y;
    precise float _195 = _194 + _193;
    precise float _196 = POSITION.z * cbObjMatrix._m0[_172].z;
    precise float _197 = _196 + _195;
    precise float _198 = 1.0 * cbObjMatrix._m0[_172].w;
    precise float _200 = _198 + _197;
    precise float _201 = POSITION.x * cbObjMatrix._m0[_179].x;
    precise float _202 = POSITION.y * cbObjMatrix._m0[_179].y;
    precise float _203 = _202 + _201;
    precise float _204 = POSITION.z * cbObjMatrix._m0[_179].z;
    precise float _205 = _204 + _203;
    precise float _206 = 1.0 * cbObjMatrix._m0[_179].w;
    precise float _207 = _206 + _205;
    precise float _208 = POSITION.x * cbObjMatrix._m0[_186].x;
    precise float _209 = POSITION.y * cbObjMatrix._m0[_186].y;
    precise float _210 = _209 + _208;
    precise float _211 = POSITION.z * cbObjMatrix._m0[_186].z;
    precise float _212 = _211 + _210;
    precise float _213 = 1.0 * cbObjMatrix._m0[_186].w;
    precise float _214 = _213 + _212;
    float _220 = cbSceneParam._m0[3u].x - _200;
    float _221 = cbSceneParam._m0[3u].y - _207;
    float _222 = cbSceneParam._m0[3u].z - _214;
    precise float _249 = _200 - cbSceneParam._m0[3u].x;
    precise float _250 = _207 - cbSceneParam._m0[3u].y;
    precise float _251 = _214 - cbSceneParam._m0[3u].z;
    precise float _279 = _249 * cbSceneParam._m0[24u].x;
    precise float _280 = _250 * cbSceneParam._m0[24u].y;
    precise float _281 = _280 + _279;
    precise float _282 = _251 * cbSceneParam._m0[24u].z;
    precise float _283 = _282 + _281;
    precise float _284 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _285 = _284 + _283;
    precise float _286 = _249 * cbSceneParam._m0[25u].x;
    precise float _287 = _250 * cbSceneParam._m0[25u].y;
    precise float _288 = _287 + _286;
    precise float _289 = _251 * cbSceneParam._m0[25u].z;
    precise float _290 = _289 + _288;
    precise float _291 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _292 = _291 + _290;
    precise float _293 = _249 * cbSceneParam._m0[26u].x;
    precise float _294 = _250 * cbSceneParam._m0[26u].y;
    precise float _295 = _294 + _293;
    precise float _296 = _251 * cbSceneParam._m0[26u].z;
    precise float _297 = _296 + _295;
    precise float _298 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _299 = _298 + _297;
    precise float _300 = _249 * cbSceneParam._m0[27u].x;
    precise float _301 = _250 * cbSceneParam._m0[27u].y;
    precise float _302 = _301 + _300;
    precise float _303 = _251 * cbSceneParam._m0[27u].z;
    precise float _304 = _303 + _302;
    precise float _305 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _306 = _305 + _304;
    gl_Position.x = _285;
    gl_Position.y = _292;
    gl_Position.z = _299;
    gl_Position.w = _306;
    NORMAL_1.x = fma(_141, cbObjMatrix._m0[_172].z, fma(_140, cbObjMatrix._m0[_172].y, cbObjMatrix._m0[_172].x * _138));
    NORMAL_1.y = fma(_141, cbObjMatrix._m0[_179].z, fma(_140, cbObjMatrix._m0[_179].y, cbObjMatrix._m0[_179].x * _138));
    NORMAL_1.z = fma(_141, cbObjMatrix._m0[_186].z, fma(_140, cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_186].x * _138));
    NORMAL_1.w = float(_162);
    TANGENT_1.x = fma(_153, cbObjMatrix._m0[_172].z, fma(_152, cbObjMatrix._m0[_172].y, cbObjMatrix._m0[_172].x * _151));
    TANGENT_1.y = fma(_153, cbObjMatrix._m0[_179].z, fma(_152, cbObjMatrix._m0[_179].y, cbObjMatrix._m0[_179].x * _151));
    TANGENT_1.z = fma(_153, cbObjMatrix._m0[_186].z, fma(_152, cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_186].x * _151));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_220 * _220) + (_221 * _221)) + (_222 * _222));
}


