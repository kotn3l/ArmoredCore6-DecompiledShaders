#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanC_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _917;
float _3279;
float _3280;
float _3281;
float _3282;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    float _226 = cbPerFrame._m0[22u].x * 0.02999999932944774627685546875;
    float _228 = cbPerFrame._m0[22u].x * (-0.00999999977648258209228515625);
    float _232 = cbPerFrame._m0[22u].x * 6.5;
    uint _235 = uint(int(floor(_232)));
    float _236 = fract(_232);
    uint _237 = _235 + 1u;
    uint _238 = uint(int(cbMtdParam._m0[9u].z * cbMtdParam._m0[9u].y));
    float _241 = float(int(_235 - _238 * (_235 / _238)));
    float _242 = _241 - cbMtdParam._m0[9u].y * trunc(_241 / cbMtdParam._m0[9u].y);
    float _244 = floor(_241 / cbMtdParam._m0[9u].y);
    float _245 = float(int(_237 - _238 * (_237 / _238)));
    float _246 = _245 - cbMtdParam._m0[9u].y * trunc(_245 / cbMtdParam._m0[9u].y);
    float _248 = floor(_245 / cbMtdParam._m0[9u].y);
    float _249 = 1.0 / cbMtdParam._m0[9u].y;
    float _251 = 1.0 / cbMtdParam._m0[9u].z;
    float _252 = fract(_226 + (TEXCOORD.x * 2.0));
    float _253 = fract(_228 + (TEXCOORD.y * 5.0));
    vec4 _274 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_252 + _246) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_253 + _248) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _283 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_252 + _242) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_253 + _244) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _285 = _283.x;
    float _286 = _283.y;
    float _298 = fract(_226 + (TEXCOORD.x * 0.5));
    float _299 = fract(_228 + (TEXCOORD.y * 0.5));
    vec4 _312 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_298 + _246) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_299 + _248) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _320 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_298 + _242) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_299 + _244) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _322 = _320.x;
    float _323 = _320.y;
    float _328 = ((_312.x - _322) * _236) + _322;
    float _329 = ((_312.y - _323) * _236) + _323;
    float _338 = (((((((_274.x - _285) * _236) + _285) - _328) * cbMtdParam._m0[9u].x) + _328) * 2.0) + (-1.0);
    float _340 = (((((((_274.y - _286) * _236) + _286) - _329) * cbMtdParam._m0[9u].x) + _329) * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3291 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))));
    float _349 = fma(_346, _212, fma(_340, _204 * TANGENT.x, (_190 * _183) * _338));
    float _352 = fma(_346, _213, fma(_340, _204 * TANGENT.y, (_190 * _184) * _338));
    float _355 = fma(_346, _214, fma(_340, _204 * TANGENT.z, (_190 * _185) * _338));
    float _359 = inversesqrt(dot(vec3(_349, _352, _355), vec3(_349, _352, _355)));
    float _360 = _359 * _349;
    float _361 = _359 * _352;
    float _362 = _359 * _355;
    float _378 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _420);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _420);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _420);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    vec4 _444 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _446 = _444.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _597 = sqrt(((_430 * _430) + (_431 * _431)) + (_432 * _432));
        float _603 = (cbMatDynParam._m0[5u].x * _597) + cbMatDynParam._m0[5u].y;
        float _3302 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _604 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _608 = (cbMatDynParam._m0[5u].z * _597) + cbMatDynParam._m0[5u].w;
        float _3313 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) - _604)) + _604) < ((_446 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _458 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _459 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _479 = fma(_362, cbSceneParam._m0[5u].z, fma(_361, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _360));
    float _482 = fma(_362, cbSceneParam._m0[6u].z, fma(_361, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _360));
    float _485 = fma(_362, cbSceneParam._m0[7u].z, fma(_361, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _360));
    uint _501 = uint(roundEven(NORMAL.w)) * 13u;
    uint _503 = _501 + 9u;
    uint _504 = _503 + uint(cbMatDynParam._m0[0u].w);
    float _510 = (cbMtdParam._m0[0u].x * 0.00369799998588860034942626953125) * cbInstanceData._m0[_504].x;
    float _511 = (cbMtdParam._m0[0u].y * 0.086921997368335723876953125) * cbInstanceData._m0[_504].y;
    float _512 = (cbMtdParam._m0[0u].z * 0.1275610029697418212890625) * cbInstanceData._m0[_504].z;
    float _3324 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _458, cbSceneParam._m0[86u].y * _459));
    float _527 = _524.x * TEXCOORD.z;
    float _528 = dot(vec3(_360, _361, _362), vec3(_437, _438, _439));
    float _531 = _528 * 2.0;
    float _535 = (_531 * _360) - _437;
    float _536 = (_531 * _361) - _438;
    float _537 = (_531 * _362) - _439;
    float _541 = abs(dot(vec3(_437, _438, _439), vec3(_360, _361, _362)));
    float _3357 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _549 = exp2(log2(1.0 - ((isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * 0.999000012874603271484375)) * 4.949747562408447265625);
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _916;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _642 = fma(_586, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578));
        float _646 = fma(_586, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578));
        float _650 = fma(_586, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578));
        float _674 = _578 + _360;
        float _675 = _582 + _361;
        float _676 = _586 + _362;
        float _686 = fma(_676, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674)) - _642;
        float _687 = fma(_676, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674)) - _646;
        float _688 = fma(_676, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674)) - _650;
        float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
        float _705 = ((_692 * _686) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_642 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_692 * _687) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_646 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_692 * _688) / cbModelParam._m0[34u].z) + ((((((_650 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        float _744 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_710.x + (-0.5));
        float _746 = _744 * (_710.y + (-0.5));
        float _747 = _744 * (_710.z + (-0.5));
        float _754 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_717.x + (-0.5));
        float _756 = _754 * (_717.y + (-0.5));
        float _757 = _754 * (_717.z + (-0.5));
        float _764 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_724.x + (-0.5));
        float _766 = _764 * (_724.y + (-0.5));
        float _767 = _764 * (_724.z + (-0.5));
        float _774 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_731.x + (-0.5));
        float _776 = _774 * (_731.y + (-0.5));
        float _777 = _774 * (_731.z + (-0.5));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = _745 * 0.5;
        float _782 = _755 * 0.5;
        float _783 = _765 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _798 = (dot(vec3(_360, _361, _362), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _808 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3405 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_810 + 1.0))) + _815) * _778;
        float _825 = _746 * 0.5;
        float _826 = _756 * 0.5;
        float _827 = _766 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_360, _361, _362), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3438 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_852 + 1.0))) + _857) * _779;
        float _867 = _747 * 0.5;
        float _868 = _757 * 0.5;
        float _869 = _767 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_360, _361, _362), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3471 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_894 + 1.0))) + _899) * _780;
        _916 = _747;
        _918 = _746;
        _919 = _745;
        _920 = _757;
        _921 = _756;
        _922 = _755;
        _923 = _767;
        _924 = _766;
        _925 = _765;
        _926 = _780;
        _927 = _779;
        _928 = _778;
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
    }
    else
    {
        _916 = _917;
        _918 = _917;
        _919 = _917;
        _920 = _917;
        _921 = _917;
        _922 = _917;
        _923 = _917;
        _924 = _917;
        _925 = _917;
        _926 = _917;
        _927 = _917;
        _928 = _917;
        _929 = 0.0;
        _930 = 0.0;
        _931 = 0.0;
    }
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _960 = fma(_586, cbModelParam._m0[30u].z, fma(_582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _578));
        float _964 = fma(_586, cbModelParam._m0[31u].z, fma(_582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _578));
        float _968 = fma(_586, cbModelParam._m0[32u].z, fma(_582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _578));
        float _991 = _578 + _360;
        float _992 = _582 + _361;
        float _993 = _586 + _362;
        float _1003 = fma(_993, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991)) - _960;
        float _1004 = fma(_993, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991)) - _964;
        float _1005 = fma(_993, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991)) - _968;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_960 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_964 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[35u].z) + ((((((_968 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1059 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1026.x + (-0.5));
        float _1061 = _1059 * (_1026.y + (-0.5));
        float _1062 = _1059 * (_1026.z + (-0.5));
        float _1069 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1033.x + (-0.5));
        float _1071 = _1069 * (_1033.y + (-0.5));
        float _1072 = _1069 * (_1033.z + (-0.5));
        float _1079 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1040.x + (-0.5));
        float _1081 = _1079 * (_1040.y + (-0.5));
        float _1082 = _1079 * (_1040.z + (-0.5));
        float _1089 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1047.x + (-0.5));
        float _1091 = _1089 * (_1047.y + (-0.5));
        float _1092 = _1089 * (_1047.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_360, _361, _362), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3534 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1123 + 1.0))) + _1128) * _1093;
        float _1138 = _1061 * 0.5;
        float _1139 = _1071 * 0.5;
        float _1140 = _1081 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_360, _361, _362), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3567 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1165 + 1.0))) + _1170) * _1094;
        float _1180 = _1062 * 0.5;
        float _1181 = _1072 * 0.5;
        float _1182 = _1082 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_360, _361, _362), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3600 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1207 + 1.0))) + _1212) * _1095;
        _1229 = _1062;
        _1230 = _1061;
        _1231 = _1060;
        _1232 = _1072;
        _1233 = _1071;
        _1234 = _1070;
        _1235 = _1082;
        _1236 = _1081;
        _1237 = _1080;
        _1238 = _1095;
        _1239 = _1094;
        _1240 = _1093;
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _917;
        _1230 = _917;
        _1231 = _917;
        _1232 = _917;
        _1233 = _917;
        _1234 = _917;
        _1235 = _917;
        _1236 = _917;
        _1237 = _917;
        _1238 = _917;
        _1239 = _917;
        _1240 = _917;
        _1241 = 0.0;
        _1242 = 0.0;
        _1243 = 0.0;
    }
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _929)) + _929;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _930)) + _930;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _931)) + _931;
    float _1276 = fma(_1255, cbSceneParam._m0[89u].z, fma(_1254, cbSceneParam._m0[89u].y, _1253 * cbSceneParam._m0[89u].x));
    float _1279 = fma(_1255, cbSceneParam._m0[90u].z, fma(_1254, cbSceneParam._m0[90u].y, _1253 * cbSceneParam._m0[90u].x));
    float _1282 = fma(_1255, cbSceneParam._m0[91u].z, fma(_1254, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1253));
    float _1297 = _535 * 0.5;
    float _1298 = _536 * 0.5;
    float _1299 = _537 * 0.5;
    float _1300 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1303 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1306 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1340;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1313 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_916, _920, _923, _926));
        float _1317 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_918, _921, _924, _927));
        float _1321 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_919, _922, _925, _928));
        float _1328 = dot(vec4(cbModelParam._m0[39u]), vec4(_1297, _1298, _1299, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1351;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1342 = dot(vec4(cbModelParam._m0[40u]), vec4(_1297, _1298, _1299, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1355 = (_1351 * cbModelParam._m0[1u].x) + (_1340 * (1.0 - cbModelParam._m0[1u].x));
    float _1364 = cbModelParam._m0[25u].z * 0.019999980926513671875;
    float _1366 = isnan(_1364) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1364 : min(cbModelParam._m0[25u].z, _1364));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_586, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_586, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_586, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1429 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1432 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1459;
        if (_1426 > 0.0)
        {
            _1459 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1459 = frontier_phi_19_17_ladder;
        }
        float _1664;
        if (_1429 > 0.0)
        {
            _1664 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1664 = frontier_phi_28_24_ladder;
        }
        float _1907;
        if (_1432 > 0.0)
        {
            _1907 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1907 = frontier_phi_40_35_ladder;
        }
        float _1909 = isnan(_1664) ? _1459 : (isnan(_1459) ? _1664 : min(_1459, _1664));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1426) + _1415;
        float _1915 = (_1910 * _1429) + _1419;
        float _1916 = (_1910 * _1432) + _1423;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1366);
            frontier_phi_18_40_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_18_40_ladder_2;
        _1450 = frontier_phi_18_40_ladder_1;
        _1452 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1366);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1455 = cbModelParam._m0[25u].w * 0.019999980926513671875;
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1455 : min(cbModelParam._m0[25u].w, _1455));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1512 = fma(_586, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578)) + cbModelParam._m0[21u].w;
        float _1516 = fma(_586, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578)) + cbModelParam._m0[22u].w;
        float _1520 = fma(_586, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578)) + cbModelParam._m0[23u].w;
        float _1523 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1526 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1529 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1669;
        if (_1523 > 0.0)
        {
            _1669 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1669 = frontier_phi_30_26_ladder;
        }
        float _1934;
        if (_1526 > 0.0)
        {
            _1934 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1934 = frontier_phi_42_37_ladder;
        }
        float _2137;
        if (_1529 > 0.0)
        {
            _2137 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2137 = frontier_phi_51_48_ladder;
        }
        float _2139 = isnan(_1934) ? _1669 : (isnan(_1669) ? _1934 : min(_1669, _1934));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1523) + _1512;
        float _2145 = (_2140 * _1526) + _1516;
        float _2146 = (_2140 * _1529) + _1520;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2147;
        float _2150 = _2147 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2146 > _2150) || ((_2146 < _2148) || ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 < _2148) || (_2144 > _2150))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2146, cbModelParam._m0[17u].z, fma(_2145, cbModelParam._m0[17u].y, _2144 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2146, cbModelParam._m0[18u].z, fma(_2145, cbModelParam._m0[18u].y, _2144 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2146, cbModelParam._m0[19u].z, fma(_2145, cbModelParam._m0[19u].y, _2144 * cbModelParam._m0[19u].x))), _1456);
            frontier_phi_27_51_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1548 = frontier_phi_27_51_ladder_2;
        _1550 = frontier_phi_27_51_ladder_1;
        _1552 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1456);
        _1548 = _1532.x * cbModelParam._m0[1u].z;
        _1550 = _1532.y * cbModelParam._m0[1u].z;
        _1552 = _1532.z * cbModelParam._m0[1u].z;
    }
    float _1564 = ((0.0397587902843952178955078125 - (_549 * 0.03859509527683258056640625)) + (_549 * 0.96097481250762939453125)) * _527;
    float _1565 = _1564 * ((cbModelParam._m0[1u].w * (_1548 - _1448)) + _1448);
    float _1566 = _1564 * ((cbModelParam._m0[1u].w * (_1550 - _1450)) + _1450);
    float _1567 = _1564 * ((cbModelParam._m0[1u].w * (_1552 - _1452)) + _1452);
    float _1570 = fma(_1567, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1567, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1567, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, _1565 * cbSceneParam._m0[91u].x));
    uvec4 _1586 = floatBitsToUint(cbInstanceData._m0[_501 + 5u]);
    uint _1588 = _1586.x * 14u;
    uint _1589 = _1588 + 13u;
    float _1596 = _527 + (-1.0);
    float _1601 = (cbLight._m0[_1589].x * _1596) + 1.0;
    float _1602 = (cbLight._m0[_1589].y * _1596) + 1.0;
    float _1603 = (cbLight._m0[_1589].z * _1596) + 1.0;
    float _1604 = (cbLight._m0[_1589].w * _1596) + 1.0;
    uint _1605 = _1588 + 5u;
    float _1611 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1615 = _1588 + 4u;
    float _1622 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1626 = _1588 | 1u;
    float _1637 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_360, _361, _362));
    float _1640 = dot(vec3(cbLight._m0[_1626].xyz), vec3(_360, _361, _362));
    float _3736 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _3747 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1645 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.3183098733425140380859375;
    float _1647 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1654 = ((cbLight._m0[_1605].x * _1611) * _1647) + ((cbLight._m0[_1615].x * _1622) * _1645);
    float _1655 = ((_1611 * cbLight._m0[_1605].y) * _1647) + ((_1622 * cbLight._m0[_1615].y) * _1645);
    float _1656 = ((_1611 * cbLight._m0[_1605].z) * _1647) + ((_1622 * cbLight._m0[_1615].z) * _1645);
    uvec4 _1661 = floatBitsToUint(cbLight._m0[_1588 + 12u]);
    bool _1663 = _1661.x == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1663)
    {
        _1674 = _1654;
        _1676 = _1655;
        _1678 = _1656;
    }
    else
    {
        uint _1682 = _1588 + 6u;
        float _1698 = (dot(vec3(cbLight._m0[_1588 + 2u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _1699 = _1698 * _1698;
        float _3758 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1701 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1674 = (((cbLight._m0[_1682].x * 0.3183098733425140380859375) * _1700) * _1701) + _1654;
        _1676 = (((cbLight._m0[_1682].y * 0.3183098733425140380859375) * _1700) * _1701) + _1655;
        _1678 = (((cbLight._m0[_1682].z * 0.3183098733425140380859375) * _1700) * _1701) + _1656;
    }
    bool _1681 = _1661.y == 0u;
    float _1719;
    float _1721;
    float _1723;
    if (_1681)
    {
        _1719 = _1674;
        _1721 = _1676;
        _1723 = _1678;
    }
    else
    {
        uint _1878 = _1588 + 7u;
        float _1894 = (dot(vec3(cbLight._m0[_1588 + 3u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3774 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1897 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1719 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1674;
        _1721 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1676;
        _1723 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1678;
    }
    uint _1726 = _1588 + 8u;
    float _1739 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1588].w)) * 0.949999988079071044921875);
    float _1740 = _1739 * _1739;
    float _1741 = cbLight._m0[_1588].x + _437;
    float _1742 = cbLight._m0[_1588].y + _438;
    float _1743 = cbLight._m0[_1588].z + _439;
    float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
    float _1748 = _1747 * _1741;
    float _1749 = _1747 * _1742;
    float _1750 = _1747 * _1743;
    float _1751 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1588].xyz));
    float _3790 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _1755 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1756 = dot(vec3(_360, _361, _362), vec3(_1748, _1749, _1750));
    float _3812 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1748, _1749, _1750));
    float _3823 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1764 = _1740 * _1740;
    float _1768 = ((_1759 * _1759) * (_1764 + (-1.0))) + 1.0;
    float _1779 = (exp2(log2(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = 1.0 - _1740;
    float _1792 = (0.5 / (((_1755 * ((_1754 * _1781) + _1740)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1781) + _1740) * _1754))) * _1754;
    float _3834 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1764 / ((_1768 * _1768) * 3.141590118408203125));
    uint _1805 = _1588 + 9u;
    float _1815 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1626].w)) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1626].x + _437;
    float _1818 = cbLight._m0[_1626].y + _438;
    float _1819 = cbLight._m0[_1626].z + _439;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1626].xyz));
    float _3845 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1831 = dot(vec3(_360, _361, _362), vec3(_1824, _1825, _1826));
    float _3856 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1626].xyz), vec3(_1824, _1825, _1826));
    float _3867 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1816 * _1816;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1852 = (exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1853 = 1.0 - _1816;
    float _1863 = (0.5 / (((_1755 * ((_1830 * _1853) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1853) + _1816) * _1830))) * _1830;
    float _3878 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    float _1875 = (((_1852 * cbLight._m0[_1805].x) * _1865) * _1611) + (((_1779 * cbLight._m0[_1726].x) * _1794) * _1622);
    float _1876 = (((_1852 * cbLight._m0[_1805].y) * _1865) * _1611) + (((_1779 * cbLight._m0[_1726].y) * _1794) * _1622);
    float _1877 = (((_1852 * cbLight._m0[_1805].z) * _1865) * _1611) + (((_1779 * cbLight._m0[_1726].z) * _1794) * _1622);
    float _1939;
    float _1941;
    float _1943;
    if (_1663)
    {
        _1939 = _1875;
        _1941 = _1876;
        _1943 = _1877;
    }
    else
    {
        uint _1945 = _1588 + 2u;
        uint _1949 = _1588 + 10u;
        float _1962 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1945].w)) * 0.949999988079071044921875);
        float _1963 = _1962 * _1962;
        float _1964 = cbLight._m0[_1945].x + _437;
        float _1965 = cbLight._m0[_1945].y + _438;
        float _1966 = cbLight._m0[_1945].z + _439;
        float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
        float _1971 = _1970 * _1964;
        float _1972 = _1970 * _1965;
        float _1973 = _1970 * _1966;
        float _1974 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1945].xyz));
        float _3889 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1978 = dot(vec3(_360, _361, _362), vec3(_1971, _1972, _1973));
        float _3900 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1982 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_1971, _1972, _1973));
        float _3911 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1986 = _1963 * _1963;
        float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
        float _1999 = (exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2000 = 1.0 - _1963;
        float _2010 = (0.5 / (((_1755 * ((_1977 * _2000) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _2000) + _1963) * _1977))) * _1977;
        float _3922 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2012 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
        float _2013 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1939 = (((_1999 * cbLight._m0[_1949].x) * _2012) * _2013) + _1875;
        _1941 = (((_1999 * cbLight._m0[_1949].y) * _2012) * _2013) + _1876;
        _1943 = (((_1999 * cbLight._m0[_1949].z) * _2012) * _2013) + _1877;
    }
    float _2048;
    float _2050;
    float _2052;
    if (_1681)
    {
        _2048 = _1939;
        _2050 = _1941;
        _2052 = _1943;
    }
    else
    {
        uint _2059 = _1588 + 3u;
        uint _2063 = _1588 + 11u;
        float _2076 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_2059].w)) * 0.949999988079071044921875);
        float _2077 = _2076 * _2076;
        float _2078 = cbLight._m0[_2059].x + _437;
        float _2079 = cbLight._m0[_2059].y + _438;
        float _2080 = cbLight._m0[_2059].z + _439;
        float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
        float _2085 = _2084 * _2078;
        float _2086 = _2084 * _2079;
        float _2087 = _2084 * _2080;
        float _2088 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_2059].xyz));
        float _3938 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _2092 = dot(vec3(_360, _361, _362), vec3(_2085, _2086, _2087));
        float _3949 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2085, _2086, _2087));
        float _3960 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2100 = _2077 * _2077;
        float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
        float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2114 = 1.0 - _2077;
        float _2124 = (0.5 / (((_1755 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _2114) + _2077) * _2091))) * _2091;
        float _3971 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2126 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
        float _2127 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _2048 = (((_2113 * cbLight._m0[_2063].x) * _2126) * _2127) + _1939;
        _2050 = (((_2113 * cbLight._m0[_2063].y) * _2126) * _2127) + _1941;
        _2052 = (((_2113 * cbLight._m0[_2063].z) * _2126) * _2127) + _1943;
    }
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    if (_1586.y == 0u)
    {
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2202;
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2202;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2202;
        uvec4 _2217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2218 = _2217.x;
        uint _2229 = uint((float(_2217.y) * floor(float(uint(cbSceneParam._m0[85u].y * _459) / _2218))) + floor(float(uint(cbSceneParam._m0[85u].x * _458) / _2218)));
        float _2239 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2240 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        uint _2243 = uint(isnan(14.0) ? _2240 : (isnan(_2240) ? 14.0 : min(_2240, 14.0)));
        uvec4 _2248 = texelFetch(g_lightClusterGridBuffer, int(((_2243 << 2u) + (_2229 << 6u)) >> 2u));
        uint _2249 = _2248.x;
        uint _2250 = _2217.z;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        if (((((1u << ((_2250 >> 4u) & 15u)) + 4294967295u) & _2249) == 0u) || ((_2250 & 240u) == 0u))
        {
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
        }
        else
        {
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            uint _2508 = 0u;
            uint _2517;
            bool _2518;
            for (;;)
            {
                _2517 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2508 << 2u)) >> 2u)).x;
                _2518 = _2517 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2518)
                {
                    frontier_phi_68_pred = _2504;
                    frontier_phi_68_pred_1 = _2507;
                    frontier_phi_68_pred_2 = _2506;
                    frontier_phi_68_pred_3 = _2505;
                    frontier_phi_68_pred_4 = _2503;
                    frontier_phi_68_pred_5 = _2502;
                }
                else
                {
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    uint _2653;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2517;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2657 = uint(findLSB(_2653)) + (_2508 << 5u);
                        uint _2654 = (_2653 + 4294967295u) & _2653;
                        uint _2659 = _2657 * 48u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2679 = (_2657 * 48u) + 4u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2698 = (_2657 * 48u) + 8u;
                        vec3 _2709 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x));
                        float _2713 = _2673.x - _2203;
                        float _2714 = _2673.y - _2204;
                        float _2715 = _2673.z - _2205;
                        float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                        float _2719 = inversesqrt(_2716);
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2723 = dot(vec3(_479, _482, _485), vec3(_2720, _2721, _2722));
                        float _2728 = 1.0 - (_2716 * _2673.w);
                        float _3997 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2729 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2730 = sqrt(_2716) * _2692.w;
                        float _2733 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                        float _2734 = _2733 * _2733;
                        float _2737 = ((1.0 - _2734) * _2723) + _2734;
                        float _2740 = _2730 * _2730;
                        float _2744 = ((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2729) / ((_2740 * 0.699999988079071044921875) + 1.0);
                        float _2748 = (-0.0) - _2203;
                        float _2749 = (-0.0) - _2204;
                        float _2750 = (-0.0) - _2205;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2765 = exp2(log2(1.0 / ((_2740 * 3.5) + 5.0)) * 0.25);
                        float _2771 = sqrt(1.0 - ((1.0 - (_2765 * _2765)) * 0.999898970127105712890625));
                        float _2772 = _2771 * _2771;
                        float _2773 = _2772 * _2772;
                        float _2774 = _2755 + _2720;
                        float _2775 = _2756 + _2721;
                        float _2776 = _2757 + _2722;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2784 = dot(vec3(_479, _482, _485), vec3(_2755, _2756, _2757));
                        float _4013 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2788 = dot(vec3(_479, _482, _485), vec3(_2780 * _2774, _2780 * _2775, _2780 * _2776));
                        float _4024 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2795 = ((_2791 * _2791) * (_2773 + (-1.0))) + 1.0;
                        float _2796 = _2733 * _2772;
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2723) + _2797;
                        float _4035 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2802 = 1.0 - _2772;
                        float _2812 = (0.5 / (((_2801 * ((_2787 * _2802) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2802) + _2772) * _2787))) * _2801;
                        float _4046 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2823 = (((_2773 * 3.1415927410125732421875) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) / ((_2795 * _2795) * ((_2740 * 2.1991131305694580078125) + 3.141590118408203125))) * _2729;
                        _2577 = (_2744 * _2692.x) + _2650;
                        _2578 = (_2744 * _2692.y) + _2651;
                        _2579 = (_2744 * _2692.z) + _2652;
                        _2574 = (_2823 * _2709.x) + _2647;
                        _2575 = (_2823 * _2709.y) + _2648;
                        _2576 = (_2823 * _2709.z) + _2649;
                        if (_2654 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2654;
                        }
                    }
                    frontier_phi_68_pred = _2576;
                    frontier_phi_68_pred_1 = _2579;
                    frontier_phi_68_pred_2 = _2578;
                    frontier_phi_68_pred_3 = _2577;
                    frontier_phi_68_pred_4 = _2575;
                    frontier_phi_68_pred_5 = _2574;
                }
                _2354 = frontier_phi_68_pred;
                _2360 = frontier_phi_68_pred_1;
                _2358 = frontier_phi_68_pred_2;
                _2356 = frontier_phi_68_pred_3;
                _2352 = frontier_phi_68_pred_4;
                _2350 = frontier_phi_68_pred_5;
                uint _2509 = _2508 + 1u;
                if (_2509 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2502 = _2350;
                    _2503 = _2352;
                    _2504 = _2354;
                    _2505 = _2356;
                    _2506 = _2358;
                    _2507 = _2360;
                    _2508 = _2509;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
        }
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.z;
        uint _2366 = (_2364 >> 8u) & 15u;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        if (((4294967295u << _2366) & _2249) == 0u)
        {
            _2470 = _2349;
            _2472 = _2351;
            _2474 = _2353;
            _2476 = _2355;
            _2478 = _2357;
            _2480 = _2359;
        }
        else
        {
            float _2495 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _2496 = _2495 * _2203;
            float _2497 = _2495 * _2204;
            float _2498 = _2495 * _2205;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2366 < ((_2364 >> 12u) & 15u))
            {
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2630 = _2349;
                float _2631 = _2351;
                float _2632 = _2353;
                float _2633 = _2355;
                float _2634 = _2357;
                float _2635 = _2359;
                uint _2636 = _2366;
                uint _2645;
                bool _2646;
                for (;;)
                {
                    _2645 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                    _2646 = _2645 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2646)
                    {
                        frontier_phi_79_pred = _2635;
                        frontier_phi_79_pred_1 = _2634;
                        frontier_phi_79_pred_2 = _2633;
                        frontier_phi_79_pred_3 = _2632;
                        frontier_phi_79_pred_4 = _2631;
                        frontier_phi_79_pred_5 = _2630;
                    }
                    else
                    {
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _2850 = _2630;
                        float _2851 = _2631;
                        float _2852 = _2632;
                        float _2853 = _2633;
                        float _2854 = _2634;
                        float _2855 = _2635;
                        uint _2856 = _2645;
                        uint _2857;
                        vec4 _2882;
                        float _2883;
                        vec4 _2898;
                        vec3 _2910;
                        vec4 _2926;
                        vec4 _2942;
                        float _2989;
                        bool _2990;
                        for (;;)
                        {
                            uint _2867 = ((_2636 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2856));
                            _2857 = (_2856 + 4294967295u) & _2856;
                            uint _2869 = _2867 * 40u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            _2883 = _2882.w;
                            uint _2885 = (_2867 * 40u) + 4u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2900 = (_2867 * 40u) + 8u;
                            _2910 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x));
                            uint _2913 = (_2867 * 40u) + 16u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2929 = (_2867 * 40u) + 20u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2867 * 40u) + 24u;
                            vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2964 = (_2867 * 40u) + 28u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            _2989 = fma(_2205, _2977.z, fma(_2204, _2977.y, _2977.x * _2203)) + _2977.w;
                            _2990 = !((fma(_2205, _2958.z, fma(_2204, _2958.y, _2958.x * _2203)) + _2958.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2990)
                            {
                                float _3017 = _2882.x - _2203;
                                float _3018 = _2882.y - _2204;
                                float _3019 = _2882.z - _2205;
                                float _3020 = dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019));
                                float _3023 = inversesqrt(_3020);
                                float _3024 = _3023 * _3017;
                                float _3025 = _3023 * _3018;
                                float _3026 = _3023 * _3019;
                                float _3030 = 1.0 - (_3020 / (_2883 * _2883));
                                float _4057 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3035 = sqrt(_3020) * _2898.w;
                                float _3037 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                                float _3038 = _3037 * _3037;
                                float _3041 = ((1.0 - _3038) * dot(vec3(_3024, _3025, _3026), vec3(_479, _482, _485))) + _3038;
                                float _3044 = _3035 * _3035;
                                float _3048 = (fma(_2205, _2926.z, fma(_2204, _2926.y, _2926.x * _2203)) + _2926.w) / _2989;
                                float _3049 = (fma(_2205, _2942.z, fma(_2204, _2942.y, _2942.x * _2203)) + _2942.w) / _2989;
                                float _3053 = 1.0 - dot(vec2(_3048, _3049), vec2(_3048, _3049));
                                float _4073 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3055 = _3054 * (((isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))) * _3031) / ((_3044 * 0.699999988079071044921875) + 1.0));
                                float _3067 = exp2(log2(1.0 / ((_3044 * 3.5) + 5.0)) * 0.25);
                                float _3072 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * 0.999898970127105712890625));
                                float _3073 = _3072 * _3072;
                                float _3074 = _3073 * _3073;
                                float _3075 = _3024 - _2496;
                                float _3076 = _3025 - _2497;
                                float _3077 = _3026 - _2498;
                                float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                                float _3085 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2496, (-0.0) - _2497, (-0.0) - _2498));
                                float _4084 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3089 = dot(vec3(_479, _482, _485), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                                float _4095 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                                float _3097 = _3037 * _3073;
                                float _3098 = _3097 * _3097;
                                float _3104 = ((1.0 - _3098) * dot(vec3(_479, _482, _485), vec3(_3024, _3025, _3026))) + _3098;
                                float _4106 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3106 = 1.0 - _3073;
                                float _3116 = (0.5 / (((_3105 * ((_3088 * _3106) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3073) * _3088))) * _3105;
                                float _4117 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3126 = (_3054 * _3031) * (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) / ((_3096 * _3096) * ((_3044 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3055 * _2898.z;
                                frontier_phi_85_pred_1 = _3055 * _2898.y;
                                frontier_phi_85_pred_2 = _3055 * _2898.x;
                                frontier_phi_85_pred_3 = _3126 * _2910.z;
                                frontier_phi_85_pred_4 = _3126 * _2910.y;
                                frontier_phi_85_pred_5 = _3126 * _2910.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3135 = frontier_phi_85_pred;
                            _3134 = frontier_phi_85_pred_1;
                            _3133 = frontier_phi_85_pred_2;
                            _3132 = frontier_phi_85_pred_3;
                            _3131 = frontier_phi_85_pred_4;
                            _3130 = frontier_phi_85_pred_5;
                            _2840 = _3133 + _2853;
                            _2841 = _3134 + _2854;
                            _2842 = _3135 + _2855;
                            _2837 = _3130 + _2850;
                            _2838 = _3131 + _2851;
                            _2839 = _3132 + _2852;
                            if (_2857 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2857;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2842;
                        frontier_phi_79_pred_1 = _2841;
                        frontier_phi_79_pred_2 = _2840;
                        frontier_phi_79_pred_3 = _2839;
                        frontier_phi_79_pred_4 = _2838;
                        frontier_phi_79_pred_5 = _2837;
                    }
                    _2481 = frontier_phi_79_pred;
                    _2479 = frontier_phi_79_pred_1;
                    _2477 = frontier_phi_79_pred_2;
                    _2475 = frontier_phi_79_pred_3;
                    _2473 = frontier_phi_79_pred_4;
                    _2471 = frontier_phi_79_pred_5;
                    uint _2637 = _2636 + 1u;
                    if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2630 = _2471;
                        _2631 = _2473;
                        _2632 = _2475;
                        _2633 = _2477;
                        _2634 = _2479;
                        _2635 = _2481;
                        _2636 = _2637;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2477;
                frontier_phi_60_61_ladder_1 = _2481;
                frontier_phi_60_61_ladder_2 = _2479;
                frontier_phi_60_61_ladder_3 = _2475;
                frontier_phi_60_61_ladder_4 = _2473;
                frontier_phi_60_61_ladder_5 = _2471;
            }
            else
            {
                frontier_phi_60_61_ladder = _2355;
                frontier_phi_60_61_ladder_1 = _2359;
                frontier_phi_60_61_ladder_2 = _2357;
                frontier_phi_60_61_ladder_3 = _2353;
                frontier_phi_60_61_ladder_4 = _2351;
                frontier_phi_60_61_ladder_5 = _2349;
            }
            _2470 = frontier_phi_60_61_ladder_5;
            _2472 = frontier_phi_60_61_ladder_4;
            _2474 = frontier_phi_60_61_ladder_3;
            _2476 = frontier_phi_60_61_ladder;
            _2478 = frontier_phi_60_61_ladder_2;
            _2480 = frontier_phi_60_61_ladder_1;
        }
        float _2485 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
        _2261 = (_2485 * _2476) + _1719;
        _2263 = (_2485 * _2478) + _1721;
        _2265 = (_2485 * _2480) + _1723;
        _2267 = ((_2470 * 0.039999999105930328369140625) * _2485) + _2048;
        _2269 = ((_2472 * 0.039999999105930328369140625) * _2485) + _2050;
        _2271 = ((_2474 * 0.039999999105930328369140625) * _2485) + _2052;
    }
    else
    {
        _2261 = _1719;
        _2263 = _1721;
        _2265 = _1723;
        _2267 = _2048;
        _2269 = _2050;
        _2271 = _2052;
    }
    float _4133 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4144 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4155 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2288 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2261 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _527))) + ((_2267 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1355)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2263 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _527))) + ((_2269 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1355)) * cbPerFrame._m0[3u].x);
    float _2290 = ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2265 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _527))) + ((_2271 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1355)) * cbPerFrame._m0[3u].x);
    uint _2291 = _501 + 6u;
    float _2299 = _458 / cbSceneParam._m0[86u].x;
    float _2300 = _459 / cbSceneParam._m0[86u].y;
    vec4 _2314 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, (log2((isnan(cbSceneParam._m0[77u].w) ? _378 : (isnan(_378) ? cbSceneParam._m0[77u].w : min(_378, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2316 = _2314.x;
    float _2317 = _2314.y;
    float _2318 = _2314.z;
    float _2319 = _2314.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_378 > cbSceneParam._m0[78u].w)
    {
        float _2374 = isnan(_378) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _378 : min(cbSceneParam._m0[80u].w, _378));
        float _2375 = _2374 / _378;
        float _2386 = _2375 * _430;
        float _2387 = _431 * _2375;
        float _2388 = (-0.0) - _2387;
        float _2389 = _2375 * _432;
        float _2391 = (cbSceneParam._m0[77u].w * _2388) / _2374;
        float _2392 = _2391 + cbSceneParam._m0[79u].w;
        float _2393 = cbSceneParam._m0[79u].w - _2387;
        float _2399 = sqrt(((_2386 * _2386) + (_2387 * _2387)) + (_2389 * _2389));
        float _2402 = (1.0 - (cbSceneParam._m0[77u].w / _2374)) * _2399;
        float _2407 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2388 - _2391) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2392 > 0.0) ? exp2(_2407 * _2392) : (2.0 - exp2(_2409 * _2392))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2402;
        }
        else
        {
            float _2531 = 1.0 / cbSceneParam._m0[80u].x;
            float _2532 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : max(_2392, _2393));
            float _2533 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : min(_2392, _2393));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            _2587 = ((abs(_2399 / _2388) * cbSceneParam._m0[80u].y) * ((((_2542 - _2543) * 2.0) - ((exp2(_2407 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0)))) - exp2(_2407 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0))))) * _2531)) - ((exp2(_2409 * _2542) - exp2(_2409 * _2543)) * _2531))) + (_2402 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2319);
        _2411 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2316;
        _2413 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2317;
        _2415 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2318;
        _2417 = _2598 * _2319;
    }
    else
    {
        _2411 = _2316;
        _2413 = _2317;
        _2415 = _2318;
        _2417 = _2319;
    }
    bool _2625;
    vec4 _2427;
    vec4 _2450;
    float _2452;
    float _2456;
    float _2457;
    float _2458;
    float _2459;
    bool _2469;
    for (;;)
    {
        _2427 = cbMatDynParam._m0[0u];
        float _2429 = roundEven(_2427.y);
        bool _2430 = _2429 == 3.0;
        float _2432 = log2(_2417);
        float _2439 = exp2(_2432 * cbSceneParam._m0[78u].x) * _2288;
        float _2440 = exp2(_2432 * cbSceneParam._m0[78u].y) * _2289;
        float _2441 = exp2(_2432 * cbSceneParam._m0[78u].z) * _2290;
        float _2448 = _446 + (-0.5);
        _2450 = cbMtdParam._m0[1u];
        _2452 = _2450.y * _2448;
        float _2455 = (_2429 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2456 = _2455 * (_2430 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2411)));
        _2457 = _2455 * (_2430 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2413)));
        _2458 = _2455 * (_2430 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2415)));
        _2459 = _2448 * 0.999000012874603271484375;
        _2469 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2469)
        {
            if ((cbInstanceData._m0[_501 + 7u].x + _2459) < 0.5)
            {
                _2625 = true;
                break;
            }
        }
        uint _2566 = _503 + uint(_2427.w);
        if ((cbInstanceData._m0[_2566].w < 1.0) && ((cbInstanceData._m0[_2566].w + _2459) < 0.5))
        {
            _2625 = true;
            break;
        }
        if ((_2452 + 1.0) < _2450.x)
        {
            _2625 = true;
            break;
        }
        _2625 = false;
        break;
    }
    float _2828;
    if (_2625)
    {
        discard_state = true;
        _2828 = 0.0;
    }
    else
    {
        _2828 = cbInstanceData._m0[_2291].w;
    }
    SV_Target.x = _2456;
    SV_Target.y = _2457;
    SV_Target.z = _2458;
    SV_Target.w = _2828;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2291].w;
    discard_exit();
}


