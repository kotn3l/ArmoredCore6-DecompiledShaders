#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanC_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _872;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _180 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _181 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    float _222 = cbPerFrame._m0[22u].x * 0.02999999932944774627685546875;
    float _224 = cbPerFrame._m0[22u].x * (-0.00999999977648258209228515625);
    float _228 = cbPerFrame._m0[22u].x * 6.5;
    uint _231 = uint(int(floor(_228)));
    float _232 = fract(_228);
    uint _233 = _231 + 1u;
    uint _234 = uint(int(cbMtdParam._m0[9u].z * cbMtdParam._m0[9u].y));
    float _237 = float(int(_231 - _234 * (_231 / _234)));
    float _238 = _237 - cbMtdParam._m0[9u].y * trunc(_237 / cbMtdParam._m0[9u].y);
    float _240 = floor(_237 / cbMtdParam._m0[9u].y);
    float _241 = float(int(_233 - _234 * (_233 / _234)));
    float _242 = _241 - cbMtdParam._m0[9u].y * trunc(_241 / cbMtdParam._m0[9u].y);
    float _244 = floor(_241 / cbMtdParam._m0[9u].y);
    float _245 = 1.0 / cbMtdParam._m0[9u].y;
    float _247 = 1.0 / cbMtdParam._m0[9u].z;
    float _248 = fract(_222 + (TEXCOORD.x * 2.0));
    float _249 = fract(_224 + (TEXCOORD.y * 5.0));
    vec4 _270 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_248 + _242) * _245) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_249 + _244) * _247) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _279 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_248 + _238) * _245) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_249 + _240) * _247) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _281 = _279.x;
    float _282 = _279.y;
    float _294 = fract(_222 + (TEXCOORD.x * 0.5));
    float _295 = fract(_224 + (TEXCOORD.y * 0.5));
    vec4 _308 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_294 + _242) * _245) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_295 + _244) * _247) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _316 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_294 + _238) * _245) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_295 + _240) * _247) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _318 = _316.x;
    float _319 = _316.y;
    float _324 = ((_308.x - _318) * _232) + _318;
    float _325 = ((_308.y - _319) * _232) + _319;
    float _334 = (((((((_270.x - _281) * _232) + _281) - _324) * cbMtdParam._m0[9u].x) + _324) * 2.0) + (-1.0);
    float _336 = (((((((_270.y - _282) * _232) + _282) - _325) * cbMtdParam._m0[9u].x) + _325) * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3180 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0))));
    float _345 = fma(_342, _208, fma(_336, _200 * TANGENT.x, (_186 * _179) * _334));
    float _348 = fma(_342, _209, fma(_336, _200 * TANGENT.y, (_186 * _180) * _334));
    float _351 = fma(_342, _210, fma(_336, _200 * TANGENT.z, (_186 * _181) * _334));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    float _356 = _355 * _345;
    float _357 = _355 * _348;
    float _358 = _355 * _351;
    float _374 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_358, cbSceneParam._m0[5u].z, fma(_357, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _356));
    float _466 = fma(_358, cbSceneParam._m0[6u].z, fma(_357, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _356));
    float _469 = fma(_358, cbSceneParam._m0[7u].z, fma(_357, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _356));
    uint _485 = uint(roundEven(NORMAL.w)) * 13u;
    uint _488 = (_485 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _494 = (cbMtdParam._m0[0u].x * 0.00369799998588860034942626953125) * cbInstanceData._m0[_488].x;
    float _495 = (cbMtdParam._m0[0u].y * 0.086921997368335723876953125) * cbInstanceData._m0[_488].y;
    float _496 = (cbMtdParam._m0[0u].z * 0.1275610029697418212890625) * cbInstanceData._m0[_488].z;
    float _3191 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _3202 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    vec4 _508 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _441, cbSceneParam._m0[86u].y * _442));
    float _511 = _508.x * TEXCOORD.z;
    float _512 = dot(vec3(_356, _357, _358), vec3(_433, _434, _435));
    float _515 = _512 * 2.0;
    float _519 = (_515 * _356) - _433;
    float _520 = (_515 * _357) - _434;
    float _521 = (_515 * _358) - _435;
    float _525 = abs(dot(vec3(_433, _434, _435), vec3(_356, _357, _358)));
    float _3224 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _533 = exp2(log2(1.0 - ((isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))) * 0.999000012874603271484375)) * 4.949747562408447265625);
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _871;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _597 = fma(_570, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562));
        float _601 = fma(_570, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562));
        float _605 = fma(_570, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562));
        float _629 = _562 + _356;
        float _630 = _566 + _357;
        float _631 = _570 + _358;
        float _641 = fma(_631, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629)) - _597;
        float _642 = fma(_631, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629)) - _601;
        float _643 = fma(_631, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629)) - _605;
        float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
        float _660 = ((_647 * _641) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_597 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_647 * _642) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_601 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_647 * _643) / cbModelParam._m0[34u].z) + ((((((_605 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        float _699 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_665.x + (-0.5));
        float _701 = _699 * (_665.y + (-0.5));
        float _702 = _699 * (_665.z + (-0.5));
        float _709 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_672.x + (-0.5));
        float _711 = _709 * (_672.y + (-0.5));
        float _712 = _709 * (_672.z + (-0.5));
        float _719 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_679.x + (-0.5));
        float _721 = _719 * (_679.y + (-0.5));
        float _722 = _719 * (_679.z + (-0.5));
        float _729 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_686.x + (-0.5));
        float _731 = _729 * (_686.y + (-0.5));
        float _732 = _729 * (_686.z + (-0.5));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = _700 * 0.5;
        float _737 = _710 * 0.5;
        float _738 = _720 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _753 = (dot(vec3(_356, _357, _358), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _763 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3272 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_765 + 1.0))) + _770) * _733;
        float _780 = _701 * 0.5;
        float _781 = _711 * 0.5;
        float _782 = _721 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _796 = (dot(vec3(_356, _357, _358), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _805 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3305 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_807 + 1.0))) + _812) * _734;
        float _822 = _702 * 0.5;
        float _823 = _712 * 0.5;
        float _824 = _722 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_356, _357, _358), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3338 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_849 + 1.0))) + _854) * _735;
        _871 = _702;
        _873 = _701;
        _874 = _700;
        _875 = _712;
        _876 = _711;
        _877 = _710;
        _878 = _722;
        _879 = _721;
        _880 = _720;
        _881 = _735;
        _882 = _734;
        _883 = _733;
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
    }
    else
    {
        _871 = _872;
        _873 = _872;
        _874 = _872;
        _875 = _872;
        _876 = _872;
        _877 = _872;
        _878 = _872;
        _879 = _872;
        _880 = _872;
        _881 = _872;
        _882 = _872;
        _883 = _872;
        _884 = 0.0;
        _885 = 0.0;
        _886 = 0.0;
    }
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _912 = fma(_570, cbModelParam._m0[30u].z, fma(_566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _562));
        float _916 = fma(_570, cbModelParam._m0[31u].z, fma(_566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _562));
        float _920 = fma(_570, cbModelParam._m0[32u].z, fma(_566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _562));
        float _943 = _562 + _356;
        float _944 = _566 + _357;
        float _945 = _570 + _358;
        float _955 = fma(_945, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943)) - _912;
        float _956 = fma(_945, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943)) - _916;
        float _957 = fma(_945, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943)) - _920;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_912 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_916 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[35u].z) + ((((((_920 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1011 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_978.x + (-0.5));
        float _1013 = _1011 * (_978.y + (-0.5));
        float _1014 = _1011 * (_978.z + (-0.5));
        float _1021 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_985.x + (-0.5));
        float _1023 = _1021 * (_985.y + (-0.5));
        float _1024 = _1021 * (_985.z + (-0.5));
        float _1031 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_992.x + (-0.5));
        float _1033 = _1031 * (_992.y + (-0.5));
        float _1034 = _1031 * (_992.z + (-0.5));
        float _1041 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_999.x + (-0.5));
        float _1043 = _1041 * (_999.y + (-0.5));
        float _1044 = _1041 * (_999.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_356, _357, _358), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3401 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_1075 + 1.0))) + _1080) * _1045;
        float _1090 = _1013 * 0.5;
        float _1091 = _1023 * 0.5;
        float _1092 = _1033 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_356, _357, _358), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3434 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_1117 + 1.0))) + _1122) * _1046;
        float _1132 = _1014 * 0.5;
        float _1133 = _1024 * 0.5;
        float _1134 = _1034 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_356, _357, _358), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3467 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_1159 + 1.0))) + _1164) * _1047;
        _1181 = _1014;
        _1182 = _1013;
        _1183 = _1012;
        _1184 = _1024;
        _1185 = _1023;
        _1186 = _1022;
        _1187 = _1034;
        _1188 = _1033;
        _1189 = _1032;
        _1190 = _1047;
        _1191 = _1046;
        _1192 = _1045;
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _872;
        _1182 = _872;
        _1183 = _872;
        _1184 = _872;
        _1185 = _872;
        _1186 = _872;
        _1187 = _872;
        _1188 = _872;
        _1189 = _872;
        _1190 = _872;
        _1191 = _872;
        _1192 = _872;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1228 = fma(_1207, cbSceneParam._m0[89u].z, fma(_1206, cbSceneParam._m0[89u].y, _1205 * cbSceneParam._m0[89u].x));
    float _1231 = fma(_1207, cbSceneParam._m0[90u].z, fma(_1206, cbSceneParam._m0[90u].y, _1205 * cbSceneParam._m0[90u].x));
    float _1234 = fma(_1207, cbSceneParam._m0[91u].z, fma(_1206, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1205));
    float _1249 = _519 * 0.5;
    float _1250 = _520 * 0.5;
    float _1251 = _521 * 0.5;
    float _1252 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1255 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1258 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1292;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1265 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_871, _875, _878, _881));
        float _1269 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_873, _876, _879, _882));
        float _1273 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_874, _877, _880, _883));
        float _1280 = dot(vec4(cbModelParam._m0[39u]), vec4(_1249, _1250, _1251, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1303;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1294 = dot(vec4(cbModelParam._m0[40u]), vec4(_1249, _1250, _1251, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1307 = (_1303 * cbModelParam._m0[1u].x) + (_1292 * (1.0 - cbModelParam._m0[1u].x));
    float _1316 = cbModelParam._m0[25u].z * 0.019999980926513671875;
    float _1318 = isnan(_1316) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1316 : min(cbModelParam._m0[25u].z, _1316));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1367 = fma(_570, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562)) + cbModelParam._m0[13u].w;
        float _1371 = fma(_570, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562)) + cbModelParam._m0[14u].w;
        float _1375 = fma(_570, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562)) + cbModelParam._m0[15u].w;
        float _1378 = fma(_521, cbModelParam._m0[13u].z, fma(_520, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519));
        float _1381 = fma(_521, cbModelParam._m0[14u].z, fma(_520, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519));
        float _1384 = fma(_521, cbModelParam._m0[15u].z, fma(_520, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519));
        float _1411;
        if (_1378 > 0.0)
        {
            _1411 = abs((1.0 - _1367) / _1378);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1367 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1411 = frontier_phi_16_14_ladder;
        }
        float _1616;
        if (_1381 > 0.0)
        {
            _1616 = abs((1.0 - _1371) / _1381);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1371 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1616 = frontier_phi_25_21_ladder;
        }
        float _1859;
        if (_1384 > 0.0)
        {
            _1859 = abs((1.0 - _1375) / _1384);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1375 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1859 = frontier_phi_37_32_ladder;
        }
        float _1861 = isnan(_1616) ? _1411 : (isnan(_1411) ? _1616 : min(_1411, _1616));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1378) + _1367;
        float _1867 = (_1862 * _1381) + _1371;
        float _1868 = (_1862 * _1384) + _1375;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1869;
        float _1873 = _1869 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 > _1873) || ((_1867 < _1871) || ((_1866 < _1871) || (_1866 > _1873))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1868, cbModelParam._m0[9u].z, fma(_1867, cbModelParam._m0[9u].y, _1866 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1868, cbModelParam._m0[10u].z, fma(_1867, cbModelParam._m0[10u].y, _1866 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1868, cbModelParam._m0[11u].z, fma(_1867, cbModelParam._m0[11u].y, _1866 * cbModelParam._m0[11u].x))), _1318);
            frontier_phi_15_37_ladder = _1991.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1991.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1991.x * cbModelParam._m0[1u].y;
        }
        _1400 = frontier_phi_15_37_ladder_2;
        _1402 = frontier_phi_15_37_ladder_1;
        _1404 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_519, _520, _521), _1318);
        _1400 = _1388.x * cbModelParam._m0[1u].y;
        _1402 = _1388.y * cbModelParam._m0[1u].y;
        _1404 = _1388.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w * 0.019999980926513671875;
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1464 = fma(_570, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562)) + cbModelParam._m0[21u].w;
        float _1468 = fma(_570, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562)) + cbModelParam._m0[22u].w;
        float _1472 = fma(_570, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562)) + cbModelParam._m0[23u].w;
        float _1475 = fma(_521, cbModelParam._m0[21u].z, fma(_520, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519));
        float _1478 = fma(_521, cbModelParam._m0[22u].z, fma(_520, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519));
        float _1481 = fma(_521, cbModelParam._m0[23u].z, fma(_520, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519));
        float _1621;
        if (_1475 > 0.0)
        {
            _1621 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1621 = frontier_phi_27_23_ladder;
        }
        float _1886;
        if (_1478 > 0.0)
        {
            _1886 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1886 = frontier_phi_39_34_ladder;
        }
        float _2089;
        if (_1481 > 0.0)
        {
            _2089 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2089 = frontier_phi_48_45_ladder;
        }
        float _2091 = isnan(_1886) ? _1621 : (isnan(_1621) ? _1886 : min(_1621, _1886));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1475) + _1464;
        float _2097 = (_2092 * _1478) + _1468;
        float _2098 = (_2092 * _1481) + _1472;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2099;
        float _2102 = _2099 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2098 > _2102) || ((_2098 < _2100) || ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 < _2100) || (_2096 > _2102))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2098, cbModelParam._m0[17u].z, fma(_2097, cbModelParam._m0[17u].y, _2096 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2098, cbModelParam._m0[18u].z, fma(_2097, cbModelParam._m0[18u].y, _2096 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2098, cbModelParam._m0[19u].z, fma(_2097, cbModelParam._m0[19u].y, _2096 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_24_48_ladder = _2296.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2296.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2296.x * cbModelParam._m0[1u].z;
        }
        _1500 = frontier_phi_24_48_ladder_2;
        _1502 = frontier_phi_24_48_ladder_1;
        _1504 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_519, _520, _521), _1408);
        _1500 = _1484.x * cbModelParam._m0[1u].z;
        _1502 = _1484.y * cbModelParam._m0[1u].z;
        _1504 = _1484.z * cbModelParam._m0[1u].z;
    }
    float _1516 = ((0.0397587902843952178955078125 - (_533 * 0.03859509527683258056640625)) + (_533 * 0.96097481250762939453125)) * _511;
    float _1517 = _1516 * ((cbModelParam._m0[1u].w * (_1500 - _1400)) + _1400);
    float _1518 = _1516 * ((cbModelParam._m0[1u].w * (_1502 - _1402)) + _1402);
    float _1519 = _1516 * ((cbModelParam._m0[1u].w * (_1504 - _1404)) + _1404);
    float _1522 = fma(_1519, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1517 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1519, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1517 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1519, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, _1517 * cbSceneParam._m0[91u].x));
    uvec4 _1538 = floatBitsToUint(cbInstanceData._m0[_485 + 5u]);
    uint _1540 = _1538.x * 14u;
    uint _1541 = _1540 + 13u;
    float _1548 = _511 + (-1.0);
    float _1553 = (cbLight._m0[_1541].x * _1548) + 1.0;
    float _1554 = (cbLight._m0[_1541].y * _1548) + 1.0;
    float _1555 = (cbLight._m0[_1541].z * _1548) + 1.0;
    float _1556 = (cbLight._m0[_1541].w * _1548) + 1.0;
    uint _1557 = _1540 + 5u;
    float _1563 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1567 = _1540 + 4u;
    float _1574 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1578 = _1540 | 1u;
    float _1589 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_356, _357, _358));
    float _1592 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_356, _357, _358));
    float _3603 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _3614 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1597 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.3183098733425140380859375;
    float _1599 = (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * 0.3183098733425140380859375;
    float _1606 = ((cbLight._m0[_1557].x * _1563) * _1599) + ((cbLight._m0[_1567].x * _1574) * _1597);
    float _1607 = ((_1563 * cbLight._m0[_1557].y) * _1599) + ((_1574 * cbLight._m0[_1567].y) * _1597);
    float _1608 = ((_1563 * cbLight._m0[_1557].z) * _1599) + ((_1574 * cbLight._m0[_1567].z) * _1597);
    uvec4 _1613 = floatBitsToUint(cbLight._m0[_1540 + 12u]);
    bool _1615 = _1613.x == 0u;
    float _1626;
    float _1628;
    float _1630;
    if (_1615)
    {
        _1626 = _1606;
        _1628 = _1607;
        _1630 = _1608;
    }
    else
    {
        uint _1634 = _1540 + 6u;
        float _1650 = (dot(vec3(cbLight._m0[_1540 + 2u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _1651 = _1650 * _1650;
        float _3625 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1653 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1626 = (((cbLight._m0[_1634].x * 0.3183098733425140380859375) * _1652) * _1653) + _1606;
        _1628 = (((cbLight._m0[_1634].y * 0.3183098733425140380859375) * _1652) * _1653) + _1607;
        _1630 = (((cbLight._m0[_1634].z * 0.3183098733425140380859375) * _1652) * _1653) + _1608;
    }
    bool _1633 = _1613.y == 0u;
    float _1671;
    float _1673;
    float _1675;
    if (_1633)
    {
        _1671 = _1626;
        _1673 = _1628;
        _1675 = _1630;
    }
    else
    {
        uint _1830 = _1540 + 7u;
        float _1846 = (dot(vec3(cbLight._m0[_1540 + 3u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _1847 = _1846 * _1846;
        float _3641 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1849 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1671 = (((cbLight._m0[_1830].x * 0.3183098733425140380859375) * _1848) * _1849) + _1626;
        _1673 = (((cbLight._m0[_1830].y * 0.3183098733425140380859375) * _1848) * _1849) + _1628;
        _1675 = (((cbLight._m0[_1830].z * 0.3183098733425140380859375) * _1848) * _1849) + _1630;
    }
    uint _1678 = _1540 + 8u;
    float _1691 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1540].w)) * 0.949999988079071044921875);
    float _1692 = _1691 * _1691;
    float _1693 = cbLight._m0[_1540].x + _433;
    float _1694 = cbLight._m0[_1540].y + _434;
    float _1695 = cbLight._m0[_1540].z + _435;
    float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
    float _1700 = _1699 * _1693;
    float _1701 = _1699 * _1694;
    float _1702 = _1699 * _1695;
    float _1703 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1540].xyz));
    float _3657 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1706 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _1707 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _1708 = dot(vec3(_356, _357, _358), vec3(_1700, _1701, _1702));
    float _3679 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _1712 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_1700, _1701, _1702));
    float _3690 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1716 = _1692 * _1692;
    float _1720 = ((_1711 * _1711) * (_1716 + (-1.0))) + 1.0;
    float _1731 = (exp2(log2(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1733 = 1.0 - _1692;
    float _1744 = (0.5 / (((_1707 * ((_1706 * _1733) + _1692)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1733) + _1692) * _1706))) * _1706;
    float _3701 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1746 = (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1716 / ((_1720 * _1720) * 3.141590118408203125));
    uint _1757 = _1540 + 9u;
    float _1767 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1578].w)) * 0.949999988079071044921875);
    float _1768 = _1767 * _1767;
    float _1769 = cbLight._m0[_1578].x + _433;
    float _1770 = cbLight._m0[_1578].y + _434;
    float _1771 = cbLight._m0[_1578].z + _435;
    float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
    float _1776 = _1775 * _1769;
    float _1777 = _1775 * _1770;
    float _1778 = _1775 * _1771;
    float _1779 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1578].xyz));
    float _3712 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _1783 = dot(vec3(_356, _357, _358), vec3(_1776, _1777, _1778));
    float _3723 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _1787 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1776, _1777, _1778));
    float _3734 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1791 = _1768 * _1768;
    float _1795 = ((_1786 * _1786) * (_1791 + (-1.0))) + 1.0;
    float _1804 = (exp2(log2(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1805 = 1.0 - _1768;
    float _1815 = (0.5 / (((_1707 * ((_1782 * _1805) + _1768)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1805) + _1768) * _1782))) * _1782;
    float _3745 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1791 / ((_1795 * _1795) * 3.141590118408203125));
    float _1827 = (((_1804 * cbLight._m0[_1757].x) * _1817) * _1563) + (((_1731 * cbLight._m0[_1678].x) * _1746) * _1574);
    float _1828 = (((_1804 * cbLight._m0[_1757].y) * _1817) * _1563) + (((_1731 * cbLight._m0[_1678].y) * _1746) * _1574);
    float _1829 = (((_1804 * cbLight._m0[_1757].z) * _1817) * _1563) + (((_1731 * cbLight._m0[_1678].z) * _1746) * _1574);
    float _1891;
    float _1893;
    float _1895;
    if (_1615)
    {
        _1891 = _1827;
        _1893 = _1828;
        _1895 = _1829;
    }
    else
    {
        uint _1897 = _1540 + 2u;
        uint _1901 = _1540 + 10u;
        float _1914 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1897].w)) * 0.949999988079071044921875);
        float _1915 = _1914 * _1914;
        float _1916 = cbLight._m0[_1897].x + _433;
        float _1917 = cbLight._m0[_1897].y + _434;
        float _1918 = cbLight._m0[_1897].z + _435;
        float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
        float _1923 = _1922 * _1916;
        float _1924 = _1922 * _1917;
        float _1925 = _1922 * _1918;
        float _1926 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1897].xyz));
        float _3756 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1929 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1930 = dot(vec3(_356, _357, _358), vec3(_1923, _1924, _1925));
        float _3767 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1934 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_1923, _1924, _1925));
        float _3778 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1938 = _1915 * _1915;
        float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
        float _1951 = (exp2(log2(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1952 = 1.0 - _1915;
        float _1962 = (0.5 / (((_1707 * ((_1929 * _1952) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1952) + _1915) * _1929))) * _1929;
        float _3789 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1964 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
        float _1965 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1891 = (((_1951 * cbLight._m0[_1901].x) * _1964) * _1965) + _1827;
        _1893 = (((_1951 * cbLight._m0[_1901].y) * _1964) * _1965) + _1828;
        _1895 = (((_1951 * cbLight._m0[_1901].z) * _1964) * _1965) + _1829;
    }
    float _2000;
    float _2002;
    float _2004;
    if (_1633)
    {
        _2000 = _1891;
        _2002 = _1893;
        _2004 = _1895;
    }
    else
    {
        uint _2011 = _1540 + 3u;
        uint _2015 = _1540 + 11u;
        float _2028 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_2011].w)) * 0.949999988079071044921875);
        float _2029 = _2028 * _2028;
        float _2030 = cbLight._m0[_2011].x + _433;
        float _2031 = cbLight._m0[_2011].y + _434;
        float _2032 = cbLight._m0[_2011].z + _435;
        float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
        float _2037 = _2036 * _2030;
        float _2038 = _2036 * _2031;
        float _2039 = _2036 * _2032;
        float _2040 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2011].xyz));
        float _3805 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _2044 = dot(vec3(_356, _357, _358), vec3(_2037, _2038, _2039));
        float _3816 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _2048 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2037, _2038, _2039));
        float _3827 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2052 = _2029 * _2029;
        float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
        float _2065 = (exp2(log2(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2066 = 1.0 - _2029;
        float _2076 = (0.5 / (((_1707 * ((_2043 * _2066) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _2066) + _2029) * _2043))) * _2043;
        float _3838 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
        float _2079 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _2000 = (((_2065 * cbLight._m0[_2015].x) * _2078) * _2079) + _1891;
        _2002 = (((_2065 * cbLight._m0[_2015].y) * _2078) * _2079) + _1893;
        _2004 = (((_2065 * cbLight._m0[_2015].z) * _2078) * _2079) + _1895;
    }
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    if (_1538.y == 0u)
    {
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2154;
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2154;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2154;
        uvec4 _2169 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2170 = _2169.x;
        uint _2181 = uint((float(_2169.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _2170))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _2170)));
        float _2191 = (log2(_2157 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2192 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        uint _2195 = uint(isnan(14.0) ? _2192 : (isnan(_2192) ? 14.0 : min(_2192, 14.0)));
        uvec4 _2200 = texelFetch(g_lightClusterGridBuffer, int(((_2195 << 2u) + (_2181 << 6u)) >> 2u));
        uint _2201 = _2200.x;
        uint _2202 = _2169.z;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        if (((((1u << ((_2202 >> 4u) & 15u)) + 4294967295u) & _2201) == 0u) || ((_2202 & 240u) == 0u))
        {
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
        }
        else
        {
            float _2302;
            float _2304;
            float _2306;
            float _2308;
            float _2310;
            float _2312;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2195 << 5u) + (_2181 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2462)
                {
                    frontier_phi_63_pred = _2451;
                    frontier_phi_63_pred_1 = _2450;
                    frontier_phi_63_pred_2 = _2449;
                    frontier_phi_63_pred_3 = _2448;
                    frontier_phi_63_pred_4 = _2447;
                    frontier_phi_63_pred_5 = _2446;
                }
                else
                {
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    uint _2576;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2461;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    for (;;)
                    {
                        uint _2580 = uint(findLSB(_2576)) + (_2452 << 5u);
                        uint _2577 = (_2576 + 4294967295u) & _2576;
                        uint _2582 = _2580 * 48u;
                        vec4 _2596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2602 = (_2580 * 48u) + 4u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2621 = (_2580 * 48u) + 8u;
                        vec3 _2632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x));
                        float _2636 = _2596.x - _2155;
                        float _2637 = _2596.y - _2156;
                        float _2638 = _2596.z - _2157;
                        float _2639 = dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638));
                        float _2642 = inversesqrt(_2639);
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2646 = dot(vec3(_463, _466, _469), vec3(_2643, _2644, _2645));
                        float _2651 = 1.0 - (_2639 * _2596.w);
                        float _3864 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2652 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                        float _2653 = sqrt(_2639) * _2615.w;
                        float _2656 = 1.39999997615814208984375 / (_2653 + 1.39999997615814208984375);
                        float _2657 = _2656 * _2656;
                        float _2660 = ((1.0 - _2657) * _2646) + _2657;
                        float _2663 = _2653 * _2653;
                        float _2667 = ((isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * _2652) / ((_2663 * 0.699999988079071044921875) + 1.0);
                        float _2671 = (-0.0) - _2155;
                        float _2672 = (-0.0) - _2156;
                        float _2673 = (-0.0) - _2157;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2688 = exp2(log2(1.0 / ((_2663 * 3.5) + 5.0)) * 0.25);
                        float _2694 = sqrt(1.0 - ((1.0 - (_2688 * _2688)) * 0.999898970127105712890625));
                        float _2695 = _2694 * _2694;
                        float _2696 = _2695 * _2695;
                        float _2697 = _2678 + _2643;
                        float _2698 = _2679 + _2644;
                        float _2699 = _2680 + _2645;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2707 = dot(vec3(_463, _466, _469), vec3(_2678, _2679, _2680));
                        float _3880 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2710 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
                        float _2711 = dot(vec3(_463, _466, _469), vec3(_2703 * _2697, _2703 * _2698, _2703 * _2699));
                        float _3891 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2714 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                        float _2718 = ((_2714 * _2714) * (_2696 + (-1.0))) + 1.0;
                        float _2719 = _2656 * _2695;
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * _2646) + _2720;
                        float _3902 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                        float _2725 = 1.0 - _2695;
                        float _2735 = (0.5 / (((_2724 * ((_2710 * _2725) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2725) + _2695) * _2710))) * _2724;
                        float _3913 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2746 = (((_2696 * 3.1415927410125732421875) * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) / ((_2718 * _2718) * ((_2663 * 2.1991131305694580078125) + 3.141590118408203125))) * _2652;
                        _2505 = (_2667 * _2615.x) + _2573;
                        _2506 = (_2667 * _2615.y) + _2574;
                        _2507 = (_2667 * _2615.z) + _2575;
                        _2502 = (_2746 * _2632.x) + _2570;
                        _2503 = (_2746 * _2632.y) + _2571;
                        _2504 = (_2746 * _2632.z) + _2572;
                        if (_2577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2577;
                        }
                    }
                    frontier_phi_63_pred = _2507;
                    frontier_phi_63_pred_1 = _2506;
                    frontier_phi_63_pred_2 = _2505;
                    frontier_phi_63_pred_3 = _2504;
                    frontier_phi_63_pred_4 = _2503;
                    frontier_phi_63_pred_5 = _2502;
                }
                _2312 = frontier_phi_63_pred;
                _2310 = frontier_phi_63_pred_1;
                _2308 = frontier_phi_63_pred_2;
                _2306 = frontier_phi_63_pred_3;
                _2304 = frontier_phi_63_pred_4;
                _2302 = frontier_phi_63_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2302;
                    _2447 = _2304;
                    _2448 = _2306;
                    _2449 = _2308;
                    _2450 = _2310;
                    _2451 = _2312;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
        }
        uvec4 _2315 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2316 = _2315.z;
        uint _2318 = (_2316 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2318) & _2201) == 0u)
        {
            _2414 = _2301;
            _2416 = _2303;
            _2418 = _2305;
            _2420 = _2307;
            _2422 = _2309;
            _2424 = _2311;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
            float _2440 = _2439 * _2155;
            float _2441 = _2439 * _2156;
            float _2442 = _2439 * _2157;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2318 < ((_2316 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2553 = _2301;
                float _2554 = _2303;
                float _2555 = _2305;
                float _2556 = _2307;
                float _2557 = _2309;
                float _2558 = _2311;
                uint _2559 = _2318;
                uint _2568;
                bool _2569;
                for (;;)
                {
                    _2568 = texelFetch(g_lightClassification, int((((_2195 << 5u) + (_2181 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                    _2569 = _2568 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2569)
                    {
                        frontier_phi_69_pred = _2558;
                        frontier_phi_69_pred_1 = _2557;
                        frontier_phi_69_pred_2 = _2556;
                        frontier_phi_69_pred_3 = _2555;
                        frontier_phi_69_pred_4 = _2554;
                        frontier_phi_69_pred_5 = _2553;
                    }
                    else
                    {
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _2764 = _2553;
                        float _2765 = _2554;
                        float _2766 = _2555;
                        float _2767 = _2556;
                        float _2768 = _2557;
                        float _2769 = _2558;
                        uint _2770 = _2568;
                        uint _2771;
                        vec4 _2796;
                        float _2797;
                        vec4 _2812;
                        vec3 _2824;
                        vec4 _2840;
                        vec4 _2856;
                        float _2903;
                        bool _2904;
                        for (;;)
                        {
                            uint _2781 = ((_2559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2770));
                            _2771 = (_2770 + 4294967295u) & _2770;
                            uint _2783 = _2781 * 40u;
                            _2796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 3u)).x));
                            _2797 = _2796.w;
                            uint _2799 = (_2781 * 40u) + 4u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            uint _2814 = (_2781 * 40u) + 8u;
                            _2824 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x));
                            uint _2827 = (_2781 * 40u) + 16u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2843 = (_2781 * 40u) + 20u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2859 = (_2781 * 40u) + 24u;
                            vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2878 = (_2781 * 40u) + 28u;
                            vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            _2903 = fma(_2157, _2891.z, fma(_2156, _2891.y, _2891.x * _2155)) + _2891.w;
                            _2904 = !((fma(_2157, _2872.z, fma(_2156, _2872.y, _2872.x * _2155)) + _2872.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2904)
                            {
                                float _2931 = _2796.x - _2155;
                                float _2932 = _2796.y - _2156;
                                float _2933 = _2796.z - _2157;
                                float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                                float _2937 = inversesqrt(_2934);
                                float _2938 = _2937 * _2931;
                                float _2939 = _2937 * _2932;
                                float _2940 = _2937 * _2933;
                                float _2944 = 1.0 - (_2934 / (_2797 * _2797));
                                float _3924 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2945 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                                float _2949 = sqrt(_2934) * _2812.w;
                                float _2951 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                                float _2952 = _2951 * _2951;
                                float _2955 = ((1.0 - _2952) * dot(vec3(_2938, _2939, _2940), vec3(_463, _466, _469))) + _2952;
                                float _2958 = _2949 * _2949;
                                float _2962 = (fma(_2157, _2840.z, fma(_2156, _2840.y, _2840.x * _2155)) + _2840.w) / _2903;
                                float _2963 = (fma(_2157, _2856.z, fma(_2156, _2856.y, _2856.x * _2155)) + _2856.w) / _2903;
                                float _2967 = 1.0 - dot(vec2(_2962, _2963), vec2(_2962, _2963));
                                float _3940 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                                float _2969 = _2968 * (((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2945) / ((_2958 * 0.699999988079071044921875) + 1.0));
                                float _2981 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                                float _2986 = sqrt(1.0 - ((1.0 - (_2981 * _2981)) * 0.999898970127105712890625));
                                float _2987 = _2986 * _2986;
                                float _2988 = _2987 * _2987;
                                float _2989 = _2938 - _2440;
                                float _2990 = _2939 - _2441;
                                float _2991 = _2940 - _2442;
                                float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                                float _2999 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _3951 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3002 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                                float _3003 = dot(vec3(_463, _466, _469), vec3(_2995 * _2989, _2995 * _2990, _2995 * _2991));
                                float _3962 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3006 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                                float _3010 = ((_3006 * _3006) * (_2988 + (-1.0))) + 1.0;
                                float _3011 = _2951 * _2987;
                                float _3012 = _3011 * _3011;
                                float _3018 = ((1.0 - _3012) * dot(vec3(_463, _466, _469), vec3(_2938, _2939, _2940))) + _3012;
                                float _3973 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                                float _3020 = 1.0 - _2987;
                                float _3030 = (0.5 / (((_3019 * ((_3002 * _3020) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2987) * _3002))) * _3019;
                                float _3984 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3040 = (_2968 * _2945) * (((_2988 * 3.1415927410125732421875) * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) / ((_3010 * _3010) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2969 * _2812.z;
                                frontier_phi_75_pred_1 = _2969 * _2812.y;
                                frontier_phi_75_pred_2 = _2969 * _2812.x;
                                frontier_phi_75_pred_3 = _3040 * _2824.z;
                                frontier_phi_75_pred_4 = _3040 * _2824.y;
                                frontier_phi_75_pred_5 = _3040 * _2824.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3049 = frontier_phi_75_pred;
                            _3048 = frontier_phi_75_pred_1;
                            _3047 = frontier_phi_75_pred_2;
                            _3046 = frontier_phi_75_pred_3;
                            _3045 = frontier_phi_75_pred_4;
                            _3044 = frontier_phi_75_pred_5;
                            _2754 = _3047 + _2767;
                            _2755 = _3048 + _2768;
                            _2756 = _3049 + _2769;
                            _2751 = _3044 + _2764;
                            _2752 = _3045 + _2765;
                            _2753 = _3046 + _2766;
                            if (_2771 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2771;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2756;
                        frontier_phi_69_pred_1 = _2755;
                        frontier_phi_69_pred_2 = _2754;
                        frontier_phi_69_pred_3 = _2753;
                        frontier_phi_69_pred_4 = _2752;
                        frontier_phi_69_pred_5 = _2751;
                    }
                    _2425 = frontier_phi_69_pred;
                    _2423 = frontier_phi_69_pred_1;
                    _2421 = frontier_phi_69_pred_2;
                    _2419 = frontier_phi_69_pred_3;
                    _2417 = frontier_phi_69_pred_4;
                    _2415 = frontier_phi_69_pred_5;
                    uint _2560 = _2559 + 1u;
                    if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2553 = _2415;
                        _2554 = _2417;
                        _2555 = _2419;
                        _2556 = _2421;
                        _2557 = _2423;
                        _2558 = _2425;
                        _2559 = _2560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2425;
                frontier_phi_57_58_ladder_1 = _2423;
                frontier_phi_57_58_ladder_2 = _2421;
                frontier_phi_57_58_ladder_3 = _2419;
                frontier_phi_57_58_ladder_4 = _2417;
                frontier_phi_57_58_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_57_58_ladder = _2311;
                frontier_phi_57_58_ladder_1 = _2309;
                frontier_phi_57_58_ladder_2 = _2307;
                frontier_phi_57_58_ladder_3 = _2305;
                frontier_phi_57_58_ladder_4 = _2303;
                frontier_phi_57_58_ladder_5 = _2301;
            }
            _2414 = frontier_phi_57_58_ladder_5;
            _2416 = frontier_phi_57_58_ladder_4;
            _2418 = frontier_phi_57_58_ladder_3;
            _2420 = frontier_phi_57_58_ladder_2;
            _2422 = frontier_phi_57_58_ladder_1;
            _2424 = frontier_phi_57_58_ladder;
        }
        float _2429 = isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0));
        _2213 = (_2429 * _2420) + _1671;
        _2215 = (_2429 * _2422) + _1673;
        _2217 = (_2429 * _2424) + _1675;
        _2219 = ((_2414 * 0.039999999105930328369140625) * _2429) + _2000;
        _2221 = ((_2416 * 0.039999999105930328369140625) * _2429) + _2002;
        _2223 = ((_2418 * 0.039999999105930328369140625) * _2429) + _2004;
    }
    else
    {
        _2213 = _1671;
        _2215 = _1673;
        _2217 = _1675;
        _2219 = _2000;
        _2221 = _2002;
        _2223 = _2004;
    }
    float _4000 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4011 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4022 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    uint _2243 = _485 + 6u;
    float _2251 = _441 / cbSceneParam._m0[86u].x;
    float _2252 = _442 / cbSceneParam._m0[86u].y;
    vec4 _2266 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, (log2((isnan(cbSceneParam._m0[77u].w) ? _374 : (isnan(_374) ? cbSceneParam._m0[77u].w : min(_374, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2268 = _2266.x;
    float _2269 = _2266.y;
    float _2270 = _2266.z;
    float _2271 = _2266.w;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_374 > cbSceneParam._m0[78u].w)
    {
        float _2326 = isnan(_374) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _374 : min(cbSceneParam._m0[80u].w, _374));
        float _2327 = _2326 / _374;
        float _2338 = _2327 * _426;
        float _2339 = _427 * _2327;
        float _2340 = (-0.0) - _2339;
        float _2341 = _2327 * _428;
        float _2343 = (cbSceneParam._m0[77u].w * _2340) / _2326;
        float _2344 = _2343 + cbSceneParam._m0[79u].w;
        float _2345 = cbSceneParam._m0[79u].w - _2339;
        float _2351 = sqrt(((_2338 * _2338) + (_2339 * _2339)) + (_2341 * _2341));
        float _2354 = (1.0 - (cbSceneParam._m0[77u].w / _2326)) * _2351;
        float _2359 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2361 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2515;
        if (abs((_2340 - _2343) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2515 = ((((_2344 > 0.0) ? exp2(_2359 * _2344) : (2.0 - exp2(_2361 * _2344))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2354;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : max(_2344, _2345));
            float _2477 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : min(_2344, _2345));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2515 = ((abs(_2351 / _2340) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2359 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2359 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2361 * _2486) - exp2(_2361 * _2487)) * _2475))) + (_2354 * cbSceneParam._m0[80u].z);
        }
        vec4 _2517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, 1.0), 0.0);
        float _2526 = exp2((_2515 * (-1.44269502162933349609375)) * (1.0 - _2517.w));
        float _2527 = log2(_2526);
        float _2543 = log2(_2271);
        _2363 = (exp2(_2543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].x)) * _2517.x) / cbSceneParam._m0[78u].x)) + _2268;
        _2365 = (exp2(_2543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].y)) * _2517.y) / cbSceneParam._m0[78u].y)) + _2269;
        _2367 = (exp2(_2543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].z)) * _2517.z) / cbSceneParam._m0[78u].z)) + _2270;
        _2369 = _2526 * _2271;
    }
    else
    {
        _2363 = _2268;
        _2365 = _2269;
        _2367 = _2270;
        _2369 = _2271;
    }
    float _2381 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2382 = _2381 == 3.0;
    float _2384 = log2(_2369);
    float _2391 = exp2(_2384 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2213 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _511))) + ((_2219 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1307)) * cbPerFrame._m0[3u].x));
    float _2392 = exp2(_2384 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_2215 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _511))) + ((_2221 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1307)) * cbPerFrame._m0[3u].x));
    float _2393 = exp2(_2384 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2217 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _511))) + ((_2223 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1307)) * cbPerFrame._m0[3u].x));
    float _2402 = (_2381 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2402 * (_2382 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2363)));
    SV_Target.y = _2402 * (_2382 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2365)));
    SV_Target.z = _2402 * (_2382 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2367)));
    SV_Target.w = cbInstanceData._m0[_2243].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2243].w;
}


