#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanC_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _876;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    float _226 = cbPerFrame._m0[22u].x * 0.02999999932944774627685546875;
    float _228 = cbPerFrame._m0[22u].x * (-0.00999999977648258209228515625);
    float _232 = cbPerFrame._m0[22u].x * 6.5;
    uint _235 = uint(int(floor(_232)));
    float _236 = fract(_232);
    uint _237 = _235 + 1u;
    uint _238 = uint(int(cbMtdParam._m0[9u].z * cbMtdParam._m0[9u].y));
    float _241 = float(int(_235 - _238 * (_235 / _238)));
    float _242 = _241 - cbMtdParam._m0[9u].y * trunc(_241 / cbMtdParam._m0[9u].y);
    float _244 = floor(_241 / cbMtdParam._m0[9u].y);
    float _245 = float(int(_237 - _238 * (_237 / _238)));
    float _246 = _245 - cbMtdParam._m0[9u].y * trunc(_245 / cbMtdParam._m0[9u].y);
    float _248 = floor(_245 / cbMtdParam._m0[9u].y);
    float _249 = 1.0 / cbMtdParam._m0[9u].y;
    float _251 = 1.0 / cbMtdParam._m0[9u].z;
    float _252 = fract(_226 + (TEXCOORD.x * 2.0));
    float _253 = fract(_228 + (TEXCOORD.y * 5.0));
    vec4 _274 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_252 + _246) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_253 + _248) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _283 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_252 + _242) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_253 + _244) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _285 = _283.x;
    float _286 = _283.y;
    float _298 = fract(_226 + (TEXCOORD.x * 0.5));
    float _299 = fract(_228 + (TEXCOORD.y * 0.5));
    vec4 _312 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_298 + _246) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_299 + _248) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _320 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_298 + _242) * _249) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_299 + _244) * _251) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _322 = _320.x;
    float _323 = _320.y;
    float _328 = ((_312.x - _322) * _236) + _322;
    float _329 = ((_312.y - _323) * _236) + _323;
    float _338 = (((((((_274.x - _285) * _236) + _285) - _328) * cbMtdParam._m0[9u].x) + _328) * 2.0) + (-1.0);
    float _340 = (((((((_274.y - _286) * _236) + _286) - _329) * cbMtdParam._m0[9u].x) + _329) * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3467 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))));
    float _349 = fma(_346, _212, fma(_340, _204 * TANGENT.x, (_190 * _183) * _338));
    float _352 = fma(_346, _213, fma(_340, _204 * TANGENT.y, (_190 * _184) * _338));
    float _355 = fma(_346, _214, fma(_340, _204 * TANGENT.z, (_190 * _185) * _338));
    float _359 = inversesqrt(dot(vec3(_349, _352, _355), vec3(_349, _352, _355)));
    float _360 = _359 * _349;
    float _361 = _359 * _352;
    float _362 = _359 * _355;
    float _378 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _420);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _420);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _420);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    float _445 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _446 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _467 = fma(_362, cbSceneParam._m0[5u].z, fma(_361, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _360));
    float _470 = fma(_362, cbSceneParam._m0[6u].z, fma(_361, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _360));
    float _473 = fma(_362, cbSceneParam._m0[7u].z, fma(_361, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _360));
    uint _489 = uint(roundEven(NORMAL.w)) * 13u;
    uint _492 = (_489 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _498 = (cbMtdParam._m0[0u].x * 0.00369799998588860034942626953125) * cbInstanceData._m0[_492].x;
    float _499 = (cbMtdParam._m0[0u].y * 0.086921997368335723876953125) * cbInstanceData._m0[_492].y;
    float _500 = (cbMtdParam._m0[0u].z * 0.1275610029697418212890625) * cbInstanceData._m0[_492].z;
    float _3478 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    vec4 _512 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _445, cbSceneParam._m0[86u].y * _446));
    float _515 = _512.x * TEXCOORD.z;
    float _516 = dot(vec3(_360, _361, _362), vec3(_437, _438, _439));
    float _519 = _516 * 2.0;
    float _523 = (_519 * _360) - _437;
    float _524 = (_519 * _361) - _438;
    float _525 = (_519 * _362) - _439;
    float _529 = abs(dot(vec3(_437, _438, _439), vec3(_360, _361, _362)));
    float _3511 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _537 = exp2(log2(1.0 - ((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.999000012874603271484375)) * 4.949747562408447265625);
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _875;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _605 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _609 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _633 = _566 + _360;
        float _634 = _570 + _361;
        float _635 = _574 + _362;
        float _645 = fma(_635, cbModelParam._m0[26u].z, fma(_634, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _633)) - _601;
        float _646 = fma(_635, cbModelParam._m0[27u].z, fma(_634, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _633)) - _605;
        float _647 = fma(_635, cbModelParam._m0[28u].z, fma(_634, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _633)) - _609;
        float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
        float _664 = ((_651 * _645) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_651 * _646) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_651 * _647) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        float _703 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_669.x + (-0.5));
        float _705 = _703 * (_669.y + (-0.5));
        float _706 = _703 * (_669.z + (-0.5));
        float _713 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_676.x + (-0.5));
        float _715 = _713 * (_676.y + (-0.5));
        float _716 = _713 * (_676.z + (-0.5));
        float _723 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_683.x + (-0.5));
        float _725 = _723 * (_683.y + (-0.5));
        float _726 = _723 * (_683.z + (-0.5));
        float _733 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_690.x + (-0.5));
        float _735 = _733 * (_690.y + (-0.5));
        float _736 = _733 * (_690.z + (-0.5));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = _704 * 0.5;
        float _741 = _714 * 0.5;
        float _742 = _724 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _757 = (dot(vec3(_360, _361, _362), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _767 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3559 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_769 + 1.0))) + _774) * _737;
        float _784 = _705 * 0.5;
        float _785 = _715 * 0.5;
        float _786 = _725 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_360, _361, _362), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3592 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_811 + 1.0))) + _816) * _738;
        float _826 = _706 * 0.5;
        float _827 = _716 * 0.5;
        float _828 = _726 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _842 = (dot(vec3(_360, _361, _362), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _851 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3625 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_853 + 1.0))) + _858) * _739;
        _875 = _706;
        _877 = _705;
        _878 = _704;
        _879 = _716;
        _880 = _715;
        _881 = _714;
        _882 = _726;
        _883 = _725;
        _884 = _724;
        _885 = _739;
        _886 = _738;
        _887 = _737;
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
    }
    else
    {
        _875 = _876;
        _877 = _876;
        _878 = _876;
        _879 = _876;
        _880 = _876;
        _881 = _876;
        _882 = _876;
        _883 = _876;
        _884 = _876;
        _885 = _876;
        _886 = _876;
        _887 = _876;
        _888 = 0.0;
        _889 = 0.0;
        _890 = 0.0;
    }
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _916 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _920 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _924 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _947 = _566 + _360;
        float _948 = _570 + _361;
        float _949 = _574 + _362;
        float _959 = fma(_949, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947)) - _916;
        float _960 = fma(_949, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947)) - _920;
        float _961 = fma(_949, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947)) - _924;
        float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
        float _978 = ((_965 * _959) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_916 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_965 * _960) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_920 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_965 * _961) / cbModelParam._m0[35u].z) + ((((((_924 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1015 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_982.x + (-0.5));
        float _1017 = _1015 * (_982.y + (-0.5));
        float _1018 = _1015 * (_982.z + (-0.5));
        float _1025 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_989.x + (-0.5));
        float _1027 = _1025 * (_989.y + (-0.5));
        float _1028 = _1025 * (_989.z + (-0.5));
        float _1035 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_996.x + (-0.5));
        float _1037 = _1035 * (_996.y + (-0.5));
        float _1038 = _1035 * (_996.z + (-0.5));
        float _1045 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1003.x + (-0.5));
        float _1047 = _1045 * (_1003.y + (-0.5));
        float _1048 = _1045 * (_1003.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_360, _361, _362), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3688 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1079 + 1.0))) + _1084) * _1049;
        float _1094 = _1017 * 0.5;
        float _1095 = _1027 * 0.5;
        float _1096 = _1037 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_360, _361, _362), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3721 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1121 + 1.0))) + _1126) * _1050;
        float _1136 = _1018 * 0.5;
        float _1137 = _1028 * 0.5;
        float _1138 = _1038 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_360, _361, _362), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3754 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1163 + 1.0))) + _1168) * _1051;
        _1185 = _1018;
        _1186 = _1017;
        _1187 = _1016;
        _1188 = _1028;
        _1189 = _1027;
        _1190 = _1026;
        _1191 = _1038;
        _1192 = _1037;
        _1193 = _1036;
        _1194 = _1051;
        _1195 = _1050;
        _1196 = _1049;
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _876;
        _1186 = _876;
        _1187 = _876;
        _1188 = _876;
        _1189 = _876;
        _1190 = _876;
        _1191 = _876;
        _1192 = _876;
        _1193 = _876;
        _1194 = _876;
        _1195 = _876;
        _1196 = _876;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _888)) + _888;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _889)) + _889;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _890)) + _890;
    float _1232 = fma(_1211, cbSceneParam._m0[89u].z, fma(_1210, cbSceneParam._m0[89u].y, _1209 * cbSceneParam._m0[89u].x));
    float _1235 = fma(_1211, cbSceneParam._m0[90u].z, fma(_1210, cbSceneParam._m0[90u].y, _1209 * cbSceneParam._m0[90u].x));
    float _1238 = fma(_1211, cbSceneParam._m0[91u].z, fma(_1210, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1209));
    float _1253 = _523 * 0.5;
    float _1254 = _524 * 0.5;
    float _1255 = _525 * 0.5;
    float _1256 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1259 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1262 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1296;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1269 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_875, _879, _882, _885));
        float _1273 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_877, _880, _883, _886));
        float _1277 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_878, _881, _884, _887));
        float _1284 = dot(vec4(cbModelParam._m0[39u]), vec4(_1253, _1254, _1255, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1307;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1298 = dot(vec4(cbModelParam._m0[40u]), vec4(_1253, _1254, _1255, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1311 = (_1307 * cbModelParam._m0[1u].x) + (_1296 * (1.0 - cbModelParam._m0[1u].x));
    float _1320 = cbModelParam._m0[25u].z * 0.019999980926513671875;
    float _1322 = isnan(_1320) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1320 : min(cbModelParam._m0[25u].z, _1320));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1371 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1375 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1379 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1382 = fma(_525, cbModelParam._m0[13u].z, fma(_524, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523));
        float _1385 = fma(_525, cbModelParam._m0[14u].z, fma(_524, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523));
        float _1388 = fma(_525, cbModelParam._m0[15u].z, fma(_524, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523));
        float _1415;
        if (_1382 > 0.0)
        {
            _1415 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1415 = frontier_phi_16_14_ladder;
        }
        float _1588;
        if (_1385 > 0.0)
        {
            _1588 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1588 = frontier_phi_25_21_ladder;
        }
        float _1884;
        if (_1388 > 0.0)
        {
            _1884 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1884 = frontier_phi_37_32_ladder;
        }
        float _1886 = isnan(_1588) ? _1415 : (isnan(_1415) ? _1588 : min(_1415, _1588));
        float _1887 = isnan(_1884) ? _1886 : (isnan(_1886) ? _1884 : min(_1886, _1884));
        float _1891 = (_1887 * _1382) + _1371;
        float _1892 = (_1887 * _1385) + _1375;
        float _1893 = (_1887 * _1388) + _1379;
        float _1894 = _1887 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1894;
        float _1898 = _1894 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 > _1898) || ((_1892 < _1896) || ((_1891 < _1896) || (_1891 > _1898))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1893, cbModelParam._m0[9u].z, fma(_1892, cbModelParam._m0[9u].y, _1891 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1893, cbModelParam._m0[10u].z, fma(_1892, cbModelParam._m0[10u].y, _1891 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1893, cbModelParam._m0[11u].z, fma(_1892, cbModelParam._m0[11u].y, _1891 * cbModelParam._m0[11u].x))), _1322);
            frontier_phi_15_37_ladder = _2038.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2038.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2038.z * cbModelParam._m0[1u].y;
        }
        _1404 = frontier_phi_15_37_ladder_1;
        _1406 = frontier_phi_15_37_ladder;
        _1408 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_523, _524, _525), _1322);
        _1404 = _1392.x * cbModelParam._m0[1u].y;
        _1406 = _1392.y * cbModelParam._m0[1u].y;
        _1408 = _1392.z * cbModelParam._m0[1u].y;
    }
    float _1411 = cbModelParam._m0[25u].w * 0.019999980926513671875;
    float _1412 = isnan(_1411) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1411 : min(cbModelParam._m0[25u].w, _1411));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1468 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1472 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1476 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1479 = fma(_525, cbModelParam._m0[21u].z, fma(_524, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523));
        float _1482 = fma(_525, cbModelParam._m0[22u].z, fma(_524, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523));
        float _1485 = fma(_525, cbModelParam._m0[23u].z, fma(_524, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523));
        float _1593;
        if (_1479 > 0.0)
        {
            _1593 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1593 = frontier_phi_27_23_ladder;
        }
        float _1911;
        if (_1482 > 0.0)
        {
            _1911 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1911 = frontier_phi_39_34_ladder;
        }
        float _2238;
        if (_1485 > 0.0)
        {
            _2238 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2238 = frontier_phi_49_46_ladder;
        }
        float _2240 = isnan(_1911) ? _1593 : (isnan(_1593) ? _1911 : min(_1593, _1911));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1479) + _1468;
        float _2246 = (_2241 * _1482) + _1472;
        float _2247 = (_2241 * _1485) + _1476;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2248;
        float _2251 = _2248 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2247 > _2251) || ((_2247 < _2249) || ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 < _2249) || (_2245 > _2251))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2364 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2247, cbModelParam._m0[17u].z, fma(_2246, cbModelParam._m0[17u].y, _2245 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2247, cbModelParam._m0[18u].z, fma(_2246, cbModelParam._m0[18u].y, _2245 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2247, cbModelParam._m0[19u].z, fma(_2246, cbModelParam._m0[19u].y, _2245 * cbModelParam._m0[19u].x))), _1412);
            frontier_phi_24_49_ladder = _2364.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2364.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2364.x * cbModelParam._m0[1u].z;
        }
        _1504 = frontier_phi_24_49_ladder_2;
        _1506 = frontier_phi_24_49_ladder_1;
        _1508 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_523, _524, _525), _1412);
        _1504 = _1488.x * cbModelParam._m0[1u].z;
        _1506 = _1488.y * cbModelParam._m0[1u].z;
        _1508 = _1488.z * cbModelParam._m0[1u].z;
    }
    float _1520 = ((0.0397587902843952178955078125 - (_537 * 0.03859509527683258056640625)) + (_537 * 0.96097481250762939453125)) * _515;
    float _1521 = _1520 * ((cbModelParam._m0[1u].w * (_1504 - _1404)) + _1404);
    float _1522 = _1520 * ((cbModelParam._m0[1u].w * (_1506 - _1406)) + _1406);
    float _1523 = _1520 * ((cbModelParam._m0[1u].w * (_1508 - _1408)) + _1408);
    float _1526 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, _1521 * cbSceneParam._m0[91u].x));
    float _1567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1571 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1575 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1579 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1580 = _1567 / _1579;
    float _1581 = _1571 / _1579;
    float _1582 = _1575 / _1579;
    float _1729;
    float _1730;
    float _1731;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1609 = ((uint(_1582 > cbSceneParam._m0[59u].y) + uint(_1582 > cbSceneParam._m0[59u].x)) + uint(_1582 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1610 = _1609 + 43u;
        uint _1618 = _1609 + 44u;
        uint _1626 = _1609 + 45u;
        uint _1634 = _1609 + 46u;
        float _1645 = fma(_1579, cbSceneParam._m0[_1610].w, fma(_1575, cbSceneParam._m0[_1610].z, fma(_1571, cbSceneParam._m0[_1610].y, _1567 * cbSceneParam._m0[_1610].x)));
        float _1649 = fma(_1579, cbSceneParam._m0[_1618].w, fma(_1575, cbSceneParam._m0[_1618].z, fma(_1571, cbSceneParam._m0[_1618].y, _1567 * cbSceneParam._m0[_1618].x)));
        float _1657 = fma(_1579, cbSceneParam._m0[_1634].w, fma(_1575, cbSceneParam._m0[_1634].z, fma(_1571, cbSceneParam._m0[_1634].y, _1567 * cbSceneParam._m0[_1634].x)));
        float _1662 = cbSceneParam._m0[33u].z * _1657;
        float _1664 = cbSceneParam._m0[33u].w * _1657;
        float _1667 = fma(_1579, cbSceneParam._m0[_1626].w, fma(_1575, cbSceneParam._m0[_1626].z, fma(_1571, cbSceneParam._m0[_1626].y, _1567 * cbSceneParam._m0[_1626].x))) / _1657;
        float _1715 = (cbSceneParam._m0[33u].x - sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582))) * cbSceneParam._m0[33u].y;
        float _3880 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1722 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 + _1645) / _1657, (_1664 + _1649) / _1657), _1667), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 + _1645) / _1657, (_1649 - _1662) / _1657), _1667), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1645 - _1662) / _1657, (_1649 - _1664) / _1657), _1667), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1645 - _1664) / _1657, (_1662 + _1649) / _1657), _1667), 0.0)).x), vec4(0.25)));
        _1729 = 1.0 - (_1722 * cbSceneParam._m0[34u].x);
        _1730 = 1.0 - (_1722 * cbSceneParam._m0[34u].y);
        _1731 = 1.0 - (_1722 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1729 = 1.0;
        _1730 = 1.0;
        _1731 = 1.0;
    }
    float _1795;
    float _1797;
    float _1799;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1783 = fma(_1579, cbSceneParam._m0[63u].w, fma(_1575, cbSceneParam._m0[63u].z, fma(_1571, cbSceneParam._m0[63u].y, _1567 * cbSceneParam._m0[63u].x)));
        float _1784 = fma(_1579, cbSceneParam._m0[60u].w, fma(_1575, cbSceneParam._m0[60u].z, fma(_1571, cbSceneParam._m0[60u].y, _1567 * cbSceneParam._m0[60u].x))) / _1783;
        float _1785 = fma(_1579, cbSceneParam._m0[61u].w, fma(_1575, cbSceneParam._m0[61u].z, fma(_1571, cbSceneParam._m0[61u].y, _1567 * cbSceneParam._m0[61u].x))) / _1783;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1784 >= cbSceneParam._m0[64u].x) && (_1785 >= cbSceneParam._m0[64u].y)) && (_1784 <= cbSceneParam._m0[64u].z)) && (_1785 <= cbSceneParam._m0[64u].w))
        {
            float _1924 = fma(_1579, cbSceneParam._m0[62u].w, fma(_1575, cbSceneParam._m0[62u].z, fma(_1571, cbSceneParam._m0[62u].y, _1567 * cbSceneParam._m0[62u].x))) / _1783;
            float _1928 = isnan(cbSceneParam._m0[41u].w) ? _1924 : (isnan(_1924) ? cbSceneParam._m0[41u].w : max(_1924, cbSceneParam._m0[41u].w));
            float _1971 = (cbSceneParam._m0[33u].x - sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582))) * cbSceneParam._m0[33u].y;
            float _3896 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
            float _1978 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1784, cbSceneParam._m0[33u].w + _1785), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1784, _1785 - cbSceneParam._m0[33u].z), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1784 - cbSceneParam._m0[33u].z, _1785 - cbSceneParam._m0[33u].w), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1784 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1785), _1928), 0.0)).x), vec4(0.25)));
            float _1982 = 1.0 - (_1978 * cbSceneParam._m0[34u].x);
            float _1983 = 1.0 - (_1978 * cbSceneParam._m0[34u].y);
            float _1984 = 1.0 - (_1978 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1983) ? _1730 : (isnan(_1730) ? _1983 : min(_1730, _1983));
            frontier_phi_36_35_ladder_1 = isnan(_1984) ? _1731 : (isnan(_1731) ? _1984 : min(_1731, _1984));
            frontier_phi_36_35_ladder_2 = isnan(_1982) ? _1729 : (isnan(_1729) ? _1982 : min(_1729, _1982));
        }
        else
        {
            frontier_phi_36_35_ladder = _1730;
            frontier_phi_36_35_ladder_1 = _1731;
            frontier_phi_36_35_ladder_2 = _1729;
        }
        _1795 = frontier_phi_36_35_ladder_2;
        _1797 = frontier_phi_36_35_ladder;
        _1799 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1795 = _1729;
        _1797 = _1730;
        _1799 = _1731;
    }
    uvec4 _1804 = floatBitsToUint(cbInstanceData._m0[_489 + 5u]);
    uint _1806 = _1804.x * 14u;
    uint _1807 = _1806 + 13u;
    float _1814 = _515 + (-1.0);
    float _1819 = (cbLight._m0[_1807].x * _1814) + 1.0;
    float _1820 = (cbLight._m0[_1807].y * _1814) + 1.0;
    float _1821 = (cbLight._m0[_1807].z * _1814) + 1.0;
    float _1822 = (cbLight._m0[_1807].w * _1814) + 1.0;
    uint _1823 = _1806 + 5u;
    float _1829 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1833 = _1806 + 4u;
    float _1843 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1847 = _1806 | 1u;
    float _1858 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_360, _361, _362));
    float _1861 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_360, _361, _362));
    float _3932 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _3943 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1866 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1868 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.3183098733425140380859375;
    float _1875 = ((cbLight._m0[_1823].x * _1829) * _1868) + (((cbLight._m0[_1833].x * _1795) * _1843) * _1866);
    float _1876 = ((_1829 * cbLight._m0[_1823].y) * _1868) + (((cbLight._m0[_1833].y * _1797) * _1843) * _1866);
    float _1877 = ((_1829 * cbLight._m0[_1823].z) * _1868) + (((cbLight._m0[_1833].z * _1799) * _1843) * _1866);
    uvec4 _1881 = floatBitsToUint(cbLight._m0[_1806 + 12u]);
    bool _1883 = _1881.x == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1883)
    {
        _1985 = _1875;
        _1987 = _1876;
        _1989 = _1877;
    }
    else
    {
        uint _1993 = _1806 + 6u;
        float _2009 = (dot(vec3(cbLight._m0[_1806 + 2u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _2010 = _2009 * _2009;
        float _3954 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2012 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1985 = (((cbLight._m0[_1993].x * 0.3183098733425140380859375) * _2011) * _2012) + _1875;
        _1987 = (((cbLight._m0[_1993].y * 0.3183098733425140380859375) * _2011) * _2012) + _1876;
        _1989 = (((cbLight._m0[_1993].z * 0.3183098733425140380859375) * _2011) * _2012) + _1877;
    }
    bool _1992 = _1881.y == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_1992)
    {
        _2047 = _1985;
        _2049 = _1987;
        _2051 = _1989;
    }
    else
    {
        uint _2209 = _1806 + 7u;
        float _2225 = (dot(vec3(cbLight._m0[_1806 + 3u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _3970 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _2228 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2047 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _1985;
        _2049 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _1987;
        _2051 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _1989;
    }
    uint _2054 = _1806 + 8u;
    float _2067 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1806].w)) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1806].x + _437;
    float _2070 = cbLight._m0[_1806].y + _438;
    float _2071 = cbLight._m0[_1806].z + _439;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1806].xyz));
    float _3986 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _2083 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _2084 = dot(vec3(_360, _361, _362), vec3(_2076, _2077, _2078));
    float _4008 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2076, _2077, _2078));
    float _4019 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2068 * _2068;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2109 = 1.0 - _2068;
    float _2120 = (0.5 / (((_2083 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2109) + _2068) * _2082))) * _2082;
    float _4030 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    uint _2136 = _1806 + 9u;
    float _2146 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1847].w)) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1847].x + _437;
    float _2149 = cbLight._m0[_1847].y + _438;
    float _2150 = cbLight._m0[_1847].z + _439;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1847].xyz));
    float _4041 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _2162 = dot(vec3(_360, _361, _362), vec3(_2155, _2156, _2157));
    float _4052 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2155, _2156, _2157));
    float _4063 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2147 * _2147;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2147;
    float _2194 = (0.5 / (((_2083 * ((_2161 * _2184) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2184) + _2147) * _2161))) * _2161;
    float _4074 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    float _2206 = (((_2183 * cbLight._m0[_2136].x) * _2196) * _1829) + ((((cbLight._m0[_2054].x * _1795) * _2107) * _2122) * _1843);
    float _2207 = (((_2183 * cbLight._m0[_2136].y) * _2196) * _1829) + ((((cbLight._m0[_2054].y * _1797) * _2107) * _2122) * _1843);
    float _2208 = (((_2183 * cbLight._m0[_2136].z) * _2196) * _1829) + ((((cbLight._m0[_2054].z * _1799) * _2107) * _2122) * _1843);
    float _2264;
    float _2266;
    float _2268;
    if (_1883)
    {
        _2264 = _2206;
        _2266 = _2207;
        _2268 = _2208;
    }
    else
    {
        uint _2270 = _1806 + 2u;
        uint _2274 = _1806 + 10u;
        float _2287 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_2270].w)) * 0.949999988079071044921875);
        float _2288 = _2287 * _2287;
        float _2289 = cbLight._m0[_2270].x + _437;
        float _2290 = cbLight._m0[_2270].y + _438;
        float _2291 = cbLight._m0[_2270].z + _439;
        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
        float _2296 = _2295 * _2289;
        float _2297 = _2295 * _2290;
        float _2298 = _2295 * _2291;
        float _2299 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_2270].xyz));
        float _4085 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2303 = dot(vec3(_360, _361, _362), vec3(_2296, _2297, _2298));
        float _4096 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2296, _2297, _2298));
        float _4107 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2311 = _2288 * _2288;
        float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
        float _2324 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2325 = 1.0 - _2288;
        float _2335 = (0.5 / (((_2083 * ((_2302 * _2325) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2325) + _2288) * _2302))) * _2302;
        float _4118 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2337 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
        float _2338 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2264 = (((_2324 * cbLight._m0[_2274].x) * _2337) * _2338) + _2206;
        _2266 = (((_2324 * cbLight._m0[_2274].y) * _2337) * _2338) + _2207;
        _2268 = (((_2324 * cbLight._m0[_2274].z) * _2337) * _2338) + _2208;
    }
    float _2369;
    float _2371;
    float _2373;
    if (_1992)
    {
        _2369 = _2264;
        _2371 = _2266;
        _2373 = _2268;
    }
    else
    {
        uint _2380 = _1806 + 3u;
        uint _2384 = _1806 + 11u;
        float _2397 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_2380].w)) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2380].x + _437;
        float _2400 = cbLight._m0[_2380].y + _438;
        float _2401 = cbLight._m0[_2380].z + _439;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_2380].xyz));
        float _4134 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2413 = dot(vec3(_360, _361, _362), vec3(_2406, _2407, _2408));
        float _4145 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2406, _2407, _2408));
        float _4156 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2435 = 1.0 - _2398;
        float _2445 = (0.5 / (((_2083 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2435) + _2398) * _2412))) * _2412;
        float _4167 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2369 = (((_2434 * cbLight._m0[_2384].x) * _2447) * _2448) + _2264;
        _2371 = (((_2434 * cbLight._m0[_2384].y) * _2447) * _2448) + _2266;
        _2373 = (((_2434 * cbLight._m0[_2384].z) * _2447) * _2448) + _2268;
    }
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_1804.y == 0u)
    {
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.x;
        uint _2481 = uint((float(_2469.y) * floor(float(uint(cbSceneParam._m0[85u].y * _446) / _2470))) + floor(float(uint(cbSceneParam._m0[85u].x * _445) / _2470)));
        float _2491 = (log2(_1582 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2492 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        uint _2495 = uint(isnan(14.0) ? _2492 : (isnan(_2492) ? 14.0 : min(_2492, 14.0)));
        uvec4 _2500 = texelFetch(g_lightClusterGridBuffer, int(((_2495 << 2u) + (_2481 << 6u)) >> 2u));
        uint _2501 = _2500.x;
        uint _2502 = _2469.z;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((((1u << ((_2502 >> 4u) & 15u)) + 4294967295u) & _2501) == 0u) || ((_2502 & 240u) == 0u))
        {
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
        }
        else
        {
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2741)
                {
                    frontier_phi_68_pred = _2730;
                    frontier_phi_68_pred_1 = _2729;
                    frontier_phi_68_pred_2 = _2728;
                    frontier_phi_68_pred_3 = _2726;
                    frontier_phi_68_pred_4 = _2725;
                    frontier_phi_68_pred_5 = _2727;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2740;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2731 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _1580;
                        float _2916 = _2875.y - _1581;
                        float _2917 = _2875.z - _1582;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_467, _470, _473), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4193 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _1580;
                        float _2951 = (-0.0) - _1581;
                        float _2952 = (-0.0) - _1582;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2966 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2972 = sqrt(1.0 - ((1.0 - (_2966 * _2966)) * 0.999898970127105712890625));
                        float _2973 = _2972 * _2972;
                        float _2974 = _2973 * _2973;
                        float _2975 = _2957 + _2922;
                        float _2976 = _2958 + _2923;
                        float _2977 = _2959 + _2924;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2985 = dot(vec3(_467, _470, _473), vec3(_2957, _2958, _2959));
                        float _4209 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2989 = dot(vec3(_467, _470, _473), vec3(_2981 * _2975, _2981 * _2976, _2981 * _2977));
                        float _4220 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2996 = ((_2992 * _2992) * (_2974 + (-1.0))) + 1.0;
                        float _2997 = _2935 * _2973;
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2925) + _2998;
                        float _4231 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _3003 = 1.0 - _2973;
                        float _3013 = (0.5 / (((_3002 * ((_2988 * _3003) + _2973)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3003) + _2973) * _2988))) * _3002;
                        float _4242 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3024 = (((_2974 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_2996 * _2996) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2784 = (_2946 * _2894.x) + _2852;
                        _2785 = (_2946 * _2894.y) + _2853;
                        _2786 = (_2946 * _2894.z) + _2854;
                        _2781 = (_3024 * _2911.x) + _2849;
                        _2782 = (_3024 * _2911.y) + _2850;
                        _2783 = (_3024 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_68_pred = _2786;
                    frontier_phi_68_pred_1 = _2785;
                    frontier_phi_68_pred_2 = _2784;
                    frontier_phi_68_pred_3 = _2782;
                    frontier_phi_68_pred_4 = _2781;
                    frontier_phi_68_pred_5 = _2783;
                }
                _2591 = frontier_phi_68_pred;
                _2589 = frontier_phi_68_pred_1;
                _2587 = frontier_phi_68_pred_2;
                _2583 = frontier_phi_68_pred_3;
                _2581 = frontier_phi_68_pred_4;
                _2585 = frontier_phi_68_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2581;
                    _2726 = _2583;
                    _2727 = _2585;
                    _2728 = _2587;
                    _2729 = _2589;
                    _2730 = _2591;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
        }
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.z;
        uint _2597 = (_2595 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2597) & _2501) == 0u)
        {
            _2693 = _2580;
            _2695 = _2582;
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582)));
            float _2719 = _2718 * _1580;
            float _2720 = _2718 * _1581;
            float _2721 = _2718 * _1582;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2597 < ((_2595 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2832 = _2580;
                float _2833 = _2582;
                float _2834 = _2584;
                float _2835 = _2586;
                float _2836 = _2588;
                float _2837 = _2590;
                uint _2838 = _2597;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2848)
                    {
                        frontier_phi_74_pred = _2834;
                        frontier_phi_74_pred_1 = _2833;
                        frontier_phi_74_pred_2 = _2832;
                        frontier_phi_74_pred_3 = _2837;
                        frontier_phi_74_pred_4 = _2836;
                        frontier_phi_74_pred_5 = _2835;
                    }
                    else
                    {
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3042 = _2832;
                        float _3043 = _2833;
                        float _3044 = _2834;
                        float _3045 = _2835;
                        float _3046 = _2836;
                        float _3047 = _2837;
                        uint _3048 = _2847;
                        uint _3049;
                        vec4 _3074;
                        float _3075;
                        vec4 _3090;
                        vec3 _3102;
                        vec4 _3118;
                        vec4 _3134;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3059 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3048));
                            _3049 = (_3048 + 4294967295u) & _3048;
                            uint _3061 = _3059 * 40u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3075 = _3074.w;
                            uint _3077 = (_3059 * 40u) + 4u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3092 = (_3059 * 40u) + 8u;
                            _3102 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x));
                            uint _3105 = (_3059 * 40u) + 16u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3121 = (_3059 * 40u) + 20u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3137 = (_3059 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3059 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_1582, _3169.z, fma(_1581, _3169.y, _3169.x * _1580)) + _3169.w;
                            _3182 = !((fma(_1582, _3150.z, fma(_1581, _3150.y, _3150.x * _1580)) + _3150.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3074.x - _1580;
                                float _3210 = _3074.y - _1581;
                                float _3211 = _3074.z - _1582;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3075 * _3075));
                                float _4253 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3227 = sqrt(_3212) * _3090.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_467, _470, _473))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_1582, _3118.z, fma(_1581, _3118.y, _3118.x * _1580)) + _3118.w) / _3181;
                                float _3241 = (fma(_1582, _3134.z, fma(_1581, _3134.y, _3134.x * _1580)) + _3134.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4269 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3264 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * 0.999898970127105712890625));
                                float _3265 = _3264 * _3264;
                                float _3266 = _3265 * _3265;
                                float _3267 = _3216 - _2719;
                                float _3268 = _3217 - _2720;
                                float _3269 = _3218 - _2721;
                                float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                                float _3277 = dot(vec3(_467, _470, _473), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4280 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3281 = dot(vec3(_467, _470, _473), vec3(_3273 * _3267, _3273 * _3268, _3273 * _3269));
                                float _4291 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3284 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3288 = ((_3284 * _3284) * (_3266 + (-1.0))) + 1.0;
                                float _3289 = _3229 * _3265;
                                float _3290 = _3289 * _3289;
                                float _3296 = ((1.0 - _3290) * dot(vec3(_467, _470, _473), vec3(_3216, _3217, _3218))) + _3290;
                                float _4302 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3298 = 1.0 - _3265;
                                float _3308 = (0.5 / (((_3297 * ((_3280 * _3298) + _3265)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3265) * _3280))) * _3297;
                                float _4313 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3318 = (_3246 * _3223) * (((_3266 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_3288 * _3288) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3318 * _3102.z;
                                frontier_phi_80_pred_1 = _3318 * _3102.y;
                                frontier_phi_80_pred_2 = _3318 * _3102.x;
                                frontier_phi_80_pred_3 = _3247 * _3090.z;
                                frontier_phi_80_pred_4 = _3247 * _3090.y;
                                frontier_phi_80_pred_5 = _3247 * _3090.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3324 = frontier_phi_80_pred;
                            _3323 = frontier_phi_80_pred_1;
                            _3322 = frontier_phi_80_pred_2;
                            _3327 = frontier_phi_80_pred_3;
                            _3326 = frontier_phi_80_pred_4;
                            _3325 = frontier_phi_80_pred_5;
                            _3032 = _3325 + _3045;
                            _3033 = _3326 + _3046;
                            _3034 = _3327 + _3047;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            if (_3049 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3049;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3031;
                        frontier_phi_74_pred_1 = _3030;
                        frontier_phi_74_pred_2 = _3029;
                        frontier_phi_74_pred_3 = _3034;
                        frontier_phi_74_pred_4 = _3033;
                        frontier_phi_74_pred_5 = _3032;
                    }
                    _2698 = frontier_phi_74_pred;
                    _2696 = frontier_phi_74_pred_1;
                    _2694 = frontier_phi_74_pred_2;
                    _2704 = frontier_phi_74_pred_3;
                    _2702 = frontier_phi_74_pred_4;
                    _2700 = frontier_phi_74_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2694;
                        _2833 = _2696;
                        _2834 = _2698;
                        _2835 = _2700;
                        _2836 = _2702;
                        _2837 = _2704;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2702;
                frontier_phi_62_63_ladder_1 = _2700;
                frontier_phi_62_63_ladder_2 = _2698;
                frontier_phi_62_63_ladder_3 = _2704;
                frontier_phi_62_63_ladder_4 = _2696;
                frontier_phi_62_63_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_62_63_ladder = _2588;
                frontier_phi_62_63_ladder_1 = _2586;
                frontier_phi_62_63_ladder_2 = _2584;
                frontier_phi_62_63_ladder_3 = _2590;
                frontier_phi_62_63_ladder_4 = _2582;
                frontier_phi_62_63_ladder_5 = _2580;
            }
            _2693 = frontier_phi_62_63_ladder_5;
            _2695 = frontier_phi_62_63_ladder_4;
            _2697 = frontier_phi_62_63_ladder_2;
            _2699 = frontier_phi_62_63_ladder_1;
            _2701 = frontier_phi_62_63_ladder;
            _2703 = frontier_phi_62_63_ladder_3;
        }
        float _2708 = isnan(1.0) ? _515 : (isnan(_515) ? 1.0 : min(_515, 1.0));
        _2513 = (_2708 * _2699) + _2047;
        _2515 = (_2708 * _2701) + _2049;
        _2517 = (_2708 * _2703) + _2051;
        _2519 = ((_2693 * 0.039999999105930328369140625) * _2708) + _2369;
        _2521 = ((_2695 * 0.039999999105930328369140625) * _2708) + _2371;
        _2523 = ((_2697 * 0.039999999105930328369140625) * _2708) + _2373;
    }
    else
    {
        _2513 = _2047;
        _2515 = _2049;
        _2517 = _2051;
        _2519 = _2369;
        _2521 = _2371;
        _2523 = _2373;
    }
    float _4329 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4340 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4351 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    uint _2543 = _489 + 6u;
    float _2551 = _445 / cbSceneParam._m0[86u].x;
    float _2552 = _446 / cbSceneParam._m0[86u].y;
    vec4 _2566 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, (log2((isnan(cbSceneParam._m0[77u].w) ? _378 : (isnan(_378) ? cbSceneParam._m0[77u].w : min(_378, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2568 = _2566.x;
    float _2569 = _2566.y;
    float _2570 = _2566.z;
    float _2571 = _2566.w;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_378 > cbSceneParam._m0[78u].w)
    {
        float _2605 = isnan(_378) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _378 : min(cbSceneParam._m0[80u].w, _378));
        float _2606 = _2605 / _378;
        float _2617 = _2606 * _430;
        float _2618 = _431 * _2606;
        float _2619 = (-0.0) - _2618;
        float _2620 = _2606 * _432;
        float _2622 = (cbSceneParam._m0[77u].w * _2619) / _2605;
        float _2623 = _2622 + cbSceneParam._m0[79u].w;
        float _2624 = cbSceneParam._m0[79u].w - _2618;
        float _2630 = sqrt(((_2617 * _2617) + (_2618 * _2618)) + (_2620 * _2620));
        float _2633 = (1.0 - (cbSceneParam._m0[77u].w / _2605)) * _2630;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2640 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2619 - _2622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2623 > 0.0) ? exp2(_2638 * _2623) : (2.0 - exp2(_2640 * _2623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2633;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : max(_2623, _2624));
            float _2756 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : min(_2623, _2624));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2794 = ((abs(_2630 / _2619) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2640 * _2765) - exp2(_2640 * _2766)) * _2754))) + (_2633 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2571);
        _2642 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2568;
        _2644 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2569;
        _2646 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2570;
        _2648 = _2805 * _2571;
    }
    else
    {
        _2642 = _2568;
        _2644 = _2569;
        _2646 = _2570;
        _2648 = _2571;
    }
    float _2660 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2661 = _2660 == 3.0;
    float _2663 = log2(_2648);
    float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2513 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _515))) + ((_2519 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1311)) * cbPerFrame._m0[3u].x));
    float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2515 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _515))) + ((_2521 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1311)) * cbPerFrame._m0[3u].x));
    float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2517 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _515))) + ((_2523 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1311)) * cbPerFrame._m0[3u].x));
    float _2681 = (_2660 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2681 * (_2661 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.y = _2681 * (_2661 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2644)));
    SV_Target.z = _2681 * (_2661 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2646)));
    SV_Target.w = cbInstanceData._m0[_2543].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2543].w;
}


