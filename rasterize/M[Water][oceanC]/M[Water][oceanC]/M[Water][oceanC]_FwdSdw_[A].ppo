#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanC_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _921;
float _3566;
float _3567;
float _3568;
float _3569;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    float _230 = cbPerFrame._m0[22u].x * 0.02999999932944774627685546875;
    float _232 = cbPerFrame._m0[22u].x * (-0.00999999977648258209228515625);
    float _236 = cbPerFrame._m0[22u].x * 6.5;
    uint _239 = uint(int(floor(_236)));
    float _240 = fract(_236);
    uint _241 = _239 + 1u;
    uint _242 = uint(int(cbMtdParam._m0[9u].z * cbMtdParam._m0[9u].y));
    float _245 = float(int(_239 - _242 * (_239 / _242)));
    float _246 = _245 - cbMtdParam._m0[9u].y * trunc(_245 / cbMtdParam._m0[9u].y);
    float _248 = floor(_245 / cbMtdParam._m0[9u].y);
    float _249 = float(int(_241 - _242 * (_241 / _242)));
    float _250 = _249 - cbMtdParam._m0[9u].y * trunc(_249 / cbMtdParam._m0[9u].y);
    float _252 = floor(_249 / cbMtdParam._m0[9u].y);
    float _253 = 1.0 / cbMtdParam._m0[9u].y;
    float _255 = 1.0 / cbMtdParam._m0[9u].z;
    float _256 = fract(_230 + (TEXCOORD.x * 2.0));
    float _257 = fract(_232 + (TEXCOORD.y * 5.0));
    vec4 _278 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_256 + _250) * _253) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_257 + _252) * _255) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _287 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_256 + _246) * _253) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_257 + _248) * _255) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _289 = _287.x;
    float _290 = _287.y;
    float _302 = fract(_230 + (TEXCOORD.x * 0.5));
    float _303 = fract(_232 + (TEXCOORD.y * 0.5));
    vec4 _316 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_302 + _250) * _253) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_303 + _252) * _255) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _324 = texture(sampler2D(M_Water_oceanC_snp_0_Texture2D_18, SS_BumpMap), vec2((((_302 + _246) * _253) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_303 + _248) * _255) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _326 = _324.x;
    float _327 = _324.y;
    float _332 = ((_316.x - _326) * _240) + _326;
    float _333 = ((_316.y - _327) * _240) + _327;
    float _342 = (((((((_278.x - _289) * _240) + _289) - _332) * cbMtdParam._m0[9u].x) + _332) * 2.0) + (-1.0);
    float _344 = (((((((_278.y - _290) * _240) + _290) - _333) * cbMtdParam._m0[9u].x) + _333) * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3578 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _353 = fma(_350, _216, fma(_344, _208 * TANGENT.x, (_194 * _187) * _342));
    float _356 = fma(_350, _217, fma(_344, _208 * TANGENT.y, (_194 * _188) * _342));
    float _359 = fma(_350, _218, fma(_344, _208 * TANGENT.z, (_194 * _189) * _342));
    float _363 = inversesqrt(dot(vec3(_353, _356, _359), vec3(_353, _356, _359)));
    float _364 = _363 * _353;
    float _365 = _363 * _356;
    float _366 = _363 * _359;
    float _382 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _434 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _424);
    float _435 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _424);
    float _436 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _424);
    float _440 = inversesqrt(dot(vec3(_434, _435, _436), vec3(_434, _435, _436)));
    float _441 = _434 * _440;
    float _442 = _435 * _440;
    float _443 = _436 * _440;
    vec4 _448 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _450 = _448.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _601 = sqrt(((_434 * _434) + (_435 * _435)) + (_436 * _436));
        float _607 = (cbMatDynParam._m0[5u].x * _601) + cbMatDynParam._m0[5u].y;
        float _3589 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _608 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _612 = (cbMatDynParam._m0[5u].z * _601) + cbMatDynParam._m0[5u].w;
        float _3600 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) - _608)) + _608) < ((_450 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _483 = fma(_366, cbSceneParam._m0[5u].z, fma(_365, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _364));
    float _486 = fma(_366, cbSceneParam._m0[6u].z, fma(_365, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _364));
    float _489 = fma(_366, cbSceneParam._m0[7u].z, fma(_365, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _364));
    uint _505 = uint(roundEven(NORMAL.w)) * 13u;
    uint _507 = _505 + 9u;
    uint _508 = _507 + uint(cbMatDynParam._m0[0u].w);
    float _514 = (cbMtdParam._m0[0u].x * 0.00369799998588860034942626953125) * cbInstanceData._m0[_508].x;
    float _515 = (cbMtdParam._m0[0u].y * 0.086921997368335723876953125) * cbInstanceData._m0[_508].y;
    float _516 = (cbMtdParam._m0[0u].z * 0.1275610029697418212890625) * cbInstanceData._m0[_508].z;
    float _3611 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    vec4 _528 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _531 = _528.x * TEXCOORD.z;
    float _532 = dot(vec3(_364, _365, _366), vec3(_441, _442, _443));
    float _535 = _532 * 2.0;
    float _539 = (_535 * _364) - _441;
    float _540 = (_535 * _365) - _442;
    float _541 = (_535 * _366) - _443;
    float _545 = abs(dot(vec3(_441, _442, _443), vec3(_364, _365, _366)));
    float _3644 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _553 = exp2(log2(1.0 - ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.999000012874603271484375)) * 4.949747562408447265625);
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _920;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _646 = fma(_590, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582));
        float _650 = fma(_590, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582));
        float _654 = fma(_590, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582));
        float _678 = _582 + _364;
        float _679 = _586 + _365;
        float _680 = _590 + _366;
        float _690 = fma(_680, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678)) - _646;
        float _691 = fma(_680, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678)) - _650;
        float _692 = fma(_680, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678)) - _654;
        float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
        float _709 = ((_696 * _690) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_646 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_696 * _691) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_650 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_696 * _692) / cbModelParam._m0[34u].z) + ((((((_654 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        float _748 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_714.x + (-0.5));
        float _750 = _748 * (_714.y + (-0.5));
        float _751 = _748 * (_714.z + (-0.5));
        float _758 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_721.x + (-0.5));
        float _760 = _758 * (_721.y + (-0.5));
        float _761 = _758 * (_721.z + (-0.5));
        float _768 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_728.x + (-0.5));
        float _770 = _768 * (_728.y + (-0.5));
        float _771 = _768 * (_728.z + (-0.5));
        float _778 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_735.x + (-0.5));
        float _780 = _778 * (_735.y + (-0.5));
        float _781 = _778 * (_735.z + (-0.5));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = _749 * 0.5;
        float _786 = _759 * 0.5;
        float _787 = _769 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _802 = (dot(vec3(_364, _365, _366), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _812 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3692 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_814 + 1.0))) + _819) * _782;
        float _829 = _750 * 0.5;
        float _830 = _760 * 0.5;
        float _831 = _770 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_364, _365, _366), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3725 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_856 + 1.0))) + _861) * _783;
        float _871 = _751 * 0.5;
        float _872 = _761 * 0.5;
        float _873 = _771 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_364, _365, _366), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3758 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_898 + 1.0))) + _903) * _784;
        _920 = _751;
        _922 = _750;
        _923 = _749;
        _924 = _761;
        _925 = _760;
        _926 = _759;
        _927 = _771;
        _928 = _770;
        _929 = _769;
        _930 = _784;
        _931 = _783;
        _932 = _782;
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
    }
    else
    {
        _920 = _921;
        _922 = _921;
        _923 = _921;
        _924 = _921;
        _925 = _921;
        _926 = _921;
        _927 = _921;
        _928 = _921;
        _929 = _921;
        _930 = _921;
        _931 = _921;
        _932 = _921;
        _933 = 0.0;
        _934 = 0.0;
        _935 = 0.0;
    }
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _964 = fma(_590, cbModelParam._m0[30u].z, fma(_586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _582));
        float _968 = fma(_590, cbModelParam._m0[31u].z, fma(_586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _582));
        float _972 = fma(_590, cbModelParam._m0[32u].z, fma(_586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _582));
        float _995 = _582 + _364;
        float _996 = _586 + _365;
        float _997 = _590 + _366;
        float _1007 = fma(_997, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995)) - _964;
        float _1008 = fma(_997, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995)) - _968;
        float _1009 = fma(_997, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995)) - _972;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_964 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_968 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[35u].z) + ((((((_972 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1063 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1030.x + (-0.5));
        float _1065 = _1063 * (_1030.y + (-0.5));
        float _1066 = _1063 * (_1030.z + (-0.5));
        float _1073 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1037.x + (-0.5));
        float _1075 = _1073 * (_1037.y + (-0.5));
        float _1076 = _1073 * (_1037.z + (-0.5));
        float _1083 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1044.x + (-0.5));
        float _1085 = _1083 * (_1044.y + (-0.5));
        float _1086 = _1083 * (_1044.z + (-0.5));
        float _1093 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1051.x + (-0.5));
        float _1095 = _1093 * (_1051.y + (-0.5));
        float _1096 = _1093 * (_1051.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_364, _365, _366), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3821 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1127 + 1.0))) + _1132) * _1097;
        float _1142 = _1065 * 0.5;
        float _1143 = _1075 * 0.5;
        float _1144 = _1085 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_364, _365, _366), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3854 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1169 + 1.0))) + _1174) * _1098;
        float _1184 = _1066 * 0.5;
        float _1185 = _1076 * 0.5;
        float _1186 = _1086 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_364, _365, _366), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3887 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1211 + 1.0))) + _1216) * _1099;
        _1233 = _1066;
        _1234 = _1065;
        _1235 = _1064;
        _1236 = _1076;
        _1237 = _1075;
        _1238 = _1074;
        _1239 = _1086;
        _1240 = _1085;
        _1241 = _1084;
        _1242 = _1099;
        _1243 = _1098;
        _1244 = _1097;
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _921;
        _1234 = _921;
        _1235 = _921;
        _1236 = _921;
        _1237 = _921;
        _1238 = _921;
        _1239 = _921;
        _1240 = _921;
        _1241 = _921;
        _1242 = _921;
        _1243 = _921;
        _1244 = _921;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _933)) + _933;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _934)) + _934;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _935)) + _935;
    float _1280 = fma(_1259, cbSceneParam._m0[89u].z, fma(_1258, cbSceneParam._m0[89u].y, _1257 * cbSceneParam._m0[89u].x));
    float _1283 = fma(_1259, cbSceneParam._m0[90u].z, fma(_1258, cbSceneParam._m0[90u].y, _1257 * cbSceneParam._m0[90u].x));
    float _1286 = fma(_1259, cbSceneParam._m0[91u].z, fma(_1258, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1257));
    float _1301 = _539 * 0.5;
    float _1302 = _540 * 0.5;
    float _1303 = _541 * 0.5;
    float _1304 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1307 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1310 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1344;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1317 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_920, _924, _927, _930));
        float _1321 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_922, _925, _928, _931));
        float _1325 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_923, _926, _929, _932));
        float _1332 = dot(vec4(cbModelParam._m0[39u]), vec4(_1301, _1302, _1303, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1355;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1346 = dot(vec4(cbModelParam._m0[40u]), vec4(_1301, _1302, _1303, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1359 = (_1355 * cbModelParam._m0[1u].x) + (_1344 * (1.0 - cbModelParam._m0[1u].x));
    float _1368 = cbModelParam._m0[25u].z * 0.019999980926513671875;
    float _1370 = isnan(_1368) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1368 : min(cbModelParam._m0[25u].z, _1368));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1419 = fma(_590, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _582)) + cbModelParam._m0[13u].w;
        float _1423 = fma(_590, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _582)) + cbModelParam._m0[14u].w;
        float _1427 = fma(_590, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _582)) + cbModelParam._m0[15u].w;
        float _1430 = fma(_541, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539));
        float _1433 = fma(_541, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539));
        float _1436 = fma(_541, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539));
        float _1463;
        if (_1430 > 0.0)
        {
            _1463 = abs((1.0 - _1419) / _1430);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1419 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1463 = frontier_phi_19_17_ladder;
        }
        float _1636;
        if (_1433 > 0.0)
        {
            _1636 = abs((1.0 - _1423) / _1433);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1423 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1636 = frontier_phi_28_24_ladder;
        }
        float _1932;
        if (_1436 > 0.0)
        {
            _1932 = abs((1.0 - _1427) / _1436);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1427 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1932 = frontier_phi_40_35_ladder;
        }
        float _1934 = isnan(_1636) ? _1463 : (isnan(_1463) ? _1636 : min(_1463, _1636));
        float _1935 = isnan(_1932) ? _1934 : (isnan(_1934) ? _1932 : min(_1934, _1932));
        float _1939 = (_1935 * _1430) + _1419;
        float _1940 = (_1935 * _1433) + _1423;
        float _1941 = (_1935 * _1436) + _1427;
        float _1942 = _1935 * 9.9999997473787516355514526367188e-05;
        float _1944 = (-1.0) - _1942;
        float _1946 = _1942 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1941 > _1946) || ((_1941 < _1944) || ((_1940 > _1946) || ((_1940 < _1944) || ((_1939 < _1944) || (_1939 > _1946))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1941, cbModelParam._m0[9u].z, fma(_1940, cbModelParam._m0[9u].y, _1939 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1941, cbModelParam._m0[10u].z, fma(_1940, cbModelParam._m0[10u].y, _1939 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1941, cbModelParam._m0[11u].z, fma(_1940, cbModelParam._m0[11u].y, _1939 * cbModelParam._m0[11u].x))), _1370);
            frontier_phi_18_40_ladder = _2086.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2086.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2086.x * cbModelParam._m0[1u].y;
        }
        _1452 = frontier_phi_18_40_ladder_2;
        _1454 = frontier_phi_18_40_ladder_1;
        _1456 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_539, _540, _541), _1370);
        _1452 = _1440.x * cbModelParam._m0[1u].y;
        _1454 = _1440.y * cbModelParam._m0[1u].y;
        _1456 = _1440.z * cbModelParam._m0[1u].y;
    }
    float _1459 = cbModelParam._m0[25u].w * 0.019999980926513671875;
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1459 : min(cbModelParam._m0[25u].w, _1459));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_590, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _582)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_590, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _582)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_590, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _582)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_541, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539));
        float _1530 = fma(_541, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539));
        float _1533 = fma(_541, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539));
        float _1641;
        if (_1527 > 0.0)
        {
            _1641 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1641 = frontier_phi_30_26_ladder;
        }
        float _1959;
        if (_1530 > 0.0)
        {
            _1959 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1959 = frontier_phi_42_37_ladder;
        }
        float _2286;
        if (_1533 > 0.0)
        {
            _2286 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2286 = frontier_phi_52_49_ladder;
        }
        float _2288 = isnan(_1959) ? _1641 : (isnan(_1641) ? _1959 : min(_1641, _1959));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1527) + _1516;
        float _2294 = (_2289 * _1530) + _1520;
        float _2295 = (_2289 * _1533) + _1524;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1460);
            frontier_phi_27_52_ladder = _2412.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2412.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2412.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_27_52_ladder_2;
        _1554 = frontier_phi_27_52_ladder_1;
        _1556 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_539, _540, _541), _1460);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1568 = ((0.0397587902843952178955078125 - (_553 * 0.03859509527683258056640625)) + (_553 * 0.96097481250762939453125)) * _531;
    float _1569 = _1568 * ((cbModelParam._m0[1u].w * (_1552 - _1452)) + _1452);
    float _1570 = _1568 * ((cbModelParam._m0[1u].w * (_1554 - _1454)) + _1454);
    float _1571 = _1568 * ((cbModelParam._m0[1u].w * (_1556 - _1456)) + _1456);
    float _1574 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, _1569 * cbSceneParam._m0[91u].x));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1619 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1623 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1627 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1628 = _1615 / _1627;
    float _1629 = _1619 / _1627;
    float _1630 = _1623 / _1627;
    float _1777;
    float _1778;
    float _1779;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1657 = ((uint(_1630 > cbSceneParam._m0[59u].y) + uint(_1630 > cbSceneParam._m0[59u].x)) + uint(_1630 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1658 = _1657 + 43u;
        uint _1666 = _1657 + 44u;
        uint _1674 = _1657 + 45u;
        uint _1682 = _1657 + 46u;
        float _1693 = fma(_1627, cbSceneParam._m0[_1658].w, fma(_1623, cbSceneParam._m0[_1658].z, fma(_1619, cbSceneParam._m0[_1658].y, _1615 * cbSceneParam._m0[_1658].x)));
        float _1697 = fma(_1627, cbSceneParam._m0[_1666].w, fma(_1623, cbSceneParam._m0[_1666].z, fma(_1619, cbSceneParam._m0[_1666].y, _1615 * cbSceneParam._m0[_1666].x)));
        float _1705 = fma(_1627, cbSceneParam._m0[_1682].w, fma(_1623, cbSceneParam._m0[_1682].z, fma(_1619, cbSceneParam._m0[_1682].y, _1615 * cbSceneParam._m0[_1682].x)));
        float _1710 = cbSceneParam._m0[33u].z * _1705;
        float _1712 = cbSceneParam._m0[33u].w * _1705;
        float _1715 = fma(_1627, cbSceneParam._m0[_1674].w, fma(_1623, cbSceneParam._m0[_1674].z, fma(_1619, cbSceneParam._m0[_1674].y, _1615 * cbSceneParam._m0[_1674].x))) / _1705;
        float _1763 = (cbSceneParam._m0[33u].x - sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630))) * cbSceneParam._m0[33u].y;
        float _4013 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1770 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1710 + _1693) / _1705, (_1712 + _1697) / _1705), _1715), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1712 + _1693) / _1705, (_1697 - _1710) / _1705), _1715), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1693 - _1710) / _1705, (_1697 - _1712) / _1705), _1715), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1693 - _1712) / _1705, (_1710 + _1697) / _1705), _1715), 0.0)).x), vec4(0.25)));
        _1777 = 1.0 - (_1770 * cbSceneParam._m0[34u].x);
        _1778 = 1.0 - (_1770 * cbSceneParam._m0[34u].y);
        _1779 = 1.0 - (_1770 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1777 = 1.0;
        _1778 = 1.0;
        _1779 = 1.0;
    }
    float _1843;
    float _1845;
    float _1847;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1831 = fma(_1627, cbSceneParam._m0[63u].w, fma(_1623, cbSceneParam._m0[63u].z, fma(_1619, cbSceneParam._m0[63u].y, _1615 * cbSceneParam._m0[63u].x)));
        float _1832 = fma(_1627, cbSceneParam._m0[60u].w, fma(_1623, cbSceneParam._m0[60u].z, fma(_1619, cbSceneParam._m0[60u].y, _1615 * cbSceneParam._m0[60u].x))) / _1831;
        float _1833 = fma(_1627, cbSceneParam._m0[61u].w, fma(_1623, cbSceneParam._m0[61u].z, fma(_1619, cbSceneParam._m0[61u].y, _1615 * cbSceneParam._m0[61u].x))) / _1831;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1832 >= cbSceneParam._m0[64u].x) && (_1833 >= cbSceneParam._m0[64u].y)) && (_1832 <= cbSceneParam._m0[64u].z)) && (_1833 <= cbSceneParam._m0[64u].w))
        {
            float _1972 = fma(_1627, cbSceneParam._m0[62u].w, fma(_1623, cbSceneParam._m0[62u].z, fma(_1619, cbSceneParam._m0[62u].y, _1615 * cbSceneParam._m0[62u].x))) / _1831;
            float _1976 = isnan(cbSceneParam._m0[41u].w) ? _1972 : (isnan(_1972) ? cbSceneParam._m0[41u].w : max(_1972, cbSceneParam._m0[41u].w));
            float _2019 = (cbSceneParam._m0[33u].x - sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630))) * cbSceneParam._m0[33u].y;
            float _4029 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
            float _2026 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1832, cbSceneParam._m0[33u].w + _1833), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1832, _1833 - cbSceneParam._m0[33u].z), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1832 - cbSceneParam._m0[33u].z, _1833 - cbSceneParam._m0[33u].w), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1832 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1833), _1976), 0.0)).x), vec4(0.25)));
            float _2030 = 1.0 - (_2026 * cbSceneParam._m0[34u].x);
            float _2031 = 1.0 - (_2026 * cbSceneParam._m0[34u].y);
            float _2032 = 1.0 - (_2026 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2031) ? _1778 : (isnan(_1778) ? _2031 : min(_1778, _2031));
            frontier_phi_39_38_ladder_1 = isnan(_2030) ? _1777 : (isnan(_1777) ? _2030 : min(_1777, _2030));
            frontier_phi_39_38_ladder_2 = isnan(_2032) ? _1779 : (isnan(_1779) ? _2032 : min(_1779, _2032));
        }
        else
        {
            frontier_phi_39_38_ladder = _1778;
            frontier_phi_39_38_ladder_1 = _1777;
            frontier_phi_39_38_ladder_2 = _1779;
        }
        _1843 = frontier_phi_39_38_ladder_1;
        _1845 = frontier_phi_39_38_ladder;
        _1847 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1843 = _1777;
        _1845 = _1778;
        _1847 = _1779;
    }
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_505 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1862 = _531 + (-1.0);
    float _1867 = (cbLight._m0[_1855].x * _1862) + 1.0;
    float _1868 = (cbLight._m0[_1855].y * _1862) + 1.0;
    float _1869 = (cbLight._m0[_1855].z * _1862) + 1.0;
    float _1870 = (cbLight._m0[_1855].w * _1862) + 1.0;
    uint _1871 = _1854 + 5u;
    float _1877 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1881 = _1854 + 4u;
    float _1891 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1895 = _1854 | 1u;
    float _1906 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_364, _365, _366));
    float _1909 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_364, _365, _366));
    float _4065 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _4076 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1914 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1916 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1923 = ((cbLight._m0[_1871].x * _1877) * _1916) + (((cbLight._m0[_1881].x * _1843) * _1891) * _1914);
    float _1924 = ((_1877 * cbLight._m0[_1871].y) * _1916) + (((cbLight._m0[_1881].y * _1845) * _1891) * _1914);
    float _1925 = ((_1877 * cbLight._m0[_1871].z) * _1916) + (((cbLight._m0[_1881].z * _1847) * _1891) * _1914);
    uvec4 _1929 = floatBitsToUint(cbLight._m0[_1854 + 12u]);
    bool _1931 = _1929.x == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1931)
    {
        _2033 = _1923;
        _2035 = _1924;
        _2037 = _1925;
    }
    else
    {
        uint _2041 = _1854 + 6u;
        float _2057 = (dot(vec3(cbLight._m0[_1854 + 2u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4087 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2060 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2033 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _1923;
        _2035 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _1924;
        _2037 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _1925;
    }
    bool _2040 = _1929.y == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2040)
    {
        _2095 = _2033;
        _2097 = _2035;
        _2099 = _2037;
    }
    else
    {
        uint _2257 = _1854 + 7u;
        float _2273 = (dot(vec3(cbLight._m0[_1854 + 3u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4103 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2276 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2095 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2033;
        _2097 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2035;
        _2099 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2037;
    }
    uint _2102 = _1854 + 8u;
    float _2115 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1854].w)) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1854].x + _441;
    float _2118 = cbLight._m0[_1854].y + _442;
    float _2119 = cbLight._m0[_1854].z + _443;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1854].xyz));
    float _4119 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _2131 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2132 = dot(vec3(_364, _365, _366), vec3(_2124, _2125, _2126));
    float _4141 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2124, _2125, _2126));
    float _4152 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2116 * _2116;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2157 = 1.0 - _2116;
    float _2168 = (0.5 / (((_2131 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2157) + _2116) * _2130))) * _2130;
    float _4163 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    uint _2184 = _1854 + 9u;
    float _2194 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_1895].w)) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_1895].x + _441;
    float _2197 = cbLight._m0[_1895].y + _442;
    float _2198 = cbLight._m0[_1895].z + _443;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1895].xyz));
    float _4174 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2210 = dot(vec3(_364, _365, _366), vec3(_2203, _2204, _2205));
    float _4185 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2203, _2204, _2205));
    float _4196 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2232 = 1.0 - _2195;
    float _2242 = (0.5 / (((_2131 * ((_2209 * _2232) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2232) + _2195) * _2209))) * _2209;
    float _4207 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2254 = (((_2231 * cbLight._m0[_2184].x) * _2244) * _1877) + ((((cbLight._m0[_2102].x * _1843) * _2155) * _2170) * _1891);
    float _2255 = (((_2231 * cbLight._m0[_2184].y) * _2244) * _1877) + ((((cbLight._m0[_2102].y * _1845) * _2155) * _2170) * _1891);
    float _2256 = (((_2231 * cbLight._m0[_2184].z) * _2244) * _1877) + ((((cbLight._m0[_2102].z * _1847) * _2155) * _2170) * _1891);
    float _2312;
    float _2314;
    float _2316;
    if (_1931)
    {
        _2312 = _2254;
        _2314 = _2255;
        _2316 = _2256;
    }
    else
    {
        uint _2318 = _1854 + 2u;
        uint _2322 = _1854 + 10u;
        float _2335 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_2318].w)) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2318].x + _441;
        float _2338 = cbLight._m0[_2318].y + _442;
        float _2339 = cbLight._m0[_2318].z + _443;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_2318].xyz));
        float _4218 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2351 = dot(vec3(_364, _365, _366), vec3(_2344, _2345, _2346));
        float _4229 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2344, _2345, _2346));
        float _4240 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2373 = 1.0 - _2336;
        float _2383 = (0.5 / (((_2131 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2373) + _2336) * _2350))) * _2350;
        float _4251 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2312 = (((_2372 * cbLight._m0[_2322].x) * _2385) * _2386) + _2254;
        _2314 = (((_2372 * cbLight._m0[_2322].y) * _2385) * _2386) + _2255;
        _2316 = (((_2372 * cbLight._m0[_2322].z) * _2385) * _2386) + _2256;
    }
    float _2417;
    float _2419;
    float _2421;
    if (_2040)
    {
        _2417 = _2312;
        _2419 = _2314;
        _2421 = _2316;
    }
    else
    {
        uint _2428 = _1854 + 3u;
        uint _2432 = _1854 + 11u;
        float _2445 = 1.0 - (sqrt(0.980000019073486328125 - (0.0735000073909759521484375 / cbLight._m0[_2428].w)) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2428].x + _441;
        float _2448 = cbLight._m0[_2428].y + _442;
        float _2449 = cbLight._m0[_2428].z + _443;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_2428].xyz));
        float _4267 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2461 = dot(vec3(_364, _365, _366), vec3(_2454, _2455, _2456));
        float _4278 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2454, _2455, _2456));
        float _4289 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2483 = 1.0 - _2446;
        float _2493 = (0.5 / (((_2131 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2483) + _2446) * _2460))) * _2460;
        float _4300 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2417 = (((_2482 * cbLight._m0[_2432].x) * _2495) * _2496) + _2312;
        _2419 = (((_2482 * cbLight._m0[_2432].y) * _2495) * _2496) + _2314;
        _2421 = (((_2482 * cbLight._m0[_2432].z) * _2495) * _2496) + _2316;
    }
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_1852.y == 0u)
    {
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.x;
        uint _2529 = uint((float(_2517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _2518))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _2518)));
        float _2539 = (log2(_1630 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2540 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        uint _2543 = uint(isnan(14.0) ? _2540 : (isnan(_2540) ? 14.0 : min(_2540, 14.0)));
        uvec4 _2548 = texelFetch(g_lightClusterGridBuffer, int(((_2543 << 2u) + (_2529 << 6u)) >> 2u));
        uint _2549 = _2548.x;
        uint _2550 = _2517.z;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((((1u << ((_2550 >> 4u) & 15u)) + 4294967295u) & _2549) == 0u) || ((_2550 & 240u) == 0u))
        {
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
        }
        else
        {
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2797)
                {
                    frontier_phi_73_pred = _2786;
                    frontier_phi_73_pred_1 = _2785;
                    frontier_phi_73_pred_2 = _2784;
                    frontier_phi_73_pred_3 = _2783;
                    frontier_phi_73_pred_4 = _2782;
                    frontier_phi_73_pred_5 = _2781;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2796;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2787 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _1628;
                        float _2993 = _2952.y - _1629;
                        float _2994 = _2952.z - _1630;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_483, _486, _489), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4326 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _1628;
                        float _3028 = (-0.0) - _1629;
                        float _3029 = (-0.0) - _1630;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3043 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3049 = sqrt(1.0 - ((1.0 - (_3043 * _3043)) * 0.999898970127105712890625));
                        float _3050 = _3049 * _3049;
                        float _3051 = _3050 * _3050;
                        float _3052 = _3034 + _2999;
                        float _3053 = _3035 + _3000;
                        float _3054 = _3036 + _3001;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3062 = dot(vec3(_483, _486, _489), vec3(_3034, _3035, _3036));
                        float _4342 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3066 = dot(vec3(_483, _486, _489), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                        float _4353 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                        float _3074 = _3012 * _3050;
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3002) + _3075;
                        float _4364 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3080 = 1.0 - _3050;
                        float _3090 = (0.5 / (((_3079 * ((_3065 * _3080) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3050) * _3065))) * _3079;
                        float _4375 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3101 = (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3073 * _3073) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2856 = (_3023 * _2971.x) + _2929;
                        _2857 = (_3023 * _2971.y) + _2930;
                        _2858 = (_3023 * _2971.z) + _2931;
                        _2853 = (_3101 * _2988.x) + _2926;
                        _2854 = (_3101 * _2988.y) + _2927;
                        _2855 = (_3101 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_73_pred = _2858;
                    frontier_phi_73_pred_1 = _2857;
                    frontier_phi_73_pred_2 = _2856;
                    frontier_phi_73_pred_3 = _2855;
                    frontier_phi_73_pred_4 = _2854;
                    frontier_phi_73_pred_5 = _2853;
                }
                _2639 = frontier_phi_73_pred;
                _2637 = frontier_phi_73_pred_1;
                _2635 = frontier_phi_73_pred_2;
                _2633 = frontier_phi_73_pred_3;
                _2631 = frontier_phi_73_pred_4;
                _2629 = frontier_phi_73_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2629;
                    _2782 = _2631;
                    _2783 = _2633;
                    _2784 = _2635;
                    _2785 = _2637;
                    _2786 = _2639;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
        }
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.z;
        uint _2645 = (_2643 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2645) & _2549) == 0u)
        {
            _2749 = _2628;
            _2751 = _2630;
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630)));
            float _2775 = _2774 * _1628;
            float _2776 = _2774 * _1629;
            float _2777 = _2774 * _1630;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2645 < ((_2643 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2909 = _2628;
                float _2910 = _2630;
                float _2911 = _2632;
                float _2912 = _2634;
                float _2913 = _2636;
                float _2914 = _2638;
                uint _2915 = _2645;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2925)
                    {
                        frontier_phi_84_pred = _2913;
                        frontier_phi_84_pred_1 = _2912;
                        frontier_phi_84_pred_2 = _2911;
                        frontier_phi_84_pred_3 = _2910;
                        frontier_phi_84_pred_4 = _2909;
                        frontier_phi_84_pred_5 = _2914;
                    }
                    else
                    {
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3128 = _2909;
                        float _3129 = _2910;
                        float _3130 = _2911;
                        float _3131 = _2912;
                        float _3132 = _2913;
                        float _3133 = _2914;
                        uint _3134 = _2924;
                        uint _3135;
                        vec4 _3160;
                        float _3161;
                        vec4 _3176;
                        vec3 _3188;
                        vec4 _3204;
                        vec4 _3220;
                        float _3267;
                        bool _3268;
                        for (;;)
                        {
                            uint _3145 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3134));
                            _3135 = (_3134 + 4294967295u) & _3134;
                            uint _3147 = _3145 * 40u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3161 = _3160.w;
                            uint _3163 = (_3145 * 40u) + 4u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3145 * 40u) + 8u;
                            _3188 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x));
                            uint _3191 = (_3145 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3207 = (_3145 * 40u) + 20u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3223 = (_3145 * 40u) + 24u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3242 = (_3145 * 40u) + 28u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3267 = fma(_1630, _3255.z, fma(_1629, _3255.y, _3255.x * _1628)) + _3255.w;
                            _3268 = !((fma(_1630, _3236.z, fma(_1629, _3236.y, _3236.x * _1628)) + _3236.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3268)
                            {
                                float _3295 = _3160.x - _1628;
                                float _3296 = _3160.y - _1629;
                                float _3297 = _3160.z - _1630;
                                float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                                float _3301 = inversesqrt(_3298);
                                float _3302 = _3301 * _3295;
                                float _3303 = _3301 * _3296;
                                float _3304 = _3301 * _3297;
                                float _3308 = 1.0 - (_3298 / (_3161 * _3161));
                                float _4386 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3313 = sqrt(_3298) * _3176.w;
                                float _3315 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                                float _3316 = _3315 * _3315;
                                float _3319 = ((1.0 - _3316) * dot(vec3(_3302, _3303, _3304), vec3(_483, _486, _489))) + _3316;
                                float _3322 = _3313 * _3313;
                                float _3326 = (fma(_1630, _3204.z, fma(_1629, _3204.y, _3204.x * _1628)) + _3204.w) / _3267;
                                float _3327 = (fma(_1630, _3220.z, fma(_1629, _3220.y, _3220.x * _1628)) + _3220.w) / _3267;
                                float _3331 = 1.0 - dot(vec2(_3326, _3327), vec2(_3326, _3327));
                                float _4402 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3333 = _3332 * (((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3309) / ((_3322 * 0.699999988079071044921875) + 1.0));
                                float _3345 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                                float _3350 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * 0.999898970127105712890625));
                                float _3351 = _3350 * _3350;
                                float _3352 = _3351 * _3351;
                                float _3353 = _3302 - _2775;
                                float _3354 = _3303 - _2776;
                                float _3355 = _3304 - _2777;
                                float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                                float _3363 = dot(vec3(_483, _486, _489), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4413 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3367 = dot(vec3(_483, _486, _489), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                                float _4424 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                                float _3375 = _3315 * _3351;
                                float _3376 = _3375 * _3375;
                                float _3382 = ((1.0 - _3376) * dot(vec3(_483, _486, _489), vec3(_3302, _3303, _3304))) + _3376;
                                float _4435 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3384 = 1.0 - _3351;
                                float _3394 = (0.5 / (((_3383 * ((_3366 * _3384) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3351) * _3366))) * _3383;
                                float _4446 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3404 = (_3332 * _3309) * (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3374 * _3374) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3333 * _3176.y;
                                frontier_phi_90_pred_1 = _3333 * _3176.x;
                                frontier_phi_90_pred_2 = _3404 * _3188.z;
                                frontier_phi_90_pred_3 = _3404 * _3188.y;
                                frontier_phi_90_pred_4 = _3404 * _3188.x;
                                frontier_phi_90_pred_5 = _3333 * _3176.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3412 = frontier_phi_90_pred;
                            _3411 = frontier_phi_90_pred_1;
                            _3410 = frontier_phi_90_pred_2;
                            _3409 = frontier_phi_90_pred_3;
                            _3408 = frontier_phi_90_pred_4;
                            _3413 = frontier_phi_90_pred_5;
                            _3118 = _3411 + _3131;
                            _3119 = _3412 + _3132;
                            _3120 = _3413 + _3133;
                            _3115 = _3408 + _3128;
                            _3116 = _3409 + _3129;
                            _3117 = _3410 + _3130;
                            if (_3135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3135;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3119;
                        frontier_phi_84_pred_1 = _3118;
                        frontier_phi_84_pred_2 = _3117;
                        frontier_phi_84_pred_3 = _3116;
                        frontier_phi_84_pred_4 = _3115;
                        frontier_phi_84_pred_5 = _3120;
                    }
                    _2758 = frontier_phi_84_pred;
                    _2756 = frontier_phi_84_pred_1;
                    _2754 = frontier_phi_84_pred_2;
                    _2752 = frontier_phi_84_pred_3;
                    _2750 = frontier_phi_84_pred_4;
                    _2760 = frontier_phi_84_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2750;
                        _2910 = _2752;
                        _2911 = _2754;
                        _2912 = _2756;
                        _2913 = _2758;
                        _2914 = _2760;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2760;
                frontier_phi_65_66_ladder_1 = _2756;
                frontier_phi_65_66_ladder_2 = _2758;
                frontier_phi_65_66_ladder_3 = _2752;
                frontier_phi_65_66_ladder_4 = _2750;
                frontier_phi_65_66_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_65_66_ladder = _2638;
                frontier_phi_65_66_ladder_1 = _2634;
                frontier_phi_65_66_ladder_2 = _2636;
                frontier_phi_65_66_ladder_3 = _2630;
                frontier_phi_65_66_ladder_4 = _2628;
                frontier_phi_65_66_ladder_5 = _2632;
            }
            _2749 = frontier_phi_65_66_ladder_4;
            _2751 = frontier_phi_65_66_ladder_3;
            _2753 = frontier_phi_65_66_ladder_5;
            _2755 = frontier_phi_65_66_ladder_1;
            _2757 = frontier_phi_65_66_ladder_2;
            _2759 = frontier_phi_65_66_ladder;
        }
        float _2764 = isnan(1.0) ? _531 : (isnan(_531) ? 1.0 : min(_531, 1.0));
        _2561 = (_2764 * _2755) + _2095;
        _2563 = (_2764 * _2757) + _2097;
        _2565 = (_2764 * _2759) + _2099;
        _2567 = ((_2749 * 0.039999999105930328369140625) * _2764) + _2417;
        _2569 = ((_2751 * 0.039999999105930328369140625) * _2764) + _2419;
        _2571 = ((_2753 * 0.039999999105930328369140625) * _2764) + _2421;
    }
    else
    {
        _2561 = _2095;
        _2563 = _2097;
        _2565 = _2099;
        _2567 = _2417;
        _2569 = _2419;
        _2571 = _2421;
    }
    float _4462 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4473 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4484 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _2588 = ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2561 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _531))) + ((_2567 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1359)) * cbPerFrame._m0[3u].x);
    float _2589 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2563 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _531))) + ((_2569 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1359)) * cbPerFrame._m0[3u].x);
    float _2590 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2565 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _531))) + ((_2571 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1359)) * cbPerFrame._m0[3u].x);
    uint _2591 = _505 + 6u;
    float _2599 = _462 / cbSceneParam._m0[86u].x;
    float _2600 = _463 / cbSceneParam._m0[86u].y;
    vec4 _2614 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, (log2((isnan(cbSceneParam._m0[77u].w) ? _382 : (isnan(_382) ? cbSceneParam._m0[77u].w : min(_382, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2616 = _2614.x;
    float _2617 = _2614.y;
    float _2618 = _2614.z;
    float _2619 = _2614.w;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_382 > cbSceneParam._m0[78u].w)
    {
        float _2653 = isnan(_382) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _382 : min(cbSceneParam._m0[80u].w, _382));
        float _2654 = _2653 / _382;
        float _2665 = _2654 * _434;
        float _2666 = _435 * _2654;
        float _2667 = (-0.0) - _2666;
        float _2668 = _2654 * _436;
        float _2670 = (cbSceneParam._m0[77u].w * _2667) / _2653;
        float _2671 = _2670 + cbSceneParam._m0[79u].w;
        float _2672 = cbSceneParam._m0[79u].w - _2666;
        float _2678 = sqrt(((_2665 * _2665) + (_2666 * _2666)) + (_2668 * _2668));
        float _2681 = (1.0 - (cbSceneParam._m0[77u].w / _2653)) * _2678;
        float _2686 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2688 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2667 - _2670) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2671 > 0.0) ? exp2(_2686 * _2671) : (2.0 - exp2(_2688 * _2671))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2681;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : max(_2671, _2672));
            float _2812 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : min(_2671, _2672));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2866 = ((abs(_2678 / _2667) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2686 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2686 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2688 * _2821) - exp2(_2688 * _2822)) * _2810))) + (_2681 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2619);
        _2690 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2616;
        _2692 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2617;
        _2694 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2618;
        _2696 = _2877 * _2619;
    }
    else
    {
        _2690 = _2616;
        _2692 = _2617;
        _2694 = _2618;
        _2696 = _2619;
    }
    bool _2904;
    vec4 _2706;
    vec4 _2729;
    float _2731;
    float _2735;
    float _2736;
    float _2737;
    float _2738;
    bool _2748;
    for (;;)
    {
        _2706 = cbMatDynParam._m0[0u];
        float _2708 = roundEven(_2706.y);
        bool _2709 = _2708 == 3.0;
        float _2711 = log2(_2696);
        float _2718 = exp2(_2711 * cbSceneParam._m0[78u].x) * _2588;
        float _2719 = exp2(_2711 * cbSceneParam._m0[78u].y) * _2589;
        float _2720 = exp2(_2711 * cbSceneParam._m0[78u].z) * _2590;
        float _2727 = _450 + (-0.5);
        _2729 = cbMtdParam._m0[1u];
        _2731 = _2729.y * _2727;
        float _2734 = (_2708 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2735 = _2734 * (_2709 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2690)));
        _2736 = _2734 * (_2709 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2692)));
        _2737 = _2734 * (_2709 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2694)));
        _2738 = _2727 * 0.999000012874603271484375;
        _2748 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2748)
        {
            if ((cbInstanceData._m0[_505 + 7u].x + _2738) < 0.5)
            {
                _2904 = true;
                break;
            }
        }
        uint _2845 = _507 + uint(_2706.w);
        if ((cbInstanceData._m0[_2845].w < 1.0) && ((cbInstanceData._m0[_2845].w + _2738) < 0.5))
        {
            _2904 = true;
            break;
        }
        if ((_2731 + 1.0) < _2729.x)
        {
            _2904 = true;
            break;
        }
        _2904 = false;
        break;
    }
    float _3106;
    if (_2904)
    {
        discard_state = true;
        _3106 = 0.0;
    }
    else
    {
        _3106 = cbInstanceData._m0[_2591].w;
    }
    SV_Target.x = _2735;
    SV_Target.y = _2736;
    SV_Target.z = _2737;
    SV_Target.w = _3106;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2591].w;
    discard_exit();
}


