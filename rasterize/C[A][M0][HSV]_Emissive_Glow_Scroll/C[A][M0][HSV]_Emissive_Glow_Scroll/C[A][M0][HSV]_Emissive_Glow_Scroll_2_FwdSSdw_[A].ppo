#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _789;
float _3021;
float _3022;
float _3023;
float _3024;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _192 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _192.x * cbMtdParam._m0[9u].x;
    float _199 = _192.y * cbMtdParam._m0[9u].y;
    float _200 = _192.z * cbMtdParam._m0[9u].z;
    vec4 _237 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _249 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _250 = _249 * _171;
    float _251 = _249 * _172;
    float _252 = _249 * _173;
    float _3033 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3044 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3055 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _272 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _313 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _323 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _313);
    float _324 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _313);
    float _325 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _313);
    float _329 = inversesqrt(dot(vec3(_323, _324, _325), vec3(_323, _324, _325)));
    float _330 = _323 * _329;
    float _331 = _324 * _329;
    float _332 = _325 * _329;
    vec4 _337 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _339 = _337.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _468 = sqrt(((_323 * _323) + (_324 * _324)) + (_325 * _325));
        float _474 = (cbMatDynParam._m0[5u].x * _468) + cbMatDynParam._m0[5u].y;
        float _3066 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
        float _475 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
        float _479 = (cbMatDynParam._m0[5u].z * _468) + cbMatDynParam._m0[5u].w;
        float _3077 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0))) - _475)) + _475) < ((_339 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _351 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _352 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _372 = fma(_252, cbSceneParam._m0[5u].z, fma(_251, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _250));
    float _375 = fma(_252, cbSceneParam._m0[6u].z, fma(_251, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _250));
    float _378 = fma(_252, cbSceneParam._m0[7u].z, fma(_251, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _250));
    uint _391 = uint(roundEven(NORMAL.w)) * 13u;
    uint _392 = _391 + 9u;
    uint _393 = _392 + uint(cbMatDynParam._m0[0u].w);
    float _399 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0)))) * cbInstanceData._m0[_393].x;
    float _400 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0)))) * cbInstanceData._m0[_393].y;
    float _401 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0)))) * cbInstanceData._m0[_393].z;
    float _3088 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
    float _3099 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _403 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
    float _3110 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
    vec4 _413 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _351, cbSceneParam._m0[86u].y * _352));
    float _416 = _413.x * TEXCOORD.z;
    float _417 = dot(vec3(_250, _251, _252), vec3(_330, _331, _332));
    float _420 = _417 * 2.0;
    float _425 = (_420 * _250) - _330;
    float _426 = (_420 * _251) - _331;
    float _427 = (_420 * _252) - _332;
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _788;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _513 = fma(_457, cbModelParam._m0[26u].z, fma(_453, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _449));
        float _517 = fma(_457, cbModelParam._m0[27u].z, fma(_453, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _449));
        float _521 = fma(_457, cbModelParam._m0[28u].z, fma(_453, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _449));
        float _546 = _449 + _250;
        float _547 = _453 + _251;
        float _548 = _457 + _252;
        float _558 = fma(_548, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546)) - _513;
        float _559 = fma(_548, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546)) - _517;
        float _560 = fma(_548, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546)) - _521;
        float _564 = inversesqrt(dot(vec3(_558, _559, _560), vec3(_558, _559, _560)));
        float _577 = ((_564 * _558) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_513 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _578 = ((_564 * _559) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_517 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _579 = ((_564 * _560) / cbModelParam._m0[34u].z) + ((((((_521 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        float _616 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_582.x + (-0.5));
        float _618 = _616 * (_582.y + (-0.5));
        float _619 = _616 * (_582.z + (-0.5));
        float _626 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_589.x + (-0.5));
        float _628 = _626 * (_589.y + (-0.5));
        float _629 = _626 * (_589.z + (-0.5));
        float _636 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_596.x + (-0.5));
        float _638 = _636 * (_596.y + (-0.5));
        float _639 = _636 * (_596.z + (-0.5));
        float _646 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_603.x + (-0.5));
        float _648 = _646 * (_603.y + (-0.5));
        float _649 = _646 * (_603.z + (-0.5));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _652 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _653 = _617 * 0.5;
        float _654 = _627 * 0.5;
        float _655 = _637 * 0.5;
        float _656 = dot(vec3(_653, _654, _655), vec3(_653, _654, _655));
        float _661 = (_656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_656);
        float _670 = (dot(vec3(_250, _251, _252), vec3(_661 * _653, _661 * _654, _661 * _655)) + 1.0) * 0.5;
        float _3136 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _680 = sqrt(((_654 * _654) + (_653 * _653)) + (_655 * _655)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3147 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _682 = _681 * 2.0;
        float _686 = (1.0 - _681) / (_681 + 1.0);
        float _3158 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
        float _696 = ((((1.0 - _687) * (_682 + 2.0)) * exp2(log2(isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0))) * (_682 + 1.0))) + _687) * _650;
        float _697 = _618 * 0.5;
        float _698 = _628 * 0.5;
        float _699 = _638 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _713 = (dot(vec3(_250, _251, _252), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3169 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _722 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_651 + 9.9999997473787516355514526367188e-06);
        float _3180 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _3191 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0))) * (_724 + 1.0))) + _729) * _651;
        float _739 = _619 * 0.5;
        float _740 = _629 * 0.5;
        float _741 = _639 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(_250, _251, _252), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3202 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_652 + 9.9999997473787516355514526367188e-06);
        float _3213 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3224 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))) * (_766 + 1.0))) + _771) * _652;
        _788 = _619;
        _790 = _618;
        _791 = _617;
        _792 = _629;
        _793 = _628;
        _794 = _627;
        _795 = _639;
        _796 = _638;
        _797 = _637;
        _798 = _652;
        _799 = _651;
        _800 = _650;
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0)));
        _802 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _803 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
    }
    else
    {
        _788 = _789;
        _790 = _789;
        _791 = _789;
        _792 = _789;
        _793 = _789;
        _794 = _789;
        _795 = _789;
        _796 = _789;
        _797 = _789;
        _798 = _789;
        _799 = _789;
        _800 = _789;
        _801 = 0.0;
        _802 = 0.0;
        _803 = 0.0;
    }
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _832 = fma(_457, cbModelParam._m0[30u].z, fma(_453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _449));
        float _836 = fma(_457, cbModelParam._m0[31u].z, fma(_453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _449));
        float _840 = fma(_457, cbModelParam._m0[32u].z, fma(_453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _449));
        float _863 = _449 + _250;
        float _864 = _453 + _251;
        float _865 = _457 + _252;
        float _875 = fma(_865, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863)) - _832;
        float _876 = fma(_865, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863)) - _836;
        float _877 = fma(_865, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863)) - _840;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_832 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_836 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[35u].z) + ((((((_840 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _931 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_898.x + (-0.5));
        float _933 = _931 * (_898.y + (-0.5));
        float _934 = _931 * (_898.z + (-0.5));
        float _941 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_905.x + (-0.5));
        float _943 = _941 * (_905.y + (-0.5));
        float _944 = _941 * (_905.z + (-0.5));
        float _951 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_912.x + (-0.5));
        float _953 = _951 * (_912.y + (-0.5));
        float _954 = _951 * (_912.z + (-0.5));
        float _961 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_919.x + (-0.5));
        float _963 = _961 * (_919.y + (-0.5));
        float _964 = _961 * (_919.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_250, _251, _252), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3265 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3276 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3287 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) * (_995 + 1.0))) + _1000) * _965;
        float _1010 = _933 * 0.5;
        float _1011 = _943 * 0.5;
        float _1012 = _953 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_250, _251, _252), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3298 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3309 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3320 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * (_1037 + 1.0))) + _1042) * _966;
        float _1052 = _934 * 0.5;
        float _1053 = _944 * 0.5;
        float _1054 = _954 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_250, _251, _252), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3353 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_1079 + 1.0))) + _1084) * _967;
        _1101 = _934;
        _1102 = _933;
        _1103 = _932;
        _1104 = _944;
        _1105 = _943;
        _1106 = _942;
        _1107 = _954;
        _1108 = _953;
        _1109 = _952;
        _1110 = _967;
        _1111 = _966;
        _1112 = _965;
        _1113 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1114 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _789;
        _1102 = _789;
        _1103 = _789;
        _1104 = _789;
        _1105 = _789;
        _1106 = _789;
        _1107 = _789;
        _1108 = _789;
        _1109 = _789;
        _1110 = _789;
        _1111 = _789;
        _1112 = _789;
        _1113 = 0.0;
        _1114 = 0.0;
        _1115 = 0.0;
    }
    float _1125 = (cbModelParam._m0[1u].x * (_1113 - _801)) + _801;
    float _1126 = (cbModelParam._m0[1u].x * (_1114 - _802)) + _802;
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _803)) + _803;
    float _1148 = fma(_1127, cbSceneParam._m0[89u].z, fma(_1126, cbSceneParam._m0[89u].y, _1125 * cbSceneParam._m0[89u].x));
    float _1151 = fma(_1127, cbSceneParam._m0[90u].z, fma(_1126, cbSceneParam._m0[90u].y, _1125 * cbSceneParam._m0[90u].x));
    float _1154 = fma(_1127, cbSceneParam._m0[91u].z, fma(_1126, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1125));
    float _1169 = _425 * 0.5;
    float _1170 = _426 * 0.5;
    float _1171 = _427 * 0.5;
    float _1172 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1103, _1106, _1109, _1112));
    float _1175 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1102, _1105, _1108, _1111));
    float _1178 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1101, _1104, _1107, _1110));
    float _1212;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1185 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_788, _792, _795, _798));
        float _1189 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_790, _793, _796, _799));
        float _1193 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_791, _794, _797, _800));
        float _1200 = dot(vec4(cbModelParam._m0[39u]), vec4(_1169, _1170, _1171, 1.0));
        _1212 = dot(vec3(isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1200) ? 0.0 : (isnan(0.0) ? _1200 : max(0.0, _1200))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1212 = 1.0;
    }
    float _1223;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1214 = dot(vec4(cbModelParam._m0[40u]), vec4(_1169, _1170, _1171, 1.0));
        _1223 = dot(vec3(isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1214) ? 0.0 : (isnan(0.0) ? _1214 : max(0.0, _1214))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1223 = 1.0;
    }
    float _1227 = (_1223 * cbModelParam._m0[1u].x) + (_1212 * (1.0 - cbModelParam._m0[1u].x));
    float _1236 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1317;
    float _1319;
    float _1321;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1284 = fma(_457, cbModelParam._m0[13u].z, fma(_453, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _449)) + cbModelParam._m0[13u].w;
        float _1288 = fma(_457, cbModelParam._m0[14u].z, fma(_453, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _449)) + cbModelParam._m0[14u].w;
        float _1292 = fma(_457, cbModelParam._m0[15u].z, fma(_453, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _449)) + cbModelParam._m0[15u].w;
        float _1295 = fma(_427, cbModelParam._m0[13u].z, fma(_426, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _425));
        float _1298 = fma(_427, cbModelParam._m0[14u].z, fma(_426, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _425));
        float _1301 = fma(_427, cbModelParam._m0[15u].z, fma(_426, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _425));
        float _1327;
        if (_1295 > 0.0)
        {
            _1327 = abs((1.0 - _1284) / _1295);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1284 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1327 = frontier_phi_17_15_ladder;
        }
        float _1554;
        if (_1298 > 0.0)
        {
            _1554 = abs((1.0 - _1288) / _1298);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1288 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1554 = frontier_phi_26_22_ladder;
        }
        float _1746;
        if (_1301 > 0.0)
        {
            _1746 = abs((1.0 - _1292) / _1301);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1292 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1746 = frontier_phi_38_33_ladder;
        }
        float _1748 = isnan(_1554) ? _1327 : (isnan(_1327) ? _1554 : min(_1327, _1554));
        float _1749 = isnan(_1746) ? _1748 : (isnan(_1748) ? _1746 : min(_1748, _1746));
        float _1753 = (_1749 * _1295) + _1284;
        float _1754 = (_1749 * _1298) + _1288;
        float _1755 = (_1749 * _1301) + _1292;
        float _1756 = _1749 * 9.9999997473787516355514526367188e-05;
        float _1758 = (-1.0) - _1756;
        float _1760 = _1756 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1755 > _1760) || ((_1755 < _1758) || ((_1754 > _1760) || ((_1754 < _1758) || ((_1753 < _1758) || (_1753 > _1760))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1755, cbModelParam._m0[9u].z, fma(_1754, cbModelParam._m0[9u].y, _1753 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1755, cbModelParam._m0[10u].z, fma(_1754, cbModelParam._m0[10u].y, _1753 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1755, cbModelParam._m0[11u].z, fma(_1754, cbModelParam._m0[11u].y, _1753 * cbModelParam._m0[11u].x))), _1236);
            frontier_phi_16_38_ladder = _1852.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1852.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1852.x * cbModelParam._m0[1u].y;
        }
        _1317 = frontier_phi_16_38_ladder_2;
        _1319 = frontier_phi_16_38_ladder_1;
        _1321 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_425, _426, _427), _1236);
        _1317 = _1305.x * cbModelParam._m0[1u].y;
        _1319 = _1305.y * cbModelParam._m0[1u].y;
        _1321 = _1305.z * cbModelParam._m0[1u].y;
    }
    float _1324 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1416;
    float _1418;
    float _1420;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1380 = fma(_457, cbModelParam._m0[21u].z, fma(_453, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _449)) + cbModelParam._m0[21u].w;
        float _1384 = fma(_457, cbModelParam._m0[22u].z, fma(_453, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _449)) + cbModelParam._m0[22u].w;
        float _1388 = fma(_457, cbModelParam._m0[23u].z, fma(_453, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _449)) + cbModelParam._m0[23u].w;
        float _1391 = fma(_427, cbModelParam._m0[21u].z, fma(_426, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _425));
        float _1394 = fma(_427, cbModelParam._m0[22u].z, fma(_426, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _425));
        float _1397 = fma(_427, cbModelParam._m0[23u].z, fma(_426, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _425));
        float _1559;
        if (_1391 > 0.0)
        {
            _1559 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1559 = frontier_phi_28_24_ladder;
        }
        float _1773;
        if (_1394 > 0.0)
        {
            _1773 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1773 = frontier_phi_40_35_ladder;
        }
        float _1924;
        if (_1397 > 0.0)
        {
            _1924 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1924 = frontier_phi_49_46_ladder;
        }
        float _1926 = isnan(_1773) ? _1559 : (isnan(_1559) ? _1773 : min(_1559, _1773));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1391) + _1380;
        float _1932 = (_1927 * _1394) + _1384;
        float _1933 = (_1927 * _1397) + _1388;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1935 = (-1.0) - _1934;
        float _1937 = _1934 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1933 > _1937) || ((_1933 < _1935) || ((_1932 > _1937) || ((_1932 < _1935) || ((_1931 < _1935) || (_1931 > _1937))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1933, cbModelParam._m0[17u].z, fma(_1932, cbModelParam._m0[17u].y, _1931 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1933, cbModelParam._m0[18u].z, fma(_1932, cbModelParam._m0[18u].y, _1931 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1933, cbModelParam._m0[19u].z, fma(_1932, cbModelParam._m0[19u].y, _1931 * cbModelParam._m0[19u].x))), _1324);
            frontier_phi_25_49_ladder = _2170.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2170.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2170.x * cbModelParam._m0[1u].z;
        }
        _1416 = frontier_phi_25_49_ladder_2;
        _1418 = frontier_phi_25_49_ladder_1;
        _1420 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_425, _426, _427), _1324);
        _1416 = _1400.x * cbModelParam._m0[1u].z;
        _1418 = _1400.y * cbModelParam._m0[1u].z;
        _1420 = _1400.z * cbModelParam._m0[1u].z;
    }
    float _1432 = _416 * 0.01200000010430812835693359375;
    float _1434 = _1432 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1435 = _1432 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1436 = _1432 * ((cbModelParam._m0[1u].w * (_1420 - _1321)) + _1321);
    float _1439 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, _1434 * cbSceneParam._m0[91u].x));
    vec4 _1453 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_351, _352));
    float _1455 = _1453.w;
    float _1467 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1455);
    float _1468 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1455);
    float _1469 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1455);
    uvec4 _1473 = floatBitsToUint(cbInstanceData._m0[_391 + 5u]);
    uint _1475 = _1473.x * 14u;
    uint _1476 = _1475 + 13u;
    float _1483 = _416 + (-1.0);
    float _1489 = (cbLight._m0[_1476].x * _1483) + 1.0;
    float _1490 = (cbLight._m0[_1476].y * _1483) + 1.0;
    float _1491 = (cbLight._m0[_1476].z * _1483) + 1.0;
    float _1492 = (cbLight._m0[_1476].w * _1483) + 1.0;
    uint _1493 = _1475 + 5u;
    float _1499 = isnan(1.0) ? _1490 : (isnan(_1490) ? 1.0 : min(_1490, 1.0));
    uint _1503 = _1475 + 4u;
    float _1513 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
    uint _1517 = _1475 | 1u;
    float _1528 = dot(vec3(cbLight._m0[_1475].xyz), vec3(_250, _251, _252));
    float _1531 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_250, _251, _252));
    float _3489 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _3500 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
    float _1536 = (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * 0.3183098733425140380859375;
    float _1538 = (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * 0.3183098733425140380859375;
    float _1545 = ((cbLight._m0[_1493].x * _1499) * _1538) + (((cbLight._m0[_1503].x * _1467) * _1513) * _1536);
    float _1546 = ((_1499 * cbLight._m0[_1493].y) * _1538) + (((cbLight._m0[_1503].y * _1468) * _1513) * _1536);
    float _1547 = ((_1499 * cbLight._m0[_1493].z) * _1538) + (((cbLight._m0[_1503].z * _1469) * _1513) * _1536);
    uvec4 _1551 = floatBitsToUint(cbLight._m0[_1475 + 12u]);
    bool _1553 = _1551.x == 0u;
    float _1564;
    float _1566;
    float _1568;
    if (_1553)
    {
        _1564 = _1545;
        _1566 = _1546;
        _1568 = _1547;
    }
    else
    {
        uint _1572 = _1475 + 6u;
        float _1588 = (dot(vec3(cbLight._m0[_1475 + 2u].xyz), vec3(_250, _251, _252)) * 0.5) + 0.5;
        float _1589 = _1588 * _1588;
        float _3511 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1591 = isnan(1.0) ? _1491 : (isnan(_1491) ? 1.0 : min(_1491, 1.0));
        _1564 = (((cbLight._m0[_1572].x * 0.3183098733425140380859375) * _1590) * _1591) + _1545;
        _1566 = (((cbLight._m0[_1572].y * 0.3183098733425140380859375) * _1590) * _1591) + _1546;
        _1568 = (((cbLight._m0[_1572].z * 0.3183098733425140380859375) * _1590) * _1591) + _1547;
    }
    bool _1571 = _1551.y == 0u;
    float _1609;
    float _1611;
    float _1613;
    if (_1571)
    {
        _1609 = _1564;
        _1611 = _1566;
        _1613 = _1568;
    }
    else
    {
        uint _1717 = _1475 + 7u;
        float _1733 = (dot(vec3(cbLight._m0[_1475 + 3u].xyz), vec3(_250, _251, _252)) * 0.5) + 0.5;
        float _1734 = _1733 * _1733;
        float _3527 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1736 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
        _1609 = (((cbLight._m0[_1717].x * 0.3183098733425140380859375) * _1735) * _1736) + _1564;
        _1611 = (((cbLight._m0[_1717].y * 0.3183098733425140380859375) * _1735) * _1736) + _1566;
        _1613 = (((cbLight._m0[_1717].z * 0.3183098733425140380859375) * _1735) * _1736) + _1568;
    }
    uint _1615 = _1475 + 8u;
    float _1621 = cbLight._m0[_1475].x + _330;
    float _1622 = cbLight._m0[_1475].y + _331;
    float _1623 = cbLight._m0[_1475].z + _332;
    float _1627 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
    float _1631 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_1475].xyz));
    float _3543 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1634 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _1635 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _1636 = dot(vec3(cbLight._m0[_1475].xyz), vec3(_1621 * _1627, _1622 * _1627, _1623 * _1627));
    float _3565 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1647 = (exp2(log2(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1653 = (0.5 / ((_1634 + 9.9999999392252902907785028219223e-09) + _1635)) * _1634;
    float _3576 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1655 = (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.31831014156341552734375;
    uint _1669 = _1475 + 9u;
    float _1675 = cbLight._m0[_1517].x + _330;
    float _1676 = cbLight._m0[_1517].y + _331;
    float _1677 = cbLight._m0[_1517].z + _332;
    float _1681 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
    float _1685 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_1517].xyz));
    float _3587 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1688 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _1689 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_1675 * _1681, _1676 * _1681, _1677 * _1681));
    float _3598 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1698 = (exp2(log2(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1702 = (0.5 / ((_1688 + 9.9999999392252902907785028219223e-09) + _1635)) * _1688;
    float _3609 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1704 = (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.31831014156341552734375;
    float _1714 = (((_1698 * cbLight._m0[_1669].x) * _1704) * _1499) + ((((cbLight._m0[_1615].x * _1467) * _1647) * _1655) * _1513);
    float _1715 = (((_1698 * cbLight._m0[_1669].y) * _1704) * _1499) + ((((cbLight._m0[_1615].y * _1468) * _1647) * _1655) * _1513);
    float _1716 = (((_1698 * cbLight._m0[_1669].z) * _1704) * _1499) + ((((cbLight._m0[_1615].z * _1469) * _1647) * _1655) * _1513);
    float _1778;
    float _1780;
    float _1782;
    if (_1553)
    {
        _1778 = _1714;
        _1780 = _1715;
        _1782 = _1716;
    }
    else
    {
        uint _1784 = _1475 + 10u;
        uint _1790 = _1475 + 2u;
        float _1796 = cbLight._m0[_1790].x + _330;
        float _1797 = cbLight._m0[_1790].y + _331;
        float _1798 = cbLight._m0[_1790].z + _332;
        float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
        float _1806 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_1790].xyz));
        float _3620 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1809 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1810 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1796 * _1802, _1797 * _1802, _1798 * _1802));
        float _3631 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = (exp2(log2(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1823 = (0.5 / ((_1809 + 9.9999999392252902907785028219223e-09) + _1635)) * _1809;
        float _3642 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1825 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.31831014156341552734375;
        float _1826 = isnan(1.0) ? _1491 : (isnan(_1491) ? 1.0 : min(_1491, 1.0));
        _1778 = (((_1819 * cbLight._m0[_1784].x) * _1825) * _1826) + _1714;
        _1780 = (((_1819 * cbLight._m0[_1784].y) * _1825) * _1826) + _1715;
        _1782 = (((_1819 * cbLight._m0[_1784].z) * _1825) * _1826) + _1716;
    }
    float _1861;
    float _1863;
    float _1865;
    if (_1571)
    {
        _1861 = _1778;
        _1863 = _1780;
        _1865 = _1782;
    }
    else
    {
        uint _1872 = _1475 + 11u;
        uint _1878 = _1475 + 3u;
        float _1884 = cbLight._m0[_1878].x + _330;
        float _1885 = cbLight._m0[_1878].y + _331;
        float _1886 = cbLight._m0[_1878].z + _332;
        float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
        float _1894 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_1878].xyz));
        float _3658 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1897 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1898 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_1884 * _1890, _1885 * _1890, _1886 * _1890));
        float _3669 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1907 = (exp2(log2(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1911 = (0.5 / ((_1897 + 9.9999999392252902907785028219223e-09) + _1635)) * _1897;
        float _3680 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1913 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.31831014156341552734375;
        float _1914 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
        _1861 = (((_1907 * cbLight._m0[_1872].x) * _1913) * _1914) + _1778;
        _1863 = (((_1907 * cbLight._m0[_1872].y) * _1913) * _1914) + _1780;
        _1865 = (((_1907 * cbLight._m0[_1872].z) * _1913) * _1914) + _1782;
    }
    float _2049;
    float _2051;
    float _2053;
    float _2055;
    float _2057;
    float _2059;
    if (_1473.y == 0u)
    {
        float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1990 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1989;
        float _1991 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1989;
        float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1989;
        uvec4 _2004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2005 = _2004.x;
        uint _2016 = uint((float(_2004.y) * floor(float(uint(cbSceneParam._m0[85u].y * _352) / _2005))) + floor(float(uint(cbSceneParam._m0[85u].x * _351) / _2005)));
        float _2026 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2027 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        uint _2030 = uint(isnan(14.0) ? _2027 : (isnan(_2027) ? 14.0 : min(_2027, 14.0)));
        uvec4 _2035 = texelFetch(g_lightClusterGridBuffer, int(((_2030 << 2u) + (_2016 << 6u)) >> 2u));
        uint _2036 = _2035.x;
        uint _2037 = _2004.z;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        if (((((1u << ((_2037 >> 4u) & 15u)) + 4294967295u) & _2036) == 0u) || ((_2037 & 240u) == 0u))
        {
            _2175 = 0.0;
            _2177 = 0.0;
            _2179 = 0.0;
            _2181 = 0.0;
            _2183 = 0.0;
            _2185 = 0.0;
        }
        else
        {
            float _2176;
            float _2178;
            float _2180;
            float _2182;
            float _2184;
            float _2186;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            uint _2341 = 0u;
            uint _2350;
            bool _2351;
            for (;;)
            {
                _2350 = texelFetch(g_lightClassification, int((((_2030 << 5u) + (_2016 << 9u)) + (_2341 << 2u)) >> 2u)).x;
                _2351 = _2350 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2351)
                {
                    frontier_phi_66_pred = _2335;
                    frontier_phi_66_pred_1 = _2340;
                    frontier_phi_66_pred_2 = _2339;
                    frontier_phi_66_pred_3 = _2338;
                    frontier_phi_66_pred_4 = _2337;
                    frontier_phi_66_pred_5 = _2336;
                }
                else
                {
                    float _2480;
                    float _2481;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    uint _2486;
                    _2480 = _2335;
                    _2481 = _2336;
                    _2482 = _2337;
                    _2483 = _2338;
                    _2484 = _2339;
                    _2485 = _2340;
                    _2486 = _2350;
                    float _2407;
                    float _2408;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    for (;;)
                    {
                        uint _2490 = uint(findLSB(_2486)) + (_2341 << 5u);
                        uint _2487 = (_2486 + 4294967295u) & _2486;
                        uint _2492 = _2490 * 48u;
                        vec4 _2506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 3u)).x));
                        uint _2512 = (_2490 * 48u) + 4u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2512)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 3u)).x));
                        uint _2531 = (_2490 * 48u) + 8u;
                        vec3 _2542 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x));
                        float _2546 = _2506.x - _1990;
                        float _2547 = _2506.y - _1991;
                        float _2548 = _2506.z - _1992;
                        float _2549 = dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548));
                        float _2552 = inversesqrt(_2549);
                        float _2561 = 1.0 - (_2549 * _2506.w);
                        float _3706 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _2562 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                        float _2563 = sqrt(_2549) * _2525.w;
                        float _2566 = 1.39999997615814208984375 / (_2563 + 1.39999997615814208984375);
                        float _2567 = _2566 * _2566;
                        float _2570 = ((1.0 - _2567) * dot(vec3(_372, _375, _378), vec3(_2552 * _2546, _2552 * _2547, _2552 * _2548))) + _2567;
                        float _2573 = _2563 * _2563;
                        float _2577 = ((isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))) * _2562) / ((_2573 * 0.699999988079071044921875) + 1.0);
                        float _2581 = (-0.0) - _1990;
                        float _2582 = (-0.0) - _1991;
                        float _2583 = (-0.0) - _1992;
                        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
                        float _2591 = dot(vec3(_372, _375, _378), vec3(_2587 * _2581, _2587 * _2582, _2587 * _2583));
                        float _3722 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _3733 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2595 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
                        float _2599 = (0.5 / (((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) + 9.9999999392252902907785028219223e-09) + _2595)) * _2595;
                        float _3744 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2608 = (((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 3.1415927410125732421875) / ((_2573 * 2.1991131305694580078125) + 3.141590118408203125)) * _2562;
                        _2410 = (_2577 * _2525.x) + _2483;
                        _2411 = (_2577 * _2525.y) + _2484;
                        _2412 = (_2577 * _2525.z) + _2485;
                        _2407 = (_2608 * _2542.x) + _2480;
                        _2408 = (_2608 * _2542.y) + _2481;
                        _2409 = (_2608 * _2542.z) + _2482;
                        if (_2487 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2480 = _2407;
                            _2481 = _2408;
                            _2482 = _2409;
                            _2483 = _2410;
                            _2484 = _2411;
                            _2485 = _2412;
                            _2486 = _2487;
                        }
                    }
                    frontier_phi_66_pred = _2407;
                    frontier_phi_66_pred_1 = _2412;
                    frontier_phi_66_pred_2 = _2411;
                    frontier_phi_66_pred_3 = _2410;
                    frontier_phi_66_pred_4 = _2409;
                    frontier_phi_66_pred_5 = _2408;
                }
                _2176 = frontier_phi_66_pred;
                _2186 = frontier_phi_66_pred_1;
                _2184 = frontier_phi_66_pred_2;
                _2182 = frontier_phi_66_pred_3;
                _2180 = frontier_phi_66_pred_4;
                _2178 = frontier_phi_66_pred_5;
                uint _2342 = _2341 + 1u;
                if (_2342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2335 = _2176;
                    _2336 = _2178;
                    _2337 = _2180;
                    _2338 = _2182;
                    _2339 = _2184;
                    _2340 = _2186;
                    _2341 = _2342;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2175 = _2176;
            _2177 = _2178;
            _2179 = _2180;
            _2181 = _2182;
            _2183 = _2184;
            _2185 = _2186;
        }
        uvec4 _2189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2190 = _2189.z;
        uint _2192 = (_2190 >> 8u) & 15u;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        if (((4294967295u << _2192) & _2036) == 0u)
        {
            _2306 = _2175;
            _2308 = _2177;
            _2310 = _2179;
            _2312 = _2181;
            _2314 = _2183;
            _2316 = _2185;
        }
        else
        {
            float _2331 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2192 < ((_2190 >> 12u) & 15u))
            {
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2315;
                float _2317;
                float _2463 = _2175;
                float _2464 = _2177;
                float _2465 = _2179;
                float _2466 = _2181;
                float _2467 = _2183;
                float _2468 = _2185;
                uint _2469 = _2192;
                uint _2478;
                bool _2479;
                for (;;)
                {
                    _2478 = texelFetch(g_lightClassification, int((((_2030 << 5u) + (_2016 << 9u)) + (_2469 << 2u)) >> 2u)).x;
                    _2479 = _2478 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2479)
                    {
                        frontier_phi_77_pred = _2468;
                        frontier_phi_77_pred_1 = _2467;
                        frontier_phi_77_pred_2 = _2466;
                        frontier_phi_77_pred_3 = _2465;
                        frontier_phi_77_pred_4 = _2464;
                        frontier_phi_77_pred_5 = _2463;
                    }
                    else
                    {
                        float _2622;
                        float _2623;
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2627;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2635 = _2463;
                        float _2636 = _2464;
                        float _2637 = _2465;
                        float _2638 = _2466;
                        float _2639 = _2467;
                        float _2640 = _2468;
                        uint _2641 = _2478;
                        uint _2642;
                        vec4 _2667;
                        float _2668;
                        vec4 _2683;
                        vec3 _2695;
                        vec4 _2711;
                        vec4 _2727;
                        float _2774;
                        bool _2775;
                        for (;;)
                        {
                            uint _2652 = ((_2469 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2641));
                            _2642 = (_2641 + 4294967295u) & _2641;
                            uint _2654 = _2652 * 40u;
                            _2667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 3u)).x));
                            _2668 = _2667.w;
                            uint _2670 = (_2652 * 40u) + 4u;
                            _2683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 3u)).x));
                            uint _2685 = (_2652 * 40u) + 8u;
                            _2695 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x));
                            uint _2698 = (_2652 * 40u) + 16u;
                            _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2714 = (_2652 * 40u) + 20u;
                            _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            uint _2730 = (_2652 * 40u) + 24u;
                            vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            uint _2749 = (_2652 * 40u) + 28u;
                            vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 3u)).x));
                            _2774 = fma(_1992, _2762.z, fma(_1991, _2762.y, _2762.x * _1990)) + _2762.w;
                            _2775 = !((fma(_1992, _2743.z, fma(_1991, _2743.y, _2743.x * _1990)) + _2743.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2775)
                            {
                                float _2802 = _2667.x - _1990;
                                float _2803 = _2667.y - _1991;
                                float _2804 = _2667.z - _1992;
                                float _2805 = dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804));
                                float _2808 = inversesqrt(_2805);
                                float _2809 = _2808 * _2802;
                                float _2810 = _2808 * _2803;
                                float _2811 = _2808 * _2804;
                                float _2815 = 1.0 - (_2805 / (_2668 * _2668));
                                float _3755 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                                float _2816 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                                float _2820 = sqrt(_2805) * _2683.w;
                                float _2822 = 1.39999997615814208984375 / (_2820 + 1.39999997615814208984375);
                                float _2823 = _2822 * _2822;
                                float _2824 = 1.0 - _2823;
                                float _2826 = (_2824 * dot(vec3(_2809, _2810, _2811), vec3(_372, _375, _378))) + _2823;
                                float _2829 = _2820 * _2820;
                                float _2833 = (fma(_1992, _2711.z, fma(_1991, _2711.y, _2711.x * _1990)) + _2711.w) / _2774;
                                float _2834 = (fma(_1992, _2727.z, fma(_1991, _2727.y, _2727.x * _1990)) + _2727.w) / _2774;
                                float _2838 = 1.0 - dot(vec2(_2833, _2834), vec2(_2833, _2834));
                                float _3771 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                                float _2839 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                                float _2840 = _2839 * (((isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))) * _2816) / ((_2829 * 0.699999988079071044921875) + 1.0));
                                float _2850 = dot(vec3(_372, _375, _378), vec3((-0.0) - (_1990 * _2331), (-0.0) - (_1991 * _2331), (-0.0) - (_1992 * _2331)));
                                float _3782 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                                float _2858 = (_2824 * dot(vec3(_372, _375, _378), vec3(_2809, _2810, _2811))) + _2823;
                                float _3793 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                                float _2859 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                                float _2863 = (0.5 / (((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) + 9.9999999392252902907785028219223e-09) + _2859)) * _2859;
                                float _3804 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                                float _2870 = (_2839 * _2816) * (((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 3.1415927410125732421875) / ((_2829 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2840 * _2683.y;
                                frontier_phi_83_pred_1 = _2840 * _2683.x;
                                frontier_phi_83_pred_2 = _2870 * _2695.z;
                                frontier_phi_83_pred_3 = _2870 * _2695.y;
                                frontier_phi_83_pred_4 = _2870 * _2695.x;
                                frontier_phi_83_pred_5 = _2840 * _2683.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2878 = frontier_phi_83_pred;
                            _2877 = frontier_phi_83_pred_1;
                            _2876 = frontier_phi_83_pred_2;
                            _2875 = frontier_phi_83_pred_3;
                            _2874 = frontier_phi_83_pred_4;
                            _2879 = frontier_phi_83_pred_5;
                            _2625 = _2877 + _2638;
                            _2626 = _2878 + _2639;
                            _2627 = _2879 + _2640;
                            _2622 = _2874 + _2635;
                            _2623 = _2875 + _2636;
                            _2624 = _2876 + _2637;
                            if (_2642 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2635 = _2622;
                                _2636 = _2623;
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2642;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2627;
                        frontier_phi_77_pred_1 = _2626;
                        frontier_phi_77_pred_2 = _2625;
                        frontier_phi_77_pred_3 = _2624;
                        frontier_phi_77_pred_4 = _2623;
                        frontier_phi_77_pred_5 = _2622;
                    }
                    _2317 = frontier_phi_77_pred;
                    _2315 = frontier_phi_77_pred_1;
                    _2313 = frontier_phi_77_pred_2;
                    _2311 = frontier_phi_77_pred_3;
                    _2309 = frontier_phi_77_pred_4;
                    _2307 = frontier_phi_77_pred_5;
                    uint _2470 = _2469 + 1u;
                    if (_2470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2463 = _2307;
                        _2464 = _2309;
                        _2465 = _2311;
                        _2466 = _2313;
                        _2467 = _2315;
                        _2468 = _2317;
                        _2469 = _2470;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2311;
                frontier_phi_58_59_ladder_1 = _2317;
                frontier_phi_58_59_ladder_2 = _2315;
                frontier_phi_58_59_ladder_3 = _2313;
                frontier_phi_58_59_ladder_4 = _2309;
                frontier_phi_58_59_ladder_5 = _2307;
            }
            else
            {
                frontier_phi_58_59_ladder = _2179;
                frontier_phi_58_59_ladder_1 = _2185;
                frontier_phi_58_59_ladder_2 = _2183;
                frontier_phi_58_59_ladder_3 = _2181;
                frontier_phi_58_59_ladder_4 = _2177;
                frontier_phi_58_59_ladder_5 = _2175;
            }
            _2306 = frontier_phi_58_59_ladder_5;
            _2308 = frontier_phi_58_59_ladder_4;
            _2310 = frontier_phi_58_59_ladder;
            _2312 = frontier_phi_58_59_ladder_3;
            _2314 = frontier_phi_58_59_ladder_2;
            _2316 = frontier_phi_58_59_ladder_1;
        }
        float _2321 = isnan(1.0) ? _416 : (isnan(_416) ? 1.0 : min(_416, 1.0));
        _2049 = (_2321 * _2312) + _1609;
        _2051 = (_2321 * _2314) + _1611;
        _2053 = (_2321 * _2316) + _1613;
        _2055 = ((_2306 * 0.039999999105930328369140625) * _2321) + _1861;
        _2057 = ((_2308 * 0.039999999105930328369140625) * _2321) + _1863;
        _2059 = ((_2310 * 0.039999999105930328369140625) * _2321) + _1865;
    }
    else
    {
        _2049 = _1609;
        _2051 = _1611;
        _2053 = _1613;
        _2055 = _1861;
        _2057 = _1863;
        _2059 = _1865;
    }
    uint _2065 = _392 + uint(cbMatDynParam._m0[0u].w);
    float _2074 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _237.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2065].x;
    float _2078 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _237.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2065].y;
    float _2082 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _237.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2065].z;
    float _3820 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3831 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3842 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _2099 = (((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_2049 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _416))) + ((_2055 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + _2074;
    float _2101 = (_2078 + ((_2057 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_2051 + ((isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0))) * _416)));
    float _2103 = (_2082 + ((_2059 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_2053 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _416)));
    float _2104 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2105 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2106 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2112 = cbMtdParam._m0[2u].x * _2074;
    float _2113 = cbMtdParam._m0[2u].y * _2078;
    float _2114 = cbMtdParam._m0[2u].z * _2082;
    float _3868 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2116 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    uint _2117 = _391 + 6u;
    float _2125 = _351 / cbSceneParam._m0[86u].x;
    float _2126 = _352 / cbSceneParam._m0[86u].y;
    vec4 _2140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2125, _2126, (log2((isnan(cbSceneParam._m0[77u].w) ? _272 : (isnan(_272) ? cbSceneParam._m0[77u].w : min(_272, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2142 = _2140.x;
    float _2143 = _2140.y;
    float _2144 = _2140.z;
    float _2145 = _2140.w;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    if (_272 > cbSceneParam._m0[78u].w)
    {
        float _2200 = isnan(_272) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _272 : min(cbSceneParam._m0[80u].w, _272));
        float _2201 = _2200 / _272;
        float _2212 = _2201 * _323;
        float _2213 = _324 * _2201;
        float _2214 = (-0.0) - _2213;
        float _2216 = _2201 * _325;
        float _2218 = (cbSceneParam._m0[77u].w * _2214) / _2200;
        float _2219 = _2218 + cbSceneParam._m0[79u].w;
        float _2220 = cbSceneParam._m0[79u].w - _2213;
        float _2226 = sqrt(((_2212 * _2212) + (_2213 * _2213)) + (_2216 * _2216));
        float _2229 = (1.0 - (cbSceneParam._m0[77u].w / _2200)) * _2226;
        float _2234 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2236 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2420;
        if (abs((_2214 - _2218) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2420 = ((((_2219 > 0.0) ? exp2(_2234 * _2219) : (2.0 - exp2(_2236 * _2219))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2229;
        }
        else
        {
            float _2364 = 1.0 / cbSceneParam._m0[80u].x;
            float _2365 = isnan(_2220) ? _2219 : (isnan(_2219) ? _2220 : max(_2219, _2220));
            float _2366 = isnan(_2220) ? _2219 : (isnan(_2219) ? _2220 : min(_2219, _2220));
            float _2375 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : min(_2365, 0.0));
            float _2376 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : min(_2366, 0.0));
            _2420 = ((abs(_2226 / _2214) * cbSceneParam._m0[80u].y) * ((((_2375 - _2376) * 2.0) - ((exp2(_2234 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0)))) - exp2(_2234 * (isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0))))) * _2364)) - ((exp2(_2236 * _2375) - exp2(_2236 * _2376)) * _2364))) + (_2229 * cbSceneParam._m0[80u].z);
        }
        vec4 _2422 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2125, _2126, 1.0), 0.0);
        float _2431 = exp2((_2420 * (-1.44269502162933349609375)) * (1.0 - _2422.w));
        float _2432 = log2(_2431);
        float _2448 = log2(_2145);
        _2238 = (exp2(_2448 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2432 * cbSceneParam._m0[78u].x)) * _2422.x) / cbSceneParam._m0[78u].x)) + _2142;
        _2240 = (exp2(_2448 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2432 * cbSceneParam._m0[78u].y)) * _2422.y) / cbSceneParam._m0[78u].y)) + _2143;
        _2242 = (exp2(_2448 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2432 * cbSceneParam._m0[78u].z)) * _2422.z) / cbSceneParam._m0[78u].z)) + _2144;
        _2244 = _2431 * _2145;
    }
    else
    {
        _2238 = _2142;
        _2240 = _2143;
        _2242 = _2144;
        _2244 = _2145;
    }
    bool _2458;
    vec4 _2253;
    vec4 _2276;
    float _2278;
    float _2282;
    float _2283;
    float _2284;
    float _2287;
    float _2290;
    float _2293;
    float _2294;
    bool _2305;
    for (;;)
    {
        _2253 = cbMatDynParam._m0[0u];
        float _2255 = roundEven(_2253.y);
        bool _2256 = _2255 == 3.0;
        float _2258 = log2(_2244);
        float _2262 = exp2(_2258 * cbSceneParam._m0[78u].x);
        float _2263 = exp2(_2258 * cbSceneParam._m0[78u].y);
        float _2264 = exp2(_2258 * cbSceneParam._m0[78u].z);
        float _2265 = _2262 * _2104;
        float _2266 = _2263 * _2105;
        float _2267 = _2264 * _2106;
        float _2274 = _339 + (-0.5);
        _2276 = cbMtdParam._m0[1u];
        _2278 = _2276.y * _2274;
        float _2281 = (_2255 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2282 = _2281 * (_2256 ? _2265 : (_2265 + (cbSceneParam._m0[72u].w * _2238)));
        _2283 = _2281 * (_2256 ? _2266 : (_2266 + (cbSceneParam._m0[72u].w * _2240)));
        _2284 = _2281 * (_2256 ? _2267 : (_2267 + (cbSceneParam._m0[72u].w * _2242)));
        _2287 = ((_2112 * _2116) * _2262) * _2281;
        _2290 = ((_2113 * _2116) * _2263) * _2281;
        _2293 = ((_2114 * _2116) * _2264) * _2281;
        _2294 = _2274 * 0.999000012874603271484375;
        _2305 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2305)
        {
            if ((cbInstanceData._m0[_391 + 7u].x + _2294) < 0.5)
            {
                _2458 = true;
                break;
            }
        }
        uint _2399 = _392 + uint(_2253.w);
        if ((cbInstanceData._m0[_2399].w < 1.0) && ((cbInstanceData._m0[_2399].w + _2294) < 0.5))
        {
            _2458 = true;
            break;
        }
        if ((_2278 + 1.0) < _2276.x)
        {
            _2458 = true;
            break;
        }
        _2458 = false;
        break;
    }
    float _2613;
    if (_2458)
    {
        discard_state = true;
        _2613 = 0.0;
    }
    else
    {
        _2613 = cbInstanceData._m0[_2117].w;
    }
    SV_Target.x = _2282;
    SV_Target.y = _2283;
    SV_Target.z = _2284;
    SV_Target.w = _2613;
    SV_Target_1.x = _2287;
    SV_Target_1.y = _2290;
    SV_Target_1.z = _2293;
    SV_Target_1.w = cbInstanceData._m0[_2117].w;
    discard_exit();
}


