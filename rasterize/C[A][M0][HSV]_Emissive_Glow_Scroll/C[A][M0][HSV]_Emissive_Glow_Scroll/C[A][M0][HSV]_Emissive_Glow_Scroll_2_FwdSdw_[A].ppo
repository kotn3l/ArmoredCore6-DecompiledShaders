#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _791;
float _3283;
float _3284;
float _3285;
float _3286;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    vec4 _194 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _194.x * cbMtdParam._m0[9u].x;
    float _201 = _194.y * cbMtdParam._m0[9u].y;
    float _202 = _194.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _251 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _252 = _251 * _173;
    float _253 = _251 * _174;
    float _254 = _251 * _175;
    float _3295 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3306 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3317 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _274 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _315 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _325 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _315);
    float _326 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _315);
    float _327 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _315);
    float _331 = inversesqrt(dot(vec3(_325, _326, _327), vec3(_325, _326, _327)));
    float _332 = _325 * _331;
    float _333 = _326 * _331;
    float _334 = _327 * _331;
    vec4 _339 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _341 = _339.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _470 = sqrt(((_325 * _325) + (_326 * _326)) + (_327 * _327));
        float _476 = (cbMatDynParam._m0[5u].x * _470) + cbMatDynParam._m0[5u].y;
        float _3328 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
        float _477 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _481 = (cbMatDynParam._m0[5u].z * _470) + cbMatDynParam._m0[5u].w;
        float _3339 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) - _477)) + _477) < ((_341 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _353 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _354 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _374 = fma(_254, cbSceneParam._m0[5u].z, fma(_253, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _252));
    float _377 = fma(_254, cbSceneParam._m0[6u].z, fma(_253, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _252));
    float _380 = fma(_254, cbSceneParam._m0[7u].z, fma(_253, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _252));
    uint _393 = uint(roundEven(NORMAL.w)) * 13u;
    uint _394 = _393 + 9u;
    uint _395 = _394 + uint(cbMatDynParam._m0[0u].w);
    float _401 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_395].x;
    float _402 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_395].y;
    float _403 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_395].z;
    float _3350 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    vec4 _415 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _353, cbSceneParam._m0[86u].y * _354));
    float _418 = _415.x * TEXCOORD.z;
    float _419 = dot(vec3(_252, _253, _254), vec3(_332, _333, _334));
    float _422 = _419 * 2.0;
    float _427 = (_422 * _252) - _332;
    float _428 = (_422 * _253) - _333;
    float _429 = (_422 * _254) - _334;
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _459 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _790;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _515 = fma(_459, cbModelParam._m0[26u].z, fma(_455, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _451));
        float _519 = fma(_459, cbModelParam._m0[27u].z, fma(_455, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _451));
        float _523 = fma(_459, cbModelParam._m0[28u].z, fma(_455, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _451));
        float _548 = _451 + _252;
        float _549 = _455 + _253;
        float _550 = _459 + _254;
        float _560 = fma(_550, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548)) - _515;
        float _561 = fma(_550, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548)) - _519;
        float _562 = fma(_550, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548)) - _523;
        float _566 = inversesqrt(dot(vec3(_560, _561, _562), vec3(_560, _561, _562)));
        float _579 = ((_566 * _560) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_515 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _580 = ((_566 * _561) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_519 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _581 = ((_566 * _562) / cbModelParam._m0[34u].z) + ((((((_523 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _598 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        float _618 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_584.x + (-0.5));
        float _620 = _618 * (_584.y + (-0.5));
        float _621 = _618 * (_584.z + (-0.5));
        float _628 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_591.x + (-0.5));
        float _630 = _628 * (_591.y + (-0.5));
        float _631 = _628 * (_591.z + (-0.5));
        float _638 = exp2((_598.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_598.x + (-0.5));
        float _640 = _638 * (_598.y + (-0.5));
        float _641 = _638 * (_598.z + (-0.5));
        float _648 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_605.x + (-0.5));
        float _650 = _648 * (_605.y + (-0.5));
        float _651 = _648 * (_605.z + (-0.5));
        float _652 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _653 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _654 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _655 = _619 * 0.5;
        float _656 = _629 * 0.5;
        float _657 = _639 * 0.5;
        float _658 = dot(vec3(_655, _656, _657), vec3(_655, _656, _657));
        float _663 = (_658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_658);
        float _672 = (dot(vec3(_252, _253, _254), vec3(_663 * _655, _663 * _656, _663 * _657)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _682 = sqrt(((_656 * _656) + (_655 * _655)) + (_657 * _657)) / (_652 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _684 = _683 * 2.0;
        float _688 = (1.0 - _683) / (_683 + 1.0);
        float _3420 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _698 = ((((1.0 - _689) * (_684 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_684 + 1.0))) + _689) * _652;
        float _699 = _620 * 0.5;
        float _700 = _630 * 0.5;
        float _701 = _640 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _715 = (dot(vec3(_252, _253, _254), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _724 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_653 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3453 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_726 + 1.0))) + _731) * _653;
        float _741 = _621 * 0.5;
        float _742 = _631 * 0.5;
        float _743 = _641 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(_252, _253, _254), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_654 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3486 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_768 + 1.0))) + _773) * _654;
        _790 = _621;
        _792 = _620;
        _793 = _619;
        _794 = _631;
        _795 = _630;
        _796 = _629;
        _797 = _641;
        _798 = _640;
        _799 = _639;
        _800 = _654;
        _801 = _653;
        _802 = _652;
        _803 = cbModelParam._m0[36u].z * (isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0)));
        _804 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _805 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
    }
    else
    {
        _790 = _791;
        _792 = _791;
        _793 = _791;
        _794 = _791;
        _795 = _791;
        _796 = _791;
        _797 = _791;
        _798 = _791;
        _799 = _791;
        _800 = _791;
        _801 = _791;
        _802 = _791;
        _803 = 0.0;
        _804 = 0.0;
        _805 = 0.0;
    }
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _834 = fma(_459, cbModelParam._m0[30u].z, fma(_455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _451));
        float _838 = fma(_459, cbModelParam._m0[31u].z, fma(_455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _451));
        float _842 = fma(_459, cbModelParam._m0[32u].z, fma(_455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _451));
        float _865 = _451 + _252;
        float _866 = _455 + _253;
        float _867 = _459 + _254;
        float _877 = fma(_867, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865)) - _834;
        float _878 = fma(_867, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865)) - _838;
        float _879 = fma(_867, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865)) - _842;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_834 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_838 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[35u].z) + ((((((_842 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _933 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_900.x + (-0.5));
        float _935 = _933 * (_900.y + (-0.5));
        float _936 = _933 * (_900.z + (-0.5));
        float _943 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_907.x + (-0.5));
        float _945 = _943 * (_907.y + (-0.5));
        float _946 = _943 * (_907.z + (-0.5));
        float _953 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_914.x + (-0.5));
        float _955 = _953 * (_914.y + (-0.5));
        float _956 = _953 * (_914.z + (-0.5));
        float _963 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_921.x + (-0.5));
        float _965 = _963 * (_921.y + (-0.5));
        float _966 = _963 * (_921.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_252, _253, _254), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3549 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_997 + 1.0))) + _1002) * _967;
        float _1012 = _935 * 0.5;
        float _1013 = _945 * 0.5;
        float _1014 = _955 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_252, _253, _254), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3582 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1039 + 1.0))) + _1044) * _968;
        float _1054 = _936 * 0.5;
        float _1055 = _946 * 0.5;
        float _1056 = _956 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_252, _253, _254), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3615 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1081 + 1.0))) + _1086) * _969;
        _1103 = _936;
        _1104 = _935;
        _1105 = _934;
        _1106 = _946;
        _1107 = _945;
        _1108 = _944;
        _1109 = _956;
        _1110 = _955;
        _1111 = _954;
        _1112 = _969;
        _1113 = _968;
        _1114 = _967;
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1116 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _791;
        _1104 = _791;
        _1105 = _791;
        _1106 = _791;
        _1107 = _791;
        _1108 = _791;
        _1109 = _791;
        _1110 = _791;
        _1111 = _791;
        _1112 = _791;
        _1113 = _791;
        _1114 = _791;
        _1115 = 0.0;
        _1116 = 0.0;
        _1117 = 0.0;
    }
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _803)) + _803;
    float _1128 = (cbModelParam._m0[1u].x * (_1116 - _804)) + _804;
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _805)) + _805;
    float _1150 = fma(_1129, cbSceneParam._m0[89u].z, fma(_1128, cbSceneParam._m0[89u].y, _1127 * cbSceneParam._m0[89u].x));
    float _1153 = fma(_1129, cbSceneParam._m0[90u].z, fma(_1128, cbSceneParam._m0[90u].y, _1127 * cbSceneParam._m0[90u].x));
    float _1156 = fma(_1129, cbSceneParam._m0[91u].z, fma(_1128, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1127));
    float _1171 = _427 * 0.5;
    float _1172 = _428 * 0.5;
    float _1173 = _429 * 0.5;
    float _1174 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1177 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1104, _1107, _1110, _1113));
    float _1180 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1103, _1106, _1109, _1112));
    float _1214;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1187 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_790, _794, _797, _800));
        float _1191 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_792, _795, _798, _801));
        float _1195 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_793, _796, _799, _802));
        float _1202 = dot(vec4(cbModelParam._m0[39u]), vec4(_1171, _1172, _1173, 1.0));
        _1214 = dot(vec3(isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1214 = 1.0;
    }
    float _1225;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1216 = dot(vec4(cbModelParam._m0[40u]), vec4(_1171, _1172, _1173, 1.0));
        _1225 = dot(vec3(isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1216) ? 0.0 : (isnan(0.0) ? _1216 : max(0.0, _1216))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1225 = 1.0;
    }
    float _1229 = (_1225 * cbModelParam._m0[1u].x) + (_1214 * (1.0 - cbModelParam._m0[1u].x));
    float _1238 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1319;
    float _1321;
    float _1323;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1286 = fma(_459, cbModelParam._m0[13u].z, fma(_455, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _451)) + cbModelParam._m0[13u].w;
        float _1290 = fma(_459, cbModelParam._m0[14u].z, fma(_455, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _451)) + cbModelParam._m0[14u].w;
        float _1294 = fma(_459, cbModelParam._m0[15u].z, fma(_455, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _451)) + cbModelParam._m0[15u].w;
        float _1297 = fma(_429, cbModelParam._m0[13u].z, fma(_428, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _427));
        float _1300 = fma(_429, cbModelParam._m0[14u].z, fma(_428, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _427));
        float _1303 = fma(_429, cbModelParam._m0[15u].z, fma(_428, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _427));
        float _1329;
        if (_1297 > 0.0)
        {
            _1329 = abs((1.0 - _1286) / _1297);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1286 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1329 = frontier_phi_17_15_ladder;
        }
        float _1502;
        if (_1300 > 0.0)
        {
            _1502 = abs((1.0 - _1290) / _1300);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1290 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1502 = frontier_phi_26_22_ladder;
        }
        float _1799;
        if (_1303 > 0.0)
        {
            _1799 = abs((1.0 - _1294) / _1303);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1294 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1799 = frontier_phi_38_33_ladder;
        }
        float _1801 = isnan(_1502) ? _1329 : (isnan(_1329) ? _1502 : min(_1329, _1502));
        float _1802 = isnan(_1799) ? _1801 : (isnan(_1801) ? _1799 : min(_1801, _1799));
        float _1806 = (_1802 * _1297) + _1286;
        float _1807 = (_1802 * _1300) + _1290;
        float _1808 = (_1802 * _1303) + _1294;
        float _1809 = _1802 * 9.9999997473787516355514526367188e-05;
        float _1811 = (-1.0) - _1809;
        float _1813 = _1809 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1808 > _1813) || ((_1808 < _1811) || ((_1807 > _1813) || ((_1807 < _1811) || ((_1806 < _1811) || (_1806 > _1813))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1808, cbModelParam._m0[9u].z, fma(_1807, cbModelParam._m0[9u].y, _1806 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1808, cbModelParam._m0[10u].z, fma(_1807, cbModelParam._m0[10u].y, _1806 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1808, cbModelParam._m0[11u].z, fma(_1807, cbModelParam._m0[11u].y, _1806 * cbModelParam._m0[11u].x))), _1238);
            frontier_phi_16_38_ladder = _1953.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1953.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1953.x * cbModelParam._m0[1u].y;
        }
        _1319 = frontier_phi_16_38_ladder_2;
        _1321 = frontier_phi_16_38_ladder_1;
        _1323 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1307 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_427, _428, _429), _1238);
        _1319 = _1307.x * cbModelParam._m0[1u].y;
        _1321 = _1307.y * cbModelParam._m0[1u].y;
        _1323 = _1307.z * cbModelParam._m0[1u].y;
    }
    float _1326 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1382 = fma(_459, cbModelParam._m0[21u].z, fma(_455, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _451)) + cbModelParam._m0[21u].w;
        float _1386 = fma(_459, cbModelParam._m0[22u].z, fma(_455, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _451)) + cbModelParam._m0[22u].w;
        float _1390 = fma(_459, cbModelParam._m0[23u].z, fma(_455, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _451)) + cbModelParam._m0[23u].w;
        float _1393 = fma(_429, cbModelParam._m0[21u].z, fma(_428, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _427));
        float _1396 = fma(_429, cbModelParam._m0[22u].z, fma(_428, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _427));
        float _1399 = fma(_429, cbModelParam._m0[23u].z, fma(_428, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _427));
        float _1507;
        if (_1393 > 0.0)
        {
            _1507 = abs((1.0 - _1382) / _1393);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1382 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1507 = frontier_phi_28_24_ladder;
        }
        float _1826;
        if (_1396 > 0.0)
        {
            _1826 = abs((1.0 - _1386) / _1396);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1386 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1826 = frontier_phi_40_35_ladder;
        }
        float _2099;
        if (_1399 > 0.0)
        {
            _2099 = abs((1.0 - _1390) / _1399);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1390 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2099 = frontier_phi_50_47_ladder;
        }
        float _2101 = isnan(_1826) ? _1507 : (isnan(_1507) ? _1826 : min(_1507, _1826));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1393) + _1382;
        float _2107 = (_2102 * _1396) + _1386;
        float _2108 = (_2102 * _1399) + _1390;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2109;
        float _2112 = _2109 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2108 > _2112) || ((_2108 < _2110) || ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 < _2110) || (_2106 > _2112))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2199 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2108, cbModelParam._m0[17u].z, fma(_2107, cbModelParam._m0[17u].y, _2106 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2108, cbModelParam._m0[18u].z, fma(_2107, cbModelParam._m0[18u].y, _2106 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2108, cbModelParam._m0[19u].z, fma(_2107, cbModelParam._m0[19u].y, _2106 * cbModelParam._m0[19u].x))), _1326);
            frontier_phi_25_50_ladder = _2199.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2199.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2199.x * cbModelParam._m0[1u].z;
        }
        _1418 = frontier_phi_25_50_ladder_2;
        _1420 = frontier_phi_25_50_ladder_1;
        _1422 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_427, _428, _429), _1326);
        _1418 = _1402.x * cbModelParam._m0[1u].z;
        _1420 = _1402.y * cbModelParam._m0[1u].z;
        _1422 = _1402.z * cbModelParam._m0[1u].z;
    }
    float _1434 = _418 * 0.01200000010430812835693359375;
    float _1436 = _1434 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1437 = _1434 * ((cbModelParam._m0[1u].w * (_1420 - _1321)) + _1321);
    float _1438 = _1434 * ((cbModelParam._m0[1u].w * (_1422 - _1323)) + _1323);
    float _1441 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, _1436 * cbSceneParam._m0[91u].x));
    float _1481 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1485 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1489 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1493 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1494 = _1481 / _1493;
    float _1495 = _1485 / _1493;
    float _1496 = _1489 / _1493;
    float _1643;
    float _1644;
    float _1645;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1523 = ((uint(_1496 > cbSceneParam._m0[59u].y) + uint(_1496 > cbSceneParam._m0[59u].x)) + uint(_1496 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1524 = _1523 + 43u;
        uint _1532 = _1523 + 44u;
        uint _1540 = _1523 + 45u;
        uint _1548 = _1523 + 46u;
        float _1559 = fma(_1493, cbSceneParam._m0[_1524].w, fma(_1489, cbSceneParam._m0[_1524].z, fma(_1485, cbSceneParam._m0[_1524].y, _1481 * cbSceneParam._m0[_1524].x)));
        float _1563 = fma(_1493, cbSceneParam._m0[_1532].w, fma(_1489, cbSceneParam._m0[_1532].z, fma(_1485, cbSceneParam._m0[_1532].y, _1481 * cbSceneParam._m0[_1532].x)));
        float _1571 = fma(_1493, cbSceneParam._m0[_1548].w, fma(_1489, cbSceneParam._m0[_1548].z, fma(_1485, cbSceneParam._m0[_1548].y, _1481 * cbSceneParam._m0[_1548].x)));
        float _1576 = cbSceneParam._m0[33u].z * _1571;
        float _1578 = cbSceneParam._m0[33u].w * _1571;
        float _1581 = fma(_1493, cbSceneParam._m0[_1540].w, fma(_1489, cbSceneParam._m0[_1540].z, fma(_1485, cbSceneParam._m0[_1540].y, _1481 * cbSceneParam._m0[_1540].x))) / _1571;
        float _1629 = (cbSceneParam._m0[33u].x - sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496))) * cbSceneParam._m0[33u].y;
        float _3741 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1636 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1576 + _1559) / _1571, (_1578 + _1563) / _1571), _1581), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1578 + _1559) / _1571, (_1563 - _1576) / _1571), _1581), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1559 - _1576) / _1571, (_1563 - _1578) / _1571), _1581), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1559 - _1578) / _1571, (_1576 + _1563) / _1571), _1581), 0.0)).x), vec4(0.25)));
        _1643 = 1.0 - (_1636 * cbSceneParam._m0[34u].x);
        _1644 = 1.0 - (_1636 * cbSceneParam._m0[34u].y);
        _1645 = 1.0 - (_1636 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1643 = 1.0;
        _1644 = 1.0;
        _1645 = 1.0;
    }
    float _1709;
    float _1711;
    float _1713;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1697 = fma(_1493, cbSceneParam._m0[63u].w, fma(_1489, cbSceneParam._m0[63u].z, fma(_1485, cbSceneParam._m0[63u].y, _1481 * cbSceneParam._m0[63u].x)));
        float _1698 = fma(_1493, cbSceneParam._m0[60u].w, fma(_1489, cbSceneParam._m0[60u].z, fma(_1485, cbSceneParam._m0[60u].y, _1481 * cbSceneParam._m0[60u].x))) / _1697;
        float _1699 = fma(_1493, cbSceneParam._m0[61u].w, fma(_1489, cbSceneParam._m0[61u].z, fma(_1485, cbSceneParam._m0[61u].y, _1481 * cbSceneParam._m0[61u].x))) / _1697;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1698 >= cbSceneParam._m0[64u].x) && (_1699 >= cbSceneParam._m0[64u].y)) && (_1698 <= cbSceneParam._m0[64u].z)) && (_1699 <= cbSceneParam._m0[64u].w))
        {
            float _1839 = fma(_1493, cbSceneParam._m0[62u].w, fma(_1489, cbSceneParam._m0[62u].z, fma(_1485, cbSceneParam._m0[62u].y, _1481 * cbSceneParam._m0[62u].x))) / _1697;
            float _1843 = isnan(cbSceneParam._m0[41u].w) ? _1839 : (isnan(_1839) ? cbSceneParam._m0[41u].w : max(_1839, cbSceneParam._m0[41u].w));
            float _1886 = (cbSceneParam._m0[33u].x - sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496))) * cbSceneParam._m0[33u].y;
            float _3757 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
            float _1893 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1698, cbSceneParam._m0[33u].w + _1699), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1698, _1699 - cbSceneParam._m0[33u].z), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1698 - cbSceneParam._m0[33u].z, _1699 - cbSceneParam._m0[33u].w), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1698 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1699), _1843), 0.0)).x), vec4(0.25)));
            float _1897 = 1.0 - (_1893 * cbSceneParam._m0[34u].x);
            float _1898 = 1.0 - (_1893 * cbSceneParam._m0[34u].y);
            float _1899 = 1.0 - (_1893 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1899) ? _1645 : (isnan(_1645) ? _1899 : min(_1645, _1899));
            frontier_phi_37_36_ladder_1 = isnan(_1898) ? _1644 : (isnan(_1644) ? _1898 : min(_1644, _1898));
            frontier_phi_37_36_ladder_2 = isnan(_1897) ? _1643 : (isnan(_1643) ? _1897 : min(_1643, _1897));
        }
        else
        {
            frontier_phi_37_36_ladder = _1645;
            frontier_phi_37_36_ladder_1 = _1644;
            frontier_phi_37_36_ladder_2 = _1643;
        }
        _1709 = frontier_phi_37_36_ladder_2;
        _1711 = frontier_phi_37_36_ladder_1;
        _1713 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1709 = _1643;
        _1711 = _1644;
        _1713 = _1645;
    }
    uvec4 _1718 = floatBitsToUint(cbInstanceData._m0[_393 + 5u]);
    uint _1720 = _1718.x * 14u;
    uint _1721 = _1720 + 13u;
    float _1728 = _418 + (-1.0);
    float _1734 = (cbLight._m0[_1721].x * _1728) + 1.0;
    float _1735 = (cbLight._m0[_1721].y * _1728) + 1.0;
    float _1736 = (cbLight._m0[_1721].z * _1728) + 1.0;
    float _1737 = (cbLight._m0[_1721].w * _1728) + 1.0;
    uint _1738 = _1720 + 5u;
    float _1744 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1748 = _1720 + 4u;
    float _1758 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1762 = _1720 | 1u;
    float _1773 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_252, _253, _254));
    float _1776 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_252, _253, _254));
    float _3793 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _3804 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1781 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.3183098733425140380859375;
    float _1783 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1790 = ((cbLight._m0[_1738].x * _1744) * _1783) + (((cbLight._m0[_1748].x * _1709) * _1758) * _1781);
    float _1791 = ((_1744 * cbLight._m0[_1738].y) * _1783) + (((cbLight._m0[_1748].y * _1711) * _1758) * _1781);
    float _1792 = ((_1744 * cbLight._m0[_1738].z) * _1783) + (((cbLight._m0[_1748].z * _1713) * _1758) * _1781);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1720 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1798)
    {
        _1900 = _1790;
        _1902 = _1791;
        _1904 = _1792;
    }
    else
    {
        uint _1908 = _1720 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1720 + 2u].xyz), vec3(_252, _253, _254)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _3815 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1927 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1790;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1791;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1792;
    }
    bool _1907 = _1796.y == 0u;
    float _1962;
    float _1964;
    float _1966;
    if (_1907)
    {
        _1962 = _1900;
        _1964 = _1902;
        _1966 = _1904;
    }
    else
    {
        uint _2070 = _1720 + 7u;
        float _2086 = (dot(vec3(cbLight._m0[_1720 + 3u].xyz), vec3(_252, _253, _254)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _3831 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _2089 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1962 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _1900;
        _1964 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _1902;
        _1966 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _1904;
    }
    uint _1968 = _1720 + 8u;
    float _1974 = cbLight._m0[_1720].x + _332;
    float _1975 = cbLight._m0[_1720].y + _333;
    float _1976 = cbLight._m0[_1720].z + _334;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1984 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1720].xyz));
    float _3847 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _1988 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1974 * _1980, _1975 * _1980, _1976 * _1980));
    float _3869 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = (0.5 / ((_1987 + 9.9999999392252902907785028219223e-09) + _1988)) * _1987;
    float _3880 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2008 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * 0.31831014156341552734375;
    uint _2022 = _1720 + 9u;
    float _2028 = cbLight._m0[_1762].x + _332;
    float _2029 = cbLight._m0[_1762].y + _333;
    float _2030 = cbLight._m0[_1762].z + _334;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2038 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1762].xyz));
    float _3891 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_2028 * _2034, _2029 * _2034, _2030 * _2034));
    float _3902 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2051 = (exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2055 = (0.5 / ((_2041 + 9.9999999392252902907785028219223e-09) + _1988)) * _2041;
    float _3913 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2057 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.31831014156341552734375;
    float _2067 = (((_2051 * cbLight._m0[_2022].x) * _2057) * _1744) + ((((cbLight._m0[_1968].x * _1709) * _2000) * _2008) * _1758);
    float _2068 = (((_2051 * cbLight._m0[_2022].y) * _2057) * _1744) + ((((cbLight._m0[_1968].y * _1711) * _2000) * _2008) * _1758);
    float _2069 = (((_2051 * cbLight._m0[_2022].z) * _2057) * _1744) + ((((cbLight._m0[_1968].z * _1713) * _2000) * _2008) * _1758);
    float _2125;
    float _2127;
    float _2129;
    if (_1798)
    {
        _2125 = _2067;
        _2127 = _2068;
        _2129 = _2069;
    }
    else
    {
        uint _2131 = _1720 + 10u;
        uint _2137 = _1720 + 2u;
        float _2143 = cbLight._m0[_2137].x + _332;
        float _2144 = cbLight._m0[_2137].y + _333;
        float _2145 = cbLight._m0[_2137].z + _334;
        float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
        float _2153 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_2137].xyz));
        float _3924 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2157 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2143 * _2149, _2144 * _2149, _2145 * _2149));
        float _3935 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2166 = (exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2170 = (0.5 / ((_2156 + 9.9999999392252902907785028219223e-09) + _1988)) * _2156;
        float _3946 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2172 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.31831014156341552734375;
        float _2173 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2125 = (((_2166 * cbLight._m0[_2131].x) * _2172) * _2173) + _2067;
        _2127 = (((_2166 * cbLight._m0[_2131].y) * _2172) * _2173) + _2068;
        _2129 = (((_2166 * cbLight._m0[_2131].z) * _2172) * _2173) + _2069;
    }
    float _2204;
    float _2206;
    float _2208;
    if (_1907)
    {
        _2204 = _2125;
        _2206 = _2127;
        _2208 = _2129;
    }
    else
    {
        uint _2215 = _1720 + 11u;
        uint _2221 = _1720 + 3u;
        float _2227 = cbLight._m0[_2221].x + _332;
        float _2228 = cbLight._m0[_2221].y + _333;
        float _2229 = cbLight._m0[_2221].z + _334;
        float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
        float _2237 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_2221].xyz));
        float _3962 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2227 * _2233, _2228 * _2233, _2229 * _2233));
        float _3973 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2254 = (0.5 / ((_2240 + 9.9999999392252902907785028219223e-09) + _1988)) * _2240;
        float _3984 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2256 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.31831014156341552734375;
        float _2257 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _2204 = (((_2250 * cbLight._m0[_2215].x) * _2256) * _2257) + _2125;
        _2206 = (((_2250 * cbLight._m0[_2215].y) * _2256) * _2257) + _2127;
        _2208 = (((_2250 * cbLight._m0[_2215].z) * _2256) * _2257) + _2129;
    }
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1718.y == 0u)
    {
        uvec4 _2278 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2279 = _2278.x;
        uint _2290 = uint((float(_2278.y) * floor(float(uint(cbSceneParam._m0[85u].y * _354) / _2279))) + floor(float(uint(cbSceneParam._m0[85u].x * _353) / _2279)));
        float _2300 = (log2(_1496 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2301 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        uint _2304 = uint(isnan(14.0) ? _2301 : (isnan(_2301) ? 14.0 : min(_2301, 14.0)));
        uvec4 _2309 = texelFetch(g_lightClusterGridBuffer, int(((_2304 << 2u) + (_2290 << 6u)) >> 2u));
        uint _2310 = _2309.x;
        uint _2311 = _2278.z;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((((1u << ((_2311 >> 4u) & 15u)) + 4294967295u) & _2310) == 0u) || ((_2311 & 240u) == 0u))
        {
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
        }
        else
        {
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2604)
                {
                    frontier_phi_71_pred = _2593;
                    frontier_phi_71_pred_1 = _2592;
                    frontier_phi_71_pred_2 = _2591;
                    frontier_phi_71_pred_3 = _2590;
                    frontier_phi_71_pred_4 = _2589;
                    frontier_phi_71_pred_5 = _2588;
                }
                else
                {
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    uint _2739;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2603;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    for (;;)
                    {
                        uint _2743 = uint(findLSB(_2739)) + (_2594 << 5u);
                        uint _2740 = (_2739 + 4294967295u) & _2739;
                        uint _2745 = _2743 * 48u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2765 = (_2743 * 48u) + 4u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2784 = (_2743 * 48u) + 8u;
                        vec3 _2795 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x));
                        float _2799 = _2759.x - _1494;
                        float _2800 = _2759.y - _1495;
                        float _2801 = _2759.z - _1496;
                        float _2802 = dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801));
                        float _2805 = inversesqrt(_2802);
                        float _2814 = 1.0 - (_2802 * _2759.w);
                        float _4010 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2816 = sqrt(_2802) * _2778.w;
                        float _2819 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * dot(vec3(_374, _377, _380), vec3(_2805 * _2799, _2805 * _2800, _2805 * _2801))) + _2820;
                        float _2826 = _2816 * _2816;
                        float _2830 = ((isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * _2815) / ((_2826 * 0.699999988079071044921875) + 1.0);
                        float _2834 = (-0.0) - _1494;
                        float _2835 = (-0.0) - _1495;
                        float _2836 = (-0.0) - _1496;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2844 = dot(vec3(_374, _377, _380), vec3(_2840 * _2834, _2840 * _2835, _2840 * _2836));
                        float _4026 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _4037 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2848 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2852 = (0.5 / (((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) + 9.9999999392252902907785028219223e-09) + _2848)) * _2848;
                        float _4048 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2861 = (((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 3.1415927410125732421875) / ((_2826 * 2.1991131305694580078125) + 3.141590118408203125)) * _2815;
                        _2663 = (_2830 * _2778.x) + _2736;
                        _2664 = (_2830 * _2778.y) + _2737;
                        _2665 = (_2830 * _2778.z) + _2738;
                        _2660 = (_2861 * _2795.x) + _2733;
                        _2661 = (_2861 * _2795.y) + _2734;
                        _2662 = (_2861 * _2795.z) + _2735;
                        if (_2740 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2740;
                        }
                    }
                    frontier_phi_71_pred = _2665;
                    frontier_phi_71_pred_1 = _2664;
                    frontier_phi_71_pred_2 = _2663;
                    frontier_phi_71_pred_3 = _2662;
                    frontier_phi_71_pred_4 = _2661;
                    frontier_phi_71_pred_5 = _2660;
                }
                _2439 = frontier_phi_71_pred;
                _2437 = frontier_phi_71_pred_1;
                _2435 = frontier_phi_71_pred_2;
                _2433 = frontier_phi_71_pred_3;
                _2431 = frontier_phi_71_pred_4;
                _2429 = frontier_phi_71_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2429;
                    _2589 = _2431;
                    _2590 = _2433;
                    _2591 = _2435;
                    _2592 = _2437;
                    _2593 = _2439;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
        }
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.z;
        uint _2445 = (_2443 >> 8u) & 15u;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((4294967295u << _2445) & _2310) == 0u)
        {
            _2559 = _2428;
            _2561 = _2430;
            _2563 = _2432;
            _2565 = _2434;
            _2567 = _2436;
            _2569 = _2438;
        }
        else
        {
            float _2584 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2445 < ((_2443 >> 12u) & 15u))
            {
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2716 = _2428;
                float _2717 = _2430;
                float _2718 = _2432;
                float _2719 = _2434;
                float _2720 = _2436;
                float _2721 = _2438;
                uint _2722 = _2445;
                uint _2731;
                bool _2732;
                for (;;)
                {
                    _2731 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                    _2732 = _2731 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2732)
                    {
                        frontier_phi_82_pred = _2721;
                        frontier_phi_82_pred_1 = _2720;
                        frontier_phi_82_pred_2 = _2719;
                        frontier_phi_82_pred_3 = _2718;
                        frontier_phi_82_pred_4 = _2717;
                        frontier_phi_82_pred_5 = _2716;
                    }
                    else
                    {
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _2888 = _2716;
                        float _2889 = _2717;
                        float _2890 = _2718;
                        float _2891 = _2719;
                        float _2892 = _2720;
                        float _2893 = _2721;
                        uint _2894 = _2731;
                        uint _2895;
                        vec4 _2920;
                        float _2921;
                        vec4 _2936;
                        vec3 _2948;
                        vec4 _2964;
                        vec4 _2980;
                        float _3027;
                        bool _3028;
                        for (;;)
                        {
                            uint _2905 = ((_2722 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2894));
                            _2895 = (_2894 + 4294967295u) & _2894;
                            uint _2907 = _2905 * 40u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            _2921 = _2920.w;
                            uint _2923 = (_2905 * 40u) + 4u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2905 * 40u) + 8u;
                            _2948 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x));
                            uint _2951 = (_2905 * 40u) + 16u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2967 = (_2905 * 40u) + 20u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2983 = (_2905 * 40u) + 24u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _3002 = (_2905 * 40u) + 28u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3027 = fma(_1496, _3015.z, fma(_1495, _3015.y, _3015.x * _1494)) + _3015.w;
                            _3028 = !((fma(_1496, _2996.z, fma(_1495, _2996.y, _2996.x * _1494)) + _2996.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3028)
                            {
                                float _3055 = _2920.x - _1494;
                                float _3056 = _2920.y - _1495;
                                float _3057 = _2920.z - _1496;
                                float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                                float _3061 = inversesqrt(_3058);
                                float _3062 = _3061 * _3055;
                                float _3063 = _3061 * _3056;
                                float _3064 = _3061 * _3057;
                                float _3068 = 1.0 - (_3058 / (_2921 * _2921));
                                float _4059 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3073 = sqrt(_3058) * _2936.w;
                                float _3075 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                                float _3076 = _3075 * _3075;
                                float _3077 = 1.0 - _3076;
                                float _3079 = (_3077 * dot(vec3(_3062, _3063, _3064), vec3(_374, _377, _380))) + _3076;
                                float _3082 = _3073 * _3073;
                                float _3086 = (fma(_1496, _2964.z, fma(_1495, _2964.y, _2964.x * _1494)) + _2964.w) / _3027;
                                float _3087 = (fma(_1496, _2980.z, fma(_1495, _2980.y, _2980.x * _1494)) + _2980.w) / _3027;
                                float _3091 = 1.0 - dot(vec2(_3086, _3087), vec2(_3086, _3087));
                                float _4075 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3093 = _3092 * (((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3069) / ((_3082 * 0.699999988079071044921875) + 1.0));
                                float _3103 = dot(vec3(_374, _377, _380), vec3((-0.0) - (_1494 * _2584), (-0.0) - (_1495 * _2584), (-0.0) - (_1496 * _2584)));
                                float _4086 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3111 = (_3077 * dot(vec3(_374, _377, _380), vec3(_3062, _3063, _3064))) + _3076;
                                float _4097 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3116 = (0.5 / (((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) + 9.9999999392252902907785028219223e-09) + _3112)) * _3112;
                                float _4108 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3123 = (_3092 * _3069) * (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 3.1415927410125732421875) / ((_3082 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3093 * _2936.z;
                                frontier_phi_88_pred_1 = _3093 * _2936.y;
                                frontier_phi_88_pred_2 = _3093 * _2936.x;
                                frontier_phi_88_pred_3 = _3123 * _2948.z;
                                frontier_phi_88_pred_4 = _3123 * _2948.y;
                                frontier_phi_88_pred_5 = _3123 * _2948.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3132 = frontier_phi_88_pred;
                            _3131 = frontier_phi_88_pred_1;
                            _3130 = frontier_phi_88_pred_2;
                            _3129 = frontier_phi_88_pred_3;
                            _3128 = frontier_phi_88_pred_4;
                            _3127 = frontier_phi_88_pred_5;
                            _2878 = _3130 + _2891;
                            _2879 = _3131 + _2892;
                            _2880 = _3132 + _2893;
                            _2875 = _3127 + _2888;
                            _2876 = _3128 + _2889;
                            _2877 = _3129 + _2890;
                            if (_2895 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2895;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2880;
                        frontier_phi_82_pred_1 = _2879;
                        frontier_phi_82_pred_2 = _2878;
                        frontier_phi_82_pred_3 = _2877;
                        frontier_phi_82_pred_4 = _2876;
                        frontier_phi_82_pred_5 = _2875;
                    }
                    _2570 = frontier_phi_82_pred;
                    _2568 = frontier_phi_82_pred_1;
                    _2566 = frontier_phi_82_pred_2;
                    _2564 = frontier_phi_82_pred_3;
                    _2562 = frontier_phi_82_pred_4;
                    _2560 = frontier_phi_82_pred_5;
                    uint _2723 = _2722 + 1u;
                    if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2716 = _2560;
                        _2717 = _2562;
                        _2718 = _2564;
                        _2719 = _2566;
                        _2720 = _2568;
                        _2721 = _2570;
                        _2722 = _2723;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2566;
                frontier_phi_63_64_ladder_1 = _2570;
                frontier_phi_63_64_ladder_2 = _2568;
                frontier_phi_63_64_ladder_3 = _2564;
                frontier_phi_63_64_ladder_4 = _2562;
                frontier_phi_63_64_ladder_5 = _2560;
            }
            else
            {
                frontier_phi_63_64_ladder = _2434;
                frontier_phi_63_64_ladder_1 = _2438;
                frontier_phi_63_64_ladder_2 = _2436;
                frontier_phi_63_64_ladder_3 = _2432;
                frontier_phi_63_64_ladder_4 = _2430;
                frontier_phi_63_64_ladder_5 = _2428;
            }
            _2559 = frontier_phi_63_64_ladder_5;
            _2561 = frontier_phi_63_64_ladder_4;
            _2563 = frontier_phi_63_64_ladder_3;
            _2565 = frontier_phi_63_64_ladder;
            _2567 = frontier_phi_63_64_ladder_2;
            _2569 = frontier_phi_63_64_ladder_1;
        }
        float _2574 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
        _2323 = (_2574 * _2565) + _1962;
        _2325 = (_2574 * _2567) + _1964;
        _2327 = (_2574 * _2569) + _1966;
        _2329 = ((_2559 * 0.039999999105930328369140625) * _2574) + _2204;
        _2331 = ((_2561 * 0.039999999105930328369140625) * _2574) + _2206;
        _2333 = ((_2563 * 0.039999999105930328369140625) * _2574) + _2208;
    }
    else
    {
        _2323 = _1962;
        _2325 = _1964;
        _2327 = _1966;
        _2329 = _2204;
        _2331 = _2206;
        _2333 = _2208;
    }
    uint _2339 = _394 + uint(cbMatDynParam._m0[0u].w);
    float _2348 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _239.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2339].x;
    float _2352 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _239.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2339].y;
    float _2356 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _239.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2339].z;
    float _4124 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _4135 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _4146 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _2373 = (((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2323 + ((isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))) * _418))) + ((_2329 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + _2348;
    float _2375 = (_2352 + ((_2331 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2325 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _418)));
    float _2377 = (_2356 + ((_2333 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2327 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _418)));
    float _2378 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2379 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2380 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2386 = cbMtdParam._m0[2u].x * _2348;
    float _2387 = cbMtdParam._m0[2u].y * _2352;
    float _2388 = cbMtdParam._m0[2u].z * _2356;
    float _4172 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2390 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    uint _2391 = _393 + 6u;
    float _2399 = _353 / cbSceneParam._m0[86u].x;
    float _2400 = _354 / cbSceneParam._m0[86u].y;
    vec4 _2414 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, (log2((isnan(cbSceneParam._m0[77u].w) ? _274 : (isnan(_274) ? cbSceneParam._m0[77u].w : min(_274, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2416 = _2414.x;
    float _2417 = _2414.y;
    float _2418 = _2414.z;
    float _2419 = _2414.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_274 > cbSceneParam._m0[78u].w)
    {
        float _2453 = isnan(_274) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _274 : min(cbSceneParam._m0[80u].w, _274));
        float _2454 = _2453 / _274;
        float _2465 = _2454 * _325;
        float _2466 = _326 * _2454;
        float _2467 = (-0.0) - _2466;
        float _2469 = _2454 * _327;
        float _2471 = (cbSceneParam._m0[77u].w * _2467) / _2453;
        float _2472 = _2471 + cbSceneParam._m0[79u].w;
        float _2473 = cbSceneParam._m0[79u].w - _2466;
        float _2479 = sqrt(((_2465 * _2465) + (_2466 * _2466)) + (_2469 * _2469));
        float _2482 = (1.0 - (cbSceneParam._m0[77u].w / _2453)) * _2479;
        float _2487 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2673;
        if (abs((_2467 - _2471) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2673 = ((((_2472 > 0.0) ? exp2(_2487 * _2472) : (2.0 - exp2(_2489 * _2472))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2482;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : max(_2472, _2473));
            float _2619 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : min(_2472, _2473));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2673 = ((abs(_2479 / _2467) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2487 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2487 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2489 * _2628) - exp2(_2489 * _2629)) * _2617))) + (_2482 * cbSceneParam._m0[80u].z);
        }
        vec4 _2675 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, 1.0), 0.0);
        float _2684 = exp2((_2673 * (-1.44269502162933349609375)) * (1.0 - _2675.w));
        float _2685 = log2(_2684);
        float _2701 = log2(_2419);
        _2491 = (exp2(_2701 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].x)) * _2675.x) / cbSceneParam._m0[78u].x)) + _2416;
        _2493 = (exp2(_2701 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].y)) * _2675.y) / cbSceneParam._m0[78u].y)) + _2417;
        _2495 = (exp2(_2701 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].z)) * _2675.z) / cbSceneParam._m0[78u].z)) + _2418;
        _2497 = _2684 * _2419;
    }
    else
    {
        _2491 = _2416;
        _2493 = _2417;
        _2495 = _2418;
        _2497 = _2419;
    }
    bool _2711;
    vec4 _2506;
    vec4 _2529;
    float _2531;
    float _2535;
    float _2536;
    float _2537;
    float _2540;
    float _2543;
    float _2546;
    float _2547;
    bool _2558;
    for (;;)
    {
        _2506 = cbMatDynParam._m0[0u];
        float _2508 = roundEven(_2506.y);
        bool _2509 = _2508 == 3.0;
        float _2511 = log2(_2497);
        float _2515 = exp2(_2511 * cbSceneParam._m0[78u].x);
        float _2516 = exp2(_2511 * cbSceneParam._m0[78u].y);
        float _2517 = exp2(_2511 * cbSceneParam._m0[78u].z);
        float _2518 = _2515 * _2378;
        float _2519 = _2516 * _2379;
        float _2520 = _2517 * _2380;
        float _2527 = _341 + (-0.5);
        _2529 = cbMtdParam._m0[1u];
        _2531 = _2529.y * _2527;
        float _2534 = (_2508 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2535 = _2534 * (_2509 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
        _2536 = _2534 * (_2509 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
        _2537 = _2534 * (_2509 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2495)));
        _2540 = ((_2386 * _2390) * _2515) * _2534;
        _2543 = ((_2387 * _2390) * _2516) * _2534;
        _2546 = ((_2388 * _2390) * _2517) * _2534;
        _2547 = _2527 * 0.999000012874603271484375;
        _2558 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2558)
        {
            if ((cbInstanceData._m0[_393 + 7u].x + _2547) < 0.5)
            {
                _2711 = true;
                break;
            }
        }
        uint _2652 = _394 + uint(_2506.w);
        if ((cbInstanceData._m0[_2652].w < 1.0) && ((cbInstanceData._m0[_2652].w + _2547) < 0.5))
        {
            _2711 = true;
            break;
        }
        if ((_2531 + 1.0) < _2529.x)
        {
            _2711 = true;
            break;
        }
        _2711 = false;
        break;
    }
    float _2866;
    if (_2711)
    {
        discard_state = true;
        _2866 = 0.0;
    }
    else
    {
        _2866 = cbInstanceData._m0[_2391].w;
    }
    SV_Target.x = _2535;
    SV_Target.y = _2536;
    SV_Target.z = _2537;
    SV_Target.w = _2866;
    SV_Target_1.x = _2540;
    SV_Target_1.y = _2543;
    SV_Target_1.z = _2546;
    SV_Target_1.w = cbInstanceData._m0[_2391].w;
    discard_exit();
}


