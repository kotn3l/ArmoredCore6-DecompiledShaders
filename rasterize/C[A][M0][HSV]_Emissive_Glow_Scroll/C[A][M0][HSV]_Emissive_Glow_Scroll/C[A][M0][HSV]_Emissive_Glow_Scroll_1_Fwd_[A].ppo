#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _793;
float _3002;
float _3003;
float _3004;
float _3005;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _220 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _236 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3014 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _238 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
    float _246 = (((_238 * _238) * (3.0 - (_238 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _254 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _255 = _254 * _169;
    float _256 = _254 * _170;
    float _257 = _254 * _171;
    float _3025 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3036 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3047 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _276 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _317 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _327 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _317);
    float _328 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _317);
    float _329 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _317);
    float _333 = inversesqrt(dot(vec3(_327, _328, _329), vec3(_327, _328, _329)));
    float _334 = _327 * _333;
    float _335 = _328 * _333;
    float _336 = _329 * _333;
    vec4 _341 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _343 = _341.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _472 = sqrt(((_327 * _327) + (_328 * _328)) + (_329 * _329));
        float _478 = (cbMatDynParam._m0[5u].x * _472) + cbMatDynParam._m0[5u].y;
        float _3058 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
        float _479 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
        float _483 = (cbMatDynParam._m0[5u].z * _472) + cbMatDynParam._m0[5u].w;
        float _3069 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0))) - _479)) + _479) < ((_343 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _355 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _356 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _376 = fma(_257, cbSceneParam._m0[5u].z, fma(_256, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _255));
    float _379 = fma(_257, cbSceneParam._m0[6u].z, fma(_256, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _255));
    float _382 = fma(_257, cbSceneParam._m0[7u].z, fma(_256, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _255));
    uint _395 = uint(roundEven(NORMAL.w)) * 13u;
    uint _397 = _395 + 9u;
    uint _398 = _397 + uint(cbMatDynParam._m0[0u].w);
    float _404 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0)))) * cbInstanceData._m0[_398].x;
    float _405 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0)))) * cbInstanceData._m0[_398].y;
    float _406 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0)))) * cbInstanceData._m0[_398].z;
    float _3080 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
    float _3091 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
    float _3102 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
    vec4 _418 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _355, cbSceneParam._m0[86u].y * _356));
    float _421 = _418.x * TEXCOORD.z;
    float _422 = dot(vec3(_255, _256, _257), vec3(_334, _335, _336));
    float _425 = _422 * 2.0;
    float _429 = (_425 * _255) - _334;
    float _430 = (_425 * _256) - _335;
    float _431 = (_425 * _257) - _336;
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _792;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _517 = fma(_461, cbModelParam._m0[26u].z, fma(_457, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _453));
        float _521 = fma(_461, cbModelParam._m0[27u].z, fma(_457, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _453));
        float _525 = fma(_461, cbModelParam._m0[28u].z, fma(_457, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _453));
        float _550 = _453 + _255;
        float _551 = _457 + _256;
        float _552 = _461 + _257;
        float _562 = fma(_552, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550)) - _517;
        float _563 = fma(_552, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550)) - _521;
        float _564 = fma(_552, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550)) - _525;
        float _568 = inversesqrt(dot(vec3(_562, _563, _564), vec3(_562, _563, _564)));
        float _581 = ((_568 * _562) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_517 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _582 = ((_568 * _563) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_521 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _583 = ((_568 * _564) / cbModelParam._m0[34u].z) + ((((((_525 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _586 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        float _620 = exp2((_586.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_586.x + (-0.5));
        float _622 = _620 * (_586.y + (-0.5));
        float _623 = _620 * (_586.z + (-0.5));
        float _630 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_593.x + (-0.5));
        float _632 = _630 * (_593.y + (-0.5));
        float _633 = _630 * (_593.z + (-0.5));
        float _640 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_600.x + (-0.5));
        float _642 = _640 * (_600.y + (-0.5));
        float _643 = _640 * (_600.z + (-0.5));
        float _650 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_607.x + (-0.5));
        float _652 = _650 * (_607.y + (-0.5));
        float _653 = _650 * (_607.z + (-0.5));
        float _654 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _655 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _657 = _621 * 0.5;
        float _658 = _631 * 0.5;
        float _659 = _641 * 0.5;
        float _660 = dot(vec3(_657, _658, _659), vec3(_657, _658, _659));
        float _665 = (_660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_660);
        float _674 = (dot(vec3(_255, _256, _257), vec3(_665 * _657, _665 * _658, _665 * _659)) + 1.0) * 0.5;
        float _3128 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _684 = sqrt(((_658 * _658) + (_657 * _657)) + (_659 * _659)) / (_654 + 9.9999997473787516355514526367188e-06);
        float _3139 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _686 = _685 * 2.0;
        float _690 = (1.0 - _685) / (_685 + 1.0);
        float _3150 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _700 = ((((1.0 - _691) * (_686 + 2.0)) * exp2(log2(isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0))) * (_686 + 1.0))) + _691) * _654;
        float _701 = _622 * 0.5;
        float _702 = _632 * 0.5;
        float _703 = _642 * 0.5;
        float _704 = dot(vec3(_701, _702, _703), vec3(_701, _702, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _717 = (dot(vec3(_255, _256, _257), vec3(_709 * _701, _709 * _702, _709 * _703)) + 1.0) * 0.5;
        float _3161 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _726 = sqrt(((_702 * _702) + (_701 * _701)) + (_703 * _703)) / (_655 + 9.9999997473787516355514526367188e-06);
        float _3172 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3183 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0))) * (_728 + 1.0))) + _733) * _655;
        float _743 = _623 * 0.5;
        float _744 = _633 * 0.5;
        float _745 = _643 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _759 = (dot(vec3(_255, _256, _257), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3194 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _768 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_656 + 9.9999997473787516355514526367188e-06);
        float _3205 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3216 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0))) * (_770 + 1.0))) + _775) * _656;
        _792 = _623;
        _794 = _622;
        _795 = _621;
        _796 = _633;
        _797 = _632;
        _798 = _631;
        _799 = _643;
        _800 = _642;
        _801 = _641;
        _802 = _656;
        _803 = _655;
        _804 = _654;
        _805 = cbModelParam._m0[36u].z * (isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0)));
        _806 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
        _807 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
    }
    else
    {
        _792 = _793;
        _794 = _793;
        _795 = _793;
        _796 = _793;
        _797 = _793;
        _798 = _793;
        _799 = _793;
        _800 = _793;
        _801 = _793;
        _802 = _793;
        _803 = _793;
        _804 = _793;
        _805 = 0.0;
        _806 = 0.0;
        _807 = 0.0;
    }
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _836 = fma(_461, cbModelParam._m0[30u].z, fma(_457, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _453));
        float _840 = fma(_461, cbModelParam._m0[31u].z, fma(_457, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _453));
        float _844 = fma(_461, cbModelParam._m0[32u].z, fma(_457, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _453));
        float _867 = _453 + _255;
        float _868 = _457 + _256;
        float _869 = _461 + _257;
        float _879 = fma(_869, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867)) - _836;
        float _880 = fma(_869, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867)) - _840;
        float _881 = fma(_869, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867)) - _844;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_836 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_840 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[35u].z) + ((((((_844 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _935 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_902.x + (-0.5));
        float _937 = _935 * (_902.y + (-0.5));
        float _938 = _935 * (_902.z + (-0.5));
        float _945 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_909.x + (-0.5));
        float _947 = _945 * (_909.y + (-0.5));
        float _948 = _945 * (_909.z + (-0.5));
        float _955 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_916.x + (-0.5));
        float _957 = _955 * (_916.y + (-0.5));
        float _958 = _955 * (_916.z + (-0.5));
        float _965 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_923.x + (-0.5));
        float _967 = _965 * (_923.y + (-0.5));
        float _968 = _965 * (_923.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_255, _256, _257), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3257 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3268 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3279 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_999 + 1.0))) + _1004) * _969;
        float _1014 = _937 * 0.5;
        float _1015 = _947 * 0.5;
        float _1016 = _957 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_255, _256, _257), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3290 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3301 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3312 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * (_1041 + 1.0))) + _1046) * _970;
        float _1056 = _938 * 0.5;
        float _1057 = _948 * 0.5;
        float _1058 = _958 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_255, _256, _257), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3345 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_1083 + 1.0))) + _1088) * _971;
        _1105 = _938;
        _1106 = _937;
        _1107 = _936;
        _1108 = _948;
        _1109 = _947;
        _1110 = _946;
        _1111 = _958;
        _1112 = _957;
        _1113 = _956;
        _1114 = _971;
        _1115 = _970;
        _1116 = _969;
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _793;
        _1106 = _793;
        _1107 = _793;
        _1108 = _793;
        _1109 = _793;
        _1110 = _793;
        _1111 = _793;
        _1112 = _793;
        _1113 = _793;
        _1114 = _793;
        _1115 = _793;
        _1116 = _793;
        _1117 = 0.0;
        _1118 = 0.0;
        _1119 = 0.0;
    }
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _805)) + _805;
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _806)) + _806;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _807)) + _807;
    float _1152 = fma(_1131, cbSceneParam._m0[89u].z, fma(_1130, cbSceneParam._m0[89u].y, _1129 * cbSceneParam._m0[89u].x));
    float _1155 = fma(_1131, cbSceneParam._m0[90u].z, fma(_1130, cbSceneParam._m0[90u].y, _1129 * cbSceneParam._m0[90u].x));
    float _1158 = fma(_1131, cbSceneParam._m0[91u].z, fma(_1130, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1129));
    float _1173 = _429 * 0.5;
    float _1174 = _430 * 0.5;
    float _1175 = _431 * 0.5;
    float _1176 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1179 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1182 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1216;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1189 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_792, _796, _799, _802));
        float _1193 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_794, _797, _800, _803));
        float _1197 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_795, _798, _801, _804));
        float _1204 = dot(vec4(cbModelParam._m0[39u]), vec4(_1173, _1174, _1175, 1.0));
        _1216 = dot(vec3(isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1216 = 1.0;
    }
    float _1227;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1218 = dot(vec4(cbModelParam._m0[40u]), vec4(_1173, _1174, _1175, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1218) ? 0.0 : (isnan(0.0) ? _1218 : max(0.0, _1218))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1231 = (_1227 * cbModelParam._m0[1u].x) + (_1216 * (1.0 - cbModelParam._m0[1u].x));
    float _1240 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1321;
    float _1323;
    float _1325;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1288 = fma(_461, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453)) + cbModelParam._m0[13u].w;
        float _1292 = fma(_461, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453)) + cbModelParam._m0[14u].w;
        float _1296 = fma(_461, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453)) + cbModelParam._m0[15u].w;
        float _1299 = fma(_431, cbModelParam._m0[13u].z, fma(_430, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _429));
        float _1302 = fma(_431, cbModelParam._m0[14u].z, fma(_430, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _429));
        float _1305 = fma(_431, cbModelParam._m0[15u].z, fma(_430, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _429));
        float _1331;
        if (_1299 > 0.0)
        {
            _1331 = abs((1.0 - _1288) / _1299);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1288 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1331 = frontier_phi_17_15_ladder;
        }
        float _1536;
        if (_1302 > 0.0)
        {
            _1536 = abs((1.0 - _1292) / _1302);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1292 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1536 = frontier_phi_26_22_ladder;
        }
        float _1725;
        if (_1305 > 0.0)
        {
            _1725 = abs((1.0 - _1296) / _1305);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1296 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1725 = frontier_phi_38_33_ladder;
        }
        float _1727 = isnan(_1536) ? _1331 : (isnan(_1331) ? _1536 : min(_1331, _1536));
        float _1728 = isnan(_1725) ? _1727 : (isnan(_1727) ? _1725 : min(_1727, _1725));
        float _1732 = (_1728 * _1299) + _1288;
        float _1733 = (_1728 * _1302) + _1292;
        float _1734 = (_1728 * _1305) + _1296;
        float _1735 = _1728 * 9.9999997473787516355514526367188e-05;
        float _1737 = (-1.0) - _1735;
        float _1739 = _1735 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1734 > _1739) || ((_1734 < _1737) || ((_1733 > _1739) || ((_1733 < _1737) || ((_1732 < _1737) || (_1732 > _1739))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1734, cbModelParam._m0[9u].z, fma(_1733, cbModelParam._m0[9u].y, _1732 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1734, cbModelParam._m0[10u].z, fma(_1733, cbModelParam._m0[10u].y, _1732 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1734, cbModelParam._m0[11u].z, fma(_1733, cbModelParam._m0[11u].y, _1732 * cbModelParam._m0[11u].x))), _1240);
            frontier_phi_16_38_ladder = _1831.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1831.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1831.x * cbModelParam._m0[1u].y;
        }
        _1321 = frontier_phi_16_38_ladder_2;
        _1323 = frontier_phi_16_38_ladder_1;
        _1325 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_429, _430, _431), _1240);
        _1321 = _1309.x * cbModelParam._m0[1u].y;
        _1323 = _1309.y * cbModelParam._m0[1u].y;
        _1325 = _1309.z * cbModelParam._m0[1u].y;
    }
    float _1328 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1384 = fma(_461, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453)) + cbModelParam._m0[21u].w;
        float _1388 = fma(_461, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453)) + cbModelParam._m0[22u].w;
        float _1392 = fma(_461, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453)) + cbModelParam._m0[23u].w;
        float _1395 = fma(_431, cbModelParam._m0[21u].z, fma(_430, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _429));
        float _1398 = fma(_431, cbModelParam._m0[22u].z, fma(_430, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _429));
        float _1401 = fma(_431, cbModelParam._m0[23u].z, fma(_430, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _429));
        float _1541;
        if (_1395 > 0.0)
        {
            _1541 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1541 = frontier_phi_28_24_ladder;
        }
        float _1752;
        if (_1398 > 0.0)
        {
            _1752 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1752 = frontier_phi_40_35_ladder;
        }
        float _1903;
        if (_1401 > 0.0)
        {
            _1903 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1903 = frontier_phi_49_46_ladder;
        }
        float _1905 = isnan(_1752) ? _1541 : (isnan(_1541) ? _1752 : min(_1541, _1752));
        float _1906 = isnan(_1903) ? _1905 : (isnan(_1905) ? _1903 : min(_1905, _1903));
        float _1910 = (_1906 * _1395) + _1384;
        float _1911 = (_1906 * _1398) + _1388;
        float _1912 = (_1906 * _1401) + _1392;
        float _1913 = _1906 * 9.9999997473787516355514526367188e-05;
        float _1914 = (-1.0) - _1913;
        float _1916 = _1913 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1912 > _1916) || ((_1912 < _1914) || ((_1911 > _1916) || ((_1911 < _1914) || ((_1910 < _1914) || (_1910 > _1916))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1912, cbModelParam._m0[17u].z, fma(_1911, cbModelParam._m0[17u].y, _1910 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1912, cbModelParam._m0[18u].z, fma(_1911, cbModelParam._m0[18u].y, _1910 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1912, cbModelParam._m0[19u].z, fma(_1911, cbModelParam._m0[19u].y, _1910 * cbModelParam._m0[19u].x))), _1328);
            frontier_phi_25_49_ladder = _2152.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2152.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2152.x * cbModelParam._m0[1u].z;
        }
        _1420 = frontier_phi_25_49_ladder_2;
        _1422 = frontier_phi_25_49_ladder_1;
        _1424 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_429, _430, _431), _1328);
        _1420 = _1404.x * cbModelParam._m0[1u].z;
        _1422 = _1404.y * cbModelParam._m0[1u].z;
        _1424 = _1404.z * cbModelParam._m0[1u].z;
    }
    float _1436 = _421 * 0.01200000010430812835693359375;
    float _1438 = _1436 * ((cbModelParam._m0[1u].w * (_1420 - _1321)) + _1321);
    float _1439 = _1436 * ((cbModelParam._m0[1u].w * (_1422 - _1323)) + _1323);
    float _1440 = _1436 * ((cbModelParam._m0[1u].w * (_1424 - _1325)) + _1325);
    float _1443 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, _1438 * cbSceneParam._m0[91u].x));
    uvec4 _1459 = floatBitsToUint(cbInstanceData._m0[_395 + 5u]);
    uint _1461 = _1459.x * 14u;
    uint _1462 = _1461 + 13u;
    float _1469 = _421 + (-1.0);
    float _1474 = (cbLight._m0[_1462].x * _1469) + 1.0;
    float _1475 = (cbLight._m0[_1462].y * _1469) + 1.0;
    float _1476 = (cbLight._m0[_1462].z * _1469) + 1.0;
    float _1477 = (cbLight._m0[_1462].w * _1469) + 1.0;
    uint _1478 = _1461 + 5u;
    float _1484 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
    uint _1488 = _1461 + 4u;
    float _1495 = isnan(1.0) ? _1474 : (isnan(_1474) ? 1.0 : min(_1474, 1.0));
    uint _1499 = _1461 | 1u;
    float _1510 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_255, _256, _257));
    float _1513 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_255, _256, _257));
    float _3481 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
    float _3492 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1518 = (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * 0.3183098733425140380859375;
    float _1520 = (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.3183098733425140380859375;
    float _1527 = ((cbLight._m0[_1478].x * _1484) * _1520) + ((cbLight._m0[_1488].x * _1495) * _1518);
    float _1528 = ((_1484 * cbLight._m0[_1478].y) * _1520) + ((_1495 * cbLight._m0[_1488].y) * _1518);
    float _1529 = ((_1484 * cbLight._m0[_1478].z) * _1520) + ((_1495 * cbLight._m0[_1488].z) * _1518);
    uvec4 _1533 = floatBitsToUint(cbLight._m0[_1461 + 12u]);
    bool _1535 = _1533.x == 0u;
    float _1546;
    float _1548;
    float _1550;
    if (_1535)
    {
        _1546 = _1527;
        _1548 = _1528;
        _1550 = _1529;
    }
    else
    {
        uint _1554 = _1461 + 6u;
        float _1570 = (dot(vec3(cbLight._m0[_1461 + 2u].xyz), vec3(_255, _256, _257)) * 0.5) + 0.5;
        float _1571 = _1570 * _1570;
        float _3503 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1573 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1546 = (((cbLight._m0[_1554].x * 0.3183098733425140380859375) * _1572) * _1573) + _1527;
        _1548 = (((cbLight._m0[_1554].y * 0.3183098733425140380859375) * _1572) * _1573) + _1528;
        _1550 = (((cbLight._m0[_1554].z * 0.3183098733425140380859375) * _1572) * _1573) + _1529;
    }
    bool _1553 = _1533.y == 0u;
    float _1591;
    float _1593;
    float _1595;
    if (_1553)
    {
        _1591 = _1546;
        _1593 = _1548;
        _1595 = _1550;
    }
    else
    {
        uint _1696 = _1461 + 7u;
        float _1712 = (dot(vec3(cbLight._m0[_1461 + 3u].xyz), vec3(_255, _256, _257)) * 0.5) + 0.5;
        float _1713 = _1712 * _1712;
        float _3519 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1715 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1591 = (((cbLight._m0[_1696].x * 0.3183098733425140380859375) * _1714) * _1715) + _1546;
        _1593 = (((cbLight._m0[_1696].y * 0.3183098733425140380859375) * _1714) * _1715) + _1548;
        _1595 = (((cbLight._m0[_1696].z * 0.3183098733425140380859375) * _1714) * _1715) + _1550;
    }
    uint _1597 = _1461 + 8u;
    float _1603 = cbLight._m0[_1461].x + _334;
    float _1604 = cbLight._m0[_1461].y + _335;
    float _1605 = cbLight._m0[_1461].z + _336;
    float _1609 = inversesqrt(dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605)));
    float _1613 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1461].xyz));
    float _3535 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1616 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _1617 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _1618 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_1603 * _1609, _1604 * _1609, _1605 * _1609));
    float _3557 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1629 = (exp2(log2(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1635 = (0.5 / ((_1616 + 9.9999999392252902907785028219223e-09) + _1617)) * _1616;
    float _3568 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1637 = (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.31831014156341552734375;
    uint _1648 = _1461 + 9u;
    float _1654 = cbLight._m0[_1499].x + _334;
    float _1655 = cbLight._m0[_1499].y + _335;
    float _1656 = cbLight._m0[_1499].z + _336;
    float _1660 = inversesqrt(dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656)));
    float _1664 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1499].xyz));
    float _3579 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1667 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _1668 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_1654 * _1660, _1655 * _1660, _1656 * _1660));
    float _3590 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1677 = (exp2(log2(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1681 = (0.5 / ((_1667 + 9.9999999392252902907785028219223e-09) + _1617)) * _1667;
    float _3601 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1683 = (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * 0.31831014156341552734375;
    float _1693 = (((_1677 * cbLight._m0[_1648].x) * _1683) * _1484) + (((_1629 * cbLight._m0[_1597].x) * _1637) * _1495);
    float _1694 = (((_1677 * cbLight._m0[_1648].y) * _1683) * _1484) + (((_1629 * cbLight._m0[_1597].y) * _1637) * _1495);
    float _1695 = (((_1677 * cbLight._m0[_1648].z) * _1683) * _1484) + (((_1629 * cbLight._m0[_1597].z) * _1637) * _1495);
    float _1757;
    float _1759;
    float _1761;
    if (_1535)
    {
        _1757 = _1693;
        _1759 = _1694;
        _1761 = _1695;
    }
    else
    {
        uint _1763 = _1461 + 10u;
        uint _1769 = _1461 + 2u;
        float _1775 = cbLight._m0[_1769].x + _334;
        float _1776 = cbLight._m0[_1769].y + _335;
        float _1777 = cbLight._m0[_1769].z + _336;
        float _1781 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
        float _1785 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1769].xyz));
        float _3612 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1788 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1789 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_1775 * _1781, _1776 * _1781, _1777 * _1781));
        float _3623 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = (exp2(log2(1.0 - (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1802 = (0.5 / ((_1788 + 9.9999999392252902907785028219223e-09) + _1617)) * _1788;
        float _3634 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1804 = (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.31831014156341552734375;
        float _1805 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1757 = (((_1798 * cbLight._m0[_1763].x) * _1804) * _1805) + _1693;
        _1759 = (((_1798 * cbLight._m0[_1763].y) * _1804) * _1805) + _1694;
        _1761 = (((_1798 * cbLight._m0[_1763].z) * _1804) * _1805) + _1695;
    }
    float _1840;
    float _1842;
    float _1844;
    if (_1553)
    {
        _1840 = _1757;
        _1842 = _1759;
        _1844 = _1761;
    }
    else
    {
        uint _1851 = _1461 + 11u;
        uint _1857 = _1461 + 3u;
        float _1863 = cbLight._m0[_1857].x + _334;
        float _1864 = cbLight._m0[_1857].y + _335;
        float _1865 = cbLight._m0[_1857].z + _336;
        float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
        float _1873 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1857].xyz));
        float _3650 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1876 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1877 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_1863 * _1869, _1864 * _1869, _1865 * _1869));
        float _3661 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1886 = (exp2(log2(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1890 = (0.5 / ((_1876 + 9.9999999392252902907785028219223e-09) + _1617)) * _1876;
        float _3672 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1892 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.31831014156341552734375;
        float _1893 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1840 = (((_1886 * cbLight._m0[_1851].x) * _1892) * _1893) + _1757;
        _1842 = (((_1886 * cbLight._m0[_1851].y) * _1892) * _1893) + _1759;
        _1844 = (((_1886 * cbLight._m0[_1851].z) * _1892) * _1893) + _1761;
    }
    float _2028;
    float _2030;
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    if (_1459.y == 0u)
    {
        float _1968 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1969 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1968;
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1968;
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1968;
        uvec4 _1983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1984 = _1983.x;
        uint _1995 = uint((float(_1983.y) * floor(float(uint(cbSceneParam._m0[85u].y * _356) / _1984))) + floor(float(uint(cbSceneParam._m0[85u].x * _355) / _1984)));
        float _2005 = (log2(_1971 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2006 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        uint _2009 = uint(isnan(14.0) ? _2006 : (isnan(_2006) ? 14.0 : min(_2006, 14.0)));
        uvec4 _2014 = texelFetch(g_lightClusterGridBuffer, int(((_2009 << 2u) + (_1995 << 6u)) >> 2u));
        uint _2015 = _2014.x;
        uint _2016 = _1983.z;
        float _2157;
        float _2159;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        if (((((1u << ((_2016 >> 4u) & 15u)) + 4294967295u) & _2015) == 0u) || ((_2016 & 240u) == 0u))
        {
            _2157 = 0.0;
            _2159 = 0.0;
            _2161 = 0.0;
            _2163 = 0.0;
            _2165 = 0.0;
            _2167 = 0.0;
        }
        else
        {
            float _2158;
            float _2160;
            float _2162;
            float _2164;
            float _2166;
            float _2168;
            float _2316 = 0.0;
            float _2317 = 0.0;
            float _2318 = 0.0;
            float _2319 = 0.0;
            float _2320 = 0.0;
            float _2321 = 0.0;
            uint _2322 = 0u;
            uint _2331;
            bool _2332;
            for (;;)
            {
                _2331 = texelFetch(g_lightClassification, int((((_2009 << 5u) + (_1995 << 9u)) + (_2322 << 2u)) >> 2u)).x;
                _2332 = _2331 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2332)
                {
                    frontier_phi_66_pred = _2316;
                    frontier_phi_66_pred_1 = _2321;
                    frontier_phi_66_pred_2 = _2320;
                    frontier_phi_66_pred_3 = _2319;
                    frontier_phi_66_pred_4 = _2318;
                    frontier_phi_66_pred_5 = _2317;
                }
                else
                {
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    uint _2467;
                    _2461 = _2316;
                    _2462 = _2317;
                    _2463 = _2318;
                    _2464 = _2319;
                    _2465 = _2320;
                    _2466 = _2321;
                    _2467 = _2331;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    for (;;)
                    {
                        uint _2471 = uint(findLSB(_2467)) + (_2322 << 5u);
                        uint _2468 = (_2467 + 4294967295u) & _2467;
                        uint _2473 = _2471 * 48u;
                        vec4 _2487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 3u)).x));
                        uint _2493 = (_2471 * 48u) + 4u;
                        vec4 _2506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2493)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 3u)).x));
                        uint _2512 = (_2471 * 48u) + 8u;
                        vec3 _2523 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2512)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 2u)).x));
                        float _2527 = _2487.x - _1969;
                        float _2528 = _2487.y - _1970;
                        float _2529 = _2487.z - _1971;
                        float _2530 = dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529));
                        float _2533 = inversesqrt(_2530);
                        float _2542 = 1.0 - (_2530 * _2487.w);
                        float _3698 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
                        float _2543 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                        float _2544 = sqrt(_2530) * _2506.w;
                        float _2547 = 1.39999997615814208984375 / (_2544 + 1.39999997615814208984375);
                        float _2548 = _2547 * _2547;
                        float _2551 = ((1.0 - _2548) * dot(vec3(_376, _379, _382), vec3(_2533 * _2527, _2533 * _2528, _2533 * _2529))) + _2548;
                        float _2554 = _2544 * _2544;
                        float _2558 = ((isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0))) * _2543) / ((_2554 * 0.699999988079071044921875) + 1.0);
                        float _2562 = (-0.0) - _1969;
                        float _2563 = (-0.0) - _1970;
                        float _2564 = (-0.0) - _1971;
                        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
                        float _2572 = dot(vec3(_376, _379, _382), vec3(_2568 * _2562, _2568 * _2563, _2568 * _2564));
                        float _3714 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
                        float _3725 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
                        float _2576 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
                        float _2580 = (0.5 / (((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) + 9.9999999392252902907785028219223e-09) + _2576)) * _2576;
                        float _3736 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2589 = (((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 3.1415927410125732421875) / ((_2554 * 2.1991131305694580078125) + 3.141590118408203125)) * _2543;
                        _2391 = (_2558 * _2506.x) + _2464;
                        _2392 = (_2558 * _2506.y) + _2465;
                        _2393 = (_2558 * _2506.z) + _2466;
                        _2388 = (_2589 * _2523.x) + _2461;
                        _2389 = (_2589 * _2523.y) + _2462;
                        _2390 = (_2589 * _2523.z) + _2463;
                        if (_2468 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2461 = _2388;
                            _2462 = _2389;
                            _2463 = _2390;
                            _2464 = _2391;
                            _2465 = _2392;
                            _2466 = _2393;
                            _2467 = _2468;
                        }
                    }
                    frontier_phi_66_pred = _2388;
                    frontier_phi_66_pred_1 = _2393;
                    frontier_phi_66_pred_2 = _2392;
                    frontier_phi_66_pred_3 = _2391;
                    frontier_phi_66_pred_4 = _2390;
                    frontier_phi_66_pred_5 = _2389;
                }
                _2158 = frontier_phi_66_pred;
                _2168 = frontier_phi_66_pred_1;
                _2166 = frontier_phi_66_pred_2;
                _2164 = frontier_phi_66_pred_3;
                _2162 = frontier_phi_66_pred_4;
                _2160 = frontier_phi_66_pred_5;
                uint _2323 = _2322 + 1u;
                if (_2323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2316 = _2158;
                    _2317 = _2160;
                    _2318 = _2162;
                    _2319 = _2164;
                    _2320 = _2166;
                    _2321 = _2168;
                    _2322 = _2323;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2157 = _2158;
            _2159 = _2160;
            _2161 = _2162;
            _2163 = _2164;
            _2165 = _2166;
            _2167 = _2168;
        }
        uvec4 _2171 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2172 = _2171.z;
        uint _2174 = (_2172 >> 8u) & 15u;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        if (((4294967295u << _2174) & _2015) == 0u)
        {
            _2287 = _2157;
            _2289 = _2159;
            _2291 = _2161;
            _2293 = _2163;
            _2295 = _2165;
            _2297 = _2167;
        }
        else
        {
            float _2312 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2174 < ((_2172 >> 12u) & 15u))
            {
                float _2288;
                float _2290;
                float _2292;
                float _2294;
                float _2296;
                float _2298;
                float _2444 = _2157;
                float _2445 = _2159;
                float _2446 = _2161;
                float _2447 = _2163;
                float _2448 = _2165;
                float _2449 = _2167;
                uint _2450 = _2174;
                uint _2459;
                bool _2460;
                for (;;)
                {
                    _2459 = texelFetch(g_lightClassification, int((((_2009 << 5u) + (_1995 << 9u)) + (_2450 << 2u)) >> 2u)).x;
                    _2460 = _2459 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2460)
                    {
                        frontier_phi_77_pred = _2449;
                        frontier_phi_77_pred_1 = _2448;
                        frontier_phi_77_pred_2 = _2447;
                        frontier_phi_77_pred_3 = _2446;
                        frontier_phi_77_pred_4 = _2445;
                        frontier_phi_77_pred_5 = _2444;
                    }
                    else
                    {
                        float _2603;
                        float _2604;
                        float _2605;
                        float _2606;
                        float _2607;
                        float _2608;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2616 = _2444;
                        float _2617 = _2445;
                        float _2618 = _2446;
                        float _2619 = _2447;
                        float _2620 = _2448;
                        float _2621 = _2449;
                        uint _2622 = _2459;
                        uint _2623;
                        vec4 _2648;
                        float _2649;
                        vec4 _2664;
                        vec3 _2676;
                        vec4 _2692;
                        vec4 _2708;
                        float _2755;
                        bool _2756;
                        for (;;)
                        {
                            uint _2633 = ((_2450 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2622));
                            _2623 = (_2622 + 4294967295u) & _2622;
                            uint _2635 = _2633 * 40u;
                            _2648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 3u)).x));
                            _2649 = _2648.w;
                            uint _2651 = (_2633 * 40u) + 4u;
                            _2664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 3u)).x));
                            uint _2666 = (_2633 * 40u) + 8u;
                            _2676 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x));
                            uint _2679 = (_2633 * 40u) + 16u;
                            _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            uint _2695 = (_2633 * 40u) + 20u;
                            _2708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 3u)).x));
                            uint _2711 = (_2633 * 40u) + 24u;
                            vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 3u)).x));
                            uint _2730 = (_2633 * 40u) + 28u;
                            vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            _2755 = fma(_1971, _2743.z, fma(_1970, _2743.y, _2743.x * _1969)) + _2743.w;
                            _2756 = !((fma(_1971, _2724.z, fma(_1970, _2724.y, _2724.x * _1969)) + _2724.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2756)
                            {
                                float _2783 = _2648.x - _1969;
                                float _2784 = _2648.y - _1970;
                                float _2785 = _2648.z - _1971;
                                float _2786 = dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785));
                                float _2789 = inversesqrt(_2786);
                                float _2790 = _2789 * _2783;
                                float _2791 = _2789 * _2784;
                                float _2792 = _2789 * _2785;
                                float _2796 = 1.0 - (_2786 / (_2649 * _2649));
                                float _3747 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2797 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
                                float _2801 = sqrt(_2786) * _2664.w;
                                float _2803 = 1.39999997615814208984375 / (_2801 + 1.39999997615814208984375);
                                float _2804 = _2803 * _2803;
                                float _2805 = 1.0 - _2804;
                                float _2807 = (_2805 * dot(vec3(_2790, _2791, _2792), vec3(_376, _379, _382))) + _2804;
                                float _2810 = _2801 * _2801;
                                float _2814 = (fma(_1971, _2692.z, fma(_1970, _2692.y, _2692.x * _1969)) + _2692.w) / _2755;
                                float _2815 = (fma(_1971, _2708.z, fma(_1970, _2708.y, _2708.x * _1969)) + _2708.w) / _2755;
                                float _2819 = 1.0 - dot(vec2(_2814, _2815), vec2(_2814, _2815));
                                float _3763 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2820 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                                float _2821 = _2820 * (((isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))) * _2797) / ((_2810 * 0.699999988079071044921875) + 1.0));
                                float _2831 = dot(vec3(_376, _379, _382), vec3((-0.0) - (_1969 * _2312), (-0.0) - (_1970 * _2312), (-0.0) - (_1971 * _2312)));
                                float _3774 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2839 = (_2805 * dot(vec3(_376, _379, _382), vec3(_2790, _2791, _2792))) + _2804;
                                float _3785 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                                float _2840 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                                float _2844 = (0.5 / (((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) + 9.9999999392252902907785028219223e-09) + _2840)) * _2840;
                                float _3796 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2851 = (_2820 * _2797) * (((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 3.1415927410125732421875) / ((_2810 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2821 * _2664.y;
                                frontier_phi_83_pred_1 = _2821 * _2664.x;
                                frontier_phi_83_pred_2 = _2851 * _2676.z;
                                frontier_phi_83_pred_3 = _2851 * _2676.y;
                                frontier_phi_83_pred_4 = _2851 * _2676.x;
                                frontier_phi_83_pred_5 = _2821 * _2664.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2859 = frontier_phi_83_pred;
                            _2858 = frontier_phi_83_pred_1;
                            _2857 = frontier_phi_83_pred_2;
                            _2856 = frontier_phi_83_pred_3;
                            _2855 = frontier_phi_83_pred_4;
                            _2860 = frontier_phi_83_pred_5;
                            _2606 = _2858 + _2619;
                            _2607 = _2859 + _2620;
                            _2608 = _2860 + _2621;
                            _2603 = _2855 + _2616;
                            _2604 = _2856 + _2617;
                            _2605 = _2857 + _2618;
                            if (_2623 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2616 = _2603;
                                _2617 = _2604;
                                _2618 = _2605;
                                _2619 = _2606;
                                _2620 = _2607;
                                _2621 = _2608;
                                _2622 = _2623;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2608;
                        frontier_phi_77_pred_1 = _2607;
                        frontier_phi_77_pred_2 = _2606;
                        frontier_phi_77_pred_3 = _2605;
                        frontier_phi_77_pred_4 = _2604;
                        frontier_phi_77_pred_5 = _2603;
                    }
                    _2298 = frontier_phi_77_pred;
                    _2296 = frontier_phi_77_pred_1;
                    _2294 = frontier_phi_77_pred_2;
                    _2292 = frontier_phi_77_pred_3;
                    _2290 = frontier_phi_77_pred_4;
                    _2288 = frontier_phi_77_pred_5;
                    uint _2451 = _2450 + 1u;
                    if (_2451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2444 = _2288;
                        _2445 = _2290;
                        _2446 = _2292;
                        _2447 = _2294;
                        _2448 = _2296;
                        _2449 = _2298;
                        _2450 = _2451;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2292;
                frontier_phi_58_59_ladder_1 = _2298;
                frontier_phi_58_59_ladder_2 = _2296;
                frontier_phi_58_59_ladder_3 = _2294;
                frontier_phi_58_59_ladder_4 = _2290;
                frontier_phi_58_59_ladder_5 = _2288;
            }
            else
            {
                frontier_phi_58_59_ladder = _2161;
                frontier_phi_58_59_ladder_1 = _2167;
                frontier_phi_58_59_ladder_2 = _2165;
                frontier_phi_58_59_ladder_3 = _2163;
                frontier_phi_58_59_ladder_4 = _2159;
                frontier_phi_58_59_ladder_5 = _2157;
            }
            _2287 = frontier_phi_58_59_ladder_5;
            _2289 = frontier_phi_58_59_ladder_4;
            _2291 = frontier_phi_58_59_ladder;
            _2293 = frontier_phi_58_59_ladder_3;
            _2295 = frontier_phi_58_59_ladder_2;
            _2297 = frontier_phi_58_59_ladder_1;
        }
        float _2302 = isnan(1.0) ? _421 : (isnan(_421) ? 1.0 : min(_421, 1.0));
        _2028 = (_2302 * _2293) + _1591;
        _2030 = (_2302 * _2295) + _1593;
        _2032 = (_2302 * _2297) + _1595;
        _2034 = ((_2287 * 0.039999999105930328369140625) * _2302) + _1840;
        _2036 = ((_2289 * 0.039999999105930328369140625) * _2302) + _1842;
        _2038 = ((_2291 * 0.039999999105930328369140625) * _2302) + _1844;
    }
    else
    {
        _2028 = _1591;
        _2030 = _1593;
        _2032 = _1595;
        _2034 = _1840;
        _2036 = _1842;
        _2038 = _1844;
    }
    uint _2044 = _397 + uint(cbMatDynParam._m0[0u].w);
    float _2054 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _220.x) * cbSceneParam._m0[72u].y) * _246) * cbInstanceData._m0[_2044].x;
    float _2059 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _220.y) * cbSceneParam._m0[72u].y) * _246) * cbInstanceData._m0[_2044].y;
    float _2064 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _220.z) * cbSceneParam._m0[72u].y) * _246) * cbInstanceData._m0[_2044].z;
    float _3812 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3823 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3834 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _2081 = (((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_2028 + ((isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))) * _421))) + ((_2034 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + _2054;
    float _2083 = (_2059 + ((_2036 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_2030 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _421)));
    float _2085 = (_2064 + ((_2038 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_2032 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _421)));
    float _2086 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2087 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2088 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2094 = cbMtdParam._m0[2u].x * _2054;
    float _2095 = cbMtdParam._m0[2u].y * _2059;
    float _2096 = cbMtdParam._m0[2u].z * _2064;
    float _3860 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2098 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    uint _2099 = _395 + 6u;
    float _2107 = _355 / cbSceneParam._m0[86u].x;
    float _2108 = _356 / cbSceneParam._m0[86u].y;
    vec4 _2122 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2107, _2108, (log2((isnan(cbSceneParam._m0[77u].w) ? _276 : (isnan(_276) ? cbSceneParam._m0[77u].w : min(_276, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2124 = _2122.x;
    float _2125 = _2122.y;
    float _2126 = _2122.z;
    float _2127 = _2122.w;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    if (_276 > cbSceneParam._m0[78u].w)
    {
        float _2182 = isnan(_276) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _276 : min(cbSceneParam._m0[80u].w, _276));
        float _2183 = _2182 / _276;
        float _2194 = _2183 * _327;
        float _2195 = _328 * _2183;
        float _2196 = (-0.0) - _2195;
        float _2198 = _2183 * _329;
        float _2200 = (cbSceneParam._m0[77u].w * _2196) / _2182;
        float _2201 = _2200 + cbSceneParam._m0[79u].w;
        float _2202 = cbSceneParam._m0[79u].w - _2195;
        float _2208 = sqrt(((_2194 * _2194) + (_2195 * _2195)) + (_2198 * _2198));
        float _2211 = (1.0 - (cbSceneParam._m0[77u].w / _2182)) * _2208;
        float _2216 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2218 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2401;
        if (abs((_2196 - _2200) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2401 = ((((_2201 > 0.0) ? exp2(_2216 * _2201) : (2.0 - exp2(_2218 * _2201))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2211;
        }
        else
        {
            float _2345 = 1.0 / cbSceneParam._m0[80u].x;
            float _2346 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : max(_2201, _2202));
            float _2347 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : min(_2201, _2202));
            float _2356 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : min(_2346, 0.0));
            float _2357 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : min(_2347, 0.0));
            _2401 = ((abs(_2208 / _2196) * cbSceneParam._m0[80u].y) * ((((_2356 - _2357) * 2.0) - ((exp2(_2216 * (isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0)))) - exp2(_2216 * (isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0))))) * _2345)) - ((exp2(_2218 * _2356) - exp2(_2218 * _2357)) * _2345))) + (_2211 * cbSceneParam._m0[80u].z);
        }
        vec4 _2403 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2107, _2108, 1.0), 0.0);
        float _2412 = exp2((_2401 * (-1.44269502162933349609375)) * (1.0 - _2403.w));
        float _2413 = log2(_2412);
        float _2429 = log2(_2127);
        _2220 = (exp2(_2429 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2413 * cbSceneParam._m0[78u].x)) * _2403.x) / cbSceneParam._m0[78u].x)) + _2124;
        _2222 = (exp2(_2429 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2413 * cbSceneParam._m0[78u].y)) * _2403.y) / cbSceneParam._m0[78u].y)) + _2125;
        _2224 = (exp2(_2429 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2413 * cbSceneParam._m0[78u].z)) * _2403.z) / cbSceneParam._m0[78u].z)) + _2126;
        _2226 = _2412 * _2127;
    }
    else
    {
        _2220 = _2124;
        _2222 = _2125;
        _2224 = _2126;
        _2226 = _2127;
    }
    bool _2439;
    vec4 _2235;
    vec4 _2257;
    float _2259;
    float _2263;
    float _2264;
    float _2265;
    float _2268;
    float _2271;
    float _2274;
    float _2275;
    bool _2286;
    for (;;)
    {
        _2235 = cbMatDynParam._m0[0u];
        float _2237 = roundEven(_2235.y);
        bool _2238 = _2237 == 3.0;
        float _2239 = log2(_2226);
        float _2243 = exp2(_2239 * cbSceneParam._m0[78u].x);
        float _2244 = exp2(_2239 * cbSceneParam._m0[78u].y);
        float _2245 = exp2(_2239 * cbSceneParam._m0[78u].z);
        float _2246 = _2243 * _2086;
        float _2247 = _2244 * _2087;
        float _2248 = _2245 * _2088;
        float _2255 = _343 + (-0.5);
        _2257 = cbMtdParam._m0[1u];
        _2259 = _2257.y * _2255;
        float _2262 = (_2237 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2263 = _2262 * (_2238 ? _2246 : (_2246 + (cbSceneParam._m0[72u].w * _2220)));
        _2264 = _2262 * (_2238 ? _2247 : (_2247 + (cbSceneParam._m0[72u].w * _2222)));
        _2265 = _2262 * (_2238 ? _2248 : (_2248 + (cbSceneParam._m0[72u].w * _2224)));
        _2268 = ((_2094 * _2098) * _2243) * _2262;
        _2271 = ((_2095 * _2098) * _2244) * _2262;
        _2274 = ((_2096 * _2098) * _2245) * _2262;
        _2275 = _2255 * 0.999000012874603271484375;
        _2286 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2286)
        {
            if ((cbInstanceData._m0[_395 + 7u].x + _2275) < 0.5)
            {
                _2439 = true;
                break;
            }
        }
        uint _2380 = _397 + uint(_2235.w);
        if ((cbInstanceData._m0[_2380].w < 1.0) && ((cbInstanceData._m0[_2380].w + _2275) < 0.5))
        {
            _2439 = true;
            break;
        }
        if ((_2259 + 1.0) < _2257.x)
        {
            _2439 = true;
            break;
        }
        _2439 = false;
        break;
    }
    float _2594;
    if (_2439)
    {
        discard_state = true;
        _2594 = 0.0;
    }
    else
    {
        _2594 = cbInstanceData._m0[_2099].w;
    }
    SV_Target.x = _2263;
    SV_Target.y = _2264;
    SV_Target.z = _2265;
    SV_Target.w = _2594;
    SV_Target_1.x = _2268;
    SV_Target_1.y = _2271;
    SV_Target_1.z = _2274;
    SV_Target_1.w = cbInstanceData._m0[_2099].w;
    discard_exit();
}


