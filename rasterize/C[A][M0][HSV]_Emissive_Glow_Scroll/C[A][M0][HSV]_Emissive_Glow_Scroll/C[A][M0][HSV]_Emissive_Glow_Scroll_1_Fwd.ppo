#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _748;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _186 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _216 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _232 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2902 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _234 = isnan(1.0) ? _2902 : (isnan(_2902) ? 1.0 : min(_2902, 1.0));
    float _242 = (((_234 * _234) * (3.0 - (_234 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _250 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _251 = _250 * _165;
    float _252 = _250 * _166;
    float _253 = _250 * _167;
    float _2913 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2924 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2935 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _272 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _313 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _323 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _313);
    float _324 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _313);
    float _325 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _313);
    float _329 = inversesqrt(dot(vec3(_323, _324, _325), vec3(_323, _324, _325)));
    float _330 = _323 * _329;
    float _331 = _324 * _329;
    float _332 = _325 * _329;
    float _338 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _339 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _360 = fma(_253, cbSceneParam._m0[5u].z, fma(_252, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _251));
    float _363 = fma(_253, cbSceneParam._m0[6u].z, fma(_252, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _251));
    float _366 = fma(_253, cbSceneParam._m0[7u].z, fma(_252, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _251));
    uint _379 = uint(roundEven(NORMAL.w)) * 13u;
    uint _381 = _379 + 9u;
    uint _382 = _381 + uint(cbMatDynParam._m0[0u].w);
    float _388 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2913 : (isnan(_2913) ? 1.0 : min(_2913, 1.0)))) * cbInstanceData._m0[_382].x;
    float _389 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0)))) * cbInstanceData._m0[_382].y;
    float _390 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)))) * cbInstanceData._m0[_382].z;
    float _2946 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0));
    float _2957 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
    float _2968 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0));
    vec4 _402 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _338, cbSceneParam._m0[86u].y * _339));
    float _405 = _402.x * TEXCOORD.z;
    float _406 = dot(vec3(_251, _252, _253), vec3(_330, _331, _332));
    float _409 = _406 * 2.0;
    float _413 = (_409 * _251) - _330;
    float _414 = (_409 * _252) - _331;
    float _415 = (_409 * _253) - _332;
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _747;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _472 = fma(_445, cbModelParam._m0[26u].z, fma(_441, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _437));
        float _476 = fma(_445, cbModelParam._m0[27u].z, fma(_441, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _437));
        float _480 = fma(_445, cbModelParam._m0[28u].z, fma(_441, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _437));
        float _505 = _437 + _251;
        float _506 = _441 + _252;
        float _507 = _445 + _253;
        float _517 = fma(_507, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _505)) - _472;
        float _518 = fma(_507, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _505)) - _476;
        float _519 = fma(_507, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _505)) - _480;
        float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
        float _536 = ((_523 * _517) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_472 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _537 = ((_523 * _518) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_476 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _538 = ((_523 * _519) / cbModelParam._m0[34u].z) + ((((((_480 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _555 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        float _575 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_541.x + (-0.5));
        float _577 = _575 * (_541.y + (-0.5));
        float _578 = _575 * (_541.z + (-0.5));
        float _585 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_548.x + (-0.5));
        float _587 = _585 * (_548.y + (-0.5));
        float _588 = _585 * (_548.z + (-0.5));
        float _595 = exp2((_555.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_555.x + (-0.5));
        float _597 = _595 * (_555.y + (-0.5));
        float _598 = _595 * (_555.z + (-0.5));
        float _605 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _606 = _605 * (_562.x + (-0.5));
        float _607 = _605 * (_562.y + (-0.5));
        float _608 = _605 * (_562.z + (-0.5));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _612 = _576 * 0.5;
        float _613 = _586 * 0.5;
        float _614 = _596 * 0.5;
        float _615 = dot(vec3(_612, _613, _614), vec3(_612, _613, _614));
        float _620 = (_615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_615);
        float _629 = (dot(vec3(_251, _252, _253), vec3(_620 * _612, _620 * _613, _620 * _614)) + 1.0) * 0.5;
        float _2994 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _639 = sqrt(((_613 * _613) + (_612 * _612)) + (_614 * _614)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _3005 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
        float _641 = _640 * 2.0;
        float _645 = (1.0 - _640) / (_640 + 1.0);
        float _3016 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
        float _655 = ((((1.0 - _646) * (_641 + 2.0)) * exp2(log2(isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0))) * (_641 + 1.0))) + _646) * _609;
        float _656 = _577 * 0.5;
        float _657 = _587 * 0.5;
        float _658 = _597 * 0.5;
        float _659 = dot(vec3(_656, _657, _658), vec3(_656, _657, _658));
        float _664 = (_659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_659);
        float _672 = (dot(vec3(_251, _252, _253), vec3(_664 * _656, _664 * _657, _664 * _658)) + 1.0) * 0.5;
        float _3027 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _681 = sqrt(((_657 * _657) + (_656 * _656)) + (_658 * _658)) / (_610 + 9.9999997473787516355514526367188e-06);
        float _3038 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0));
        float _683 = _682 * 2.0;
        float _687 = (1.0 - _682) / (_682 + 1.0);
        float _3049 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
        float _697 = ((((1.0 - _688) * (_683 + 2.0)) * exp2(log2(isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0))) * (_683 + 1.0))) + _688) * _610;
        float _698 = _578 * 0.5;
        float _699 = _588 * 0.5;
        float _700 = _598 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _714 = (dot(vec3(_251, _252, _253), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3060 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _723 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _3071 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3082 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0))) * (_725 + 1.0))) + _730) * _611;
        _747 = _578;
        _749 = _577;
        _750 = _576;
        _751 = _588;
        _752 = _587;
        _753 = _586;
        _754 = _598;
        _755 = _597;
        _756 = _596;
        _757 = _611;
        _758 = _610;
        _759 = _609;
        _760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0)));
        _761 = cbModelParam._m0[36u].z * (isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0)));
        _762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
    }
    else
    {
        _747 = _748;
        _749 = _748;
        _750 = _748;
        _751 = _748;
        _752 = _748;
        _753 = _748;
        _754 = _748;
        _755 = _748;
        _756 = _748;
        _757 = _748;
        _758 = _748;
        _759 = _748;
        _760 = 0.0;
        _761 = 0.0;
        _762 = 0.0;
    }
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _788 = fma(_445, cbModelParam._m0[30u].z, fma(_441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _437));
        float _792 = fma(_445, cbModelParam._m0[31u].z, fma(_441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _437));
        float _796 = fma(_445, cbModelParam._m0[32u].z, fma(_441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _437));
        float _819 = _437 + _251;
        float _820 = _441 + _252;
        float _821 = _445 + _253;
        float _831 = fma(_821, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819)) - _788;
        float _832 = fma(_821, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819)) - _792;
        float _833 = fma(_821, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819)) - _796;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_788 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_792 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[35u].z) + ((((((_796 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _887 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_854.x + (-0.5));
        float _889 = _887 * (_854.y + (-0.5));
        float _890 = _887 * (_854.z + (-0.5));
        float _897 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_861.x + (-0.5));
        float _899 = _897 * (_861.y + (-0.5));
        float _900 = _897 * (_861.z + (-0.5));
        float _907 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_868.x + (-0.5));
        float _909 = _907 * (_868.y + (-0.5));
        float _910 = _907 * (_868.z + (-0.5));
        float _917 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_875.x + (-0.5));
        float _919 = _917 * (_875.y + (-0.5));
        float _920 = _917 * (_875.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_251, _252, _253), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3123 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3134 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3145 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0))) * (_951 + 1.0))) + _956) * _921;
        float _966 = _889 * 0.5;
        float _967 = _899 * 0.5;
        float _968 = _909 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_251, _252, _253), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3156 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3167 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3178 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0))) * (_993 + 1.0))) + _998) * _922;
        float _1008 = _890 * 0.5;
        float _1009 = _900 * 0.5;
        float _1010 = _910 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_251, _252, _253), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3189 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3200 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3211 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0))) * (_1035 + 1.0))) + _1040) * _923;
        _1057 = _890;
        _1058 = _889;
        _1059 = _888;
        _1060 = _900;
        _1061 = _899;
        _1062 = _898;
        _1063 = _910;
        _1064 = _909;
        _1065 = _908;
        _1066 = _923;
        _1067 = _922;
        _1068 = _921;
        _1069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
    }
    else
    {
        _1057 = _748;
        _1058 = _748;
        _1059 = _748;
        _1060 = _748;
        _1061 = _748;
        _1062 = _748;
        _1063 = _748;
        _1064 = _748;
        _1065 = _748;
        _1066 = _748;
        _1067 = _748;
        _1068 = _748;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1081 = (cbModelParam._m0[1u].x * (_1069 - _760)) + _760;
    float _1082 = (cbModelParam._m0[1u].x * (_1070 - _761)) + _761;
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _762)) + _762;
    float _1104 = fma(_1083, cbSceneParam._m0[89u].z, fma(_1082, cbSceneParam._m0[89u].y, _1081 * cbSceneParam._m0[89u].x));
    float _1107 = fma(_1083, cbSceneParam._m0[90u].z, fma(_1082, cbSceneParam._m0[90u].y, _1081 * cbSceneParam._m0[90u].x));
    float _1110 = fma(_1083, cbSceneParam._m0[91u].z, fma(_1082, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1081));
    float _1125 = _413 * 0.5;
    float _1126 = _414 * 0.5;
    float _1127 = _415 * 0.5;
    float _1128 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1131 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1058, _1061, _1064, _1067));
    float _1134 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1057, _1060, _1063, _1066));
    float _1168;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1141 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_747, _751, _754, _757));
        float _1145 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_749, _752, _755, _758));
        float _1149 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_750, _753, _756, _759));
        float _1156 = dot(vec4(cbModelParam._m0[39u]), vec4(_1125, _1126, _1127, 1.0));
        _1168 = dot(vec3(isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1156) ? 0.0 : (isnan(0.0) ? _1156 : max(0.0, _1156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1168 = 1.0;
    }
    float _1179;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1170 = dot(vec4(cbModelParam._m0[40u]), vec4(_1125, _1126, _1127, 1.0));
        _1179 = dot(vec3(isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1170) ? 0.0 : (isnan(0.0) ? _1170 : max(0.0, _1170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1179 = 1.0;
    }
    float _1183 = (_1179 * cbModelParam._m0[1u].x) + (_1168 * (1.0 - cbModelParam._m0[1u].x));
    float _1192 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1273;
    float _1275;
    float _1277;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1240 = fma(_445, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437)) + cbModelParam._m0[13u].w;
        float _1244 = fma(_445, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437)) + cbModelParam._m0[14u].w;
        float _1248 = fma(_445, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437)) + cbModelParam._m0[15u].w;
        float _1251 = fma(_415, cbModelParam._m0[13u].z, fma(_414, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413));
        float _1254 = fma(_415, cbModelParam._m0[14u].z, fma(_414, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413));
        float _1257 = fma(_415, cbModelParam._m0[15u].z, fma(_414, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413));
        float _1283;
        if (_1251 > 0.0)
        {
            _1283 = abs((1.0 - _1240) / _1251);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1251 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1240 + 1.0) / _1251);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1283 = frontier_phi_14_12_ladder;
        }
        float _1488;
        if (_1254 > 0.0)
        {
            _1488 = abs((1.0 - _1244) / _1254);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1254 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1244 + 1.0) / _1254);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1488 = frontier_phi_23_19_ladder;
        }
        float _1677;
        if (_1257 > 0.0)
        {
            _1677 = abs((1.0 - _1248) / _1257);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1257 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1248 + 1.0) / _1257);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1677 = frontier_phi_35_30_ladder;
        }
        float _1679 = isnan(_1488) ? _1283 : (isnan(_1283) ? _1488 : min(_1283, _1488));
        float _1680 = isnan(_1677) ? _1679 : (isnan(_1679) ? _1677 : min(_1679, _1677));
        float _1684 = (_1680 * _1251) + _1240;
        float _1685 = (_1680 * _1254) + _1244;
        float _1686 = (_1680 * _1257) + _1248;
        float _1687 = _1680 * 9.9999997473787516355514526367188e-05;
        float _1689 = (-1.0) - _1687;
        float _1691 = _1687 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1686 > _1691) || ((_1686 < _1689) || ((_1685 > _1691) || ((_1685 < _1689) || ((_1684 < _1689) || (_1684 > _1691))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1686, cbModelParam._m0[9u].z, fma(_1685, cbModelParam._m0[9u].y, _1684 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1686, cbModelParam._m0[10u].z, fma(_1685, cbModelParam._m0[10u].y, _1684 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1686, cbModelParam._m0[11u].z, fma(_1685, cbModelParam._m0[11u].y, _1684 * cbModelParam._m0[11u].x))), _1192);
            frontier_phi_13_35_ladder = _1783.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1783.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1783.x * cbModelParam._m0[1u].y;
        }
        _1273 = frontier_phi_13_35_ladder_2;
        _1275 = frontier_phi_13_35_ladder_1;
        _1277 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_413, _414, _415), _1192);
        _1273 = _1261.x * cbModelParam._m0[1u].y;
        _1275 = _1261.y * cbModelParam._m0[1u].y;
        _1277 = _1261.z * cbModelParam._m0[1u].y;
    }
    float _1280 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1336 = fma(_445, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437)) + cbModelParam._m0[21u].w;
        float _1340 = fma(_445, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437)) + cbModelParam._m0[22u].w;
        float _1344 = fma(_445, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437)) + cbModelParam._m0[23u].w;
        float _1347 = fma(_415, cbModelParam._m0[21u].z, fma(_414, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413));
        float _1350 = fma(_415, cbModelParam._m0[22u].z, fma(_414, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413));
        float _1353 = fma(_415, cbModelParam._m0[23u].z, fma(_414, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413));
        float _1493;
        if (_1347 > 0.0)
        {
            _1493 = abs((1.0 - _1336) / _1347);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1336 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1493 = frontier_phi_25_21_ladder;
        }
        float _1704;
        if (_1350 > 0.0)
        {
            _1704 = abs((1.0 - _1340) / _1350);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1340 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1704 = frontier_phi_37_32_ladder;
        }
        float _1855;
        if (_1353 > 0.0)
        {
            _1855 = abs((1.0 - _1344) / _1353);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1344 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1855 = frontier_phi_46_43_ladder;
        }
        float _1857 = isnan(_1704) ? _1493 : (isnan(_1493) ? _1704 : min(_1493, _1704));
        float _1858 = isnan(_1855) ? _1857 : (isnan(_1857) ? _1855 : min(_1857, _1855));
        float _1862 = (_1858 * _1347) + _1336;
        float _1863 = (_1858 * _1350) + _1340;
        float _1864 = (_1858 * _1353) + _1344;
        float _1865 = _1858 * 9.9999997473787516355514526367188e-05;
        float _1866 = (-1.0) - _1865;
        float _1868 = _1865 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1864 > _1868) || ((_1864 < _1866) || ((_1863 > _1868) || ((_1863 < _1866) || ((_1862 < _1866) || (_1862 > _1868))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2104 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1864, cbModelParam._m0[17u].z, fma(_1863, cbModelParam._m0[17u].y, _1862 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1864, cbModelParam._m0[18u].z, fma(_1863, cbModelParam._m0[18u].y, _1862 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1864, cbModelParam._m0[19u].z, fma(_1863, cbModelParam._m0[19u].y, _1862 * cbModelParam._m0[19u].x))), _1280);
            frontier_phi_22_46_ladder = _2104.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2104.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2104.x * cbModelParam._m0[1u].z;
        }
        _1372 = frontier_phi_22_46_ladder_2;
        _1374 = frontier_phi_22_46_ladder_1;
        _1376 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_413, _414, _415), _1280);
        _1372 = _1356.x * cbModelParam._m0[1u].z;
        _1374 = _1356.y * cbModelParam._m0[1u].z;
        _1376 = _1356.z * cbModelParam._m0[1u].z;
    }
    float _1388 = _405 * 0.01200000010430812835693359375;
    float _1390 = _1388 * ((cbModelParam._m0[1u].w * (_1372 - _1273)) + _1273);
    float _1391 = _1388 * ((cbModelParam._m0[1u].w * (_1374 - _1275)) + _1275);
    float _1392 = _1388 * ((cbModelParam._m0[1u].w * (_1376 - _1277)) + _1277);
    float _1395 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1398 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1401 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, _1390 * cbSceneParam._m0[91u].x));
    uvec4 _1411 = floatBitsToUint(cbInstanceData._m0[_379 + 5u]);
    uint _1413 = _1411.x * 14u;
    uint _1414 = _1413 + 13u;
    float _1421 = _405 + (-1.0);
    float _1426 = (cbLight._m0[_1414].x * _1421) + 1.0;
    float _1427 = (cbLight._m0[_1414].y * _1421) + 1.0;
    float _1428 = (cbLight._m0[_1414].z * _1421) + 1.0;
    float _1429 = (cbLight._m0[_1414].w * _1421) + 1.0;
    uint _1430 = _1413 + 5u;
    float _1436 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
    uint _1440 = _1413 + 4u;
    float _1447 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
    uint _1451 = _1413 | 1u;
    float _1462 = dot(vec3(cbLight._m0[_1413].xyz), vec3(_251, _252, _253));
    float _1465 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_251, _252, _253));
    float _3347 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
    float _3358 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    float _1470 = (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * 0.3183098733425140380859375;
    float _1472 = (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * 0.3183098733425140380859375;
    float _1479 = ((cbLight._m0[_1430].x * _1436) * _1472) + ((cbLight._m0[_1440].x * _1447) * _1470);
    float _1480 = ((_1436 * cbLight._m0[_1430].y) * _1472) + ((_1447 * cbLight._m0[_1440].y) * _1470);
    float _1481 = ((_1436 * cbLight._m0[_1430].z) * _1472) + ((_1447 * cbLight._m0[_1440].z) * _1470);
    uvec4 _1485 = floatBitsToUint(cbLight._m0[_1413 + 12u]);
    bool _1487 = _1485.x == 0u;
    float _1498;
    float _1500;
    float _1502;
    if (_1487)
    {
        _1498 = _1479;
        _1500 = _1480;
        _1502 = _1481;
    }
    else
    {
        uint _1506 = _1413 + 6u;
        float _1522 = (dot(vec3(cbLight._m0[_1413 + 2u].xyz), vec3(_251, _252, _253)) * 0.5) + 0.5;
        float _1523 = _1522 * _1522;
        float _3369 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _1525 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1498 = (((cbLight._m0[_1506].x * 0.3183098733425140380859375) * _1524) * _1525) + _1479;
        _1500 = (((cbLight._m0[_1506].y * 0.3183098733425140380859375) * _1524) * _1525) + _1480;
        _1502 = (((cbLight._m0[_1506].z * 0.3183098733425140380859375) * _1524) * _1525) + _1481;
    }
    bool _1505 = _1485.y == 0u;
    float _1543;
    float _1545;
    float _1547;
    if (_1505)
    {
        _1543 = _1498;
        _1545 = _1500;
        _1547 = _1502;
    }
    else
    {
        uint _1648 = _1413 + 7u;
        float _1664 = (dot(vec3(cbLight._m0[_1413 + 3u].xyz), vec3(_251, _252, _253)) * 0.5) + 0.5;
        float _1665 = _1664 * _1664;
        float _3385 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1667 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1543 = (((cbLight._m0[_1648].x * 0.3183098733425140380859375) * _1666) * _1667) + _1498;
        _1545 = (((cbLight._m0[_1648].y * 0.3183098733425140380859375) * _1666) * _1667) + _1500;
        _1547 = (((cbLight._m0[_1648].z * 0.3183098733425140380859375) * _1666) * _1667) + _1502;
    }
    uint _1549 = _1413 + 8u;
    float _1555 = cbLight._m0[_1413].x + _330;
    float _1556 = cbLight._m0[_1413].y + _331;
    float _1557 = cbLight._m0[_1413].z + _332;
    float _1561 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
    float _1565 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1413].xyz));
    float _3401 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1568 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _1569 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _1570 = dot(vec3(cbLight._m0[_1413].xyz), vec3(_1555 * _1561, _1556 * _1561, _1557 * _1561));
    float _3423 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1581 = (exp2(log2(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1587 = (0.5 / ((_1568 + 9.9999999392252902907785028219223e-09) + _1569)) * _1568;
    float _3434 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1589 = (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.31831014156341552734375;
    uint _1600 = _1413 + 9u;
    float _1606 = cbLight._m0[_1451].x + _330;
    float _1607 = cbLight._m0[_1451].y + _331;
    float _1608 = cbLight._m0[_1451].z + _332;
    float _1612 = inversesqrt(dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608)));
    float _1616 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1451].xyz));
    float _3445 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1619 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _1620 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_1606 * _1612, _1607 * _1612, _1608 * _1612));
    float _3456 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1629 = (exp2(log2(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1633 = (0.5 / ((_1619 + 9.9999999392252902907785028219223e-09) + _1569)) * _1619;
    float _3467 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1635 = (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * 0.31831014156341552734375;
    float _1645 = (((_1629 * cbLight._m0[_1600].x) * _1635) * _1436) + (((_1581 * cbLight._m0[_1549].x) * _1589) * _1447);
    float _1646 = (((_1629 * cbLight._m0[_1600].y) * _1635) * _1436) + (((_1581 * cbLight._m0[_1549].y) * _1589) * _1447);
    float _1647 = (((_1629 * cbLight._m0[_1600].z) * _1635) * _1436) + (((_1581 * cbLight._m0[_1549].z) * _1589) * _1447);
    float _1709;
    float _1711;
    float _1713;
    if (_1487)
    {
        _1709 = _1645;
        _1711 = _1646;
        _1713 = _1647;
    }
    else
    {
        uint _1715 = _1413 + 10u;
        uint _1721 = _1413 + 2u;
        float _1727 = cbLight._m0[_1721].x + _330;
        float _1728 = cbLight._m0[_1721].y + _331;
        float _1729 = cbLight._m0[_1721].z + _332;
        float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
        float _1737 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1721].xyz));
        float _3478 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1740 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1741 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1727 * _1733, _1728 * _1733, _1729 * _1733));
        float _3489 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = (exp2(log2(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1754 = (0.5 / ((_1740 + 9.9999999392252902907785028219223e-09) + _1569)) * _1740;
        float _3500 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1756 = (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * 0.31831014156341552734375;
        float _1757 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1709 = (((_1750 * cbLight._m0[_1715].x) * _1756) * _1757) + _1645;
        _1711 = (((_1750 * cbLight._m0[_1715].y) * _1756) * _1757) + _1646;
        _1713 = (((_1750 * cbLight._m0[_1715].z) * _1756) * _1757) + _1647;
    }
    float _1792;
    float _1794;
    float _1796;
    if (_1505)
    {
        _1792 = _1709;
        _1794 = _1711;
        _1796 = _1713;
    }
    else
    {
        uint _1803 = _1413 + 11u;
        uint _1809 = _1413 + 3u;
        float _1815 = cbLight._m0[_1809].x + _330;
        float _1816 = cbLight._m0[_1809].y + _331;
        float _1817 = cbLight._m0[_1809].z + _332;
        float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
        float _1825 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1809].xyz));
        float _3516 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1828 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1829 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1815 * _1821, _1816 * _1821, _1817 * _1821));
        float _3527 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = (exp2(log2(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1842 = (0.5 / ((_1828 + 9.9999999392252902907785028219223e-09) + _1569)) * _1828;
        float _3538 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1844 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.31831014156341552734375;
        float _1845 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1792 = (((_1838 * cbLight._m0[_1803].x) * _1844) * _1845) + _1709;
        _1794 = (((_1838 * cbLight._m0[_1803].y) * _1844) * _1845) + _1711;
        _1796 = (((_1838 * cbLight._m0[_1803].z) * _1844) * _1845) + _1713;
    }
    float _1980;
    float _1982;
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    if (_1411.y == 0u)
    {
        float _1920 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1921 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1920;
        float _1922 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1920;
        float _1923 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1920;
        uvec4 _1935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1936 = _1935.x;
        uint _1947 = uint((float(_1935.y) * floor(float(uint(cbSceneParam._m0[85u].y * _339) / _1936))) + floor(float(uint(cbSceneParam._m0[85u].x * _338) / _1936)));
        float _1957 = (log2(_1923 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1958 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        uint _1961 = uint(isnan(14.0) ? _1958 : (isnan(_1958) ? 14.0 : min(_1958, 14.0)));
        uvec4 _1966 = texelFetch(g_lightClusterGridBuffer, int(((_1961 << 2u) + (_1947 << 6u)) >> 2u));
        uint _1967 = _1966.x;
        uint _1968 = _1935.z;
        float _2109;
        float _2111;
        float _2113;
        float _2115;
        float _2117;
        float _2119;
        if (((((1u << ((_1968 >> 4u) & 15u)) + 4294967295u) & _1967) == 0u) || ((_1968 & 240u) == 0u))
        {
            _2109 = 0.0;
            _2111 = 0.0;
            _2113 = 0.0;
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
        }
        else
        {
            float _2110;
            float _2112;
            float _2114;
            float _2116;
            float _2118;
            float _2120;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            uint _2265 = 0u;
            uint _2274;
            bool _2275;
            for (;;)
            {
                _2274 = texelFetch(g_lightClassification, int((((_1961 << 5u) + (_1947 << 9u)) + (_2265 << 2u)) >> 2u)).x;
                _2275 = _2274 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2275)
                {
                    frontier_phi_61_pred = _2259;
                    frontier_phi_61_pred_1 = _2264;
                    frontier_phi_61_pred_2 = _2263;
                    frontier_phi_61_pred_3 = _2262;
                    frontier_phi_61_pred_4 = _2261;
                    frontier_phi_61_pred_5 = _2260;
                }
                else
                {
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    uint _2389;
                    _2383 = _2259;
                    _2384 = _2260;
                    _2385 = _2261;
                    _2386 = _2262;
                    _2387 = _2263;
                    _2388 = _2264;
                    _2389 = _2274;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    for (;;)
                    {
                        uint _2393 = uint(findLSB(_2389)) + (_2265 << 5u);
                        uint _2390 = (_2389 + 4294967295u) & _2389;
                        uint _2395 = _2393 * 48u;
                        vec4 _2409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2395)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 3u)).x));
                        uint _2415 = (_2393 * 48u) + 4u;
                        vec4 _2428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2415)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 3u)).x));
                        uint _2434 = (_2393 * 48u) + 8u;
                        vec3 _2445 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2434)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 2u)).x));
                        float _2449 = _2409.x - _1921;
                        float _2450 = _2409.y - _1922;
                        float _2451 = _2409.z - _1923;
                        float _2452 = dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451));
                        float _2455 = inversesqrt(_2452);
                        float _2464 = 1.0 - (_2452 * _2409.w);
                        float _3564 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
                        float _2465 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
                        float _2466 = sqrt(_2452) * _2428.w;
                        float _2469 = 1.39999997615814208984375 / (_2466 + 1.39999997615814208984375);
                        float _2470 = _2469 * _2469;
                        float _2473 = ((1.0 - _2470) * dot(vec3(_360, _363, _366), vec3(_2455 * _2449, _2455 * _2450, _2455 * _2451))) + _2470;
                        float _2476 = _2466 * _2466;
                        float _2480 = ((isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0))) * _2465) / ((_2476 * 0.699999988079071044921875) + 1.0);
                        float _2484 = (-0.0) - _1921;
                        float _2485 = (-0.0) - _1922;
                        float _2486 = (-0.0) - _1923;
                        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
                        float _2494 = dot(vec3(_360, _363, _366), vec3(_2490 * _2484, _2490 * _2485, _2490 * _2486));
                        float _3580 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
                        float _3591 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                        float _2498 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
                        float _2502 = (0.5 / (((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) + 9.9999999392252902907785028219223e-09) + _2498)) * _2498;
                        float _3602 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
                        float _2511 = (((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * 3.1415927410125732421875) / ((_2476 * 2.1991131305694580078125) + 3.141590118408203125)) * _2465;
                        _2318 = (_2480 * _2428.x) + _2386;
                        _2319 = (_2480 * _2428.y) + _2387;
                        _2320 = (_2480 * _2428.z) + _2388;
                        _2315 = (_2511 * _2445.x) + _2383;
                        _2316 = (_2511 * _2445.y) + _2384;
                        _2317 = (_2511 * _2445.z) + _2385;
                        if (_2390 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2383 = _2315;
                            _2384 = _2316;
                            _2385 = _2317;
                            _2386 = _2318;
                            _2387 = _2319;
                            _2388 = _2320;
                            _2389 = _2390;
                        }
                    }
                    frontier_phi_61_pred = _2315;
                    frontier_phi_61_pred_1 = _2320;
                    frontier_phi_61_pred_2 = _2319;
                    frontier_phi_61_pred_3 = _2318;
                    frontier_phi_61_pred_4 = _2317;
                    frontier_phi_61_pred_5 = _2316;
                }
                _2110 = frontier_phi_61_pred;
                _2120 = frontier_phi_61_pred_1;
                _2118 = frontier_phi_61_pred_2;
                _2116 = frontier_phi_61_pred_3;
                _2114 = frontier_phi_61_pred_4;
                _2112 = frontier_phi_61_pred_5;
                uint _2266 = _2265 + 1u;
                if (_2266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2259 = _2110;
                    _2260 = _2112;
                    _2261 = _2114;
                    _2262 = _2116;
                    _2263 = _2118;
                    _2264 = _2120;
                    _2265 = _2266;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2109 = _2110;
            _2111 = _2112;
            _2113 = _2114;
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
        }
        uvec4 _2123 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2124 = _2123.z;
        uint _2126 = (_2124 >> 8u) & 15u;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        if (((4294967295u << _2126) & _1967) == 0u)
        {
            _2230 = _2109;
            _2232 = _2111;
            _2234 = _2113;
            _2236 = _2115;
            _2238 = _2117;
            _2240 = _2119;
        }
        else
        {
            float _2255 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2126 < ((_2124 >> 12u) & 15u))
            {
                float _2231;
                float _2233;
                float _2235;
                float _2237;
                float _2239;
                float _2241;
                float _2366 = _2109;
                float _2367 = _2111;
                float _2368 = _2113;
                float _2369 = _2115;
                float _2370 = _2117;
                float _2371 = _2119;
                uint _2372 = _2126;
                uint _2381;
                bool _2382;
                for (;;)
                {
                    _2381 = texelFetch(g_lightClassification, int((((_1961 << 5u) + (_1947 << 9u)) + (_2372 << 2u)) >> 2u)).x;
                    _2382 = _2381 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2382)
                    {
                        frontier_phi_67_pred = _2369;
                        frontier_phi_67_pred_1 = _2370;
                        frontier_phi_67_pred_2 = _2371;
                        frontier_phi_67_pred_3 = _2368;
                        frontier_phi_67_pred_4 = _2367;
                        frontier_phi_67_pred_5 = _2366;
                    }
                    else
                    {
                        float _2516;
                        float _2517;
                        float _2518;
                        float _2519;
                        float _2520;
                        float _2521;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2529 = _2366;
                        float _2530 = _2367;
                        float _2531 = _2368;
                        float _2532 = _2369;
                        float _2533 = _2370;
                        float _2534 = _2371;
                        uint _2535 = _2381;
                        uint _2536;
                        vec4 _2561;
                        float _2562;
                        vec4 _2577;
                        vec3 _2589;
                        vec4 _2605;
                        vec4 _2621;
                        float _2668;
                        bool _2669;
                        for (;;)
                        {
                            uint _2546 = ((_2372 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2535));
                            _2536 = (_2535 + 4294967295u) & _2535;
                            uint _2548 = _2546 * 40u;
                            _2561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2548 + 3u)).x));
                            _2562 = _2561.w;
                            uint _2564 = (_2546 * 40u) + 4u;
                            _2577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 3u)).x));
                            uint _2579 = (_2546 * 40u) + 8u;
                            _2589 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x));
                            uint _2592 = (_2546 * 40u) + 16u;
                            _2605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 3u)).x));
                            uint _2608 = (_2546 * 40u) + 20u;
                            _2621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 3u)).x));
                            uint _2624 = (_2546 * 40u) + 24u;
                            vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            uint _2643 = (_2546 * 40u) + 28u;
                            vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 3u)).x));
                            _2668 = fma(_1923, _2656.z, fma(_1922, _2656.y, _2656.x * _1921)) + _2656.w;
                            _2669 = !((fma(_1923, _2637.z, fma(_1922, _2637.y, _2637.x * _1921)) + _2637.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2669)
                            {
                                float _2696 = _2561.x - _1921;
                                float _2697 = _2561.y - _1922;
                                float _2698 = _2561.z - _1923;
                                float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                                float _2702 = inversesqrt(_2699);
                                float _2703 = _2702 * _2696;
                                float _2704 = _2702 * _2697;
                                float _2705 = _2702 * _2698;
                                float _2709 = 1.0 - (_2699 / (_2562 * _2562));
                                float _3613 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                                float _2710 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
                                float _2714 = sqrt(_2699) * _2577.w;
                                float _2716 = 1.39999997615814208984375 / (_2714 + 1.39999997615814208984375);
                                float _2717 = _2716 * _2716;
                                float _2718 = 1.0 - _2717;
                                float _2720 = (_2718 * dot(vec3(_2703, _2704, _2705), vec3(_360, _363, _366))) + _2717;
                                float _2723 = _2714 * _2714;
                                float _2727 = (fma(_1923, _2605.z, fma(_1922, _2605.y, _2605.x * _1921)) + _2605.w) / _2668;
                                float _2728 = (fma(_1923, _2621.z, fma(_1922, _2621.y, _2621.x * _1921)) + _2621.w) / _2668;
                                float _2732 = 1.0 - dot(vec2(_2727, _2728), vec2(_2727, _2728));
                                float _3629 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                                float _2733 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
                                float _2734 = _2733 * (((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2710) / ((_2723 * 0.699999988079071044921875) + 1.0));
                                float _2744 = dot(vec3(_360, _363, _366), vec3((-0.0) - (_1921 * _2255), (-0.0) - (_1922 * _2255), (-0.0) - (_1923 * _2255)));
                                float _3640 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2752 = (_2718 * dot(vec3(_360, _363, _366), vec3(_2703, _2704, _2705))) + _2717;
                                float _3651 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                                float _2753 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
                                float _2757 = (0.5 / (((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) + 9.9999999392252902907785028219223e-09) + _2753)) * _2753;
                                float _3662 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2764 = (_2733 * _2710) * (((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 3.1415927410125732421875) / ((_2723 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2764 * _2589.x;
                                frontier_phi_73_pred_1 = _2764 * _2589.y;
                                frontier_phi_73_pred_2 = _2734 * _2577.z;
                                frontier_phi_73_pred_3 = _2734 * _2577.y;
                                frontier_phi_73_pred_4 = _2734 * _2577.x;
                                frontier_phi_73_pred_5 = _2764 * _2589.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2768 = frontier_phi_73_pred;
                            _2769 = frontier_phi_73_pred_1;
                            _2773 = frontier_phi_73_pred_2;
                            _2772 = frontier_phi_73_pred_3;
                            _2771 = frontier_phi_73_pred_4;
                            _2770 = frontier_phi_73_pred_5;
                            _2519 = _2771 + _2532;
                            _2520 = _2772 + _2533;
                            _2521 = _2773 + _2534;
                            _2516 = _2768 + _2529;
                            _2517 = _2769 + _2530;
                            _2518 = _2770 + _2531;
                            if (_2536 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2529 = _2516;
                                _2530 = _2517;
                                _2531 = _2518;
                                _2532 = _2519;
                                _2533 = _2520;
                                _2534 = _2521;
                                _2535 = _2536;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2519;
                        frontier_phi_67_pred_1 = _2520;
                        frontier_phi_67_pred_2 = _2521;
                        frontier_phi_67_pred_3 = _2518;
                        frontier_phi_67_pred_4 = _2517;
                        frontier_phi_67_pred_5 = _2516;
                    }
                    _2237 = frontier_phi_67_pred;
                    _2239 = frontier_phi_67_pred_1;
                    _2241 = frontier_phi_67_pred_2;
                    _2235 = frontier_phi_67_pred_3;
                    _2233 = frontier_phi_67_pred_4;
                    _2231 = frontier_phi_67_pred_5;
                    uint _2373 = _2372 + 1u;
                    if (_2373 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2366 = _2231;
                        _2367 = _2233;
                        _2368 = _2235;
                        _2369 = _2237;
                        _2370 = _2239;
                        _2371 = _2241;
                        _2372 = _2373;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2239;
                frontier_phi_55_56_ladder_1 = _2241;
                frontier_phi_55_56_ladder_2 = _2237;
                frontier_phi_55_56_ladder_3 = _2235;
                frontier_phi_55_56_ladder_4 = _2233;
                frontier_phi_55_56_ladder_5 = _2231;
            }
            else
            {
                frontier_phi_55_56_ladder = _2117;
                frontier_phi_55_56_ladder_1 = _2119;
                frontier_phi_55_56_ladder_2 = _2115;
                frontier_phi_55_56_ladder_3 = _2113;
                frontier_phi_55_56_ladder_4 = _2111;
                frontier_phi_55_56_ladder_5 = _2109;
            }
            _2230 = frontier_phi_55_56_ladder_5;
            _2232 = frontier_phi_55_56_ladder_4;
            _2234 = frontier_phi_55_56_ladder_3;
            _2236 = frontier_phi_55_56_ladder_2;
            _2238 = frontier_phi_55_56_ladder;
            _2240 = frontier_phi_55_56_ladder_1;
        }
        float _2245 = isnan(1.0) ? _405 : (isnan(_405) ? 1.0 : min(_405, 1.0));
        _1980 = (_2245 * _2236) + _1543;
        _1982 = (_2245 * _2238) + _1545;
        _1984 = (_2245 * _2240) + _1547;
        _1986 = ((_2230 * 0.039999999105930328369140625) * _2245) + _1792;
        _1988 = ((_2232 * 0.039999999105930328369140625) * _2245) + _1794;
        _1990 = ((_2234 * 0.039999999105930328369140625) * _2245) + _1796;
    }
    else
    {
        _1980 = _1543;
        _1982 = _1545;
        _1984 = _1547;
        _1986 = _1792;
        _1988 = _1794;
        _1990 = _1796;
    }
    uint _1996 = _381 + uint(cbMatDynParam._m0[0u].w);
    float _2006 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _216.x) * cbSceneParam._m0[72u].y) * _242) * cbInstanceData._m0[_1996].x;
    float _2011 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _216.y) * cbSceneParam._m0[72u].y) * _242) * cbInstanceData._m0[_1996].y;
    float _2016 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _216.z) * cbSceneParam._m0[72u].y) * _242) * cbInstanceData._m0[_1996].z;
    float _3678 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3689 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3700 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _2033 = (((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1980 + ((isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))) * _405))) + ((_1986 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _1183)) * cbPerFrame._m0[3u].x)) + _2006;
    float _2035 = (_2011 + ((_1988 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1982 + ((isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0))) * _405)));
    float _2037 = (_2016 + ((_1990 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1984 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _405)));
    float _3726 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2050 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    uint _2051 = _379 + 6u;
    float _2059 = _338 / cbSceneParam._m0[86u].x;
    float _2060 = _339 / cbSceneParam._m0[86u].y;
    vec4 _2074 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2059, _2060, (log2((isnan(cbSceneParam._m0[77u].w) ? _272 : (isnan(_272) ? cbSceneParam._m0[77u].w : min(_272, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2076 = _2074.x;
    float _2077 = _2074.y;
    float _2078 = _2074.z;
    float _2079 = _2074.w;
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    if (_272 > cbSceneParam._m0[78u].w)
    {
        float _2134 = isnan(_272) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _272 : min(cbSceneParam._m0[80u].w, _272));
        float _2135 = _2134 / _272;
        float _2146 = _2135 * _323;
        float _2147 = _324 * _2135;
        float _2148 = (-0.0) - _2147;
        float _2150 = _2135 * _325;
        float _2152 = (cbSceneParam._m0[77u].w * _2148) / _2134;
        float _2153 = _2152 + cbSceneParam._m0[79u].w;
        float _2154 = cbSceneParam._m0[79u].w - _2147;
        float _2160 = sqrt(((_2146 * _2146) + (_2147 * _2147)) + (_2150 * _2150));
        float _2163 = (1.0 - (cbSceneParam._m0[77u].w / _2134)) * _2160;
        float _2168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2328;
        if (abs((_2148 - _2152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2328 = ((((_2153 > 0.0) ? exp2(_2168 * _2153) : (2.0 - exp2(_2170 * _2153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2163;
        }
        else
        {
            float _2288 = 1.0 / cbSceneParam._m0[80u].x;
            float _2289 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : max(_2153, _2154));
            float _2290 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : min(_2153, _2154));
            float _2299 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : min(_2289, 0.0));
            float _2300 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : min(_2290, 0.0));
            _2328 = ((abs(_2160 / _2148) * cbSceneParam._m0[80u].y) * ((((_2299 - _2300) * 2.0) - ((exp2(_2168 * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0)))) - exp2(_2168 * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))))) * _2288)) - ((exp2(_2170 * _2299) - exp2(_2170 * _2300)) * _2288))) + (_2163 * cbSceneParam._m0[80u].z);
        }
        vec4 _2330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2059, _2060, 1.0), 0.0);
        float _2339 = exp2((_2328 * (-1.44269502162933349609375)) * (1.0 - _2330.w));
        float _2340 = log2(_2339);
        float _2356 = log2(_2079);
        _2172 = (exp2(_2356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].x)) * _2330.x) / cbSceneParam._m0[78u].x)) + _2076;
        _2174 = (exp2(_2356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].y)) * _2330.y) / cbSceneParam._m0[78u].y)) + _2077;
        _2176 = (exp2(_2356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].z)) * _2330.z) / cbSceneParam._m0[78u].z)) + _2078;
        _2178 = _2339 * _2079;
    }
    else
    {
        _2172 = _2076;
        _2174 = _2077;
        _2176 = _2078;
        _2178 = _2079;
    }
    float _2189 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2190 = _2189 == 3.0;
    float _2191 = log2(_2178);
    float _2195 = exp2(_2191 * cbSceneParam._m0[78u].x);
    float _2196 = exp2(_2191 * cbSceneParam._m0[78u].y);
    float _2197 = exp2(_2191 * cbSceneParam._m0[78u].z);
    float _2198 = _2195 * (isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)));
    float _2199 = _2196 * (isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)));
    float _2200 = _2197 * (isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)));
    float _2209 = (_2189 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2209 * (_2190 ? _2198 : (_2198 + (cbSceneParam._m0[72u].w * _2172)));
    SV_Target.y = _2209 * (_2190 ? _2199 : (_2199 + (cbSceneParam._m0[72u].w * _2174)));
    SV_Target.z = _2209 * (_2190 ? _2200 : (_2200 + (cbSceneParam._m0[72u].w * _2176)));
    SV_Target.w = cbInstanceData._m0[_2051].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2006) * _2050) * _2195) * _2209;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2011) * _2050) * _2196) * _2209;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2016) * _2050) * _2197) * _2209;
    SV_Target_1.w = cbInstanceData._m0[_2051].w;
}


