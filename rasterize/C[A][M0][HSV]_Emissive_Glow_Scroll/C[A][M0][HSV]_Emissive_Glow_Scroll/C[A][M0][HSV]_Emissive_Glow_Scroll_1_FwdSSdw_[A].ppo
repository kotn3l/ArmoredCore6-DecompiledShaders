#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _795;
float _3028;
float _3029;
float _3030;
float _3031;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _192 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _192.x * cbMtdParam._m0[9u].x;
    float _199 = _192.y * cbMtdParam._m0[9u].y;
    float _200 = _192.z * cbMtdParam._m0[9u].z;
    vec4 _222 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _238 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3040 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _240 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
    float _248 = (((_240 * _240) * (3.0 - (_240 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _256 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _257 = _256 * _171;
    float _258 = _256 * _172;
    float _259 = _256 * _173;
    float _3051 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3062 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3073 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _278 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _319 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _329 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _319);
    float _330 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _319);
    float _331 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _319);
    float _335 = inversesqrt(dot(vec3(_329, _330, _331), vec3(_329, _330, _331)));
    float _336 = _329 * _335;
    float _337 = _330 * _335;
    float _338 = _331 * _335;
    vec4 _343 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _345 = _343.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _474 = sqrt(((_329 * _329) + (_330 * _330)) + (_331 * _331));
        float _480 = (cbMatDynParam._m0[5u].x * _474) + cbMatDynParam._m0[5u].y;
        float _3084 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
        float _481 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _485 = (cbMatDynParam._m0[5u].z * _474) + cbMatDynParam._m0[5u].w;
        float _3095 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0))) - _481)) + _481) < ((_345 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _357 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _358 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _378 = fma(_259, cbSceneParam._m0[5u].z, fma(_258, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _257));
    float _381 = fma(_259, cbSceneParam._m0[6u].z, fma(_258, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _257));
    float _384 = fma(_259, cbSceneParam._m0[7u].z, fma(_258, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _257));
    uint _397 = uint(roundEven(NORMAL.w)) * 13u;
    uint _399 = _397 + 9u;
    uint _400 = _399 + uint(cbMatDynParam._m0[0u].w);
    float _406 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0)))) * cbInstanceData._m0[_400].x;
    float _407 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * cbInstanceData._m0[_400].y;
    float _408 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0)))) * cbInstanceData._m0[_400].z;
    float _3106 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
    float _3117 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
    float _3128 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    vec4 _420 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _357, cbSceneParam._m0[86u].y * _358));
    float _423 = _420.x * TEXCOORD.z;
    float _424 = dot(vec3(_257, _258, _259), vec3(_336, _337, _338));
    float _427 = _424 * 2.0;
    float _431 = (_427 * _257) - _336;
    float _432 = (_427 * _258) - _337;
    float _433 = (_427 * _259) - _338;
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _459 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _794;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _519 = fma(_463, cbModelParam._m0[26u].z, fma(_459, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _455));
        float _523 = fma(_463, cbModelParam._m0[27u].z, fma(_459, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _455));
        float _527 = fma(_463, cbModelParam._m0[28u].z, fma(_459, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _455));
        float _552 = _455 + _257;
        float _553 = _459 + _258;
        float _554 = _463 + _259;
        float _564 = fma(_554, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552)) - _519;
        float _565 = fma(_554, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552)) - _523;
        float _566 = fma(_554, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552)) - _527;
        float _570 = inversesqrt(dot(vec3(_564, _565, _566), vec3(_564, _565, _566)));
        float _583 = ((_570 * _564) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_519 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _584 = ((_570 * _565) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_523 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _585 = ((_570 * _566) / cbModelParam._m0[34u].z) + ((((((_527 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        vec4 _609 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        float _622 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_588.x + (-0.5));
        float _624 = _622 * (_588.y + (-0.5));
        float _625 = _622 * (_588.z + (-0.5));
        float _632 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_595.x + (-0.5));
        float _634 = _632 * (_595.y + (-0.5));
        float _635 = _632 * (_595.z + (-0.5));
        float _642 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_602.x + (-0.5));
        float _644 = _642 * (_602.y + (-0.5));
        float _645 = _642 * (_602.z + (-0.5));
        float _652 = exp2((_609.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_609.x + (-0.5));
        float _654 = _652 * (_609.y + (-0.5));
        float _655 = _652 * (_609.z + (-0.5));
        float _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = _623 * 0.5;
        float _660 = _633 * 0.5;
        float _661 = _643 * 0.5;
        float _662 = dot(vec3(_659, _660, _661), vec3(_659, _660, _661));
        float _667 = (_662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_662);
        float _676 = (dot(vec3(_257, _258, _259), vec3(_667 * _659, _667 * _660, _667 * _661)) + 1.0) * 0.5;
        float _3154 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _686 = sqrt(((_660 * _660) + (_659 * _659)) + (_661 * _661)) / (_656 + 9.9999997473787516355514526367188e-06);
        float _3165 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _688 = _687 * 2.0;
        float _692 = (1.0 - _687) / (_687 + 1.0);
        float _3176 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _702 = ((((1.0 - _693) * (_688 + 2.0)) * exp2(log2(isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * (_688 + 1.0))) + _693) * _656;
        float _703 = _624 * 0.5;
        float _704 = _634 * 0.5;
        float _705 = _644 * 0.5;
        float _706 = dot(vec3(_703, _704, _705), vec3(_703, _704, _705));
        float _711 = (_706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_706);
        float _719 = (dot(vec3(_257, _258, _259), vec3(_711 * _703, _711 * _704, _711 * _705)) + 1.0) * 0.5;
        float _3187 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _728 = sqrt(((_704 * _704) + (_703 * _703)) + (_705 * _705)) / (_657 + 9.9999997473787516355514526367188e-06);
        float _3198 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _3209 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))) * (_730 + 1.0))) + _735) * _657;
        float _745 = _625 * 0.5;
        float _746 = _635 * 0.5;
        float _747 = _645 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _761 = (dot(vec3(_257, _258, _259), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3220 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _770 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3231 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3242 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) * (_772 + 1.0))) + _777) * _658;
        _794 = _625;
        _796 = _624;
        _797 = _623;
        _798 = _635;
        _799 = _634;
        _800 = _633;
        _801 = _645;
        _802 = _644;
        _803 = _643;
        _804 = _658;
        _805 = _657;
        _806 = _656;
        _807 = cbModelParam._m0[36u].z * (isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0)));
        _808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
    }
    else
    {
        _794 = _795;
        _796 = _795;
        _797 = _795;
        _798 = _795;
        _799 = _795;
        _800 = _795;
        _801 = _795;
        _802 = _795;
        _803 = _795;
        _804 = _795;
        _805 = _795;
        _806 = _795;
        _807 = 0.0;
        _808 = 0.0;
        _809 = 0.0;
    }
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _838 = fma(_463, cbModelParam._m0[30u].z, fma(_459, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _455));
        float _842 = fma(_463, cbModelParam._m0[31u].z, fma(_459, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _455));
        float _846 = fma(_463, cbModelParam._m0[32u].z, fma(_459, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _455));
        float _869 = _455 + _257;
        float _870 = _459 + _258;
        float _871 = _463 + _259;
        float _881 = fma(_871, cbModelParam._m0[30u].z, fma(_870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869)) - _838;
        float _882 = fma(_871, cbModelParam._m0[31u].z, fma(_870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869)) - _842;
        float _883 = fma(_871, cbModelParam._m0[32u].z, fma(_870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869)) - _846;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_838 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_842 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[35u].z) + ((((((_846 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _937 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_904.x + (-0.5));
        float _939 = _937 * (_904.y + (-0.5));
        float _940 = _937 * (_904.z + (-0.5));
        float _947 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_911.x + (-0.5));
        float _949 = _947 * (_911.y + (-0.5));
        float _950 = _947 * (_911.z + (-0.5));
        float _957 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_918.x + (-0.5));
        float _959 = _957 * (_918.y + (-0.5));
        float _960 = _957 * (_918.z + (-0.5));
        float _967 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_925.x + (-0.5));
        float _969 = _967 * (_925.y + (-0.5));
        float _970 = _967 * (_925.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_257, _258, _259), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3305 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_1001 + 1.0))) + _1006) * _971;
        float _1016 = _939 * 0.5;
        float _1017 = _949 * 0.5;
        float _1018 = _959 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_257, _258, _259), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3338 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_1043 + 1.0))) + _1048) * _972;
        float _1058 = _940 * 0.5;
        float _1059 = _950 * 0.5;
        float _1060 = _960 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_257, _258, _259), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3371 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_1085 + 1.0))) + _1090) * _973;
        _1107 = _940;
        _1108 = _939;
        _1109 = _938;
        _1110 = _950;
        _1111 = _949;
        _1112 = _948;
        _1113 = _960;
        _1114 = _959;
        _1115 = _958;
        _1116 = _973;
        _1117 = _972;
        _1118 = _971;
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _795;
        _1108 = _795;
        _1109 = _795;
        _1110 = _795;
        _1111 = _795;
        _1112 = _795;
        _1113 = _795;
        _1114 = _795;
        _1115 = _795;
        _1116 = _795;
        _1117 = _795;
        _1118 = _795;
        _1119 = 0.0;
        _1120 = 0.0;
        _1121 = 0.0;
    }
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _807)) + _807;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _808)) + _808;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _809)) + _809;
    float _1154 = fma(_1133, cbSceneParam._m0[89u].z, fma(_1132, cbSceneParam._m0[89u].y, _1131 * cbSceneParam._m0[89u].x));
    float _1157 = fma(_1133, cbSceneParam._m0[90u].z, fma(_1132, cbSceneParam._m0[90u].y, _1131 * cbSceneParam._m0[90u].x));
    float _1160 = fma(_1133, cbSceneParam._m0[91u].z, fma(_1132, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1131));
    float _1175 = _431 * 0.5;
    float _1176 = _432 * 0.5;
    float _1177 = _433 * 0.5;
    float _1178 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1181 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1184 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1218;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1191 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_794, _798, _801, _804));
        float _1195 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_796, _799, _802, _805));
        float _1199 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_797, _800, _803, _806));
        float _1206 = dot(vec4(cbModelParam._m0[39u]), vec4(_1175, _1176, _1177, 1.0));
        _1218 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1218 = 1.0;
    }
    float _1229;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1220 = dot(vec4(cbModelParam._m0[40u]), vec4(_1175, _1176, _1177, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1233 = (_1229 * cbModelParam._m0[1u].x) + (_1218 * (1.0 - cbModelParam._m0[1u].x));
    float _1242 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1323;
    float _1325;
    float _1327;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1290 = fma(_463, cbModelParam._m0[13u].z, fma(_459, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455)) + cbModelParam._m0[13u].w;
        float _1294 = fma(_463, cbModelParam._m0[14u].z, fma(_459, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455)) + cbModelParam._m0[14u].w;
        float _1298 = fma(_463, cbModelParam._m0[15u].z, fma(_459, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455)) + cbModelParam._m0[15u].w;
        float _1301 = fma(_433, cbModelParam._m0[13u].z, fma(_432, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431));
        float _1304 = fma(_433, cbModelParam._m0[14u].z, fma(_432, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431));
        float _1307 = fma(_433, cbModelParam._m0[15u].z, fma(_432, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431));
        float _1333;
        if (_1301 > 0.0)
        {
            _1333 = abs((1.0 - _1290) / _1301);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1290 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1333 = frontier_phi_17_15_ladder;
        }
        float _1559;
        if (_1304 > 0.0)
        {
            _1559 = abs((1.0 - _1294) / _1304);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1294 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1559 = frontier_phi_26_22_ladder;
        }
        float _1751;
        if (_1307 > 0.0)
        {
            _1751 = abs((1.0 - _1298) / _1307);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1298 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1751 = frontier_phi_38_33_ladder;
        }
        float _1753 = isnan(_1559) ? _1333 : (isnan(_1333) ? _1559 : min(_1333, _1559));
        float _1754 = isnan(_1751) ? _1753 : (isnan(_1753) ? _1751 : min(_1753, _1751));
        float _1758 = (_1754 * _1301) + _1290;
        float _1759 = (_1754 * _1304) + _1294;
        float _1760 = (_1754 * _1307) + _1298;
        float _1761 = _1754 * 9.9999997473787516355514526367188e-05;
        float _1763 = (-1.0) - _1761;
        float _1765 = _1761 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1760 > _1765) || ((_1760 < _1763) || ((_1759 > _1765) || ((_1759 < _1763) || ((_1758 < _1763) || (_1758 > _1765))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1857 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1760, cbModelParam._m0[9u].z, fma(_1759, cbModelParam._m0[9u].y, _1758 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1760, cbModelParam._m0[10u].z, fma(_1759, cbModelParam._m0[10u].y, _1758 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1760, cbModelParam._m0[11u].z, fma(_1759, cbModelParam._m0[11u].y, _1758 * cbModelParam._m0[11u].x))), _1242);
            frontier_phi_16_38_ladder = _1857.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1857.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1857.x * cbModelParam._m0[1u].y;
        }
        _1323 = frontier_phi_16_38_ladder_2;
        _1325 = frontier_phi_16_38_ladder_1;
        _1327 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_431, _432, _433), _1242);
        _1323 = _1311.x * cbModelParam._m0[1u].y;
        _1325 = _1311.y * cbModelParam._m0[1u].y;
        _1327 = _1311.z * cbModelParam._m0[1u].y;
    }
    float _1330 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1386 = fma(_463, cbModelParam._m0[21u].z, fma(_459, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455)) + cbModelParam._m0[21u].w;
        float _1390 = fma(_463, cbModelParam._m0[22u].z, fma(_459, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455)) + cbModelParam._m0[22u].w;
        float _1394 = fma(_463, cbModelParam._m0[23u].z, fma(_459, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455)) + cbModelParam._m0[23u].w;
        float _1397 = fma(_433, cbModelParam._m0[21u].z, fma(_432, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431));
        float _1400 = fma(_433, cbModelParam._m0[22u].z, fma(_432, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431));
        float _1403 = fma(_433, cbModelParam._m0[23u].z, fma(_432, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431));
        float _1564;
        if (_1397 > 0.0)
        {
            _1564 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1564 = frontier_phi_28_24_ladder;
        }
        float _1778;
        if (_1400 > 0.0)
        {
            _1778 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1778 = frontier_phi_40_35_ladder;
        }
        float _1929;
        if (_1403 > 0.0)
        {
            _1929 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1929 = frontier_phi_49_46_ladder;
        }
        float _1931 = isnan(_1778) ? _1564 : (isnan(_1564) ? _1778 : min(_1564, _1778));
        float _1932 = isnan(_1929) ? _1931 : (isnan(_1931) ? _1929 : min(_1931, _1929));
        float _1936 = (_1932 * _1397) + _1386;
        float _1937 = (_1932 * _1400) + _1390;
        float _1938 = (_1932 * _1403) + _1394;
        float _1939 = _1932 * 9.9999997473787516355514526367188e-05;
        float _1940 = (-1.0) - _1939;
        float _1942 = _1939 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1938 > _1942) || ((_1938 < _1940) || ((_1937 > _1942) || ((_1937 < _1940) || ((_1936 < _1940) || (_1936 > _1942))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2178 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1938, cbModelParam._m0[17u].z, fma(_1937, cbModelParam._m0[17u].y, _1936 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1938, cbModelParam._m0[18u].z, fma(_1937, cbModelParam._m0[18u].y, _1936 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1938, cbModelParam._m0[19u].z, fma(_1937, cbModelParam._m0[19u].y, _1936 * cbModelParam._m0[19u].x))), _1330);
            frontier_phi_25_49_ladder = _2178.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2178.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2178.x * cbModelParam._m0[1u].z;
        }
        _1422 = frontier_phi_25_49_ladder_2;
        _1424 = frontier_phi_25_49_ladder_1;
        _1426 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_431, _432, _433), _1330);
        _1422 = _1406.x * cbModelParam._m0[1u].z;
        _1424 = _1406.y * cbModelParam._m0[1u].z;
        _1426 = _1406.z * cbModelParam._m0[1u].z;
    }
    float _1438 = _423 * 0.01200000010430812835693359375;
    float _1440 = _1438 * ((cbModelParam._m0[1u].w * (_1422 - _1323)) + _1323);
    float _1441 = _1438 * ((cbModelParam._m0[1u].w * (_1424 - _1325)) + _1325);
    float _1442 = _1438 * ((cbModelParam._m0[1u].w * (_1426 - _1327)) + _1327);
    float _1445 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, _1440 * cbSceneParam._m0[91u].x));
    vec4 _1459 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_357, _358));
    float _1461 = _1459.w;
    float _1473 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1461);
    float _1474 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1461);
    float _1475 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1461);
    uvec4 _1479 = floatBitsToUint(cbInstanceData._m0[_397 + 5u]);
    uint _1481 = _1479.x * 14u;
    uint _1482 = _1481 + 13u;
    float _1489 = _423 + (-1.0);
    float _1494 = (cbLight._m0[_1482].x * _1489) + 1.0;
    float _1495 = (cbLight._m0[_1482].y * _1489) + 1.0;
    float _1496 = (cbLight._m0[_1482].z * _1489) + 1.0;
    float _1497 = (cbLight._m0[_1482].w * _1489) + 1.0;
    uint _1498 = _1481 + 5u;
    float _1504 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
    uint _1508 = _1481 + 4u;
    float _1518 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
    uint _1522 = _1481 | 1u;
    float _1533 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_257, _258, _259));
    float _1536 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_257, _258, _259));
    float _3507 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _3518 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _1541 = (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * 0.3183098733425140380859375;
    float _1543 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.3183098733425140380859375;
    float _1550 = ((cbLight._m0[_1498].x * _1504) * _1543) + (((cbLight._m0[_1508].x * _1473) * _1518) * _1541);
    float _1551 = ((_1504 * cbLight._m0[_1498].y) * _1543) + (((cbLight._m0[_1508].y * _1474) * _1518) * _1541);
    float _1552 = ((_1504 * cbLight._m0[_1498].z) * _1543) + (((cbLight._m0[_1508].z * _1475) * _1518) * _1541);
    uvec4 _1556 = floatBitsToUint(cbLight._m0[_1481 + 12u]);
    bool _1558 = _1556.x == 0u;
    float _1569;
    float _1571;
    float _1573;
    if (_1558)
    {
        _1569 = _1550;
        _1571 = _1551;
        _1573 = _1552;
    }
    else
    {
        uint _1577 = _1481 + 6u;
        float _1593 = (dot(vec3(cbLight._m0[_1481 + 2u].xyz), vec3(_257, _258, _259)) * 0.5) + 0.5;
        float _1594 = _1593 * _1593;
        float _3529 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1596 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1569 = (((cbLight._m0[_1577].x * 0.3183098733425140380859375) * _1595) * _1596) + _1550;
        _1571 = (((cbLight._m0[_1577].y * 0.3183098733425140380859375) * _1595) * _1596) + _1551;
        _1573 = (((cbLight._m0[_1577].z * 0.3183098733425140380859375) * _1595) * _1596) + _1552;
    }
    bool _1576 = _1556.y == 0u;
    float _1614;
    float _1616;
    float _1618;
    if (_1576)
    {
        _1614 = _1569;
        _1616 = _1571;
        _1618 = _1573;
    }
    else
    {
        uint _1722 = _1481 + 7u;
        float _1738 = (dot(vec3(cbLight._m0[_1481 + 3u].xyz), vec3(_257, _258, _259)) * 0.5) + 0.5;
        float _1739 = _1738 * _1738;
        float _3545 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1741 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1614 = (((cbLight._m0[_1722].x * 0.3183098733425140380859375) * _1740) * _1741) + _1569;
        _1616 = (((cbLight._m0[_1722].y * 0.3183098733425140380859375) * _1740) * _1741) + _1571;
        _1618 = (((cbLight._m0[_1722].z * 0.3183098733425140380859375) * _1740) * _1741) + _1573;
    }
    uint _1620 = _1481 + 8u;
    float _1626 = cbLight._m0[_1481].x + _336;
    float _1627 = cbLight._m0[_1481].y + _337;
    float _1628 = cbLight._m0[_1481].z + _338;
    float _1632 = inversesqrt(dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628)));
    float _1636 = dot(vec3(_257, _258, _259), vec3(cbLight._m0[_1481].xyz));
    float _3561 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1639 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _1640 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _1641 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_1626 * _1632, _1627 * _1632, _1628 * _1632));
    float _3583 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1652 = (exp2(log2(1.0 - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1658 = (0.5 / ((_1639 + 9.9999999392252902907785028219223e-09) + _1640)) * _1639;
    float _3594 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1660 = (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * 0.31831014156341552734375;
    uint _1674 = _1481 + 9u;
    float _1680 = cbLight._m0[_1522].x + _336;
    float _1681 = cbLight._m0[_1522].y + _337;
    float _1682 = cbLight._m0[_1522].z + _338;
    float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
    float _1690 = dot(vec3(_257, _258, _259), vec3(cbLight._m0[_1522].xyz));
    float _3605 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _1694 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_1680 * _1686, _1681 * _1686, _1682 * _1686));
    float _3616 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1703 = (exp2(log2(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1707 = (0.5 / ((_1693 + 9.9999999392252902907785028219223e-09) + _1640)) * _1693;
    float _3627 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1709 = (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.31831014156341552734375;
    float _1719 = (((_1703 * cbLight._m0[_1674].x) * _1709) * _1504) + ((((cbLight._m0[_1620].x * _1473) * _1652) * _1660) * _1518);
    float _1720 = (((_1703 * cbLight._m0[_1674].y) * _1709) * _1504) + ((((cbLight._m0[_1620].y * _1474) * _1652) * _1660) * _1518);
    float _1721 = (((_1703 * cbLight._m0[_1674].z) * _1709) * _1504) + ((((cbLight._m0[_1620].z * _1475) * _1652) * _1660) * _1518);
    float _1783;
    float _1785;
    float _1787;
    if (_1558)
    {
        _1783 = _1719;
        _1785 = _1720;
        _1787 = _1721;
    }
    else
    {
        uint _1789 = _1481 + 10u;
        uint _1795 = _1481 + 2u;
        float _1801 = cbLight._m0[_1795].x + _336;
        float _1802 = cbLight._m0[_1795].y + _337;
        float _1803 = cbLight._m0[_1795].z + _338;
        float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
        float _1811 = dot(vec3(_257, _258, _259), vec3(cbLight._m0[_1795].xyz));
        float _3638 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1814 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1815 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1801 * _1807, _1802 * _1807, _1803 * _1807));
        float _3649 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = (exp2(log2(1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1828 = (0.5 / ((_1814 + 9.9999999392252902907785028219223e-09) + _1640)) * _1814;
        float _3660 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1830 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.31831014156341552734375;
        float _1831 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1783 = (((_1824 * cbLight._m0[_1789].x) * _1830) * _1831) + _1719;
        _1785 = (((_1824 * cbLight._m0[_1789].y) * _1830) * _1831) + _1720;
        _1787 = (((_1824 * cbLight._m0[_1789].z) * _1830) * _1831) + _1721;
    }
    float _1866;
    float _1868;
    float _1870;
    if (_1576)
    {
        _1866 = _1783;
        _1868 = _1785;
        _1870 = _1787;
    }
    else
    {
        uint _1877 = _1481 + 11u;
        uint _1883 = _1481 + 3u;
        float _1889 = cbLight._m0[_1883].x + _336;
        float _1890 = cbLight._m0[_1883].y + _337;
        float _1891 = cbLight._m0[_1883].z + _338;
        float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
        float _1899 = dot(vec3(_257, _258, _259), vec3(cbLight._m0[_1883].xyz));
        float _3676 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1902 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1903 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_1889 * _1895, _1890 * _1895, _1891 * _1895));
        float _3687 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1916 = (0.5 / ((_1902 + 9.9999999392252902907785028219223e-09) + _1640)) * _1902;
        float _3698 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1918 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.31831014156341552734375;
        float _1919 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1866 = (((_1912 * cbLight._m0[_1877].x) * _1918) * _1919) + _1783;
        _1868 = (((_1912 * cbLight._m0[_1877].y) * _1918) * _1919) + _1785;
        _1870 = (((_1912 * cbLight._m0[_1877].z) * _1918) * _1919) + _1787;
    }
    float _2054;
    float _2056;
    float _2058;
    float _2060;
    float _2062;
    float _2064;
    if (_1479.y == 0u)
    {
        float _1994 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1995 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1994;
        float _1996 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1994;
        float _1997 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1994;
        uvec4 _2009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2010 = _2009.x;
        uint _2021 = uint((float(_2009.y) * floor(float(uint(cbSceneParam._m0[85u].y * _358) / _2010))) + floor(float(uint(cbSceneParam._m0[85u].x * _357) / _2010)));
        float _2031 = (log2(_1997 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2032 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        uint _2035 = uint(isnan(14.0) ? _2032 : (isnan(_2032) ? 14.0 : min(_2032, 14.0)));
        uvec4 _2040 = texelFetch(g_lightClusterGridBuffer, int(((_2035 << 2u) + (_2021 << 6u)) >> 2u));
        uint _2041 = _2040.x;
        uint _2042 = _2009.z;
        float _2183;
        float _2185;
        float _2187;
        float _2189;
        float _2191;
        float _2193;
        if (((((1u << ((_2042 >> 4u) & 15u)) + 4294967295u) & _2041) == 0u) || ((_2042 & 240u) == 0u))
        {
            _2183 = 0.0;
            _2185 = 0.0;
            _2187 = 0.0;
            _2189 = 0.0;
            _2191 = 0.0;
            _2193 = 0.0;
        }
        else
        {
            float _2184;
            float _2186;
            float _2188;
            float _2190;
            float _2192;
            float _2194;
            float _2342 = 0.0;
            float _2343 = 0.0;
            float _2344 = 0.0;
            float _2345 = 0.0;
            float _2346 = 0.0;
            float _2347 = 0.0;
            uint _2348 = 0u;
            uint _2357;
            bool _2358;
            for (;;)
            {
                _2357 = texelFetch(g_lightClassification, int((((_2035 << 5u) + (_2021 << 9u)) + (_2348 << 2u)) >> 2u)).x;
                _2358 = _2357 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2358)
                {
                    frontier_phi_66_pred = _2342;
                    frontier_phi_66_pred_1 = _2347;
                    frontier_phi_66_pred_2 = _2346;
                    frontier_phi_66_pred_3 = _2345;
                    frontier_phi_66_pred_4 = _2344;
                    frontier_phi_66_pred_5 = _2343;
                }
                else
                {
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    uint _2493;
                    _2487 = _2342;
                    _2488 = _2343;
                    _2489 = _2344;
                    _2490 = _2345;
                    _2491 = _2346;
                    _2492 = _2347;
                    _2493 = _2357;
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    for (;;)
                    {
                        uint _2497 = uint(findLSB(_2493)) + (_2348 << 5u);
                        uint _2494 = (_2493 + 4294967295u) & _2493;
                        uint _2499 = _2497 * 48u;
                        vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2499)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 3u)).x));
                        uint _2519 = (_2497 * 48u) + 4u;
                        vec4 _2532 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 3u)).x));
                        uint _2538 = (_2497 * 48u) + 8u;
                        vec3 _2549 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2538)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 2u)).x));
                        float _2553 = _2513.x - _1995;
                        float _2554 = _2513.y - _1996;
                        float _2555 = _2513.z - _1997;
                        float _2556 = dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555));
                        float _2559 = inversesqrt(_2556);
                        float _2568 = 1.0 - (_2556 * _2513.w);
                        float _3724 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _2569 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
                        float _2570 = sqrt(_2556) * _2532.w;
                        float _2573 = 1.39999997615814208984375 / (_2570 + 1.39999997615814208984375);
                        float _2574 = _2573 * _2573;
                        float _2577 = ((1.0 - _2574) * dot(vec3(_378, _381, _384), vec3(_2559 * _2553, _2559 * _2554, _2559 * _2555))) + _2574;
                        float _2580 = _2570 * _2570;
                        float _2584 = ((isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0))) * _2569) / ((_2580 * 0.699999988079071044921875) + 1.0);
                        float _2588 = (-0.0) - _1995;
                        float _2589 = (-0.0) - _1996;
                        float _2590 = (-0.0) - _1997;
                        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
                        float _2598 = dot(vec3(_378, _381, _384), vec3(_2594 * _2588, _2594 * _2589, _2594 * _2590));
                        float _3740 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
                        float _3751 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                        float _2602 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                        float _2606 = (0.5 / (((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) + 9.9999999392252902907785028219223e-09) + _2602)) * _2602;
                        float _3762 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                        float _2615 = (((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 3.1415927410125732421875) / ((_2580 * 2.1991131305694580078125) + 3.141590118408203125)) * _2569;
                        _2417 = (_2584 * _2532.x) + _2490;
                        _2418 = (_2584 * _2532.y) + _2491;
                        _2419 = (_2584 * _2532.z) + _2492;
                        _2414 = (_2615 * _2549.x) + _2487;
                        _2415 = (_2615 * _2549.y) + _2488;
                        _2416 = (_2615 * _2549.z) + _2489;
                        if (_2494 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2487 = _2414;
                            _2488 = _2415;
                            _2489 = _2416;
                            _2490 = _2417;
                            _2491 = _2418;
                            _2492 = _2419;
                            _2493 = _2494;
                        }
                    }
                    frontier_phi_66_pred = _2414;
                    frontier_phi_66_pred_1 = _2419;
                    frontier_phi_66_pred_2 = _2418;
                    frontier_phi_66_pred_3 = _2417;
                    frontier_phi_66_pred_4 = _2416;
                    frontier_phi_66_pred_5 = _2415;
                }
                _2184 = frontier_phi_66_pred;
                _2194 = frontier_phi_66_pred_1;
                _2192 = frontier_phi_66_pred_2;
                _2190 = frontier_phi_66_pred_3;
                _2188 = frontier_phi_66_pred_4;
                _2186 = frontier_phi_66_pred_5;
                uint _2349 = _2348 + 1u;
                if (_2349 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2342 = _2184;
                    _2343 = _2186;
                    _2344 = _2188;
                    _2345 = _2190;
                    _2346 = _2192;
                    _2347 = _2194;
                    _2348 = _2349;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2183 = _2184;
            _2185 = _2186;
            _2187 = _2188;
            _2189 = _2190;
            _2191 = _2192;
            _2193 = _2194;
        }
        uvec4 _2197 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2198 = _2197.z;
        uint _2200 = (_2198 >> 8u) & 15u;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        if (((4294967295u << _2200) & _2041) == 0u)
        {
            _2313 = _2183;
            _2315 = _2185;
            _2317 = _2187;
            _2319 = _2189;
            _2321 = _2191;
            _2323 = _2193;
        }
        else
        {
            float _2338 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2200 < ((_2198 >> 12u) & 15u))
            {
                float _2314;
                float _2316;
                float _2318;
                float _2320;
                float _2322;
                float _2324;
                float _2470 = _2183;
                float _2471 = _2185;
                float _2472 = _2187;
                float _2473 = _2189;
                float _2474 = _2191;
                float _2475 = _2193;
                uint _2476 = _2200;
                uint _2485;
                bool _2486;
                for (;;)
                {
                    _2485 = texelFetch(g_lightClassification, int((((_2035 << 5u) + (_2021 << 9u)) + (_2476 << 2u)) >> 2u)).x;
                    _2486 = _2485 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2486)
                    {
                        frontier_phi_77_pred = _2475;
                        frontier_phi_77_pred_1 = _2474;
                        frontier_phi_77_pred_2 = _2473;
                        frontier_phi_77_pred_3 = _2472;
                        frontier_phi_77_pred_4 = _2471;
                        frontier_phi_77_pred_5 = _2470;
                    }
                    else
                    {
                        float _2629;
                        float _2630;
                        float _2631;
                        float _2632;
                        float _2633;
                        float _2634;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2642 = _2470;
                        float _2643 = _2471;
                        float _2644 = _2472;
                        float _2645 = _2473;
                        float _2646 = _2474;
                        float _2647 = _2475;
                        uint _2648 = _2485;
                        uint _2649;
                        vec4 _2674;
                        float _2675;
                        vec4 _2690;
                        vec3 _2702;
                        vec4 _2718;
                        vec4 _2734;
                        float _2781;
                        bool _2782;
                        for (;;)
                        {
                            uint _2659 = ((_2476 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2648));
                            _2649 = (_2648 + 4294967295u) & _2648;
                            uint _2661 = _2659 * 40u;
                            _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            _2675 = _2674.w;
                            uint _2677 = (_2659 * 40u) + 4u;
                            _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            uint _2692 = (_2659 * 40u) + 8u;
                            _2702 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x));
                            uint _2705 = (_2659 * 40u) + 16u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2721 = (_2659 * 40u) + 20u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            uint _2737 = (_2659 * 40u) + 24u;
                            vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2756 = (_2659 * 40u) + 28u;
                            vec4 _2769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 3u)).x));
                            _2781 = fma(_1997, _2769.z, fma(_1996, _2769.y, _2769.x * _1995)) + _2769.w;
                            _2782 = !((fma(_1997, _2750.z, fma(_1996, _2750.y, _2750.x * _1995)) + _2750.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2782)
                            {
                                float _2809 = _2674.x - _1995;
                                float _2810 = _2674.y - _1996;
                                float _2811 = _2674.z - _1997;
                                float _2812 = dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811));
                                float _2815 = inversesqrt(_2812);
                                float _2816 = _2815 * _2809;
                                float _2817 = _2815 * _2810;
                                float _2818 = _2815 * _2811;
                                float _2822 = 1.0 - (_2812 / (_2675 * _2675));
                                float _3773 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2823 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
                                float _2827 = sqrt(_2812) * _2690.w;
                                float _2829 = 1.39999997615814208984375 / (_2827 + 1.39999997615814208984375);
                                float _2830 = _2829 * _2829;
                                float _2831 = 1.0 - _2830;
                                float _2833 = (_2831 * dot(vec3(_2816, _2817, _2818), vec3(_378, _381, _384))) + _2830;
                                float _2836 = _2827 * _2827;
                                float _2840 = (fma(_1997, _2718.z, fma(_1996, _2718.y, _2718.x * _1995)) + _2718.w) / _2781;
                                float _2841 = (fma(_1997, _2734.z, fma(_1996, _2734.y, _2734.x * _1995)) + _2734.w) / _2781;
                                float _2845 = 1.0 - dot(vec2(_2840, _2841), vec2(_2840, _2841));
                                float _3789 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                                float _2846 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                                float _2847 = _2846 * (((isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))) * _2823) / ((_2836 * 0.699999988079071044921875) + 1.0));
                                float _2857 = dot(vec3(_378, _381, _384), vec3((-0.0) - (_1995 * _2338), (-0.0) - (_1996 * _2338), (-0.0) - (_1997 * _2338)));
                                float _3800 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                                float _2865 = (_2831 * dot(vec3(_378, _381, _384), vec3(_2816, _2817, _2818))) + _2830;
                                float _3811 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                                float _2866 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
                                float _2870 = (0.5 / (((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) + 9.9999999392252902907785028219223e-09) + _2866)) * _2866;
                                float _3822 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                                float _2877 = (_2846 * _2823) * (((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 3.1415927410125732421875) / ((_2836 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2847 * _2690.y;
                                frontier_phi_83_pred_1 = _2847 * _2690.x;
                                frontier_phi_83_pred_2 = _2877 * _2702.z;
                                frontier_phi_83_pred_3 = _2877 * _2702.y;
                                frontier_phi_83_pred_4 = _2877 * _2702.x;
                                frontier_phi_83_pred_5 = _2847 * _2690.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2885 = frontier_phi_83_pred;
                            _2884 = frontier_phi_83_pred_1;
                            _2883 = frontier_phi_83_pred_2;
                            _2882 = frontier_phi_83_pred_3;
                            _2881 = frontier_phi_83_pred_4;
                            _2886 = frontier_phi_83_pred_5;
                            _2632 = _2884 + _2645;
                            _2633 = _2885 + _2646;
                            _2634 = _2886 + _2647;
                            _2629 = _2881 + _2642;
                            _2630 = _2882 + _2643;
                            _2631 = _2883 + _2644;
                            if (_2649 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2642 = _2629;
                                _2643 = _2630;
                                _2644 = _2631;
                                _2645 = _2632;
                                _2646 = _2633;
                                _2647 = _2634;
                                _2648 = _2649;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2634;
                        frontier_phi_77_pred_1 = _2633;
                        frontier_phi_77_pred_2 = _2632;
                        frontier_phi_77_pred_3 = _2631;
                        frontier_phi_77_pred_4 = _2630;
                        frontier_phi_77_pred_5 = _2629;
                    }
                    _2324 = frontier_phi_77_pred;
                    _2322 = frontier_phi_77_pred_1;
                    _2320 = frontier_phi_77_pred_2;
                    _2318 = frontier_phi_77_pred_3;
                    _2316 = frontier_phi_77_pred_4;
                    _2314 = frontier_phi_77_pred_5;
                    uint _2477 = _2476 + 1u;
                    if (_2477 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2470 = _2314;
                        _2471 = _2316;
                        _2472 = _2318;
                        _2473 = _2320;
                        _2474 = _2322;
                        _2475 = _2324;
                        _2476 = _2477;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2318;
                frontier_phi_58_59_ladder_1 = _2324;
                frontier_phi_58_59_ladder_2 = _2322;
                frontier_phi_58_59_ladder_3 = _2320;
                frontier_phi_58_59_ladder_4 = _2316;
                frontier_phi_58_59_ladder_5 = _2314;
            }
            else
            {
                frontier_phi_58_59_ladder = _2187;
                frontier_phi_58_59_ladder_1 = _2193;
                frontier_phi_58_59_ladder_2 = _2191;
                frontier_phi_58_59_ladder_3 = _2189;
                frontier_phi_58_59_ladder_4 = _2185;
                frontier_phi_58_59_ladder_5 = _2183;
            }
            _2313 = frontier_phi_58_59_ladder_5;
            _2315 = frontier_phi_58_59_ladder_4;
            _2317 = frontier_phi_58_59_ladder;
            _2319 = frontier_phi_58_59_ladder_3;
            _2321 = frontier_phi_58_59_ladder_2;
            _2323 = frontier_phi_58_59_ladder_1;
        }
        float _2328 = isnan(1.0) ? _423 : (isnan(_423) ? 1.0 : min(_423, 1.0));
        _2054 = (_2328 * _2319) + _1614;
        _2056 = (_2328 * _2321) + _1616;
        _2058 = (_2328 * _2323) + _1618;
        _2060 = ((_2313 * 0.039999999105930328369140625) * _2328) + _1866;
        _2062 = ((_2315 * 0.039999999105930328369140625) * _2328) + _1868;
        _2064 = ((_2317 * 0.039999999105930328369140625) * _2328) + _1870;
    }
    else
    {
        _2054 = _1614;
        _2056 = _1616;
        _2058 = _1618;
        _2060 = _1866;
        _2062 = _1868;
        _2064 = _1870;
    }
    uint _2070 = _399 + uint(cbMatDynParam._m0[0u].w);
    float _2080 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _222.x) * cbSceneParam._m0[72u].y) * _248) * cbInstanceData._m0[_2070].x;
    float _2085 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _222.y) * cbSceneParam._m0[72u].y) * _248) * cbInstanceData._m0[_2070].y;
    float _2090 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _222.z) * cbSceneParam._m0[72u].y) * _248) * cbInstanceData._m0[_2070].z;
    float _3838 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3849 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3860 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _2107 = (((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_2054 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _423))) + ((_2060 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _1233)) * cbPerFrame._m0[3u].x)) + _2080;
    float _2109 = (_2085 + ((_2062 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1233)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_2056 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _423)));
    float _2111 = (_2090 + ((_2064 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1233)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_2058 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _423)));
    float _2112 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2113 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2114 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2120 = cbMtdParam._m0[2u].x * _2080;
    float _2121 = cbMtdParam._m0[2u].y * _2085;
    float _2122 = cbMtdParam._m0[2u].z * _2090;
    float _3886 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2124 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    uint _2125 = _397 + 6u;
    float _2133 = _357 / cbSceneParam._m0[86u].x;
    float _2134 = _358 / cbSceneParam._m0[86u].y;
    vec4 _2148 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2133, _2134, (log2((isnan(cbSceneParam._m0[77u].w) ? _278 : (isnan(_278) ? cbSceneParam._m0[77u].w : min(_278, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2150 = _2148.x;
    float _2151 = _2148.y;
    float _2152 = _2148.z;
    float _2153 = _2148.w;
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    if (_278 > cbSceneParam._m0[78u].w)
    {
        float _2208 = isnan(_278) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _278 : min(cbSceneParam._m0[80u].w, _278));
        float _2209 = _2208 / _278;
        float _2220 = _2209 * _329;
        float _2221 = _330 * _2209;
        float _2222 = (-0.0) - _2221;
        float _2224 = _2209 * _331;
        float _2226 = (cbSceneParam._m0[77u].w * _2222) / _2208;
        float _2227 = _2226 + cbSceneParam._m0[79u].w;
        float _2228 = cbSceneParam._m0[79u].w - _2221;
        float _2234 = sqrt(((_2220 * _2220) + (_2221 * _2221)) + (_2224 * _2224));
        float _2237 = (1.0 - (cbSceneParam._m0[77u].w / _2208)) * _2234;
        float _2242 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2244 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2427;
        if (abs((_2222 - _2226) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2427 = ((((_2227 > 0.0) ? exp2(_2242 * _2227) : (2.0 - exp2(_2244 * _2227))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2237;
        }
        else
        {
            float _2371 = 1.0 / cbSceneParam._m0[80u].x;
            float _2372 = isnan(_2228) ? _2227 : (isnan(_2227) ? _2228 : max(_2227, _2228));
            float _2373 = isnan(_2228) ? _2227 : (isnan(_2227) ? _2228 : min(_2227, _2228));
            float _2382 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : min(_2372, 0.0));
            float _2383 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : min(_2373, 0.0));
            _2427 = ((abs(_2234 / _2222) * cbSceneParam._m0[80u].y) * ((((_2382 - _2383) * 2.0) - ((exp2(_2242 * (isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0)))) - exp2(_2242 * (isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0))))) * _2371)) - ((exp2(_2244 * _2382) - exp2(_2244 * _2383)) * _2371))) + (_2237 * cbSceneParam._m0[80u].z);
        }
        vec4 _2429 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2133, _2134, 1.0), 0.0);
        float _2438 = exp2((_2427 * (-1.44269502162933349609375)) * (1.0 - _2429.w));
        float _2439 = log2(_2438);
        float _2455 = log2(_2153);
        _2246 = (exp2(_2455 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2439 * cbSceneParam._m0[78u].x)) * _2429.x) / cbSceneParam._m0[78u].x)) + _2150;
        _2248 = (exp2(_2455 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2439 * cbSceneParam._m0[78u].y)) * _2429.y) / cbSceneParam._m0[78u].y)) + _2151;
        _2250 = (exp2(_2455 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2439 * cbSceneParam._m0[78u].z)) * _2429.z) / cbSceneParam._m0[78u].z)) + _2152;
        _2252 = _2438 * _2153;
    }
    else
    {
        _2246 = _2150;
        _2248 = _2151;
        _2250 = _2152;
        _2252 = _2153;
    }
    bool _2465;
    vec4 _2261;
    vec4 _2283;
    float _2285;
    float _2289;
    float _2290;
    float _2291;
    float _2294;
    float _2297;
    float _2300;
    float _2301;
    bool _2312;
    for (;;)
    {
        _2261 = cbMatDynParam._m0[0u];
        float _2263 = roundEven(_2261.y);
        bool _2264 = _2263 == 3.0;
        float _2265 = log2(_2252);
        float _2269 = exp2(_2265 * cbSceneParam._m0[78u].x);
        float _2270 = exp2(_2265 * cbSceneParam._m0[78u].y);
        float _2271 = exp2(_2265 * cbSceneParam._m0[78u].z);
        float _2272 = _2269 * _2112;
        float _2273 = _2270 * _2113;
        float _2274 = _2271 * _2114;
        float _2281 = _345 + (-0.5);
        _2283 = cbMtdParam._m0[1u];
        _2285 = _2283.y * _2281;
        float _2288 = (_2263 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2289 = _2288 * (_2264 ? _2272 : (_2272 + (cbSceneParam._m0[72u].w * _2246)));
        _2290 = _2288 * (_2264 ? _2273 : (_2273 + (cbSceneParam._m0[72u].w * _2248)));
        _2291 = _2288 * (_2264 ? _2274 : (_2274 + (cbSceneParam._m0[72u].w * _2250)));
        _2294 = ((_2120 * _2124) * _2269) * _2288;
        _2297 = ((_2121 * _2124) * _2270) * _2288;
        _2300 = ((_2122 * _2124) * _2271) * _2288;
        _2301 = _2281 * 0.999000012874603271484375;
        _2312 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2312)
        {
            if ((cbInstanceData._m0[_397 + 7u].x + _2301) < 0.5)
            {
                _2465 = true;
                break;
            }
        }
        uint _2406 = _399 + uint(_2261.w);
        if ((cbInstanceData._m0[_2406].w < 1.0) && ((cbInstanceData._m0[_2406].w + _2301) < 0.5))
        {
            _2465 = true;
            break;
        }
        if ((_2285 + 1.0) < _2283.x)
        {
            _2465 = true;
            break;
        }
        _2465 = false;
        break;
    }
    float _2620;
    if (_2465)
    {
        discard_state = true;
        _2620 = 0.0;
    }
    else
    {
        _2620 = cbInstanceData._m0[_2125].w;
    }
    SV_Target.x = _2289;
    SV_Target.y = _2290;
    SV_Target.z = _2291;
    SV_Target.w = _2620;
    SV_Target_1.x = _2294;
    SV_Target_1.y = _2297;
    SV_Target_1.z = _2300;
    SV_Target_1.w = cbInstanceData._m0[_2125].w;
    discard_exit();
}


