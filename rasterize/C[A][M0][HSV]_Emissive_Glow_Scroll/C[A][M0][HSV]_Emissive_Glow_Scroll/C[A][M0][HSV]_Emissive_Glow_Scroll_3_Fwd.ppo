#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _759;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _186 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _231 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _244 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2913 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _246 = isnan(1.0) ? _2913 : (isnan(_2913) ? 1.0 : min(_2913, 1.0));
    float _254 = (((_246 * _246) * (3.0 - (_246 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _262 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _263 = _262 * _165;
    float _264 = _262 * _166;
    float _265 = _262 * _167;
    float _2924 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2935 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2946 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _284 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _325 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _335 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _325);
    float _336 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _325);
    float _337 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _325);
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _342 = _335 * _341;
    float _343 = _336 * _341;
    float _344 = _337 * _341;
    float _350 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _351 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _372 = fma(_265, cbSceneParam._m0[5u].z, fma(_264, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _263));
    float _375 = fma(_265, cbSceneParam._m0[6u].z, fma(_264, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _263));
    float _378 = fma(_265, cbSceneParam._m0[7u].z, fma(_264, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _263));
    uint _391 = uint(roundEven(NORMAL.w)) * 13u;
    uint _392 = _391 + 9u;
    uint _393 = _392 + uint(cbMatDynParam._m0[0u].w);
    float _399 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0)))) * cbInstanceData._m0[_393].x;
    float _400 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)))) * cbInstanceData._m0[_393].y;
    float _401 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0)))) * cbInstanceData._m0[_393].z;
    float _2957 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
    float _2968 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _403 = isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0));
    float _2979 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0));
    vec4 _413 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _350, cbSceneParam._m0[86u].y * _351));
    float _416 = _413.x * TEXCOORD.z;
    float _417 = dot(vec3(_263, _264, _265), vec3(_342, _343, _344));
    float _420 = _417 * 2.0;
    float _424 = (_420 * _263) - _342;
    float _425 = (_420 * _264) - _343;
    float _426 = (_420 * _265) - _344;
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _758;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _483 = fma(_456, cbModelParam._m0[26u].z, fma(_452, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _448));
        float _487 = fma(_456, cbModelParam._m0[27u].z, fma(_452, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _448));
        float _491 = fma(_456, cbModelParam._m0[28u].z, fma(_452, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _448));
        float _516 = _448 + _263;
        float _517 = _452 + _264;
        float _518 = _456 + _265;
        float _528 = fma(_518, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _516)) - _483;
        float _529 = fma(_518, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _516)) - _487;
        float _530 = fma(_518, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _516)) - _491;
        float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
        float _547 = ((_534 * _528) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_483 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _548 = ((_534 * _529) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_487 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _549 = ((_534 * _530) / cbModelParam._m0[34u].z) + ((((((_491 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        float _586 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_552.x + (-0.5));
        float _588 = _586 * (_552.y + (-0.5));
        float _589 = _586 * (_552.z + (-0.5));
        float _596 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_559.x + (-0.5));
        float _598 = _596 * (_559.y + (-0.5));
        float _599 = _596 * (_559.z + (-0.5));
        float _606 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_566.x + (-0.5));
        float _608 = _606 * (_566.y + (-0.5));
        float _609 = _606 * (_566.z + (-0.5));
        float _616 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_573.x + (-0.5));
        float _618 = _616 * (_573.y + (-0.5));
        float _619 = _616 * (_573.z + (-0.5));
        float _620 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _621 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        float _622 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _623 = _587 * 0.5;
        float _624 = _597 * 0.5;
        float _625 = _607 * 0.5;
        float _626 = dot(vec3(_623, _624, _625), vec3(_623, _624, _625));
        float _631 = (_626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_626);
        float _640 = (dot(vec3(_263, _264, _265), vec3(_631 * _623, _631 * _624, _631 * _625)) + 1.0) * 0.5;
        float _3005 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _650 = sqrt(((_624 * _624) + (_623 * _623)) + (_625 * _625)) / (_620 + 9.9999997473787516355514526367188e-06);
        float _3016 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
        float _652 = _651 * 2.0;
        float _656 = (1.0 - _651) / (_651 + 1.0);
        float _3027 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
        float _666 = ((((1.0 - _657) * (_652 + 2.0)) * exp2(log2(isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) * (_652 + 1.0))) + _657) * _620;
        float _667 = _588 * 0.5;
        float _668 = _598 * 0.5;
        float _669 = _608 * 0.5;
        float _670 = dot(vec3(_667, _668, _669), vec3(_667, _668, _669));
        float _675 = (_670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_670);
        float _683 = (dot(vec3(_263, _264, _265), vec3(_675 * _667, _675 * _668, _675 * _669)) + 1.0) * 0.5;
        float _3038 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _692 = sqrt(((_668 * _668) + (_667 * _667)) + (_669 * _669)) / (_621 + 9.9999997473787516355514526367188e-06);
        float _3049 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
        float _694 = _693 * 2.0;
        float _698 = (1.0 - _693) / (_693 + 1.0);
        float _3060 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _708 = ((((1.0 - _699) * (_694 + 2.0)) * exp2(log2(isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * (_694 + 1.0))) + _699) * _621;
        float _709 = _589 * 0.5;
        float _710 = _599 * 0.5;
        float _711 = _609 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _725 = (dot(vec3(_263, _264, _265), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3071 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _734 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_622 + 9.9999997473787516355514526367188e-06);
        float _3082 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3093 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) * (_736 + 1.0))) + _741) * _622;
        _758 = _589;
        _760 = _588;
        _761 = _587;
        _762 = _599;
        _763 = _598;
        _764 = _597;
        _765 = _609;
        _766 = _608;
        _767 = _607;
        _768 = _622;
        _769 = _621;
        _770 = _620;
        _771 = cbModelParam._m0[36u].z * (isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0)));
        _772 = cbModelParam._m0[36u].z * (isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0)));
        _773 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
    }
    else
    {
        _758 = _759;
        _760 = _759;
        _761 = _759;
        _762 = _759;
        _763 = _759;
        _764 = _759;
        _765 = _759;
        _766 = _759;
        _767 = _759;
        _768 = _759;
        _769 = _759;
        _770 = _759;
        _771 = 0.0;
        _772 = 0.0;
        _773 = 0.0;
    }
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _799 = fma(_456, cbModelParam._m0[30u].z, fma(_452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _448));
        float _803 = fma(_456, cbModelParam._m0[31u].z, fma(_452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _448));
        float _807 = fma(_456, cbModelParam._m0[32u].z, fma(_452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _448));
        float _830 = _448 + _263;
        float _831 = _452 + _264;
        float _832 = _456 + _265;
        float _842 = fma(_832, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830)) - _799;
        float _843 = fma(_832, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830)) - _803;
        float _844 = fma(_832, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830)) - _807;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_799 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_803 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[35u].z) + ((((((_807 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _898 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_865.x + (-0.5));
        float _900 = _898 * (_865.y + (-0.5));
        float _901 = _898 * (_865.z + (-0.5));
        float _908 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_872.x + (-0.5));
        float _910 = _908 * (_872.y + (-0.5));
        float _911 = _908 * (_872.z + (-0.5));
        float _918 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_879.x + (-0.5));
        float _920 = _918 * (_879.y + (-0.5));
        float _921 = _918 * (_879.z + (-0.5));
        float _928 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_886.x + (-0.5));
        float _930 = _928 * (_886.y + (-0.5));
        float _931 = _928 * (_886.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_263, _264, _265), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3134 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3145 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3156 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0))) * (_962 + 1.0))) + _967) * _932;
        float _977 = _900 * 0.5;
        float _978 = _910 * 0.5;
        float _979 = _920 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_263, _264, _265), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3167 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3178 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3189 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))) * (_1004 + 1.0))) + _1009) * _933;
        float _1019 = _901 * 0.5;
        float _1020 = _911 * 0.5;
        float _1021 = _921 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_263, _264, _265), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3200 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3211 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3222 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * (_1046 + 1.0))) + _1051) * _934;
        _1068 = _901;
        _1069 = _900;
        _1070 = _899;
        _1071 = _911;
        _1072 = _910;
        _1073 = _909;
        _1074 = _921;
        _1075 = _920;
        _1076 = _919;
        _1077 = _934;
        _1078 = _933;
        _1079 = _932;
        _1080 = cbModelParam._m0[36u].w * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1081 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1082 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _759;
        _1069 = _759;
        _1070 = _759;
        _1071 = _759;
        _1072 = _759;
        _1073 = _759;
        _1074 = _759;
        _1075 = _759;
        _1076 = _759;
        _1077 = _759;
        _1078 = _759;
        _1079 = _759;
        _1080 = 0.0;
        _1081 = 0.0;
        _1082 = 0.0;
    }
    float _1092 = (cbModelParam._m0[1u].x * (_1080 - _771)) + _771;
    float _1093 = (cbModelParam._m0[1u].x * (_1081 - _772)) + _772;
    float _1094 = (cbModelParam._m0[1u].x * (_1082 - _773)) + _773;
    float _1115 = fma(_1094, cbSceneParam._m0[89u].z, fma(_1093, cbSceneParam._m0[89u].y, _1092 * cbSceneParam._m0[89u].x));
    float _1118 = fma(_1094, cbSceneParam._m0[90u].z, fma(_1093, cbSceneParam._m0[90u].y, _1092 * cbSceneParam._m0[90u].x));
    float _1121 = fma(_1094, cbSceneParam._m0[91u].z, fma(_1093, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1092));
    float _1136 = _424 * 0.5;
    float _1137 = _425 * 0.5;
    float _1138 = _426 * 0.5;
    float _1139 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_1070, _1073, _1076, _1079));
    float _1142 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_1069, _1072, _1075, _1078));
    float _1145 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_1068, _1071, _1074, _1077));
    float _1179;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1152 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_758, _762, _765, _768));
        float _1156 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_760, _763, _766, _769));
        float _1160 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_761, _764, _767, _770));
        float _1167 = dot(vec4(cbModelParam._m0[39u]), vec4(_1136, _1137, _1138, 1.0));
        _1179 = dot(vec3(isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1167) ? 0.0 : (isnan(0.0) ? _1167 : max(0.0, _1167))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1179 = 1.0;
    }
    float _1190;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1181 = dot(vec4(cbModelParam._m0[40u]), vec4(_1136, _1137, _1138, 1.0));
        _1190 = dot(vec3(isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1181) ? 0.0 : (isnan(0.0) ? _1181 : max(0.0, _1181))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1190 = 1.0;
    }
    float _1194 = (_1190 * cbModelParam._m0[1u].x) + (_1179 * (1.0 - cbModelParam._m0[1u].x));
    float _1203 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1284;
    float _1286;
    float _1288;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1251 = fma(_456, cbModelParam._m0[13u].z, fma(_452, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _448)) + cbModelParam._m0[13u].w;
        float _1255 = fma(_456, cbModelParam._m0[14u].z, fma(_452, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _448)) + cbModelParam._m0[14u].w;
        float _1259 = fma(_456, cbModelParam._m0[15u].z, fma(_452, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _448)) + cbModelParam._m0[15u].w;
        float _1262 = fma(_426, cbModelParam._m0[13u].z, fma(_425, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _424));
        float _1265 = fma(_426, cbModelParam._m0[14u].z, fma(_425, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _424));
        float _1268 = fma(_426, cbModelParam._m0[15u].z, fma(_425, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _424));
        float _1294;
        if (_1262 > 0.0)
        {
            _1294 = abs((1.0 - _1251) / _1262);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1251 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1294 = frontier_phi_14_12_ladder;
        }
        float _1499;
        if (_1265 > 0.0)
        {
            _1499 = abs((1.0 - _1255) / _1265);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1255 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1499 = frontier_phi_23_19_ladder;
        }
        float _1688;
        if (_1268 > 0.0)
        {
            _1688 = abs((1.0 - _1259) / _1268);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1259 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1688 = frontier_phi_35_30_ladder;
        }
        float _1690 = isnan(_1499) ? _1294 : (isnan(_1294) ? _1499 : min(_1294, _1499));
        float _1691 = isnan(_1688) ? _1690 : (isnan(_1690) ? _1688 : min(_1690, _1688));
        float _1695 = (_1691 * _1262) + _1251;
        float _1696 = (_1691 * _1265) + _1255;
        float _1697 = (_1691 * _1268) + _1259;
        float _1698 = _1691 * 9.9999997473787516355514526367188e-05;
        float _1700 = (-1.0) - _1698;
        float _1702 = _1698 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1697 > _1702) || ((_1697 < _1700) || ((_1696 > _1702) || ((_1696 < _1700) || ((_1695 < _1700) || (_1695 > _1702))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1697, cbModelParam._m0[9u].z, fma(_1696, cbModelParam._m0[9u].y, _1695 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1697, cbModelParam._m0[10u].z, fma(_1696, cbModelParam._m0[10u].y, _1695 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1697, cbModelParam._m0[11u].z, fma(_1696, cbModelParam._m0[11u].y, _1695 * cbModelParam._m0[11u].x))), _1203);
            frontier_phi_13_35_ladder = _1794.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1794.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1794.x * cbModelParam._m0[1u].y;
        }
        _1284 = frontier_phi_13_35_ladder_2;
        _1286 = frontier_phi_13_35_ladder_1;
        _1288 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_424, _425, _426), _1203);
        _1284 = _1272.x * cbModelParam._m0[1u].y;
        _1286 = _1272.y * cbModelParam._m0[1u].y;
        _1288 = _1272.z * cbModelParam._m0[1u].y;
    }
    float _1291 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1347 = fma(_456, cbModelParam._m0[21u].z, fma(_452, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _448)) + cbModelParam._m0[21u].w;
        float _1351 = fma(_456, cbModelParam._m0[22u].z, fma(_452, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _448)) + cbModelParam._m0[22u].w;
        float _1355 = fma(_456, cbModelParam._m0[23u].z, fma(_452, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _448)) + cbModelParam._m0[23u].w;
        float _1358 = fma(_426, cbModelParam._m0[21u].z, fma(_425, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _424));
        float _1361 = fma(_426, cbModelParam._m0[22u].z, fma(_425, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _424));
        float _1364 = fma(_426, cbModelParam._m0[23u].z, fma(_425, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _424));
        float _1504;
        if (_1358 > 0.0)
        {
            _1504 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1504 = frontier_phi_25_21_ladder;
        }
        float _1715;
        if (_1361 > 0.0)
        {
            _1715 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1715 = frontier_phi_37_32_ladder;
        }
        float _1866;
        if (_1364 > 0.0)
        {
            _1866 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1866 = frontier_phi_46_43_ladder;
        }
        float _1868 = isnan(_1715) ? _1504 : (isnan(_1504) ? _1715 : min(_1504, _1715));
        float _1869 = isnan(_1866) ? _1868 : (isnan(_1868) ? _1866 : min(_1868, _1866));
        float _1873 = (_1869 * _1358) + _1347;
        float _1874 = (_1869 * _1361) + _1351;
        float _1875 = (_1869 * _1364) + _1355;
        float _1876 = _1869 * 9.9999997473787516355514526367188e-05;
        float _1877 = (-1.0) - _1876;
        float _1879 = _1876 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1875 > _1879) || ((_1875 < _1877) || ((_1874 > _1879) || ((_1874 < _1877) || ((_1873 < _1877) || (_1873 > _1879))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1875, cbModelParam._m0[17u].z, fma(_1874, cbModelParam._m0[17u].y, _1873 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1875, cbModelParam._m0[18u].z, fma(_1874, cbModelParam._m0[18u].y, _1873 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1875, cbModelParam._m0[19u].z, fma(_1874, cbModelParam._m0[19u].y, _1873 * cbModelParam._m0[19u].x))), _1291);
            frontier_phi_22_46_ladder = _2115.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2115.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2115.x * cbModelParam._m0[1u].z;
        }
        _1383 = frontier_phi_22_46_ladder_2;
        _1385 = frontier_phi_22_46_ladder_1;
        _1387 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_424, _425, _426), _1291);
        _1383 = _1367.x * cbModelParam._m0[1u].z;
        _1385 = _1367.y * cbModelParam._m0[1u].z;
        _1387 = _1367.z * cbModelParam._m0[1u].z;
    }
    float _1399 = _416 * 0.01200000010430812835693359375;
    float _1401 = _1399 * ((cbModelParam._m0[1u].w * (_1383 - _1284)) + _1284);
    float _1402 = _1399 * ((cbModelParam._m0[1u].w * (_1385 - _1286)) + _1286);
    float _1403 = _1399 * ((cbModelParam._m0[1u].w * (_1387 - _1288)) + _1288);
    float _1406 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, _1401 * cbSceneParam._m0[91u].x));
    uvec4 _1422 = floatBitsToUint(cbInstanceData._m0[_391 + 5u]);
    uint _1424 = _1422.x * 14u;
    uint _1425 = _1424 + 13u;
    float _1432 = _416 + (-1.0);
    float _1437 = (cbLight._m0[_1425].x * _1432) + 1.0;
    float _1438 = (cbLight._m0[_1425].y * _1432) + 1.0;
    float _1439 = (cbLight._m0[_1425].z * _1432) + 1.0;
    float _1440 = (cbLight._m0[_1425].w * _1432) + 1.0;
    uint _1441 = _1424 + 5u;
    float _1447 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
    uint _1451 = _1424 + 4u;
    float _1458 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
    uint _1462 = _1424 | 1u;
    float _1473 = dot(vec3(cbLight._m0[_1424].xyz), vec3(_263, _264, _265));
    float _1476 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_263, _264, _265));
    float _3358 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _3369 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
    float _1481 = (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * 0.3183098733425140380859375;
    float _1483 = (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * 0.3183098733425140380859375;
    float _1490 = ((cbLight._m0[_1441].x * _1447) * _1483) + ((cbLight._m0[_1451].x * _1458) * _1481);
    float _1491 = ((_1447 * cbLight._m0[_1441].y) * _1483) + ((_1458 * cbLight._m0[_1451].y) * _1481);
    float _1492 = ((_1447 * cbLight._m0[_1441].z) * _1483) + ((_1458 * cbLight._m0[_1451].z) * _1481);
    uvec4 _1496 = floatBitsToUint(cbLight._m0[_1424 + 12u]);
    bool _1498 = _1496.x == 0u;
    float _1509;
    float _1511;
    float _1513;
    if (_1498)
    {
        _1509 = _1490;
        _1511 = _1491;
        _1513 = _1492;
    }
    else
    {
        uint _1517 = _1424 + 6u;
        float _1533 = (dot(vec3(cbLight._m0[_1424 + 2u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _1534 = _1533 * _1533;
        float _3380 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1536 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1509 = (((cbLight._m0[_1517].x * 0.3183098733425140380859375) * _1535) * _1536) + _1490;
        _1511 = (((cbLight._m0[_1517].y * 0.3183098733425140380859375) * _1535) * _1536) + _1491;
        _1513 = (((cbLight._m0[_1517].z * 0.3183098733425140380859375) * _1535) * _1536) + _1492;
    }
    bool _1516 = _1496.y == 0u;
    float _1554;
    float _1556;
    float _1558;
    if (_1516)
    {
        _1554 = _1509;
        _1556 = _1511;
        _1558 = _1513;
    }
    else
    {
        uint _1659 = _1424 + 7u;
        float _1675 = (dot(vec3(cbLight._m0[_1424 + 3u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _1676 = _1675 * _1675;
        float _3396 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1678 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
        _1554 = (((cbLight._m0[_1659].x * 0.3183098733425140380859375) * _1677) * _1678) + _1509;
        _1556 = (((cbLight._m0[_1659].y * 0.3183098733425140380859375) * _1677) * _1678) + _1511;
        _1558 = (((cbLight._m0[_1659].z * 0.3183098733425140380859375) * _1677) * _1678) + _1513;
    }
    uint _1560 = _1424 + 8u;
    float _1566 = cbLight._m0[_1424].x + _342;
    float _1567 = cbLight._m0[_1424].y + _343;
    float _1568 = cbLight._m0[_1424].z + _344;
    float _1572 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
    float _1576 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1424].xyz));
    float _3412 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1579 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _1580 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _1581 = dot(vec3(cbLight._m0[_1424].xyz), vec3(_1566 * _1572, _1567 * _1572, _1568 * _1572));
    float _3434 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _1592 = (exp2(log2(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1598 = (0.5 / ((_1579 + 9.9999999392252902907785028219223e-09) + _1580)) * _1579;
    float _3445 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1600 = (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.31831014156341552734375;
    uint _1611 = _1424 + 9u;
    float _1617 = cbLight._m0[_1462].x + _342;
    float _1618 = cbLight._m0[_1462].y + _343;
    float _1619 = cbLight._m0[_1462].z + _344;
    float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
    float _1627 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1462].xyz));
    float _3456 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1630 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _1631 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_1617 * _1623, _1618 * _1623, _1619 * _1623));
    float _3467 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1640 = (exp2(log2(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1644 = (0.5 / ((_1630 + 9.9999999392252902907785028219223e-09) + _1580)) * _1630;
    float _3478 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1646 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.31831014156341552734375;
    float _1656 = (((_1640 * cbLight._m0[_1611].x) * _1646) * _1447) + (((_1592 * cbLight._m0[_1560].x) * _1600) * _1458);
    float _1657 = (((_1640 * cbLight._m0[_1611].y) * _1646) * _1447) + (((_1592 * cbLight._m0[_1560].y) * _1600) * _1458);
    float _1658 = (((_1640 * cbLight._m0[_1611].z) * _1646) * _1447) + (((_1592 * cbLight._m0[_1560].z) * _1600) * _1458);
    float _1720;
    float _1722;
    float _1724;
    if (_1498)
    {
        _1720 = _1656;
        _1722 = _1657;
        _1724 = _1658;
    }
    else
    {
        uint _1726 = _1424 + 10u;
        uint _1732 = _1424 + 2u;
        float _1738 = cbLight._m0[_1732].x + _342;
        float _1739 = cbLight._m0[_1732].y + _343;
        float _1740 = cbLight._m0[_1732].z + _344;
        float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
        float _1748 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1732].xyz));
        float _3489 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1751 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1752 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1738 * _1744, _1739 * _1744, _1740 * _1744));
        float _3500 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = (exp2(log2(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1765 = (0.5 / ((_1751 + 9.9999999392252902907785028219223e-09) + _1580)) * _1751;
        float _3511 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1767 = (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.31831014156341552734375;
        float _1768 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1720 = (((_1761 * cbLight._m0[_1726].x) * _1767) * _1768) + _1656;
        _1722 = (((_1761 * cbLight._m0[_1726].y) * _1767) * _1768) + _1657;
        _1724 = (((_1761 * cbLight._m0[_1726].z) * _1767) * _1768) + _1658;
    }
    float _1803;
    float _1805;
    float _1807;
    if (_1516)
    {
        _1803 = _1720;
        _1805 = _1722;
        _1807 = _1724;
    }
    else
    {
        uint _1814 = _1424 + 11u;
        uint _1820 = _1424 + 3u;
        float _1826 = cbLight._m0[_1820].x + _342;
        float _1827 = cbLight._m0[_1820].y + _343;
        float _1828 = cbLight._m0[_1820].z + _344;
        float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
        float _1836 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1820].xyz));
        float _3527 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1839 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1840 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_1826 * _1832, _1827 * _1832, _1828 * _1832));
        float _3538 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = (exp2(log2(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1853 = (0.5 / ((_1839 + 9.9999999392252902907785028219223e-09) + _1580)) * _1839;
        float _3549 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1855 = (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.31831014156341552734375;
        float _1856 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
        _1803 = (((_1849 * cbLight._m0[_1814].x) * _1855) * _1856) + _1720;
        _1805 = (((_1849 * cbLight._m0[_1814].y) * _1855) * _1856) + _1722;
        _1807 = (((_1849 * cbLight._m0[_1814].z) * _1855) * _1856) + _1724;
    }
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    if (_1422.y == 0u)
    {
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1931;
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1931;
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1931;
        uvec4 _1946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1947 = _1946.x;
        uint _1958 = uint((float(_1946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _351) / _1947))) + floor(float(uint(cbSceneParam._m0[85u].x * _350) / _1947)));
        float _1968 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1969 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        uint _1972 = uint(isnan(14.0) ? _1969 : (isnan(_1969) ? 14.0 : min(_1969, 14.0)));
        uvec4 _1977 = texelFetch(g_lightClusterGridBuffer, int(((_1972 << 2u) + (_1958 << 6u)) >> 2u));
        uint _1978 = _1977.x;
        uint _1979 = _1946.z;
        float _2120;
        float _2122;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        if (((((1u << ((_1979 >> 4u) & 15u)) + 4294967295u) & _1978) == 0u) || ((_1979 & 240u) == 0u))
        {
            _2120 = 0.0;
            _2122 = 0.0;
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
        }
        else
        {
            float _2121;
            float _2123;
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2270 = 0.0;
            float _2271 = 0.0;
            float _2272 = 0.0;
            float _2273 = 0.0;
            float _2274 = 0.0;
            float _2275 = 0.0;
            uint _2276 = 0u;
            uint _2285;
            bool _2286;
            for (;;)
            {
                _2285 = texelFetch(g_lightClassification, int((((_1972 << 5u) + (_1958 << 9u)) + (_2276 << 2u)) >> 2u)).x;
                _2286 = _2285 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2286)
                {
                    frontier_phi_61_pred = _2270;
                    frontier_phi_61_pred_1 = _2275;
                    frontier_phi_61_pred_2 = _2274;
                    frontier_phi_61_pred_3 = _2273;
                    frontier_phi_61_pred_4 = _2272;
                    frontier_phi_61_pred_5 = _2271;
                }
                else
                {
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    uint _2400;
                    _2394 = _2270;
                    _2395 = _2271;
                    _2396 = _2272;
                    _2397 = _2273;
                    _2398 = _2274;
                    _2399 = _2275;
                    _2400 = _2285;
                    float _2326;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    for (;;)
                    {
                        uint _2404 = uint(findLSB(_2400)) + (_2276 << 5u);
                        uint _2401 = (_2400 + 4294967295u) & _2400;
                        uint _2406 = _2404 * 48u;
                        vec4 _2420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2406)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 3u)).x));
                        uint _2426 = (_2404 * 48u) + 4u;
                        vec4 _2439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2426)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 3u)).x));
                        uint _2445 = (_2404 * 48u) + 8u;
                        vec3 _2456 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2445)).x, texelFetch(g_PointLightRenderingBuffer, int(_2445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2445 + 2u)).x));
                        float _2460 = _2420.x - _1932;
                        float _2461 = _2420.y - _1933;
                        float _2462 = _2420.z - _1934;
                        float _2463 = dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462));
                        float _2466 = inversesqrt(_2463);
                        float _2475 = 1.0 - (_2463 * _2420.w);
                        float _3575 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
                        float _2476 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
                        float _2477 = sqrt(_2463) * _2439.w;
                        float _2480 = 1.39999997615814208984375 / (_2477 + 1.39999997615814208984375);
                        float _2481 = _2480 * _2480;
                        float _2484 = ((1.0 - _2481) * dot(vec3(_372, _375, _378), vec3(_2466 * _2460, _2466 * _2461, _2466 * _2462))) + _2481;
                        float _2487 = _2477 * _2477;
                        float _2491 = ((isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0))) * _2476) / ((_2487 * 0.699999988079071044921875) + 1.0);
                        float _2495 = (-0.0) - _1932;
                        float _2496 = (-0.0) - _1933;
                        float _2497 = (-0.0) - _1934;
                        float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
                        float _2505 = dot(vec3(_372, _375, _378), vec3(_2501 * _2495, _2501 * _2496, _2501 * _2497));
                        float _3591 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
                        float _3602 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
                        float _2509 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
                        float _2513 = (0.5 / (((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) + 9.9999999392252902907785028219223e-09) + _2509)) * _2509;
                        float _3613 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _2522 = (((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 3.1415927410125732421875) / ((_2487 * 2.1991131305694580078125) + 3.141590118408203125)) * _2476;
                        _2329 = (_2491 * _2439.x) + _2397;
                        _2330 = (_2491 * _2439.y) + _2398;
                        _2331 = (_2491 * _2439.z) + _2399;
                        _2326 = (_2522 * _2456.x) + _2394;
                        _2327 = (_2522 * _2456.y) + _2395;
                        _2328 = (_2522 * _2456.z) + _2396;
                        if (_2401 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2394 = _2326;
                            _2395 = _2327;
                            _2396 = _2328;
                            _2397 = _2329;
                            _2398 = _2330;
                            _2399 = _2331;
                            _2400 = _2401;
                        }
                    }
                    frontier_phi_61_pred = _2326;
                    frontier_phi_61_pred_1 = _2331;
                    frontier_phi_61_pred_2 = _2330;
                    frontier_phi_61_pred_3 = _2329;
                    frontier_phi_61_pred_4 = _2328;
                    frontier_phi_61_pred_5 = _2327;
                }
                _2121 = frontier_phi_61_pred;
                _2131 = frontier_phi_61_pred_1;
                _2129 = frontier_phi_61_pred_2;
                _2127 = frontier_phi_61_pred_3;
                _2125 = frontier_phi_61_pred_4;
                _2123 = frontier_phi_61_pred_5;
                uint _2277 = _2276 + 1u;
                if (_2277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2270 = _2121;
                    _2271 = _2123;
                    _2272 = _2125;
                    _2273 = _2127;
                    _2274 = _2129;
                    _2275 = _2131;
                    _2276 = _2277;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2120 = _2121;
            _2122 = _2123;
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
        }
        uvec4 _2134 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2135 = _2134.z;
        uint _2137 = (_2135 >> 8u) & 15u;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        if (((4294967295u << _2137) & _1978) == 0u)
        {
            _2241 = _2120;
            _2243 = _2122;
            _2245 = _2124;
            _2247 = _2126;
            _2249 = _2128;
            _2251 = _2130;
        }
        else
        {
            float _2266 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2137 < ((_2135 >> 12u) & 15u))
            {
                float _2242;
                float _2244;
                float _2246;
                float _2248;
                float _2250;
                float _2252;
                float _2377 = _2120;
                float _2378 = _2122;
                float _2379 = _2124;
                float _2380 = _2126;
                float _2381 = _2128;
                float _2382 = _2130;
                uint _2383 = _2137;
                uint _2392;
                bool _2393;
                for (;;)
                {
                    _2392 = texelFetch(g_lightClassification, int((((_1972 << 5u) + (_1958 << 9u)) + (_2383 << 2u)) >> 2u)).x;
                    _2393 = _2392 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2393)
                    {
                        frontier_phi_67_pred = _2380;
                        frontier_phi_67_pred_1 = _2381;
                        frontier_phi_67_pred_2 = _2382;
                        frontier_phi_67_pred_3 = _2379;
                        frontier_phi_67_pred_4 = _2378;
                        frontier_phi_67_pred_5 = _2377;
                    }
                    else
                    {
                        float _2527;
                        float _2528;
                        float _2529;
                        float _2530;
                        float _2531;
                        float _2532;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2540 = _2377;
                        float _2541 = _2378;
                        float _2542 = _2379;
                        float _2543 = _2380;
                        float _2544 = _2381;
                        float _2545 = _2382;
                        uint _2546 = _2392;
                        uint _2547;
                        vec4 _2572;
                        float _2573;
                        vec4 _2588;
                        vec3 _2600;
                        vec4 _2616;
                        vec4 _2632;
                        float _2679;
                        bool _2680;
                        for (;;)
                        {
                            uint _2557 = ((_2383 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2546));
                            _2547 = (_2546 + 4294967295u) & _2546;
                            uint _2559 = _2557 * 40u;
                            _2572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 3u)).x));
                            _2573 = _2572.w;
                            uint _2575 = (_2557 * 40u) + 4u;
                            _2588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 3u)).x));
                            uint _2590 = (_2557 * 40u) + 8u;
                            _2600 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x));
                            uint _2603 = (_2557 * 40u) + 16u;
                            _2616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 3u)).x));
                            uint _2619 = (_2557 * 40u) + 20u;
                            _2632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 3u)).x));
                            uint _2635 = (_2557 * 40u) + 24u;
                            vec4 _2648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 3u)).x));
                            uint _2654 = (_2557 * 40u) + 28u;
                            vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 3u)).x));
                            _2679 = fma(_1934, _2667.z, fma(_1933, _2667.y, _2667.x * _1932)) + _2667.w;
                            _2680 = !((fma(_1934, _2648.z, fma(_1933, _2648.y, _2648.x * _1932)) + _2648.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2680)
                            {
                                float _2707 = _2572.x - _1932;
                                float _2708 = _2572.y - _1933;
                                float _2709 = _2572.z - _1934;
                                float _2710 = dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709));
                                float _2713 = inversesqrt(_2710);
                                float _2714 = _2713 * _2707;
                                float _2715 = _2713 * _2708;
                                float _2716 = _2713 * _2709;
                                float _2720 = 1.0 - (_2710 / (_2573 * _2573));
                                float _3624 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                                float _2721 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
                                float _2725 = sqrt(_2710) * _2588.w;
                                float _2727 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                                float _2728 = _2727 * _2727;
                                float _2729 = 1.0 - _2728;
                                float _2731 = (_2729 * dot(vec3(_2714, _2715, _2716), vec3(_372, _375, _378))) + _2728;
                                float _2734 = _2725 * _2725;
                                float _2738 = (fma(_1934, _2616.z, fma(_1933, _2616.y, _2616.x * _1932)) + _2616.w) / _2679;
                                float _2739 = (fma(_1934, _2632.z, fma(_1933, _2632.y, _2632.x * _1932)) + _2632.w) / _2679;
                                float _2743 = 1.0 - dot(vec2(_2738, _2739), vec2(_2738, _2739));
                                float _3640 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                                float _2744 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
                                float _2745 = _2744 * (((isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))) * _2721) / ((_2734 * 0.699999988079071044921875) + 1.0));
                                float _2755 = dot(vec3(_372, _375, _378), vec3((-0.0) - (_1932 * _2266), (-0.0) - (_1933 * _2266), (-0.0) - (_1934 * _2266)));
                                float _3651 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                                float _2763 = (_2729 * dot(vec3(_372, _375, _378), vec3(_2714, _2715, _2716))) + _2728;
                                float _3662 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                                float _2764 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
                                float _2768 = (0.5 / (((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) + 9.9999999392252902907785028219223e-09) + _2764)) * _2764;
                                float _3673 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                                float _2775 = (_2744 * _2721) * (((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 3.1415927410125732421875) / ((_2734 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2775 * _2600.x;
                                frontier_phi_73_pred_1 = _2775 * _2600.y;
                                frontier_phi_73_pred_2 = _2745 * _2588.z;
                                frontier_phi_73_pred_3 = _2745 * _2588.y;
                                frontier_phi_73_pred_4 = _2745 * _2588.x;
                                frontier_phi_73_pred_5 = _2775 * _2600.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2779 = frontier_phi_73_pred;
                            _2780 = frontier_phi_73_pred_1;
                            _2784 = frontier_phi_73_pred_2;
                            _2783 = frontier_phi_73_pred_3;
                            _2782 = frontier_phi_73_pred_4;
                            _2781 = frontier_phi_73_pred_5;
                            _2530 = _2782 + _2543;
                            _2531 = _2783 + _2544;
                            _2532 = _2784 + _2545;
                            _2527 = _2779 + _2540;
                            _2528 = _2780 + _2541;
                            _2529 = _2781 + _2542;
                            if (_2547 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2540 = _2527;
                                _2541 = _2528;
                                _2542 = _2529;
                                _2543 = _2530;
                                _2544 = _2531;
                                _2545 = _2532;
                                _2546 = _2547;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2530;
                        frontier_phi_67_pred_1 = _2531;
                        frontier_phi_67_pred_2 = _2532;
                        frontier_phi_67_pred_3 = _2529;
                        frontier_phi_67_pred_4 = _2528;
                        frontier_phi_67_pred_5 = _2527;
                    }
                    _2248 = frontier_phi_67_pred;
                    _2250 = frontier_phi_67_pred_1;
                    _2252 = frontier_phi_67_pred_2;
                    _2246 = frontier_phi_67_pred_3;
                    _2244 = frontier_phi_67_pred_4;
                    _2242 = frontier_phi_67_pred_5;
                    uint _2384 = _2383 + 1u;
                    if (_2384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2377 = _2242;
                        _2378 = _2244;
                        _2379 = _2246;
                        _2380 = _2248;
                        _2381 = _2250;
                        _2382 = _2252;
                        _2383 = _2384;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2250;
                frontier_phi_55_56_ladder_1 = _2252;
                frontier_phi_55_56_ladder_2 = _2248;
                frontier_phi_55_56_ladder_3 = _2246;
                frontier_phi_55_56_ladder_4 = _2244;
                frontier_phi_55_56_ladder_5 = _2242;
            }
            else
            {
                frontier_phi_55_56_ladder = _2128;
                frontier_phi_55_56_ladder_1 = _2130;
                frontier_phi_55_56_ladder_2 = _2126;
                frontier_phi_55_56_ladder_3 = _2124;
                frontier_phi_55_56_ladder_4 = _2122;
                frontier_phi_55_56_ladder_5 = _2120;
            }
            _2241 = frontier_phi_55_56_ladder_5;
            _2243 = frontier_phi_55_56_ladder_4;
            _2245 = frontier_phi_55_56_ladder_3;
            _2247 = frontier_phi_55_56_ladder_2;
            _2249 = frontier_phi_55_56_ladder;
            _2251 = frontier_phi_55_56_ladder_1;
        }
        float _2256 = isnan(1.0) ? _416 : (isnan(_416) ? 1.0 : min(_416, 1.0));
        _1991 = (_2256 * _2247) + _1554;
        _1993 = (_2256 * _2249) + _1556;
        _1995 = (_2256 * _2251) + _1558;
        _1997 = ((_2241 * 0.039999999105930328369140625) * _2256) + _1803;
        _1999 = ((_2243 * 0.039999999105930328369140625) * _2256) + _1805;
        _2001 = ((_2245 * 0.039999999105930328369140625) * _2256) + _1807;
    }
    else
    {
        _1991 = _1554;
        _1993 = _1556;
        _1995 = _1558;
        _1997 = _1803;
        _1999 = _1805;
        _2001 = _1807;
    }
    uint _2007 = _392 + uint(cbMatDynParam._m0[0u].w);
    float _2017 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _231.x) * cbSceneParam._m0[72u].y) * _254) * cbInstanceData._m0[_2007].x;
    float _2022 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _231.y) * cbSceneParam._m0[72u].y) * _254) * cbInstanceData._m0[_2007].y;
    float _2027 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _231.z) * cbSceneParam._m0[72u].y) * _254) * cbInstanceData._m0[_2007].z;
    float _3689 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3700 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3711 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _2044 = (((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1991 + ((isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))) * _416))) + ((_1997 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _1194)) * cbPerFrame._m0[3u].x)) + _2017;
    float _2046 = (_2022 + ((_1999 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _1194)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1993 + ((isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))) * _416)));
    float _2048 = (_2027 + ((_2001 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _1194)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1995 + ((isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))) * _416)));
    float _3737 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2061 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    uint _2062 = _391 + 6u;
    float _2070 = _350 / cbSceneParam._m0[86u].x;
    float _2071 = _351 / cbSceneParam._m0[86u].y;
    vec4 _2085 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2070, _2071, (log2((isnan(cbSceneParam._m0[77u].w) ? _284 : (isnan(_284) ? cbSceneParam._m0[77u].w : min(_284, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2087 = _2085.x;
    float _2088 = _2085.y;
    float _2089 = _2085.z;
    float _2090 = _2085.w;
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    if (_284 > cbSceneParam._m0[78u].w)
    {
        float _2145 = isnan(_284) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _284 : min(cbSceneParam._m0[80u].w, _284));
        float _2146 = _2145 / _284;
        float _2157 = _2146 * _335;
        float _2158 = _336 * _2146;
        float _2159 = (-0.0) - _2158;
        float _2161 = _2146 * _337;
        float _2163 = (cbSceneParam._m0[77u].w * _2159) / _2145;
        float _2164 = _2163 + cbSceneParam._m0[79u].w;
        float _2165 = cbSceneParam._m0[79u].w - _2158;
        float _2171 = sqrt(((_2157 * _2157) + (_2158 * _2158)) + (_2161 * _2161));
        float _2174 = (1.0 - (cbSceneParam._m0[77u].w / _2145)) * _2171;
        float _2179 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2181 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2339;
        if (abs((_2159 - _2163) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2339 = ((((_2164 > 0.0) ? exp2(_2179 * _2164) : (2.0 - exp2(_2181 * _2164))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2174;
        }
        else
        {
            float _2299 = 1.0 / cbSceneParam._m0[80u].x;
            float _2300 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : max(_2164, _2165));
            float _2301 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : min(_2164, _2165));
            float _2310 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : min(_2300, 0.0));
            float _2311 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : min(_2301, 0.0));
            _2339 = ((abs(_2171 / _2159) * cbSceneParam._m0[80u].y) * ((((_2310 - _2311) * 2.0) - ((exp2(_2179 * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)))) - exp2(_2179 * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0))))) * _2299)) - ((exp2(_2181 * _2310) - exp2(_2181 * _2311)) * _2299))) + (_2174 * cbSceneParam._m0[80u].z);
        }
        vec4 _2341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2070, _2071, 1.0), 0.0);
        float _2350 = exp2((_2339 * (-1.44269502162933349609375)) * (1.0 - _2341.w));
        float _2351 = log2(_2350);
        float _2367 = log2(_2090);
        _2183 = (exp2(_2367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].x)) * _2341.x) / cbSceneParam._m0[78u].x)) + _2087;
        _2185 = (exp2(_2367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].y)) * _2341.y) / cbSceneParam._m0[78u].y)) + _2088;
        _2187 = (exp2(_2367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].z)) * _2341.z) / cbSceneParam._m0[78u].z)) + _2089;
        _2189 = _2350 * _2090;
    }
    else
    {
        _2183 = _2087;
        _2185 = _2088;
        _2187 = _2089;
        _2189 = _2090;
    }
    float _2200 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2201 = _2200 == 3.0;
    float _2202 = log2(_2189);
    float _2206 = exp2(_2202 * cbSceneParam._m0[78u].x);
    float _2207 = exp2(_2202 * cbSceneParam._m0[78u].y);
    float _2208 = exp2(_2202 * cbSceneParam._m0[78u].z);
    float _2209 = _2206 * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)));
    float _2210 = _2207 * (isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0)));
    float _2211 = _2208 * (isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0)));
    float _2220 = (_2200 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2220 * (_2201 ? _2209 : (_2209 + (cbSceneParam._m0[72u].w * _2183)));
    SV_Target.y = _2220 * (_2201 ? _2210 : (_2210 + (cbSceneParam._m0[72u].w * _2185)));
    SV_Target.z = _2220 * (_2201 ? _2211 : (_2211 + (cbSceneParam._m0[72u].w * _2187)));
    SV_Target.w = cbInstanceData._m0[_2062].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2017) * _2061) * _2206) * _2220;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2022) * _2061) * _2207) * _2220;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2027) * _2061) * _2208) * _2220;
    SV_Target_1.w = cbInstanceData._m0[_2062].w;
}


