#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _750;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _188 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _218 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _234 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2928 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _236 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
    float _244 = (((_236 * _236) * (3.0 - (_236 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _252 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _253 = _252 * _167;
    float _254 = _252 * _168;
    float _255 = _252 * _169;
    float _2939 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2950 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2961 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _274 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _315 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _325 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _315);
    float _326 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _315);
    float _327 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _315);
    float _331 = inversesqrt(dot(vec3(_325, _326, _327), vec3(_325, _326, _327)));
    float _332 = _325 * _331;
    float _333 = _326 * _331;
    float _334 = _327 * _331;
    float _340 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _341 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _362 = fma(_255, cbSceneParam._m0[5u].z, fma(_254, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _253));
    float _365 = fma(_255, cbSceneParam._m0[6u].z, fma(_254, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _253));
    float _368 = fma(_255, cbSceneParam._m0[7u].z, fma(_254, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _253));
    uint _381 = uint(roundEven(NORMAL.w)) * 13u;
    uint _383 = _381 + 9u;
    uint _384 = _383 + uint(cbMatDynParam._m0[0u].w);
    float _390 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0)))) * cbInstanceData._m0[_384].x;
    float _391 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0)))) * cbInstanceData._m0[_384].y;
    float _392 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_384].z;
    float _2972 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
    float _2983 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
    float _2994 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
    vec4 _404 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _340, cbSceneParam._m0[86u].y * _341));
    float _407 = _404.x * TEXCOORD.z;
    float _408 = dot(vec3(_253, _254, _255), vec3(_332, _333, _334));
    float _411 = _408 * 2.0;
    float _415 = (_411 * _253) - _332;
    float _416 = (_411 * _254) - _333;
    float _417 = (_411 * _255) - _334;
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _749;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _474 = fma(_447, cbModelParam._m0[26u].z, fma(_443, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _439));
        float _478 = fma(_447, cbModelParam._m0[27u].z, fma(_443, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _439));
        float _482 = fma(_447, cbModelParam._m0[28u].z, fma(_443, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _439));
        float _507 = _439 + _253;
        float _508 = _443 + _254;
        float _509 = _447 + _255;
        float _519 = fma(_509, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _507)) - _474;
        float _520 = fma(_509, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _507)) - _478;
        float _521 = fma(_509, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _507)) - _482;
        float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
        float _538 = ((_525 * _519) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_474 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _539 = ((_525 * _520) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_478 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _540 = ((_525 * _521) / cbModelParam._m0[34u].z) + ((((((_482 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        float _577 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_543.x + (-0.5));
        float _579 = _577 * (_543.y + (-0.5));
        float _580 = _577 * (_543.z + (-0.5));
        float _587 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_550.x + (-0.5));
        float _589 = _587 * (_550.y + (-0.5));
        float _590 = _587 * (_550.z + (-0.5));
        float _597 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _598 = _597 * (_557.x + (-0.5));
        float _599 = _597 * (_557.y + (-0.5));
        float _600 = _597 * (_557.z + (-0.5));
        float _607 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _608 = _607 * (_564.x + (-0.5));
        float _609 = _607 * (_564.y + (-0.5));
        float _610 = _607 * (_564.z + (-0.5));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = _578 * 0.5;
        float _615 = _588 * 0.5;
        float _616 = _598 * 0.5;
        float _617 = dot(vec3(_614, _615, _616), vec3(_614, _615, _616));
        float _622 = (_617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_617);
        float _631 = (dot(vec3(_253, _254, _255), vec3(_622 * _614, _622 * _615, _622 * _616)) + 1.0) * 0.5;
        float _3020 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _641 = sqrt(((_615 * _615) + (_614 * _614)) + (_616 * _616)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _3031 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
        float _643 = _642 * 2.0;
        float _647 = (1.0 - _642) / (_642 + 1.0);
        float _3042 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
        float _657 = ((((1.0 - _648) * (_643 + 2.0)) * exp2(log2(isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0))) * (_643 + 1.0))) + _648) * _611;
        float _658 = _579 * 0.5;
        float _659 = _589 * 0.5;
        float _660 = _599 * 0.5;
        float _661 = dot(vec3(_658, _659, _660), vec3(_658, _659, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _674 = (dot(vec3(_253, _254, _255), vec3(_666 * _658, _666 * _659, _666 * _660)) + 1.0) * 0.5;
        float _3053 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _683 = sqrt(((_659 * _659) + (_658 * _658)) + (_660 * _660)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _3064 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _3075 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0))) * (_685 + 1.0))) + _690) * _612;
        float _700 = _580 * 0.5;
        float _701 = _590 * 0.5;
        float _702 = _600 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _716 = (dot(vec3(_253, _254, _255), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3086 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _725 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3097 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3108 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0))) * (_727 + 1.0))) + _732) * _613;
        _749 = _580;
        _751 = _579;
        _752 = _578;
        _753 = _590;
        _754 = _589;
        _755 = _588;
        _756 = _600;
        _757 = _599;
        _758 = _598;
        _759 = _613;
        _760 = _612;
        _761 = _611;
        _762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0)));
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
    }
    else
    {
        _749 = _750;
        _751 = _750;
        _752 = _750;
        _753 = _750;
        _754 = _750;
        _755 = _750;
        _756 = _750;
        _757 = _750;
        _758 = _750;
        _759 = _750;
        _760 = _750;
        _761 = _750;
        _762 = 0.0;
        _763 = 0.0;
        _764 = 0.0;
    }
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _790 = fma(_447, cbModelParam._m0[30u].z, fma(_443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _439));
        float _794 = fma(_447, cbModelParam._m0[31u].z, fma(_443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _439));
        float _798 = fma(_447, cbModelParam._m0[32u].z, fma(_443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _439));
        float _821 = _439 + _253;
        float _822 = _443 + _254;
        float _823 = _447 + _255;
        float _833 = fma(_823, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821)) - _790;
        float _834 = fma(_823, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821)) - _794;
        float _835 = fma(_823, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821)) - _798;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_790 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_794 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[35u].z) + ((((((_798 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _889 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_856.x + (-0.5));
        float _891 = _889 * (_856.y + (-0.5));
        float _892 = _889 * (_856.z + (-0.5));
        float _899 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_863.x + (-0.5));
        float _901 = _899 * (_863.y + (-0.5));
        float _902 = _899 * (_863.z + (-0.5));
        float _909 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_870.x + (-0.5));
        float _911 = _909 * (_870.y + (-0.5));
        float _912 = _909 * (_870.z + (-0.5));
        float _919 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_877.x + (-0.5));
        float _921 = _919 * (_877.y + (-0.5));
        float _922 = _919 * (_877.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_253, _254, _255), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3149 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3160 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3171 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0))) * (_953 + 1.0))) + _958) * _923;
        float _968 = _891 * 0.5;
        float _969 = _901 * 0.5;
        float _970 = _911 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_253, _254, _255), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3182 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3193 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3204 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0))) * (_995 + 1.0))) + _1000) * _924;
        float _1010 = _892 * 0.5;
        float _1011 = _902 * 0.5;
        float _1012 = _912 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_253, _254, _255), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3215 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3226 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3237 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))) * (_1037 + 1.0))) + _1042) * _925;
        _1059 = _892;
        _1060 = _891;
        _1061 = _890;
        _1062 = _902;
        _1063 = _901;
        _1064 = _900;
        _1065 = _912;
        _1066 = _911;
        _1067 = _910;
        _1068 = _925;
        _1069 = _924;
        _1070 = _923;
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _750;
        _1060 = _750;
        _1061 = _750;
        _1062 = _750;
        _1063 = _750;
        _1064 = _750;
        _1065 = _750;
        _1066 = _750;
        _1067 = _750;
        _1068 = _750;
        _1069 = _750;
        _1070 = _750;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _762)) + _762;
    float _1084 = (cbModelParam._m0[1u].x * (_1072 - _763)) + _763;
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _764)) + _764;
    float _1106 = fma(_1085, cbSceneParam._m0[89u].z, fma(_1084, cbSceneParam._m0[89u].y, _1083 * cbSceneParam._m0[89u].x));
    float _1109 = fma(_1085, cbSceneParam._m0[90u].z, fma(_1084, cbSceneParam._m0[90u].y, _1083 * cbSceneParam._m0[90u].x));
    float _1112 = fma(_1085, cbSceneParam._m0[91u].z, fma(_1084, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1083));
    float _1127 = _415 * 0.5;
    float _1128 = _416 * 0.5;
    float _1129 = _417 * 0.5;
    float _1130 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1133 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1060, _1063, _1066, _1069));
    float _1136 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1170;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1143 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_749, _753, _756, _759));
        float _1147 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_751, _754, _757, _760));
        float _1151 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_752, _755, _758, _761));
        float _1158 = dot(vec4(cbModelParam._m0[39u]), vec4(_1127, _1128, _1129, 1.0));
        _1170 = dot(vec3(isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1158) ? 0.0 : (isnan(0.0) ? _1158 : max(0.0, _1158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1170 = 1.0;
    }
    float _1181;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1172 = dot(vec4(cbModelParam._m0[40u]), vec4(_1127, _1128, _1129, 1.0));
        _1181 = dot(vec3(isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)), isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1172) ? 0.0 : (isnan(0.0) ? _1172 : max(0.0, _1172))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1181 = 1.0;
    }
    float _1185 = (_1181 * cbModelParam._m0[1u].x) + (_1170 * (1.0 - cbModelParam._m0[1u].x));
    float _1194 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1275;
    float _1277;
    float _1279;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1242 = fma(_447, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439)) + cbModelParam._m0[13u].w;
        float _1246 = fma(_447, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439)) + cbModelParam._m0[14u].w;
        float _1250 = fma(_447, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439)) + cbModelParam._m0[15u].w;
        float _1253 = fma(_417, cbModelParam._m0[13u].z, fma(_416, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415));
        float _1256 = fma(_417, cbModelParam._m0[14u].z, fma(_416, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415));
        float _1259 = fma(_417, cbModelParam._m0[15u].z, fma(_416, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415));
        float _1285;
        if (_1253 > 0.0)
        {
            _1285 = abs((1.0 - _1242) / _1253);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1253 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1242 + 1.0) / _1253);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1285 = frontier_phi_14_12_ladder;
        }
        float _1511;
        if (_1256 > 0.0)
        {
            _1511 = abs((1.0 - _1246) / _1256);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1246 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1511 = frontier_phi_23_19_ladder;
        }
        float _1703;
        if (_1259 > 0.0)
        {
            _1703 = abs((1.0 - _1250) / _1259);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1250 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1703 = frontier_phi_35_30_ladder;
        }
        float _1705 = isnan(_1511) ? _1285 : (isnan(_1285) ? _1511 : min(_1285, _1511));
        float _1706 = isnan(_1703) ? _1705 : (isnan(_1705) ? _1703 : min(_1705, _1703));
        float _1710 = (_1706 * _1253) + _1242;
        float _1711 = (_1706 * _1256) + _1246;
        float _1712 = (_1706 * _1259) + _1250;
        float _1713 = _1706 * 9.9999997473787516355514526367188e-05;
        float _1715 = (-1.0) - _1713;
        float _1717 = _1713 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1712 > _1717) || ((_1712 < _1715) || ((_1711 > _1717) || ((_1711 < _1715) || ((_1710 < _1715) || (_1710 > _1717))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1712, cbModelParam._m0[9u].z, fma(_1711, cbModelParam._m0[9u].y, _1710 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1712, cbModelParam._m0[10u].z, fma(_1711, cbModelParam._m0[10u].y, _1710 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1712, cbModelParam._m0[11u].z, fma(_1711, cbModelParam._m0[11u].y, _1710 * cbModelParam._m0[11u].x))), _1194);
            frontier_phi_13_35_ladder = _1809.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1809.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1809.x * cbModelParam._m0[1u].y;
        }
        _1275 = frontier_phi_13_35_ladder_2;
        _1277 = frontier_phi_13_35_ladder_1;
        _1279 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1263 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_415, _416, _417), _1194);
        _1275 = _1263.x * cbModelParam._m0[1u].y;
        _1277 = _1263.y * cbModelParam._m0[1u].y;
        _1279 = _1263.z * cbModelParam._m0[1u].y;
    }
    float _1282 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1338 = fma(_447, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439)) + cbModelParam._m0[21u].w;
        float _1342 = fma(_447, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439)) + cbModelParam._m0[22u].w;
        float _1346 = fma(_447, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439)) + cbModelParam._m0[23u].w;
        float _1349 = fma(_417, cbModelParam._m0[21u].z, fma(_416, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415));
        float _1352 = fma(_417, cbModelParam._m0[22u].z, fma(_416, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415));
        float _1355 = fma(_417, cbModelParam._m0[23u].z, fma(_416, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415));
        float _1516;
        if (_1349 > 0.0)
        {
            _1516 = abs((1.0 - _1338) / _1349);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1338 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1516 = frontier_phi_25_21_ladder;
        }
        float _1730;
        if (_1352 > 0.0)
        {
            _1730 = abs((1.0 - _1342) / _1352);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1342 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1730 = frontier_phi_37_32_ladder;
        }
        float _1881;
        if (_1355 > 0.0)
        {
            _1881 = abs((1.0 - _1346) / _1355);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1346 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1881 = frontier_phi_46_43_ladder;
        }
        float _1883 = isnan(_1730) ? _1516 : (isnan(_1516) ? _1730 : min(_1516, _1730));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1349) + _1338;
        float _1889 = (_1884 * _1352) + _1342;
        float _1890 = (_1884 * _1355) + _1346;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1891;
        float _1894 = _1891 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1890 > _1894) || ((_1890 < _1892) || ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 < _1892) || (_1888 > _1894))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2130 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1890, cbModelParam._m0[17u].z, fma(_1889, cbModelParam._m0[17u].y, _1888 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1890, cbModelParam._m0[18u].z, fma(_1889, cbModelParam._m0[18u].y, _1888 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1890, cbModelParam._m0[19u].z, fma(_1889, cbModelParam._m0[19u].y, _1888 * cbModelParam._m0[19u].x))), _1282);
            frontier_phi_22_46_ladder = _2130.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2130.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2130.x * cbModelParam._m0[1u].z;
        }
        _1374 = frontier_phi_22_46_ladder_2;
        _1376 = frontier_phi_22_46_ladder_1;
        _1378 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_415, _416, _417), _1282);
        _1374 = _1358.x * cbModelParam._m0[1u].z;
        _1376 = _1358.y * cbModelParam._m0[1u].z;
        _1378 = _1358.z * cbModelParam._m0[1u].z;
    }
    float _1390 = _407 * 0.01200000010430812835693359375;
    float _1392 = _1390 * ((cbModelParam._m0[1u].w * (_1374 - _1275)) + _1275);
    float _1393 = _1390 * ((cbModelParam._m0[1u].w * (_1376 - _1277)) + _1277);
    float _1394 = _1390 * ((cbModelParam._m0[1u].w * (_1378 - _1279)) + _1279);
    float _1397 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1400 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1403 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, _1392 * cbSceneParam._m0[91u].x));
    vec4 _1411 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_340, _341));
    float _1413 = _1411.w;
    float _1425 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1413);
    float _1426 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1413);
    float _1427 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1413);
    uvec4 _1431 = floatBitsToUint(cbInstanceData._m0[_381 + 5u]);
    uint _1433 = _1431.x * 14u;
    uint _1434 = _1433 + 13u;
    float _1441 = _407 + (-1.0);
    float _1446 = (cbLight._m0[_1434].x * _1441) + 1.0;
    float _1447 = (cbLight._m0[_1434].y * _1441) + 1.0;
    float _1448 = (cbLight._m0[_1434].z * _1441) + 1.0;
    float _1449 = (cbLight._m0[_1434].w * _1441) + 1.0;
    uint _1450 = _1433 + 5u;
    float _1456 = isnan(1.0) ? _1447 : (isnan(_1447) ? 1.0 : min(_1447, 1.0));
    uint _1460 = _1433 + 4u;
    float _1470 = isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0));
    uint _1474 = _1433 | 1u;
    float _1485 = dot(vec3(cbLight._m0[_1433].xyz), vec3(_253, _254, _255));
    float _1488 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_253, _254, _255));
    float _3373 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _3384 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _1493 = (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * 0.3183098733425140380859375;
    float _1495 = (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * 0.3183098733425140380859375;
    float _1502 = ((cbLight._m0[_1450].x * _1456) * _1495) + (((cbLight._m0[_1460].x * _1425) * _1470) * _1493);
    float _1503 = ((_1456 * cbLight._m0[_1450].y) * _1495) + (((cbLight._m0[_1460].y * _1426) * _1470) * _1493);
    float _1504 = ((_1456 * cbLight._m0[_1450].z) * _1495) + (((cbLight._m0[_1460].z * _1427) * _1470) * _1493);
    uvec4 _1508 = floatBitsToUint(cbLight._m0[_1433 + 12u]);
    bool _1510 = _1508.x == 0u;
    float _1521;
    float _1523;
    float _1525;
    if (_1510)
    {
        _1521 = _1502;
        _1523 = _1503;
        _1525 = _1504;
    }
    else
    {
        uint _1529 = _1433 + 6u;
        float _1545 = (dot(vec3(cbLight._m0[_1433 + 2u].xyz), vec3(_253, _254, _255)) * 0.5) + 0.5;
        float _1546 = _1545 * _1545;
        float _3395 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1548 = isnan(1.0) ? _1448 : (isnan(_1448) ? 1.0 : min(_1448, 1.0));
        _1521 = (((cbLight._m0[_1529].x * 0.3183098733425140380859375) * _1547) * _1548) + _1502;
        _1523 = (((cbLight._m0[_1529].y * 0.3183098733425140380859375) * _1547) * _1548) + _1503;
        _1525 = (((cbLight._m0[_1529].z * 0.3183098733425140380859375) * _1547) * _1548) + _1504;
    }
    bool _1528 = _1508.y == 0u;
    float _1566;
    float _1568;
    float _1570;
    if (_1528)
    {
        _1566 = _1521;
        _1568 = _1523;
        _1570 = _1525;
    }
    else
    {
        uint _1674 = _1433 + 7u;
        float _1690 = (dot(vec3(cbLight._m0[_1433 + 3u].xyz), vec3(_253, _254, _255)) * 0.5) + 0.5;
        float _1691 = _1690 * _1690;
        float _3411 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1693 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
        _1566 = (((cbLight._m0[_1674].x * 0.3183098733425140380859375) * _1692) * _1693) + _1521;
        _1568 = (((cbLight._m0[_1674].y * 0.3183098733425140380859375) * _1692) * _1693) + _1523;
        _1570 = (((cbLight._m0[_1674].z * 0.3183098733425140380859375) * _1692) * _1693) + _1525;
    }
    uint _1572 = _1433 + 8u;
    float _1578 = cbLight._m0[_1433].x + _332;
    float _1579 = cbLight._m0[_1433].y + _333;
    float _1580 = cbLight._m0[_1433].z + _334;
    float _1584 = inversesqrt(dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580)));
    float _1588 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1433].xyz));
    float _3427 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1591 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _1592 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _1593 = dot(vec3(cbLight._m0[_1433].xyz), vec3(_1578 * _1584, _1579 * _1584, _1580 * _1584));
    float _3449 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1604 = (exp2(log2(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1610 = (0.5 / ((_1591 + 9.9999999392252902907785028219223e-09) + _1592)) * _1591;
    float _3460 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1612 = (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * 0.31831014156341552734375;
    uint _1626 = _1433 + 9u;
    float _1632 = cbLight._m0[_1474].x + _332;
    float _1633 = cbLight._m0[_1474].y + _333;
    float _1634 = cbLight._m0[_1474].z + _334;
    float _1638 = inversesqrt(dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634)));
    float _1642 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1474].xyz));
    float _3471 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1645 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _1646 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_1632 * _1638, _1633 * _1638, _1634 * _1638));
    float _3482 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1655 = (exp2(log2(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1659 = (0.5 / ((_1645 + 9.9999999392252902907785028219223e-09) + _1592)) * _1645;
    float _3493 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1661 = (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * 0.31831014156341552734375;
    float _1671 = (((_1655 * cbLight._m0[_1626].x) * _1661) * _1456) + ((((cbLight._m0[_1572].x * _1425) * _1604) * _1612) * _1470);
    float _1672 = (((_1655 * cbLight._m0[_1626].y) * _1661) * _1456) + ((((cbLight._m0[_1572].y * _1426) * _1604) * _1612) * _1470);
    float _1673 = (((_1655 * cbLight._m0[_1626].z) * _1661) * _1456) + ((((cbLight._m0[_1572].z * _1427) * _1604) * _1612) * _1470);
    float _1735;
    float _1737;
    float _1739;
    if (_1510)
    {
        _1735 = _1671;
        _1737 = _1672;
        _1739 = _1673;
    }
    else
    {
        uint _1741 = _1433 + 10u;
        uint _1747 = _1433 + 2u;
        float _1753 = cbLight._m0[_1747].x + _332;
        float _1754 = cbLight._m0[_1747].y + _333;
        float _1755 = cbLight._m0[_1747].z + _334;
        float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
        float _1763 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1747].xyz));
        float _3504 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1766 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1767 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1753 * _1759, _1754 * _1759, _1755 * _1759));
        float _3515 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = (exp2(log2(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1780 = (0.5 / ((_1766 + 9.9999999392252902907785028219223e-09) + _1592)) * _1766;
        float _3526 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1782 = (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.31831014156341552734375;
        float _1783 = isnan(1.0) ? _1448 : (isnan(_1448) ? 1.0 : min(_1448, 1.0));
        _1735 = (((_1776 * cbLight._m0[_1741].x) * _1782) * _1783) + _1671;
        _1737 = (((_1776 * cbLight._m0[_1741].y) * _1782) * _1783) + _1672;
        _1739 = (((_1776 * cbLight._m0[_1741].z) * _1782) * _1783) + _1673;
    }
    float _1818;
    float _1820;
    float _1822;
    if (_1528)
    {
        _1818 = _1735;
        _1820 = _1737;
        _1822 = _1739;
    }
    else
    {
        uint _1829 = _1433 + 11u;
        uint _1835 = _1433 + 3u;
        float _1841 = cbLight._m0[_1835].x + _332;
        float _1842 = cbLight._m0[_1835].y + _333;
        float _1843 = cbLight._m0[_1835].z + _334;
        float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
        float _1851 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1835].xyz));
        float _3542 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1854 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1855 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1841 * _1847, _1842 * _1847, _1843 * _1847));
        float _3553 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = (exp2(log2(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1868 = (0.5 / ((_1854 + 9.9999999392252902907785028219223e-09) + _1592)) * _1854;
        float _3564 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1870 = (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * 0.31831014156341552734375;
        float _1871 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
        _1818 = (((_1864 * cbLight._m0[_1829].x) * _1870) * _1871) + _1735;
        _1820 = (((_1864 * cbLight._m0[_1829].y) * _1870) * _1871) + _1737;
        _1822 = (((_1864 * cbLight._m0[_1829].z) * _1870) * _1871) + _1739;
    }
    float _2006;
    float _2008;
    float _2010;
    float _2012;
    float _2014;
    float _2016;
    if (_1431.y == 0u)
    {
        float _1946 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1946;
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1946;
        float _1949 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1946;
        uvec4 _1961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1962 = _1961.x;
        uint _1973 = uint((float(_1961.y) * floor(float(uint(cbSceneParam._m0[85u].y * _341) / _1962))) + floor(float(uint(cbSceneParam._m0[85u].x * _340) / _1962)));
        float _1983 = (log2(_1949 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1984 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        uint _1987 = uint(isnan(14.0) ? _1984 : (isnan(_1984) ? 14.0 : min(_1984, 14.0)));
        uvec4 _1992 = texelFetch(g_lightClusterGridBuffer, int(((_1987 << 2u) + (_1973 << 6u)) >> 2u));
        uint _1993 = _1992.x;
        uint _1994 = _1961.z;
        float _2135;
        float _2137;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        if (((((1u << ((_1994 >> 4u) & 15u)) + 4294967295u) & _1993) == 0u) || ((_1994 & 240u) == 0u))
        {
            _2135 = 0.0;
            _2137 = 0.0;
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
            _2145 = 0.0;
        }
        else
        {
            float _2136;
            float _2138;
            float _2140;
            float _2142;
            float _2144;
            float _2146;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            float _2288 = 0.0;
            float _2289 = 0.0;
            float _2290 = 0.0;
            uint _2291 = 0u;
            uint _2300;
            bool _2301;
            for (;;)
            {
                _2300 = texelFetch(g_lightClassification, int((((_1987 << 5u) + (_1973 << 9u)) + (_2291 << 2u)) >> 2u)).x;
                _2301 = _2300 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2301)
                {
                    frontier_phi_61_pred = _2285;
                    frontier_phi_61_pred_1 = _2290;
                    frontier_phi_61_pred_2 = _2289;
                    frontier_phi_61_pred_3 = _2288;
                    frontier_phi_61_pred_4 = _2287;
                    frontier_phi_61_pred_5 = _2286;
                }
                else
                {
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    uint _2415;
                    _2409 = _2285;
                    _2410 = _2286;
                    _2411 = _2287;
                    _2412 = _2288;
                    _2413 = _2289;
                    _2414 = _2290;
                    _2415 = _2300;
                    float _2341;
                    float _2342;
                    float _2343;
                    float _2344;
                    float _2345;
                    float _2346;
                    for (;;)
                    {
                        uint _2419 = uint(findLSB(_2415)) + (_2291 << 5u);
                        uint _2416 = (_2415 + 4294967295u) & _2415;
                        uint _2421 = _2419 * 48u;
                        vec4 _2435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2421)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 3u)).x));
                        uint _2441 = (_2419 * 48u) + 4u;
                        vec4 _2454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2441)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 3u)).x));
                        uint _2460 = (_2419 * 48u) + 8u;
                        vec3 _2471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2460)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 2u)).x));
                        float _2475 = _2435.x - _1947;
                        float _2476 = _2435.y - _1948;
                        float _2477 = _2435.z - _1949;
                        float _2478 = dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477));
                        float _2481 = inversesqrt(_2478);
                        float _2490 = 1.0 - (_2478 * _2435.w);
                        float _3590 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
                        float _2491 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
                        float _2492 = sqrt(_2478) * _2454.w;
                        float _2495 = 1.39999997615814208984375 / (_2492 + 1.39999997615814208984375);
                        float _2496 = _2495 * _2495;
                        float _2499 = ((1.0 - _2496) * dot(vec3(_362, _365, _368), vec3(_2481 * _2475, _2481 * _2476, _2481 * _2477))) + _2496;
                        float _2502 = _2492 * _2492;
                        float _2506 = ((isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))) * _2491) / ((_2502 * 0.699999988079071044921875) + 1.0);
                        float _2510 = (-0.0) - _1947;
                        float _2511 = (-0.0) - _1948;
                        float _2512 = (-0.0) - _1949;
                        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
                        float _2520 = dot(vec3(_362, _365, _368), vec3(_2516 * _2510, _2516 * _2511, _2516 * _2512));
                        float _3606 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
                        float _3617 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _2524 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
                        float _2528 = (0.5 / (((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) + 9.9999999392252902907785028219223e-09) + _2524)) * _2524;
                        float _3628 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
                        float _2537 = (((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 3.1415927410125732421875) / ((_2502 * 2.1991131305694580078125) + 3.141590118408203125)) * _2491;
                        _2344 = (_2506 * _2454.x) + _2412;
                        _2345 = (_2506 * _2454.y) + _2413;
                        _2346 = (_2506 * _2454.z) + _2414;
                        _2341 = (_2537 * _2471.x) + _2409;
                        _2342 = (_2537 * _2471.y) + _2410;
                        _2343 = (_2537 * _2471.z) + _2411;
                        if (_2416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2409 = _2341;
                            _2410 = _2342;
                            _2411 = _2343;
                            _2412 = _2344;
                            _2413 = _2345;
                            _2414 = _2346;
                            _2415 = _2416;
                        }
                    }
                    frontier_phi_61_pred = _2341;
                    frontier_phi_61_pred_1 = _2346;
                    frontier_phi_61_pred_2 = _2345;
                    frontier_phi_61_pred_3 = _2344;
                    frontier_phi_61_pred_4 = _2343;
                    frontier_phi_61_pred_5 = _2342;
                }
                _2136 = frontier_phi_61_pred;
                _2146 = frontier_phi_61_pred_1;
                _2144 = frontier_phi_61_pred_2;
                _2142 = frontier_phi_61_pred_3;
                _2140 = frontier_phi_61_pred_4;
                _2138 = frontier_phi_61_pred_5;
                uint _2292 = _2291 + 1u;
                if (_2292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2285 = _2136;
                    _2286 = _2138;
                    _2287 = _2140;
                    _2288 = _2142;
                    _2289 = _2144;
                    _2290 = _2146;
                    _2291 = _2292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2135 = _2136;
            _2137 = _2138;
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
            _2145 = _2146;
        }
        uvec4 _2149 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2150 = _2149.z;
        uint _2152 = (_2150 >> 8u) & 15u;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        if (((4294967295u << _2152) & _1993) == 0u)
        {
            _2256 = _2135;
            _2258 = _2137;
            _2260 = _2139;
            _2262 = _2141;
            _2264 = _2143;
            _2266 = _2145;
        }
        else
        {
            float _2281 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2152 < ((_2150 >> 12u) & 15u))
            {
                float _2257;
                float _2259;
                float _2261;
                float _2263;
                float _2265;
                float _2267;
                float _2392 = _2135;
                float _2393 = _2137;
                float _2394 = _2139;
                float _2395 = _2141;
                float _2396 = _2143;
                float _2397 = _2145;
                uint _2398 = _2152;
                uint _2407;
                bool _2408;
                for (;;)
                {
                    _2407 = texelFetch(g_lightClassification, int((((_1987 << 5u) + (_1973 << 9u)) + (_2398 << 2u)) >> 2u)).x;
                    _2408 = _2407 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2408)
                    {
                        frontier_phi_67_pred = _2395;
                        frontier_phi_67_pred_1 = _2396;
                        frontier_phi_67_pred_2 = _2397;
                        frontier_phi_67_pred_3 = _2394;
                        frontier_phi_67_pred_4 = _2393;
                        frontier_phi_67_pred_5 = _2392;
                    }
                    else
                    {
                        float _2542;
                        float _2543;
                        float _2544;
                        float _2545;
                        float _2546;
                        float _2547;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2555 = _2392;
                        float _2556 = _2393;
                        float _2557 = _2394;
                        float _2558 = _2395;
                        float _2559 = _2396;
                        float _2560 = _2397;
                        uint _2561 = _2407;
                        uint _2562;
                        vec4 _2587;
                        float _2588;
                        vec4 _2603;
                        vec3 _2615;
                        vec4 _2631;
                        vec4 _2647;
                        float _2694;
                        bool _2695;
                        for (;;)
                        {
                            uint _2572 = ((_2398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2561));
                            _2562 = (_2561 + 4294967295u) & _2561;
                            uint _2574 = _2572 * 40u;
                            _2587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 3u)).x));
                            _2588 = _2587.w;
                            uint _2590 = (_2572 * 40u) + 4u;
                            _2603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 3u)).x));
                            uint _2605 = (_2572 * 40u) + 8u;
                            _2615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 2u)).x));
                            uint _2618 = (_2572 * 40u) + 16u;
                            _2631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 3u)).x));
                            uint _2634 = (_2572 * 40u) + 20u;
                            _2647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 3u)).x));
                            uint _2650 = (_2572 * 40u) + 24u;
                            vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 3u)).x));
                            uint _2669 = (_2572 * 40u) + 28u;
                            vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 3u)).x));
                            _2694 = fma(_1949, _2682.z, fma(_1948, _2682.y, _2682.x * _1947)) + _2682.w;
                            _2695 = !((fma(_1949, _2663.z, fma(_1948, _2663.y, _2663.x * _1947)) + _2663.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2695)
                            {
                                float _2722 = _2587.x - _1947;
                                float _2723 = _2587.y - _1948;
                                float _2724 = _2587.z - _1949;
                                float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                                float _2728 = inversesqrt(_2725);
                                float _2729 = _2728 * _2722;
                                float _2730 = _2728 * _2723;
                                float _2731 = _2728 * _2724;
                                float _2735 = 1.0 - (_2725 / (_2588 * _2588));
                                float _3639 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                                float _2736 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
                                float _2740 = sqrt(_2725) * _2603.w;
                                float _2742 = 1.39999997615814208984375 / (_2740 + 1.39999997615814208984375);
                                float _2743 = _2742 * _2742;
                                float _2744 = 1.0 - _2743;
                                float _2746 = (_2744 * dot(vec3(_2729, _2730, _2731), vec3(_362, _365, _368))) + _2743;
                                float _2749 = _2740 * _2740;
                                float _2753 = (fma(_1949, _2631.z, fma(_1948, _2631.y, _2631.x * _1947)) + _2631.w) / _2694;
                                float _2754 = (fma(_1949, _2647.z, fma(_1948, _2647.y, _2647.x * _1947)) + _2647.w) / _2694;
                                float _2758 = 1.0 - dot(vec2(_2753, _2754), vec2(_2753, _2754));
                                float _3655 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                                float _2759 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
                                float _2760 = _2759 * (((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2736) / ((_2749 * 0.699999988079071044921875) + 1.0));
                                float _2770 = dot(vec3(_362, _365, _368), vec3((-0.0) - (_1947 * _2281), (-0.0) - (_1948 * _2281), (-0.0) - (_1949 * _2281)));
                                float _3666 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                                float _2778 = (_2744 * dot(vec3(_362, _365, _368), vec3(_2729, _2730, _2731))) + _2743;
                                float _3677 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                                float _2779 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
                                float _2783 = (0.5 / (((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) + 9.9999999392252902907785028219223e-09) + _2779)) * _2779;
                                float _3688 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2790 = (_2759 * _2736) * (((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 3.1415927410125732421875) / ((_2749 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2790 * _2615.x;
                                frontier_phi_73_pred_1 = _2790 * _2615.y;
                                frontier_phi_73_pred_2 = _2760 * _2603.z;
                                frontier_phi_73_pred_3 = _2760 * _2603.y;
                                frontier_phi_73_pred_4 = _2760 * _2603.x;
                                frontier_phi_73_pred_5 = _2790 * _2615.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2794 = frontier_phi_73_pred;
                            _2795 = frontier_phi_73_pred_1;
                            _2799 = frontier_phi_73_pred_2;
                            _2798 = frontier_phi_73_pred_3;
                            _2797 = frontier_phi_73_pred_4;
                            _2796 = frontier_phi_73_pred_5;
                            _2545 = _2797 + _2558;
                            _2546 = _2798 + _2559;
                            _2547 = _2799 + _2560;
                            _2542 = _2794 + _2555;
                            _2543 = _2795 + _2556;
                            _2544 = _2796 + _2557;
                            if (_2562 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2555 = _2542;
                                _2556 = _2543;
                                _2557 = _2544;
                                _2558 = _2545;
                                _2559 = _2546;
                                _2560 = _2547;
                                _2561 = _2562;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2545;
                        frontier_phi_67_pred_1 = _2546;
                        frontier_phi_67_pred_2 = _2547;
                        frontier_phi_67_pred_3 = _2544;
                        frontier_phi_67_pred_4 = _2543;
                        frontier_phi_67_pred_5 = _2542;
                    }
                    _2263 = frontier_phi_67_pred;
                    _2265 = frontier_phi_67_pred_1;
                    _2267 = frontier_phi_67_pred_2;
                    _2261 = frontier_phi_67_pred_3;
                    _2259 = frontier_phi_67_pred_4;
                    _2257 = frontier_phi_67_pred_5;
                    uint _2399 = _2398 + 1u;
                    if (_2399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2392 = _2257;
                        _2393 = _2259;
                        _2394 = _2261;
                        _2395 = _2263;
                        _2396 = _2265;
                        _2397 = _2267;
                        _2398 = _2399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2265;
                frontier_phi_55_56_ladder_1 = _2267;
                frontier_phi_55_56_ladder_2 = _2263;
                frontier_phi_55_56_ladder_3 = _2261;
                frontier_phi_55_56_ladder_4 = _2259;
                frontier_phi_55_56_ladder_5 = _2257;
            }
            else
            {
                frontier_phi_55_56_ladder = _2143;
                frontier_phi_55_56_ladder_1 = _2145;
                frontier_phi_55_56_ladder_2 = _2141;
                frontier_phi_55_56_ladder_3 = _2139;
                frontier_phi_55_56_ladder_4 = _2137;
                frontier_phi_55_56_ladder_5 = _2135;
            }
            _2256 = frontier_phi_55_56_ladder_5;
            _2258 = frontier_phi_55_56_ladder_4;
            _2260 = frontier_phi_55_56_ladder_3;
            _2262 = frontier_phi_55_56_ladder_2;
            _2264 = frontier_phi_55_56_ladder;
            _2266 = frontier_phi_55_56_ladder_1;
        }
        float _2271 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
        _2006 = (_2271 * _2262) + _1566;
        _2008 = (_2271 * _2264) + _1568;
        _2010 = (_2271 * _2266) + _1570;
        _2012 = ((_2256 * 0.039999999105930328369140625) * _2271) + _1818;
        _2014 = ((_2258 * 0.039999999105930328369140625) * _2271) + _1820;
        _2016 = ((_2260 * 0.039999999105930328369140625) * _2271) + _1822;
    }
    else
    {
        _2006 = _1566;
        _2008 = _1568;
        _2010 = _1570;
        _2012 = _1818;
        _2014 = _1820;
        _2016 = _1822;
    }
    uint _2022 = _383 + uint(cbMatDynParam._m0[0u].w);
    float _2032 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _218.x) * cbSceneParam._m0[72u].y) * _244) * cbInstanceData._m0[_2022].x;
    float _2037 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _218.y) * cbSceneParam._m0[72u].y) * _244) * cbInstanceData._m0[_2022].y;
    float _2042 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _218.z) * cbSceneParam._m0[72u].y) * _244) * cbInstanceData._m0[_2022].z;
    float _3704 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3715 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3726 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _2059 = (((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_2006 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _407))) + ((_2012 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _1185)) * cbPerFrame._m0[3u].x)) + _2032;
    float _2061 = (_2037 + ((_2014 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _1185)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_2008 + ((isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))) * _407)));
    float _2063 = (_2042 + ((_2016 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _1185)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_2010 + ((isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))) * _407)));
    float _3752 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2076 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    uint _2077 = _381 + 6u;
    float _2085 = _340 / cbSceneParam._m0[86u].x;
    float _2086 = _341 / cbSceneParam._m0[86u].y;
    vec4 _2100 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, (log2((isnan(cbSceneParam._m0[77u].w) ? _274 : (isnan(_274) ? cbSceneParam._m0[77u].w : min(_274, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2102 = _2100.x;
    float _2103 = _2100.y;
    float _2104 = _2100.z;
    float _2105 = _2100.w;
    float _2198;
    float _2200;
    float _2202;
    float _2204;
    if (_274 > cbSceneParam._m0[78u].w)
    {
        float _2160 = isnan(_274) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _274 : min(cbSceneParam._m0[80u].w, _274));
        float _2161 = _2160 / _274;
        float _2172 = _2161 * _325;
        float _2173 = _326 * _2161;
        float _2174 = (-0.0) - _2173;
        float _2176 = _2161 * _327;
        float _2178 = (cbSceneParam._m0[77u].w * _2174) / _2160;
        float _2179 = _2178 + cbSceneParam._m0[79u].w;
        float _2180 = cbSceneParam._m0[79u].w - _2173;
        float _2186 = sqrt(((_2172 * _2172) + (_2173 * _2173)) + (_2176 * _2176));
        float _2189 = (1.0 - (cbSceneParam._m0[77u].w / _2160)) * _2186;
        float _2194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2354;
        if (abs((_2174 - _2178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2354 = ((((_2179 > 0.0) ? exp2(_2194 * _2179) : (2.0 - exp2(_2196 * _2179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2189;
        }
        else
        {
            float _2314 = 1.0 / cbSceneParam._m0[80u].x;
            float _2315 = isnan(_2180) ? _2179 : (isnan(_2179) ? _2180 : max(_2179, _2180));
            float _2316 = isnan(_2180) ? _2179 : (isnan(_2179) ? _2180 : min(_2179, _2180));
            float _2325 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : min(_2315, 0.0));
            float _2326 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : min(_2316, 0.0));
            _2354 = ((abs(_2186 / _2174) * cbSceneParam._m0[80u].y) * ((((_2325 - _2326) * 2.0) - ((exp2(_2194 * (isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)))) - exp2(_2194 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0))))) * _2314)) - ((exp2(_2196 * _2325) - exp2(_2196 * _2326)) * _2314))) + (_2189 * cbSceneParam._m0[80u].z);
        }
        vec4 _2356 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, 1.0), 0.0);
        float _2365 = exp2((_2354 * (-1.44269502162933349609375)) * (1.0 - _2356.w));
        float _2366 = log2(_2365);
        float _2382 = log2(_2105);
        _2198 = (exp2(_2382 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2366 * cbSceneParam._m0[78u].x)) * _2356.x) / cbSceneParam._m0[78u].x)) + _2102;
        _2200 = (exp2(_2382 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2366 * cbSceneParam._m0[78u].y)) * _2356.y) / cbSceneParam._m0[78u].y)) + _2103;
        _2202 = (exp2(_2382 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2366 * cbSceneParam._m0[78u].z)) * _2356.z) / cbSceneParam._m0[78u].z)) + _2104;
        _2204 = _2365 * _2105;
    }
    else
    {
        _2198 = _2102;
        _2200 = _2103;
        _2202 = _2104;
        _2204 = _2105;
    }
    float _2215 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2216 = _2215 == 3.0;
    float _2217 = log2(_2204);
    float _2221 = exp2(_2217 * cbSceneParam._m0[78u].x);
    float _2222 = exp2(_2217 * cbSceneParam._m0[78u].y);
    float _2223 = exp2(_2217 * cbSceneParam._m0[78u].z);
    float _2224 = _2221 * (isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0)));
    float _2225 = _2222 * (isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)));
    float _2226 = _2223 * (isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0)));
    float _2235 = (_2215 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2235 * (_2216 ? _2224 : (_2224 + (cbSceneParam._m0[72u].w * _2198)));
    SV_Target.y = _2235 * (_2216 ? _2225 : (_2225 + (cbSceneParam._m0[72u].w * _2200)));
    SV_Target.z = _2235 * (_2216 ? _2226 : (_2226 + (cbSceneParam._m0[72u].w * _2202)));
    SV_Target.w = cbInstanceData._m0[_2077].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2032) * _2076) * _2221) * _2235;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2037) * _2076) * _2222) * _2235;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2042) * _2076) * _2223) * _2235;
    SV_Target_1.w = cbInstanceData._m0[_2077].w;
}


