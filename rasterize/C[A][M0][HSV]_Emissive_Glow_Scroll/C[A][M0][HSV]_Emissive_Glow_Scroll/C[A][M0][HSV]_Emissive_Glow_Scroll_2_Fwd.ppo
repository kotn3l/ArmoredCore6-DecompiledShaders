#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _742;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _186 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _231 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _243 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _244 = _243 * _165;
    float _245 = _243 * _166;
    float _246 = _243 * _167;
    float _2895 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2906 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2917 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _266 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _307 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _317 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _307);
    float _318 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _307);
    float _319 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _307);
    float _323 = inversesqrt(dot(vec3(_317, _318, _319), vec3(_317, _318, _319)));
    float _324 = _317 * _323;
    float _325 = _318 * _323;
    float _326 = _319 * _323;
    float _332 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _333 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _354 = fma(_246, cbSceneParam._m0[5u].z, fma(_245, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _244));
    float _357 = fma(_246, cbSceneParam._m0[6u].z, fma(_245, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _244));
    float _360 = fma(_246, cbSceneParam._m0[7u].z, fma(_245, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _244));
    uint _373 = uint(roundEven(NORMAL.w)) * 13u;
    uint _374 = _373 + 9u;
    uint _375 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _381 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0)))) * cbInstanceData._m0[_375].x;
    float _382 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0)))) * cbInstanceData._m0[_375].y;
    float _383 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0)))) * cbInstanceData._m0[_375].z;
    float _2928 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
    float _2939 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
    float _2950 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0));
    vec4 _395 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _332, cbSceneParam._m0[86u].y * _333));
    float _398 = _395.x * TEXCOORD.z;
    float _399 = dot(vec3(_244, _245, _246), vec3(_324, _325, _326));
    float _402 = _399 * 2.0;
    float _407 = (_402 * _244) - _324;
    float _408 = (_402 * _245) - _325;
    float _409 = (_402 * _246) - _326;
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _741;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _466 = fma(_439, cbModelParam._m0[26u].z, fma(_435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _431));
        float _470 = fma(_439, cbModelParam._m0[27u].z, fma(_435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _431));
        float _474 = fma(_439, cbModelParam._m0[28u].z, fma(_435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _431));
        float _499 = _431 + _244;
        float _500 = _435 + _245;
        float _501 = _439 + _246;
        float _511 = fma(_501, cbModelParam._m0[26u].z, fma(_500, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _499)) - _466;
        float _512 = fma(_501, cbModelParam._m0[27u].z, fma(_500, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _499)) - _470;
        float _513 = fma(_501, cbModelParam._m0[28u].z, fma(_500, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _499)) - _474;
        float _517 = inversesqrt(dot(vec3(_511, _512, _513), vec3(_511, _512, _513)));
        float _530 = ((_517 * _511) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_466 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _531 = ((_517 * _512) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_470 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _532 = ((_517 * _513) / cbModelParam._m0[34u].z) + ((((((_474 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _535 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        float _569 = exp2((_535.w + (-0.5)) * 20.0) * 2.0;
        float _570 = _569 * (_535.x + (-0.5));
        float _571 = _569 * (_535.y + (-0.5));
        float _572 = _569 * (_535.z + (-0.5));
        float _579 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_542.x + (-0.5));
        float _581 = _579 * (_542.y + (-0.5));
        float _582 = _579 * (_542.z + (-0.5));
        float _589 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_549.x + (-0.5));
        float _591 = _589 * (_549.y + (-0.5));
        float _592 = _589 * (_549.z + (-0.5));
        float _599 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _600 = _599 * (_556.x + (-0.5));
        float _601 = _599 * (_556.y + (-0.5));
        float _602 = _599 * (_556.z + (-0.5));
        float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _604 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _606 = _570 * 0.5;
        float _607 = _580 * 0.5;
        float _608 = _590 * 0.5;
        float _609 = dot(vec3(_606, _607, _608), vec3(_606, _607, _608));
        float _614 = (_609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_609);
        float _623 = (dot(vec3(_244, _245, _246), vec3(_614 * _606, _614 * _607, _614 * _608)) + 1.0) * 0.5;
        float _2976 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _633 = sqrt(((_607 * _607) + (_606 * _606)) + (_608 * _608)) / (_603 + 9.9999997473787516355514526367188e-06);
        float _2987 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _634 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
        float _635 = _634 * 2.0;
        float _639 = (1.0 - _634) / (_634 + 1.0);
        float _2998 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _649 = ((((1.0 - _640) * (_635 + 2.0)) * exp2(log2(isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0))) * (_635 + 1.0))) + _640) * _603;
        float _650 = _571 * 0.5;
        float _651 = _581 * 0.5;
        float _652 = _591 * 0.5;
        float _653 = dot(vec3(_650, _651, _652), vec3(_650, _651, _652));
        float _658 = (_653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_653);
        float _666 = (dot(vec3(_244, _245, _246), vec3(_658 * _650, _658 * _651, _658 * _652)) + 1.0) * 0.5;
        float _3009 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _675 = sqrt(((_651 * _651) + (_650 * _650)) + (_652 * _652)) / (_604 + 9.9999997473787516355514526367188e-06);
        float _3020 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0));
        float _677 = _676 * 2.0;
        float _681 = (1.0 - _676) / (_676 + 1.0);
        float _3031 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
        float _691 = ((((1.0 - _682) * (_677 + 2.0)) * exp2(log2(isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0))) * (_677 + 1.0))) + _682) * _604;
        float _692 = _572 * 0.5;
        float _693 = _582 * 0.5;
        float _694 = _592 * 0.5;
        float _695 = dot(vec3(_692, _693, _694), vec3(_692, _693, _694));
        float _700 = (_695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_695);
        float _708 = (dot(vec3(_244, _245, _246), vec3(_700 * _692, _700 * _693, _700 * _694)) + 1.0) * 0.5;
        float _3042 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _717 = sqrt(((_693 * _693) + (_692 * _692)) + (_694 * _694)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _3053 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _719 = _718 * 2.0;
        float _723 = (1.0 - _718) / (_718 + 1.0);
        float _3064 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _733 = ((((1.0 - _724) * (_719 + 2.0)) * exp2(log2(isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0))) * (_719 + 1.0))) + _724) * _605;
        _741 = _572;
        _743 = _571;
        _744 = _570;
        _745 = _582;
        _746 = _581;
        _747 = _580;
        _748 = _592;
        _749 = _591;
        _750 = _590;
        _751 = _605;
        _752 = _604;
        _753 = _603;
        _754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0)));
        _755 = cbModelParam._m0[36u].z * (isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0)));
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0)));
    }
    else
    {
        _741 = _742;
        _743 = _742;
        _744 = _742;
        _745 = _742;
        _746 = _742;
        _747 = _742;
        _748 = _742;
        _749 = _742;
        _750 = _742;
        _751 = _742;
        _752 = _742;
        _753 = _742;
        _754 = 0.0;
        _755 = 0.0;
        _756 = 0.0;
    }
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _782 = fma(_439, cbModelParam._m0[30u].z, fma(_435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _431));
        float _786 = fma(_439, cbModelParam._m0[31u].z, fma(_435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _431));
        float _790 = fma(_439, cbModelParam._m0[32u].z, fma(_435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _431));
        float _813 = _431 + _244;
        float _814 = _435 + _245;
        float _815 = _439 + _246;
        float _825 = fma(_815, cbModelParam._m0[30u].z, fma(_814, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _813)) - _782;
        float _826 = fma(_815, cbModelParam._m0[31u].z, fma(_814, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _813)) - _786;
        float _827 = fma(_815, cbModelParam._m0[32u].z, fma(_814, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _813)) - _790;
        float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
        float _844 = ((_831 * _825) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_782 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_831 * _826) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_786 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_831 * _827) / cbModelParam._m0[35u].z) + ((((((_790 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        float _881 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_848.x + (-0.5));
        float _883 = _881 * (_848.y + (-0.5));
        float _884 = _881 * (_848.z + (-0.5));
        float _891 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_855.x + (-0.5));
        float _893 = _891 * (_855.y + (-0.5));
        float _894 = _891 * (_855.z + (-0.5));
        float _901 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_862.x + (-0.5));
        float _903 = _901 * (_862.y + (-0.5));
        float _904 = _901 * (_862.z + (-0.5));
        float _911 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_869.x + (-0.5));
        float _913 = _911 * (_869.y + (-0.5));
        float _914 = _911 * (_869.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_244, _245, _246), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3127 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_945 + 1.0))) + _950) * _915;
        float _960 = _883 * 0.5;
        float _961 = _893 * 0.5;
        float _962 = _903 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_244, _245, _246), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3138 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3149 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3160 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * (_987 + 1.0))) + _992) * _916;
        float _1002 = _884 * 0.5;
        float _1003 = _894 * 0.5;
        float _1004 = _904 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_244, _245, _246), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3171 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3182 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3193 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * (_1029 + 1.0))) + _1034) * _917;
        _1051 = _884;
        _1052 = _883;
        _1053 = _882;
        _1054 = _894;
        _1055 = _893;
        _1056 = _892;
        _1057 = _904;
        _1058 = _903;
        _1059 = _902;
        _1060 = _917;
        _1061 = _916;
        _1062 = _915;
        _1063 = cbModelParam._m0[36u].w * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1064 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1065 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _742;
        _1052 = _742;
        _1053 = _742;
        _1054 = _742;
        _1055 = _742;
        _1056 = _742;
        _1057 = _742;
        _1058 = _742;
        _1059 = _742;
        _1060 = _742;
        _1061 = _742;
        _1062 = _742;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1075 = (cbModelParam._m0[1u].x * (_1063 - _754)) + _754;
    float _1076 = (cbModelParam._m0[1u].x * (_1064 - _755)) + _755;
    float _1077 = (cbModelParam._m0[1u].x * (_1065 - _756)) + _756;
    float _1098 = fma(_1077, cbSceneParam._m0[89u].z, fma(_1076, cbSceneParam._m0[89u].y, _1075 * cbSceneParam._m0[89u].x));
    float _1101 = fma(_1077, cbSceneParam._m0[90u].z, fma(_1076, cbSceneParam._m0[90u].y, _1075 * cbSceneParam._m0[90u].x));
    float _1104 = fma(_1077, cbSceneParam._m0[91u].z, fma(_1076, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1075));
    float _1119 = _407 * 0.5;
    float _1120 = _408 * 0.5;
    float _1121 = _409 * 0.5;
    float _1122 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_1053, _1056, _1059, _1062));
    float _1125 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_1052, _1055, _1058, _1061));
    float _1128 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_1051, _1054, _1057, _1060));
    float _1162;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1135 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_741, _745, _748, _751));
        float _1139 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_743, _746, _749, _752));
        float _1143 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_744, _747, _750, _753));
        float _1150 = dot(vec4(cbModelParam._m0[39u]), vec4(_1119, _1120, _1121, 1.0));
        _1162 = dot(vec3(isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1150) ? 0.0 : (isnan(0.0) ? _1150 : max(0.0, _1150))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1162 = 1.0;
    }
    float _1173;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1164 = dot(vec4(cbModelParam._m0[40u]), vec4(_1119, _1120, _1121, 1.0));
        _1173 = dot(vec3(isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1164) ? 0.0 : (isnan(0.0) ? _1164 : max(0.0, _1164))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1173 = 1.0;
    }
    float _1177 = (_1173 * cbModelParam._m0[1u].x) + (_1162 * (1.0 - cbModelParam._m0[1u].x));
    float _1186 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1267;
    float _1269;
    float _1271;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1234 = fma(_439, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431)) + cbModelParam._m0[13u].w;
        float _1238 = fma(_439, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431)) + cbModelParam._m0[14u].w;
        float _1242 = fma(_439, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431)) + cbModelParam._m0[15u].w;
        float _1245 = fma(_409, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407));
        float _1248 = fma(_409, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407));
        float _1251 = fma(_409, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407));
        float _1277;
        if (_1245 > 0.0)
        {
            _1277 = abs((1.0 - _1234) / _1245);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1245 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1234 + 1.0) / _1245);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1277 = frontier_phi_14_12_ladder;
        }
        float _1483;
        if (_1248 > 0.0)
        {
            _1483 = abs((1.0 - _1238) / _1248);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1248 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1238 + 1.0) / _1248);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1483 = frontier_phi_23_19_ladder;
        }
        float _1672;
        if (_1251 > 0.0)
        {
            _1672 = abs((1.0 - _1242) / _1251);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1251 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1242 + 1.0) / _1251);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1672 = frontier_phi_35_30_ladder;
        }
        float _1674 = isnan(_1483) ? _1277 : (isnan(_1277) ? _1483 : min(_1277, _1483));
        float _1675 = isnan(_1672) ? _1674 : (isnan(_1674) ? _1672 : min(_1674, _1672));
        float _1679 = (_1675 * _1245) + _1234;
        float _1680 = (_1675 * _1248) + _1238;
        float _1681 = (_1675 * _1251) + _1242;
        float _1682 = _1675 * 9.9999997473787516355514526367188e-05;
        float _1684 = (-1.0) - _1682;
        float _1686 = _1682 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1681 > _1686) || ((_1681 < _1684) || ((_1680 > _1686) || ((_1680 < _1684) || ((_1679 < _1684) || (_1679 > _1686))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1681, cbModelParam._m0[9u].z, fma(_1680, cbModelParam._m0[9u].y, _1679 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1681, cbModelParam._m0[10u].z, fma(_1680, cbModelParam._m0[10u].y, _1679 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1681, cbModelParam._m0[11u].z, fma(_1680, cbModelParam._m0[11u].y, _1679 * cbModelParam._m0[11u].x))), _1186);
            frontier_phi_13_35_ladder = _1778.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1778.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1778.x * cbModelParam._m0[1u].y;
        }
        _1267 = frontier_phi_13_35_ladder_2;
        _1269 = frontier_phi_13_35_ladder_1;
        _1271 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1255 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_407, _408, _409), _1186);
        _1267 = _1255.x * cbModelParam._m0[1u].y;
        _1269 = _1255.y * cbModelParam._m0[1u].y;
        _1271 = _1255.z * cbModelParam._m0[1u].y;
    }
    float _1274 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1366;
    float _1368;
    float _1370;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1330 = fma(_439, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431)) + cbModelParam._m0[21u].w;
        float _1334 = fma(_439, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431)) + cbModelParam._m0[22u].w;
        float _1338 = fma(_439, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431)) + cbModelParam._m0[23u].w;
        float _1341 = fma(_409, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407));
        float _1344 = fma(_409, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407));
        float _1347 = fma(_409, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407));
        float _1488;
        if (_1341 > 0.0)
        {
            _1488 = abs((1.0 - _1330) / _1341);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1330 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1488 = frontier_phi_25_21_ladder;
        }
        float _1699;
        if (_1344 > 0.0)
        {
            _1699 = abs((1.0 - _1334) / _1344);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1334 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1699 = frontier_phi_37_32_ladder;
        }
        float _1850;
        if (_1347 > 0.0)
        {
            _1850 = abs((1.0 - _1338) / _1347);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1338 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1850 = frontier_phi_46_43_ladder;
        }
        float _1852 = isnan(_1699) ? _1488 : (isnan(_1488) ? _1699 : min(_1488, _1699));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1341) + _1330;
        float _1858 = (_1853 * _1344) + _1334;
        float _1859 = (_1853 * _1347) + _1338;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1860;
        float _1863 = _1860 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1859 > _1863) || ((_1859 < _1861) || ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 < _1861) || (_1857 > _1863))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1859, cbModelParam._m0[17u].z, fma(_1858, cbModelParam._m0[17u].y, _1857 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1859, cbModelParam._m0[18u].z, fma(_1858, cbModelParam._m0[18u].y, _1857 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1859, cbModelParam._m0[19u].z, fma(_1858, cbModelParam._m0[19u].y, _1857 * cbModelParam._m0[19u].x))), _1274);
            frontier_phi_22_46_ladder = _2096.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2096.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2096.x * cbModelParam._m0[1u].z;
        }
        _1366 = frontier_phi_22_46_ladder_2;
        _1368 = frontier_phi_22_46_ladder_1;
        _1370 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1350 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_407, _408, _409), _1274);
        _1366 = _1350.x * cbModelParam._m0[1u].z;
        _1368 = _1350.y * cbModelParam._m0[1u].z;
        _1370 = _1350.z * cbModelParam._m0[1u].z;
    }
    float _1382 = _398 * 0.01200000010430812835693359375;
    float _1384 = _1382 * ((cbModelParam._m0[1u].w * (_1366 - _1267)) + _1267);
    float _1385 = _1382 * ((cbModelParam._m0[1u].w * (_1368 - _1269)) + _1269);
    float _1386 = _1382 * ((cbModelParam._m0[1u].w * (_1370 - _1271)) + _1271);
    float _1389 = fma(_1386, cbSceneParam._m0[89u].z, fma(_1385, cbSceneParam._m0[89u].y, _1384 * cbSceneParam._m0[89u].x));
    float _1392 = fma(_1386, cbSceneParam._m0[90u].z, fma(_1385, cbSceneParam._m0[90u].y, _1384 * cbSceneParam._m0[90u].x));
    float _1395 = fma(_1386, cbSceneParam._m0[91u].z, fma(_1385, cbSceneParam._m0[91u].y, _1384 * cbSceneParam._m0[91u].x));
    uvec4 _1405 = floatBitsToUint(cbInstanceData._m0[_373 + 5u]);
    uint _1407 = _1405.x * 14u;
    uint _1408 = _1407 + 13u;
    float _1415 = _398 + (-1.0);
    float _1421 = (cbLight._m0[_1408].x * _1415) + 1.0;
    float _1422 = (cbLight._m0[_1408].y * _1415) + 1.0;
    float _1423 = (cbLight._m0[_1408].z * _1415) + 1.0;
    float _1424 = (cbLight._m0[_1408].w * _1415) + 1.0;
    uint _1425 = _1407 + 5u;
    float _1431 = isnan(1.0) ? _1422 : (isnan(_1422) ? 1.0 : min(_1422, 1.0));
    uint _1435 = _1407 + 4u;
    float _1442 = isnan(1.0) ? _1421 : (isnan(_1421) ? 1.0 : min(_1421, 1.0));
    uint _1446 = _1407 | 1u;
    float _1457 = dot(vec3(cbLight._m0[_1407].xyz), vec3(_244, _245, _246));
    float _1460 = dot(vec3(cbLight._m0[_1446].xyz), vec3(_244, _245, _246));
    float _3329 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
    float _3340 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
    float _1465 = (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * 0.3183098733425140380859375;
    float _1467 = (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * 0.3183098733425140380859375;
    float _1474 = ((cbLight._m0[_1425].x * _1431) * _1467) + ((cbLight._m0[_1435].x * _1442) * _1465);
    float _1475 = ((_1431 * cbLight._m0[_1425].y) * _1467) + ((_1442 * cbLight._m0[_1435].y) * _1465);
    float _1476 = ((_1431 * cbLight._m0[_1425].z) * _1467) + ((_1442 * cbLight._m0[_1435].z) * _1465);
    uvec4 _1480 = floatBitsToUint(cbLight._m0[_1407 + 12u]);
    bool _1482 = _1480.x == 0u;
    float _1493;
    float _1495;
    float _1497;
    if (_1482)
    {
        _1493 = _1474;
        _1495 = _1475;
        _1497 = _1476;
    }
    else
    {
        uint _1501 = _1407 + 6u;
        float _1517 = (dot(vec3(cbLight._m0[_1407 + 2u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1518 = _1517 * _1517;
        float _3351 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1520 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _1493 = (((cbLight._m0[_1501].x * 0.3183098733425140380859375) * _1519) * _1520) + _1474;
        _1495 = (((cbLight._m0[_1501].y * 0.3183098733425140380859375) * _1519) * _1520) + _1475;
        _1497 = (((cbLight._m0[_1501].z * 0.3183098733425140380859375) * _1519) * _1520) + _1476;
    }
    bool _1500 = _1480.y == 0u;
    float _1538;
    float _1540;
    float _1542;
    if (_1500)
    {
        _1538 = _1493;
        _1540 = _1495;
        _1542 = _1497;
    }
    else
    {
        uint _1643 = _1407 + 7u;
        float _1659 = (dot(vec3(cbLight._m0[_1407 + 3u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1660 = _1659 * _1659;
        float _3367 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1662 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
        _1538 = (((cbLight._m0[_1643].x * 0.3183098733425140380859375) * _1661) * _1662) + _1493;
        _1540 = (((cbLight._m0[_1643].y * 0.3183098733425140380859375) * _1661) * _1662) + _1495;
        _1542 = (((cbLight._m0[_1643].z * 0.3183098733425140380859375) * _1661) * _1662) + _1497;
    }
    uint _1544 = _1407 + 8u;
    float _1550 = cbLight._m0[_1407].x + _324;
    float _1551 = cbLight._m0[_1407].y + _325;
    float _1552 = cbLight._m0[_1407].z + _326;
    float _1556 = inversesqrt(dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552)));
    float _1560 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1407].xyz));
    float _3383 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1563 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _1564 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _1565 = dot(vec3(cbLight._m0[_1407].xyz), vec3(_1550 * _1556, _1551 * _1556, _1552 * _1556));
    float _3405 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1576 = (exp2(log2(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1582 = (0.5 / ((_1563 + 9.9999999392252902907785028219223e-09) + _1564)) * _1563;
    float _3416 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1584 = (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.31831014156341552734375;
    uint _1595 = _1407 + 9u;
    float _1601 = cbLight._m0[_1446].x + _324;
    float _1602 = cbLight._m0[_1446].y + _325;
    float _1603 = cbLight._m0[_1446].z + _326;
    float _1607 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
    float _1611 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1446].xyz));
    float _3427 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1614 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _1615 = dot(vec3(cbLight._m0[_1446].xyz), vec3(_1601 * _1607, _1602 * _1607, _1603 * _1607));
    float _3438 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1624 = (exp2(log2(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1628 = (0.5 / ((_1614 + 9.9999999392252902907785028219223e-09) + _1564)) * _1614;
    float _3449 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1630 = (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.31831014156341552734375;
    float _1640 = (((_1624 * cbLight._m0[_1595].x) * _1630) * _1431) + (((_1576 * cbLight._m0[_1544].x) * _1584) * _1442);
    float _1641 = (((_1624 * cbLight._m0[_1595].y) * _1630) * _1431) + (((_1576 * cbLight._m0[_1544].y) * _1584) * _1442);
    float _1642 = (((_1624 * cbLight._m0[_1595].z) * _1630) * _1431) + (((_1576 * cbLight._m0[_1544].z) * _1584) * _1442);
    float _1704;
    float _1706;
    float _1708;
    if (_1482)
    {
        _1704 = _1640;
        _1706 = _1641;
        _1708 = _1642;
    }
    else
    {
        uint _1710 = _1407 + 10u;
        uint _1716 = _1407 + 2u;
        float _1722 = cbLight._m0[_1716].x + _324;
        float _1723 = cbLight._m0[_1716].y + _325;
        float _1724 = cbLight._m0[_1716].z + _326;
        float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
        float _1732 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1716].xyz));
        float _3460 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1735 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1736 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1722 * _1728, _1723 * _1728, _1724 * _1728));
        float _3471 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = (exp2(log2(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1749 = (0.5 / ((_1735 + 9.9999999392252902907785028219223e-09) + _1564)) * _1735;
        float _3482 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1751 = (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.31831014156341552734375;
        float _1752 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _1704 = (((_1745 * cbLight._m0[_1710].x) * _1751) * _1752) + _1640;
        _1706 = (((_1745 * cbLight._m0[_1710].y) * _1751) * _1752) + _1641;
        _1708 = (((_1745 * cbLight._m0[_1710].z) * _1751) * _1752) + _1642;
    }
    float _1787;
    float _1789;
    float _1791;
    if (_1500)
    {
        _1787 = _1704;
        _1789 = _1706;
        _1791 = _1708;
    }
    else
    {
        uint _1798 = _1407 + 11u;
        uint _1804 = _1407 + 3u;
        float _1810 = cbLight._m0[_1804].x + _324;
        float _1811 = cbLight._m0[_1804].y + _325;
        float _1812 = cbLight._m0[_1804].z + _326;
        float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
        float _1820 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1804].xyz));
        float _3498 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1823 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1824 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_1810 * _1816, _1811 * _1816, _1812 * _1816));
        float _3509 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = (exp2(log2(1.0 - (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1837 = (0.5 / ((_1823 + 9.9999999392252902907785028219223e-09) + _1564)) * _1823;
        float _3520 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1839 = (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 0.31831014156341552734375;
        float _1840 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
        _1787 = (((_1833 * cbLight._m0[_1798].x) * _1839) * _1840) + _1704;
        _1789 = (((_1833 * cbLight._m0[_1798].y) * _1839) * _1840) + _1706;
        _1791 = (((_1833 * cbLight._m0[_1798].z) * _1839) * _1840) + _1708;
    }
    float _1975;
    float _1977;
    float _1979;
    float _1981;
    float _1983;
    float _1985;
    if (_1405.y == 0u)
    {
        float _1915 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1916 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1915;
        float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1915;
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1915;
        uvec4 _1930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1931 = _1930.x;
        uint _1942 = uint((float(_1930.y) * floor(float(uint(cbSceneParam._m0[85u].y * _333) / _1931))) + floor(float(uint(cbSceneParam._m0[85u].x * _332) / _1931)));
        float _1952 = (log2(_1918 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1953 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        uint _1956 = uint(isnan(14.0) ? _1953 : (isnan(_1953) ? 14.0 : min(_1953, 14.0)));
        uvec4 _1961 = texelFetch(g_lightClusterGridBuffer, int(((_1956 << 2u) + (_1942 << 6u)) >> 2u));
        uint _1962 = _1961.x;
        uint _1963 = _1930.z;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        float _2111;
        if (((((1u << ((_1963 >> 4u) & 15u)) + 4294967295u) & _1962) == 0u) || ((_1963 & 240u) == 0u))
        {
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
        }
        else
        {
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2112;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            uint _2258 = 0u;
            uint _2267;
            bool _2268;
            for (;;)
            {
                _2267 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2258 << 2u)) >> 2u)).x;
                _2268 = _2267 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2268)
                {
                    frontier_phi_61_pred = _2252;
                    frontier_phi_61_pred_1 = _2257;
                    frontier_phi_61_pred_2 = _2256;
                    frontier_phi_61_pred_3 = _2255;
                    frontier_phi_61_pred_4 = _2254;
                    frontier_phi_61_pred_5 = _2253;
                }
                else
                {
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    uint _2382;
                    _2376 = _2252;
                    _2377 = _2253;
                    _2378 = _2254;
                    _2379 = _2255;
                    _2380 = _2256;
                    _2381 = _2257;
                    _2382 = _2267;
                    float _2308;
                    float _2309;
                    float _2310;
                    float _2311;
                    float _2312;
                    float _2313;
                    for (;;)
                    {
                        uint _2386 = uint(findLSB(_2382)) + (_2258 << 5u);
                        uint _2383 = (_2382 + 4294967295u) & _2382;
                        uint _2388 = _2386 * 48u;
                        vec4 _2402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2388)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 3u)).x));
                        uint _2408 = (_2386 * 48u) + 4u;
                        vec4 _2421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2408)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 3u)).x));
                        uint _2427 = (_2386 * 48u) + 8u;
                        vec3 _2438 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2427)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 2u)).x));
                        float _2442 = _2402.x - _1916;
                        float _2443 = _2402.y - _1917;
                        float _2444 = _2402.z - _1918;
                        float _2445 = dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444));
                        float _2448 = inversesqrt(_2445);
                        float _2457 = 1.0 - (_2445 * _2402.w);
                        float _3546 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
                        float _2458 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
                        float _2459 = sqrt(_2445) * _2421.w;
                        float _2462 = 1.39999997615814208984375 / (_2459 + 1.39999997615814208984375);
                        float _2463 = _2462 * _2462;
                        float _2466 = ((1.0 - _2463) * dot(vec3(_354, _357, _360), vec3(_2448 * _2442, _2448 * _2443, _2448 * _2444))) + _2463;
                        float _2469 = _2459 * _2459;
                        float _2473 = ((isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0))) * _2458) / ((_2469 * 0.699999988079071044921875) + 1.0);
                        float _2477 = (-0.0) - _1916;
                        float _2478 = (-0.0) - _1917;
                        float _2479 = (-0.0) - _1918;
                        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
                        float _2487 = dot(vec3(_354, _357, _360), vec3(_2483 * _2477, _2483 * _2478, _2483 * _2479));
                        float _3562 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
                        float _3573 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
                        float _2491 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
                        float _2495 = (0.5 / (((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) + 9.9999999392252902907785028219223e-09) + _2491)) * _2491;
                        float _3584 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
                        float _2504 = (((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 3.1415927410125732421875) / ((_2469 * 2.1991131305694580078125) + 3.141590118408203125)) * _2458;
                        _2311 = (_2473 * _2421.x) + _2379;
                        _2312 = (_2473 * _2421.y) + _2380;
                        _2313 = (_2473 * _2421.z) + _2381;
                        _2308 = (_2504 * _2438.x) + _2376;
                        _2309 = (_2504 * _2438.y) + _2377;
                        _2310 = (_2504 * _2438.z) + _2378;
                        if (_2383 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2376 = _2308;
                            _2377 = _2309;
                            _2378 = _2310;
                            _2379 = _2311;
                            _2380 = _2312;
                            _2381 = _2313;
                            _2382 = _2383;
                        }
                    }
                    frontier_phi_61_pred = _2308;
                    frontier_phi_61_pred_1 = _2313;
                    frontier_phi_61_pred_2 = _2312;
                    frontier_phi_61_pred_3 = _2311;
                    frontier_phi_61_pred_4 = _2310;
                    frontier_phi_61_pred_5 = _2309;
                }
                _2102 = frontier_phi_61_pred;
                _2112 = frontier_phi_61_pred_1;
                _2110 = frontier_phi_61_pred_2;
                _2108 = frontier_phi_61_pred_3;
                _2106 = frontier_phi_61_pred_4;
                _2104 = frontier_phi_61_pred_5;
                uint _2259 = _2258 + 1u;
                if (_2259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2252 = _2102;
                    _2253 = _2104;
                    _2254 = _2106;
                    _2255 = _2108;
                    _2256 = _2110;
                    _2257 = _2112;
                    _2258 = _2259;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
        }
        uvec4 _2115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2116 = _2115.z;
        uint _2118 = (_2116 >> 8u) & 15u;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        if (((4294967295u << _2118) & _1962) == 0u)
        {
            _2223 = _2101;
            _2225 = _2103;
            _2227 = _2105;
            _2229 = _2107;
            _2231 = _2109;
            _2233 = _2111;
        }
        else
        {
            float _2248 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2118 < ((_2116 >> 12u) & 15u))
            {
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2359 = _2101;
                float _2360 = _2103;
                float _2361 = _2105;
                float _2362 = _2107;
                float _2363 = _2109;
                float _2364 = _2111;
                uint _2365 = _2118;
                uint _2374;
                bool _2375;
                for (;;)
                {
                    _2374 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2365 << 2u)) >> 2u)).x;
                    _2375 = _2374 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2375)
                    {
                        frontier_phi_67_pred = _2362;
                        frontier_phi_67_pred_1 = _2363;
                        frontier_phi_67_pred_2 = _2364;
                        frontier_phi_67_pred_3 = _2361;
                        frontier_phi_67_pred_4 = _2360;
                        frontier_phi_67_pred_5 = _2359;
                    }
                    else
                    {
                        float _2509;
                        float _2510;
                        float _2511;
                        float _2512;
                        float _2513;
                        float _2514;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2522 = _2359;
                        float _2523 = _2360;
                        float _2524 = _2361;
                        float _2525 = _2362;
                        float _2526 = _2363;
                        float _2527 = _2364;
                        uint _2528 = _2374;
                        uint _2529;
                        vec4 _2554;
                        float _2555;
                        vec4 _2570;
                        vec3 _2582;
                        vec4 _2598;
                        vec4 _2614;
                        float _2661;
                        bool _2662;
                        for (;;)
                        {
                            uint _2539 = ((_2365 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2528));
                            _2529 = (_2528 + 4294967295u) & _2528;
                            uint _2541 = _2539 * 40u;
                            _2554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 3u)).x));
                            _2555 = _2554.w;
                            uint _2557 = (_2539 * 40u) + 4u;
                            _2570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 3u)).x));
                            uint _2572 = (_2539 * 40u) + 8u;
                            _2582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 2u)).x));
                            uint _2585 = (_2539 * 40u) + 16u;
                            _2598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 3u)).x));
                            uint _2601 = (_2539 * 40u) + 20u;
                            _2614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 3u)).x));
                            uint _2617 = (_2539 * 40u) + 24u;
                            vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 3u)).x));
                            uint _2636 = (_2539 * 40u) + 28u;
                            vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 3u)).x));
                            _2661 = fma(_1918, _2649.z, fma(_1917, _2649.y, _2649.x * _1916)) + _2649.w;
                            _2662 = !((fma(_1918, _2630.z, fma(_1917, _2630.y, _2630.x * _1916)) + _2630.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2662)
                            {
                                float _2689 = _2554.x - _1916;
                                float _2690 = _2554.y - _1917;
                                float _2691 = _2554.z - _1918;
                                float _2692 = dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691));
                                float _2695 = inversesqrt(_2692);
                                float _2696 = _2695 * _2689;
                                float _2697 = _2695 * _2690;
                                float _2698 = _2695 * _2691;
                                float _2702 = 1.0 - (_2692 / (_2555 * _2555));
                                float _3595 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                                float _2703 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
                                float _2707 = sqrt(_2692) * _2570.w;
                                float _2709 = 1.39999997615814208984375 / (_2707 + 1.39999997615814208984375);
                                float _2710 = _2709 * _2709;
                                float _2711 = 1.0 - _2710;
                                float _2713 = (_2711 * dot(vec3(_2696, _2697, _2698), vec3(_354, _357, _360))) + _2710;
                                float _2716 = _2707 * _2707;
                                float _2720 = (fma(_1918, _2598.z, fma(_1917, _2598.y, _2598.x * _1916)) + _2598.w) / _2661;
                                float _2721 = (fma(_1918, _2614.z, fma(_1917, _2614.y, _2614.x * _1916)) + _2614.w) / _2661;
                                float _2725 = 1.0 - dot(vec2(_2720, _2721), vec2(_2720, _2721));
                                float _3611 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                                float _2726 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                                float _2727 = _2726 * (((isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0))) * _2703) / ((_2716 * 0.699999988079071044921875) + 1.0));
                                float _2737 = dot(vec3(_354, _357, _360), vec3((-0.0) - (_1916 * _2248), (-0.0) - (_1917 * _2248), (-0.0) - (_1918 * _2248)));
                                float _3622 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                                float _2745 = (_2711 * dot(vec3(_354, _357, _360), vec3(_2696, _2697, _2698))) + _2710;
                                float _3633 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                                float _2746 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
                                float _2750 = (0.5 / (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) + 9.9999999392252902907785028219223e-09) + _2746)) * _2746;
                                float _3644 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                                float _2757 = (_2726 * _2703) * (((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 3.1415927410125732421875) / ((_2716 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2757 * _2582.x;
                                frontier_phi_73_pred_1 = _2757 * _2582.y;
                                frontier_phi_73_pred_2 = _2727 * _2570.z;
                                frontier_phi_73_pred_3 = _2727 * _2570.y;
                                frontier_phi_73_pred_4 = _2727 * _2570.x;
                                frontier_phi_73_pred_5 = _2757 * _2582.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2761 = frontier_phi_73_pred;
                            _2762 = frontier_phi_73_pred_1;
                            _2766 = frontier_phi_73_pred_2;
                            _2765 = frontier_phi_73_pred_3;
                            _2764 = frontier_phi_73_pred_4;
                            _2763 = frontier_phi_73_pred_5;
                            _2512 = _2764 + _2525;
                            _2513 = _2765 + _2526;
                            _2514 = _2766 + _2527;
                            _2509 = _2761 + _2522;
                            _2510 = _2762 + _2523;
                            _2511 = _2763 + _2524;
                            if (_2529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2522 = _2509;
                                _2523 = _2510;
                                _2524 = _2511;
                                _2525 = _2512;
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2529;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2512;
                        frontier_phi_67_pred_1 = _2513;
                        frontier_phi_67_pred_2 = _2514;
                        frontier_phi_67_pred_3 = _2511;
                        frontier_phi_67_pred_4 = _2510;
                        frontier_phi_67_pred_5 = _2509;
                    }
                    _2230 = frontier_phi_67_pred;
                    _2232 = frontier_phi_67_pred_1;
                    _2234 = frontier_phi_67_pred_2;
                    _2228 = frontier_phi_67_pred_3;
                    _2226 = frontier_phi_67_pred_4;
                    _2224 = frontier_phi_67_pred_5;
                    uint _2366 = _2365 + 1u;
                    if (_2366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2359 = _2224;
                        _2360 = _2226;
                        _2361 = _2228;
                        _2362 = _2230;
                        _2363 = _2232;
                        _2364 = _2234;
                        _2365 = _2366;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2232;
                frontier_phi_55_56_ladder_1 = _2234;
                frontier_phi_55_56_ladder_2 = _2230;
                frontier_phi_55_56_ladder_3 = _2228;
                frontier_phi_55_56_ladder_4 = _2226;
                frontier_phi_55_56_ladder_5 = _2224;
            }
            else
            {
                frontier_phi_55_56_ladder = _2109;
                frontier_phi_55_56_ladder_1 = _2111;
                frontier_phi_55_56_ladder_2 = _2107;
                frontier_phi_55_56_ladder_3 = _2105;
                frontier_phi_55_56_ladder_4 = _2103;
                frontier_phi_55_56_ladder_5 = _2101;
            }
            _2223 = frontier_phi_55_56_ladder_5;
            _2225 = frontier_phi_55_56_ladder_4;
            _2227 = frontier_phi_55_56_ladder_3;
            _2229 = frontier_phi_55_56_ladder_2;
            _2231 = frontier_phi_55_56_ladder;
            _2233 = frontier_phi_55_56_ladder_1;
        }
        float _2238 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
        _1975 = (_2238 * _2229) + _1538;
        _1977 = (_2238 * _2231) + _1540;
        _1979 = (_2238 * _2233) + _1542;
        _1981 = ((_2223 * 0.039999999105930328369140625) * _2238) + _1787;
        _1983 = ((_2225 * 0.039999999105930328369140625) * _2238) + _1789;
        _1985 = ((_2227 * 0.039999999105930328369140625) * _2238) + _1791;
    }
    else
    {
        _1975 = _1538;
        _1977 = _1540;
        _1979 = _1542;
        _1981 = _1787;
        _1983 = _1789;
        _1985 = _1791;
    }
    uint _1991 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _2000 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _231.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1991].x;
    float _2004 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _231.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1991].y;
    float _2008 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _231.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1991].z;
    float _3660 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3671 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3682 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2025 = (((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1975 + ((isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0))) * _398))) + ((_1981 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _1177)) * cbPerFrame._m0[3u].x)) + _2000;
    float _2027 = (_2004 + ((_1983 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _1177)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1977 + ((isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0))) * _398)));
    float _2029 = (_2008 + ((_1985 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _1177)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1979 + ((isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))) * _398)));
    float _3708 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2042 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    uint _2043 = _373 + 6u;
    float _2051 = _332 / cbSceneParam._m0[86u].x;
    float _2052 = _333 / cbSceneParam._m0[86u].y;
    vec4 _2066 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2051, _2052, (log2((isnan(cbSceneParam._m0[77u].w) ? _266 : (isnan(_266) ? cbSceneParam._m0[77u].w : min(_266, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2068 = _2066.x;
    float _2069 = _2066.y;
    float _2070 = _2066.z;
    float _2071 = _2066.w;
    float _2164;
    float _2166;
    float _2168;
    float _2170;
    if (_266 > cbSceneParam._m0[78u].w)
    {
        float _2126 = isnan(_266) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _266 : min(cbSceneParam._m0[80u].w, _266));
        float _2127 = _2126 / _266;
        float _2138 = _2127 * _317;
        float _2139 = _318 * _2127;
        float _2140 = (-0.0) - _2139;
        float _2142 = _2127 * _319;
        float _2144 = (cbSceneParam._m0[77u].w * _2140) / _2126;
        float _2145 = _2144 + cbSceneParam._m0[79u].w;
        float _2146 = cbSceneParam._m0[79u].w - _2139;
        float _2152 = sqrt(((_2138 * _2138) + (_2139 * _2139)) + (_2142 * _2142));
        float _2155 = (1.0 - (cbSceneParam._m0[77u].w / _2126)) * _2152;
        float _2160 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2162 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2321;
        if (abs((_2140 - _2144) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2321 = ((((_2145 > 0.0) ? exp2(_2160 * _2145) : (2.0 - exp2(_2162 * _2145))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2155;
        }
        else
        {
            float _2281 = 1.0 / cbSceneParam._m0[80u].x;
            float _2282 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : max(_2145, _2146));
            float _2283 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : min(_2145, _2146));
            float _2292 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : min(_2282, 0.0));
            float _2293 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : min(_2283, 0.0));
            _2321 = ((abs(_2152 / _2140) * cbSceneParam._m0[80u].y) * ((((_2292 - _2293) * 2.0) - ((exp2(_2160 * (isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0)))) - exp2(_2160 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0))))) * _2281)) - ((exp2(_2162 * _2292) - exp2(_2162 * _2293)) * _2281))) + (_2155 * cbSceneParam._m0[80u].z);
        }
        vec4 _2323 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2051, _2052, 1.0), 0.0);
        float _2332 = exp2((_2321 * (-1.44269502162933349609375)) * (1.0 - _2323.w));
        float _2333 = log2(_2332);
        float _2349 = log2(_2071);
        _2164 = (exp2(_2349 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2333 * cbSceneParam._m0[78u].x)) * _2323.x) / cbSceneParam._m0[78u].x)) + _2068;
        _2166 = (exp2(_2349 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2333 * cbSceneParam._m0[78u].y)) * _2323.y) / cbSceneParam._m0[78u].y)) + _2069;
        _2168 = (exp2(_2349 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2333 * cbSceneParam._m0[78u].z)) * _2323.z) / cbSceneParam._m0[78u].z)) + _2070;
        _2170 = _2332 * _2071;
    }
    else
    {
        _2164 = _2068;
        _2166 = _2069;
        _2168 = _2070;
        _2170 = _2071;
    }
    float _2181 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2182 = _2181 == 3.0;
    float _2184 = log2(_2170);
    float _2188 = exp2(_2184 * cbSceneParam._m0[78u].x);
    float _2189 = exp2(_2184 * cbSceneParam._m0[78u].y);
    float _2190 = exp2(_2184 * cbSceneParam._m0[78u].z);
    float _2191 = _2188 * (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)));
    float _2192 = _2189 * (isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)));
    float _2193 = _2190 * (isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)));
    float _2202 = (_2181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2202 * (_2182 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2164)));
    SV_Target.y = _2202 * (_2182 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2166)));
    SV_Target.z = _2202 * (_2182 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2168)));
    SV_Target.w = cbInstanceData._m0[_2043].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2000) * _2042) * _2188) * _2202;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2004) * _2042) * _2189) * _2202;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2008) * _2042) * _2190) * _2202;
    SV_Target_1.w = cbInstanceData._m0[_2043].w;
}


