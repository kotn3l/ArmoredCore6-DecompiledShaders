#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _763;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _235 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _248 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3201 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _250 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _258 = (((_250 * _250) * (3.0 - (_250 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _266 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _267 = _266 * _169;
    float _268 = _266 * _170;
    float _269 = _266 * _171;
    float _3212 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3223 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3234 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _288 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _329 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _339 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _329);
    float _340 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _329);
    float _341 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _329);
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _346 = _339 * _345;
    float _347 = _340 * _345;
    float _348 = _341 * _345;
    float _354 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _355 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _376 = fma(_269, cbSceneParam._m0[5u].z, fma(_268, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _267));
    float _379 = fma(_269, cbSceneParam._m0[6u].z, fma(_268, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _267));
    float _382 = fma(_269, cbSceneParam._m0[7u].z, fma(_268, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _267));
    uint _395 = uint(roundEven(NORMAL.w)) * 13u;
    uint _396 = _395 + 9u;
    uint _397 = _396 + uint(cbMatDynParam._m0[0u].w);
    float _403 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)))) * cbInstanceData._m0[_397].x;
    float _404 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * cbInstanceData._m0[_397].y;
    float _405 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_397].z;
    float _3245 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _3267 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    vec4 _417 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _354, cbSceneParam._m0[86u].y * _355));
    float _420 = _417.x * TEXCOORD.z;
    float _421 = dot(vec3(_267, _268, _269), vec3(_346, _347, _348));
    float _424 = _421 * 2.0;
    float _428 = (_424 * _267) - _346;
    float _429 = (_424 * _268) - _347;
    float _430 = (_424 * _269) - _348;
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _762;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _487 = fma(_460, cbModelParam._m0[26u].z, fma(_456, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _452));
        float _491 = fma(_460, cbModelParam._m0[27u].z, fma(_456, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _452));
        float _495 = fma(_460, cbModelParam._m0[28u].z, fma(_456, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _452));
        float _520 = _452 + _267;
        float _521 = _456 + _268;
        float _522 = _460 + _269;
        float _532 = fma(_522, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _520)) - _487;
        float _533 = fma(_522, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _520)) - _491;
        float _534 = fma(_522, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _520)) - _495;
        float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
        float _551 = ((_538 * _532) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_487 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _552 = ((_538 * _533) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_491 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _553 = ((_538 * _534) / cbModelParam._m0[34u].z) + ((((((_495 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        float _590 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_556.x + (-0.5));
        float _592 = _590 * (_556.y + (-0.5));
        float _593 = _590 * (_556.z + (-0.5));
        float _600 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_563.x + (-0.5));
        float _602 = _600 * (_563.y + (-0.5));
        float _603 = _600 * (_563.z + (-0.5));
        float _610 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_570.x + (-0.5));
        float _612 = _610 * (_570.y + (-0.5));
        float _613 = _610 * (_570.z + (-0.5));
        float _620 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_577.x + (-0.5));
        float _622 = _620 * (_577.y + (-0.5));
        float _623 = _620 * (_577.z + (-0.5));
        float _624 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _625 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _626 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _627 = _591 * 0.5;
        float _628 = _601 * 0.5;
        float _629 = _611 * 0.5;
        float _630 = dot(vec3(_627, _628, _629), vec3(_627, _628, _629));
        float _635 = (_630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_630);
        float _644 = (dot(vec3(_267, _268, _269), vec3(_635 * _627, _635 * _628, _635 * _629)) + 1.0) * 0.5;
        float _3293 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _654 = sqrt(((_628 * _628) + (_627 * _627)) + (_629 * _629)) / (_624 + 9.9999997473787516355514526367188e-06);
        float _3304 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _656 = _655 * 2.0;
        float _660 = (1.0 - _655) / (_655 + 1.0);
        float _3315 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _670 = ((((1.0 - _661) * (_656 + 2.0)) * exp2(log2(isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * (_656 + 1.0))) + _661) * _624;
        float _671 = _592 * 0.5;
        float _672 = _602 * 0.5;
        float _673 = _612 * 0.5;
        float _674 = dot(vec3(_671, _672, _673), vec3(_671, _672, _673));
        float _679 = (_674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_674);
        float _687 = (dot(vec3(_267, _268, _269), vec3(_679 * _671, _679 * _672, _679 * _673)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _696 = sqrt(((_672 * _672) + (_671 * _671)) + (_673 * _673)) / (_625 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _698 = _697 * 2.0;
        float _702 = (1.0 - _697) / (_697 + 1.0);
        float _3348 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _712 = ((((1.0 - _703) * (_698 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_698 + 1.0))) + _703) * _625;
        float _713 = _593 * 0.5;
        float _714 = _603 * 0.5;
        float _715 = _613 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _729 = (dot(vec3(_267, _268, _269), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _738 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_626 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3381 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_740 + 1.0))) + _745) * _626;
        _762 = _593;
        _764 = _592;
        _765 = _591;
        _766 = _603;
        _767 = _602;
        _768 = _601;
        _769 = _613;
        _770 = _612;
        _771 = _611;
        _772 = _626;
        _773 = _625;
        _774 = _624;
        _775 = cbModelParam._m0[36u].z * (isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0)));
        _776 = cbModelParam._m0[36u].z * (isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0)));
        _777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
    }
    else
    {
        _762 = _763;
        _764 = _763;
        _765 = _763;
        _766 = _763;
        _767 = _763;
        _768 = _763;
        _769 = _763;
        _770 = _763;
        _771 = _763;
        _772 = _763;
        _773 = _763;
        _774 = _763;
        _775 = 0.0;
        _776 = 0.0;
        _777 = 0.0;
    }
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _803 = fma(_460, cbModelParam._m0[30u].z, fma(_456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _452));
        float _807 = fma(_460, cbModelParam._m0[31u].z, fma(_456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _452));
        float _811 = fma(_460, cbModelParam._m0[32u].z, fma(_456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _452));
        float _834 = _452 + _267;
        float _835 = _456 + _268;
        float _836 = _460 + _269;
        float _846 = fma(_836, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _834)) - _803;
        float _847 = fma(_836, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _834)) - _807;
        float _848 = fma(_836, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _834)) - _811;
        float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
        float _865 = ((_852 * _846) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_803 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_852 * _847) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_807 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_852 * _848) / cbModelParam._m0[35u].z) + ((((((_811 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        float _902 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_869.x + (-0.5));
        float _904 = _902 * (_869.y + (-0.5));
        float _905 = _902 * (_869.z + (-0.5));
        float _912 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_876.x + (-0.5));
        float _914 = _912 * (_876.y + (-0.5));
        float _915 = _912 * (_876.z + (-0.5));
        float _922 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_883.x + (-0.5));
        float _924 = _922 * (_883.y + (-0.5));
        float _925 = _922 * (_883.z + (-0.5));
        float _932 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_890.x + (-0.5));
        float _934 = _932 * (_890.y + (-0.5));
        float _935 = _932 * (_890.z + (-0.5));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = _903 * 0.5;
        float _940 = _913 * 0.5;
        float _941 = _923 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_267, _268, _269), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3444 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_966 + 1.0))) + _971) * _936;
        float _981 = _904 * 0.5;
        float _982 = _914 * 0.5;
        float _983 = _924 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_267, _268, _269), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3477 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1008 + 1.0))) + _1013) * _937;
        float _1023 = _905 * 0.5;
        float _1024 = _915 * 0.5;
        float _1025 = _925 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_267, _268, _269), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3510 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1050 + 1.0))) + _1055) * _938;
        _1072 = _905;
        _1073 = _904;
        _1074 = _903;
        _1075 = _915;
        _1076 = _914;
        _1077 = _913;
        _1078 = _925;
        _1079 = _924;
        _1080 = _923;
        _1081 = _938;
        _1082 = _937;
        _1083 = _936;
        _1084 = cbModelParam._m0[36u].w * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1085 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _763;
        _1073 = _763;
        _1074 = _763;
        _1075 = _763;
        _1076 = _763;
        _1077 = _763;
        _1078 = _763;
        _1079 = _763;
        _1080 = _763;
        _1081 = _763;
        _1082 = _763;
        _1083 = _763;
        _1084 = 0.0;
        _1085 = 0.0;
        _1086 = 0.0;
    }
    float _1096 = (cbModelParam._m0[1u].x * (_1084 - _775)) + _775;
    float _1097 = (cbModelParam._m0[1u].x * (_1085 - _776)) + _776;
    float _1098 = (cbModelParam._m0[1u].x * (_1086 - _777)) + _777;
    float _1119 = fma(_1098, cbSceneParam._m0[89u].z, fma(_1097, cbSceneParam._m0[89u].y, _1096 * cbSceneParam._m0[89u].x));
    float _1122 = fma(_1098, cbSceneParam._m0[90u].z, fma(_1097, cbSceneParam._m0[90u].y, _1096 * cbSceneParam._m0[90u].x));
    float _1125 = fma(_1098, cbSceneParam._m0[91u].z, fma(_1097, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1096));
    float _1140 = _428 * 0.5;
    float _1141 = _429 * 0.5;
    float _1142 = _430 * 0.5;
    float _1143 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_1074, _1077, _1080, _1083));
    float _1146 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_1073, _1076, _1079, _1082));
    float _1149 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_1072, _1075, _1078, _1081));
    float _1183;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1156 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_762, _766, _769, _772));
        float _1160 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_764, _767, _770, _773));
        float _1164 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_765, _768, _771, _774));
        float _1171 = dot(vec4(cbModelParam._m0[39u]), vec4(_1140, _1141, _1142, 1.0));
        _1183 = dot(vec3(isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1171) ? 0.0 : (isnan(0.0) ? _1171 : max(0.0, _1171))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1183 = 1.0;
    }
    float _1194;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1185 = dot(vec4(cbModelParam._m0[40u]), vec4(_1140, _1141, _1142, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1185) ? 0.0 : (isnan(0.0) ? _1185 : max(0.0, _1185))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1198 = (_1194 * cbModelParam._m0[1u].x) + (_1183 * (1.0 - cbModelParam._m0[1u].x));
    float _1207 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1288;
    float _1290;
    float _1292;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1255 = fma(_460, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _452)) + cbModelParam._m0[13u].w;
        float _1259 = fma(_460, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _452)) + cbModelParam._m0[14u].w;
        float _1263 = fma(_460, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _452)) + cbModelParam._m0[15u].w;
        float _1266 = fma(_430, cbModelParam._m0[13u].z, fma(_429, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _428));
        float _1269 = fma(_430, cbModelParam._m0[14u].z, fma(_429, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _428));
        float _1272 = fma(_430, cbModelParam._m0[15u].z, fma(_429, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _428));
        float _1298;
        if (_1266 > 0.0)
        {
            _1298 = abs((1.0 - _1255) / _1266);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1266 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1255 + 1.0) / _1266);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1298 = frontier_phi_14_12_ladder;
        }
        float _1471;
        if (_1269 > 0.0)
        {
            _1471 = abs((1.0 - _1259) / _1269);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1269 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1259 + 1.0) / _1269);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1471 = frontier_phi_23_19_ladder;
        }
        float _1767;
        if (_1272 > 0.0)
        {
            _1767 = abs((1.0 - _1263) / _1272);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1272 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1263 + 1.0) / _1272);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1767 = frontier_phi_35_30_ladder;
        }
        float _1769 = isnan(_1471) ? _1298 : (isnan(_1298) ? _1471 : min(_1298, _1471));
        float _1770 = isnan(_1767) ? _1769 : (isnan(_1769) ? _1767 : min(_1769, _1767));
        float _1774 = (_1770 * _1266) + _1255;
        float _1775 = (_1770 * _1269) + _1259;
        float _1776 = (_1770 * _1272) + _1263;
        float _1777 = _1770 * 9.9999997473787516355514526367188e-05;
        float _1779 = (-1.0) - _1777;
        float _1781 = _1777 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1776 > _1781) || ((_1776 < _1779) || ((_1775 > _1781) || ((_1775 < _1779) || ((_1774 < _1779) || (_1774 > _1781))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1776, cbModelParam._m0[9u].z, fma(_1775, cbModelParam._m0[9u].y, _1774 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1776, cbModelParam._m0[10u].z, fma(_1775, cbModelParam._m0[10u].y, _1774 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1776, cbModelParam._m0[11u].z, fma(_1775, cbModelParam._m0[11u].y, _1774 * cbModelParam._m0[11u].x))), _1207);
            frontier_phi_13_35_ladder = _1921.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1921.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1921.x * cbModelParam._m0[1u].y;
        }
        _1288 = frontier_phi_13_35_ladder_2;
        _1290 = frontier_phi_13_35_ladder_1;
        _1292 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_428, _429, _430), _1207);
        _1288 = _1276.x * cbModelParam._m0[1u].y;
        _1290 = _1276.y * cbModelParam._m0[1u].y;
        _1292 = _1276.z * cbModelParam._m0[1u].y;
    }
    float _1295 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1351 = fma(_460, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _452)) + cbModelParam._m0[21u].w;
        float _1355 = fma(_460, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _452)) + cbModelParam._m0[22u].w;
        float _1359 = fma(_460, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _452)) + cbModelParam._m0[23u].w;
        float _1362 = fma(_430, cbModelParam._m0[21u].z, fma(_429, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _428));
        float _1365 = fma(_430, cbModelParam._m0[22u].z, fma(_429, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _428));
        float _1368 = fma(_430, cbModelParam._m0[23u].z, fma(_429, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _428));
        float _1476;
        if (_1362 > 0.0)
        {
            _1476 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1476 = frontier_phi_25_21_ladder;
        }
        float _1794;
        if (_1365 > 0.0)
        {
            _1794 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1794 = frontier_phi_37_32_ladder;
        }
        float _2067;
        if (_1368 > 0.0)
        {
            _2067 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2067 = frontier_phi_47_44_ladder;
        }
        float _2069 = isnan(_1794) ? _1476 : (isnan(_1476) ? _1794 : min(_1476, _1794));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1362) + _1351;
        float _2075 = (_2070 * _1365) + _1355;
        float _2076 = (_2070 * _1368) + _1359;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2077;
        float _2080 = _2077 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2076 > _2080) || ((_2076 < _2078) || ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 < _2078) || (_2074 > _2080))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2076, cbModelParam._m0[17u].z, fma(_2075, cbModelParam._m0[17u].y, _2074 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2076, cbModelParam._m0[18u].z, fma(_2075, cbModelParam._m0[18u].y, _2074 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2076, cbModelParam._m0[19u].z, fma(_2075, cbModelParam._m0[19u].y, _2074 * cbModelParam._m0[19u].x))), _1295);
            frontier_phi_22_47_ladder = _2167.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2167.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2167.x * cbModelParam._m0[1u].z;
        }
        _1387 = frontier_phi_22_47_ladder_2;
        _1389 = frontier_phi_22_47_ladder_1;
        _1391 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_428, _429, _430), _1295);
        _1387 = _1371.x * cbModelParam._m0[1u].z;
        _1389 = _1371.y * cbModelParam._m0[1u].z;
        _1391 = _1371.z * cbModelParam._m0[1u].z;
    }
    float _1403 = _420 * 0.01200000010430812835693359375;
    float _1405 = _1403 * ((cbModelParam._m0[1u].w * (_1387 - _1288)) + _1288);
    float _1406 = _1403 * ((cbModelParam._m0[1u].w * (_1389 - _1290)) + _1290);
    float _1407 = _1403 * ((cbModelParam._m0[1u].w * (_1391 - _1292)) + _1292);
    float _1410 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, _1405 * cbSceneParam._m0[91u].x));
    float _1450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1458 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1462 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1463 = _1450 / _1462;
    float _1464 = _1454 / _1462;
    float _1465 = _1458 / _1462;
    float _1612;
    float _1613;
    float _1614;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1492 = ((uint(_1465 > cbSceneParam._m0[59u].y) + uint(_1465 > cbSceneParam._m0[59u].x)) + uint(_1465 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1493 = _1492 + 43u;
        uint _1501 = _1492 + 44u;
        uint _1509 = _1492 + 45u;
        uint _1517 = _1492 + 46u;
        float _1528 = fma(_1462, cbSceneParam._m0[_1493].w, fma(_1458, cbSceneParam._m0[_1493].z, fma(_1454, cbSceneParam._m0[_1493].y, _1450 * cbSceneParam._m0[_1493].x)));
        float _1532 = fma(_1462, cbSceneParam._m0[_1501].w, fma(_1458, cbSceneParam._m0[_1501].z, fma(_1454, cbSceneParam._m0[_1501].y, _1450 * cbSceneParam._m0[_1501].x)));
        float _1540 = fma(_1462, cbSceneParam._m0[_1517].w, fma(_1458, cbSceneParam._m0[_1517].z, fma(_1454, cbSceneParam._m0[_1517].y, _1450 * cbSceneParam._m0[_1517].x)));
        float _1545 = cbSceneParam._m0[33u].z * _1540;
        float _1547 = cbSceneParam._m0[33u].w * _1540;
        float _1550 = fma(_1462, cbSceneParam._m0[_1509].w, fma(_1458, cbSceneParam._m0[_1509].z, fma(_1454, cbSceneParam._m0[_1509].y, _1450 * cbSceneParam._m0[_1509].x))) / _1540;
        float _1598 = (cbSceneParam._m0[33u].x - sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465))) * cbSceneParam._m0[33u].y;
        float _3636 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1605 = (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1545 + _1528) / _1540, (_1547 + _1532) / _1540), _1550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1547 + _1528) / _1540, (_1532 - _1545) / _1540), _1550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1528 - _1545) / _1540, (_1532 - _1547) / _1540), _1550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1528 - _1547) / _1540, (_1545 + _1532) / _1540), _1550), 0.0)).x), vec4(0.25)));
        _1612 = 1.0 - (_1605 * cbSceneParam._m0[34u].x);
        _1613 = 1.0 - (_1605 * cbSceneParam._m0[34u].y);
        _1614 = 1.0 - (_1605 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1612 = 1.0;
        _1613 = 1.0;
        _1614 = 1.0;
    }
    float _1678;
    float _1680;
    float _1682;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1666 = fma(_1462, cbSceneParam._m0[63u].w, fma(_1458, cbSceneParam._m0[63u].z, fma(_1454, cbSceneParam._m0[63u].y, _1450 * cbSceneParam._m0[63u].x)));
        float _1667 = fma(_1462, cbSceneParam._m0[60u].w, fma(_1458, cbSceneParam._m0[60u].z, fma(_1454, cbSceneParam._m0[60u].y, _1450 * cbSceneParam._m0[60u].x))) / _1666;
        float _1668 = fma(_1462, cbSceneParam._m0[61u].w, fma(_1458, cbSceneParam._m0[61u].z, fma(_1454, cbSceneParam._m0[61u].y, _1450 * cbSceneParam._m0[61u].x))) / _1666;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1667 >= cbSceneParam._m0[64u].x) && (_1668 >= cbSceneParam._m0[64u].y)) && (_1667 <= cbSceneParam._m0[64u].z)) && (_1668 <= cbSceneParam._m0[64u].w))
        {
            float _1807 = fma(_1462, cbSceneParam._m0[62u].w, fma(_1458, cbSceneParam._m0[62u].z, fma(_1454, cbSceneParam._m0[62u].y, _1450 * cbSceneParam._m0[62u].x))) / _1666;
            float _1811 = isnan(cbSceneParam._m0[41u].w) ? _1807 : (isnan(_1807) ? cbSceneParam._m0[41u].w : max(_1807, cbSceneParam._m0[41u].w));
            float _1854 = (cbSceneParam._m0[33u].x - sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465))) * cbSceneParam._m0[33u].y;
            float _3652 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
            float _1861 = (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1667, cbSceneParam._m0[33u].w + _1668), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1667, _1668 - cbSceneParam._m0[33u].z), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1667 - cbSceneParam._m0[33u].z, _1668 - cbSceneParam._m0[33u].w), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1667 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1668), _1811), 0.0)).x), vec4(0.25)));
            float _1865 = 1.0 - (_1861 * cbSceneParam._m0[34u].x);
            float _1866 = 1.0 - (_1861 * cbSceneParam._m0[34u].y);
            float _1867 = 1.0 - (_1861 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1867) ? _1614 : (isnan(_1614) ? _1867 : min(_1614, _1867));
            frontier_phi_34_33_ladder_1 = isnan(_1866) ? _1613 : (isnan(_1613) ? _1866 : min(_1613, _1866));
            frontier_phi_34_33_ladder_2 = isnan(_1865) ? _1612 : (isnan(_1612) ? _1865 : min(_1612, _1865));
        }
        else
        {
            frontier_phi_34_33_ladder = _1614;
            frontier_phi_34_33_ladder_1 = _1613;
            frontier_phi_34_33_ladder_2 = _1612;
        }
        _1678 = frontier_phi_34_33_ladder_2;
        _1680 = frontier_phi_34_33_ladder_1;
        _1682 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1678 = _1612;
        _1680 = _1613;
        _1682 = _1614;
    }
    uvec4 _1687 = floatBitsToUint(cbInstanceData._m0[_395 + 5u]);
    uint _1689 = _1687.x * 14u;
    uint _1690 = _1689 + 13u;
    float _1697 = _420 + (-1.0);
    float _1702 = (cbLight._m0[_1690].x * _1697) + 1.0;
    float _1703 = (cbLight._m0[_1690].y * _1697) + 1.0;
    float _1704 = (cbLight._m0[_1690].z * _1697) + 1.0;
    float _1705 = (cbLight._m0[_1690].w * _1697) + 1.0;
    uint _1706 = _1689 + 5u;
    float _1712 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1716 = _1689 + 4u;
    float _1726 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1730 = _1689 | 1u;
    float _1741 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_267, _268, _269));
    float _1744 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_267, _268, _269));
    float _3688 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _3699 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1749 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.3183098733425140380859375;
    float _1751 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.3183098733425140380859375;
    float _1758 = ((cbLight._m0[_1706].x * _1712) * _1751) + (((cbLight._m0[_1716].x * _1678) * _1726) * _1749);
    float _1759 = ((_1712 * cbLight._m0[_1706].y) * _1751) + (((cbLight._m0[_1716].y * _1680) * _1726) * _1749);
    float _1760 = ((_1712 * cbLight._m0[_1706].z) * _1751) + (((cbLight._m0[_1716].z * _1682) * _1726) * _1749);
    uvec4 _1764 = floatBitsToUint(cbLight._m0[_1689 + 12u]);
    bool _1766 = _1764.x == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1766)
    {
        _1868 = _1758;
        _1870 = _1759;
        _1872 = _1760;
    }
    else
    {
        uint _1876 = _1689 + 6u;
        float _1892 = (dot(vec3(cbLight._m0[_1689 + 2u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _3710 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1895 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1868 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1758;
        _1870 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1759;
        _1872 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1760;
    }
    bool _1875 = _1764.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1875)
    {
        _1930 = _1868;
        _1932 = _1870;
        _1934 = _1872;
    }
    else
    {
        uint _2038 = _1689 + 7u;
        float _2054 = (dot(vec3(cbLight._m0[_1689 + 3u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _2055 = _2054 * _2054;
        float _3726 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2056 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _2057 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1930 = (((cbLight._m0[_2038].x * 0.3183098733425140380859375) * _2056) * _2057) + _1868;
        _1932 = (((cbLight._m0[_2038].y * 0.3183098733425140380859375) * _2056) * _2057) + _1870;
        _1934 = (((cbLight._m0[_2038].z * 0.3183098733425140380859375) * _2056) * _2057) + _1872;
    }
    uint _1936 = _1689 + 8u;
    float _1942 = cbLight._m0[_1689].x + _346;
    float _1943 = cbLight._m0[_1689].y + _347;
    float _1944 = cbLight._m0[_1689].z + _348;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1952 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1689].xyz));
    float _3742 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _1956 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1942 * _1948, _1943 * _1948, _1944 * _1948));
    float _3764 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1974 = (0.5 / ((_1955 + 9.9999999392252902907785028219223e-09) + _1956)) * _1955;
    float _3775 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.31831014156341552734375;
    uint _1990 = _1689 + 9u;
    float _1996 = cbLight._m0[_1730].x + _346;
    float _1997 = cbLight._m0[_1730].y + _347;
    float _1998 = cbLight._m0[_1730].z + _348;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2006 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1730].xyz));
    float _3786 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _2010 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1996 * _2002, _1997 * _2002, _1998 * _2002));
    float _3797 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2023 = (0.5 / ((_2009 + 9.9999999392252902907785028219223e-09) + _1956)) * _2009;
    float _3808 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2025 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.31831014156341552734375;
    float _2035 = (((_2019 * cbLight._m0[_1990].x) * _2025) * _1712) + ((((cbLight._m0[_1936].x * _1678) * _1968) * _1976) * _1726);
    float _2036 = (((_2019 * cbLight._m0[_1990].y) * _2025) * _1712) + ((((cbLight._m0[_1936].y * _1680) * _1968) * _1976) * _1726);
    float _2037 = (((_2019 * cbLight._m0[_1990].z) * _2025) * _1712) + ((((cbLight._m0[_1936].z * _1682) * _1968) * _1976) * _1726);
    float _2093;
    float _2095;
    float _2097;
    if (_1766)
    {
        _2093 = _2035;
        _2095 = _2036;
        _2097 = _2037;
    }
    else
    {
        uint _2099 = _1689 + 10u;
        uint _2105 = _1689 + 2u;
        float _2111 = cbLight._m0[_2105].x + _346;
        float _2112 = cbLight._m0[_2105].y + _347;
        float _2113 = cbLight._m0[_2105].z + _348;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2121 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_2105].xyz));
        float _3819 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2111 * _2117, _2112 * _2117, _2113 * _2117));
        float _3830 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2138 = (0.5 / ((_2124 + 9.9999999392252902907785028219223e-09) + _1956)) * _2124;
        float _3841 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.31831014156341552734375;
        float _2141 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2093 = (((_2134 * cbLight._m0[_2099].x) * _2140) * _2141) + _2035;
        _2095 = (((_2134 * cbLight._m0[_2099].y) * _2140) * _2141) + _2036;
        _2097 = (((_2134 * cbLight._m0[_2099].z) * _2140) * _2141) + _2037;
    }
    float _2172;
    float _2174;
    float _2176;
    if (_1875)
    {
        _2172 = _2093;
        _2174 = _2095;
        _2176 = _2097;
    }
    else
    {
        uint _2183 = _1689 + 11u;
        uint _2189 = _1689 + 3u;
        float _2195 = cbLight._m0[_2189].x + _346;
        float _2196 = cbLight._m0[_2189].y + _347;
        float _2197 = cbLight._m0[_2189].z + _348;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2205 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_2189].xyz));
        float _3857 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _2209 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2195 * _2201, _2196 * _2201, _2197 * _2201));
        float _3868 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2222 = (0.5 / ((_2208 + 9.9999999392252902907785028219223e-09) + _1956)) * _2208;
        float _3879 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2224 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.31831014156341552734375;
        float _2225 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2172 = (((_2218 * cbLight._m0[_2183].x) * _2224) * _2225) + _2093;
        _2174 = (((_2218 * cbLight._m0[_2183].y) * _2224) * _2225) + _2095;
        _2176 = (((_2218 * cbLight._m0[_2183].z) * _2224) * _2225) + _2097;
    }
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_1687.y == 0u)
    {
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.x;
        uint _2258 = uint((float(_2246.y) * floor(float(uint(cbSceneParam._m0[85u].y * _355) / _2247))) + floor(float(uint(cbSceneParam._m0[85u].x * _354) / _2247)));
        float _2268 = (log2(_1465 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2269 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        uint _2272 = uint(isnan(14.0) ? _2269 : (isnan(_2269) ? 14.0 : min(_2269, 14.0)));
        uvec4 _2277 = texelFetch(g_lightClusterGridBuffer, int(((_2272 << 2u) + (_2258 << 6u)) >> 2u));
        uint _2278 = _2277.x;
        uint _2279 = _2246.z;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        if (((((1u << ((_2279 >> 4u) & 15u)) + 4294967295u) & _2278) == 0u) || ((_2279 & 240u) == 0u))
        {
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
        }
        else
        {
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2565)
                {
                    frontier_phi_66_pred = _2554;
                    frontier_phi_66_pred_1 = _2553;
                    frontier_phi_66_pred_2 = _2552;
                    frontier_phi_66_pred_3 = _2551;
                    frontier_phi_66_pred_4 = _2550;
                    frontier_phi_66_pred_5 = _2549;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2564;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2555 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _1463;
                        float _2740 = _2699.y - _1464;
                        float _2741 = _2699.z - _1465;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _3905 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * dot(vec3(_376, _379, _382), vec3(_2745 * _2739, _2745 * _2740, _2745 * _2741))) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _1463;
                        float _2775 = (-0.0) - _1464;
                        float _2776 = (-0.0) - _1465;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2784 = dot(vec3(_376, _379, _382), vec3(_2780 * _2774, _2780 * _2775, _2780 * _2776));
                        float _3921 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _3932 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2788 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                        float _2792 = (0.5 / (((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) + 9.9999999392252902907785028219223e-09) + _2788)) * _2788;
                        float _3943 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2801 = (((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 3.1415927410125732421875) / ((_2766 * 2.1991131305694580078125) + 3.141590118408203125)) * _2755;
                        _2608 = (_2770 * _2718.x) + _2676;
                        _2609 = (_2770 * _2718.y) + _2677;
                        _2610 = (_2770 * _2718.z) + _2678;
                        _2605 = (_2801 * _2735.x) + _2673;
                        _2606 = (_2801 * _2735.y) + _2674;
                        _2607 = (_2801 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_66_pred = _2610;
                    frontier_phi_66_pred_1 = _2609;
                    frontier_phi_66_pred_2 = _2608;
                    frontier_phi_66_pred_3 = _2607;
                    frontier_phi_66_pred_4 = _2606;
                    frontier_phi_66_pred_5 = _2605;
                }
                _2410 = frontier_phi_66_pred;
                _2408 = frontier_phi_66_pred_1;
                _2406 = frontier_phi_66_pred_2;
                _2404 = frontier_phi_66_pred_3;
                _2402 = frontier_phi_66_pred_4;
                _2400 = frontier_phi_66_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2400;
                    _2550 = _2402;
                    _2551 = _2404;
                    _2552 = _2406;
                    _2553 = _2408;
                    _2554 = _2410;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
        }
        uvec4 _2413 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2414 = _2413.z;
        uint _2416 = (_2414 >> 8u) & 15u;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((4294967295u << _2416) & _2278) == 0u)
        {
            _2520 = _2399;
            _2522 = _2401;
            _2524 = _2403;
            _2526 = _2405;
            _2528 = _2407;
            _2530 = _2409;
        }
        else
        {
            float _2545 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2416 < ((_2414 >> 12u) & 15u))
            {
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2656 = _2399;
                float _2657 = _2401;
                float _2658 = _2403;
                float _2659 = _2405;
                float _2660 = _2407;
                float _2661 = _2409;
                uint _2662 = _2416;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2672)
                    {
                        frontier_phi_72_pred = _2661;
                        frontier_phi_72_pred_1 = _2660;
                        frontier_phi_72_pred_2 = _2659;
                        frontier_phi_72_pred_3 = _2658;
                        frontier_phi_72_pred_4 = _2657;
                        frontier_phi_72_pred_5 = _2656;
                    }
                    else
                    {
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _2819 = _2656;
                        float _2820 = _2657;
                        float _2821 = _2658;
                        float _2822 = _2659;
                        float _2823 = _2660;
                        float _2824 = _2661;
                        uint _2825 = _2671;
                        uint _2826;
                        vec4 _2851;
                        float _2852;
                        vec4 _2867;
                        vec3 _2879;
                        vec4 _2895;
                        vec4 _2911;
                        float _2958;
                        bool _2959;
                        for (;;)
                        {
                            uint _2836 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2825));
                            _2826 = (_2825 + 4294967295u) & _2825;
                            uint _2838 = _2836 * 40u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            _2852 = _2851.w;
                            uint _2854 = (_2836 * 40u) + 4u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2869 = (_2836 * 40u) + 8u;
                            _2879 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x));
                            uint _2882 = (_2836 * 40u) + 16u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2898 = (_2836 * 40u) + 20u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2914 = (_2836 * 40u) + 24u;
                            vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2933 = (_2836 * 40u) + 28u;
                            vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2958 = fma(_1465, _2946.z, fma(_1464, _2946.y, _2946.x * _1463)) + _2946.w;
                            _2959 = !((fma(_1465, _2927.z, fma(_1464, _2927.y, _2927.x * _1463)) + _2927.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2959)
                            {
                                float _2986 = _2851.x - _1463;
                                float _2987 = _2851.y - _1464;
                                float _2988 = _2851.z - _1465;
                                float _2989 = dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988));
                                float _2992 = inversesqrt(_2989);
                                float _2993 = _2992 * _2986;
                                float _2994 = _2992 * _2987;
                                float _2995 = _2992 * _2988;
                                float _2999 = 1.0 - (_2989 / (_2852 * _2852));
                                float _3954 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3000 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _3004 = sqrt(_2989) * _2867.w;
                                float _3006 = 1.39999997615814208984375 / (_3004 + 1.39999997615814208984375);
                                float _3007 = _3006 * _3006;
                                float _3008 = 1.0 - _3007;
                                float _3010 = (_3008 * dot(vec3(_2993, _2994, _2995), vec3(_376, _379, _382))) + _3007;
                                float _3013 = _3004 * _3004;
                                float _3017 = (fma(_1465, _2895.z, fma(_1464, _2895.y, _2895.x * _1463)) + _2895.w) / _2958;
                                float _3018 = (fma(_1465, _2911.z, fma(_1464, _2911.y, _2911.x * _1463)) + _2911.w) / _2958;
                                float _3022 = 1.0 - dot(vec2(_3017, _3018), vec2(_3017, _3018));
                                float _3970 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3023 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                                float _3024 = _3023 * (((isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))) * _3000) / ((_3013 * 0.699999988079071044921875) + 1.0));
                                float _3034 = dot(vec3(_376, _379, _382), vec3((-0.0) - (_1463 * _2545), (-0.0) - (_1464 * _2545), (-0.0) - (_1465 * _2545)));
                                float _3981 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3042 = (_3008 * dot(vec3(_376, _379, _382), vec3(_2993, _2994, _2995))) + _3007;
                                float _3992 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                                float _3047 = (0.5 / (((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) + 9.9999999392252902907785028219223e-09) + _3043)) * _3043;
                                float _4003 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3054 = (_3023 * _3000) * (((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 3.1415927410125732421875) / ((_3013 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3024 * _2867.y;
                                frontier_phi_78_pred_1 = _3024 * _2867.x;
                                frontier_phi_78_pred_2 = _3054 * _2879.z;
                                frontier_phi_78_pred_3 = _3054 * _2879.y;
                                frontier_phi_78_pred_4 = _3054 * _2879.x;
                                frontier_phi_78_pred_5 = _3024 * _2867.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3062 = frontier_phi_78_pred;
                            _3061 = frontier_phi_78_pred_1;
                            _3060 = frontier_phi_78_pred_2;
                            _3059 = frontier_phi_78_pred_3;
                            _3058 = frontier_phi_78_pred_4;
                            _3063 = frontier_phi_78_pred_5;
                            _2809 = _3061 + _2822;
                            _2810 = _3062 + _2823;
                            _2811 = _3063 + _2824;
                            _2806 = _3058 + _2819;
                            _2807 = _3059 + _2820;
                            _2808 = _3060 + _2821;
                            if (_2826 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2826;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2811;
                        frontier_phi_72_pred_1 = _2810;
                        frontier_phi_72_pred_2 = _2809;
                        frontier_phi_72_pred_3 = _2808;
                        frontier_phi_72_pred_4 = _2807;
                        frontier_phi_72_pred_5 = _2806;
                    }
                    _2531 = frontier_phi_72_pred;
                    _2529 = frontier_phi_72_pred_1;
                    _2527 = frontier_phi_72_pred_2;
                    _2525 = frontier_phi_72_pred_3;
                    _2523 = frontier_phi_72_pred_4;
                    _2521 = frontier_phi_72_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2521;
                        _2657 = _2523;
                        _2658 = _2525;
                        _2659 = _2527;
                        _2660 = _2529;
                        _2661 = _2531;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2531;
                frontier_phi_60_61_ladder_1 = _2529;
                frontier_phi_60_61_ladder_2 = _2525;
                frontier_phi_60_61_ladder_3 = _2523;
                frontier_phi_60_61_ladder_4 = _2521;
                frontier_phi_60_61_ladder_5 = _2527;
            }
            else
            {
                frontier_phi_60_61_ladder = _2409;
                frontier_phi_60_61_ladder_1 = _2407;
                frontier_phi_60_61_ladder_2 = _2403;
                frontier_phi_60_61_ladder_3 = _2401;
                frontier_phi_60_61_ladder_4 = _2399;
                frontier_phi_60_61_ladder_5 = _2405;
            }
            _2520 = frontier_phi_60_61_ladder_4;
            _2522 = frontier_phi_60_61_ladder_3;
            _2524 = frontier_phi_60_61_ladder_2;
            _2526 = frontier_phi_60_61_ladder_5;
            _2528 = frontier_phi_60_61_ladder_1;
            _2530 = frontier_phi_60_61_ladder;
        }
        float _2535 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
        _2291 = (_2535 * _2526) + _1930;
        _2293 = (_2535 * _2528) + _1932;
        _2295 = (_2535 * _2530) + _1934;
        _2297 = ((_2520 * 0.039999999105930328369140625) * _2535) + _2172;
        _2299 = ((_2522 * 0.039999999105930328369140625) * _2535) + _2174;
        _2301 = ((_2524 * 0.039999999105930328369140625) * _2535) + _2176;
    }
    else
    {
        _2291 = _1930;
        _2293 = _1932;
        _2295 = _1934;
        _2297 = _2172;
        _2299 = _2174;
        _2301 = _2176;
    }
    uint _2307 = _396 + uint(cbMatDynParam._m0[0u].w);
    float _2317 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _235.x) * cbSceneParam._m0[72u].y) * _258) * cbInstanceData._m0[_2307].x;
    float _2322 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _235.y) * cbSceneParam._m0[72u].y) * _258) * cbInstanceData._m0[_2307].y;
    float _2327 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _235.z) * cbSceneParam._m0[72u].y) * _258) * cbInstanceData._m0[_2307].z;
    float _4019 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _4030 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _4041 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _2344 = (((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2291 + ((isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))) * _420))) + ((_2297 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _1198)) * cbPerFrame._m0[3u].x)) + _2317;
    float _2346 = (_2322 + ((_2299 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _1198)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2293 + ((isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))) * _420)));
    float _2348 = (_2327 + ((_2301 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _1198)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_2295 + ((isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))) * _420)));
    float _4067 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2361 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    uint _2362 = _395 + 6u;
    float _2370 = _354 / cbSceneParam._m0[86u].x;
    float _2371 = _355 / cbSceneParam._m0[86u].y;
    vec4 _2385 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2370, _2371, (log2((isnan(cbSceneParam._m0[77u].w) ? _288 : (isnan(_288) ? cbSceneParam._m0[77u].w : min(_288, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2387 = _2385.x;
    float _2388 = _2385.y;
    float _2389 = _2385.z;
    float _2390 = _2385.w;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_288 > cbSceneParam._m0[78u].w)
    {
        float _2424 = isnan(_288) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _288 : min(cbSceneParam._m0[80u].w, _288));
        float _2425 = _2424 / _288;
        float _2436 = _2425 * _339;
        float _2437 = _340 * _2425;
        float _2438 = (-0.0) - _2437;
        float _2440 = _2425 * _341;
        float _2442 = (cbSceneParam._m0[77u].w * _2438) / _2424;
        float _2443 = _2442 + cbSceneParam._m0[79u].w;
        float _2444 = cbSceneParam._m0[79u].w - _2437;
        float _2450 = sqrt(((_2436 * _2436) + (_2437 * _2437)) + (_2440 * _2440));
        float _2453 = (1.0 - (cbSceneParam._m0[77u].w / _2424)) * _2450;
        float _2458 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2460 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2438 - _2442) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2443 > 0.0) ? exp2(_2458 * _2443) : (2.0 - exp2(_2460 * _2443))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2453;
        }
        else
        {
            float _2578 = 1.0 / cbSceneParam._m0[80u].x;
            float _2579 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : max(_2443, _2444));
            float _2580 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : min(_2443, _2444));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            _2618 = ((abs(_2450 / _2438) * cbSceneParam._m0[80u].y) * ((((_2589 - _2590) * 2.0) - ((exp2(_2458 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)))) - exp2(_2458 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))))) * _2578)) - ((exp2(_2460 * _2589) - exp2(_2460 * _2590)) * _2578))) + (_2453 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2370, _2371, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2390);
        _2462 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2387;
        _2464 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2388;
        _2466 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2389;
        _2468 = _2629 * _2390;
    }
    else
    {
        _2462 = _2387;
        _2464 = _2388;
        _2466 = _2389;
        _2468 = _2390;
    }
    float _2479 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2480 = _2479 == 3.0;
    float _2481 = log2(_2468);
    float _2485 = exp2(_2481 * cbSceneParam._m0[78u].x);
    float _2486 = exp2(_2481 * cbSceneParam._m0[78u].y);
    float _2487 = exp2(_2481 * cbSceneParam._m0[78u].z);
    float _2488 = _2485 * (isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)));
    float _2489 = _2486 * (isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0)));
    float _2490 = _2487 * (isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0)));
    float _2499 = (_2479 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2499 * (_2480 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2462)));
    SV_Target.y = _2499 * (_2480 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2464)));
    SV_Target.z = _2499 * (_2480 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2466)));
    SV_Target.w = cbInstanceData._m0[_2362].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2317) * _2361) * _2485) * _2499;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2322) * _2361) * _2486) * _2499;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2327) * _2361) * _2487) * _2499;
    SV_Target_1.w = cbInstanceData._m0[_2362].w;
}


