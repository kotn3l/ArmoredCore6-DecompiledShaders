#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _806;
float _3039;
float _3040;
float _3041;
float _3042;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _192 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _192.x * cbMtdParam._m0[9u].x;
    float _199 = _192.y * cbMtdParam._m0[9u].y;
    float _200 = _192.z * cbMtdParam._m0[9u].z;
    vec4 _237 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _250 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3051 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _252 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    float _260 = (((_252 * _252) * (3.0 - (_252 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _268 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _269 = _268 * _171;
    float _270 = _268 * _172;
    float _271 = _268 * _173;
    float _3062 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3073 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3084 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _290 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _331 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _341 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _331);
    float _342 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _331);
    float _343 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _331);
    float _347 = inversesqrt(dot(vec3(_341, _342, _343), vec3(_341, _342, _343)));
    float _348 = _341 * _347;
    float _349 = _342 * _347;
    float _350 = _343 * _347;
    vec4 _355 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _357 = _355.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _485 = sqrt(((_341 * _341) + (_342 * _342)) + (_343 * _343));
        float _491 = (cbMatDynParam._m0[5u].x * _485) + cbMatDynParam._m0[5u].y;
        float _3095 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
        float _492 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
        float _496 = (cbMatDynParam._m0[5u].z * _485) + cbMatDynParam._m0[5u].w;
        float _3106 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) - _492)) + _492) < ((_357 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _369 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _370 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _390 = fma(_271, cbSceneParam._m0[5u].z, fma(_270, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _269));
    float _393 = fma(_271, cbSceneParam._m0[6u].z, fma(_270, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _269));
    float _396 = fma(_271, cbSceneParam._m0[7u].z, fma(_270, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _269));
    uint _409 = uint(roundEven(NORMAL.w)) * 13u;
    uint _410 = _409 + 9u;
    uint _411 = _410 + uint(cbMatDynParam._m0[0u].w);
    float _417 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * cbInstanceData._m0[_411].x;
    float _418 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0)))) * cbInstanceData._m0[_411].y;
    float _419 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0)))) * cbInstanceData._m0[_411].z;
    float _3117 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
    float _3128 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _3139 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
    vec4 _431 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _369, cbSceneParam._m0[86u].y * _370));
    float _434 = _431.x * TEXCOORD.z;
    float _435 = dot(vec3(_269, _270, _271), vec3(_348, _349, _350));
    float _438 = _435 * 2.0;
    float _442 = (_438 * _269) - _348;
    float _443 = (_438 * _270) - _349;
    float _444 = (_438 * _271) - _350;
    float _466 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _474 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _805;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _530 = fma(_474, cbModelParam._m0[26u].z, fma(_470, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _466));
        float _534 = fma(_474, cbModelParam._m0[27u].z, fma(_470, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _466));
        float _538 = fma(_474, cbModelParam._m0[28u].z, fma(_470, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _466));
        float _563 = _466 + _269;
        float _564 = _470 + _270;
        float _565 = _474 + _271;
        float _575 = fma(_565, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _563)) - _530;
        float _576 = fma(_565, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _563)) - _534;
        float _577 = fma(_565, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _563)) - _538;
        float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
        float _594 = ((_581 * _575) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_530 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _595 = ((_581 * _576) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_534 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _596 = ((_581 * _577) / cbModelParam._m0[34u].z) + ((((((_538 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        float _633 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_599.x + (-0.5));
        float _635 = _633 * (_599.y + (-0.5));
        float _636 = _633 * (_599.z + (-0.5));
        float _643 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _644 = _643 * (_606.x + (-0.5));
        float _645 = _643 * (_606.y + (-0.5));
        float _646 = _643 * (_606.z + (-0.5));
        float _653 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_613.x + (-0.5));
        float _655 = _653 * (_613.y + (-0.5));
        float _656 = _653 * (_613.z + (-0.5));
        float _663 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_620.x + (-0.5));
        float _665 = _663 * (_620.y + (-0.5));
        float _666 = _663 * (_620.z + (-0.5));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = _634 * 0.5;
        float _671 = _644 * 0.5;
        float _672 = _654 * 0.5;
        float _673 = dot(vec3(_670, _671, _672), vec3(_670, _671, _672));
        float _678 = (_673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_673);
        float _687 = (dot(vec3(_269, _270, _271), vec3(_678 * _670, _678 * _671, _678 * _672)) + 1.0) * 0.5;
        float _3165 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _697 = sqrt(((_671 * _671) + (_670 * _670)) + (_672 * _672)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _3176 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _699 = _698 * 2.0;
        float _703 = (1.0 - _698) / (_698 + 1.0);
        float _3187 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _713 = ((((1.0 - _704) * (_699 + 2.0)) * exp2(log2(isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) * (_699 + 1.0))) + _704) * _667;
        float _714 = _635 * 0.5;
        float _715 = _645 * 0.5;
        float _716 = _655 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _730 = (dot(vec3(_269, _270, _271), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3198 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _739 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _3209 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3220 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))) * (_741 + 1.0))) + _746) * _668;
        float _756 = _636 * 0.5;
        float _757 = _646 * 0.5;
        float _758 = _656 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_269, _270, _271), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3253 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_783 + 1.0))) + _788) * _669;
        _805 = _636;
        _807 = _635;
        _808 = _634;
        _809 = _646;
        _810 = _645;
        _811 = _644;
        _812 = _656;
        _813 = _655;
        _814 = _654;
        _815 = _669;
        _816 = _668;
        _817 = _667;
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0)));
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
    }
    else
    {
        _805 = _806;
        _807 = _806;
        _808 = _806;
        _809 = _806;
        _810 = _806;
        _811 = _806;
        _812 = _806;
        _813 = _806;
        _814 = _806;
        _815 = _806;
        _816 = _806;
        _817 = _806;
        _818 = 0.0;
        _819 = 0.0;
        _820 = 0.0;
    }
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _849 = fma(_474, cbModelParam._m0[30u].z, fma(_470, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _466));
        float _853 = fma(_474, cbModelParam._m0[31u].z, fma(_470, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _466));
        float _857 = fma(_474, cbModelParam._m0[32u].z, fma(_470, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _466));
        float _880 = _466 + _269;
        float _881 = _470 + _270;
        float _882 = _474 + _271;
        float _892 = fma(_882, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880)) - _849;
        float _893 = fma(_882, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880)) - _853;
        float _894 = fma(_882, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880)) - _857;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_849 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_853 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[35u].z) + ((((((_857 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _948 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_915.x + (-0.5));
        float _950 = _948 * (_915.y + (-0.5));
        float _951 = _948 * (_915.z + (-0.5));
        float _958 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_922.x + (-0.5));
        float _960 = _958 * (_922.y + (-0.5));
        float _961 = _958 * (_922.z + (-0.5));
        float _968 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_929.x + (-0.5));
        float _970 = _968 * (_929.y + (-0.5));
        float _971 = _968 * (_929.z + (-0.5));
        float _978 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_936.x + (-0.5));
        float _980 = _978 * (_936.y + (-0.5));
        float _981 = _978 * (_936.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_269, _270, _271), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3294 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3305 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3316 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (_1012 + 1.0))) + _1017) * _982;
        float _1027 = _950 * 0.5;
        float _1028 = _960 * 0.5;
        float _1029 = _970 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_269, _270, _271), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3349 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1054 + 1.0))) + _1059) * _983;
        float _1069 = _951 * 0.5;
        float _1070 = _961 * 0.5;
        float _1071 = _971 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_269, _270, _271), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3382 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1096 + 1.0))) + _1101) * _984;
        _1118 = _951;
        _1119 = _950;
        _1120 = _949;
        _1121 = _961;
        _1122 = _960;
        _1123 = _959;
        _1124 = _971;
        _1125 = _970;
        _1126 = _969;
        _1127 = _984;
        _1128 = _983;
        _1129 = _982;
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _806;
        _1119 = _806;
        _1120 = _806;
        _1121 = _806;
        _1122 = _806;
        _1123 = _806;
        _1124 = _806;
        _1125 = _806;
        _1126 = _806;
        _1127 = _806;
        _1128 = _806;
        _1129 = _806;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _818)) + _818;
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _819)) + _819;
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _820)) + _820;
    float _1165 = fma(_1144, cbSceneParam._m0[89u].z, fma(_1143, cbSceneParam._m0[89u].y, _1142 * cbSceneParam._m0[89u].x));
    float _1168 = fma(_1144, cbSceneParam._m0[90u].z, fma(_1143, cbSceneParam._m0[90u].y, _1142 * cbSceneParam._m0[90u].x));
    float _1171 = fma(_1144, cbSceneParam._m0[91u].z, fma(_1143, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1142));
    float _1186 = _442 * 0.5;
    float _1187 = _443 * 0.5;
    float _1188 = _444 * 0.5;
    float _1189 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1192 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1195 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1229;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1202 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_805, _809, _812, _815));
        float _1206 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_807, _810, _813, _816));
        float _1210 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_808, _811, _814, _817));
        float _1217 = dot(vec4(cbModelParam._m0[39u]), vec4(_1186, _1187, _1188, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1217) ? 0.0 : (isnan(0.0) ? _1217 : max(0.0, _1217))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1240;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1231 = dot(vec4(cbModelParam._m0[40u]), vec4(_1186, _1187, _1188, 1.0));
        _1240 = dot(vec3(isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1231) ? 0.0 : (isnan(0.0) ? _1231 : max(0.0, _1231))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1240 = 1.0;
    }
    float _1244 = (_1240 * cbModelParam._m0[1u].x) + (_1229 * (1.0 - cbModelParam._m0[1u].x));
    float _1253 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1334;
    float _1336;
    float _1338;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1301 = fma(_474, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _466)) + cbModelParam._m0[13u].w;
        float _1305 = fma(_474, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _466)) + cbModelParam._m0[14u].w;
        float _1309 = fma(_474, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _466)) + cbModelParam._m0[15u].w;
        float _1312 = fma(_444, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _442));
        float _1315 = fma(_444, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _442));
        float _1318 = fma(_444, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _442));
        float _1344;
        if (_1312 > 0.0)
        {
            _1344 = abs((1.0 - _1301) / _1312);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1301 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1344 = frontier_phi_17_15_ladder;
        }
        float _1570;
        if (_1315 > 0.0)
        {
            _1570 = abs((1.0 - _1305) / _1315);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1305 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1570 = frontier_phi_26_22_ladder;
        }
        float _1762;
        if (_1318 > 0.0)
        {
            _1762 = abs((1.0 - _1309) / _1318);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1309 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1762 = frontier_phi_38_33_ladder;
        }
        float _1764 = isnan(_1570) ? _1344 : (isnan(_1344) ? _1570 : min(_1344, _1570));
        float _1765 = isnan(_1762) ? _1764 : (isnan(_1764) ? _1762 : min(_1764, _1762));
        float _1769 = (_1765 * _1312) + _1301;
        float _1770 = (_1765 * _1315) + _1305;
        float _1771 = (_1765 * _1318) + _1309;
        float _1772 = _1765 * 9.9999997473787516355514526367188e-05;
        float _1774 = (-1.0) - _1772;
        float _1776 = _1772 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1771 > _1776) || ((_1771 < _1774) || ((_1770 > _1776) || ((_1770 < _1774) || ((_1769 < _1774) || (_1769 > _1776))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1868 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1771, cbModelParam._m0[9u].z, fma(_1770, cbModelParam._m0[9u].y, _1769 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1771, cbModelParam._m0[10u].z, fma(_1770, cbModelParam._m0[10u].y, _1769 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1771, cbModelParam._m0[11u].z, fma(_1770, cbModelParam._m0[11u].y, _1769 * cbModelParam._m0[11u].x))), _1253);
            frontier_phi_16_38_ladder = _1868.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1868.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1868.x * cbModelParam._m0[1u].y;
        }
        _1334 = frontier_phi_16_38_ladder_2;
        _1336 = frontier_phi_16_38_ladder_1;
        _1338 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_442, _443, _444), _1253);
        _1334 = _1322.x * cbModelParam._m0[1u].y;
        _1336 = _1322.y * cbModelParam._m0[1u].y;
        _1338 = _1322.z * cbModelParam._m0[1u].y;
    }
    float _1341 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1397 = fma(_474, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _466)) + cbModelParam._m0[21u].w;
        float _1401 = fma(_474, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _466)) + cbModelParam._m0[22u].w;
        float _1405 = fma(_474, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _466)) + cbModelParam._m0[23u].w;
        float _1408 = fma(_444, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _442));
        float _1411 = fma(_444, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _442));
        float _1414 = fma(_444, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _442));
        float _1575;
        if (_1408 > 0.0)
        {
            _1575 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1575 = frontier_phi_28_24_ladder;
        }
        float _1789;
        if (_1411 > 0.0)
        {
            _1789 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1789 = frontier_phi_40_35_ladder;
        }
        float _1940;
        if (_1414 > 0.0)
        {
            _1940 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1940 = frontier_phi_49_46_ladder;
        }
        float _1942 = isnan(_1789) ? _1575 : (isnan(_1575) ? _1789 : min(_1575, _1789));
        float _1943 = isnan(_1940) ? _1942 : (isnan(_1942) ? _1940 : min(_1942, _1940));
        float _1947 = (_1943 * _1408) + _1397;
        float _1948 = (_1943 * _1411) + _1401;
        float _1949 = (_1943 * _1414) + _1405;
        float _1950 = _1943 * 9.9999997473787516355514526367188e-05;
        float _1951 = (-1.0) - _1950;
        float _1953 = _1950 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1949 > _1953) || ((_1949 < _1951) || ((_1948 > _1953) || ((_1948 < _1951) || ((_1947 < _1951) || (_1947 > _1953))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1949, cbModelParam._m0[17u].z, fma(_1948, cbModelParam._m0[17u].y, _1947 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1949, cbModelParam._m0[18u].z, fma(_1948, cbModelParam._m0[18u].y, _1947 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1949, cbModelParam._m0[19u].z, fma(_1948, cbModelParam._m0[19u].y, _1947 * cbModelParam._m0[19u].x))), _1341);
            frontier_phi_25_49_ladder = _2189.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2189.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2189.x * cbModelParam._m0[1u].z;
        }
        _1433 = frontier_phi_25_49_ladder_2;
        _1435 = frontier_phi_25_49_ladder_1;
        _1437 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_442, _443, _444), _1341);
        _1433 = _1417.x * cbModelParam._m0[1u].z;
        _1435 = _1417.y * cbModelParam._m0[1u].z;
        _1437 = _1417.z * cbModelParam._m0[1u].z;
    }
    float _1449 = _434 * 0.01200000010430812835693359375;
    float _1451 = _1449 * ((cbModelParam._m0[1u].w * (_1433 - _1334)) + _1334);
    float _1452 = _1449 * ((cbModelParam._m0[1u].w * (_1435 - _1336)) + _1336);
    float _1453 = _1449 * ((cbModelParam._m0[1u].w * (_1437 - _1338)) + _1338);
    float _1456 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, _1451 * cbSceneParam._m0[91u].x));
    vec4 _1470 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_369, _370));
    float _1472 = _1470.w;
    float _1484 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1472);
    float _1485 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1472);
    float _1486 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1472);
    uvec4 _1490 = floatBitsToUint(cbInstanceData._m0[_409 + 5u]);
    uint _1492 = _1490.x * 14u;
    uint _1493 = _1492 + 13u;
    float _1500 = _434 + (-1.0);
    float _1505 = (cbLight._m0[_1493].x * _1500) + 1.0;
    float _1506 = (cbLight._m0[_1493].y * _1500) + 1.0;
    float _1507 = (cbLight._m0[_1493].z * _1500) + 1.0;
    float _1508 = (cbLight._m0[_1493].w * _1500) + 1.0;
    uint _1509 = _1492 + 5u;
    float _1515 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
    uint _1519 = _1492 + 4u;
    float _1529 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
    uint _1533 = _1492 | 1u;
    float _1544 = dot(vec3(cbLight._m0[_1492].xyz), vec3(_269, _270, _271));
    float _1547 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_269, _270, _271));
    float _3518 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _3529 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _1552 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.3183098733425140380859375;
    float _1554 = (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.3183098733425140380859375;
    float _1561 = ((cbLight._m0[_1509].x * _1515) * _1554) + (((cbLight._m0[_1519].x * _1484) * _1529) * _1552);
    float _1562 = ((_1515 * cbLight._m0[_1509].y) * _1554) + (((cbLight._m0[_1519].y * _1485) * _1529) * _1552);
    float _1563 = ((_1515 * cbLight._m0[_1509].z) * _1554) + (((cbLight._m0[_1519].z * _1486) * _1529) * _1552);
    uvec4 _1567 = floatBitsToUint(cbLight._m0[_1492 + 12u]);
    bool _1569 = _1567.x == 0u;
    float _1580;
    float _1582;
    float _1584;
    if (_1569)
    {
        _1580 = _1561;
        _1582 = _1562;
        _1584 = _1563;
    }
    else
    {
        uint _1588 = _1492 + 6u;
        float _1604 = (dot(vec3(cbLight._m0[_1492 + 2u].xyz), vec3(_269, _270, _271)) * 0.5) + 0.5;
        float _1605 = _1604 * _1604;
        float _3540 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1607 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1580 = (((cbLight._m0[_1588].x * 0.3183098733425140380859375) * _1606) * _1607) + _1561;
        _1582 = (((cbLight._m0[_1588].y * 0.3183098733425140380859375) * _1606) * _1607) + _1562;
        _1584 = (((cbLight._m0[_1588].z * 0.3183098733425140380859375) * _1606) * _1607) + _1563;
    }
    bool _1587 = _1567.y == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1587)
    {
        _1625 = _1580;
        _1627 = _1582;
        _1629 = _1584;
    }
    else
    {
        uint _1733 = _1492 + 7u;
        float _1749 = (dot(vec3(cbLight._m0[_1492 + 3u].xyz), vec3(_269, _270, _271)) * 0.5) + 0.5;
        float _1750 = _1749 * _1749;
        float _3556 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1752 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1625 = (((cbLight._m0[_1733].x * 0.3183098733425140380859375) * _1751) * _1752) + _1580;
        _1627 = (((cbLight._m0[_1733].y * 0.3183098733425140380859375) * _1751) * _1752) + _1582;
        _1629 = (((cbLight._m0[_1733].z * 0.3183098733425140380859375) * _1751) * _1752) + _1584;
    }
    uint _1631 = _1492 + 8u;
    float _1637 = cbLight._m0[_1492].x + _348;
    float _1638 = cbLight._m0[_1492].y + _349;
    float _1639 = cbLight._m0[_1492].z + _350;
    float _1643 = inversesqrt(dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639)));
    float _1647 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1492].xyz));
    float _3572 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1650 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _1651 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _1652 = dot(vec3(cbLight._m0[_1492].xyz), vec3(_1637 * _1643, _1638 * _1643, _1639 * _1643));
    float _3594 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _1663 = (exp2(log2(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1669 = (0.5 / ((_1650 + 9.9999999392252902907785028219223e-09) + _1651)) * _1650;
    float _3605 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1671 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.31831014156341552734375;
    uint _1685 = _1492 + 9u;
    float _1691 = cbLight._m0[_1533].x + _348;
    float _1692 = cbLight._m0[_1533].y + _349;
    float _1693 = cbLight._m0[_1533].z + _350;
    float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
    float _1701 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1533].xyz));
    float _3616 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _1705 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1691 * _1697, _1692 * _1697, _1693 * _1697));
    float _3627 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1714 = (exp2(log2(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1718 = (0.5 / ((_1704 + 9.9999999392252902907785028219223e-09) + _1651)) * _1704;
    float _3638 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1720 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.31831014156341552734375;
    float _1730 = (((_1714 * cbLight._m0[_1685].x) * _1720) * _1515) + ((((cbLight._m0[_1631].x * _1484) * _1663) * _1671) * _1529);
    float _1731 = (((_1714 * cbLight._m0[_1685].y) * _1720) * _1515) + ((((cbLight._m0[_1631].y * _1485) * _1663) * _1671) * _1529);
    float _1732 = (((_1714 * cbLight._m0[_1685].z) * _1720) * _1515) + ((((cbLight._m0[_1631].z * _1486) * _1663) * _1671) * _1529);
    float _1794;
    float _1796;
    float _1798;
    if (_1569)
    {
        _1794 = _1730;
        _1796 = _1731;
        _1798 = _1732;
    }
    else
    {
        uint _1800 = _1492 + 10u;
        uint _1806 = _1492 + 2u;
        float _1812 = cbLight._m0[_1806].x + _348;
        float _1813 = cbLight._m0[_1806].y + _349;
        float _1814 = cbLight._m0[_1806].z + _350;
        float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
        float _1822 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1806].xyz));
        float _3649 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1825 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1826 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1812 * _1818, _1813 * _1818, _1814 * _1818));
        float _3660 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1835 = (exp2(log2(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1839 = (0.5 / ((_1825 + 9.9999999392252902907785028219223e-09) + _1651)) * _1825;
        float _3671 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1841 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.31831014156341552734375;
        float _1842 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1794 = (((_1835 * cbLight._m0[_1800].x) * _1841) * _1842) + _1730;
        _1796 = (((_1835 * cbLight._m0[_1800].y) * _1841) * _1842) + _1731;
        _1798 = (((_1835 * cbLight._m0[_1800].z) * _1841) * _1842) + _1732;
    }
    float _1877;
    float _1879;
    float _1881;
    if (_1587)
    {
        _1877 = _1794;
        _1879 = _1796;
        _1881 = _1798;
    }
    else
    {
        uint _1888 = _1492 + 11u;
        uint _1894 = _1492 + 3u;
        float _1900 = cbLight._m0[_1894].x + _348;
        float _1901 = cbLight._m0[_1894].y + _349;
        float _1902 = cbLight._m0[_1894].z + _350;
        float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
        float _1910 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1894].xyz));
        float _3687 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1913 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1914 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_1900 * _1906, _1901 * _1906, _1902 * _1906));
        float _3698 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1923 = (exp2(log2(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1927 = (0.5 / ((_1913 + 9.9999999392252902907785028219223e-09) + _1651)) * _1913;
        float _3709 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1929 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.31831014156341552734375;
        float _1930 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1877 = (((_1923 * cbLight._m0[_1888].x) * _1929) * _1930) + _1794;
        _1879 = (((_1923 * cbLight._m0[_1888].y) * _1929) * _1930) + _1796;
        _1881 = (((_1923 * cbLight._m0[_1888].z) * _1929) * _1930) + _1798;
    }
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    if (_1490.y == 0u)
    {
        float _2005 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2006 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2005;
        float _2007 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2005;
        float _2008 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2005;
        uvec4 _2020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2021 = _2020.x;
        uint _2032 = uint((float(_2020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _370) / _2021))) + floor(float(uint(cbSceneParam._m0[85u].x * _369) / _2021)));
        float _2042 = (log2(_2008 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2043 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        uint _2046 = uint(isnan(14.0) ? _2043 : (isnan(_2043) ? 14.0 : min(_2043, 14.0)));
        uvec4 _2051 = texelFetch(g_lightClusterGridBuffer, int(((_2046 << 2u) + (_2032 << 6u)) >> 2u));
        uint _2052 = _2051.x;
        uint _2053 = _2020.z;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        if (((((1u << ((_2053 >> 4u) & 15u)) + 4294967295u) & _2052) == 0u) || ((_2053 & 240u) == 0u))
        {
            _2194 = 0.0;
            _2196 = 0.0;
            _2198 = 0.0;
            _2200 = 0.0;
            _2202 = 0.0;
            _2204 = 0.0;
        }
        else
        {
            float _2195;
            float _2197;
            float _2199;
            float _2201;
            float _2203;
            float _2205;
            float _2353 = 0.0;
            float _2354 = 0.0;
            float _2355 = 0.0;
            float _2356 = 0.0;
            float _2357 = 0.0;
            float _2358 = 0.0;
            uint _2359 = 0u;
            uint _2368;
            bool _2369;
            for (;;)
            {
                _2368 = texelFetch(g_lightClassification, int((((_2046 << 5u) + (_2032 << 9u)) + (_2359 << 2u)) >> 2u)).x;
                _2369 = _2368 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2369)
                {
                    frontier_phi_66_pred = _2353;
                    frontier_phi_66_pred_1 = _2358;
                    frontier_phi_66_pred_2 = _2357;
                    frontier_phi_66_pred_3 = _2356;
                    frontier_phi_66_pred_4 = _2355;
                    frontier_phi_66_pred_5 = _2354;
                }
                else
                {
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    uint _2504;
                    _2498 = _2353;
                    _2499 = _2354;
                    _2500 = _2355;
                    _2501 = _2356;
                    _2502 = _2357;
                    _2503 = _2358;
                    _2504 = _2368;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    for (;;)
                    {
                        uint _2508 = uint(findLSB(_2504)) + (_2359 << 5u);
                        uint _2505 = (_2504 + 4294967295u) & _2504;
                        uint _2510 = _2508 * 48u;
                        vec4 _2524 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2510)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 3u)).x));
                        uint _2530 = (_2508 * 48u) + 4u;
                        vec4 _2543 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2530)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 3u)).x));
                        uint _2549 = (_2508 * 48u) + 8u;
                        vec3 _2560 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2549)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 2u)).x));
                        float _2564 = _2524.x - _2006;
                        float _2565 = _2524.y - _2007;
                        float _2566 = _2524.z - _2008;
                        float _2567 = dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566));
                        float _2570 = inversesqrt(_2567);
                        float _2579 = 1.0 - (_2567 * _2524.w);
                        float _3735 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _2580 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
                        float _2581 = sqrt(_2567) * _2543.w;
                        float _2584 = 1.39999997615814208984375 / (_2581 + 1.39999997615814208984375);
                        float _2585 = _2584 * _2584;
                        float _2588 = ((1.0 - _2585) * dot(vec3(_390, _393, _396), vec3(_2570 * _2564, _2570 * _2565, _2570 * _2566))) + _2585;
                        float _2591 = _2581 * _2581;
                        float _2595 = ((isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0))) * _2580) / ((_2591 * 0.699999988079071044921875) + 1.0);
                        float _2599 = (-0.0) - _2006;
                        float _2600 = (-0.0) - _2007;
                        float _2601 = (-0.0) - _2008;
                        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
                        float _2609 = dot(vec3(_390, _393, _396), vec3(_2605 * _2599, _2605 * _2600, _2605 * _2601));
                        float _3751 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _3762 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                        float _2613 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                        float _2617 = (0.5 / (((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) + 9.9999999392252902907785028219223e-09) + _2613)) * _2613;
                        float _3773 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                        float _2626 = (((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 3.1415927410125732421875) / ((_2591 * 2.1991131305694580078125) + 3.141590118408203125)) * _2580;
                        _2428 = (_2595 * _2543.x) + _2501;
                        _2429 = (_2595 * _2543.y) + _2502;
                        _2430 = (_2595 * _2543.z) + _2503;
                        _2425 = (_2626 * _2560.x) + _2498;
                        _2426 = (_2626 * _2560.y) + _2499;
                        _2427 = (_2626 * _2560.z) + _2500;
                        if (_2505 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2498 = _2425;
                            _2499 = _2426;
                            _2500 = _2427;
                            _2501 = _2428;
                            _2502 = _2429;
                            _2503 = _2430;
                            _2504 = _2505;
                        }
                    }
                    frontier_phi_66_pred = _2425;
                    frontier_phi_66_pred_1 = _2430;
                    frontier_phi_66_pred_2 = _2429;
                    frontier_phi_66_pred_3 = _2428;
                    frontier_phi_66_pred_4 = _2427;
                    frontier_phi_66_pred_5 = _2426;
                }
                _2195 = frontier_phi_66_pred;
                _2205 = frontier_phi_66_pred_1;
                _2203 = frontier_phi_66_pred_2;
                _2201 = frontier_phi_66_pred_3;
                _2199 = frontier_phi_66_pred_4;
                _2197 = frontier_phi_66_pred_5;
                uint _2360 = _2359 + 1u;
                if (_2360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2353 = _2195;
                    _2354 = _2197;
                    _2355 = _2199;
                    _2356 = _2201;
                    _2357 = _2203;
                    _2358 = _2205;
                    _2359 = _2360;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2194 = _2195;
            _2196 = _2197;
            _2198 = _2199;
            _2200 = _2201;
            _2202 = _2203;
            _2204 = _2205;
        }
        uvec4 _2208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2209 = _2208.z;
        uint _2211 = (_2209 >> 8u) & 15u;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        if (((4294967295u << _2211) & _2052) == 0u)
        {
            _2324 = _2194;
            _2326 = _2196;
            _2328 = _2198;
            _2330 = _2200;
            _2332 = _2202;
            _2334 = _2204;
        }
        else
        {
            float _2349 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2211 < ((_2209 >> 12u) & 15u))
            {
                float _2325;
                float _2327;
                float _2329;
                float _2331;
                float _2333;
                float _2335;
                float _2481 = _2194;
                float _2482 = _2196;
                float _2483 = _2198;
                float _2484 = _2200;
                float _2485 = _2202;
                float _2486 = _2204;
                uint _2487 = _2211;
                uint _2496;
                bool _2497;
                for (;;)
                {
                    _2496 = texelFetch(g_lightClassification, int((((_2046 << 5u) + (_2032 << 9u)) + (_2487 << 2u)) >> 2u)).x;
                    _2497 = _2496 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2497)
                    {
                        frontier_phi_77_pred = _2486;
                        frontier_phi_77_pred_1 = _2485;
                        frontier_phi_77_pred_2 = _2484;
                        frontier_phi_77_pred_3 = _2483;
                        frontier_phi_77_pred_4 = _2482;
                        frontier_phi_77_pred_5 = _2481;
                    }
                    else
                    {
                        float _2640;
                        float _2641;
                        float _2642;
                        float _2643;
                        float _2644;
                        float _2645;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2653 = _2481;
                        float _2654 = _2482;
                        float _2655 = _2483;
                        float _2656 = _2484;
                        float _2657 = _2485;
                        float _2658 = _2486;
                        uint _2659 = _2496;
                        uint _2660;
                        vec4 _2685;
                        float _2686;
                        vec4 _2701;
                        vec3 _2713;
                        vec4 _2729;
                        vec4 _2745;
                        float _2792;
                        bool _2793;
                        for (;;)
                        {
                            uint _2670 = ((_2487 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2659));
                            _2660 = (_2659 + 4294967295u) & _2659;
                            uint _2672 = _2670 * 40u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            _2686 = _2685.w;
                            uint _2688 = (_2670 * 40u) + 4u;
                            _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2703 = (_2670 * 40u) + 8u;
                            _2713 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 2u)).x));
                            uint _2716 = (_2670 * 40u) + 16u;
                            _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            uint _2732 = (_2670 * 40u) + 20u;
                            _2745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 3u)).x));
                            uint _2748 = (_2670 * 40u) + 24u;
                            vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            uint _2767 = (_2670 * 40u) + 28u;
                            vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            _2792 = fma(_2008, _2780.z, fma(_2007, _2780.y, _2780.x * _2006)) + _2780.w;
                            _2793 = !((fma(_2008, _2761.z, fma(_2007, _2761.y, _2761.x * _2006)) + _2761.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2793)
                            {
                                float _2820 = _2685.x - _2006;
                                float _2821 = _2685.y - _2007;
                                float _2822 = _2685.z - _2008;
                                float _2823 = dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822));
                                float _2826 = inversesqrt(_2823);
                                float _2827 = _2826 * _2820;
                                float _2828 = _2826 * _2821;
                                float _2829 = _2826 * _2822;
                                float _2833 = 1.0 - (_2823 / (_2686 * _2686));
                                float _3784 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                                float _2834 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
                                float _2838 = sqrt(_2823) * _2701.w;
                                float _2840 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                                float _2841 = _2840 * _2840;
                                float _2842 = 1.0 - _2841;
                                float _2844 = (_2842 * dot(vec3(_2827, _2828, _2829), vec3(_390, _393, _396))) + _2841;
                                float _2847 = _2838 * _2838;
                                float _2851 = (fma(_2008, _2729.z, fma(_2007, _2729.y, _2729.x * _2006)) + _2729.w) / _2792;
                                float _2852 = (fma(_2008, _2745.z, fma(_2007, _2745.y, _2745.x * _2006)) + _2745.w) / _2792;
                                float _2856 = 1.0 - dot(vec2(_2851, _2852), vec2(_2851, _2852));
                                float _3800 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                                float _2857 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
                                float _2858 = _2857 * (((isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))) * _2834) / ((_2847 * 0.699999988079071044921875) + 1.0));
                                float _2868 = dot(vec3(_390, _393, _396), vec3((-0.0) - (_2006 * _2349), (-0.0) - (_2007 * _2349), (-0.0) - (_2008 * _2349)));
                                float _3811 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                                float _2876 = (_2842 * dot(vec3(_390, _393, _396), vec3(_2827, _2828, _2829))) + _2841;
                                float _3822 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                                float _2877 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
                                float _2881 = (0.5 / (((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) + 9.9999999392252902907785028219223e-09) + _2877)) * _2877;
                                float _3833 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2888 = (_2857 * _2834) * (((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 3.1415927410125732421875) / ((_2847 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2858 * _2701.y;
                                frontier_phi_83_pred_1 = _2858 * _2701.x;
                                frontier_phi_83_pred_2 = _2888 * _2713.z;
                                frontier_phi_83_pred_3 = _2888 * _2713.y;
                                frontier_phi_83_pred_4 = _2888 * _2713.x;
                                frontier_phi_83_pred_5 = _2858 * _2701.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2896 = frontier_phi_83_pred;
                            _2895 = frontier_phi_83_pred_1;
                            _2894 = frontier_phi_83_pred_2;
                            _2893 = frontier_phi_83_pred_3;
                            _2892 = frontier_phi_83_pred_4;
                            _2897 = frontier_phi_83_pred_5;
                            _2643 = _2895 + _2656;
                            _2644 = _2896 + _2657;
                            _2645 = _2897 + _2658;
                            _2640 = _2892 + _2653;
                            _2641 = _2893 + _2654;
                            _2642 = _2894 + _2655;
                            if (_2660 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2653 = _2640;
                                _2654 = _2641;
                                _2655 = _2642;
                                _2656 = _2643;
                                _2657 = _2644;
                                _2658 = _2645;
                                _2659 = _2660;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2645;
                        frontier_phi_77_pred_1 = _2644;
                        frontier_phi_77_pred_2 = _2643;
                        frontier_phi_77_pred_3 = _2642;
                        frontier_phi_77_pred_4 = _2641;
                        frontier_phi_77_pred_5 = _2640;
                    }
                    _2335 = frontier_phi_77_pred;
                    _2333 = frontier_phi_77_pred_1;
                    _2331 = frontier_phi_77_pred_2;
                    _2329 = frontier_phi_77_pred_3;
                    _2327 = frontier_phi_77_pred_4;
                    _2325 = frontier_phi_77_pred_5;
                    uint _2488 = _2487 + 1u;
                    if (_2488 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2481 = _2325;
                        _2482 = _2327;
                        _2483 = _2329;
                        _2484 = _2331;
                        _2485 = _2333;
                        _2486 = _2335;
                        _2487 = _2488;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2329;
                frontier_phi_58_59_ladder_1 = _2335;
                frontier_phi_58_59_ladder_2 = _2333;
                frontier_phi_58_59_ladder_3 = _2331;
                frontier_phi_58_59_ladder_4 = _2327;
                frontier_phi_58_59_ladder_5 = _2325;
            }
            else
            {
                frontier_phi_58_59_ladder = _2198;
                frontier_phi_58_59_ladder_1 = _2204;
                frontier_phi_58_59_ladder_2 = _2202;
                frontier_phi_58_59_ladder_3 = _2200;
                frontier_phi_58_59_ladder_4 = _2196;
                frontier_phi_58_59_ladder_5 = _2194;
            }
            _2324 = frontier_phi_58_59_ladder_5;
            _2326 = frontier_phi_58_59_ladder_4;
            _2328 = frontier_phi_58_59_ladder;
            _2330 = frontier_phi_58_59_ladder_3;
            _2332 = frontier_phi_58_59_ladder_2;
            _2334 = frontier_phi_58_59_ladder_1;
        }
        float _2339 = isnan(1.0) ? _434 : (isnan(_434) ? 1.0 : min(_434, 1.0));
        _2065 = (_2339 * _2330) + _1625;
        _2067 = (_2339 * _2332) + _1627;
        _2069 = (_2339 * _2334) + _1629;
        _2071 = ((_2324 * 0.039999999105930328369140625) * _2339) + _1877;
        _2073 = ((_2326 * 0.039999999105930328369140625) * _2339) + _1879;
        _2075 = ((_2328 * 0.039999999105930328369140625) * _2339) + _1881;
    }
    else
    {
        _2065 = _1625;
        _2067 = _1627;
        _2069 = _1629;
        _2071 = _1877;
        _2073 = _1879;
        _2075 = _1881;
    }
    uint _2081 = _410 + uint(cbMatDynParam._m0[0u].w);
    float _2091 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _237.x) * cbSceneParam._m0[72u].y) * _260) * cbInstanceData._m0[_2081].x;
    float _2096 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _237.y) * cbSceneParam._m0[72u].y) * _260) * cbInstanceData._m0[_2081].y;
    float _2101 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _237.z) * cbSceneParam._m0[72u].y) * _260) * cbInstanceData._m0[_2081].z;
    float _3849 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3860 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3871 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _2118 = (((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_2065 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _434))) + ((_2071 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1244)) * cbPerFrame._m0[3u].x)) + _2091;
    float _2120 = (_2096 + ((_2073 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1244)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_2067 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _434)));
    float _2122 = (_2101 + ((_2075 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _1244)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_2069 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _434)));
    float _2123 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2124 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2125 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2131 = cbMtdParam._m0[2u].x * _2091;
    float _2132 = cbMtdParam._m0[2u].y * _2096;
    float _2133 = cbMtdParam._m0[2u].z * _2101;
    float _3897 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2135 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    uint _2136 = _409 + 6u;
    float _2144 = _369 / cbSceneParam._m0[86u].x;
    float _2145 = _370 / cbSceneParam._m0[86u].y;
    vec4 _2159 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2144, _2145, (log2((isnan(cbSceneParam._m0[77u].w) ? _290 : (isnan(_290) ? cbSceneParam._m0[77u].w : min(_290, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2161 = _2159.x;
    float _2162 = _2159.y;
    float _2163 = _2159.z;
    float _2164 = _2159.w;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_290 > cbSceneParam._m0[78u].w)
    {
        float _2219 = isnan(_290) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _290 : min(cbSceneParam._m0[80u].w, _290));
        float _2220 = _2219 / _290;
        float _2231 = _2220 * _341;
        float _2232 = _342 * _2220;
        float _2233 = (-0.0) - _2232;
        float _2235 = _2220 * _343;
        float _2237 = (cbSceneParam._m0[77u].w * _2233) / _2219;
        float _2238 = _2237 + cbSceneParam._m0[79u].w;
        float _2239 = cbSceneParam._m0[79u].w - _2232;
        float _2245 = sqrt(((_2231 * _2231) + (_2232 * _2232)) + (_2235 * _2235));
        float _2248 = (1.0 - (cbSceneParam._m0[77u].w / _2219)) * _2245;
        float _2253 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2255 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2438;
        if (abs((_2233 - _2237) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2438 = ((((_2238 > 0.0) ? exp2(_2253 * _2238) : (2.0 - exp2(_2255 * _2238))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2248;
        }
        else
        {
            float _2382 = 1.0 / cbSceneParam._m0[80u].x;
            float _2383 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : max(_2238, _2239));
            float _2384 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : min(_2238, _2239));
            float _2393 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : min(_2383, 0.0));
            float _2394 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : min(_2384, 0.0));
            _2438 = ((abs(_2245 / _2233) * cbSceneParam._m0[80u].y) * ((((_2393 - _2394) * 2.0) - ((exp2(_2253 * (isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0)))) - exp2(_2253 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0))))) * _2382)) - ((exp2(_2255 * _2393) - exp2(_2255 * _2394)) * _2382))) + (_2248 * cbSceneParam._m0[80u].z);
        }
        vec4 _2440 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2144, _2145, 1.0), 0.0);
        float _2449 = exp2((_2438 * (-1.44269502162933349609375)) * (1.0 - _2440.w));
        float _2450 = log2(_2449);
        float _2466 = log2(_2164);
        _2257 = (exp2(_2466 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2450 * cbSceneParam._m0[78u].x)) * _2440.x) / cbSceneParam._m0[78u].x)) + _2161;
        _2259 = (exp2(_2466 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2450 * cbSceneParam._m0[78u].y)) * _2440.y) / cbSceneParam._m0[78u].y)) + _2162;
        _2261 = (exp2(_2466 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2450 * cbSceneParam._m0[78u].z)) * _2440.z) / cbSceneParam._m0[78u].z)) + _2163;
        _2263 = _2449 * _2164;
    }
    else
    {
        _2257 = _2161;
        _2259 = _2162;
        _2261 = _2163;
        _2263 = _2164;
    }
    bool _2476;
    vec4 _2272;
    vec4 _2294;
    float _2296;
    float _2300;
    float _2301;
    float _2302;
    float _2305;
    float _2308;
    float _2311;
    float _2312;
    bool _2323;
    for (;;)
    {
        _2272 = cbMatDynParam._m0[0u];
        float _2274 = roundEven(_2272.y);
        bool _2275 = _2274 == 3.0;
        float _2276 = log2(_2263);
        float _2280 = exp2(_2276 * cbSceneParam._m0[78u].x);
        float _2281 = exp2(_2276 * cbSceneParam._m0[78u].y);
        float _2282 = exp2(_2276 * cbSceneParam._m0[78u].z);
        float _2283 = _2280 * _2123;
        float _2284 = _2281 * _2124;
        float _2285 = _2282 * _2125;
        float _2292 = _357 + (-0.5);
        _2294 = cbMtdParam._m0[1u];
        _2296 = _2294.y * _2292;
        float _2299 = (_2274 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2300 = _2299 * (_2275 ? _2283 : (_2283 + (cbSceneParam._m0[72u].w * _2257)));
        _2301 = _2299 * (_2275 ? _2284 : (_2284 + (cbSceneParam._m0[72u].w * _2259)));
        _2302 = _2299 * (_2275 ? _2285 : (_2285 + (cbSceneParam._m0[72u].w * _2261)));
        _2305 = ((_2131 * _2135) * _2280) * _2299;
        _2308 = ((_2132 * _2135) * _2281) * _2299;
        _2311 = ((_2133 * _2135) * _2282) * _2299;
        _2312 = _2292 * 0.999000012874603271484375;
        _2323 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2323)
        {
            if ((cbInstanceData._m0[_409 + 7u].x + _2312) < 0.5)
            {
                _2476 = true;
                break;
            }
        }
        uint _2417 = _410 + uint(_2272.w);
        if ((cbInstanceData._m0[_2417].w < 1.0) && ((cbInstanceData._m0[_2417].w + _2312) < 0.5))
        {
            _2476 = true;
            break;
        }
        if ((_2296 + 1.0) < _2294.x)
        {
            _2476 = true;
            break;
        }
        _2476 = false;
        break;
    }
    float _2631;
    if (_2476)
    {
        discard_state = true;
        _2631 = 0.0;
    }
    else
    {
        _2631 = cbInstanceData._m0[_2136].w;
    }
    SV_Target.x = _2300;
    SV_Target.y = _2301;
    SV_Target.z = _2302;
    SV_Target.w = _2631;
    SV_Target_1.x = _2305;
    SV_Target_1.y = _2308;
    SV_Target_1.z = _2311;
    SV_Target_1.w = cbInstanceData._m0[_2136].w;
    discard_exit();
}


