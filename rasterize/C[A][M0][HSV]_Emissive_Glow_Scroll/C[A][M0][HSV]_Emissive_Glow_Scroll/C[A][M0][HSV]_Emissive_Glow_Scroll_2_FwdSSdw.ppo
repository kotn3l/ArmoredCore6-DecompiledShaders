#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _744;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _188 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _233 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _245 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _246 = _245 * _167;
    float _247 = _245 * _168;
    float _248 = _245 * _169;
    float _2921 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2932 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2943 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _268 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _309 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _319 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _309);
    float _320 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _309);
    float _321 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _309);
    float _325 = inversesqrt(dot(vec3(_319, _320, _321), vec3(_319, _320, _321)));
    float _326 = _319 * _325;
    float _327 = _320 * _325;
    float _328 = _321 * _325;
    float _334 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _335 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _356 = fma(_248, cbSceneParam._m0[5u].z, fma(_247, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _246));
    float _359 = fma(_248, cbSceneParam._m0[6u].z, fma(_247, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _246));
    float _362 = fma(_248, cbSceneParam._m0[7u].z, fma(_247, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _246));
    uint _375 = uint(roundEven(NORMAL.w)) * 13u;
    uint _376 = _375 + 9u;
    uint _377 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _383 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0)))) * cbInstanceData._m0[_377].x;
    float _384 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0)))) * cbInstanceData._m0[_377].y;
    float _385 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0)))) * cbInstanceData._m0[_377].z;
    float _2954 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
    float _2965 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
    float _2976 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
    vec4 _397 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _334, cbSceneParam._m0[86u].y * _335));
    float _400 = _397.x * TEXCOORD.z;
    float _401 = dot(vec3(_246, _247, _248), vec3(_326, _327, _328));
    float _404 = _401 * 2.0;
    float _409 = (_404 * _246) - _326;
    float _410 = (_404 * _247) - _327;
    float _411 = (_404 * _248) - _328;
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _743;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _468 = fma(_441, cbModelParam._m0[26u].z, fma(_437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _433));
        float _472 = fma(_441, cbModelParam._m0[27u].z, fma(_437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _433));
        float _476 = fma(_441, cbModelParam._m0[28u].z, fma(_437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _433));
        float _501 = _433 + _246;
        float _502 = _437 + _247;
        float _503 = _441 + _248;
        float _513 = fma(_503, cbModelParam._m0[26u].z, fma(_502, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501)) - _468;
        float _514 = fma(_503, cbModelParam._m0[27u].z, fma(_502, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501)) - _472;
        float _515 = fma(_503, cbModelParam._m0[28u].z, fma(_502, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501)) - _476;
        float _519 = inversesqrt(dot(vec3(_513, _514, _515), vec3(_513, _514, _515)));
        float _532 = ((_519 * _513) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_468 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _533 = ((_519 * _514) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_472 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _534 = ((_519 * _515) / cbModelParam._m0[34u].z) + ((((((_476 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        float _571 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_537.x + (-0.5));
        float _573 = _571 * (_537.y + (-0.5));
        float _574 = _571 * (_537.z + (-0.5));
        float _581 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_544.x + (-0.5));
        float _583 = _581 * (_544.y + (-0.5));
        float _584 = _581 * (_544.z + (-0.5));
        float _591 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_551.x + (-0.5));
        float _593 = _591 * (_551.y + (-0.5));
        float _594 = _591 * (_551.z + (-0.5));
        float _601 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _602 = _601 * (_558.x + (-0.5));
        float _603 = _601 * (_558.y + (-0.5));
        float _604 = _601 * (_558.z + (-0.5));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = _572 * 0.5;
        float _609 = _582 * 0.5;
        float _610 = _592 * 0.5;
        float _611 = dot(vec3(_608, _609, _610), vec3(_608, _609, _610));
        float _616 = (_611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_611);
        float _625 = (dot(vec3(_246, _247, _248), vec3(_616 * _608, _616 * _609, _616 * _610)) + 1.0) * 0.5;
        float _3002 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _635 = sqrt(((_609 * _609) + (_608 * _608)) + (_610 * _610)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _3013 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
        float _637 = _636 * 2.0;
        float _641 = (1.0 - _636) / (_636 + 1.0);
        float _3024 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
        float _651 = ((((1.0 - _642) * (_637 + 2.0)) * exp2(log2(isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0))) * (_637 + 1.0))) + _642) * _605;
        float _652 = _573 * 0.5;
        float _653 = _583 * 0.5;
        float _654 = _593 * 0.5;
        float _655 = dot(vec3(_652, _653, _654), vec3(_652, _653, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _668 = (dot(vec3(_246, _247, _248), vec3(_660 * _652, _660 * _653, _660 * _654)) + 1.0) * 0.5;
        float _3035 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _677 = sqrt(((_653 * _653) + (_652 * _652)) + (_654 * _654)) / (_606 + 9.9999997473787516355514526367188e-06);
        float _3046 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _3057 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0))) * (_679 + 1.0))) + _684) * _606;
        float _694 = _574 * 0.5;
        float _695 = _584 * 0.5;
        float _696 = _594 * 0.5;
        float _697 = dot(vec3(_694, _695, _696), vec3(_694, _695, _696));
        float _702 = (_697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_697);
        float _710 = (dot(vec3(_246, _247, _248), vec3(_702 * _694, _702 * _695, _702 * _696)) + 1.0) * 0.5;
        float _3068 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _719 = sqrt(((_695 * _695) + (_694 * _694)) + (_696 * _696)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3079 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
        float _721 = _720 * 2.0;
        float _725 = (1.0 - _720) / (_720 + 1.0);
        float _3090 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
        float _735 = ((((1.0 - _726) * (_721 + 2.0)) * exp2(log2(isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0))) * (_721 + 1.0))) + _726) * _607;
        _743 = _574;
        _745 = _573;
        _746 = _572;
        _747 = _584;
        _748 = _583;
        _749 = _582;
        _750 = _594;
        _751 = _593;
        _752 = _592;
        _753 = _607;
        _754 = _606;
        _755 = _605;
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0)));
        _757 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0)));
    }
    else
    {
        _743 = _744;
        _745 = _744;
        _746 = _744;
        _747 = _744;
        _748 = _744;
        _749 = _744;
        _750 = _744;
        _751 = _744;
        _752 = _744;
        _753 = _744;
        _754 = _744;
        _755 = _744;
        _756 = 0.0;
        _757 = 0.0;
        _758 = 0.0;
    }
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _784 = fma(_441, cbModelParam._m0[30u].z, fma(_437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _433));
        float _788 = fma(_441, cbModelParam._m0[31u].z, fma(_437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _433));
        float _792 = fma(_441, cbModelParam._m0[32u].z, fma(_437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _433));
        float _815 = _433 + _246;
        float _816 = _437 + _247;
        float _817 = _441 + _248;
        float _827 = fma(_817, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815)) - _784;
        float _828 = fma(_817, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815)) - _788;
        float _829 = fma(_817, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815)) - _792;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _846 = ((_833 * _827) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_784 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_833 * _828) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_788 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_833 * _829) / cbModelParam._m0[35u].z) + ((((((_792 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        float _883 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_850.x + (-0.5));
        float _885 = _883 * (_850.y + (-0.5));
        float _886 = _883 * (_850.z + (-0.5));
        float _893 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_857.x + (-0.5));
        float _895 = _893 * (_857.y + (-0.5));
        float _896 = _893 * (_857.z + (-0.5));
        float _903 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_864.x + (-0.5));
        float _905 = _903 * (_864.y + (-0.5));
        float _906 = _903 * (_864.z + (-0.5));
        float _913 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_871.x + (-0.5));
        float _915 = _913 * (_871.y + (-0.5));
        float _916 = _913 * (_871.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_246, _247, _248), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3131 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3142 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3153 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0))) * (_947 + 1.0))) + _952) * _917;
        float _962 = _885 * 0.5;
        float _963 = _895 * 0.5;
        float _964 = _905 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_246, _247, _248), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3164 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3175 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3186 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0))) * (_989 + 1.0))) + _994) * _918;
        float _1004 = _886 * 0.5;
        float _1005 = _896 * 0.5;
        float _1006 = _906 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_246, _247, _248), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3197 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3208 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3219 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * (_1031 + 1.0))) + _1036) * _919;
        _1053 = _886;
        _1054 = _885;
        _1055 = _884;
        _1056 = _896;
        _1057 = _895;
        _1058 = _894;
        _1059 = _906;
        _1060 = _905;
        _1061 = _904;
        _1062 = _919;
        _1063 = _918;
        _1064 = _917;
        _1065 = cbModelParam._m0[36u].w * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1066 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _744;
        _1054 = _744;
        _1055 = _744;
        _1056 = _744;
        _1057 = _744;
        _1058 = _744;
        _1059 = _744;
        _1060 = _744;
        _1061 = _744;
        _1062 = _744;
        _1063 = _744;
        _1064 = _744;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1077 = (cbModelParam._m0[1u].x * (_1065 - _756)) + _756;
    float _1078 = (cbModelParam._m0[1u].x * (_1066 - _757)) + _757;
    float _1079 = (cbModelParam._m0[1u].x * (_1067 - _758)) + _758;
    float _1100 = fma(_1079, cbSceneParam._m0[89u].z, fma(_1078, cbSceneParam._m0[89u].y, _1077 * cbSceneParam._m0[89u].x));
    float _1103 = fma(_1079, cbSceneParam._m0[90u].z, fma(_1078, cbSceneParam._m0[90u].y, _1077 * cbSceneParam._m0[90u].x));
    float _1106 = fma(_1079, cbSceneParam._m0[91u].z, fma(_1078, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1077));
    float _1121 = _409 * 0.5;
    float _1122 = _410 * 0.5;
    float _1123 = _411 * 0.5;
    float _1124 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1127 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1054, _1057, _1060, _1063));
    float _1130 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1053, _1056, _1059, _1062));
    float _1164;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1137 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_743, _747, _750, _753));
        float _1141 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_745, _748, _751, _754));
        float _1145 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_746, _749, _752, _755));
        float _1152 = dot(vec4(cbModelParam._m0[39u]), vec4(_1121, _1122, _1123, 1.0));
        _1164 = dot(vec3(isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1152) ? 0.0 : (isnan(0.0) ? _1152 : max(0.0, _1152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1164 = 1.0;
    }
    float _1175;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1166 = dot(vec4(cbModelParam._m0[40u]), vec4(_1121, _1122, _1123, 1.0));
        _1175 = dot(vec3(isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1166) ? 0.0 : (isnan(0.0) ? _1166 : max(0.0, _1166))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1175 = 1.0;
    }
    float _1179 = (_1175 * cbModelParam._m0[1u].x) + (_1164 * (1.0 - cbModelParam._m0[1u].x));
    float _1188 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1269;
    float _1271;
    float _1273;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1236 = fma(_441, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433)) + cbModelParam._m0[13u].w;
        float _1240 = fma(_441, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433)) + cbModelParam._m0[14u].w;
        float _1244 = fma(_441, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433)) + cbModelParam._m0[15u].w;
        float _1247 = fma(_411, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409));
        float _1250 = fma(_411, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409));
        float _1253 = fma(_411, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409));
        float _1279;
        if (_1247 > 0.0)
        {
            _1279 = abs((1.0 - _1236) / _1247);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1247 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1236 + 1.0) / _1247);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1279 = frontier_phi_14_12_ladder;
        }
        float _1506;
        if (_1250 > 0.0)
        {
            _1506 = abs((1.0 - _1240) / _1250);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1250 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1240 + 1.0) / _1250);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1506 = frontier_phi_23_19_ladder;
        }
        float _1698;
        if (_1253 > 0.0)
        {
            _1698 = abs((1.0 - _1244) / _1253);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1253 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1244 + 1.0) / _1253);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1698 = frontier_phi_35_30_ladder;
        }
        float _1700 = isnan(_1506) ? _1279 : (isnan(_1279) ? _1506 : min(_1279, _1506));
        float _1701 = isnan(_1698) ? _1700 : (isnan(_1700) ? _1698 : min(_1700, _1698));
        float _1705 = (_1701 * _1247) + _1236;
        float _1706 = (_1701 * _1250) + _1240;
        float _1707 = (_1701 * _1253) + _1244;
        float _1708 = _1701 * 9.9999997473787516355514526367188e-05;
        float _1710 = (-1.0) - _1708;
        float _1712 = _1708 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1707 > _1712) || ((_1707 < _1710) || ((_1706 > _1712) || ((_1706 < _1710) || ((_1705 < _1710) || (_1705 > _1712))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1707, cbModelParam._m0[9u].z, fma(_1706, cbModelParam._m0[9u].y, _1705 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1707, cbModelParam._m0[10u].z, fma(_1706, cbModelParam._m0[10u].y, _1705 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1707, cbModelParam._m0[11u].z, fma(_1706, cbModelParam._m0[11u].y, _1705 * cbModelParam._m0[11u].x))), _1188);
            frontier_phi_13_35_ladder = _1804.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1804.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1804.x * cbModelParam._m0[1u].y;
        }
        _1269 = frontier_phi_13_35_ladder_2;
        _1271 = frontier_phi_13_35_ladder_1;
        _1273 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_409, _410, _411), _1188);
        _1269 = _1257.x * cbModelParam._m0[1u].y;
        _1271 = _1257.y * cbModelParam._m0[1u].y;
        _1273 = _1257.z * cbModelParam._m0[1u].y;
    }
    float _1276 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1332 = fma(_441, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433)) + cbModelParam._m0[21u].w;
        float _1336 = fma(_441, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433)) + cbModelParam._m0[22u].w;
        float _1340 = fma(_441, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433)) + cbModelParam._m0[23u].w;
        float _1343 = fma(_411, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409));
        float _1346 = fma(_411, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409));
        float _1349 = fma(_411, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409));
        float _1511;
        if (_1343 > 0.0)
        {
            _1511 = abs((1.0 - _1332) / _1343);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1332 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1511 = frontier_phi_25_21_ladder;
        }
        float _1725;
        if (_1346 > 0.0)
        {
            _1725 = abs((1.0 - _1336) / _1346);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1336 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1725 = frontier_phi_37_32_ladder;
        }
        float _1876;
        if (_1349 > 0.0)
        {
            _1876 = abs((1.0 - _1340) / _1349);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1340 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1876 = frontier_phi_46_43_ladder;
        }
        float _1878 = isnan(_1725) ? _1511 : (isnan(_1511) ? _1725 : min(_1511, _1725));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1343) + _1332;
        float _1884 = (_1879 * _1346) + _1336;
        float _1885 = (_1879 * _1349) + _1340;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1887 = (-1.0) - _1886;
        float _1889 = _1886 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1885 > _1889) || ((_1885 < _1887) || ((_1884 > _1889) || ((_1884 < _1887) || ((_1883 < _1887) || (_1883 > _1889))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2122 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1885, cbModelParam._m0[17u].z, fma(_1884, cbModelParam._m0[17u].y, _1883 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1885, cbModelParam._m0[18u].z, fma(_1884, cbModelParam._m0[18u].y, _1883 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1885, cbModelParam._m0[19u].z, fma(_1884, cbModelParam._m0[19u].y, _1883 * cbModelParam._m0[19u].x))), _1276);
            frontier_phi_22_46_ladder = _2122.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2122.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2122.x * cbModelParam._m0[1u].z;
        }
        _1368 = frontier_phi_22_46_ladder_2;
        _1370 = frontier_phi_22_46_ladder_1;
        _1372 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_409, _410, _411), _1276);
        _1368 = _1352.x * cbModelParam._m0[1u].z;
        _1370 = _1352.y * cbModelParam._m0[1u].z;
        _1372 = _1352.z * cbModelParam._m0[1u].z;
    }
    float _1384 = _400 * 0.01200000010430812835693359375;
    float _1386 = _1384 * ((cbModelParam._m0[1u].w * (_1368 - _1269)) + _1269);
    float _1387 = _1384 * ((cbModelParam._m0[1u].w * (_1370 - _1271)) + _1271);
    float _1388 = _1384 * ((cbModelParam._m0[1u].w * (_1372 - _1273)) + _1273);
    float _1391 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, _1386 * cbSceneParam._m0[91u].x));
    vec4 _1405 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_334, _335));
    float _1407 = _1405.w;
    float _1419 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1407);
    float _1420 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1407);
    float _1421 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1407);
    uvec4 _1425 = floatBitsToUint(cbInstanceData._m0[_375 + 5u]);
    uint _1427 = _1425.x * 14u;
    uint _1428 = _1427 + 13u;
    float _1435 = _400 + (-1.0);
    float _1441 = (cbLight._m0[_1428].x * _1435) + 1.0;
    float _1442 = (cbLight._m0[_1428].y * _1435) + 1.0;
    float _1443 = (cbLight._m0[_1428].z * _1435) + 1.0;
    float _1444 = (cbLight._m0[_1428].w * _1435) + 1.0;
    uint _1445 = _1427 + 5u;
    float _1451 = isnan(1.0) ? _1442 : (isnan(_1442) ? 1.0 : min(_1442, 1.0));
    uint _1455 = _1427 + 4u;
    float _1465 = isnan(1.0) ? _1441 : (isnan(_1441) ? 1.0 : min(_1441, 1.0));
    uint _1469 = _1427 | 1u;
    float _1480 = dot(vec3(cbLight._m0[_1427].xyz), vec3(_246, _247, _248));
    float _1483 = dot(vec3(cbLight._m0[_1469].xyz), vec3(_246, _247, _248));
    float _3355 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
    float _3366 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
    float _1488 = (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * 0.3183098733425140380859375;
    float _1490 = (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * 0.3183098733425140380859375;
    float _1497 = ((cbLight._m0[_1445].x * _1451) * _1490) + (((cbLight._m0[_1455].x * _1419) * _1465) * _1488);
    float _1498 = ((_1451 * cbLight._m0[_1445].y) * _1490) + (((cbLight._m0[_1455].y * _1420) * _1465) * _1488);
    float _1499 = ((_1451 * cbLight._m0[_1445].z) * _1490) + (((cbLight._m0[_1455].z * _1421) * _1465) * _1488);
    uvec4 _1503 = floatBitsToUint(cbLight._m0[_1427 + 12u]);
    bool _1505 = _1503.x == 0u;
    float _1516;
    float _1518;
    float _1520;
    if (_1505)
    {
        _1516 = _1497;
        _1518 = _1498;
        _1520 = _1499;
    }
    else
    {
        uint _1524 = _1427 + 6u;
        float _1540 = (dot(vec3(cbLight._m0[_1427 + 2u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _1541 = _1540 * _1540;
        float _3377 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1543 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
        _1516 = (((cbLight._m0[_1524].x * 0.3183098733425140380859375) * _1542) * _1543) + _1497;
        _1518 = (((cbLight._m0[_1524].y * 0.3183098733425140380859375) * _1542) * _1543) + _1498;
        _1520 = (((cbLight._m0[_1524].z * 0.3183098733425140380859375) * _1542) * _1543) + _1499;
    }
    bool _1523 = _1503.y == 0u;
    float _1561;
    float _1563;
    float _1565;
    if (_1523)
    {
        _1561 = _1516;
        _1563 = _1518;
        _1565 = _1520;
    }
    else
    {
        uint _1669 = _1427 + 7u;
        float _1685 = (dot(vec3(cbLight._m0[_1427 + 3u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _1686 = _1685 * _1685;
        float _3393 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1688 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
        _1561 = (((cbLight._m0[_1669].x * 0.3183098733425140380859375) * _1687) * _1688) + _1516;
        _1563 = (((cbLight._m0[_1669].y * 0.3183098733425140380859375) * _1687) * _1688) + _1518;
        _1565 = (((cbLight._m0[_1669].z * 0.3183098733425140380859375) * _1687) * _1688) + _1520;
    }
    uint _1567 = _1427 + 8u;
    float _1573 = cbLight._m0[_1427].x + _326;
    float _1574 = cbLight._m0[_1427].y + _327;
    float _1575 = cbLight._m0[_1427].z + _328;
    float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
    float _1583 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1427].xyz));
    float _3409 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1586 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _1587 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _1588 = dot(vec3(cbLight._m0[_1427].xyz), vec3(_1573 * _1579, _1574 * _1579, _1575 * _1579));
    float _3431 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1599 = (exp2(log2(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1605 = (0.5 / ((_1586 + 9.9999999392252902907785028219223e-09) + _1587)) * _1586;
    float _3442 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1607 = (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * 0.31831014156341552734375;
    uint _1621 = _1427 + 9u;
    float _1627 = cbLight._m0[_1469].x + _326;
    float _1628 = cbLight._m0[_1469].y + _327;
    float _1629 = cbLight._m0[_1469].z + _328;
    float _1633 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
    float _1637 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1469].xyz));
    float _3453 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1640 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _1641 = dot(vec3(cbLight._m0[_1469].xyz), vec3(_1627 * _1633, _1628 * _1633, _1629 * _1633));
    float _3464 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1650 = (exp2(log2(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1654 = (0.5 / ((_1640 + 9.9999999392252902907785028219223e-09) + _1587)) * _1640;
    float _3475 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1656 = (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.31831014156341552734375;
    float _1666 = (((_1650 * cbLight._m0[_1621].x) * _1656) * _1451) + ((((cbLight._m0[_1567].x * _1419) * _1599) * _1607) * _1465);
    float _1667 = (((_1650 * cbLight._m0[_1621].y) * _1656) * _1451) + ((((cbLight._m0[_1567].y * _1420) * _1599) * _1607) * _1465);
    float _1668 = (((_1650 * cbLight._m0[_1621].z) * _1656) * _1451) + ((((cbLight._m0[_1567].z * _1421) * _1599) * _1607) * _1465);
    float _1730;
    float _1732;
    float _1734;
    if (_1505)
    {
        _1730 = _1666;
        _1732 = _1667;
        _1734 = _1668;
    }
    else
    {
        uint _1736 = _1427 + 10u;
        uint _1742 = _1427 + 2u;
        float _1748 = cbLight._m0[_1742].x + _326;
        float _1749 = cbLight._m0[_1742].y + _327;
        float _1750 = cbLight._m0[_1742].z + _328;
        float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
        float _1758 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1742].xyz));
        float _3486 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1761 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1762 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1748 * _1754, _1749 * _1754, _1750 * _1754));
        float _3497 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = (exp2(log2(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1775 = (0.5 / ((_1761 + 9.9999999392252902907785028219223e-09) + _1587)) * _1761;
        float _3508 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1777 = (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.31831014156341552734375;
        float _1778 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
        _1730 = (((_1771 * cbLight._m0[_1736].x) * _1777) * _1778) + _1666;
        _1732 = (((_1771 * cbLight._m0[_1736].y) * _1777) * _1778) + _1667;
        _1734 = (((_1771 * cbLight._m0[_1736].z) * _1777) * _1778) + _1668;
    }
    float _1813;
    float _1815;
    float _1817;
    if (_1523)
    {
        _1813 = _1730;
        _1815 = _1732;
        _1817 = _1734;
    }
    else
    {
        uint _1824 = _1427 + 11u;
        uint _1830 = _1427 + 3u;
        float _1836 = cbLight._m0[_1830].x + _326;
        float _1837 = cbLight._m0[_1830].y + _327;
        float _1838 = cbLight._m0[_1830].z + _328;
        float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
        float _1846 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1830].xyz));
        float _3524 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1849 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1850 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1836 * _1842, _1837 * _1842, _1838 * _1842));
        float _3535 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = (exp2(log2(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1863 = (0.5 / ((_1849 + 9.9999999392252902907785028219223e-09) + _1587)) * _1849;
        float _3546 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1865 = (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.31831014156341552734375;
        float _1866 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
        _1813 = (((_1859 * cbLight._m0[_1824].x) * _1865) * _1866) + _1730;
        _1815 = (((_1859 * cbLight._m0[_1824].y) * _1865) * _1866) + _1732;
        _1817 = (((_1859 * cbLight._m0[_1824].z) * _1865) * _1866) + _1734;
    }
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    if (_1425.y == 0u)
    {
        float _1941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1941;
        float _1943 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1941;
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1941;
        uvec4 _1956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1957 = _1956.x;
        uint _1968 = uint((float(_1956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _335) / _1957))) + floor(float(uint(cbSceneParam._m0[85u].x * _334) / _1957)));
        float _1978 = (log2(_1944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1979 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        uint _1982 = uint(isnan(14.0) ? _1979 : (isnan(_1979) ? 14.0 : min(_1979, 14.0)));
        uvec4 _1987 = texelFetch(g_lightClusterGridBuffer, int(((_1982 << 2u) + (_1968 << 6u)) >> 2u));
        uint _1988 = _1987.x;
        uint _1989 = _1956.z;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        float _2135;
        float _2137;
        if (((((1u << ((_1989 >> 4u) & 15u)) + 4294967295u) & _1988) == 0u) || ((_1989 & 240u) == 0u))
        {
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
            _2135 = 0.0;
            _2137 = 0.0;
        }
        else
        {
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2136;
            float _2138;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            uint _2284 = 0u;
            uint _2293;
            bool _2294;
            for (;;)
            {
                _2293 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2284 << 2u)) >> 2u)).x;
                _2294 = _2293 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2294)
                {
                    frontier_phi_61_pred = _2278;
                    frontier_phi_61_pred_1 = _2283;
                    frontier_phi_61_pred_2 = _2282;
                    frontier_phi_61_pred_3 = _2281;
                    frontier_phi_61_pred_4 = _2280;
                    frontier_phi_61_pred_5 = _2279;
                }
                else
                {
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    uint _2408;
                    _2402 = _2278;
                    _2403 = _2279;
                    _2404 = _2280;
                    _2405 = _2281;
                    _2406 = _2282;
                    _2407 = _2283;
                    _2408 = _2293;
                    float _2334;
                    float _2335;
                    float _2336;
                    float _2337;
                    float _2338;
                    float _2339;
                    for (;;)
                    {
                        uint _2412 = uint(findLSB(_2408)) + (_2284 << 5u);
                        uint _2409 = (_2408 + 4294967295u) & _2408;
                        uint _2414 = _2412 * 48u;
                        vec4 _2428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2414)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 3u)).x));
                        uint _2434 = (_2412 * 48u) + 4u;
                        vec4 _2447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2434)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 3u)).x));
                        uint _2453 = (_2412 * 48u) + 8u;
                        vec3 _2464 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2453)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 2u)).x));
                        float _2468 = _2428.x - _1942;
                        float _2469 = _2428.y - _1943;
                        float _2470 = _2428.z - _1944;
                        float _2471 = dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470));
                        float _2474 = inversesqrt(_2471);
                        float _2483 = 1.0 - (_2471 * _2428.w);
                        float _3572 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
                        float _2484 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
                        float _2485 = sqrt(_2471) * _2447.w;
                        float _2488 = 1.39999997615814208984375 / (_2485 + 1.39999997615814208984375);
                        float _2489 = _2488 * _2488;
                        float _2492 = ((1.0 - _2489) * dot(vec3(_356, _359, _362), vec3(_2474 * _2468, _2474 * _2469, _2474 * _2470))) + _2489;
                        float _2495 = _2485 * _2485;
                        float _2499 = ((isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0))) * _2484) / ((_2495 * 0.699999988079071044921875) + 1.0);
                        float _2503 = (-0.0) - _1942;
                        float _2504 = (-0.0) - _1943;
                        float _2505 = (-0.0) - _1944;
                        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
                        float _2513 = dot(vec3(_356, _359, _362), vec3(_2509 * _2503, _2509 * _2504, _2509 * _2505));
                        float _3588 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _3599 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                        float _2517 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
                        float _2521 = (0.5 / (((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) + 9.9999999392252902907785028219223e-09) + _2517)) * _2517;
                        float _3610 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
                        float _2530 = (((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * 3.1415927410125732421875) / ((_2495 * 2.1991131305694580078125) + 3.141590118408203125)) * _2484;
                        _2337 = (_2499 * _2447.x) + _2405;
                        _2338 = (_2499 * _2447.y) + _2406;
                        _2339 = (_2499 * _2447.z) + _2407;
                        _2334 = (_2530 * _2464.x) + _2402;
                        _2335 = (_2530 * _2464.y) + _2403;
                        _2336 = (_2530 * _2464.z) + _2404;
                        if (_2409 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2402 = _2334;
                            _2403 = _2335;
                            _2404 = _2336;
                            _2405 = _2337;
                            _2406 = _2338;
                            _2407 = _2339;
                            _2408 = _2409;
                        }
                    }
                    frontier_phi_61_pred = _2334;
                    frontier_phi_61_pred_1 = _2339;
                    frontier_phi_61_pred_2 = _2338;
                    frontier_phi_61_pred_3 = _2337;
                    frontier_phi_61_pred_4 = _2336;
                    frontier_phi_61_pred_5 = _2335;
                }
                _2128 = frontier_phi_61_pred;
                _2138 = frontier_phi_61_pred_1;
                _2136 = frontier_phi_61_pred_2;
                _2134 = frontier_phi_61_pred_3;
                _2132 = frontier_phi_61_pred_4;
                _2130 = frontier_phi_61_pred_5;
                uint _2285 = _2284 + 1u;
                if (_2285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2278 = _2128;
                    _2279 = _2130;
                    _2280 = _2132;
                    _2281 = _2134;
                    _2282 = _2136;
                    _2283 = _2138;
                    _2284 = _2285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
            _2135 = _2136;
            _2137 = _2138;
        }
        uvec4 _2141 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2142 = _2141.z;
        uint _2144 = (_2142 >> 8u) & 15u;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        if (((4294967295u << _2144) & _1988) == 0u)
        {
            _2249 = _2127;
            _2251 = _2129;
            _2253 = _2131;
            _2255 = _2133;
            _2257 = _2135;
            _2259 = _2137;
        }
        else
        {
            float _2274 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2144 < ((_2142 >> 12u) & 15u))
            {
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2385 = _2127;
                float _2386 = _2129;
                float _2387 = _2131;
                float _2388 = _2133;
                float _2389 = _2135;
                float _2390 = _2137;
                uint _2391 = _2144;
                uint _2400;
                bool _2401;
                for (;;)
                {
                    _2400 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2391 << 2u)) >> 2u)).x;
                    _2401 = _2400 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2401)
                    {
                        frontier_phi_67_pred = _2388;
                        frontier_phi_67_pred_1 = _2389;
                        frontier_phi_67_pred_2 = _2390;
                        frontier_phi_67_pred_3 = _2387;
                        frontier_phi_67_pred_4 = _2386;
                        frontier_phi_67_pred_5 = _2385;
                    }
                    else
                    {
                        float _2535;
                        float _2536;
                        float _2537;
                        float _2538;
                        float _2539;
                        float _2540;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2548 = _2385;
                        float _2549 = _2386;
                        float _2550 = _2387;
                        float _2551 = _2388;
                        float _2552 = _2389;
                        float _2553 = _2390;
                        uint _2554 = _2400;
                        uint _2555;
                        vec4 _2580;
                        float _2581;
                        vec4 _2596;
                        vec3 _2608;
                        vec4 _2624;
                        vec4 _2640;
                        float _2687;
                        bool _2688;
                        for (;;)
                        {
                            uint _2565 = ((_2391 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2554));
                            _2555 = (_2554 + 4294967295u) & _2554;
                            uint _2567 = _2565 * 40u;
                            _2580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 3u)).x));
                            _2581 = _2580.w;
                            uint _2583 = (_2565 * 40u) + 4u;
                            _2596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 3u)).x));
                            uint _2598 = (_2565 * 40u) + 8u;
                            _2608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x));
                            uint _2611 = (_2565 * 40u) + 16u;
                            _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2627 = (_2565 * 40u) + 20u;
                            _2640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 3u)).x));
                            uint _2643 = (_2565 * 40u) + 24u;
                            vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 3u)).x));
                            uint _2662 = (_2565 * 40u) + 28u;
                            vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 3u)).x));
                            _2687 = fma(_1944, _2675.z, fma(_1943, _2675.y, _2675.x * _1942)) + _2675.w;
                            _2688 = !((fma(_1944, _2656.z, fma(_1943, _2656.y, _2656.x * _1942)) + _2656.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2688)
                            {
                                float _2715 = _2580.x - _1942;
                                float _2716 = _2580.y - _1943;
                                float _2717 = _2580.z - _1944;
                                float _2718 = dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717));
                                float _2721 = inversesqrt(_2718);
                                float _2722 = _2721 * _2715;
                                float _2723 = _2721 * _2716;
                                float _2724 = _2721 * _2717;
                                float _2728 = 1.0 - (_2718 / (_2581 * _2581));
                                float _3621 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                                float _2729 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
                                float _2733 = sqrt(_2718) * _2596.w;
                                float _2735 = 1.39999997615814208984375 / (_2733 + 1.39999997615814208984375);
                                float _2736 = _2735 * _2735;
                                float _2737 = 1.0 - _2736;
                                float _2739 = (_2737 * dot(vec3(_2722, _2723, _2724), vec3(_356, _359, _362))) + _2736;
                                float _2742 = _2733 * _2733;
                                float _2746 = (fma(_1944, _2624.z, fma(_1943, _2624.y, _2624.x * _1942)) + _2624.w) / _2687;
                                float _2747 = (fma(_1944, _2640.z, fma(_1943, _2640.y, _2640.x * _1942)) + _2640.w) / _2687;
                                float _2751 = 1.0 - dot(vec2(_2746, _2747), vec2(_2746, _2747));
                                float _3637 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                                float _2752 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
                                float _2753 = _2752 * (((isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))) * _2729) / ((_2742 * 0.699999988079071044921875) + 1.0));
                                float _2763 = dot(vec3(_356, _359, _362), vec3((-0.0) - (_1942 * _2274), (-0.0) - (_1943 * _2274), (-0.0) - (_1944 * _2274)));
                                float _3648 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                                float _2771 = (_2737 * dot(vec3(_356, _359, _362), vec3(_2722, _2723, _2724))) + _2736;
                                float _3659 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                                float _2772 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
                                float _2776 = (0.5 / (((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) + 9.9999999392252902907785028219223e-09) + _2772)) * _2772;
                                float _3670 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2783 = (_2752 * _2729) * (((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 3.1415927410125732421875) / ((_2742 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2783 * _2608.x;
                                frontier_phi_73_pred_1 = _2783 * _2608.y;
                                frontier_phi_73_pred_2 = _2753 * _2596.z;
                                frontier_phi_73_pred_3 = _2753 * _2596.y;
                                frontier_phi_73_pred_4 = _2753 * _2596.x;
                                frontier_phi_73_pred_5 = _2783 * _2608.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2787 = frontier_phi_73_pred;
                            _2788 = frontier_phi_73_pred_1;
                            _2792 = frontier_phi_73_pred_2;
                            _2791 = frontier_phi_73_pred_3;
                            _2790 = frontier_phi_73_pred_4;
                            _2789 = frontier_phi_73_pred_5;
                            _2538 = _2790 + _2551;
                            _2539 = _2791 + _2552;
                            _2540 = _2792 + _2553;
                            _2535 = _2787 + _2548;
                            _2536 = _2788 + _2549;
                            _2537 = _2789 + _2550;
                            if (_2555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2540;
                                _2554 = _2555;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2538;
                        frontier_phi_67_pred_1 = _2539;
                        frontier_phi_67_pred_2 = _2540;
                        frontier_phi_67_pred_3 = _2537;
                        frontier_phi_67_pred_4 = _2536;
                        frontier_phi_67_pred_5 = _2535;
                    }
                    _2256 = frontier_phi_67_pred;
                    _2258 = frontier_phi_67_pred_1;
                    _2260 = frontier_phi_67_pred_2;
                    _2254 = frontier_phi_67_pred_3;
                    _2252 = frontier_phi_67_pred_4;
                    _2250 = frontier_phi_67_pred_5;
                    uint _2392 = _2391 + 1u;
                    if (_2392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2385 = _2250;
                        _2386 = _2252;
                        _2387 = _2254;
                        _2388 = _2256;
                        _2389 = _2258;
                        _2390 = _2260;
                        _2391 = _2392;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2258;
                frontier_phi_55_56_ladder_1 = _2260;
                frontier_phi_55_56_ladder_2 = _2256;
                frontier_phi_55_56_ladder_3 = _2254;
                frontier_phi_55_56_ladder_4 = _2252;
                frontier_phi_55_56_ladder_5 = _2250;
            }
            else
            {
                frontier_phi_55_56_ladder = _2135;
                frontier_phi_55_56_ladder_1 = _2137;
                frontier_phi_55_56_ladder_2 = _2133;
                frontier_phi_55_56_ladder_3 = _2131;
                frontier_phi_55_56_ladder_4 = _2129;
                frontier_phi_55_56_ladder_5 = _2127;
            }
            _2249 = frontier_phi_55_56_ladder_5;
            _2251 = frontier_phi_55_56_ladder_4;
            _2253 = frontier_phi_55_56_ladder_3;
            _2255 = frontier_phi_55_56_ladder_2;
            _2257 = frontier_phi_55_56_ladder;
            _2259 = frontier_phi_55_56_ladder_1;
        }
        float _2264 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
        _2001 = (_2264 * _2255) + _1561;
        _2003 = (_2264 * _2257) + _1563;
        _2005 = (_2264 * _2259) + _1565;
        _2007 = ((_2249 * 0.039999999105930328369140625) * _2264) + _1813;
        _2009 = ((_2251 * 0.039999999105930328369140625) * _2264) + _1815;
        _2011 = ((_2253 * 0.039999999105930328369140625) * _2264) + _1817;
    }
    else
    {
        _2001 = _1561;
        _2003 = _1563;
        _2005 = _1565;
        _2007 = _1813;
        _2009 = _1815;
        _2011 = _1817;
    }
    uint _2017 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _2026 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _233.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2017].x;
    float _2030 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _233.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2017].y;
    float _2034 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _233.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2017].z;
    float _3686 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3697 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3708 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _2051 = (((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_2001 + ((isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0))) * _400))) + ((_2007 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1179)) * cbPerFrame._m0[3u].x)) + _2026;
    float _2053 = (_2030 + ((_2009 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _1179)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_2003 + ((isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))) * _400)));
    float _2055 = (_2034 + ((_2011 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _1179)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_2005 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _400)));
    float _3734 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2068 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    uint _2069 = _375 + 6u;
    float _2077 = _334 / cbSceneParam._m0[86u].x;
    float _2078 = _335 / cbSceneParam._m0[86u].y;
    vec4 _2092 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2077, _2078, (log2((isnan(cbSceneParam._m0[77u].w) ? _268 : (isnan(_268) ? cbSceneParam._m0[77u].w : min(_268, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2094 = _2092.x;
    float _2095 = _2092.y;
    float _2096 = _2092.z;
    float _2097 = _2092.w;
    float _2190;
    float _2192;
    float _2194;
    float _2196;
    if (_268 > cbSceneParam._m0[78u].w)
    {
        float _2152 = isnan(_268) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _268 : min(cbSceneParam._m0[80u].w, _268));
        float _2153 = _2152 / _268;
        float _2164 = _2153 * _319;
        float _2165 = _320 * _2153;
        float _2166 = (-0.0) - _2165;
        float _2168 = _2153 * _321;
        float _2170 = (cbSceneParam._m0[77u].w * _2166) / _2152;
        float _2171 = _2170 + cbSceneParam._m0[79u].w;
        float _2172 = cbSceneParam._m0[79u].w - _2165;
        float _2178 = sqrt(((_2164 * _2164) + (_2165 * _2165)) + (_2168 * _2168));
        float _2181 = (1.0 - (cbSceneParam._m0[77u].w / _2152)) * _2178;
        float _2186 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2188 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2347;
        if (abs((_2166 - _2170) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2347 = ((((_2171 > 0.0) ? exp2(_2186 * _2171) : (2.0 - exp2(_2188 * _2171))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2181;
        }
        else
        {
            float _2307 = 1.0 / cbSceneParam._m0[80u].x;
            float _2308 = isnan(_2172) ? _2171 : (isnan(_2171) ? _2172 : max(_2171, _2172));
            float _2309 = isnan(_2172) ? _2171 : (isnan(_2171) ? _2172 : min(_2171, _2172));
            float _2318 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : min(_2308, 0.0));
            float _2319 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : min(_2309, 0.0));
            _2347 = ((abs(_2178 / _2166) * cbSceneParam._m0[80u].y) * ((((_2318 - _2319) * 2.0) - ((exp2(_2186 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)))) - exp2(_2186 * (isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))))) * _2307)) - ((exp2(_2188 * _2318) - exp2(_2188 * _2319)) * _2307))) + (_2181 * cbSceneParam._m0[80u].z);
        }
        vec4 _2349 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2077, _2078, 1.0), 0.0);
        float _2358 = exp2((_2347 * (-1.44269502162933349609375)) * (1.0 - _2349.w));
        float _2359 = log2(_2358);
        float _2375 = log2(_2097);
        _2190 = (exp2(_2375 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2359 * cbSceneParam._m0[78u].x)) * _2349.x) / cbSceneParam._m0[78u].x)) + _2094;
        _2192 = (exp2(_2375 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2359 * cbSceneParam._m0[78u].y)) * _2349.y) / cbSceneParam._m0[78u].y)) + _2095;
        _2194 = (exp2(_2375 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2359 * cbSceneParam._m0[78u].z)) * _2349.z) / cbSceneParam._m0[78u].z)) + _2096;
        _2196 = _2358 * _2097;
    }
    else
    {
        _2190 = _2094;
        _2192 = _2095;
        _2194 = _2096;
        _2196 = _2097;
    }
    float _2207 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2208 = _2207 == 3.0;
    float _2210 = log2(_2196);
    float _2214 = exp2(_2210 * cbSceneParam._m0[78u].x);
    float _2215 = exp2(_2210 * cbSceneParam._m0[78u].y);
    float _2216 = exp2(_2210 * cbSceneParam._m0[78u].z);
    float _2217 = _2214 * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    float _2218 = _2215 * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)));
    float _2219 = _2216 * (isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)));
    float _2228 = (_2207 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2228 * (_2208 ? _2217 : (_2217 + (cbSceneParam._m0[72u].w * _2190)));
    SV_Target.y = _2228 * (_2208 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2192)));
    SV_Target.z = _2228 * (_2208 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2194)));
    SV_Target.w = cbInstanceData._m0[_2069].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2026) * _2068) * _2214) * _2228;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2030) * _2068) * _2215) * _2228;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2034) * _2068) * _2216) * _2228;
    SV_Target_1.w = cbInstanceData._m0[_2069].w;
}


