#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _761;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _188 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _233 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _246 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2939 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _248 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
    float _256 = (((_248 * _248) * (3.0 - (_248 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _264 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _265 = _264 * _167;
    float _266 = _264 * _168;
    float _267 = _264 * _169;
    float _2950 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2961 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2972 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _286 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _327 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _337 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _327);
    float _338 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _327);
    float _339 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _327);
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _344 = _337 * _343;
    float _345 = _338 * _343;
    float _346 = _339 * _343;
    float _352 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _353 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _374 = fma(_267, cbSceneParam._m0[5u].z, fma(_266, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _265));
    float _377 = fma(_267, cbSceneParam._m0[6u].z, fma(_266, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _265));
    float _380 = fma(_267, cbSceneParam._m0[7u].z, fma(_266, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _265));
    uint _393 = uint(roundEven(NORMAL.w)) * 13u;
    uint _394 = _393 + 9u;
    uint _395 = _394 + uint(cbMatDynParam._m0[0u].w);
    float _401 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0)))) * cbInstanceData._m0[_395].x;
    float _402 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_395].y;
    float _403 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_395].z;
    float _2983 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
    float _2994 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
    float _3005 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
    vec4 _415 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _352, cbSceneParam._m0[86u].y * _353));
    float _418 = _415.x * TEXCOORD.z;
    float _419 = dot(vec3(_265, _266, _267), vec3(_344, _345, _346));
    float _422 = _419 * 2.0;
    float _426 = (_422 * _265) - _344;
    float _427 = (_422 * _266) - _345;
    float _428 = (_422 * _267) - _346;
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _760;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _485 = fma(_458, cbModelParam._m0[26u].z, fma(_454, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _450));
        float _489 = fma(_458, cbModelParam._m0[27u].z, fma(_454, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _450));
        float _493 = fma(_458, cbModelParam._m0[28u].z, fma(_454, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _450));
        float _518 = _450 + _265;
        float _519 = _454 + _266;
        float _520 = _458 + _267;
        float _530 = fma(_520, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _518)) - _485;
        float _531 = fma(_520, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _518)) - _489;
        float _532 = fma(_520, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _518)) - _493;
        float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
        float _549 = ((_536 * _530) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_485 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _550 = ((_536 * _531) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_489 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _551 = ((_536 * _532) / cbModelParam._m0[34u].z) + ((((((_493 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        float _588 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_554.x + (-0.5));
        float _590 = _588 * (_554.y + (-0.5));
        float _591 = _588 * (_554.z + (-0.5));
        float _598 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_561.x + (-0.5));
        float _600 = _598 * (_561.y + (-0.5));
        float _601 = _598 * (_561.z + (-0.5));
        float _608 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_568.x + (-0.5));
        float _610 = _608 * (_568.y + (-0.5));
        float _611 = _608 * (_568.z + (-0.5));
        float _618 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_575.x + (-0.5));
        float _620 = _618 * (_575.y + (-0.5));
        float _621 = _618 * (_575.z + (-0.5));
        float _622 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _623 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _624 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _625 = _589 * 0.5;
        float _626 = _599 * 0.5;
        float _627 = _609 * 0.5;
        float _628 = dot(vec3(_625, _626, _627), vec3(_625, _626, _627));
        float _633 = (_628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_628);
        float _642 = (dot(vec3(_265, _266, _267), vec3(_633 * _625, _633 * _626, _633 * _627)) + 1.0) * 0.5;
        float _3031 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _652 = sqrt(((_626 * _626) + (_625 * _625)) + (_627 * _627)) / (_622 + 9.9999997473787516355514526367188e-06);
        float _3042 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
        float _654 = _653 * 2.0;
        float _658 = (1.0 - _653) / (_653 + 1.0);
        float _3053 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _668 = ((((1.0 - _659) * (_654 + 2.0)) * exp2(log2(isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0))) * (_654 + 1.0))) + _659) * _622;
        float _669 = _590 * 0.5;
        float _670 = _600 * 0.5;
        float _671 = _610 * 0.5;
        float _672 = dot(vec3(_669, _670, _671), vec3(_669, _670, _671));
        float _677 = (_672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_672);
        float _685 = (dot(vec3(_265, _266, _267), vec3(_677 * _669, _677 * _670, _677 * _671)) + 1.0) * 0.5;
        float _3064 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _694 = sqrt(((_670 * _670) + (_669 * _669)) + (_671 * _671)) / (_623 + 9.9999997473787516355514526367188e-06);
        float _3075 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _696 = _695 * 2.0;
        float _700 = (1.0 - _695) / (_695 + 1.0);
        float _3086 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _710 = ((((1.0 - _701) * (_696 + 2.0)) * exp2(log2(isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0))) * (_696 + 1.0))) + _701) * _623;
        float _711 = _591 * 0.5;
        float _712 = _601 * 0.5;
        float _713 = _611 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _727 = (dot(vec3(_265, _266, _267), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _736 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_624 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3119 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_738 + 1.0))) + _743) * _624;
        _760 = _591;
        _762 = _590;
        _763 = _589;
        _764 = _601;
        _765 = _600;
        _766 = _599;
        _767 = _611;
        _768 = _610;
        _769 = _609;
        _770 = _624;
        _771 = _623;
        _772 = _622;
        _773 = cbModelParam._m0[36u].z * (isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0)));
        _774 = cbModelParam._m0[36u].z * (isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0)));
        _775 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
    }
    else
    {
        _760 = _761;
        _762 = _761;
        _763 = _761;
        _764 = _761;
        _765 = _761;
        _766 = _761;
        _767 = _761;
        _768 = _761;
        _769 = _761;
        _770 = _761;
        _771 = _761;
        _772 = _761;
        _773 = 0.0;
        _774 = 0.0;
        _775 = 0.0;
    }
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _801 = fma(_458, cbModelParam._m0[30u].z, fma(_454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _450));
        float _805 = fma(_458, cbModelParam._m0[31u].z, fma(_454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _450));
        float _809 = fma(_458, cbModelParam._m0[32u].z, fma(_454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _450));
        float _832 = _450 + _265;
        float _833 = _454 + _266;
        float _834 = _458 + _267;
        float _844 = fma(_834, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832)) - _801;
        float _845 = fma(_834, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832)) - _805;
        float _846 = fma(_834, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832)) - _809;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_801 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_805 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[35u].z) + ((((((_809 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _900 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_867.x + (-0.5));
        float _902 = _900 * (_867.y + (-0.5));
        float _903 = _900 * (_867.z + (-0.5));
        float _910 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_874.x + (-0.5));
        float _912 = _910 * (_874.y + (-0.5));
        float _913 = _910 * (_874.z + (-0.5));
        float _920 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_881.x + (-0.5));
        float _922 = _920 * (_881.y + (-0.5));
        float _923 = _920 * (_881.z + (-0.5));
        float _930 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_888.x + (-0.5));
        float _932 = _930 * (_888.y + (-0.5));
        float _933 = _930 * (_888.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_265, _266, _267), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3160 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3171 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3182 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * (_964 + 1.0))) + _969) * _934;
        float _979 = _902 * 0.5;
        float _980 = _912 * 0.5;
        float _981 = _922 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_265, _266, _267), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3215 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_1006 + 1.0))) + _1011) * _935;
        float _1021 = _903 * 0.5;
        float _1022 = _913 * 0.5;
        float _1023 = _923 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_265, _266, _267), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3248 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_1048 + 1.0))) + _1053) * _936;
        _1070 = _903;
        _1071 = _902;
        _1072 = _901;
        _1073 = _913;
        _1074 = _912;
        _1075 = _911;
        _1076 = _923;
        _1077 = _922;
        _1078 = _921;
        _1079 = _936;
        _1080 = _935;
        _1081 = _934;
        _1082 = cbModelParam._m0[36u].w * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1083 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1084 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _761;
        _1071 = _761;
        _1072 = _761;
        _1073 = _761;
        _1074 = _761;
        _1075 = _761;
        _1076 = _761;
        _1077 = _761;
        _1078 = _761;
        _1079 = _761;
        _1080 = _761;
        _1081 = _761;
        _1082 = 0.0;
        _1083 = 0.0;
        _1084 = 0.0;
    }
    float _1094 = (cbModelParam._m0[1u].x * (_1082 - _773)) + _773;
    float _1095 = (cbModelParam._m0[1u].x * (_1083 - _774)) + _774;
    float _1096 = (cbModelParam._m0[1u].x * (_1084 - _775)) + _775;
    float _1117 = fma(_1096, cbSceneParam._m0[89u].z, fma(_1095, cbSceneParam._m0[89u].y, _1094 * cbSceneParam._m0[89u].x));
    float _1120 = fma(_1096, cbSceneParam._m0[90u].z, fma(_1095, cbSceneParam._m0[90u].y, _1094 * cbSceneParam._m0[90u].x));
    float _1123 = fma(_1096, cbSceneParam._m0[91u].z, fma(_1095, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1094));
    float _1138 = _426 * 0.5;
    float _1139 = _427 * 0.5;
    float _1140 = _428 * 0.5;
    float _1141 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_1072, _1075, _1078, _1081));
    float _1144 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_1071, _1074, _1077, _1080));
    float _1147 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_1070, _1073, _1076, _1079));
    float _1181;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1154 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_760, _764, _767, _770));
        float _1158 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_762, _765, _768, _771));
        float _1162 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_763, _766, _769, _772));
        float _1169 = dot(vec4(cbModelParam._m0[39u]), vec4(_1138, _1139, _1140, 1.0));
        _1181 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1169) ? 0.0 : (isnan(0.0) ? _1169 : max(0.0, _1169))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1181 = 1.0;
    }
    float _1192;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1183 = dot(vec4(cbModelParam._m0[40u]), vec4(_1138, _1139, _1140, 1.0));
        _1192 = dot(vec3(isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)), isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1183) ? 0.0 : (isnan(0.0) ? _1183 : max(0.0, _1183))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1192 = 1.0;
    }
    float _1196 = (_1192 * cbModelParam._m0[1u].x) + (_1181 * (1.0 - cbModelParam._m0[1u].x));
    float _1205 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1286;
    float _1288;
    float _1290;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1253 = fma(_458, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _450)) + cbModelParam._m0[13u].w;
        float _1257 = fma(_458, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _450)) + cbModelParam._m0[14u].w;
        float _1261 = fma(_458, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _450)) + cbModelParam._m0[15u].w;
        float _1264 = fma(_428, cbModelParam._m0[13u].z, fma(_427, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _426));
        float _1267 = fma(_428, cbModelParam._m0[14u].z, fma(_427, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _426));
        float _1270 = fma(_428, cbModelParam._m0[15u].z, fma(_427, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _426));
        float _1296;
        if (_1264 > 0.0)
        {
            _1296 = abs((1.0 - _1253) / _1264);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1253 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1296 = frontier_phi_14_12_ladder;
        }
        float _1522;
        if (_1267 > 0.0)
        {
            _1522 = abs((1.0 - _1257) / _1267);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1257 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1522 = frontier_phi_23_19_ladder;
        }
        float _1714;
        if (_1270 > 0.0)
        {
            _1714 = abs((1.0 - _1261) / _1270);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1261 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1714 = frontier_phi_35_30_ladder;
        }
        float _1716 = isnan(_1522) ? _1296 : (isnan(_1296) ? _1522 : min(_1296, _1522));
        float _1717 = isnan(_1714) ? _1716 : (isnan(_1716) ? _1714 : min(_1716, _1714));
        float _1721 = (_1717 * _1264) + _1253;
        float _1722 = (_1717 * _1267) + _1257;
        float _1723 = (_1717 * _1270) + _1261;
        float _1724 = _1717 * 9.9999997473787516355514526367188e-05;
        float _1726 = (-1.0) - _1724;
        float _1728 = _1724 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1723 > _1728) || ((_1723 < _1726) || ((_1722 > _1728) || ((_1722 < _1726) || ((_1721 < _1726) || (_1721 > _1728))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1820 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1723, cbModelParam._m0[9u].z, fma(_1722, cbModelParam._m0[9u].y, _1721 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1723, cbModelParam._m0[10u].z, fma(_1722, cbModelParam._m0[10u].y, _1721 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1723, cbModelParam._m0[11u].z, fma(_1722, cbModelParam._m0[11u].y, _1721 * cbModelParam._m0[11u].x))), _1205);
            frontier_phi_13_35_ladder = _1820.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1820.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1820.x * cbModelParam._m0[1u].y;
        }
        _1286 = frontier_phi_13_35_ladder_2;
        _1288 = frontier_phi_13_35_ladder_1;
        _1290 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_426, _427, _428), _1205);
        _1286 = _1274.x * cbModelParam._m0[1u].y;
        _1288 = _1274.y * cbModelParam._m0[1u].y;
        _1290 = _1274.z * cbModelParam._m0[1u].y;
    }
    float _1293 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1349 = fma(_458, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _450)) + cbModelParam._m0[21u].w;
        float _1353 = fma(_458, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _450)) + cbModelParam._m0[22u].w;
        float _1357 = fma(_458, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _450)) + cbModelParam._m0[23u].w;
        float _1360 = fma(_428, cbModelParam._m0[21u].z, fma(_427, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _426));
        float _1363 = fma(_428, cbModelParam._m0[22u].z, fma(_427, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _426));
        float _1366 = fma(_428, cbModelParam._m0[23u].z, fma(_427, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _426));
        float _1527;
        if (_1360 > 0.0)
        {
            _1527 = abs((1.0 - _1349) / _1360);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1349 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1527 = frontier_phi_25_21_ladder;
        }
        float _1741;
        if (_1363 > 0.0)
        {
            _1741 = abs((1.0 - _1353) / _1363);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1353 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1741 = frontier_phi_37_32_ladder;
        }
        float _1892;
        if (_1366 > 0.0)
        {
            _1892 = abs((1.0 - _1357) / _1366);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1357 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1892 = frontier_phi_46_43_ladder;
        }
        float _1894 = isnan(_1741) ? _1527 : (isnan(_1527) ? _1741 : min(_1527, _1741));
        float _1895 = isnan(_1892) ? _1894 : (isnan(_1894) ? _1892 : min(_1894, _1892));
        float _1899 = (_1895 * _1360) + _1349;
        float _1900 = (_1895 * _1363) + _1353;
        float _1901 = (_1895 * _1366) + _1357;
        float _1902 = _1895 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1902;
        float _1905 = _1902 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1901 > _1905) || ((_1901 < _1903) || ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 < _1903) || (_1899 > _1905))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1901, cbModelParam._m0[17u].z, fma(_1900, cbModelParam._m0[17u].y, _1899 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1901, cbModelParam._m0[18u].z, fma(_1900, cbModelParam._m0[18u].y, _1899 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1901, cbModelParam._m0[19u].z, fma(_1900, cbModelParam._m0[19u].y, _1899 * cbModelParam._m0[19u].x))), _1293);
            frontier_phi_22_46_ladder = _2141.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2141.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2141.x * cbModelParam._m0[1u].z;
        }
        _1385 = frontier_phi_22_46_ladder_2;
        _1387 = frontier_phi_22_46_ladder_1;
        _1389 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_426, _427, _428), _1293);
        _1385 = _1369.x * cbModelParam._m0[1u].z;
        _1387 = _1369.y * cbModelParam._m0[1u].z;
        _1389 = _1369.z * cbModelParam._m0[1u].z;
    }
    float _1401 = _418 * 0.01200000010430812835693359375;
    float _1403 = _1401 * ((cbModelParam._m0[1u].w * (_1385 - _1286)) + _1286);
    float _1404 = _1401 * ((cbModelParam._m0[1u].w * (_1387 - _1288)) + _1288);
    float _1405 = _1401 * ((cbModelParam._m0[1u].w * (_1389 - _1290)) + _1290);
    float _1408 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, _1403 * cbSceneParam._m0[91u].x));
    vec4 _1422 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_352, _353));
    float _1424 = _1422.w;
    float _1436 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1424);
    float _1437 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1424);
    float _1438 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1424);
    uvec4 _1442 = floatBitsToUint(cbInstanceData._m0[_393 + 5u]);
    uint _1444 = _1442.x * 14u;
    uint _1445 = _1444 + 13u;
    float _1452 = _418 + (-1.0);
    float _1457 = (cbLight._m0[_1445].x * _1452) + 1.0;
    float _1458 = (cbLight._m0[_1445].y * _1452) + 1.0;
    float _1459 = (cbLight._m0[_1445].z * _1452) + 1.0;
    float _1460 = (cbLight._m0[_1445].w * _1452) + 1.0;
    uint _1461 = _1444 + 5u;
    float _1467 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
    uint _1471 = _1444 + 4u;
    float _1481 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
    uint _1485 = _1444 | 1u;
    float _1496 = dot(vec3(cbLight._m0[_1444].xyz), vec3(_265, _266, _267));
    float _1499 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_265, _266, _267));
    float _3384 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    float _3395 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
    float _1504 = (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * 0.3183098733425140380859375;
    float _1506 = (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * 0.3183098733425140380859375;
    float _1513 = ((cbLight._m0[_1461].x * _1467) * _1506) + (((cbLight._m0[_1471].x * _1436) * _1481) * _1504);
    float _1514 = ((_1467 * cbLight._m0[_1461].y) * _1506) + (((cbLight._m0[_1471].y * _1437) * _1481) * _1504);
    float _1515 = ((_1467 * cbLight._m0[_1461].z) * _1506) + (((cbLight._m0[_1471].z * _1438) * _1481) * _1504);
    uvec4 _1519 = floatBitsToUint(cbLight._m0[_1444 + 12u]);
    bool _1521 = _1519.x == 0u;
    float _1532;
    float _1534;
    float _1536;
    if (_1521)
    {
        _1532 = _1513;
        _1534 = _1514;
        _1536 = _1515;
    }
    else
    {
        uint _1540 = _1444 + 6u;
        float _1556 = (dot(vec3(cbLight._m0[_1444 + 2u].xyz), vec3(_265, _266, _267)) * 0.5) + 0.5;
        float _1557 = _1556 * _1556;
        float _3406 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1559 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1532 = (((cbLight._m0[_1540].x * 0.3183098733425140380859375) * _1558) * _1559) + _1513;
        _1534 = (((cbLight._m0[_1540].y * 0.3183098733425140380859375) * _1558) * _1559) + _1514;
        _1536 = (((cbLight._m0[_1540].z * 0.3183098733425140380859375) * _1558) * _1559) + _1515;
    }
    bool _1539 = _1519.y == 0u;
    float _1577;
    float _1579;
    float _1581;
    if (_1539)
    {
        _1577 = _1532;
        _1579 = _1534;
        _1581 = _1536;
    }
    else
    {
        uint _1685 = _1444 + 7u;
        float _1701 = (dot(vec3(cbLight._m0[_1444 + 3u].xyz), vec3(_265, _266, _267)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3422 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1704 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
        _1577 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1532;
        _1579 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1534;
        _1581 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1536;
    }
    uint _1583 = _1444 + 8u;
    float _1589 = cbLight._m0[_1444].x + _344;
    float _1590 = cbLight._m0[_1444].y + _345;
    float _1591 = cbLight._m0[_1444].z + _346;
    float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
    float _1599 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1444].xyz));
    float _3438 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1602 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _1603 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _1604 = dot(vec3(cbLight._m0[_1444].xyz), vec3(_1589 * _1595, _1590 * _1595, _1591 * _1595));
    float _3460 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1615 = (exp2(log2(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1621 = (0.5 / ((_1602 + 9.9999999392252902907785028219223e-09) + _1603)) * _1602;
    float _3471 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1623 = (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * 0.31831014156341552734375;
    uint _1637 = _1444 + 9u;
    float _1643 = cbLight._m0[_1485].x + _344;
    float _1644 = cbLight._m0[_1485].y + _345;
    float _1645 = cbLight._m0[_1485].z + _346;
    float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
    float _1653 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1485].xyz));
    float _3482 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1656 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _1657 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_1643 * _1649, _1644 * _1649, _1645 * _1649));
    float _3493 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1666 = (exp2(log2(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1670 = (0.5 / ((_1656 + 9.9999999392252902907785028219223e-09) + _1603)) * _1656;
    float _3504 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1672 = (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.31831014156341552734375;
    float _1682 = (((_1666 * cbLight._m0[_1637].x) * _1672) * _1467) + ((((cbLight._m0[_1583].x * _1436) * _1615) * _1623) * _1481);
    float _1683 = (((_1666 * cbLight._m0[_1637].y) * _1672) * _1467) + ((((cbLight._m0[_1583].y * _1437) * _1615) * _1623) * _1481);
    float _1684 = (((_1666 * cbLight._m0[_1637].z) * _1672) * _1467) + ((((cbLight._m0[_1583].z * _1438) * _1615) * _1623) * _1481);
    float _1746;
    float _1748;
    float _1750;
    if (_1521)
    {
        _1746 = _1682;
        _1748 = _1683;
        _1750 = _1684;
    }
    else
    {
        uint _1752 = _1444 + 10u;
        uint _1758 = _1444 + 2u;
        float _1764 = cbLight._m0[_1758].x + _344;
        float _1765 = cbLight._m0[_1758].y + _345;
        float _1766 = cbLight._m0[_1758].z + _346;
        float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
        float _1774 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1758].xyz));
        float _3515 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1777 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1778 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1764 * _1770, _1765 * _1770, _1766 * _1770));
        float _3526 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = (exp2(log2(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1791 = (0.5 / ((_1777 + 9.9999999392252902907785028219223e-09) + _1603)) * _1777;
        float _3537 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1793 = (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.31831014156341552734375;
        float _1794 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1746 = (((_1787 * cbLight._m0[_1752].x) * _1793) * _1794) + _1682;
        _1748 = (((_1787 * cbLight._m0[_1752].y) * _1793) * _1794) + _1683;
        _1750 = (((_1787 * cbLight._m0[_1752].z) * _1793) * _1794) + _1684;
    }
    float _1829;
    float _1831;
    float _1833;
    if (_1539)
    {
        _1829 = _1746;
        _1831 = _1748;
        _1833 = _1750;
    }
    else
    {
        uint _1840 = _1444 + 11u;
        uint _1846 = _1444 + 3u;
        float _1852 = cbLight._m0[_1846].x + _344;
        float _1853 = cbLight._m0[_1846].y + _345;
        float _1854 = cbLight._m0[_1846].z + _346;
        float _1858 = inversesqrt(dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854)));
        float _1862 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1846].xyz));
        float _3553 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1865 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1866 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_1852 * _1858, _1853 * _1858, _1854 * _1858));
        float _3564 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1875 = (exp2(log2(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1879 = (0.5 / ((_1865 + 9.9999999392252902907785028219223e-09) + _1603)) * _1865;
        float _3575 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1881 = (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.31831014156341552734375;
        float _1882 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
        _1829 = (((_1875 * cbLight._m0[_1840].x) * _1881) * _1882) + _1746;
        _1831 = (((_1875 * cbLight._m0[_1840].y) * _1881) * _1882) + _1748;
        _1833 = (((_1875 * cbLight._m0[_1840].z) * _1881) * _1882) + _1750;
    }
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    if (_1442.y == 0u)
    {
        float _1957 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1957;
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1957;
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1957;
        uvec4 _1972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1973 = _1972.x;
        uint _1984 = uint((float(_1972.y) * floor(float(uint(cbSceneParam._m0[85u].y * _353) / _1973))) + floor(float(uint(cbSceneParam._m0[85u].x * _352) / _1973)));
        float _1994 = (log2(_1960 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1995 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        uint _1998 = uint(isnan(14.0) ? _1995 : (isnan(_1995) ? 14.0 : min(_1995, 14.0)));
        uvec4 _2003 = texelFetch(g_lightClusterGridBuffer, int(((_1998 << 2u) + (_1984 << 6u)) >> 2u));
        uint _2004 = _2003.x;
        uint _2005 = _1972.z;
        float _2146;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        if (((((1u << ((_2005 >> 4u) & 15u)) + 4294967295u) & _2004) == 0u) || ((_2005 & 240u) == 0u))
        {
            _2146 = 0.0;
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
        }
        else
        {
            float _2147;
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            uint _2302 = 0u;
            uint _2311;
            bool _2312;
            for (;;)
            {
                _2311 = texelFetch(g_lightClassification, int((((_1998 << 5u) + (_1984 << 9u)) + (_2302 << 2u)) >> 2u)).x;
                _2312 = _2311 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2312)
                {
                    frontier_phi_61_pred = _2296;
                    frontier_phi_61_pred_1 = _2301;
                    frontier_phi_61_pred_2 = _2300;
                    frontier_phi_61_pred_3 = _2299;
                    frontier_phi_61_pred_4 = _2298;
                    frontier_phi_61_pred_5 = _2297;
                }
                else
                {
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    uint _2426;
                    _2420 = _2296;
                    _2421 = _2297;
                    _2422 = _2298;
                    _2423 = _2299;
                    _2424 = _2300;
                    _2425 = _2301;
                    _2426 = _2311;
                    float _2352;
                    float _2353;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    for (;;)
                    {
                        uint _2430 = uint(findLSB(_2426)) + (_2302 << 5u);
                        uint _2427 = (_2426 + 4294967295u) & _2426;
                        uint _2432 = _2430 * 48u;
                        vec4 _2446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2432)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 3u)).x));
                        uint _2452 = (_2430 * 48u) + 4u;
                        vec4 _2465 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2452)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 3u)).x));
                        uint _2471 = (_2430 * 48u) + 8u;
                        vec3 _2482 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2471)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 2u)).x));
                        float _2486 = _2446.x - _1958;
                        float _2487 = _2446.y - _1959;
                        float _2488 = _2446.z - _1960;
                        float _2489 = dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488));
                        float _2492 = inversesqrt(_2489);
                        float _2501 = 1.0 - (_2489 * _2446.w);
                        float _3601 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _2502 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
                        float _2503 = sqrt(_2489) * _2465.w;
                        float _2506 = 1.39999997615814208984375 / (_2503 + 1.39999997615814208984375);
                        float _2507 = _2506 * _2506;
                        float _2510 = ((1.0 - _2507) * dot(vec3(_374, _377, _380), vec3(_2492 * _2486, _2492 * _2487, _2492 * _2488))) + _2507;
                        float _2513 = _2503 * _2503;
                        float _2517 = ((isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0))) * _2502) / ((_2513 * 0.699999988079071044921875) + 1.0);
                        float _2521 = (-0.0) - _1958;
                        float _2522 = (-0.0) - _1959;
                        float _2523 = (-0.0) - _1960;
                        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
                        float _2531 = dot(vec3(_374, _377, _380), vec3(_2527 * _2521, _2527 * _2522, _2527 * _2523));
                        float _3617 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                        float _3628 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
                        float _2535 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
                        float _2539 = (0.5 / (((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) + 9.9999999392252902907785028219223e-09) + _2535)) * _2535;
                        float _3639 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
                        float _2548 = (((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 3.1415927410125732421875) / ((_2513 * 2.1991131305694580078125) + 3.141590118408203125)) * _2502;
                        _2355 = (_2517 * _2465.x) + _2423;
                        _2356 = (_2517 * _2465.y) + _2424;
                        _2357 = (_2517 * _2465.z) + _2425;
                        _2352 = (_2548 * _2482.x) + _2420;
                        _2353 = (_2548 * _2482.y) + _2421;
                        _2354 = (_2548 * _2482.z) + _2422;
                        if (_2427 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2420 = _2352;
                            _2421 = _2353;
                            _2422 = _2354;
                            _2423 = _2355;
                            _2424 = _2356;
                            _2425 = _2357;
                            _2426 = _2427;
                        }
                    }
                    frontier_phi_61_pred = _2352;
                    frontier_phi_61_pred_1 = _2357;
                    frontier_phi_61_pred_2 = _2356;
                    frontier_phi_61_pred_3 = _2355;
                    frontier_phi_61_pred_4 = _2354;
                    frontier_phi_61_pred_5 = _2353;
                }
                _2147 = frontier_phi_61_pred;
                _2157 = frontier_phi_61_pred_1;
                _2155 = frontier_phi_61_pred_2;
                _2153 = frontier_phi_61_pred_3;
                _2151 = frontier_phi_61_pred_4;
                _2149 = frontier_phi_61_pred_5;
                uint _2303 = _2302 + 1u;
                if (_2303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2296 = _2147;
                    _2297 = _2149;
                    _2298 = _2151;
                    _2299 = _2153;
                    _2300 = _2155;
                    _2301 = _2157;
                    _2302 = _2303;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2146 = _2147;
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
        }
        uvec4 _2160 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2161 = _2160.z;
        uint _2163 = (_2161 >> 8u) & 15u;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        if (((4294967295u << _2163) & _2004) == 0u)
        {
            _2267 = _2146;
            _2269 = _2148;
            _2271 = _2150;
            _2273 = _2152;
            _2275 = _2154;
            _2277 = _2156;
        }
        else
        {
            float _2292 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2163 < ((_2161 >> 12u) & 15u))
            {
                float _2268;
                float _2270;
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2403 = _2146;
                float _2404 = _2148;
                float _2405 = _2150;
                float _2406 = _2152;
                float _2407 = _2154;
                float _2408 = _2156;
                uint _2409 = _2163;
                uint _2418;
                bool _2419;
                for (;;)
                {
                    _2418 = texelFetch(g_lightClassification, int((((_1998 << 5u) + (_1984 << 9u)) + (_2409 << 2u)) >> 2u)).x;
                    _2419 = _2418 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2419)
                    {
                        frontier_phi_67_pred = _2406;
                        frontier_phi_67_pred_1 = _2407;
                        frontier_phi_67_pred_2 = _2408;
                        frontier_phi_67_pred_3 = _2405;
                        frontier_phi_67_pred_4 = _2404;
                        frontier_phi_67_pred_5 = _2403;
                    }
                    else
                    {
                        float _2553;
                        float _2554;
                        float _2555;
                        float _2556;
                        float _2557;
                        float _2558;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2566 = _2403;
                        float _2567 = _2404;
                        float _2568 = _2405;
                        float _2569 = _2406;
                        float _2570 = _2407;
                        float _2571 = _2408;
                        uint _2572 = _2418;
                        uint _2573;
                        vec4 _2598;
                        float _2599;
                        vec4 _2614;
                        vec3 _2626;
                        vec4 _2642;
                        vec4 _2658;
                        float _2705;
                        bool _2706;
                        for (;;)
                        {
                            uint _2583 = ((_2409 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2572));
                            _2573 = (_2572 + 4294967295u) & _2572;
                            uint _2585 = _2583 * 40u;
                            _2598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 3u)).x));
                            _2599 = _2598.w;
                            uint _2601 = (_2583 * 40u) + 4u;
                            _2614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 3u)).x));
                            uint _2616 = (_2583 * 40u) + 8u;
                            _2626 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x));
                            uint _2629 = (_2583 * 40u) + 16u;
                            _2642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 3u)).x));
                            uint _2645 = (_2583 * 40u) + 20u;
                            _2658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 3u)).x));
                            uint _2661 = (_2583 * 40u) + 24u;
                            vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            uint _2680 = (_2583 * 40u) + 28u;
                            vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 3u)).x));
                            _2705 = fma(_1960, _2693.z, fma(_1959, _2693.y, _2693.x * _1958)) + _2693.w;
                            _2706 = !((fma(_1960, _2674.z, fma(_1959, _2674.y, _2674.x * _1958)) + _2674.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2706)
                            {
                                float _2733 = _2598.x - _1958;
                                float _2734 = _2598.y - _1959;
                                float _2735 = _2598.z - _1960;
                                float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                                float _2739 = inversesqrt(_2736);
                                float _2740 = _2739 * _2733;
                                float _2741 = _2739 * _2734;
                                float _2742 = _2739 * _2735;
                                float _2746 = 1.0 - (_2736 / (_2599 * _2599));
                                float _3650 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2747 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
                                float _2751 = sqrt(_2736) * _2614.w;
                                float _2753 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                                float _2754 = _2753 * _2753;
                                float _2755 = 1.0 - _2754;
                                float _2757 = (_2755 * dot(vec3(_2740, _2741, _2742), vec3(_374, _377, _380))) + _2754;
                                float _2760 = _2751 * _2751;
                                float _2764 = (fma(_1960, _2642.z, fma(_1959, _2642.y, _2642.x * _1958)) + _2642.w) / _2705;
                                float _2765 = (fma(_1960, _2658.z, fma(_1959, _2658.y, _2658.x * _1958)) + _2658.w) / _2705;
                                float _2769 = 1.0 - dot(vec2(_2764, _2765), vec2(_2764, _2765));
                                float _3666 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                                float _2770 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
                                float _2771 = _2770 * (((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2747) / ((_2760 * 0.699999988079071044921875) + 1.0));
                                float _2781 = dot(vec3(_374, _377, _380), vec3((-0.0) - (_1958 * _2292), (-0.0) - (_1959 * _2292), (-0.0) - (_1960 * _2292)));
                                float _3677 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                                float _2789 = (_2755 * dot(vec3(_374, _377, _380), vec3(_2740, _2741, _2742))) + _2754;
                                float _3688 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                                float _2790 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
                                float _2794 = (0.5 / (((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) + 9.9999999392252902907785028219223e-09) + _2790)) * _2790;
                                float _3699 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2801 = (_2770 * _2747) * (((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 3.1415927410125732421875) / ((_2760 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2801 * _2626.x;
                                frontier_phi_73_pred_1 = _2801 * _2626.y;
                                frontier_phi_73_pred_2 = _2771 * _2614.z;
                                frontier_phi_73_pred_3 = _2771 * _2614.y;
                                frontier_phi_73_pred_4 = _2771 * _2614.x;
                                frontier_phi_73_pred_5 = _2801 * _2626.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2805 = frontier_phi_73_pred;
                            _2806 = frontier_phi_73_pred_1;
                            _2810 = frontier_phi_73_pred_2;
                            _2809 = frontier_phi_73_pred_3;
                            _2808 = frontier_phi_73_pred_4;
                            _2807 = frontier_phi_73_pred_5;
                            _2556 = _2808 + _2569;
                            _2557 = _2809 + _2570;
                            _2558 = _2810 + _2571;
                            _2553 = _2805 + _2566;
                            _2554 = _2806 + _2567;
                            _2555 = _2807 + _2568;
                            if (_2573 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2566 = _2553;
                                _2567 = _2554;
                                _2568 = _2555;
                                _2569 = _2556;
                                _2570 = _2557;
                                _2571 = _2558;
                                _2572 = _2573;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2556;
                        frontier_phi_67_pred_1 = _2557;
                        frontier_phi_67_pred_2 = _2558;
                        frontier_phi_67_pred_3 = _2555;
                        frontier_phi_67_pred_4 = _2554;
                        frontier_phi_67_pred_5 = _2553;
                    }
                    _2274 = frontier_phi_67_pred;
                    _2276 = frontier_phi_67_pred_1;
                    _2278 = frontier_phi_67_pred_2;
                    _2272 = frontier_phi_67_pred_3;
                    _2270 = frontier_phi_67_pred_4;
                    _2268 = frontier_phi_67_pred_5;
                    uint _2410 = _2409 + 1u;
                    if (_2410 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2403 = _2268;
                        _2404 = _2270;
                        _2405 = _2272;
                        _2406 = _2274;
                        _2407 = _2276;
                        _2408 = _2278;
                        _2409 = _2410;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2276;
                frontier_phi_55_56_ladder_1 = _2278;
                frontier_phi_55_56_ladder_2 = _2274;
                frontier_phi_55_56_ladder_3 = _2272;
                frontier_phi_55_56_ladder_4 = _2270;
                frontier_phi_55_56_ladder_5 = _2268;
            }
            else
            {
                frontier_phi_55_56_ladder = _2154;
                frontier_phi_55_56_ladder_1 = _2156;
                frontier_phi_55_56_ladder_2 = _2152;
                frontier_phi_55_56_ladder_3 = _2150;
                frontier_phi_55_56_ladder_4 = _2148;
                frontier_phi_55_56_ladder_5 = _2146;
            }
            _2267 = frontier_phi_55_56_ladder_5;
            _2269 = frontier_phi_55_56_ladder_4;
            _2271 = frontier_phi_55_56_ladder_3;
            _2273 = frontier_phi_55_56_ladder_2;
            _2275 = frontier_phi_55_56_ladder;
            _2277 = frontier_phi_55_56_ladder_1;
        }
        float _2282 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
        _2017 = (_2282 * _2273) + _1577;
        _2019 = (_2282 * _2275) + _1579;
        _2021 = (_2282 * _2277) + _1581;
        _2023 = ((_2267 * 0.039999999105930328369140625) * _2282) + _1829;
        _2025 = ((_2269 * 0.039999999105930328369140625) * _2282) + _1831;
        _2027 = ((_2271 * 0.039999999105930328369140625) * _2282) + _1833;
    }
    else
    {
        _2017 = _1577;
        _2019 = _1579;
        _2021 = _1581;
        _2023 = _1829;
        _2025 = _1831;
        _2027 = _1833;
    }
    uint _2033 = _394 + uint(cbMatDynParam._m0[0u].w);
    float _2043 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _233.x) * cbSceneParam._m0[72u].y) * _256) * cbInstanceData._m0[_2033].x;
    float _2048 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _233.y) * cbSceneParam._m0[72u].y) * _256) * cbInstanceData._m0[_2033].y;
    float _2053 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _233.z) * cbSceneParam._m0[72u].y) * _256) * cbInstanceData._m0[_2033].z;
    float _3715 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3726 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3737 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _2070 = (((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_2017 + ((isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))) * _418))) + ((_2023 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _1196)) * cbPerFrame._m0[3u].x)) + _2043;
    float _2072 = (_2048 + ((_2025 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _1196)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_2019 + ((isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))) * _418)));
    float _2074 = (_2053 + ((_2027 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _1196)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_2021 + ((isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))) * _418)));
    float _3763 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2087 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    uint _2088 = _393 + 6u;
    float _2096 = _352 / cbSceneParam._m0[86u].x;
    float _2097 = _353 / cbSceneParam._m0[86u].y;
    vec4 _2111 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2096, _2097, (log2((isnan(cbSceneParam._m0[77u].w) ? _286 : (isnan(_286) ? cbSceneParam._m0[77u].w : min(_286, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2113 = _2111.x;
    float _2114 = _2111.y;
    float _2115 = _2111.z;
    float _2116 = _2111.w;
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    if (_286 > cbSceneParam._m0[78u].w)
    {
        float _2171 = isnan(_286) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _286 : min(cbSceneParam._m0[80u].w, _286));
        float _2172 = _2171 / _286;
        float _2183 = _2172 * _337;
        float _2184 = _338 * _2172;
        float _2185 = (-0.0) - _2184;
        float _2187 = _2172 * _339;
        float _2189 = (cbSceneParam._m0[77u].w * _2185) / _2171;
        float _2190 = _2189 + cbSceneParam._m0[79u].w;
        float _2191 = cbSceneParam._m0[79u].w - _2184;
        float _2197 = sqrt(((_2183 * _2183) + (_2184 * _2184)) + (_2187 * _2187));
        float _2200 = (1.0 - (cbSceneParam._m0[77u].w / _2171)) * _2197;
        float _2205 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2207 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2365;
        if (abs((_2185 - _2189) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2365 = ((((_2190 > 0.0) ? exp2(_2205 * _2190) : (2.0 - exp2(_2207 * _2190))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2200;
        }
        else
        {
            float _2325 = 1.0 / cbSceneParam._m0[80u].x;
            float _2326 = isnan(_2191) ? _2190 : (isnan(_2190) ? _2191 : max(_2190, _2191));
            float _2327 = isnan(_2191) ? _2190 : (isnan(_2190) ? _2191 : min(_2190, _2191));
            float _2336 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : min(_2326, 0.0));
            float _2337 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : min(_2327, 0.0));
            _2365 = ((abs(_2197 / _2185) * cbSceneParam._m0[80u].y) * ((((_2336 - _2337) * 2.0) - ((exp2(_2205 * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)))) - exp2(_2205 * (isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0))))) * _2325)) - ((exp2(_2207 * _2336) - exp2(_2207 * _2337)) * _2325))) + (_2200 * cbSceneParam._m0[80u].z);
        }
        vec4 _2367 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2096, _2097, 1.0), 0.0);
        float _2376 = exp2((_2365 * (-1.44269502162933349609375)) * (1.0 - _2367.w));
        float _2377 = log2(_2376);
        float _2393 = log2(_2116);
        _2209 = (exp2(_2393 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].x)) * _2367.x) / cbSceneParam._m0[78u].x)) + _2113;
        _2211 = (exp2(_2393 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].y)) * _2367.y) / cbSceneParam._m0[78u].y)) + _2114;
        _2213 = (exp2(_2393 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].z)) * _2367.z) / cbSceneParam._m0[78u].z)) + _2115;
        _2215 = _2376 * _2116;
    }
    else
    {
        _2209 = _2113;
        _2211 = _2114;
        _2213 = _2115;
        _2215 = _2116;
    }
    float _2226 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2227 = _2226 == 3.0;
    float _2228 = log2(_2215);
    float _2232 = exp2(_2228 * cbSceneParam._m0[78u].x);
    float _2233 = exp2(_2228 * cbSceneParam._m0[78u].y);
    float _2234 = exp2(_2228 * cbSceneParam._m0[78u].z);
    float _2235 = _2232 * (isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0)));
    float _2236 = _2233 * (isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0)));
    float _2237 = _2234 * (isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0)));
    float _2246 = (_2226 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2246 * (_2227 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2209)));
    SV_Target.y = _2246 * (_2227 ? _2236 : (_2236 + (cbSceneParam._m0[72u].w * _2211)));
    SV_Target.z = _2246 * (_2227 ? _2237 : (_2237 + (cbSceneParam._m0[72u].w * _2213)));
    SV_Target.w = cbInstanceData._m0[_2088].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2043) * _2087) * _2232) * _2246;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2048) * _2087) * _2233) * _2246;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2053) * _2087) * _2234) * _2246;
    SV_Target_1.w = cbInstanceData._m0[_2088].w;
}


