#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _797;
float _3290;
float _3291;
float _3292;
float _3293;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    vec4 _194 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _194.x * cbMtdParam._m0[9u].x;
    float _201 = _194.y * cbMtdParam._m0[9u].y;
    float _202 = _194.z * cbMtdParam._m0[9u].z;
    vec4 _224 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _240 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3302 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _242 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _250 = (((_242 * _242) * (3.0 - (_242 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _258 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _259 = _258 * _173;
    float _260 = _258 * _174;
    float _261 = _258 * _175;
    float _3313 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3324 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3335 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _280 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _321 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _331 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _321);
    float _332 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _321);
    float _333 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _321);
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _338 = _331 * _337;
    float _339 = _332 * _337;
    float _340 = _333 * _337;
    vec4 _345 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _347 = _345.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _476 = sqrt(((_331 * _331) + (_332 * _332)) + (_333 * _333));
        float _482 = (cbMatDynParam._m0[5u].x * _476) + cbMatDynParam._m0[5u].y;
        float _3346 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
        float _483 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _487 = (cbMatDynParam._m0[5u].z * _476) + cbMatDynParam._m0[5u].w;
        float _3357 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) - _483)) + _483) < ((_347 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _359 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _360 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _380 = fma(_261, cbSceneParam._m0[5u].z, fma(_260, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _259));
    float _383 = fma(_261, cbSceneParam._m0[6u].z, fma(_260, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _259));
    float _386 = fma(_261, cbSceneParam._m0[7u].z, fma(_260, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _259));
    uint _399 = uint(roundEven(NORMAL.w)) * 13u;
    uint _401 = _399 + 9u;
    uint _402 = _401 + uint(cbMatDynParam._m0[0u].w);
    float _408 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_402].x;
    float _409 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_402].y;
    float _410 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_402].z;
    float _3368 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    vec4 _422 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _359, cbSceneParam._m0[86u].y * _360));
    float _425 = _422.x * TEXCOORD.z;
    float _426 = dot(vec3(_259, _260, _261), vec3(_338, _339, _340));
    float _429 = _426 * 2.0;
    float _433 = (_429 * _259) - _338;
    float _434 = (_429 * _260) - _339;
    float _435 = (_429 * _261) - _340;
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _796;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _521 = fma(_465, cbModelParam._m0[26u].z, fma(_461, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _457));
        float _525 = fma(_465, cbModelParam._m0[27u].z, fma(_461, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _457));
        float _529 = fma(_465, cbModelParam._m0[28u].z, fma(_461, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _457));
        float _554 = _457 + _259;
        float _555 = _461 + _260;
        float _556 = _465 + _261;
        float _566 = fma(_556, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554)) - _521;
        float _567 = fma(_556, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554)) - _525;
        float _568 = fma(_556, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554)) - _529;
        float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
        float _585 = ((_572 * _566) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_521 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_572 * _567) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_525 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _587 = ((_572 * _568) / cbModelParam._m0[34u].z) + ((((((_529 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        float _624 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_590.x + (-0.5));
        float _626 = _624 * (_590.y + (-0.5));
        float _627 = _624 * (_590.z + (-0.5));
        float _634 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_597.x + (-0.5));
        float _636 = _634 * (_597.y + (-0.5));
        float _637 = _634 * (_597.z + (-0.5));
        float _644 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_604.x + (-0.5));
        float _646 = _644 * (_604.y + (-0.5));
        float _647 = _644 * (_604.z + (-0.5));
        float _654 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_611.x + (-0.5));
        float _656 = _654 * (_611.y + (-0.5));
        float _657 = _654 * (_611.z + (-0.5));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = _625 * 0.5;
        float _662 = _635 * 0.5;
        float _663 = _645 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _678 = (dot(vec3(_259, _260, _261), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _688 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _3438 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_690 + 1.0))) + _695) * _658;
        float _705 = _626 * 0.5;
        float _706 = _636 * 0.5;
        float _707 = _646 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_259, _260, _261), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3471 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_732 + 1.0))) + _737) * _659;
        float _747 = _627 * 0.5;
        float _748 = _637 * 0.5;
        float _749 = _647 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _763 = (dot(vec3(_259, _260, _261), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _772 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3504 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_774 + 1.0))) + _779) * _660;
        _796 = _627;
        _798 = _626;
        _799 = _625;
        _800 = _637;
        _801 = _636;
        _802 = _635;
        _803 = _647;
        _804 = _646;
        _805 = _645;
        _806 = _660;
        _807 = _659;
        _808 = _658;
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
    }
    else
    {
        _796 = _797;
        _798 = _797;
        _799 = _797;
        _800 = _797;
        _801 = _797;
        _802 = _797;
        _803 = _797;
        _804 = _797;
        _805 = _797;
        _806 = _797;
        _807 = _797;
        _808 = _797;
        _809 = 0.0;
        _810 = 0.0;
        _811 = 0.0;
    }
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _840 = fma(_465, cbModelParam._m0[30u].z, fma(_461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _457));
        float _844 = fma(_465, cbModelParam._m0[31u].z, fma(_461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _457));
        float _848 = fma(_465, cbModelParam._m0[32u].z, fma(_461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _457));
        float _871 = _457 + _259;
        float _872 = _461 + _260;
        float _873 = _465 + _261;
        float _883 = fma(_873, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871)) - _840;
        float _884 = fma(_873, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871)) - _844;
        float _885 = fma(_873, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871)) - _848;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_840 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_844 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[35u].z) + ((((((_848 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _939 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_906.x + (-0.5));
        float _941 = _939 * (_906.y + (-0.5));
        float _942 = _939 * (_906.z + (-0.5));
        float _949 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_913.x + (-0.5));
        float _951 = _949 * (_913.y + (-0.5));
        float _952 = _949 * (_913.z + (-0.5));
        float _959 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_920.x + (-0.5));
        float _961 = _959 * (_920.y + (-0.5));
        float _962 = _959 * (_920.z + (-0.5));
        float _969 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_927.x + (-0.5));
        float _971 = _969 * (_927.y + (-0.5));
        float _972 = _969 * (_927.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_259, _260, _261), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3567 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1003 + 1.0))) + _1008) * _973;
        float _1018 = _941 * 0.5;
        float _1019 = _951 * 0.5;
        float _1020 = _961 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_259, _260, _261), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3600 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1045 + 1.0))) + _1050) * _974;
        float _1060 = _942 * 0.5;
        float _1061 = _952 * 0.5;
        float _1062 = _962 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_259, _260, _261), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3633 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1087 + 1.0))) + _1092) * _975;
        _1109 = _942;
        _1110 = _941;
        _1111 = _940;
        _1112 = _952;
        _1113 = _951;
        _1114 = _950;
        _1115 = _962;
        _1116 = _961;
        _1117 = _960;
        _1118 = _975;
        _1119 = _974;
        _1120 = _973;
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _797;
        _1110 = _797;
        _1111 = _797;
        _1112 = _797;
        _1113 = _797;
        _1114 = _797;
        _1115 = _797;
        _1116 = _797;
        _1117 = _797;
        _1118 = _797;
        _1119 = _797;
        _1120 = _797;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _809)) + _809;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _810)) + _810;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _811)) + _811;
    float _1156 = fma(_1135, cbSceneParam._m0[89u].z, fma(_1134, cbSceneParam._m0[89u].y, _1133 * cbSceneParam._m0[89u].x));
    float _1159 = fma(_1135, cbSceneParam._m0[90u].z, fma(_1134, cbSceneParam._m0[90u].y, _1133 * cbSceneParam._m0[90u].x));
    float _1162 = fma(_1135, cbSceneParam._m0[91u].z, fma(_1134, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1133));
    float _1177 = _433 * 0.5;
    float _1178 = _434 * 0.5;
    float _1179 = _435 * 0.5;
    float _1180 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1183 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1186 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1220;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1193 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_796, _800, _803, _806));
        float _1197 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_798, _801, _804, _807));
        float _1201 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_799, _802, _805, _808));
        float _1208 = dot(vec4(cbModelParam._m0[39u]), vec4(_1177, _1178, _1179, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1231;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1222 = dot(vec4(cbModelParam._m0[40u]), vec4(_1177, _1178, _1179, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1235 = (_1231 * cbModelParam._m0[1u].x) + (_1220 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1325;
    float _1327;
    float _1329;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1292 = fma(_465, cbModelParam._m0[13u].z, fma(_461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457)) + cbModelParam._m0[13u].w;
        float _1296 = fma(_465, cbModelParam._m0[14u].z, fma(_461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457)) + cbModelParam._m0[14u].w;
        float _1300 = fma(_465, cbModelParam._m0[15u].z, fma(_461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457)) + cbModelParam._m0[15u].w;
        float _1303 = fma(_435, cbModelParam._m0[13u].z, fma(_434, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433));
        float _1306 = fma(_435, cbModelParam._m0[14u].z, fma(_434, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433));
        float _1309 = fma(_435, cbModelParam._m0[15u].z, fma(_434, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433));
        float _1335;
        if (_1303 > 0.0)
        {
            _1335 = abs((1.0 - _1292) / _1303);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1292 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1335 = frontier_phi_17_15_ladder;
        }
        float _1508;
        if (_1306 > 0.0)
        {
            _1508 = abs((1.0 - _1296) / _1306);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1296 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1508 = frontier_phi_26_22_ladder;
        }
        float _1804;
        if (_1309 > 0.0)
        {
            _1804 = abs((1.0 - _1300) / _1309);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1300 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1804 = frontier_phi_38_33_ladder;
        }
        float _1806 = isnan(_1508) ? _1335 : (isnan(_1335) ? _1508 : min(_1335, _1508));
        float _1807 = isnan(_1804) ? _1806 : (isnan(_1806) ? _1804 : min(_1806, _1804));
        float _1811 = (_1807 * _1303) + _1292;
        float _1812 = (_1807 * _1306) + _1296;
        float _1813 = (_1807 * _1309) + _1300;
        float _1814 = _1807 * 9.9999997473787516355514526367188e-05;
        float _1816 = (-1.0) - _1814;
        float _1818 = _1814 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1813 > _1818) || ((_1813 < _1816) || ((_1812 > _1818) || ((_1812 < _1816) || ((_1811 < _1816) || (_1811 > _1818))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1958 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1813, cbModelParam._m0[9u].z, fma(_1812, cbModelParam._m0[9u].y, _1811 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1813, cbModelParam._m0[10u].z, fma(_1812, cbModelParam._m0[10u].y, _1811 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1813, cbModelParam._m0[11u].z, fma(_1812, cbModelParam._m0[11u].y, _1811 * cbModelParam._m0[11u].x))), _1244);
            frontier_phi_16_38_ladder = _1958.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1958.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1958.x * cbModelParam._m0[1u].y;
        }
        _1325 = frontier_phi_16_38_ladder_2;
        _1327 = frontier_phi_16_38_ladder_1;
        _1329 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_433, _434, _435), _1244);
        _1325 = _1313.x * cbModelParam._m0[1u].y;
        _1327 = _1313.y * cbModelParam._m0[1u].y;
        _1329 = _1313.z * cbModelParam._m0[1u].y;
    }
    float _1332 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1388 = fma(_465, cbModelParam._m0[21u].z, fma(_461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457)) + cbModelParam._m0[21u].w;
        float _1392 = fma(_465, cbModelParam._m0[22u].z, fma(_461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457)) + cbModelParam._m0[22u].w;
        float _1396 = fma(_465, cbModelParam._m0[23u].z, fma(_461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457)) + cbModelParam._m0[23u].w;
        float _1399 = fma(_435, cbModelParam._m0[21u].z, fma(_434, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433));
        float _1402 = fma(_435, cbModelParam._m0[22u].z, fma(_434, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433));
        float _1405 = fma(_435, cbModelParam._m0[23u].z, fma(_434, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433));
        float _1513;
        if (_1399 > 0.0)
        {
            _1513 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1513 = frontier_phi_28_24_ladder;
        }
        float _1831;
        if (_1402 > 0.0)
        {
            _1831 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1831 = frontier_phi_40_35_ladder;
        }
        float _2104;
        if (_1405 > 0.0)
        {
            _2104 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2104 = frontier_phi_50_47_ladder;
        }
        float _2106 = isnan(_1831) ? _1513 : (isnan(_1513) ? _1831 : min(_1513, _1831));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1399) + _1388;
        float _2112 = (_2107 * _1402) + _1392;
        float _2113 = (_2107 * _1405) + _1396;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2114;
        float _2117 = _2114 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2113 > _2117) || ((_2113 < _2115) || ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 < _2115) || (_2111 > _2117))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2204 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2113, cbModelParam._m0[17u].z, fma(_2112, cbModelParam._m0[17u].y, _2111 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2113, cbModelParam._m0[18u].z, fma(_2112, cbModelParam._m0[18u].y, _2111 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2113, cbModelParam._m0[19u].z, fma(_2112, cbModelParam._m0[19u].y, _2111 * cbModelParam._m0[19u].x))), _1332);
            frontier_phi_25_50_ladder = _2204.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2204.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2204.x * cbModelParam._m0[1u].z;
        }
        _1424 = frontier_phi_25_50_ladder_2;
        _1426 = frontier_phi_25_50_ladder_1;
        _1428 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_433, _434, _435), _1332);
        _1424 = _1408.x * cbModelParam._m0[1u].z;
        _1426 = _1408.y * cbModelParam._m0[1u].z;
        _1428 = _1408.z * cbModelParam._m0[1u].z;
    }
    float _1440 = _425 * 0.01200000010430812835693359375;
    float _1442 = _1440 * ((cbModelParam._m0[1u].w * (_1424 - _1325)) + _1325);
    float _1443 = _1440 * ((cbModelParam._m0[1u].w * (_1426 - _1327)) + _1327);
    float _1444 = _1440 * ((cbModelParam._m0[1u].w * (_1428 - _1329)) + _1329);
    float _1447 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, _1442 * cbSceneParam._m0[91u].x));
    float _1487 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1491 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1495 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1499 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1500 = _1487 / _1499;
    float _1501 = _1491 / _1499;
    float _1502 = _1495 / _1499;
    float _1649;
    float _1650;
    float _1651;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1529 = ((uint(_1502 > cbSceneParam._m0[59u].y) + uint(_1502 > cbSceneParam._m0[59u].x)) + uint(_1502 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1530 = _1529 + 43u;
        uint _1538 = _1529 + 44u;
        uint _1546 = _1529 + 45u;
        uint _1554 = _1529 + 46u;
        float _1565 = fma(_1499, cbSceneParam._m0[_1530].w, fma(_1495, cbSceneParam._m0[_1530].z, fma(_1491, cbSceneParam._m0[_1530].y, _1487 * cbSceneParam._m0[_1530].x)));
        float _1569 = fma(_1499, cbSceneParam._m0[_1538].w, fma(_1495, cbSceneParam._m0[_1538].z, fma(_1491, cbSceneParam._m0[_1538].y, _1487 * cbSceneParam._m0[_1538].x)));
        float _1577 = fma(_1499, cbSceneParam._m0[_1554].w, fma(_1495, cbSceneParam._m0[_1554].z, fma(_1491, cbSceneParam._m0[_1554].y, _1487 * cbSceneParam._m0[_1554].x)));
        float _1582 = cbSceneParam._m0[33u].z * _1577;
        float _1584 = cbSceneParam._m0[33u].w * _1577;
        float _1587 = fma(_1499, cbSceneParam._m0[_1546].w, fma(_1495, cbSceneParam._m0[_1546].z, fma(_1491, cbSceneParam._m0[_1546].y, _1487 * cbSceneParam._m0[_1546].x))) / _1577;
        float _1635 = (cbSceneParam._m0[33u].x - sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502))) * cbSceneParam._m0[33u].y;
        float _3759 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1642 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1582 + _1565) / _1577, (_1584 + _1569) / _1577), _1587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1584 + _1565) / _1577, (_1569 - _1582) / _1577), _1587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1565 - _1582) / _1577, (_1569 - _1584) / _1577), _1587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1565 - _1584) / _1577, (_1582 + _1569) / _1577), _1587), 0.0)).x), vec4(0.25)));
        _1649 = 1.0 - (_1642 * cbSceneParam._m0[34u].x);
        _1650 = 1.0 - (_1642 * cbSceneParam._m0[34u].y);
        _1651 = 1.0 - (_1642 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1649 = 1.0;
        _1650 = 1.0;
        _1651 = 1.0;
    }
    float _1715;
    float _1717;
    float _1719;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1703 = fma(_1499, cbSceneParam._m0[63u].w, fma(_1495, cbSceneParam._m0[63u].z, fma(_1491, cbSceneParam._m0[63u].y, _1487 * cbSceneParam._m0[63u].x)));
        float _1704 = fma(_1499, cbSceneParam._m0[60u].w, fma(_1495, cbSceneParam._m0[60u].z, fma(_1491, cbSceneParam._m0[60u].y, _1487 * cbSceneParam._m0[60u].x))) / _1703;
        float _1705 = fma(_1499, cbSceneParam._m0[61u].w, fma(_1495, cbSceneParam._m0[61u].z, fma(_1491, cbSceneParam._m0[61u].y, _1487 * cbSceneParam._m0[61u].x))) / _1703;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1704 >= cbSceneParam._m0[64u].x) && (_1705 >= cbSceneParam._m0[64u].y)) && (_1704 <= cbSceneParam._m0[64u].z)) && (_1705 <= cbSceneParam._m0[64u].w))
        {
            float _1844 = fma(_1499, cbSceneParam._m0[62u].w, fma(_1495, cbSceneParam._m0[62u].z, fma(_1491, cbSceneParam._m0[62u].y, _1487 * cbSceneParam._m0[62u].x))) / _1703;
            float _1848 = isnan(cbSceneParam._m0[41u].w) ? _1844 : (isnan(_1844) ? cbSceneParam._m0[41u].w : max(_1844, cbSceneParam._m0[41u].w));
            float _1891 = (cbSceneParam._m0[33u].x - sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502))) * cbSceneParam._m0[33u].y;
            float _3775 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
            float _1898 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1704, cbSceneParam._m0[33u].w + _1705), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1704, _1705 - cbSceneParam._m0[33u].z), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1704 - cbSceneParam._m0[33u].z, _1705 - cbSceneParam._m0[33u].w), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1704 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1705), _1848), 0.0)).x), vec4(0.25)));
            float _1902 = 1.0 - (_1898 * cbSceneParam._m0[34u].x);
            float _1903 = 1.0 - (_1898 * cbSceneParam._m0[34u].y);
            float _1904 = 1.0 - (_1898 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1904) ? _1651 : (isnan(_1651) ? _1904 : min(_1651, _1904));
            frontier_phi_37_36_ladder_1 = isnan(_1903) ? _1650 : (isnan(_1650) ? _1903 : min(_1650, _1903));
            frontier_phi_37_36_ladder_2 = isnan(_1902) ? _1649 : (isnan(_1649) ? _1902 : min(_1649, _1902));
        }
        else
        {
            frontier_phi_37_36_ladder = _1651;
            frontier_phi_37_36_ladder_1 = _1650;
            frontier_phi_37_36_ladder_2 = _1649;
        }
        _1715 = frontier_phi_37_36_ladder_2;
        _1717 = frontier_phi_37_36_ladder_1;
        _1719 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1715 = _1649;
        _1717 = _1650;
        _1719 = _1651;
    }
    uvec4 _1724 = floatBitsToUint(cbInstanceData._m0[_399 + 5u]);
    uint _1726 = _1724.x * 14u;
    uint _1727 = _1726 + 13u;
    float _1734 = _425 + (-1.0);
    float _1739 = (cbLight._m0[_1727].x * _1734) + 1.0;
    float _1740 = (cbLight._m0[_1727].y * _1734) + 1.0;
    float _1741 = (cbLight._m0[_1727].z * _1734) + 1.0;
    float _1742 = (cbLight._m0[_1727].w * _1734) + 1.0;
    uint _1743 = _1726 + 5u;
    float _1749 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1753 = _1726 + 4u;
    float _1763 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1767 = _1726 | 1u;
    float _1778 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_259, _260, _261));
    float _1781 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_259, _260, _261));
    float _3811 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _3822 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1786 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.3183098733425140380859375;
    float _1788 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.3183098733425140380859375;
    float _1795 = ((cbLight._m0[_1743].x * _1749) * _1788) + (((cbLight._m0[_1753].x * _1715) * _1763) * _1786);
    float _1796 = ((_1749 * cbLight._m0[_1743].y) * _1788) + (((cbLight._m0[_1753].y * _1717) * _1763) * _1786);
    float _1797 = ((_1749 * cbLight._m0[_1743].z) * _1788) + (((cbLight._m0[_1753].z * _1719) * _1763) * _1786);
    uvec4 _1801 = floatBitsToUint(cbLight._m0[_1726 + 12u]);
    bool _1803 = _1801.x == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1803)
    {
        _1905 = _1795;
        _1907 = _1796;
        _1909 = _1797;
    }
    else
    {
        uint _1913 = _1726 + 6u;
        float _1929 = (dot(vec3(cbLight._m0[_1726 + 2u].xyz), vec3(_259, _260, _261)) * 0.5) + 0.5;
        float _1930 = _1929 * _1929;
        float _3833 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1931 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1932 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1905 = (((cbLight._m0[_1913].x * 0.3183098733425140380859375) * _1931) * _1932) + _1795;
        _1907 = (((cbLight._m0[_1913].y * 0.3183098733425140380859375) * _1931) * _1932) + _1796;
        _1909 = (((cbLight._m0[_1913].z * 0.3183098733425140380859375) * _1931) * _1932) + _1797;
    }
    bool _1912 = _1801.y == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1912)
    {
        _1967 = _1905;
        _1969 = _1907;
        _1971 = _1909;
    }
    else
    {
        uint _2075 = _1726 + 7u;
        float _2091 = (dot(vec3(cbLight._m0[_1726 + 3u].xyz), vec3(_259, _260, _261)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _3849 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _2094 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _1967 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _1905;
        _1969 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _1907;
        _1971 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _1909;
    }
    uint _1973 = _1726 + 8u;
    float _1979 = cbLight._m0[_1726].x + _338;
    float _1980 = cbLight._m0[_1726].y + _339;
    float _1981 = cbLight._m0[_1726].z + _340;
    float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
    float _1989 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1726].xyz));
    float _3865 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _1993 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1979 * _1985, _1980 * _1985, _1981 * _1985));
    float _3887 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = (0.5 / ((_1992 + 9.9999999392252902907785028219223e-09) + _1993)) * _1992;
    float _3898 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.31831014156341552734375;
    uint _2027 = _1726 + 9u;
    float _2033 = cbLight._m0[_1767].x + _338;
    float _2034 = cbLight._m0[_1767].y + _339;
    float _2035 = cbLight._m0[_1767].z + _340;
    float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
    float _2043 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1767].xyz));
    float _3909 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_2033 * _2039, _2034 * _2039, _2035 * _2039));
    float _3920 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2060 = (0.5 / ((_2046 + 9.9999999392252902907785028219223e-09) + _1993)) * _2046;
    float _3931 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.31831014156341552734375;
    float _2072 = (((_2056 * cbLight._m0[_2027].x) * _2062) * _1749) + ((((cbLight._m0[_1973].x * _1715) * _2005) * _2013) * _1763);
    float _2073 = (((_2056 * cbLight._m0[_2027].y) * _2062) * _1749) + ((((cbLight._m0[_1973].y * _1717) * _2005) * _2013) * _1763);
    float _2074 = (((_2056 * cbLight._m0[_2027].z) * _2062) * _1749) + ((((cbLight._m0[_1973].z * _1719) * _2005) * _2013) * _1763);
    float _2130;
    float _2132;
    float _2134;
    if (_1803)
    {
        _2130 = _2072;
        _2132 = _2073;
        _2134 = _2074;
    }
    else
    {
        uint _2136 = _1726 + 10u;
        uint _2142 = _1726 + 2u;
        float _2148 = cbLight._m0[_2142].x + _338;
        float _2149 = cbLight._m0[_2142].y + _339;
        float _2150 = cbLight._m0[_2142].z + _340;
        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
        float _2158 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_2142].xyz));
        float _3942 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2162 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2148 * _2154, _2149 * _2154, _2150 * _2154));
        float _3953 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2175 = (0.5 / ((_2161 + 9.9999999392252902907785028219223e-09) + _1993)) * _2161;
        float _3964 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2177 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.31831014156341552734375;
        float _2178 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2130 = (((_2171 * cbLight._m0[_2136].x) * _2177) * _2178) + _2072;
        _2132 = (((_2171 * cbLight._m0[_2136].y) * _2177) * _2178) + _2073;
        _2134 = (((_2171 * cbLight._m0[_2136].z) * _2177) * _2178) + _2074;
    }
    float _2209;
    float _2211;
    float _2213;
    if (_1912)
    {
        _2209 = _2130;
        _2211 = _2132;
        _2213 = _2134;
    }
    else
    {
        uint _2220 = _1726 + 11u;
        uint _2226 = _1726 + 3u;
        float _2232 = cbLight._m0[_2226].x + _338;
        float _2233 = cbLight._m0[_2226].y + _339;
        float _2234 = cbLight._m0[_2226].z + _340;
        float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
        float _2242 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_2226].xyz));
        float _3980 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2232 * _2238, _2233 * _2238, _2234 * _2238));
        float _3991 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2255 = (exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2259 = (0.5 / ((_2245 + 9.9999999392252902907785028219223e-09) + _1993)) * _2245;
        float _4002 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.31831014156341552734375;
        float _2262 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _2209 = (((_2255 * cbLight._m0[_2220].x) * _2261) * _2262) + _2130;
        _2211 = (((_2255 * cbLight._m0[_2220].y) * _2261) * _2262) + _2132;
        _2213 = (((_2255 * cbLight._m0[_2220].z) * _2261) * _2262) + _2134;
    }
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    if (_1724.y == 0u)
    {
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _360) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _359) / _2284)));
        float _2305 = (log2(_1502 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
        }
        else
        {
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            uint _2601 = 0u;
            uint _2610;
            bool _2611;
            for (;;)
            {
                _2610 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                _2611 = _2610 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2611)
                {
                    frontier_phi_71_pred = _2600;
                    frontier_phi_71_pred_1 = _2599;
                    frontier_phi_71_pred_2 = _2598;
                    frontier_phi_71_pred_3 = _2597;
                    frontier_phi_71_pred_4 = _2596;
                    frontier_phi_71_pred_5 = _2595;
                }
                else
                {
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    uint _2746;
                    _2740 = _2595;
                    _2741 = _2596;
                    _2742 = _2597;
                    _2743 = _2598;
                    _2744 = _2599;
                    _2745 = _2600;
                    _2746 = _2610;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    for (;;)
                    {
                        uint _2750 = uint(findLSB(_2746)) + (_2601 << 5u);
                        uint _2747 = (_2746 + 4294967295u) & _2746;
                        uint _2752 = _2750 * 48u;
                        vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2772 = (_2750 * 48u) + 4u;
                        vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2791 = (_2750 * 48u) + 8u;
                        vec3 _2802 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x));
                        float _2806 = _2766.x - _1500;
                        float _2807 = _2766.y - _1501;
                        float _2808 = _2766.z - _1502;
                        float _2809 = dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808));
                        float _2812 = inversesqrt(_2809);
                        float _2821 = 1.0 - (_2809 * _2766.w);
                        float _4028 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2822 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2823 = sqrt(_2809) * _2785.w;
                        float _2826 = 1.39999997615814208984375 / (_2823 + 1.39999997615814208984375);
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * dot(vec3(_380, _383, _386), vec3(_2812 * _2806, _2812 * _2807, _2812 * _2808))) + _2827;
                        float _2833 = _2823 * _2823;
                        float _2837 = ((isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))) * _2822) / ((_2833 * 0.699999988079071044921875) + 1.0);
                        float _2841 = (-0.0) - _1500;
                        float _2842 = (-0.0) - _1501;
                        float _2843 = (-0.0) - _1502;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2851 = dot(vec3(_380, _383, _386), vec3(_2847 * _2841, _2847 * _2842, _2847 * _2843));
                        float _4044 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _4055 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2855 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2859 = (0.5 / (((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) + 9.9999999392252902907785028219223e-09) + _2855)) * _2855;
                        float _4066 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2868 = (((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 3.1415927410125732421875) / ((_2833 * 2.1991131305694580078125) + 3.141590118408203125)) * _2822;
                        _2670 = (_2837 * _2785.x) + _2743;
                        _2671 = (_2837 * _2785.y) + _2744;
                        _2672 = (_2837 * _2785.z) + _2745;
                        _2667 = (_2868 * _2802.x) + _2740;
                        _2668 = (_2868 * _2802.y) + _2741;
                        _2669 = (_2868 * _2802.z) + _2742;
                        if (_2747 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2740 = _2667;
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2670;
                            _2744 = _2671;
                            _2745 = _2672;
                            _2746 = _2747;
                        }
                    }
                    frontier_phi_71_pred = _2672;
                    frontier_phi_71_pred_1 = _2671;
                    frontier_phi_71_pred_2 = _2670;
                    frontier_phi_71_pred_3 = _2669;
                    frontier_phi_71_pred_4 = _2668;
                    frontier_phi_71_pred_5 = _2667;
                }
                _2447 = frontier_phi_71_pred;
                _2445 = frontier_phi_71_pred_1;
                _2443 = frontier_phi_71_pred_2;
                _2441 = frontier_phi_71_pred_3;
                _2439 = frontier_phi_71_pred_4;
                _2437 = frontier_phi_71_pred_5;
                uint _2602 = _2601 + 1u;
                if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2595 = _2437;
                    _2596 = _2439;
                    _2597 = _2441;
                    _2598 = _2443;
                    _2599 = _2445;
                    _2600 = _2447;
                    _2601 = _2602;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
        }
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.z;
        uint _2453 = (_2451 >> 8u) & 15u;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        if (((4294967295u << _2453) & _2315) == 0u)
        {
            _2566 = _2436;
            _2568 = _2438;
            _2570 = _2440;
            _2572 = _2442;
            _2574 = _2444;
            _2576 = _2446;
        }
        else
        {
            float _2591 = inversesqrt(dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2453 < ((_2451 >> 12u) & 15u))
            {
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2577;
                float _2723 = _2436;
                float _2724 = _2438;
                float _2725 = _2440;
                float _2726 = _2442;
                float _2727 = _2444;
                float _2728 = _2446;
                uint _2729 = _2453;
                uint _2738;
                bool _2739;
                for (;;)
                {
                    _2738 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                    _2739 = _2738 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2739)
                    {
                        frontier_phi_82_pred = _2728;
                        frontier_phi_82_pred_1 = _2727;
                        frontier_phi_82_pred_2 = _2726;
                        frontier_phi_82_pred_3 = _2725;
                        frontier_phi_82_pred_4 = _2724;
                        frontier_phi_82_pred_5 = _2723;
                    }
                    else
                    {
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _2895 = _2723;
                        float _2896 = _2724;
                        float _2897 = _2725;
                        float _2898 = _2726;
                        float _2899 = _2727;
                        float _2900 = _2728;
                        uint _2901 = _2738;
                        uint _2902;
                        vec4 _2927;
                        float _2928;
                        vec4 _2943;
                        vec3 _2955;
                        vec4 _2971;
                        vec4 _2987;
                        float _3034;
                        bool _3035;
                        for (;;)
                        {
                            uint _2912 = ((_2729 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2901));
                            _2902 = (_2901 + 4294967295u) & _2901;
                            uint _2914 = _2912 * 40u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2928 = _2927.w;
                            uint _2930 = (_2912 * 40u) + 4u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2945 = (_2912 * 40u) + 8u;
                            _2955 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x));
                            uint _2958 = (_2912 * 40u) + 16u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2912 * 40u) + 20u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2990 = (_2912 * 40u) + 24u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3009 = (_2912 * 40u) + 28u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3034 = fma(_1502, _3022.z, fma(_1501, _3022.y, _3022.x * _1500)) + _3022.w;
                            _3035 = !((fma(_1502, _3003.z, fma(_1501, _3003.y, _3003.x * _1500)) + _3003.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3035)
                            {
                                float _3062 = _2927.x - _1500;
                                float _3063 = _2927.y - _1501;
                                float _3064 = _2927.z - _1502;
                                float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                                float _3068 = inversesqrt(_3065);
                                float _3069 = _3068 * _3062;
                                float _3070 = _3068 * _3063;
                                float _3071 = _3068 * _3064;
                                float _3075 = 1.0 - (_3065 / (_2928 * _2928));
                                float _4077 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3080 = sqrt(_3065) * _2943.w;
                                float _3082 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                                float _3083 = _3082 * _3082;
                                float _3084 = 1.0 - _3083;
                                float _3086 = (_3084 * dot(vec3(_3069, _3070, _3071), vec3(_380, _383, _386))) + _3083;
                                float _3089 = _3080 * _3080;
                                float _3093 = (fma(_1502, _2971.z, fma(_1501, _2971.y, _2971.x * _1500)) + _2971.w) / _3034;
                                float _3094 = (fma(_1502, _2987.z, fma(_1501, _2987.y, _2987.x * _1500)) + _2987.w) / _3034;
                                float _3098 = 1.0 - dot(vec2(_3093, _3094), vec2(_3093, _3094));
                                float _4093 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3100 = _3099 * (((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3076) / ((_3089 * 0.699999988079071044921875) + 1.0));
                                float _3110 = dot(vec3(_380, _383, _386), vec3((-0.0) - (_1500 * _2591), (-0.0) - (_1501 * _2591), (-0.0) - (_1502 * _2591)));
                                float _4104 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3118 = (_3084 * dot(vec3(_380, _383, _386), vec3(_3069, _3070, _3071))) + _3083;
                                float _4115 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3123 = (0.5 / (((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) + 9.9999999392252902907785028219223e-09) + _3119)) * _3119;
                                float _4126 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3130 = (_3099 * _3076) * (((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 3.1415927410125732421875) / ((_3089 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3100 * _2943.z;
                                frontier_phi_88_pred_1 = _3100 * _2943.y;
                                frontier_phi_88_pred_2 = _3100 * _2943.x;
                                frontier_phi_88_pred_3 = _3130 * _2955.z;
                                frontier_phi_88_pred_4 = _3130 * _2955.y;
                                frontier_phi_88_pred_5 = _3130 * _2955.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3139 = frontier_phi_88_pred;
                            _3138 = frontier_phi_88_pred_1;
                            _3137 = frontier_phi_88_pred_2;
                            _3136 = frontier_phi_88_pred_3;
                            _3135 = frontier_phi_88_pred_4;
                            _3134 = frontier_phi_88_pred_5;
                            _2885 = _3137 + _2898;
                            _2886 = _3138 + _2899;
                            _2887 = _3139 + _2900;
                            _2882 = _3134 + _2895;
                            _2883 = _3135 + _2896;
                            _2884 = _3136 + _2897;
                            if (_2902 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2902;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2887;
                        frontier_phi_82_pred_1 = _2886;
                        frontier_phi_82_pred_2 = _2885;
                        frontier_phi_82_pred_3 = _2884;
                        frontier_phi_82_pred_4 = _2883;
                        frontier_phi_82_pred_5 = _2882;
                    }
                    _2577 = frontier_phi_82_pred;
                    _2575 = frontier_phi_82_pred_1;
                    _2573 = frontier_phi_82_pred_2;
                    _2571 = frontier_phi_82_pred_3;
                    _2569 = frontier_phi_82_pred_4;
                    _2567 = frontier_phi_82_pred_5;
                    uint _2730 = _2729 + 1u;
                    if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2723 = _2567;
                        _2724 = _2569;
                        _2725 = _2571;
                        _2726 = _2573;
                        _2727 = _2575;
                        _2728 = _2577;
                        _2729 = _2730;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2573;
                frontier_phi_63_64_ladder_1 = _2577;
                frontier_phi_63_64_ladder_2 = _2575;
                frontier_phi_63_64_ladder_3 = _2571;
                frontier_phi_63_64_ladder_4 = _2569;
                frontier_phi_63_64_ladder_5 = _2567;
            }
            else
            {
                frontier_phi_63_64_ladder = _2442;
                frontier_phi_63_64_ladder_1 = _2446;
                frontier_phi_63_64_ladder_2 = _2444;
                frontier_phi_63_64_ladder_3 = _2440;
                frontier_phi_63_64_ladder_4 = _2438;
                frontier_phi_63_64_ladder_5 = _2436;
            }
            _2566 = frontier_phi_63_64_ladder_5;
            _2568 = frontier_phi_63_64_ladder_4;
            _2570 = frontier_phi_63_64_ladder_3;
            _2572 = frontier_phi_63_64_ladder;
            _2574 = frontier_phi_63_64_ladder_2;
            _2576 = frontier_phi_63_64_ladder_1;
        }
        float _2581 = isnan(1.0) ? _425 : (isnan(_425) ? 1.0 : min(_425, 1.0));
        _2328 = (_2581 * _2572) + _1967;
        _2330 = (_2581 * _2574) + _1969;
        _2332 = (_2581 * _2576) + _1971;
        _2334 = ((_2566 * 0.039999999105930328369140625) * _2581) + _2209;
        _2336 = ((_2568 * 0.039999999105930328369140625) * _2581) + _2211;
        _2338 = ((_2570 * 0.039999999105930328369140625) * _2581) + _2213;
    }
    else
    {
        _2328 = _1967;
        _2330 = _1969;
        _2332 = _1971;
        _2334 = _2209;
        _2336 = _2211;
        _2338 = _2213;
    }
    uint _2344 = _401 + uint(cbMatDynParam._m0[0u].w);
    float _2354 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _224.x) * cbSceneParam._m0[72u].y) * _250) * cbInstanceData._m0[_2344].x;
    float _2359 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _224.y) * cbSceneParam._m0[72u].y) * _250) * cbInstanceData._m0[_2344].y;
    float _2364 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _224.z) * cbSceneParam._m0[72u].y) * _250) * cbInstanceData._m0[_2344].z;
    float _4142 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _4153 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _4164 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2381 = (((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2328 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _425))) + ((_2334 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1235)) * cbPerFrame._m0[3u].x)) + _2354;
    float _2383 = (_2359 + ((_2336 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1235)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2330 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _425)));
    float _2385 = (_2364 + ((_2338 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1235)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2332 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _425)));
    float _2386 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2387 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2388 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2394 = cbMtdParam._m0[2u].x * _2354;
    float _2395 = cbMtdParam._m0[2u].y * _2359;
    float _2396 = cbMtdParam._m0[2u].z * _2364;
    float _4190 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2398 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    uint _2399 = _399 + 6u;
    float _2407 = _359 / cbSceneParam._m0[86u].x;
    float _2408 = _360 / cbSceneParam._m0[86u].y;
    vec4 _2422 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2407, _2408, (log2((isnan(cbSceneParam._m0[77u].w) ? _280 : (isnan(_280) ? cbSceneParam._m0[77u].w : min(_280, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2424 = _2422.x;
    float _2425 = _2422.y;
    float _2426 = _2422.z;
    float _2427 = _2422.w;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_280 > cbSceneParam._m0[78u].w)
    {
        float _2461 = isnan(_280) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _280 : min(cbSceneParam._m0[80u].w, _280));
        float _2462 = _2461 / _280;
        float _2473 = _2462 * _331;
        float _2474 = _332 * _2462;
        float _2475 = (-0.0) - _2474;
        float _2477 = _2462 * _333;
        float _2479 = (cbSceneParam._m0[77u].w * _2475) / _2461;
        float _2480 = _2479 + cbSceneParam._m0[79u].w;
        float _2481 = cbSceneParam._m0[79u].w - _2474;
        float _2487 = sqrt(((_2473 * _2473) + (_2474 * _2474)) + (_2477 * _2477));
        float _2490 = (1.0 - (cbSceneParam._m0[77u].w / _2461)) * _2487;
        float _2495 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2497 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2680;
        if (abs((_2475 - _2479) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2680 = ((((_2480 > 0.0) ? exp2(_2495 * _2480) : (2.0 - exp2(_2497 * _2480))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2490;
        }
        else
        {
            float _2624 = 1.0 / cbSceneParam._m0[80u].x;
            float _2625 = isnan(_2481) ? _2480 : (isnan(_2480) ? _2481 : max(_2480, _2481));
            float _2626 = isnan(_2481) ? _2480 : (isnan(_2480) ? _2481 : min(_2480, _2481));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            _2680 = ((abs(_2487 / _2475) * cbSceneParam._m0[80u].y) * ((((_2635 - _2636) * 2.0) - ((exp2(_2495 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0)))) - exp2(_2495 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0))))) * _2624)) - ((exp2(_2497 * _2635) - exp2(_2497 * _2636)) * _2624))) + (_2490 * cbSceneParam._m0[80u].z);
        }
        vec4 _2682 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2407, _2408, 1.0), 0.0);
        float _2691 = exp2((_2680 * (-1.44269502162933349609375)) * (1.0 - _2682.w));
        float _2692 = log2(_2691);
        float _2708 = log2(_2427);
        _2499 = (exp2(_2708 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].x)) * _2682.x) / cbSceneParam._m0[78u].x)) + _2424;
        _2501 = (exp2(_2708 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].y)) * _2682.y) / cbSceneParam._m0[78u].y)) + _2425;
        _2503 = (exp2(_2708 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].z)) * _2682.z) / cbSceneParam._m0[78u].z)) + _2426;
        _2505 = _2691 * _2427;
    }
    else
    {
        _2499 = _2424;
        _2501 = _2425;
        _2503 = _2426;
        _2505 = _2427;
    }
    bool _2718;
    vec4 _2514;
    vec4 _2536;
    float _2538;
    float _2542;
    float _2543;
    float _2544;
    float _2547;
    float _2550;
    float _2553;
    float _2554;
    bool _2565;
    for (;;)
    {
        _2514 = cbMatDynParam._m0[0u];
        float _2516 = roundEven(_2514.y);
        bool _2517 = _2516 == 3.0;
        float _2518 = log2(_2505);
        float _2522 = exp2(_2518 * cbSceneParam._m0[78u].x);
        float _2523 = exp2(_2518 * cbSceneParam._m0[78u].y);
        float _2524 = exp2(_2518 * cbSceneParam._m0[78u].z);
        float _2525 = _2522 * _2386;
        float _2526 = _2523 * _2387;
        float _2527 = _2524 * _2388;
        float _2534 = _347 + (-0.5);
        _2536 = cbMtdParam._m0[1u];
        _2538 = _2536.y * _2534;
        float _2541 = (_2516 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2542 = _2541 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2499)));
        _2543 = _2541 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2501)));
        _2544 = _2541 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2503)));
        _2547 = ((_2394 * _2398) * _2522) * _2541;
        _2550 = ((_2395 * _2398) * _2523) * _2541;
        _2553 = ((_2396 * _2398) * _2524) * _2541;
        _2554 = _2534 * 0.999000012874603271484375;
        _2565 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2565)
        {
            if ((cbInstanceData._m0[_399 + 7u].x + _2554) < 0.5)
            {
                _2718 = true;
                break;
            }
        }
        uint _2659 = _401 + uint(_2514.w);
        if ((cbInstanceData._m0[_2659].w < 1.0) && ((cbInstanceData._m0[_2659].w + _2554) < 0.5))
        {
            _2718 = true;
            break;
        }
        if ((_2538 + 1.0) < _2536.x)
        {
            _2718 = true;
            break;
        }
        _2718 = false;
        break;
    }
    float _2873;
    if (_2718)
    {
        discard_state = true;
        _2873 = 0.0;
    }
    else
    {
        _2873 = cbInstanceData._m0[_2399].w;
    }
    SV_Target.x = _2542;
    SV_Target.y = _2543;
    SV_Target.z = _2544;
    SV_Target.w = _2873;
    SV_Target_1.x = _2547;
    SV_Target_1.y = _2550;
    SV_Target_1.z = _2553;
    SV_Target_1.w = cbInstanceData._m0[_2399].w;
    discard_exit();
}


