#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _808;
float _3301;
float _3302;
float _3303;
float _3304;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    vec4 _194 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _194.x * cbMtdParam._m0[9u].x;
    float _201 = _194.y * cbMtdParam._m0[9u].y;
    float _202 = _194.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _252 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3313 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _254 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _262 = (((_254 * _254) * (3.0 - (_254 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _270 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _271 = _270 * _173;
    float _272 = _270 * _174;
    float _273 = _270 * _175;
    float _3324 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3335 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3346 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _292 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _333 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _343 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _333);
    float _344 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _333);
    float _345 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _333);
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _343 * _349;
    float _351 = _344 * _349;
    float _352 = _345 * _349;
    vec4 _357 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _359 = _357.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _487 = sqrt(((_343 * _343) + (_344 * _344)) + (_345 * _345));
        float _493 = (cbMatDynParam._m0[5u].x * _487) + cbMatDynParam._m0[5u].y;
        float _3357 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
        float _494 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _498 = (cbMatDynParam._m0[5u].z * _487) + cbMatDynParam._m0[5u].w;
        float _3368 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) - _494)) + _494) < ((_359 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _371 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _372 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _392 = fma(_273, cbSceneParam._m0[5u].z, fma(_272, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _271));
    float _395 = fma(_273, cbSceneParam._m0[6u].z, fma(_272, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _271));
    float _398 = fma(_273, cbSceneParam._m0[7u].z, fma(_272, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _271));
    uint _411 = uint(roundEven(NORMAL.w)) * 13u;
    uint _412 = _411 + 9u;
    uint _413 = _412 + uint(cbMatDynParam._m0[0u].w);
    float _419 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_413].x;
    float _420 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_413].y;
    float _421 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_413].z;
    float _3379 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    vec4 _433 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _371, cbSceneParam._m0[86u].y * _372));
    float _436 = _433.x * TEXCOORD.z;
    float _437 = dot(vec3(_271, _272, _273), vec3(_350, _351, _352));
    float _440 = _437 * 2.0;
    float _444 = (_440 * _271) - _350;
    float _445 = (_440 * _272) - _351;
    float _446 = (_440 * _273) - _352;
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _476 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _807;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _532 = fma(_476, cbModelParam._m0[26u].z, fma(_472, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _468));
        float _536 = fma(_476, cbModelParam._m0[27u].z, fma(_472, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _468));
        float _540 = fma(_476, cbModelParam._m0[28u].z, fma(_472, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _468));
        float _565 = _468 + _271;
        float _566 = _472 + _272;
        float _567 = _476 + _273;
        float _577 = fma(_567, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565)) - _532;
        float _578 = fma(_567, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565)) - _536;
        float _579 = fma(_567, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565)) - _540;
        float _583 = inversesqrt(dot(vec3(_577, _578, _579), vec3(_577, _578, _579)));
        float _596 = ((_583 * _577) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_532 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _597 = ((_583 * _578) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_536 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _598 = ((_583 * _579) / cbModelParam._m0[34u].z) + ((((((_540 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        float _635 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_601.x + (-0.5));
        float _637 = _635 * (_601.y + (-0.5));
        float _638 = _635 * (_601.z + (-0.5));
        float _645 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_608.x + (-0.5));
        float _647 = _645 * (_608.y + (-0.5));
        float _648 = _645 * (_608.z + (-0.5));
        float _655 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_615.x + (-0.5));
        float _657 = _655 * (_615.y + (-0.5));
        float _658 = _655 * (_615.z + (-0.5));
        float _665 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_622.x + (-0.5));
        float _667 = _665 * (_622.y + (-0.5));
        float _668 = _665 * (_622.z + (-0.5));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = _636 * 0.5;
        float _673 = _646 * 0.5;
        float _674 = _656 * 0.5;
        float _675 = dot(vec3(_672, _673, _674), vec3(_672, _673, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _689 = (dot(vec3(_271, _272, _273), vec3(_680 * _672, _680 * _673, _680 * _674)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _699 = sqrt(((_673 * _673) + (_672 * _672)) + (_674 * _674)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3449 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_701 + 1.0))) + _706) * _669;
        float _716 = _637 * 0.5;
        float _717 = _647 * 0.5;
        float _718 = _657 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _732 = (dot(vec3(_271, _272, _273), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _741 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3482 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_743 + 1.0))) + _748) * _670;
        float _758 = _638 * 0.5;
        float _759 = _648 * 0.5;
        float _760 = _658 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_271, _272, _273), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3515 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_785 + 1.0))) + _790) * _671;
        _807 = _638;
        _809 = _637;
        _810 = _636;
        _811 = _648;
        _812 = _647;
        _813 = _646;
        _814 = _658;
        _815 = _657;
        _816 = _656;
        _817 = _671;
        _818 = _670;
        _819 = _669;
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
    }
    else
    {
        _807 = _808;
        _809 = _808;
        _810 = _808;
        _811 = _808;
        _812 = _808;
        _813 = _808;
        _814 = _808;
        _815 = _808;
        _816 = _808;
        _817 = _808;
        _818 = _808;
        _819 = _808;
        _820 = 0.0;
        _821 = 0.0;
        _822 = 0.0;
    }
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _851 = fma(_476, cbModelParam._m0[30u].z, fma(_472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _468));
        float _855 = fma(_476, cbModelParam._m0[31u].z, fma(_472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _468));
        float _859 = fma(_476, cbModelParam._m0[32u].z, fma(_472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _468));
        float _882 = _468 + _271;
        float _883 = _472 + _272;
        float _884 = _476 + _273;
        float _894 = fma(_884, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882)) - _851;
        float _895 = fma(_884, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882)) - _855;
        float _896 = fma(_884, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882)) - _859;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_851 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_855 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[35u].z) + ((((((_859 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _950 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_917.x + (-0.5));
        float _952 = _950 * (_917.y + (-0.5));
        float _953 = _950 * (_917.z + (-0.5));
        float _960 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_924.x + (-0.5));
        float _962 = _960 * (_924.y + (-0.5));
        float _963 = _960 * (_924.z + (-0.5));
        float _970 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_931.x + (-0.5));
        float _972 = _970 * (_931.y + (-0.5));
        float _973 = _970 * (_931.z + (-0.5));
        float _980 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_938.x + (-0.5));
        float _982 = _980 * (_938.y + (-0.5));
        float _983 = _980 * (_938.z + (-0.5));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = _951 * 0.5;
        float _988 = _961 * 0.5;
        float _989 = _971 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_271, _272, _273), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3578 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1014 + 1.0))) + _1019) * _984;
        float _1029 = _952 * 0.5;
        float _1030 = _962 * 0.5;
        float _1031 = _972 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_271, _272, _273), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3611 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1056 + 1.0))) + _1061) * _985;
        float _1071 = _953 * 0.5;
        float _1072 = _963 * 0.5;
        float _1073 = _973 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_271, _272, _273), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3644 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1098 + 1.0))) + _1103) * _986;
        _1120 = _953;
        _1121 = _952;
        _1122 = _951;
        _1123 = _963;
        _1124 = _962;
        _1125 = _961;
        _1126 = _973;
        _1127 = _972;
        _1128 = _971;
        _1129 = _986;
        _1130 = _985;
        _1131 = _984;
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _808;
        _1121 = _808;
        _1122 = _808;
        _1123 = _808;
        _1124 = _808;
        _1125 = _808;
        _1126 = _808;
        _1127 = _808;
        _1128 = _808;
        _1129 = _808;
        _1130 = _808;
        _1131 = _808;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _820)) + _820;
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _821)) + _821;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _822)) + _822;
    float _1167 = fma(_1146, cbSceneParam._m0[89u].z, fma(_1145, cbSceneParam._m0[89u].y, _1144 * cbSceneParam._m0[89u].x));
    float _1170 = fma(_1146, cbSceneParam._m0[90u].z, fma(_1145, cbSceneParam._m0[90u].y, _1144 * cbSceneParam._m0[90u].x));
    float _1173 = fma(_1146, cbSceneParam._m0[91u].z, fma(_1145, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1144));
    float _1188 = _444 * 0.5;
    float _1189 = _445 * 0.5;
    float _1190 = _446 * 0.5;
    float _1191 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1194 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1197 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1231;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1204 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_807, _811, _814, _817));
        float _1208 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_809, _812, _815, _818));
        float _1212 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_810, _813, _816, _819));
        float _1219 = dot(vec4(cbModelParam._m0[39u]), vec4(_1188, _1189, _1190, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1242;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1233 = dot(vec4(cbModelParam._m0[40u]), vec4(_1188, _1189, _1190, 1.0));
        _1242 = dot(vec3(isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1233) ? 0.0 : (isnan(0.0) ? _1233 : max(0.0, _1233))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1242 = 1.0;
    }
    float _1246 = (_1242 * cbModelParam._m0[1u].x) + (_1231 * (1.0 - cbModelParam._m0[1u].x));
    float _1255 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1336;
    float _1338;
    float _1340;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1303 = fma(_476, cbModelParam._m0[13u].z, fma(_472, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468)) + cbModelParam._m0[13u].w;
        float _1307 = fma(_476, cbModelParam._m0[14u].z, fma(_472, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468)) + cbModelParam._m0[14u].w;
        float _1311 = fma(_476, cbModelParam._m0[15u].z, fma(_472, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468)) + cbModelParam._m0[15u].w;
        float _1314 = fma(_446, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _444));
        float _1317 = fma(_446, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _444));
        float _1320 = fma(_446, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _444));
        float _1346;
        if (_1314 > 0.0)
        {
            _1346 = abs((1.0 - _1303) / _1314);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1303 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1346 = frontier_phi_17_15_ladder;
        }
        float _1519;
        if (_1317 > 0.0)
        {
            _1519 = abs((1.0 - _1307) / _1317);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1307 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1519 = frontier_phi_26_22_ladder;
        }
        float _1815;
        if (_1320 > 0.0)
        {
            _1815 = abs((1.0 - _1311) / _1320);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1311 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1815 = frontier_phi_38_33_ladder;
        }
        float _1817 = isnan(_1519) ? _1346 : (isnan(_1346) ? _1519 : min(_1346, _1519));
        float _1818 = isnan(_1815) ? _1817 : (isnan(_1817) ? _1815 : min(_1817, _1815));
        float _1822 = (_1818 * _1314) + _1303;
        float _1823 = (_1818 * _1317) + _1307;
        float _1824 = (_1818 * _1320) + _1311;
        float _1825 = _1818 * 9.9999997473787516355514526367188e-05;
        float _1827 = (-1.0) - _1825;
        float _1829 = _1825 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1824 > _1829) || ((_1824 < _1827) || ((_1823 > _1829) || ((_1823 < _1827) || ((_1822 < _1827) || (_1822 > _1829))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1824, cbModelParam._m0[9u].z, fma(_1823, cbModelParam._m0[9u].y, _1822 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1824, cbModelParam._m0[10u].z, fma(_1823, cbModelParam._m0[10u].y, _1822 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1824, cbModelParam._m0[11u].z, fma(_1823, cbModelParam._m0[11u].y, _1822 * cbModelParam._m0[11u].x))), _1255);
            frontier_phi_16_38_ladder = _1969.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1969.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1969.x * cbModelParam._m0[1u].y;
        }
        _1336 = frontier_phi_16_38_ladder_2;
        _1338 = frontier_phi_16_38_ladder_1;
        _1340 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1324 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_444, _445, _446), _1255);
        _1336 = _1324.x * cbModelParam._m0[1u].y;
        _1338 = _1324.y * cbModelParam._m0[1u].y;
        _1340 = _1324.z * cbModelParam._m0[1u].y;
    }
    float _1343 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1399 = fma(_476, cbModelParam._m0[21u].z, fma(_472, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468)) + cbModelParam._m0[21u].w;
        float _1403 = fma(_476, cbModelParam._m0[22u].z, fma(_472, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468)) + cbModelParam._m0[22u].w;
        float _1407 = fma(_476, cbModelParam._m0[23u].z, fma(_472, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468)) + cbModelParam._m0[23u].w;
        float _1410 = fma(_446, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _444));
        float _1413 = fma(_446, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _444));
        float _1416 = fma(_446, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _444));
        float _1524;
        if (_1410 > 0.0)
        {
            _1524 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1524 = frontier_phi_28_24_ladder;
        }
        float _1842;
        if (_1413 > 0.0)
        {
            _1842 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1842 = frontier_phi_40_35_ladder;
        }
        float _2115;
        if (_1416 > 0.0)
        {
            _2115 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2115 = frontier_phi_50_47_ladder;
        }
        float _2117 = isnan(_1842) ? _1524 : (isnan(_1524) ? _1842 : min(_1524, _1842));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1410) + _1399;
        float _2123 = (_2118 * _1413) + _1403;
        float _2124 = (_2118 * _1416) + _1407;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2125;
        float _2128 = _2125 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2124 > _2128) || ((_2124 < _2126) || ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 < _2126) || (_2122 > _2128))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2215 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2124, cbModelParam._m0[17u].z, fma(_2123, cbModelParam._m0[17u].y, _2122 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2124, cbModelParam._m0[18u].z, fma(_2123, cbModelParam._m0[18u].y, _2122 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2124, cbModelParam._m0[19u].z, fma(_2123, cbModelParam._m0[19u].y, _2122 * cbModelParam._m0[19u].x))), _1343);
            frontier_phi_25_50_ladder = _2215.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2215.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2215.x * cbModelParam._m0[1u].z;
        }
        _1435 = frontier_phi_25_50_ladder_2;
        _1437 = frontier_phi_25_50_ladder_1;
        _1439 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_444, _445, _446), _1343);
        _1435 = _1419.x * cbModelParam._m0[1u].z;
        _1437 = _1419.y * cbModelParam._m0[1u].z;
        _1439 = _1419.z * cbModelParam._m0[1u].z;
    }
    float _1451 = _436 * 0.01200000010430812835693359375;
    float _1453 = _1451 * ((cbModelParam._m0[1u].w * (_1435 - _1336)) + _1336);
    float _1454 = _1451 * ((cbModelParam._m0[1u].w * (_1437 - _1338)) + _1338);
    float _1455 = _1451 * ((cbModelParam._m0[1u].w * (_1439 - _1340)) + _1340);
    float _1458 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, _1453 * cbSceneParam._m0[91u].x));
    float _1498 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1502 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1506 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1510 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1511 = _1498 / _1510;
    float _1512 = _1502 / _1510;
    float _1513 = _1506 / _1510;
    float _1660;
    float _1661;
    float _1662;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1540 = ((uint(_1513 > cbSceneParam._m0[59u].y) + uint(_1513 > cbSceneParam._m0[59u].x)) + uint(_1513 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1541 = _1540 + 43u;
        uint _1549 = _1540 + 44u;
        uint _1557 = _1540 + 45u;
        uint _1565 = _1540 + 46u;
        float _1576 = fma(_1510, cbSceneParam._m0[_1541].w, fma(_1506, cbSceneParam._m0[_1541].z, fma(_1502, cbSceneParam._m0[_1541].y, _1498 * cbSceneParam._m0[_1541].x)));
        float _1580 = fma(_1510, cbSceneParam._m0[_1549].w, fma(_1506, cbSceneParam._m0[_1549].z, fma(_1502, cbSceneParam._m0[_1549].y, _1498 * cbSceneParam._m0[_1549].x)));
        float _1588 = fma(_1510, cbSceneParam._m0[_1565].w, fma(_1506, cbSceneParam._m0[_1565].z, fma(_1502, cbSceneParam._m0[_1565].y, _1498 * cbSceneParam._m0[_1565].x)));
        float _1593 = cbSceneParam._m0[33u].z * _1588;
        float _1595 = cbSceneParam._m0[33u].w * _1588;
        float _1598 = fma(_1510, cbSceneParam._m0[_1557].w, fma(_1506, cbSceneParam._m0[_1557].z, fma(_1502, cbSceneParam._m0[_1557].y, _1498 * cbSceneParam._m0[_1557].x))) / _1588;
        float _1646 = (cbSceneParam._m0[33u].x - sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513))) * cbSceneParam._m0[33u].y;
        float _3770 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1653 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1593 + _1576) / _1588, (_1595 + _1580) / _1588), _1598), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1595 + _1576) / _1588, (_1580 - _1593) / _1588), _1598), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1576 - _1593) / _1588, (_1580 - _1595) / _1588), _1598), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1576 - _1595) / _1588, (_1593 + _1580) / _1588), _1598), 0.0)).x), vec4(0.25)));
        _1660 = 1.0 - (_1653 * cbSceneParam._m0[34u].x);
        _1661 = 1.0 - (_1653 * cbSceneParam._m0[34u].y);
        _1662 = 1.0 - (_1653 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1660 = 1.0;
        _1661 = 1.0;
        _1662 = 1.0;
    }
    float _1726;
    float _1728;
    float _1730;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1714 = fma(_1510, cbSceneParam._m0[63u].w, fma(_1506, cbSceneParam._m0[63u].z, fma(_1502, cbSceneParam._m0[63u].y, _1498 * cbSceneParam._m0[63u].x)));
        float _1715 = fma(_1510, cbSceneParam._m0[60u].w, fma(_1506, cbSceneParam._m0[60u].z, fma(_1502, cbSceneParam._m0[60u].y, _1498 * cbSceneParam._m0[60u].x))) / _1714;
        float _1716 = fma(_1510, cbSceneParam._m0[61u].w, fma(_1506, cbSceneParam._m0[61u].z, fma(_1502, cbSceneParam._m0[61u].y, _1498 * cbSceneParam._m0[61u].x))) / _1714;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1715 >= cbSceneParam._m0[64u].x) && (_1716 >= cbSceneParam._m0[64u].y)) && (_1715 <= cbSceneParam._m0[64u].z)) && (_1716 <= cbSceneParam._m0[64u].w))
        {
            float _1855 = fma(_1510, cbSceneParam._m0[62u].w, fma(_1506, cbSceneParam._m0[62u].z, fma(_1502, cbSceneParam._m0[62u].y, _1498 * cbSceneParam._m0[62u].x))) / _1714;
            float _1859 = isnan(cbSceneParam._m0[41u].w) ? _1855 : (isnan(_1855) ? cbSceneParam._m0[41u].w : max(_1855, cbSceneParam._m0[41u].w));
            float _1902 = (cbSceneParam._m0[33u].x - sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513))) * cbSceneParam._m0[33u].y;
            float _3786 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
            float _1909 = (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1715, cbSceneParam._m0[33u].w + _1716), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1715, _1716 - cbSceneParam._m0[33u].z), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1715 - cbSceneParam._m0[33u].z, _1716 - cbSceneParam._m0[33u].w), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1715 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1716), _1859), 0.0)).x), vec4(0.25)));
            float _1913 = 1.0 - (_1909 * cbSceneParam._m0[34u].x);
            float _1914 = 1.0 - (_1909 * cbSceneParam._m0[34u].y);
            float _1915 = 1.0 - (_1909 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1915) ? _1662 : (isnan(_1662) ? _1915 : min(_1662, _1915));
            frontier_phi_37_36_ladder_1 = isnan(_1914) ? _1661 : (isnan(_1661) ? _1914 : min(_1661, _1914));
            frontier_phi_37_36_ladder_2 = isnan(_1913) ? _1660 : (isnan(_1660) ? _1913 : min(_1660, _1913));
        }
        else
        {
            frontier_phi_37_36_ladder = _1662;
            frontier_phi_37_36_ladder_1 = _1661;
            frontier_phi_37_36_ladder_2 = _1660;
        }
        _1726 = frontier_phi_37_36_ladder_2;
        _1728 = frontier_phi_37_36_ladder_1;
        _1730 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1726 = _1660;
        _1728 = _1661;
        _1730 = _1662;
    }
    uvec4 _1735 = floatBitsToUint(cbInstanceData._m0[_411 + 5u]);
    uint _1737 = _1735.x * 14u;
    uint _1738 = _1737 + 13u;
    float _1745 = _436 + (-1.0);
    float _1750 = (cbLight._m0[_1738].x * _1745) + 1.0;
    float _1751 = (cbLight._m0[_1738].y * _1745) + 1.0;
    float _1752 = (cbLight._m0[_1738].z * _1745) + 1.0;
    float _1753 = (cbLight._m0[_1738].w * _1745) + 1.0;
    uint _1754 = _1737 + 5u;
    float _1760 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1764 = _1737 + 4u;
    float _1774 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1778 = _1737 | 1u;
    float _1789 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_271, _272, _273));
    float _1792 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_271, _272, _273));
    float _3822 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _3833 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1797 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.3183098733425140380859375;
    float _1799 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1806 = ((cbLight._m0[_1754].x * _1760) * _1799) + (((cbLight._m0[_1764].x * _1726) * _1774) * _1797);
    float _1807 = ((_1760 * cbLight._m0[_1754].y) * _1799) + (((cbLight._m0[_1764].y * _1728) * _1774) * _1797);
    float _1808 = ((_1760 * cbLight._m0[_1754].z) * _1799) + (((cbLight._m0[_1764].z * _1730) * _1774) * _1797);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1737 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1814)
    {
        _1916 = _1806;
        _1918 = _1807;
        _1920 = _1808;
    }
    else
    {
        uint _1924 = _1737 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1737 + 2u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _3844 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1943 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1806;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1807;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1808;
    }
    bool _1923 = _1812.y == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1923)
    {
        _1978 = _1916;
        _1980 = _1918;
        _1982 = _1920;
    }
    else
    {
        uint _2086 = _1737 + 7u;
        float _2102 = (dot(vec3(cbLight._m0[_1737 + 3u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _3860 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _2105 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _1978 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1916;
        _1980 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1918;
        _1982 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1920;
    }
    uint _1984 = _1737 + 8u;
    float _1990 = cbLight._m0[_1737].x + _350;
    float _1991 = cbLight._m0[_1737].y + _351;
    float _1992 = cbLight._m0[_1737].z + _352;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _2000 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1737].xyz));
    float _3876 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _2004 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1990 * _1996, _1991 * _1996, _1992 * _1996));
    float _3898 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2022 = (0.5 / ((_2003 + 9.9999999392252902907785028219223e-09) + _2004)) * _2003;
    float _3909 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2024 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.31831014156341552734375;
    uint _2038 = _1737 + 9u;
    float _2044 = cbLight._m0[_1778].x + _350;
    float _2045 = cbLight._m0[_1778].y + _351;
    float _2046 = cbLight._m0[_1778].z + _352;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2054 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1778].xyz));
    float _3920 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_2044 * _2050, _2045 * _2050, _2046 * _2050));
    float _3931 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2067 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2071 = (0.5 / ((_2057 + 9.9999999392252902907785028219223e-09) + _2004)) * _2057;
    float _3942 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.31831014156341552734375;
    float _2083 = (((_2067 * cbLight._m0[_2038].x) * _2073) * _1760) + ((((cbLight._m0[_1984].x * _1726) * _2016) * _2024) * _1774);
    float _2084 = (((_2067 * cbLight._m0[_2038].y) * _2073) * _1760) + ((((cbLight._m0[_1984].y * _1728) * _2016) * _2024) * _1774);
    float _2085 = (((_2067 * cbLight._m0[_2038].z) * _2073) * _1760) + ((((cbLight._m0[_1984].z * _1730) * _2016) * _2024) * _1774);
    float _2141;
    float _2143;
    float _2145;
    if (_1814)
    {
        _2141 = _2083;
        _2143 = _2084;
        _2145 = _2085;
    }
    else
    {
        uint _2147 = _1737 + 10u;
        uint _2153 = _1737 + 2u;
        float _2159 = cbLight._m0[_2153].x + _350;
        float _2160 = cbLight._m0[_2153].y + _351;
        float _2161 = cbLight._m0[_2153].z + _352;
        float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
        float _2169 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_2153].xyz));
        float _3953 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2159 * _2165, _2160 * _2165, _2161 * _2165));
        float _3964 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2186 = (0.5 / ((_2172 + 9.9999999392252902907785028219223e-09) + _2004)) * _2172;
        float _3975 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * 0.31831014156341552734375;
        float _2189 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2141 = (((_2182 * cbLight._m0[_2147].x) * _2188) * _2189) + _2083;
        _2143 = (((_2182 * cbLight._m0[_2147].y) * _2188) * _2189) + _2084;
        _2145 = (((_2182 * cbLight._m0[_2147].z) * _2188) * _2189) + _2085;
    }
    float _2220;
    float _2222;
    float _2224;
    if (_1923)
    {
        _2220 = _2141;
        _2222 = _2143;
        _2224 = _2145;
    }
    else
    {
        uint _2231 = _1737 + 11u;
        uint _2237 = _1737 + 3u;
        float _2243 = cbLight._m0[_2237].x + _350;
        float _2244 = cbLight._m0[_2237].y + _351;
        float _2245 = cbLight._m0[_2237].z + _352;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2253 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_2237].xyz));
        float _3991 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2257 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2243 * _2249, _2244 * _2249, _2245 * _2249));
        float _4002 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2270 = (0.5 / ((_2256 + 9.9999999392252902907785028219223e-09) + _2004)) * _2256;
        float _4013 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * 0.31831014156341552734375;
        float _2273 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _2220 = (((_2266 * cbLight._m0[_2231].x) * _2272) * _2273) + _2141;
        _2222 = (((_2266 * cbLight._m0[_2231].y) * _2272) * _2273) + _2143;
        _2224 = (((_2266 * cbLight._m0[_2231].z) * _2272) * _2273) + _2145;
    }
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_1735.y == 0u)
    {
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.x;
        uint _2306 = uint((float(_2294.y) * floor(float(uint(cbSceneParam._m0[85u].y * _372) / _2295))) + floor(float(uint(cbSceneParam._m0[85u].x * _371) / _2295)));
        float _2316 = (log2(_1513 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2317 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        uint _2320 = uint(isnan(14.0) ? _2317 : (isnan(_2317) ? 14.0 : min(_2317, 14.0)));
        uvec4 _2325 = texelFetch(g_lightClusterGridBuffer, int(((_2320 << 2u) + (_2306 << 6u)) >> 2u));
        uint _2326 = _2325.x;
        uint _2327 = _2294.z;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        if (((((1u << ((_2327 >> 4u) & 15u)) + 4294967295u) & _2326) == 0u) || ((_2327 & 240u) == 0u))
        {
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
        }
        else
        {
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            uint _2612 = 0u;
            uint _2621;
            bool _2622;
            for (;;)
            {
                _2621 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                _2622 = _2621 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2622)
                {
                    frontier_phi_71_pred = _2611;
                    frontier_phi_71_pred_1 = _2610;
                    frontier_phi_71_pred_2 = _2609;
                    frontier_phi_71_pred_3 = _2608;
                    frontier_phi_71_pred_4 = _2607;
                    frontier_phi_71_pred_5 = _2606;
                }
                else
                {
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    uint _2757;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2621;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    for (;;)
                    {
                        uint _2761 = uint(findLSB(_2757)) + (_2612 << 5u);
                        uint _2758 = (_2757 + 4294967295u) & _2757;
                        uint _2763 = _2761 * 48u;
                        vec4 _2777 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2783 = (_2761 * 48u) + 4u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2802 = (_2761 * 48u) + 8u;
                        vec3 _2813 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x));
                        float _2817 = _2777.x - _1511;
                        float _2818 = _2777.y - _1512;
                        float _2819 = _2777.z - _1513;
                        float _2820 = dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819));
                        float _2823 = inversesqrt(_2820);
                        float _2832 = 1.0 - (_2820 * _2777.w);
                        float _4039 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2834 = sqrt(_2820) * _2796.w;
                        float _2837 = 1.39999997615814208984375 / (_2834 + 1.39999997615814208984375);
                        float _2838 = _2837 * _2837;
                        float _2841 = ((1.0 - _2838) * dot(vec3(_392, _395, _398), vec3(_2823 * _2817, _2823 * _2818, _2823 * _2819))) + _2838;
                        float _2844 = _2834 * _2834;
                        float _2848 = ((isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0))) * _2833) / ((_2844 * 0.699999988079071044921875) + 1.0);
                        float _2852 = (-0.0) - _1511;
                        float _2853 = (-0.0) - _1512;
                        float _2854 = (-0.0) - _1513;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2862 = dot(vec3(_392, _395, _398), vec3(_2858 * _2852, _2858 * _2853, _2858 * _2854));
                        float _4055 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _4066 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2866 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2870 = (0.5 / (((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) + 9.9999999392252902907785028219223e-09) + _2866)) * _2866;
                        float _4077 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2879 = (((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 3.1415927410125732421875) / ((_2844 * 2.1991131305694580078125) + 3.141590118408203125)) * _2833;
                        _2681 = (_2848 * _2796.x) + _2754;
                        _2682 = (_2848 * _2796.y) + _2755;
                        _2683 = (_2848 * _2796.z) + _2756;
                        _2678 = (_2879 * _2813.x) + _2751;
                        _2679 = (_2879 * _2813.y) + _2752;
                        _2680 = (_2879 * _2813.z) + _2753;
                        if (_2758 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2758;
                        }
                    }
                    frontier_phi_71_pred = _2683;
                    frontier_phi_71_pred_1 = _2682;
                    frontier_phi_71_pred_2 = _2681;
                    frontier_phi_71_pred_3 = _2680;
                    frontier_phi_71_pred_4 = _2679;
                    frontier_phi_71_pred_5 = _2678;
                }
                _2458 = frontier_phi_71_pred;
                _2456 = frontier_phi_71_pred_1;
                _2454 = frontier_phi_71_pred_2;
                _2452 = frontier_phi_71_pred_3;
                _2450 = frontier_phi_71_pred_4;
                _2448 = frontier_phi_71_pred_5;
                uint _2613 = _2612 + 1u;
                if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2606 = _2448;
                    _2607 = _2450;
                    _2608 = _2452;
                    _2609 = _2454;
                    _2610 = _2456;
                    _2611 = _2458;
                    _2612 = _2613;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
        }
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.z;
        uint _2464 = (_2462 >> 8u) & 15u;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((4294967295u << _2464) & _2326) == 0u)
        {
            _2577 = _2447;
            _2579 = _2449;
            _2581 = _2451;
            _2583 = _2453;
            _2585 = _2455;
            _2587 = _2457;
        }
        else
        {
            float _2602 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2464 < ((_2462 >> 12u) & 15u))
            {
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2734 = _2447;
                float _2735 = _2449;
                float _2736 = _2451;
                float _2737 = _2453;
                float _2738 = _2455;
                float _2739 = _2457;
                uint _2740 = _2464;
                uint _2749;
                bool _2750;
                for (;;)
                {
                    _2749 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                    _2750 = _2749 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2750)
                    {
                        frontier_phi_82_pred = _2739;
                        frontier_phi_82_pred_1 = _2738;
                        frontier_phi_82_pred_2 = _2737;
                        frontier_phi_82_pred_3 = _2736;
                        frontier_phi_82_pred_4 = _2735;
                        frontier_phi_82_pred_5 = _2734;
                    }
                    else
                    {
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _2906 = _2734;
                        float _2907 = _2735;
                        float _2908 = _2736;
                        float _2909 = _2737;
                        float _2910 = _2738;
                        float _2911 = _2739;
                        uint _2912 = _2749;
                        uint _2913;
                        vec4 _2938;
                        float _2939;
                        vec4 _2954;
                        vec3 _2966;
                        vec4 _2982;
                        vec4 _2998;
                        float _3045;
                        bool _3046;
                        for (;;)
                        {
                            uint _2923 = ((_2740 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2912));
                            _2913 = (_2912 + 4294967295u) & _2912;
                            uint _2925 = _2923 * 40u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2939 = _2938.w;
                            uint _2941 = (_2923 * 40u) + 4u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2956 = (_2923 * 40u) + 8u;
                            _2966 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x));
                            uint _2969 = (_2923 * 40u) + 16u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2985 = (_2923 * 40u) + 20u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3001 = (_2923 * 40u) + 24u;
                            vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3020 = (_2923 * 40u) + 28u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3045 = fma(_1513, _3033.z, fma(_1512, _3033.y, _3033.x * _1511)) + _3033.w;
                            _3046 = !((fma(_1513, _3014.z, fma(_1512, _3014.y, _3014.x * _1511)) + _3014.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3046)
                            {
                                float _3073 = _2938.x - _1511;
                                float _3074 = _2938.y - _1512;
                                float _3075 = _2938.z - _1513;
                                float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                                float _3079 = inversesqrt(_3076);
                                float _3080 = _3079 * _3073;
                                float _3081 = _3079 * _3074;
                                float _3082 = _3079 * _3075;
                                float _3086 = 1.0 - (_3076 / (_2939 * _2939));
                                float _4088 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3091 = sqrt(_3076) * _2954.w;
                                float _3093 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                                float _3094 = _3093 * _3093;
                                float _3095 = 1.0 - _3094;
                                float _3097 = (_3095 * dot(vec3(_3080, _3081, _3082), vec3(_392, _395, _398))) + _3094;
                                float _3100 = _3091 * _3091;
                                float _3104 = (fma(_1513, _2982.z, fma(_1512, _2982.y, _2982.x * _1511)) + _2982.w) / _3045;
                                float _3105 = (fma(_1513, _2998.z, fma(_1512, _2998.y, _2998.x * _1511)) + _2998.w) / _3045;
                                float _3109 = 1.0 - dot(vec2(_3104, _3105), vec2(_3104, _3105));
                                float _4104 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3111 = _3110 * (((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3087) / ((_3100 * 0.699999988079071044921875) + 1.0));
                                float _3121 = dot(vec3(_392, _395, _398), vec3((-0.0) - (_1511 * _2602), (-0.0) - (_1512 * _2602), (-0.0) - (_1513 * _2602)));
                                float _4115 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3129 = (_3095 * dot(vec3(_392, _395, _398), vec3(_3080, _3081, _3082))) + _3094;
                                float _4126 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3130 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3134 = (0.5 / (((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) + 9.9999999392252902907785028219223e-09) + _3130)) * _3130;
                                float _4137 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3141 = (_3110 * _3087) * (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 3.1415927410125732421875) / ((_3100 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3111 * _2954.z;
                                frontier_phi_88_pred_1 = _3111 * _2954.y;
                                frontier_phi_88_pred_2 = _3111 * _2954.x;
                                frontier_phi_88_pred_3 = _3141 * _2966.z;
                                frontier_phi_88_pred_4 = _3141 * _2966.y;
                                frontier_phi_88_pred_5 = _3141 * _2966.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3150 = frontier_phi_88_pred;
                            _3149 = frontier_phi_88_pred_1;
                            _3148 = frontier_phi_88_pred_2;
                            _3147 = frontier_phi_88_pred_3;
                            _3146 = frontier_phi_88_pred_4;
                            _3145 = frontier_phi_88_pred_5;
                            _2896 = _3148 + _2909;
                            _2897 = _3149 + _2910;
                            _2898 = _3150 + _2911;
                            _2893 = _3145 + _2906;
                            _2894 = _3146 + _2907;
                            _2895 = _3147 + _2908;
                            if (_2913 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2913;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2898;
                        frontier_phi_82_pred_1 = _2897;
                        frontier_phi_82_pred_2 = _2896;
                        frontier_phi_82_pred_3 = _2895;
                        frontier_phi_82_pred_4 = _2894;
                        frontier_phi_82_pred_5 = _2893;
                    }
                    _2588 = frontier_phi_82_pred;
                    _2586 = frontier_phi_82_pred_1;
                    _2584 = frontier_phi_82_pred_2;
                    _2582 = frontier_phi_82_pred_3;
                    _2580 = frontier_phi_82_pred_4;
                    _2578 = frontier_phi_82_pred_5;
                    uint _2741 = _2740 + 1u;
                    if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2734 = _2578;
                        _2735 = _2580;
                        _2736 = _2582;
                        _2737 = _2584;
                        _2738 = _2586;
                        _2739 = _2588;
                        _2740 = _2741;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2584;
                frontier_phi_63_64_ladder_1 = _2588;
                frontier_phi_63_64_ladder_2 = _2586;
                frontier_phi_63_64_ladder_3 = _2582;
                frontier_phi_63_64_ladder_4 = _2580;
                frontier_phi_63_64_ladder_5 = _2578;
            }
            else
            {
                frontier_phi_63_64_ladder = _2453;
                frontier_phi_63_64_ladder_1 = _2457;
                frontier_phi_63_64_ladder_2 = _2455;
                frontier_phi_63_64_ladder_3 = _2451;
                frontier_phi_63_64_ladder_4 = _2449;
                frontier_phi_63_64_ladder_5 = _2447;
            }
            _2577 = frontier_phi_63_64_ladder_5;
            _2579 = frontier_phi_63_64_ladder_4;
            _2581 = frontier_phi_63_64_ladder_3;
            _2583 = frontier_phi_63_64_ladder;
            _2585 = frontier_phi_63_64_ladder_2;
            _2587 = frontier_phi_63_64_ladder_1;
        }
        float _2592 = isnan(1.0) ? _436 : (isnan(_436) ? 1.0 : min(_436, 1.0));
        _2339 = (_2592 * _2583) + _1978;
        _2341 = (_2592 * _2585) + _1980;
        _2343 = (_2592 * _2587) + _1982;
        _2345 = ((_2577 * 0.039999999105930328369140625) * _2592) + _2220;
        _2347 = ((_2579 * 0.039999999105930328369140625) * _2592) + _2222;
        _2349 = ((_2581 * 0.039999999105930328369140625) * _2592) + _2224;
    }
    else
    {
        _2339 = _1978;
        _2341 = _1980;
        _2343 = _1982;
        _2345 = _2220;
        _2347 = _2222;
        _2349 = _2224;
    }
    uint _2355 = _412 + uint(cbMatDynParam._m0[0u].w);
    float _2365 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _239.x) * cbSceneParam._m0[72u].y) * _262) * cbInstanceData._m0[_2355].x;
    float _2370 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _239.y) * cbSceneParam._m0[72u].y) * _262) * cbInstanceData._m0[_2355].y;
    float _2375 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _239.z) * cbSceneParam._m0[72u].y) * _262) * cbInstanceData._m0[_2355].z;
    float _4153 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _4164 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _4175 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _2392 = (((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2339 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _436))) + ((_2345 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1246)) * cbPerFrame._m0[3u].x)) + _2365;
    float _2394 = (_2370 + ((_2347 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1246)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2341 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _436)));
    float _2396 = (_2375 + ((_2349 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _1246)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2343 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _436)));
    float _2397 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2398 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2399 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2405 = cbMtdParam._m0[2u].x * _2365;
    float _2406 = cbMtdParam._m0[2u].y * _2370;
    float _2407 = cbMtdParam._m0[2u].z * _2375;
    float _4201 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2409 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    uint _2410 = _411 + 6u;
    float _2418 = _371 / cbSceneParam._m0[86u].x;
    float _2419 = _372 / cbSceneParam._m0[86u].y;
    vec4 _2433 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, (log2((isnan(cbSceneParam._m0[77u].w) ? _292 : (isnan(_292) ? cbSceneParam._m0[77u].w : min(_292, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2435 = _2433.x;
    float _2436 = _2433.y;
    float _2437 = _2433.z;
    float _2438 = _2433.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_292 > cbSceneParam._m0[78u].w)
    {
        float _2472 = isnan(_292) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _292 : min(cbSceneParam._m0[80u].w, _292));
        float _2473 = _2472 / _292;
        float _2484 = _2473 * _343;
        float _2485 = _344 * _2473;
        float _2486 = (-0.0) - _2485;
        float _2488 = _2473 * _345;
        float _2490 = (cbSceneParam._m0[77u].w * _2486) / _2472;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2485;
        float _2498 = sqrt(((_2484 * _2484) + (_2485 * _2485)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2472)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2691;
        if (abs((_2486 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2691 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2635 = 1.0 / cbSceneParam._m0[80u].x;
            float _2636 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2637 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            _2691 = ((abs(_2498 / _2486) * cbSceneParam._m0[80u].y) * ((((_2646 - _2647) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0))))) * _2635)) - ((exp2(_2508 * _2646) - exp2(_2508 * _2647)) * _2635))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2693 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, 1.0), 0.0);
        float _2702 = exp2((_2691 * (-1.44269502162933349609375)) * (1.0 - _2693.w));
        float _2703 = log2(_2702);
        float _2719 = log2(_2438);
        _2510 = (exp2(_2719 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].x)) * _2693.x) / cbSceneParam._m0[78u].x)) + _2435;
        _2512 = (exp2(_2719 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].y)) * _2693.y) / cbSceneParam._m0[78u].y)) + _2436;
        _2514 = (exp2(_2719 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].z)) * _2693.z) / cbSceneParam._m0[78u].z)) + _2437;
        _2516 = _2702 * _2438;
    }
    else
    {
        _2510 = _2435;
        _2512 = _2436;
        _2514 = _2437;
        _2516 = _2438;
    }
    bool _2729;
    vec4 _2525;
    vec4 _2547;
    float _2549;
    float _2553;
    float _2554;
    float _2555;
    float _2558;
    float _2561;
    float _2564;
    float _2565;
    bool _2576;
    for (;;)
    {
        _2525 = cbMatDynParam._m0[0u];
        float _2527 = roundEven(_2525.y);
        bool _2528 = _2527 == 3.0;
        float _2529 = log2(_2516);
        float _2533 = exp2(_2529 * cbSceneParam._m0[78u].x);
        float _2534 = exp2(_2529 * cbSceneParam._m0[78u].y);
        float _2535 = exp2(_2529 * cbSceneParam._m0[78u].z);
        float _2536 = _2533 * _2397;
        float _2537 = _2534 * _2398;
        float _2538 = _2535 * _2399;
        float _2545 = _359 + (-0.5);
        _2547 = cbMtdParam._m0[1u];
        _2549 = _2547.y * _2545;
        float _2552 = (_2527 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2553 = _2552 * (_2528 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2510)));
        _2554 = _2552 * (_2528 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2512)));
        _2555 = _2552 * (_2528 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2514)));
        _2558 = ((_2405 * _2409) * _2533) * _2552;
        _2561 = ((_2406 * _2409) * _2534) * _2552;
        _2564 = ((_2407 * _2409) * _2535) * _2552;
        _2565 = _2545 * 0.999000012874603271484375;
        _2576 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2576)
        {
            if ((cbInstanceData._m0[_411 + 7u].x + _2565) < 0.5)
            {
                _2729 = true;
                break;
            }
        }
        uint _2670 = _412 + uint(_2525.w);
        if ((cbInstanceData._m0[_2670].w < 1.0) && ((cbInstanceData._m0[_2670].w + _2565) < 0.5))
        {
            _2729 = true;
            break;
        }
        if ((_2549 + 1.0) < _2547.x)
        {
            _2729 = true;
            break;
        }
        _2729 = false;
        break;
    }
    float _2884;
    if (_2729)
    {
        discard_state = true;
        _2884 = 0.0;
    }
    else
    {
        _2884 = cbInstanceData._m0[_2410].w;
    }
    SV_Target.x = _2553;
    SV_Target.y = _2554;
    SV_Target.z = _2555;
    SV_Target.w = _2884;
    SV_Target_1.x = _2558;
    SV_Target_1.y = _2561;
    SV_Target_1.z = _2564;
    SV_Target_1.w = cbInstanceData._m0[_2410].w;
    discard_exit();
}


