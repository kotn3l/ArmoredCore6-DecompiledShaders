#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _787;
float _2995;
float _2996;
float _2997;
float _2998;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _235 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _247 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _248 = _247 * _169;
    float _249 = _247 * _170;
    float _250 = _247 * _171;
    float _3007 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3018 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3029 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _270 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _311 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _321 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _311);
    float _322 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _311);
    float _323 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _311);
    float _327 = inversesqrt(dot(vec3(_321, _322, _323), vec3(_321, _322, _323)));
    float _328 = _321 * _327;
    float _329 = _322 * _327;
    float _330 = _323 * _327;
    vec4 _335 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _337 = _335.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _466 = sqrt(((_321 * _321) + (_322 * _322)) + (_323 * _323));
        float _472 = (cbMatDynParam._m0[5u].x * _466) + cbMatDynParam._m0[5u].y;
        float _3040 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
        float _473 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _477 = (cbMatDynParam._m0[5u].z * _466) + cbMatDynParam._m0[5u].w;
        float _3051 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0))) - _473)) + _473) < ((_337 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _349 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _350 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _370 = fma(_250, cbSceneParam._m0[5u].z, fma(_249, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _248));
    float _373 = fma(_250, cbSceneParam._m0[6u].z, fma(_249, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _248));
    float _376 = fma(_250, cbSceneParam._m0[7u].z, fma(_249, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _248));
    uint _389 = uint(roundEven(NORMAL.w)) * 13u;
    uint _390 = _389 + 9u;
    uint _391 = _390 + uint(cbMatDynParam._m0[0u].w);
    float _397 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0)))) * cbInstanceData._m0[_391].x;
    float _398 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0)))) * cbInstanceData._m0[_391].y;
    float _399 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0)))) * cbInstanceData._m0[_391].z;
    float _3062 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _400 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
    float _3073 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _401 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
    float _3084 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
    vec4 _411 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _349, cbSceneParam._m0[86u].y * _350));
    float _414 = _411.x * TEXCOORD.z;
    float _415 = dot(vec3(_248, _249, _250), vec3(_328, _329, _330));
    float _418 = _415 * 2.0;
    float _423 = (_418 * _248) - _328;
    float _424 = (_418 * _249) - _329;
    float _425 = (_418 * _250) - _330;
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _786;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _511 = fma(_455, cbModelParam._m0[26u].z, fma(_451, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _447));
        float _515 = fma(_455, cbModelParam._m0[27u].z, fma(_451, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _447));
        float _519 = fma(_455, cbModelParam._m0[28u].z, fma(_451, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _447));
        float _544 = _447 + _248;
        float _545 = _451 + _249;
        float _546 = _455 + _250;
        float _556 = fma(_546, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544)) - _511;
        float _557 = fma(_546, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544)) - _515;
        float _558 = fma(_546, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544)) - _519;
        float _562 = inversesqrt(dot(vec3(_556, _557, _558), vec3(_556, _557, _558)));
        float _575 = ((_562 * _556) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_511 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _576 = ((_562 * _557) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_515 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _577 = ((_562 * _558) / cbModelParam._m0[34u].z) + ((((((_519 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        float _614 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_580.x + (-0.5));
        float _616 = _614 * (_580.y + (-0.5));
        float _617 = _614 * (_580.z + (-0.5));
        float _624 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_587.x + (-0.5));
        float _626 = _624 * (_587.y + (-0.5));
        float _627 = _624 * (_587.z + (-0.5));
        float _634 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_594.x + (-0.5));
        float _636 = _634 * (_594.y + (-0.5));
        float _637 = _634 * (_594.z + (-0.5));
        float _644 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_601.x + (-0.5));
        float _646 = _644 * (_601.y + (-0.5));
        float _647 = _644 * (_601.z + (-0.5));
        float _648 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _649 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = _615 * 0.5;
        float _652 = _625 * 0.5;
        float _653 = _635 * 0.5;
        float _654 = dot(vec3(_651, _652, _653), vec3(_651, _652, _653));
        float _659 = (_654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_654);
        float _668 = (dot(vec3(_248, _249, _250), vec3(_659 * _651, _659 * _652, _659 * _653)) + 1.0) * 0.5;
        float _3110 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _678 = sqrt(((_652 * _652) + (_651 * _651)) + (_653 * _653)) / (_648 + 9.9999997473787516355514526367188e-06);
        float _3121 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _680 = _679 * 2.0;
        float _684 = (1.0 - _679) / (_679 + 1.0);
        float _3132 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _694 = ((((1.0 - _685) * (_680 + 2.0)) * exp2(log2(isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0))) * (_680 + 1.0))) + _685) * _648;
        float _695 = _616 * 0.5;
        float _696 = _626 * 0.5;
        float _697 = _636 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _711 = (dot(vec3(_248, _249, _250), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _3143 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _720 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_649 + 9.9999997473787516355514526367188e-06);
        float _3154 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _722 = _721 * 2.0;
        float _726 = (1.0 - _721) / (_721 + 1.0);
        float _3165 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _736 = ((((1.0 - _727) * (_722 + 2.0)) * exp2(log2(isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))) * (_722 + 1.0))) + _727) * _649;
        float _737 = _617 * 0.5;
        float _738 = _627 * 0.5;
        float _739 = _637 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _753 = (dot(vec3(_248, _249, _250), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3176 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _762 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3187 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3198 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_764 + 1.0))) + _769) * _650;
        _786 = _617;
        _788 = _616;
        _789 = _615;
        _790 = _627;
        _791 = _626;
        _792 = _625;
        _793 = _637;
        _794 = _636;
        _795 = _635;
        _796 = _650;
        _797 = _649;
        _798 = _648;
        _799 = cbModelParam._m0[36u].z * (isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0)));
        _800 = cbModelParam._m0[36u].z * (isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0)));
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
    }
    else
    {
        _786 = _787;
        _788 = _787;
        _789 = _787;
        _790 = _787;
        _791 = _787;
        _792 = _787;
        _793 = _787;
        _794 = _787;
        _795 = _787;
        _796 = _787;
        _797 = _787;
        _798 = _787;
        _799 = 0.0;
        _800 = 0.0;
        _801 = 0.0;
    }
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _830 = fma(_455, cbModelParam._m0[30u].z, fma(_451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _447));
        float _834 = fma(_455, cbModelParam._m0[31u].z, fma(_451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _447));
        float _838 = fma(_455, cbModelParam._m0[32u].z, fma(_451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _447));
        float _861 = _447 + _248;
        float _862 = _451 + _249;
        float _863 = _455 + _250;
        float _873 = fma(_863, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861)) - _830;
        float _874 = fma(_863, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861)) - _834;
        float _875 = fma(_863, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861)) - _838;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_830 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_834 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[35u].z) + ((((((_838 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _929 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_896.x + (-0.5));
        float _931 = _929 * (_896.y + (-0.5));
        float _932 = _929 * (_896.z + (-0.5));
        float _939 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_903.x + (-0.5));
        float _941 = _939 * (_903.y + (-0.5));
        float _942 = _939 * (_903.z + (-0.5));
        float _949 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_910.x + (-0.5));
        float _951 = _949 * (_910.y + (-0.5));
        float _952 = _949 * (_910.z + (-0.5));
        float _959 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_917.x + (-0.5));
        float _961 = _959 * (_917.y + (-0.5));
        float _962 = _959 * (_917.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_248, _249, _250), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3261 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_993 + 1.0))) + _998) * _963;
        float _1008 = _931 * 0.5;
        float _1009 = _941 * 0.5;
        float _1010 = _951 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_248, _249, _250), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3294 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_1035 + 1.0))) + _1040) * _964;
        float _1050 = _932 * 0.5;
        float _1051 = _942 * 0.5;
        float _1052 = _952 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_248, _249, _250), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3327 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1077 + 1.0))) + _1082) * _965;
        _1099 = _932;
        _1100 = _931;
        _1101 = _930;
        _1102 = _942;
        _1103 = _941;
        _1104 = _940;
        _1105 = _952;
        _1106 = _951;
        _1107 = _950;
        _1108 = _965;
        _1109 = _964;
        _1110 = _963;
        _1111 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1112 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1113 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _787;
        _1100 = _787;
        _1101 = _787;
        _1102 = _787;
        _1103 = _787;
        _1104 = _787;
        _1105 = _787;
        _1106 = _787;
        _1107 = _787;
        _1108 = _787;
        _1109 = _787;
        _1110 = _787;
        _1111 = 0.0;
        _1112 = 0.0;
        _1113 = 0.0;
    }
    float _1123 = (cbModelParam._m0[1u].x * (_1111 - _799)) + _799;
    float _1124 = (cbModelParam._m0[1u].x * (_1112 - _800)) + _800;
    float _1125 = (cbModelParam._m0[1u].x * (_1113 - _801)) + _801;
    float _1146 = fma(_1125, cbSceneParam._m0[89u].z, fma(_1124, cbSceneParam._m0[89u].y, _1123 * cbSceneParam._m0[89u].x));
    float _1149 = fma(_1125, cbSceneParam._m0[90u].z, fma(_1124, cbSceneParam._m0[90u].y, _1123 * cbSceneParam._m0[90u].x));
    float _1152 = fma(_1125, cbSceneParam._m0[91u].z, fma(_1124, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1123));
    float _1167 = _423 * 0.5;
    float _1168 = _424 * 0.5;
    float _1169 = _425 * 0.5;
    float _1170 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_1101, _1104, _1107, _1110));
    float _1173 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_1100, _1103, _1106, _1109));
    float _1176 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_1099, _1102, _1105, _1108));
    float _1210;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1183 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_786, _790, _793, _796));
        float _1187 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_788, _791, _794, _797));
        float _1191 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_789, _792, _795, _798));
        float _1198 = dot(vec4(cbModelParam._m0[39u]), vec4(_1167, _1168, _1169, 1.0));
        _1210 = dot(vec3(isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1210 = 1.0;
    }
    float _1221;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1212 = dot(vec4(cbModelParam._m0[40u]), vec4(_1167, _1168, _1169, 1.0));
        _1221 = dot(vec3(isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1212) ? 0.0 : (isnan(0.0) ? _1212 : max(0.0, _1212))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1221 = 1.0;
    }
    float _1225 = (_1221 * cbModelParam._m0[1u].x) + (_1210 * (1.0 - cbModelParam._m0[1u].x));
    float _1234 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1315;
    float _1317;
    float _1319;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1282 = fma(_455, cbModelParam._m0[13u].z, fma(_451, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _447)) + cbModelParam._m0[13u].w;
        float _1286 = fma(_455, cbModelParam._m0[14u].z, fma(_451, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _447)) + cbModelParam._m0[14u].w;
        float _1290 = fma(_455, cbModelParam._m0[15u].z, fma(_451, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _447)) + cbModelParam._m0[15u].w;
        float _1293 = fma(_425, cbModelParam._m0[13u].z, fma(_424, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _423));
        float _1296 = fma(_425, cbModelParam._m0[14u].z, fma(_424, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _423));
        float _1299 = fma(_425, cbModelParam._m0[15u].z, fma(_424, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _423));
        float _1325;
        if (_1293 > 0.0)
        {
            _1325 = abs((1.0 - _1282) / _1293);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1293 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1282 + 1.0) / _1293);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1325 = frontier_phi_17_15_ladder;
        }
        float _1531;
        if (_1296 > 0.0)
        {
            _1531 = abs((1.0 - _1286) / _1296);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1286 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1531 = frontier_phi_26_22_ladder;
        }
        float _1720;
        if (_1299 > 0.0)
        {
            _1720 = abs((1.0 - _1290) / _1299);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1290 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1720 = frontier_phi_38_33_ladder;
        }
        float _1722 = isnan(_1531) ? _1325 : (isnan(_1325) ? _1531 : min(_1325, _1531));
        float _1723 = isnan(_1720) ? _1722 : (isnan(_1722) ? _1720 : min(_1722, _1720));
        float _1727 = (_1723 * _1293) + _1282;
        float _1728 = (_1723 * _1296) + _1286;
        float _1729 = (_1723 * _1299) + _1290;
        float _1730 = _1723 * 9.9999997473787516355514526367188e-05;
        float _1732 = (-1.0) - _1730;
        float _1734 = _1730 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1729 > _1734) || ((_1729 < _1732) || ((_1728 > _1734) || ((_1728 < _1732) || ((_1727 < _1732) || (_1727 > _1734))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1729, cbModelParam._m0[9u].z, fma(_1728, cbModelParam._m0[9u].y, _1727 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1729, cbModelParam._m0[10u].z, fma(_1728, cbModelParam._m0[10u].y, _1727 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1729, cbModelParam._m0[11u].z, fma(_1728, cbModelParam._m0[11u].y, _1727 * cbModelParam._m0[11u].x))), _1234);
            frontier_phi_16_38_ladder = _1826.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1826.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1826.x * cbModelParam._m0[1u].y;
        }
        _1315 = frontier_phi_16_38_ladder_2;
        _1317 = frontier_phi_16_38_ladder_1;
        _1319 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1303 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_423, _424, _425), _1234);
        _1315 = _1303.x * cbModelParam._m0[1u].y;
        _1317 = _1303.y * cbModelParam._m0[1u].y;
        _1319 = _1303.z * cbModelParam._m0[1u].y;
    }
    float _1322 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1378 = fma(_455, cbModelParam._m0[21u].z, fma(_451, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _447)) + cbModelParam._m0[21u].w;
        float _1382 = fma(_455, cbModelParam._m0[22u].z, fma(_451, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _447)) + cbModelParam._m0[22u].w;
        float _1386 = fma(_455, cbModelParam._m0[23u].z, fma(_451, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _447)) + cbModelParam._m0[23u].w;
        float _1389 = fma(_425, cbModelParam._m0[21u].z, fma(_424, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _423));
        float _1392 = fma(_425, cbModelParam._m0[22u].z, fma(_424, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _423));
        float _1395 = fma(_425, cbModelParam._m0[23u].z, fma(_424, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _423));
        float _1536;
        if (_1389 > 0.0)
        {
            _1536 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1536 = frontier_phi_28_24_ladder;
        }
        float _1747;
        if (_1392 > 0.0)
        {
            _1747 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1747 = frontier_phi_40_35_ladder;
        }
        float _1898;
        if (_1395 > 0.0)
        {
            _1898 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1898 = frontier_phi_49_46_ladder;
        }
        float _1900 = isnan(_1747) ? _1536 : (isnan(_1536) ? _1747 : min(_1536, _1747));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1389) + _1378;
        float _1906 = (_1901 * _1392) + _1382;
        float _1907 = (_1901 * _1395) + _1386;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1909 = (-1.0) - _1908;
        float _1911 = _1908 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1907 > _1911) || ((_1907 < _1909) || ((_1906 > _1911) || ((_1906 < _1909) || ((_1905 < _1909) || (_1905 > _1911))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2144 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1907, cbModelParam._m0[17u].z, fma(_1906, cbModelParam._m0[17u].y, _1905 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1907, cbModelParam._m0[18u].z, fma(_1906, cbModelParam._m0[18u].y, _1905 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1907, cbModelParam._m0[19u].z, fma(_1906, cbModelParam._m0[19u].y, _1905 * cbModelParam._m0[19u].x))), _1322);
            frontier_phi_25_49_ladder = _2144.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2144.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2144.x * cbModelParam._m0[1u].z;
        }
        _1414 = frontier_phi_25_49_ladder_2;
        _1416 = frontier_phi_25_49_ladder_1;
        _1418 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_423, _424, _425), _1322);
        _1414 = _1398.x * cbModelParam._m0[1u].z;
        _1416 = _1398.y * cbModelParam._m0[1u].z;
        _1418 = _1398.z * cbModelParam._m0[1u].z;
    }
    float _1430 = _414 * 0.01200000010430812835693359375;
    float _1432 = _1430 * ((cbModelParam._m0[1u].w * (_1414 - _1315)) + _1315);
    float _1433 = _1430 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1434 = _1430 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1437 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, _1432 * cbSceneParam._m0[91u].x));
    uvec4 _1453 = floatBitsToUint(cbInstanceData._m0[_389 + 5u]);
    uint _1455 = _1453.x * 14u;
    uint _1456 = _1455 + 13u;
    float _1463 = _414 + (-1.0);
    float _1469 = (cbLight._m0[_1456].x * _1463) + 1.0;
    float _1470 = (cbLight._m0[_1456].y * _1463) + 1.0;
    float _1471 = (cbLight._m0[_1456].z * _1463) + 1.0;
    float _1472 = (cbLight._m0[_1456].w * _1463) + 1.0;
    uint _1473 = _1455 + 5u;
    float _1479 = isnan(1.0) ? _1470 : (isnan(_1470) ? 1.0 : min(_1470, 1.0));
    uint _1483 = _1455 + 4u;
    float _1490 = isnan(1.0) ? _1469 : (isnan(_1469) ? 1.0 : min(_1469, 1.0));
    uint _1494 = _1455 | 1u;
    float _1505 = dot(vec3(cbLight._m0[_1455].xyz), vec3(_248, _249, _250));
    float _1508 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_248, _249, _250));
    float _3463 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
    float _3474 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1513 = (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * 0.3183098733425140380859375;
    float _1515 = (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.3183098733425140380859375;
    float _1522 = ((cbLight._m0[_1473].x * _1479) * _1515) + ((cbLight._m0[_1483].x * _1490) * _1513);
    float _1523 = ((_1479 * cbLight._m0[_1473].y) * _1515) + ((_1490 * cbLight._m0[_1483].y) * _1513);
    float _1524 = ((_1479 * cbLight._m0[_1473].z) * _1515) + ((_1490 * cbLight._m0[_1483].z) * _1513);
    uvec4 _1528 = floatBitsToUint(cbLight._m0[_1455 + 12u]);
    bool _1530 = _1528.x == 0u;
    float _1541;
    float _1543;
    float _1545;
    if (_1530)
    {
        _1541 = _1522;
        _1543 = _1523;
        _1545 = _1524;
    }
    else
    {
        uint _1549 = _1455 + 6u;
        float _1565 = (dot(vec3(cbLight._m0[_1455 + 2u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1566 = _1565 * _1565;
        float _3485 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1568 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
        _1541 = (((cbLight._m0[_1549].x * 0.3183098733425140380859375) * _1567) * _1568) + _1522;
        _1543 = (((cbLight._m0[_1549].y * 0.3183098733425140380859375) * _1567) * _1568) + _1523;
        _1545 = (((cbLight._m0[_1549].z * 0.3183098733425140380859375) * _1567) * _1568) + _1524;
    }
    bool _1548 = _1528.y == 0u;
    float _1586;
    float _1588;
    float _1590;
    if (_1548)
    {
        _1586 = _1541;
        _1588 = _1543;
        _1590 = _1545;
    }
    else
    {
        uint _1691 = _1455 + 7u;
        float _1707 = (dot(vec3(cbLight._m0[_1455 + 3u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1708 = _1707 * _1707;
        float _3501 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1710 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1586 = (((cbLight._m0[_1691].x * 0.3183098733425140380859375) * _1709) * _1710) + _1541;
        _1588 = (((cbLight._m0[_1691].y * 0.3183098733425140380859375) * _1709) * _1710) + _1543;
        _1590 = (((cbLight._m0[_1691].z * 0.3183098733425140380859375) * _1709) * _1710) + _1545;
    }
    uint _1592 = _1455 + 8u;
    float _1598 = cbLight._m0[_1455].x + _328;
    float _1599 = cbLight._m0[_1455].y + _329;
    float _1600 = cbLight._m0[_1455].z + _330;
    float _1604 = inversesqrt(dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600)));
    float _1608 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1455].xyz));
    float _3517 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1611 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _1612 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _1613 = dot(vec3(cbLight._m0[_1455].xyz), vec3(_1598 * _1604, _1599 * _1604, _1600 * _1604));
    float _3539 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1624 = (exp2(log2(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1630 = (0.5 / ((_1611 + 9.9999999392252902907785028219223e-09) + _1612)) * _1611;
    float _3550 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _1632 = (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.31831014156341552734375;
    uint _1643 = _1455 + 9u;
    float _1649 = cbLight._m0[_1494].x + _328;
    float _1650 = cbLight._m0[_1494].y + _329;
    float _1651 = cbLight._m0[_1494].z + _330;
    float _1655 = inversesqrt(dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651)));
    float _1659 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1494].xyz));
    float _3561 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1662 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _1663 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_1649 * _1655, _1650 * _1655, _1651 * _1655));
    float _3572 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1672 = (exp2(log2(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1676 = (0.5 / ((_1662 + 9.9999999392252902907785028219223e-09) + _1612)) * _1662;
    float _3583 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1678 = (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.31831014156341552734375;
    float _1688 = (((_1672 * cbLight._m0[_1643].x) * _1678) * _1479) + (((_1624 * cbLight._m0[_1592].x) * _1632) * _1490);
    float _1689 = (((_1672 * cbLight._m0[_1643].y) * _1678) * _1479) + (((_1624 * cbLight._m0[_1592].y) * _1632) * _1490);
    float _1690 = (((_1672 * cbLight._m0[_1643].z) * _1678) * _1479) + (((_1624 * cbLight._m0[_1592].z) * _1632) * _1490);
    float _1752;
    float _1754;
    float _1756;
    if (_1530)
    {
        _1752 = _1688;
        _1754 = _1689;
        _1756 = _1690;
    }
    else
    {
        uint _1758 = _1455 + 10u;
        uint _1764 = _1455 + 2u;
        float _1770 = cbLight._m0[_1764].x + _328;
        float _1771 = cbLight._m0[_1764].y + _329;
        float _1772 = cbLight._m0[_1764].z + _330;
        float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
        float _1780 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1764].xyz));
        float _3594 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1783 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1784 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1770 * _1776, _1771 * _1776, _1772 * _1776));
        float _3605 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = (exp2(log2(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1797 = (0.5 / ((_1783 + 9.9999999392252902907785028219223e-09) + _1612)) * _1783;
        float _3616 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1799 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.31831014156341552734375;
        float _1800 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
        _1752 = (((_1793 * cbLight._m0[_1758].x) * _1799) * _1800) + _1688;
        _1754 = (((_1793 * cbLight._m0[_1758].y) * _1799) * _1800) + _1689;
        _1756 = (((_1793 * cbLight._m0[_1758].z) * _1799) * _1800) + _1690;
    }
    float _1835;
    float _1837;
    float _1839;
    if (_1548)
    {
        _1835 = _1752;
        _1837 = _1754;
        _1839 = _1756;
    }
    else
    {
        uint _1846 = _1455 + 11u;
        uint _1852 = _1455 + 3u;
        float _1858 = cbLight._m0[_1852].x + _328;
        float _1859 = cbLight._m0[_1852].y + _329;
        float _1860 = cbLight._m0[_1852].z + _330;
        float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
        float _1868 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1852].xyz));
        float _3632 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1871 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1872 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_1858 * _1864, _1859 * _1864, _1860 * _1864));
        float _3643 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1885 = (0.5 / ((_1871 + 9.9999999392252902907785028219223e-09) + _1612)) * _1871;
        float _3654 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1887 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.31831014156341552734375;
        float _1888 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1835 = (((_1881 * cbLight._m0[_1846].x) * _1887) * _1888) + _1752;
        _1837 = (((_1881 * cbLight._m0[_1846].y) * _1887) * _1888) + _1754;
        _1839 = (((_1881 * cbLight._m0[_1846].z) * _1887) * _1888) + _1756;
    }
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    if (_1453.y == 0u)
    {
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1963;
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1963;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1963;
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.x;
        uint _1990 = uint((float(_1978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _350) / _1979))) + floor(float(uint(cbSceneParam._m0[85u].x * _349) / _1979)));
        float _2000 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2001 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        uint _2004 = uint(isnan(14.0) ? _2001 : (isnan(_2001) ? 14.0 : min(_2001, 14.0)));
        uvec4 _2009 = texelFetch(g_lightClusterGridBuffer, int(((_2004 << 2u) + (_1990 << 6u)) >> 2u));
        uint _2010 = _2009.x;
        uint _2011 = _1978.z;
        float _2149;
        float _2151;
        float _2153;
        float _2155;
        float _2157;
        float _2159;
        if (((((1u << ((_2011 >> 4u) & 15u)) + 4294967295u) & _2010) == 0u) || ((_2011 & 240u) == 0u))
        {
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
            _2159 = 0.0;
        }
        else
        {
            float _2150;
            float _2152;
            float _2154;
            float _2156;
            float _2158;
            float _2160;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            uint _2315 = 0u;
            uint _2324;
            bool _2325;
            for (;;)
            {
                _2324 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2315 << 2u)) >> 2u)).x;
                _2325 = _2324 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2325)
                {
                    frontier_phi_66_pred = _2309;
                    frontier_phi_66_pred_1 = _2314;
                    frontier_phi_66_pred_2 = _2313;
                    frontier_phi_66_pred_3 = _2312;
                    frontier_phi_66_pred_4 = _2311;
                    frontier_phi_66_pred_5 = _2310;
                }
                else
                {
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    uint _2460;
                    _2454 = _2309;
                    _2455 = _2310;
                    _2456 = _2311;
                    _2457 = _2312;
                    _2458 = _2313;
                    _2459 = _2314;
                    _2460 = _2324;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    for (;;)
                    {
                        uint _2464 = uint(findLSB(_2460)) + (_2315 << 5u);
                        uint _2461 = (_2460 + 4294967295u) & _2460;
                        uint _2466 = _2464 * 48u;
                        vec4 _2480 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2466)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 3u)).x));
                        uint _2486 = (_2464 * 48u) + 4u;
                        vec4 _2499 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2486)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 3u)).x));
                        uint _2505 = (_2464 * 48u) + 8u;
                        vec3 _2516 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2505)).x, texelFetch(g_PointLightRenderingBuffer, int(_2505 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2505 + 2u)).x));
                        float _2520 = _2480.x - _1964;
                        float _2521 = _2480.y - _1965;
                        float _2522 = _2480.z - _1966;
                        float _2523 = dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522));
                        float _2526 = inversesqrt(_2523);
                        float _2535 = 1.0 - (_2523 * _2480.w);
                        float _3680 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                        float _2536 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                        float _2537 = sqrt(_2523) * _2499.w;
                        float _2540 = 1.39999997615814208984375 / (_2537 + 1.39999997615814208984375);
                        float _2541 = _2540 * _2540;
                        float _2544 = ((1.0 - _2541) * dot(vec3(_370, _373, _376), vec3(_2526 * _2520, _2526 * _2521, _2526 * _2522))) + _2541;
                        float _2547 = _2537 * _2537;
                        float _2551 = ((isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0))) * _2536) / ((_2547 * 0.699999988079071044921875) + 1.0);
                        float _2555 = (-0.0) - _1964;
                        float _2556 = (-0.0) - _1965;
                        float _2557 = (-0.0) - _1966;
                        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
                        float _2565 = dot(vec3(_370, _373, _376), vec3(_2561 * _2555, _2561 * _2556, _2561 * _2557));
                        float _3696 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _3707 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                        float _2569 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2573 = (0.5 / (((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) + 9.9999999392252902907785028219223e-09) + _2569)) * _2569;
                        float _3718 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2582 = (((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 3.1415927410125732421875) / ((_2547 * 2.1991131305694580078125) + 3.141590118408203125)) * _2536;
                        _2384 = (_2551 * _2499.x) + _2457;
                        _2385 = (_2551 * _2499.y) + _2458;
                        _2386 = (_2551 * _2499.z) + _2459;
                        _2381 = (_2582 * _2516.x) + _2454;
                        _2382 = (_2582 * _2516.y) + _2455;
                        _2383 = (_2582 * _2516.z) + _2456;
                        if (_2461 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2454 = _2381;
                            _2455 = _2382;
                            _2456 = _2383;
                            _2457 = _2384;
                            _2458 = _2385;
                            _2459 = _2386;
                            _2460 = _2461;
                        }
                    }
                    frontier_phi_66_pred = _2381;
                    frontier_phi_66_pred_1 = _2386;
                    frontier_phi_66_pred_2 = _2385;
                    frontier_phi_66_pred_3 = _2384;
                    frontier_phi_66_pred_4 = _2383;
                    frontier_phi_66_pred_5 = _2382;
                }
                _2150 = frontier_phi_66_pred;
                _2160 = frontier_phi_66_pred_1;
                _2158 = frontier_phi_66_pred_2;
                _2156 = frontier_phi_66_pred_3;
                _2154 = frontier_phi_66_pred_4;
                _2152 = frontier_phi_66_pred_5;
                uint _2316 = _2315 + 1u;
                if (_2316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2309 = _2150;
                    _2310 = _2152;
                    _2311 = _2154;
                    _2312 = _2156;
                    _2313 = _2158;
                    _2314 = _2160;
                    _2315 = _2316;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
            _2159 = _2160;
        }
        uvec4 _2163 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2164 = _2163.z;
        uint _2166 = (_2164 >> 8u) & 15u;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        if (((4294967295u << _2166) & _2010) == 0u)
        {
            _2280 = _2149;
            _2282 = _2151;
            _2284 = _2153;
            _2286 = _2155;
            _2288 = _2157;
            _2290 = _2159;
        }
        else
        {
            float _2305 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2166 < ((_2164 >> 12u) & 15u))
            {
                float _2281;
                float _2283;
                float _2285;
                float _2287;
                float _2289;
                float _2291;
                float _2437 = _2149;
                float _2438 = _2151;
                float _2439 = _2153;
                float _2440 = _2155;
                float _2441 = _2157;
                float _2442 = _2159;
                uint _2443 = _2166;
                uint _2452;
                bool _2453;
                for (;;)
                {
                    _2452 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2443 << 2u)) >> 2u)).x;
                    _2453 = _2452 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2453)
                    {
                        frontier_phi_77_pred = _2442;
                        frontier_phi_77_pred_1 = _2441;
                        frontier_phi_77_pred_2 = _2440;
                        frontier_phi_77_pred_3 = _2439;
                        frontier_phi_77_pred_4 = _2438;
                        frontier_phi_77_pred_5 = _2437;
                    }
                    else
                    {
                        float _2596;
                        float _2597;
                        float _2598;
                        float _2599;
                        float _2600;
                        float _2601;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2609 = _2437;
                        float _2610 = _2438;
                        float _2611 = _2439;
                        float _2612 = _2440;
                        float _2613 = _2441;
                        float _2614 = _2442;
                        uint _2615 = _2452;
                        uint _2616;
                        vec4 _2641;
                        float _2642;
                        vec4 _2657;
                        vec3 _2669;
                        vec4 _2685;
                        vec4 _2701;
                        float _2748;
                        bool _2749;
                        for (;;)
                        {
                            uint _2626 = ((_2443 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2615));
                            _2616 = (_2615 + 4294967295u) & _2615;
                            uint _2628 = _2626 * 40u;
                            _2641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 3u)).x));
                            _2642 = _2641.w;
                            uint _2644 = (_2626 * 40u) + 4u;
                            _2657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 3u)).x));
                            uint _2659 = (_2626 * 40u) + 8u;
                            _2669 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 2u)).x));
                            uint _2672 = (_2626 * 40u) + 16u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            uint _2688 = (_2626 * 40u) + 20u;
                            _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2704 = (_2626 * 40u) + 24u;
                            vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            uint _2723 = (_2626 * 40u) + 28u;
                            vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 3u)).x));
                            _2748 = fma(_1966, _2736.z, fma(_1965, _2736.y, _2736.x * _1964)) + _2736.w;
                            _2749 = !((fma(_1966, _2717.z, fma(_1965, _2717.y, _2717.x * _1964)) + _2717.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2749)
                            {
                                float _2776 = _2641.x - _1964;
                                float _2777 = _2641.y - _1965;
                                float _2778 = _2641.z - _1966;
                                float _2779 = dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778));
                                float _2782 = inversesqrt(_2779);
                                float _2783 = _2782 * _2776;
                                float _2784 = _2782 * _2777;
                                float _2785 = _2782 * _2778;
                                float _2789 = 1.0 - (_2779 / (_2642 * _2642));
                                float _3729 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                                float _2790 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2794 = sqrt(_2779) * _2657.w;
                                float _2796 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                                float _2797 = _2796 * _2796;
                                float _2798 = 1.0 - _2797;
                                float _2800 = (_2798 * dot(vec3(_2783, _2784, _2785), vec3(_370, _373, _376))) + _2797;
                                float _2803 = _2794 * _2794;
                                float _2807 = (fma(_1966, _2685.z, fma(_1965, _2685.y, _2685.x * _1964)) + _2685.w) / _2748;
                                float _2808 = (fma(_1966, _2701.z, fma(_1965, _2701.y, _2701.x * _1964)) + _2701.w) / _2748;
                                float _2812 = 1.0 - dot(vec2(_2807, _2808), vec2(_2807, _2808));
                                float _3745 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                                float _2813 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2814 = _2813 * (((isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))) * _2790) / ((_2803 * 0.699999988079071044921875) + 1.0));
                                float _2824 = dot(vec3(_370, _373, _376), vec3((-0.0) - (_1964 * _2305), (-0.0) - (_1965 * _2305), (-0.0) - (_1966 * _2305)));
                                float _3756 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                                float _2832 = (_2798 * dot(vec3(_370, _373, _376), vec3(_2783, _2784, _2785))) + _2797;
                                float _3767 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2833 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2837 = (0.5 / (((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) + 9.9999999392252902907785028219223e-09) + _2833)) * _2833;
                                float _3778 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                                float _2844 = (_2813 * _2790) * (((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 3.1415927410125732421875) / ((_2803 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2814 * _2657.y;
                                frontier_phi_83_pred_1 = _2814 * _2657.x;
                                frontier_phi_83_pred_2 = _2844 * _2669.z;
                                frontier_phi_83_pred_3 = _2844 * _2669.y;
                                frontier_phi_83_pred_4 = _2844 * _2669.x;
                                frontier_phi_83_pred_5 = _2814 * _2657.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2852 = frontier_phi_83_pred;
                            _2851 = frontier_phi_83_pred_1;
                            _2850 = frontier_phi_83_pred_2;
                            _2849 = frontier_phi_83_pred_3;
                            _2848 = frontier_phi_83_pred_4;
                            _2853 = frontier_phi_83_pred_5;
                            _2599 = _2851 + _2612;
                            _2600 = _2852 + _2613;
                            _2601 = _2853 + _2614;
                            _2596 = _2848 + _2609;
                            _2597 = _2849 + _2610;
                            _2598 = _2850 + _2611;
                            if (_2616 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2599;
                                _2613 = _2600;
                                _2614 = _2601;
                                _2615 = _2616;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2601;
                        frontier_phi_77_pred_1 = _2600;
                        frontier_phi_77_pred_2 = _2599;
                        frontier_phi_77_pred_3 = _2598;
                        frontier_phi_77_pred_4 = _2597;
                        frontier_phi_77_pred_5 = _2596;
                    }
                    _2291 = frontier_phi_77_pred;
                    _2289 = frontier_phi_77_pred_1;
                    _2287 = frontier_phi_77_pred_2;
                    _2285 = frontier_phi_77_pred_3;
                    _2283 = frontier_phi_77_pred_4;
                    _2281 = frontier_phi_77_pred_5;
                    uint _2444 = _2443 + 1u;
                    if (_2444 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2437 = _2281;
                        _2438 = _2283;
                        _2439 = _2285;
                        _2440 = _2287;
                        _2441 = _2289;
                        _2442 = _2291;
                        _2443 = _2444;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2285;
                frontier_phi_58_59_ladder_1 = _2291;
                frontier_phi_58_59_ladder_2 = _2289;
                frontier_phi_58_59_ladder_3 = _2287;
                frontier_phi_58_59_ladder_4 = _2283;
                frontier_phi_58_59_ladder_5 = _2281;
            }
            else
            {
                frontier_phi_58_59_ladder = _2153;
                frontier_phi_58_59_ladder_1 = _2159;
                frontier_phi_58_59_ladder_2 = _2157;
                frontier_phi_58_59_ladder_3 = _2155;
                frontier_phi_58_59_ladder_4 = _2151;
                frontier_phi_58_59_ladder_5 = _2149;
            }
            _2280 = frontier_phi_58_59_ladder_5;
            _2282 = frontier_phi_58_59_ladder_4;
            _2284 = frontier_phi_58_59_ladder;
            _2286 = frontier_phi_58_59_ladder_3;
            _2288 = frontier_phi_58_59_ladder_2;
            _2290 = frontier_phi_58_59_ladder_1;
        }
        float _2295 = isnan(1.0) ? _414 : (isnan(_414) ? 1.0 : min(_414, 1.0));
        _2023 = (_2295 * _2286) + _1586;
        _2025 = (_2295 * _2288) + _1588;
        _2027 = (_2295 * _2290) + _1590;
        _2029 = ((_2280 * 0.039999999105930328369140625) * _2295) + _1835;
        _2031 = ((_2282 * 0.039999999105930328369140625) * _2295) + _1837;
        _2033 = ((_2284 * 0.039999999105930328369140625) * _2295) + _1839;
    }
    else
    {
        _2023 = _1586;
        _2025 = _1588;
        _2027 = _1590;
        _2029 = _1835;
        _2031 = _1837;
        _2033 = _1839;
    }
    uint _2039 = _390 + uint(cbMatDynParam._m0[0u].w);
    float _2048 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _235.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2039].x;
    float _2052 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _235.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2039].y;
    float _2056 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _235.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2039].z;
    float _3794 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3805 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3816 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _2073 = (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_2023 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _414))) + ((_2029 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1225)) * cbPerFrame._m0[3u].x)) + _2048;
    float _2075 = (_2052 + ((_2031 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _1225)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_2025 + ((isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0))) * _414)));
    float _2077 = (_2056 + ((_2033 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1225)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_2027 + ((isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))) * _414)));
    float _2078 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2079 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2080 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2086 = cbMtdParam._m0[2u].x * _2048;
    float _2087 = cbMtdParam._m0[2u].y * _2052;
    float _2088 = cbMtdParam._m0[2u].z * _2056;
    float _3842 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2090 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    uint _2091 = _389 + 6u;
    float _2099 = _349 / cbSceneParam._m0[86u].x;
    float _2100 = _350 / cbSceneParam._m0[86u].y;
    vec4 _2114 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2099, _2100, (log2((isnan(cbSceneParam._m0[77u].w) ? _270 : (isnan(_270) ? cbSceneParam._m0[77u].w : min(_270, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2116 = _2114.x;
    float _2117 = _2114.y;
    float _2118 = _2114.z;
    float _2119 = _2114.w;
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    if (_270 > cbSceneParam._m0[78u].w)
    {
        float _2174 = isnan(_270) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _270 : min(cbSceneParam._m0[80u].w, _270));
        float _2175 = _2174 / _270;
        float _2186 = _2175 * _321;
        float _2187 = _322 * _2175;
        float _2188 = (-0.0) - _2187;
        float _2190 = _2175 * _323;
        float _2192 = (cbSceneParam._m0[77u].w * _2188) / _2174;
        float _2193 = _2192 + cbSceneParam._m0[79u].w;
        float _2194 = cbSceneParam._m0[79u].w - _2187;
        float _2200 = sqrt(((_2186 * _2186) + (_2187 * _2187)) + (_2190 * _2190));
        float _2203 = (1.0 - (cbSceneParam._m0[77u].w / _2174)) * _2200;
        float _2208 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2210 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2394;
        if (abs((_2188 - _2192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2394 = ((((_2193 > 0.0) ? exp2(_2208 * _2193) : (2.0 - exp2(_2210 * _2193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2203;
        }
        else
        {
            float _2338 = 1.0 / cbSceneParam._m0[80u].x;
            float _2339 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : max(_2193, _2194));
            float _2340 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : min(_2193, _2194));
            float _2349 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : min(_2339, 0.0));
            float _2350 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : min(_2340, 0.0));
            _2394 = ((abs(_2200 / _2188) * cbSceneParam._m0[80u].y) * ((((_2349 - _2350) * 2.0) - ((exp2(_2208 * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0)))) - exp2(_2208 * (isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0))))) * _2338)) - ((exp2(_2210 * _2349) - exp2(_2210 * _2350)) * _2338))) + (_2203 * cbSceneParam._m0[80u].z);
        }
        vec4 _2396 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2099, _2100, 1.0), 0.0);
        float _2405 = exp2((_2394 * (-1.44269502162933349609375)) * (1.0 - _2396.w));
        float _2406 = log2(_2405);
        float _2422 = log2(_2119);
        _2212 = (exp2(_2422 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2406 * cbSceneParam._m0[78u].x)) * _2396.x) / cbSceneParam._m0[78u].x)) + _2116;
        _2214 = (exp2(_2422 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2406 * cbSceneParam._m0[78u].y)) * _2396.y) / cbSceneParam._m0[78u].y)) + _2117;
        _2216 = (exp2(_2422 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2406 * cbSceneParam._m0[78u].z)) * _2396.z) / cbSceneParam._m0[78u].z)) + _2118;
        _2218 = _2405 * _2119;
    }
    else
    {
        _2212 = _2116;
        _2214 = _2117;
        _2216 = _2118;
        _2218 = _2119;
    }
    bool _2432;
    vec4 _2227;
    vec4 _2250;
    float _2252;
    float _2256;
    float _2257;
    float _2258;
    float _2261;
    float _2264;
    float _2267;
    float _2268;
    bool _2279;
    for (;;)
    {
        _2227 = cbMatDynParam._m0[0u];
        float _2229 = roundEven(_2227.y);
        bool _2230 = _2229 == 3.0;
        float _2232 = log2(_2218);
        float _2236 = exp2(_2232 * cbSceneParam._m0[78u].x);
        float _2237 = exp2(_2232 * cbSceneParam._m0[78u].y);
        float _2238 = exp2(_2232 * cbSceneParam._m0[78u].z);
        float _2239 = _2236 * _2078;
        float _2240 = _2237 * _2079;
        float _2241 = _2238 * _2080;
        float _2248 = _337 + (-0.5);
        _2250 = cbMtdParam._m0[1u];
        _2252 = _2250.y * _2248;
        float _2255 = (_2229 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2256 = _2255 * (_2230 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2212)));
        _2257 = _2255 * (_2230 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2214)));
        _2258 = _2255 * (_2230 ? _2241 : (_2241 + (cbSceneParam._m0[72u].w * _2216)));
        _2261 = ((_2086 * _2090) * _2236) * _2255;
        _2264 = ((_2087 * _2090) * _2237) * _2255;
        _2267 = ((_2088 * _2090) * _2238) * _2255;
        _2268 = _2248 * 0.999000012874603271484375;
        _2279 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2279)
        {
            if ((cbInstanceData._m0[_389 + 7u].x + _2268) < 0.5)
            {
                _2432 = true;
                break;
            }
        }
        uint _2373 = _390 + uint(_2227.w);
        if ((cbInstanceData._m0[_2373].w < 1.0) && ((cbInstanceData._m0[_2373].w + _2268) < 0.5))
        {
            _2432 = true;
            break;
        }
        if ((_2252 + 1.0) < _2250.x)
        {
            _2432 = true;
            break;
        }
        _2432 = false;
        break;
    }
    float _2587;
    if (_2432)
    {
        discard_state = true;
        _2587 = 0.0;
    }
    else
    {
        _2587 = cbInstanceData._m0[_2091].w;
    }
    SV_Target.x = _2256;
    SV_Target.y = _2257;
    SV_Target.z = _2258;
    SV_Target.w = _2587;
    SV_Target_1.x = _2261;
    SV_Target_1.y = _2264;
    SV_Target_1.z = _2267;
    SV_Target_1.w = cbInstanceData._m0[_2091].w;
    discard_exit();
}


