#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _773;
float _3267;
float _3268;
float _3269;
float _3270;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    vec4 _190 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _220 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _232 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _233 = _232 * _168;
    float _234 = _232 * _169;
    float _235 = _232 * _170;
    float _3279 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3290 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3301 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _255 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _306 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _296);
    float _307 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _296);
    float _308 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _296);
    float _312 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _313 = _306 * _312;
    float _314 = _307 * _312;
    float _315 = _308 * _312;
    vec4 _320 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _322 = _320.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _452 = sqrt(((_306 * _306) + (_307 * _307)) + (_308 * _308));
        float _458 = (cbMatDynParam._m0[5u].x * _452) + cbMatDynParam._m0[5u].y;
        float _3312 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        float _459 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _463 = (cbMatDynParam._m0[5u].z * _452) + cbMatDynParam._m0[5u].w;
        float _3323 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) - _459)) + _459) < ((_322 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _334 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _335 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _355 = fma(_235, cbSceneParam._m0[5u].z, fma(_234, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _233));
    float _358 = fma(_235, cbSceneParam._m0[6u].z, fma(_234, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _233));
    float _361 = fma(_235, cbSceneParam._m0[7u].z, fma(_234, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _233));
    uint _374 = uint(roundEven(NORMAL.w)) * 13u;
    uint _376 = _374 + 9u;
    uint _377 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _383 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_377].x;
    float _384 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_377].y;
    float _385 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_377].z;
    float _3334 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    vec4 _397 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _334, cbSceneParam._m0[86u].y * _335));
    float _400 = _397.x * TEXCOORD.z;
    float _401 = dot(vec3(_233, _234, _235), vec3(_313, _314, _315));
    float _404 = _401 * 2.0;
    float _409 = (_404 * _233) - _313;
    float _410 = (_404 * _234) - _314;
    float _411 = (_404 * _235) - _315;
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _772;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _497 = fma(_441, cbModelParam._m0[26u].z, fma(_437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _433));
        float _501 = fma(_441, cbModelParam._m0[27u].z, fma(_437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _433));
        float _505 = fma(_441, cbModelParam._m0[28u].z, fma(_437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _433));
        float _530 = _433 + _233;
        float _531 = _437 + _234;
        float _532 = _441 + _235;
        float _542 = fma(_532, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530)) - _497;
        float _543 = fma(_532, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530)) - _501;
        float _544 = fma(_532, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530)) - _505;
        float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
        float _561 = ((_548 * _542) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _562 = ((_548 * _543) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _563 = ((_548 * _544) / cbModelParam._m0[34u].z) + ((((((_505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        float _600 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_566.x + (-0.5));
        float _602 = _600 * (_566.y + (-0.5));
        float _603 = _600 * (_566.z + (-0.5));
        float _610 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_573.x + (-0.5));
        float _612 = _610 * (_573.y + (-0.5));
        float _613 = _610 * (_573.z + (-0.5));
        float _620 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_580.x + (-0.5));
        float _622 = _620 * (_580.y + (-0.5));
        float _623 = _620 * (_580.z + (-0.5));
        float _630 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_587.x + (-0.5));
        float _632 = _630 * (_587.y + (-0.5));
        float _633 = _630 * (_587.z + (-0.5));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = _601 * 0.5;
        float _638 = _611 * 0.5;
        float _639 = _621 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _654 = (dot(vec3(_233, _234, _235), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _664 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3404 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_666 + 1.0))) + _671) * _634;
        float _681 = _602 * 0.5;
        float _682 = _612 * 0.5;
        float _683 = _622 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_233, _234, _235), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_635 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3437 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_708 + 1.0))) + _713) * _635;
        float _723 = _603 * 0.5;
        float _724 = _613 * 0.5;
        float _725 = _623 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_233, _234, _235), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3470 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_750 + 1.0))) + _755) * _636;
        _772 = _603;
        _774 = _602;
        _775 = _601;
        _776 = _613;
        _777 = _612;
        _778 = _611;
        _779 = _623;
        _780 = _622;
        _781 = _621;
        _782 = _636;
        _783 = _635;
        _784 = _634;
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
    }
    else
    {
        _772 = _773;
        _774 = _773;
        _775 = _773;
        _776 = _773;
        _777 = _773;
        _778 = _773;
        _779 = _773;
        _780 = _773;
        _781 = _773;
        _782 = _773;
        _783 = _773;
        _784 = _773;
        _785 = 0.0;
        _786 = 0.0;
        _787 = 0.0;
    }
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _816 = fma(_441, cbModelParam._m0[30u].z, fma(_437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _433));
        float _820 = fma(_441, cbModelParam._m0[31u].z, fma(_437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _433));
        float _824 = fma(_441, cbModelParam._m0[32u].z, fma(_437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _433));
        float _847 = _433 + _233;
        float _848 = _437 + _234;
        float _849 = _441 + _235;
        float _859 = fma(_849, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847)) - _816;
        float _860 = fma(_849, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847)) - _820;
        float _861 = fma(_849, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847)) - _824;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_816 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_820 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[35u].z) + ((((((_824 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _915 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_882.x + (-0.5));
        float _917 = _915 * (_882.y + (-0.5));
        float _918 = _915 * (_882.z + (-0.5));
        float _925 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_889.x + (-0.5));
        float _927 = _925 * (_889.y + (-0.5));
        float _928 = _925 * (_889.z + (-0.5));
        float _935 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_896.x + (-0.5));
        float _937 = _935 * (_896.y + (-0.5));
        float _938 = _935 * (_896.z + (-0.5));
        float _945 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_903.x + (-0.5));
        float _947 = _945 * (_903.y + (-0.5));
        float _948 = _945 * (_903.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_233, _234, _235), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3533 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_979 + 1.0))) + _984) * _949;
        float _994 = _917 * 0.5;
        float _995 = _927 * 0.5;
        float _996 = _937 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_233, _234, _235), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3566 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1021 + 1.0))) + _1026) * _950;
        float _1036 = _918 * 0.5;
        float _1037 = _928 * 0.5;
        float _1038 = _938 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_233, _234, _235), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3599 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1063 + 1.0))) + _1068) * _951;
        _1085 = _918;
        _1086 = _917;
        _1087 = _916;
        _1088 = _928;
        _1089 = _927;
        _1090 = _926;
        _1091 = _938;
        _1092 = _937;
        _1093 = _936;
        _1094 = _951;
        _1095 = _950;
        _1096 = _949;
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1098 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _773;
        _1086 = _773;
        _1087 = _773;
        _1088 = _773;
        _1089 = _773;
        _1090 = _773;
        _1091 = _773;
        _1092 = _773;
        _1093 = _773;
        _1094 = _773;
        _1095 = _773;
        _1096 = _773;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1110 = (cbModelParam._m0[1u].x * (_1098 - _786)) + _786;
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1132 = fma(_1111, cbSceneParam._m0[89u].z, fma(_1110, cbSceneParam._m0[89u].y, _1109 * cbSceneParam._m0[89u].x));
    float _1135 = fma(_1111, cbSceneParam._m0[90u].z, fma(_1110, cbSceneParam._m0[90u].y, _1109 * cbSceneParam._m0[90u].x));
    float _1138 = fma(_1111, cbSceneParam._m0[91u].z, fma(_1110, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1109));
    float _1153 = _409 * 0.5;
    float _1154 = _410 * 0.5;
    float _1155 = _411 * 0.5;
    float _1156 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1159 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1086, _1089, _1092, _1095));
    float _1162 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1196;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1169 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_772, _776, _779, _782));
        float _1173 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_774, _777, _780, _783));
        float _1177 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_775, _778, _781, _784));
        float _1184 = dot(vec4(cbModelParam._m0[39u]), vec4(_1153, _1154, _1155, 1.0));
        _1196 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1184) ? 0.0 : (isnan(0.0) ? _1184 : max(0.0, _1184))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1196 = 1.0;
    }
    float _1207;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1198 = dot(vec4(cbModelParam._m0[40u]), vec4(_1153, _1154, _1155, 1.0));
        _1207 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1207 = 1.0;
    }
    float _1211 = (_1207 * cbModelParam._m0[1u].x) + (_1196 * (1.0 - cbModelParam._m0[1u].x));
    float _1220 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1301;
    float _1303;
    float _1305;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1268 = fma(_441, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433)) + cbModelParam._m0[13u].w;
        float _1272 = fma(_441, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433)) + cbModelParam._m0[14u].w;
        float _1276 = fma(_441, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433)) + cbModelParam._m0[15u].w;
        float _1279 = fma(_411, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409));
        float _1282 = fma(_411, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409));
        float _1285 = fma(_411, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409));
        float _1311;
        if (_1279 > 0.0)
        {
            _1311 = abs((1.0 - _1268) / _1279);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1268 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1311 = frontier_phi_17_15_ladder;
        }
        float _1486;
        if (_1282 > 0.0)
        {
            _1486 = abs((1.0 - _1272) / _1282);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1272 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1486 = frontier_phi_26_22_ladder;
        }
        float _1783;
        if (_1285 > 0.0)
        {
            _1783 = abs((1.0 - _1276) / _1285);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1276 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1783 = frontier_phi_38_33_ladder;
        }
        float _1785 = isnan(_1486) ? _1311 : (isnan(_1311) ? _1486 : min(_1311, _1486));
        float _1786 = isnan(_1783) ? _1785 : (isnan(_1785) ? _1783 : min(_1785, _1783));
        float _1790 = (_1786 * _1279) + _1268;
        float _1791 = (_1786 * _1282) + _1272;
        float _1792 = (_1786 * _1285) + _1276;
        float _1793 = _1786 * 9.9999997473787516355514526367188e-05;
        float _1795 = (-1.0) - _1793;
        float _1797 = _1793 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1792 > _1797) || ((_1792 < _1795) || ((_1791 > _1797) || ((_1791 < _1795) || ((_1790 < _1795) || (_1790 > _1797))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1792, cbModelParam._m0[9u].z, fma(_1791, cbModelParam._m0[9u].y, _1790 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1792, cbModelParam._m0[10u].z, fma(_1791, cbModelParam._m0[10u].y, _1790 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1792, cbModelParam._m0[11u].z, fma(_1791, cbModelParam._m0[11u].y, _1790 * cbModelParam._m0[11u].x))), _1220);
            frontier_phi_16_38_ladder = _1937.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1937.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1937.x * cbModelParam._m0[1u].y;
        }
        _1301 = frontier_phi_16_38_ladder_2;
        _1303 = frontier_phi_16_38_ladder_1;
        _1305 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_409, _410, _411), _1220);
        _1301 = _1289.x * cbModelParam._m0[1u].y;
        _1303 = _1289.y * cbModelParam._m0[1u].y;
        _1305 = _1289.z * cbModelParam._m0[1u].y;
    }
    float _1308 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1401;
    float _1403;
    float _1405;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1365 = fma(_441, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433)) + cbModelParam._m0[21u].w;
        float _1369 = fma(_441, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433)) + cbModelParam._m0[22u].w;
        float _1373 = fma(_441, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433)) + cbModelParam._m0[23u].w;
        float _1376 = fma(_411, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409));
        float _1379 = fma(_411, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409));
        float _1382 = fma(_411, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409));
        float _1491;
        if (_1376 > 0.0)
        {
            _1491 = abs((1.0 - _1365) / _1376);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1365 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1491 = frontier_phi_28_24_ladder;
        }
        float _1810;
        if (_1379 > 0.0)
        {
            _1810 = abs((1.0 - _1369) / _1379);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1369 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1810 = frontier_phi_40_35_ladder;
        }
        float _2083;
        if (_1382 > 0.0)
        {
            _2083 = abs((1.0 - _1373) / _1382);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1373 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2083 = frontier_phi_50_47_ladder;
        }
        float _2085 = isnan(_1810) ? _1491 : (isnan(_1491) ? _1810 : min(_1491, _1810));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1376) + _1365;
        float _2091 = (_2086 * _1379) + _1369;
        float _2092 = (_2086 * _1382) + _1373;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2093;
        float _2096 = _2093 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2092 > _2096) || ((_2092 < _2094) || ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 < _2094) || (_2090 > _2096))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2092, cbModelParam._m0[17u].z, fma(_2091, cbModelParam._m0[17u].y, _2090 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2092, cbModelParam._m0[18u].z, fma(_2091, cbModelParam._m0[18u].y, _2090 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2092, cbModelParam._m0[19u].z, fma(_2091, cbModelParam._m0[19u].y, _2090 * cbModelParam._m0[19u].x))), _1308);
            frontier_phi_25_50_ladder = _2183.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2183.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2183.x * cbModelParam._m0[1u].z;
        }
        _1401 = frontier_phi_25_50_ladder_2;
        _1403 = frontier_phi_25_50_ladder_1;
        _1405 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_409, _410, _411), _1308);
        _1401 = _1385.x * cbModelParam._m0[1u].z;
        _1403 = _1385.y * cbModelParam._m0[1u].z;
        _1405 = _1385.z * cbModelParam._m0[1u].z;
    }
    float _1417 = _400 * 0.01200000010430812835693359375;
    float _1419 = _1417 * ((cbModelParam._m0[1u].w * (_1401 - _1301)) + _1301);
    float _1420 = _1417 * ((cbModelParam._m0[1u].w * (_1403 - _1303)) + _1303);
    float _1421 = _1417 * ((cbModelParam._m0[1u].w * (_1405 - _1305)) + _1305);
    float _1424 = fma(_1421, cbSceneParam._m0[89u].z, fma(_1420, cbSceneParam._m0[89u].y, _1419 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1421, cbSceneParam._m0[90u].z, fma(_1420, cbSceneParam._m0[90u].y, _1419 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1421, cbSceneParam._m0[91u].z, fma(_1420, cbSceneParam._m0[91u].y, _1419 * cbSceneParam._m0[91u].x));
    float _1465 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1469 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1477 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1478 = _1465 / _1477;
    float _1479 = _1469 / _1477;
    float _1480 = _1473 / _1477;
    float _1627;
    float _1628;
    float _1629;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1507 = ((uint(_1480 > cbSceneParam._m0[59u].y) + uint(_1480 > cbSceneParam._m0[59u].x)) + uint(_1480 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1508 = _1507 + 43u;
        uint _1516 = _1507 + 44u;
        uint _1524 = _1507 + 45u;
        uint _1532 = _1507 + 46u;
        float _1543 = fma(_1477, cbSceneParam._m0[_1508].w, fma(_1473, cbSceneParam._m0[_1508].z, fma(_1469, cbSceneParam._m0[_1508].y, _1465 * cbSceneParam._m0[_1508].x)));
        float _1547 = fma(_1477, cbSceneParam._m0[_1516].w, fma(_1473, cbSceneParam._m0[_1516].z, fma(_1469, cbSceneParam._m0[_1516].y, _1465 * cbSceneParam._m0[_1516].x)));
        float _1555 = fma(_1477, cbSceneParam._m0[_1532].w, fma(_1473, cbSceneParam._m0[_1532].z, fma(_1469, cbSceneParam._m0[_1532].y, _1465 * cbSceneParam._m0[_1532].x)));
        float _1560 = cbSceneParam._m0[33u].z * _1555;
        float _1562 = cbSceneParam._m0[33u].w * _1555;
        float _1565 = fma(_1477, cbSceneParam._m0[_1524].w, fma(_1473, cbSceneParam._m0[_1524].z, fma(_1469, cbSceneParam._m0[_1524].y, _1465 * cbSceneParam._m0[_1524].x))) / _1555;
        float _1613 = (cbSceneParam._m0[33u].x - sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480))) * cbSceneParam._m0[33u].y;
        float _3725 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1620 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1560 + _1543) / _1555, (_1562 + _1547) / _1555), _1565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1562 + _1543) / _1555, (_1547 - _1560) / _1555), _1565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1543 - _1560) / _1555, (_1547 - _1562) / _1555), _1565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1543 - _1562) / _1555, (_1560 + _1547) / _1555), _1565), 0.0)).x), vec4(0.25)));
        _1627 = 1.0 - (_1620 * cbSceneParam._m0[34u].x);
        _1628 = 1.0 - (_1620 * cbSceneParam._m0[34u].y);
        _1629 = 1.0 - (_1620 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1627 = 1.0;
        _1628 = 1.0;
        _1629 = 1.0;
    }
    float _1693;
    float _1695;
    float _1697;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1681 = fma(_1477, cbSceneParam._m0[63u].w, fma(_1473, cbSceneParam._m0[63u].z, fma(_1469, cbSceneParam._m0[63u].y, _1465 * cbSceneParam._m0[63u].x)));
        float _1682 = fma(_1477, cbSceneParam._m0[60u].w, fma(_1473, cbSceneParam._m0[60u].z, fma(_1469, cbSceneParam._m0[60u].y, _1465 * cbSceneParam._m0[60u].x))) / _1681;
        float _1683 = fma(_1477, cbSceneParam._m0[61u].w, fma(_1473, cbSceneParam._m0[61u].z, fma(_1469, cbSceneParam._m0[61u].y, _1465 * cbSceneParam._m0[61u].x))) / _1681;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1682 >= cbSceneParam._m0[64u].x) && (_1683 >= cbSceneParam._m0[64u].y)) && (_1682 <= cbSceneParam._m0[64u].z)) && (_1683 <= cbSceneParam._m0[64u].w))
        {
            float _1823 = fma(_1477, cbSceneParam._m0[62u].w, fma(_1473, cbSceneParam._m0[62u].z, fma(_1469, cbSceneParam._m0[62u].y, _1465 * cbSceneParam._m0[62u].x))) / _1681;
            float _1827 = isnan(cbSceneParam._m0[41u].w) ? _1823 : (isnan(_1823) ? cbSceneParam._m0[41u].w : max(_1823, cbSceneParam._m0[41u].w));
            float _1870 = (cbSceneParam._m0[33u].x - sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480))) * cbSceneParam._m0[33u].y;
            float _3741 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
            float _1877 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1682, cbSceneParam._m0[33u].w + _1683), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1682, _1683 - cbSceneParam._m0[33u].z), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1682 - cbSceneParam._m0[33u].z, _1683 - cbSceneParam._m0[33u].w), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1682 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1683), _1827), 0.0)).x), vec4(0.25)));
            float _1881 = 1.0 - (_1877 * cbSceneParam._m0[34u].x);
            float _1882 = 1.0 - (_1877 * cbSceneParam._m0[34u].y);
            float _1883 = 1.0 - (_1877 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1883) ? _1629 : (isnan(_1629) ? _1883 : min(_1629, _1883));
            frontier_phi_37_36_ladder_1 = isnan(_1882) ? _1628 : (isnan(_1628) ? _1882 : min(_1628, _1882));
            frontier_phi_37_36_ladder_2 = isnan(_1881) ? _1627 : (isnan(_1627) ? _1881 : min(_1627, _1881));
        }
        else
        {
            frontier_phi_37_36_ladder = _1629;
            frontier_phi_37_36_ladder_1 = _1628;
            frontier_phi_37_36_ladder_2 = _1627;
        }
        _1693 = frontier_phi_37_36_ladder_2;
        _1695 = frontier_phi_37_36_ladder_1;
        _1697 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1693 = _1627;
        _1695 = _1628;
        _1697 = _1629;
    }
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_374 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1712 = _400 + (-1.0);
    float _1718 = (cbLight._m0[_1705].x * _1712) + 1.0;
    float _1719 = (cbLight._m0[_1705].y * _1712) + 1.0;
    float _1720 = (cbLight._m0[_1705].z * _1712) + 1.0;
    float _1721 = (cbLight._m0[_1705].w * _1712) + 1.0;
    uint _1722 = _1704 + 5u;
    float _1728 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1732 = _1704 + 4u;
    float _1742 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1746 = _1704 | 1u;
    float _1757 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_233, _234, _235));
    float _1760 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_233, _234, _235));
    float _3777 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _3788 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1765 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 0.3183098733425140380859375;
    float _1767 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.3183098733425140380859375;
    float _1774 = ((cbLight._m0[_1722].x * _1728) * _1767) + (((cbLight._m0[_1732].x * _1693) * _1742) * _1765);
    float _1775 = ((_1728 * cbLight._m0[_1722].y) * _1767) + (((cbLight._m0[_1732].y * _1695) * _1742) * _1765);
    float _1776 = ((_1728 * cbLight._m0[_1722].z) * _1767) + (((cbLight._m0[_1732].z * _1697) * _1742) * _1765);
    uvec4 _1780 = floatBitsToUint(cbLight._m0[_1704 + 12u]);
    bool _1782 = _1780.x == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1782)
    {
        _1884 = _1774;
        _1886 = _1775;
        _1888 = _1776;
    }
    else
    {
        uint _1892 = _1704 + 6u;
        float _1908 = (dot(vec3(cbLight._m0[_1704 + 2u].xyz), vec3(_233, _234, _235)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3799 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1911 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1884 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1774;
        _1886 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1775;
        _1888 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1776;
    }
    bool _1891 = _1780.y == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1891)
    {
        _1946 = _1884;
        _1948 = _1886;
        _1950 = _1888;
    }
    else
    {
        uint _2054 = _1704 + 7u;
        float _2070 = (dot(vec3(cbLight._m0[_1704 + 3u].xyz), vec3(_233, _234, _235)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _3815 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _2073 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1946 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1884;
        _1948 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1886;
        _1950 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1888;
    }
    uint _1952 = _1704 + 8u;
    float _1958 = cbLight._m0[_1704].x + _313;
    float _1959 = cbLight._m0[_1704].y + _314;
    float _1960 = cbLight._m0[_1704].z + _315;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1968 = dot(vec3(_233, _234, _235), vec3(cbLight._m0[_1704].xyz));
    float _3831 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _1972 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1973 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1958 * _1964, _1959 * _1964, _1960 * _1964));
    float _3853 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = (0.5 / ((_1971 + 9.9999999392252902907785028219223e-09) + _1972)) * _1971;
    float _3864 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.31831014156341552734375;
    uint _2006 = _1704 + 9u;
    float _2012 = cbLight._m0[_1746].x + _313;
    float _2013 = cbLight._m0[_1746].y + _314;
    float _2014 = cbLight._m0[_1746].z + _315;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2022 = dot(vec3(_233, _234, _235), vec3(cbLight._m0[_1746].xyz));
    float _3875 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_2012 * _2018, _2013 * _2018, _2014 * _2018));
    float _3886 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2039 = (0.5 / ((_2025 + 9.9999999392252902907785028219223e-09) + _1972)) * _2025;
    float _3897 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.31831014156341552734375;
    float _2051 = (((_2035 * cbLight._m0[_2006].x) * _2041) * _1728) + ((((cbLight._m0[_1952].x * _1693) * _1984) * _1992) * _1742);
    float _2052 = (((_2035 * cbLight._m0[_2006].y) * _2041) * _1728) + ((((cbLight._m0[_1952].y * _1695) * _1984) * _1992) * _1742);
    float _2053 = (((_2035 * cbLight._m0[_2006].z) * _2041) * _1728) + ((((cbLight._m0[_1952].z * _1697) * _1984) * _1992) * _1742);
    float _2109;
    float _2111;
    float _2113;
    if (_1782)
    {
        _2109 = _2051;
        _2111 = _2052;
        _2113 = _2053;
    }
    else
    {
        uint _2115 = _1704 + 10u;
        uint _2121 = _1704 + 2u;
        float _2127 = cbLight._m0[_2121].x + _313;
        float _2128 = cbLight._m0[_2121].y + _314;
        float _2129 = cbLight._m0[_2121].z + _315;
        float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
        float _2137 = dot(vec3(_233, _234, _235), vec3(cbLight._m0[_2121].xyz));
        float _3908 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2127 * _2133, _2128 * _2133, _2129 * _2133));
        float _3919 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2154 = (0.5 / ((_2140 + 9.9999999392252902907785028219223e-09) + _1972)) * _2140;
        float _3930 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.31831014156341552734375;
        float _2157 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2109 = (((_2150 * cbLight._m0[_2115].x) * _2156) * _2157) + _2051;
        _2111 = (((_2150 * cbLight._m0[_2115].y) * _2156) * _2157) + _2052;
        _2113 = (((_2150 * cbLight._m0[_2115].z) * _2156) * _2157) + _2053;
    }
    float _2188;
    float _2190;
    float _2192;
    if (_1891)
    {
        _2188 = _2109;
        _2190 = _2111;
        _2192 = _2113;
    }
    else
    {
        uint _2199 = _1704 + 11u;
        uint _2205 = _1704 + 3u;
        float _2211 = cbLight._m0[_2205].x + _313;
        float _2212 = cbLight._m0[_2205].y + _314;
        float _2213 = cbLight._m0[_2205].z + _315;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2221 = dot(vec3(_233, _234, _235), vec3(cbLight._m0[_2205].xyz));
        float _3946 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2211 * _2217, _2212 * _2217, _2213 * _2217));
        float _3957 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = (0.5 / ((_2224 + 9.9999999392252902907785028219223e-09) + _1972)) * _2224;
        float _3968 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.31831014156341552734375;
        float _2241 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2188 = (((_2234 * cbLight._m0[_2199].x) * _2240) * _2241) + _2109;
        _2190 = (((_2234 * cbLight._m0[_2199].y) * _2240) * _2241) + _2111;
        _2192 = (((_2234 * cbLight._m0[_2199].z) * _2240) * _2241) + _2113;
    }
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    if (_1702.y == 0u)
    {
        uvec4 _2262 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2263 = _2262.x;
        uint _2274 = uint((float(_2262.y) * floor(float(uint(cbSceneParam._m0[85u].y * _335) / _2263))) + floor(float(uint(cbSceneParam._m0[85u].x * _334) / _2263)));
        float _2284 = (log2(_1480 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2285 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        uint _2288 = uint(isnan(14.0) ? _2285 : (isnan(_2285) ? 14.0 : min(_2285, 14.0)));
        uvec4 _2293 = texelFetch(g_lightClusterGridBuffer, int(((_2288 << 2u) + (_2274 << 6u)) >> 2u));
        uint _2294 = _2293.x;
        uint _2295 = _2262.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2295 >> 4u) & 15u)) + 4294967295u) & _2294) == 0u) || ((_2295 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            uint _2578 = 0u;
            uint _2587;
            bool _2588;
            for (;;)
            {
                _2587 = texelFetch(g_lightClassification, int((((_2288 << 5u) + (_2274 << 9u)) + (_2578 << 2u)) >> 2u)).x;
                _2588 = _2587 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2588)
                {
                    frontier_phi_71_pred = _2577;
                    frontier_phi_71_pred_1 = _2576;
                    frontier_phi_71_pred_2 = _2575;
                    frontier_phi_71_pred_3 = _2574;
                    frontier_phi_71_pred_4 = _2573;
                    frontier_phi_71_pred_5 = _2572;
                }
                else
                {
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    uint _2723;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2587;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    for (;;)
                    {
                        uint _2727 = uint(findLSB(_2723)) + (_2578 << 5u);
                        uint _2724 = (_2723 + 4294967295u) & _2723;
                        uint _2729 = _2727 * 48u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2749 = (_2727 * 48u) + 4u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        uint _2768 = (_2727 * 48u) + 8u;
                        vec3 _2779 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x));
                        float _2783 = _2743.x - _1478;
                        float _2784 = _2743.y - _1479;
                        float _2785 = _2743.z - _1480;
                        float _2786 = dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785));
                        float _2789 = inversesqrt(_2786);
                        float _2798 = 1.0 - (_2786 * _2743.w);
                        float _3994 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2800 = sqrt(_2786) * _2762.w;
                        float _2803 = 1.39999997615814208984375 / (_2800 + 1.39999997615814208984375);
                        float _2804 = _2803 * _2803;
                        float _2807 = ((1.0 - _2804) * dot(vec3(_355, _358, _361), vec3(_2789 * _2783, _2789 * _2784, _2789 * _2785))) + _2804;
                        float _2810 = _2800 * _2800;
                        float _2814 = ((isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))) * _2799) / ((_2810 * 0.699999988079071044921875) + 1.0);
                        float _2818 = (-0.0) - _1478;
                        float _2819 = (-0.0) - _1479;
                        float _2820 = (-0.0) - _1480;
                        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
                        float _2828 = dot(vec3(_355, _358, _361), vec3(_2824 * _2818, _2824 * _2819, _2824 * _2820));
                        float _4010 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _4021 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2832 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2836 = (0.5 / (((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) + 9.9999999392252902907785028219223e-09) + _2832)) * _2832;
                        float _4032 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2845 = (((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 3.1415927410125732421875) / ((_2810 * 2.1991131305694580078125) + 3.141590118408203125)) * _2799;
                        _2647 = (_2814 * _2762.x) + _2720;
                        _2648 = (_2814 * _2762.y) + _2721;
                        _2649 = (_2814 * _2762.z) + _2722;
                        _2644 = (_2845 * _2779.x) + _2717;
                        _2645 = (_2845 * _2779.y) + _2718;
                        _2646 = (_2845 * _2779.z) + _2719;
                        if (_2724 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2724;
                        }
                    }
                    frontier_phi_71_pred = _2649;
                    frontier_phi_71_pred_1 = _2648;
                    frontier_phi_71_pred_2 = _2647;
                    frontier_phi_71_pred_3 = _2646;
                    frontier_phi_71_pred_4 = _2645;
                    frontier_phi_71_pred_5 = _2644;
                }
                _2423 = frontier_phi_71_pred;
                _2421 = frontier_phi_71_pred_1;
                _2419 = frontier_phi_71_pred_2;
                _2417 = frontier_phi_71_pred_3;
                _2415 = frontier_phi_71_pred_4;
                _2413 = frontier_phi_71_pred_5;
                uint _2579 = _2578 + 1u;
                if (_2579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2572 = _2413;
                    _2573 = _2415;
                    _2574 = _2417;
                    _2575 = _2419;
                    _2576 = _2421;
                    _2577 = _2423;
                    _2578 = _2579;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2429) & _2294) == 0u)
        {
            _2543 = _2412;
            _2545 = _2414;
            _2547 = _2416;
            _2549 = _2418;
            _2551 = _2420;
            _2553 = _2422;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2700 = _2412;
                float _2701 = _2414;
                float _2702 = _2416;
                float _2703 = _2418;
                float _2704 = _2420;
                float _2705 = _2422;
                uint _2706 = _2429;
                uint _2715;
                bool _2716;
                for (;;)
                {
                    _2715 = texelFetch(g_lightClassification, int((((_2288 << 5u) + (_2274 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                    _2716 = _2715 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2716)
                    {
                        frontier_phi_82_pred = _2705;
                        frontier_phi_82_pred_1 = _2704;
                        frontier_phi_82_pred_2 = _2703;
                        frontier_phi_82_pred_3 = _2702;
                        frontier_phi_82_pred_4 = _2701;
                        frontier_phi_82_pred_5 = _2700;
                    }
                    else
                    {
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _2872 = _2700;
                        float _2873 = _2701;
                        float _2874 = _2702;
                        float _2875 = _2703;
                        float _2876 = _2704;
                        float _2877 = _2705;
                        uint _2878 = _2715;
                        uint _2879;
                        vec4 _2904;
                        float _2905;
                        vec4 _2920;
                        vec3 _2932;
                        vec4 _2948;
                        vec4 _2964;
                        float _3011;
                        bool _3012;
                        for (;;)
                        {
                            uint _2889 = ((_2706 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2878));
                            _2879 = (_2878 + 4294967295u) & _2878;
                            uint _2891 = _2889 * 40u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            _2905 = _2904.w;
                            uint _2907 = (_2889 * 40u) + 4u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2922 = (_2889 * 40u) + 8u;
                            _2932 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x));
                            uint _2935 = (_2889 * 40u) + 16u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2951 = (_2889 * 40u) + 20u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2967 = (_2889 * 40u) + 24u;
                            vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2986 = (_2889 * 40u) + 28u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            _3011 = fma(_1480, _2999.z, fma(_1479, _2999.y, _2999.x * _1478)) + _2999.w;
                            _3012 = !((fma(_1480, _2980.z, fma(_1479, _2980.y, _2980.x * _1478)) + _2980.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3012)
                            {
                                float _3039 = _2904.x - _1478;
                                float _3040 = _2904.y - _1479;
                                float _3041 = _2904.z - _1480;
                                float _3042 = dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041));
                                float _3045 = inversesqrt(_3042);
                                float _3046 = _3045 * _3039;
                                float _3047 = _3045 * _3040;
                                float _3048 = _3045 * _3041;
                                float _3052 = 1.0 - (_3042 / (_2905 * _2905));
                                float _4043 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3057 = sqrt(_3042) * _2920.w;
                                float _3059 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                                float _3060 = _3059 * _3059;
                                float _3061 = 1.0 - _3060;
                                float _3063 = (_3061 * dot(vec3(_3046, _3047, _3048), vec3(_355, _358, _361))) + _3060;
                                float _3066 = _3057 * _3057;
                                float _3070 = (fma(_1480, _2948.z, fma(_1479, _2948.y, _2948.x * _1478)) + _2948.w) / _3011;
                                float _3071 = (fma(_1480, _2964.z, fma(_1479, _2964.y, _2964.x * _1478)) + _2964.w) / _3011;
                                float _3075 = 1.0 - dot(vec2(_3070, _3071), vec2(_3070, _3071));
                                float _4059 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3077 = _3076 * (((isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))) * _3053) / ((_3066 * 0.699999988079071044921875) + 1.0));
                                float _3087 = dot(vec3(_355, _358, _361), vec3((-0.0) - (_1478 * _2568), (-0.0) - (_1479 * _2568), (-0.0) - (_1480 * _2568)));
                                float _4070 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3095 = (_3061 * dot(vec3(_355, _358, _361), vec3(_3046, _3047, _3048))) + _3060;
                                float _4081 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3100 = (0.5 / (((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) + 9.9999999392252902907785028219223e-09) + _3096)) * _3096;
                                float _4092 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3107 = (_3076 * _3053) * (((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 3.1415927410125732421875) / ((_3066 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3077 * _2920.z;
                                frontier_phi_88_pred_1 = _3077 * _2920.y;
                                frontier_phi_88_pred_2 = _3077 * _2920.x;
                                frontier_phi_88_pred_3 = _3107 * _2932.z;
                                frontier_phi_88_pred_4 = _3107 * _2932.y;
                                frontier_phi_88_pred_5 = _3107 * _2932.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3116 = frontier_phi_88_pred;
                            _3115 = frontier_phi_88_pred_1;
                            _3114 = frontier_phi_88_pred_2;
                            _3113 = frontier_phi_88_pred_3;
                            _3112 = frontier_phi_88_pred_4;
                            _3111 = frontier_phi_88_pred_5;
                            _2862 = _3114 + _2875;
                            _2863 = _3115 + _2876;
                            _2864 = _3116 + _2877;
                            _2859 = _3111 + _2872;
                            _2860 = _3112 + _2873;
                            _2861 = _3113 + _2874;
                            if (_2879 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2879;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2864;
                        frontier_phi_82_pred_1 = _2863;
                        frontier_phi_82_pred_2 = _2862;
                        frontier_phi_82_pred_3 = _2861;
                        frontier_phi_82_pred_4 = _2860;
                        frontier_phi_82_pred_5 = _2859;
                    }
                    _2554 = frontier_phi_82_pred;
                    _2552 = frontier_phi_82_pred_1;
                    _2550 = frontier_phi_82_pred_2;
                    _2548 = frontier_phi_82_pred_3;
                    _2546 = frontier_phi_82_pred_4;
                    _2544 = frontier_phi_82_pred_5;
                    uint _2707 = _2706 + 1u;
                    if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2700 = _2544;
                        _2701 = _2546;
                        _2702 = _2548;
                        _2703 = _2550;
                        _2704 = _2552;
                        _2705 = _2554;
                        _2706 = _2707;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2550;
                frontier_phi_63_64_ladder_1 = _2554;
                frontier_phi_63_64_ladder_2 = _2552;
                frontier_phi_63_64_ladder_3 = _2548;
                frontier_phi_63_64_ladder_4 = _2546;
                frontier_phi_63_64_ladder_5 = _2544;
            }
            else
            {
                frontier_phi_63_64_ladder = _2418;
                frontier_phi_63_64_ladder_1 = _2422;
                frontier_phi_63_64_ladder_2 = _2420;
                frontier_phi_63_64_ladder_3 = _2416;
                frontier_phi_63_64_ladder_4 = _2414;
                frontier_phi_63_64_ladder_5 = _2412;
            }
            _2543 = frontier_phi_63_64_ladder_5;
            _2545 = frontier_phi_63_64_ladder_4;
            _2547 = frontier_phi_63_64_ladder_3;
            _2549 = frontier_phi_63_64_ladder;
            _2551 = frontier_phi_63_64_ladder_2;
            _2553 = frontier_phi_63_64_ladder_1;
        }
        float _2558 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
        _2307 = (_2558 * _2549) + _1946;
        _2309 = (_2558 * _2551) + _1948;
        _2311 = (_2558 * _2553) + _1950;
        _2313 = ((_2543 * 0.039999999105930328369140625) * _2558) + _2188;
        _2315 = ((_2545 * 0.039999999105930328369140625) * _2558) + _2190;
        _2317 = ((_2547 * 0.039999999105930328369140625) * _2558) + _2192;
    }
    else
    {
        _2307 = _1946;
        _2309 = _1948;
        _2311 = _1950;
        _2313 = _2188;
        _2315 = _2190;
        _2317 = _2192;
    }
    uint _2323 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _2332 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _220.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2323].x;
    float _2336 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _220.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2323].y;
    float _2340 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _220.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2323].z;
    float _4108 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _4119 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _4130 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _2357 = (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2307 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _400))) + ((_2313 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _1211)) * cbPerFrame._m0[3u].x)) + _2332;
    float _2359 = (_2336 + ((_2315 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1211)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2309 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _400)));
    float _2361 = (_2340 + ((_2317 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _1211)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2311 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _400)));
    float _2362 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2363 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2364 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2370 = cbMtdParam._m0[2u].x * _2332;
    float _2371 = cbMtdParam._m0[2u].y * _2336;
    float _2372 = cbMtdParam._m0[2u].z * _2340;
    float _4156 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2374 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    uint _2375 = _374 + 6u;
    float _2383 = _334 / cbSceneParam._m0[86u].x;
    float _2384 = _335 / cbSceneParam._m0[86u].y;
    vec4 _2398 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, (log2((isnan(cbSceneParam._m0[77u].w) ? _255 : (isnan(_255) ? cbSceneParam._m0[77u].w : min(_255, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2400 = _2398.x;
    float _2401 = _2398.y;
    float _2402 = _2398.z;
    float _2403 = _2398.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_255 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_255) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _255 : min(cbSceneParam._m0[80u].w, _255));
        float _2438 = _2437 / _255;
        float _2449 = _2438 * _306;
        float _2450 = _307 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2453 = _2438 * _308;
        float _2455 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2456 = _2455 + cbSceneParam._m0[79u].w;
        float _2457 = cbSceneParam._m0[79u].w - _2450;
        float _2463 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2453 * _2453));
        float _2466 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2463;
        float _2471 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2657;
        if (abs((_2451 - _2455) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2657 = ((((_2456 > 0.0) ? exp2(_2471 * _2456) : (2.0 - exp2(_2473 * _2456))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2466;
        }
        else
        {
            float _2601 = 1.0 / cbSceneParam._m0[80u].x;
            float _2602 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : max(_2456, _2457));
            float _2603 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : min(_2456, _2457));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            _2657 = ((abs(_2463 / _2451) * cbSceneParam._m0[80u].y) * ((((_2612 - _2613) * 2.0) - ((exp2(_2471 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0)))) - exp2(_2471 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0))))) * _2601)) - ((exp2(_2473 * _2612) - exp2(_2473 * _2613)) * _2601))) + (_2466 * cbSceneParam._m0[80u].z);
        }
        vec4 _2659 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, 1.0), 0.0);
        float _2668 = exp2((_2657 * (-1.44269502162933349609375)) * (1.0 - _2659.w));
        float _2669 = log2(_2668);
        float _2685 = log2(_2403);
        _2475 = (exp2(_2685 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].x)) * _2659.x) / cbSceneParam._m0[78u].x)) + _2400;
        _2477 = (exp2(_2685 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].y)) * _2659.y) / cbSceneParam._m0[78u].y)) + _2401;
        _2479 = (exp2(_2685 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].z)) * _2659.z) / cbSceneParam._m0[78u].z)) + _2402;
        _2481 = _2668 * _2403;
    }
    else
    {
        _2475 = _2400;
        _2477 = _2401;
        _2479 = _2402;
        _2481 = _2403;
    }
    bool _2695;
    vec4 _2490;
    vec4 _2513;
    float _2515;
    float _2519;
    float _2520;
    float _2521;
    float _2524;
    float _2527;
    float _2530;
    float _2531;
    bool _2542;
    for (;;)
    {
        _2490 = cbMatDynParam._m0[0u];
        float _2492 = roundEven(_2490.y);
        bool _2493 = _2492 == 3.0;
        float _2495 = log2(_2481);
        float _2499 = exp2(_2495 * cbSceneParam._m0[78u].x);
        float _2500 = exp2(_2495 * cbSceneParam._m0[78u].y);
        float _2501 = exp2(_2495 * cbSceneParam._m0[78u].z);
        float _2502 = _2499 * _2362;
        float _2503 = _2500 * _2363;
        float _2504 = _2501 * _2364;
        float _2511 = _322 + (-0.5);
        _2513 = cbMtdParam._m0[1u];
        _2515 = _2513.y * _2511;
        float _2518 = (_2492 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2519 = _2518 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = _2518 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2477)));
        _2521 = _2518 * (_2493 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2479)));
        _2524 = ((_2370 * _2374) * _2499) * _2518;
        _2527 = ((_2371 * _2374) * _2500) * _2518;
        _2530 = ((_2372 * _2374) * _2501) * _2518;
        _2531 = _2511 * 0.999000012874603271484375;
        _2542 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2542)
        {
            if ((cbInstanceData._m0[_374 + 7u].x + _2531) < 0.5)
            {
                _2695 = true;
                break;
            }
        }
        uint _2636 = _376 + uint(_2490.w);
        if ((cbInstanceData._m0[_2636].w < 1.0) && ((cbInstanceData._m0[_2636].w + _2531) < 0.5))
        {
            _2695 = true;
            break;
        }
        if ((_2515 + 1.0) < _2513.x)
        {
            _2695 = true;
            break;
        }
        _2695 = false;
        break;
    }
    float _2850;
    if (_2695)
    {
        discard_state = true;
        _2850 = 0.0;
    }
    else
    {
        _2850 = cbInstanceData._m0[_2375].w;
    }
    SV_Target.x = _2519;
    SV_Target.y = _2520;
    SV_Target.z = _2521;
    SV_Target.w = _2850;
    SV_Target_1.x = _2524;
    SV_Target_1.y = _2527;
    SV_Target_1.z = _2530;
    SV_Target_1.w = cbInstanceData._m0[_2375].w;
    discard_exit();
}


