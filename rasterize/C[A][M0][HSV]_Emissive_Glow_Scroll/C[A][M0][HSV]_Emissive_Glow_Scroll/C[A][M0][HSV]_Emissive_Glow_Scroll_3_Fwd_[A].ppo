#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _804;
float _3013;
float _3014;
float _3015;
float _3016;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _235 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _248 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3025 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _250 = isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0));
    float _258 = (((_250 * _250) * (3.0 - (_250 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _266 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _267 = _266 * _169;
    float _268 = _266 * _170;
    float _269 = _266 * _171;
    float _3036 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3047 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3058 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _288 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _329 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _339 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _329);
    float _340 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _329);
    float _341 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _329);
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _346 = _339 * _345;
    float _347 = _340 * _345;
    float _348 = _341 * _345;
    vec4 _353 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _355 = _353.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _483 = sqrt(((_339 * _339) + (_340 * _340)) + (_341 * _341));
        float _489 = (cbMatDynParam._m0[5u].x * _483) + cbMatDynParam._m0[5u].y;
        float _3069 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
        float _490 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
        float _494 = (cbMatDynParam._m0[5u].z * _483) + cbMatDynParam._m0[5u].w;
        float _3080 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0))) - _490)) + _490) < ((_355 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _367 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _368 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _388 = fma(_269, cbSceneParam._m0[5u].z, fma(_268, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _267));
    float _391 = fma(_269, cbSceneParam._m0[6u].z, fma(_268, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _267));
    float _394 = fma(_269, cbSceneParam._m0[7u].z, fma(_268, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _267));
    uint _407 = uint(roundEven(NORMAL.w)) * 13u;
    uint _408 = _407 + 9u;
    uint _409 = _408 + uint(cbMatDynParam._m0[0u].w);
    float _415 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0)))) * cbInstanceData._m0[_409].x;
    float _416 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0)))) * cbInstanceData._m0[_409].y;
    float _417 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0)))) * cbInstanceData._m0[_409].z;
    float _3091 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
    float _3102 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
    float _3113 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
    vec4 _429 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _367, cbSceneParam._m0[86u].y * _368));
    float _432 = _429.x * TEXCOORD.z;
    float _433 = dot(vec3(_267, _268, _269), vec3(_346, _347, _348));
    float _436 = _433 * 2.0;
    float _440 = (_436 * _267) - _346;
    float _441 = (_436 * _268) - _347;
    float _442 = (_436 * _269) - _348;
    float _464 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _803;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _528 = fma(_472, cbModelParam._m0[26u].z, fma(_468, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _464));
        float _532 = fma(_472, cbModelParam._m0[27u].z, fma(_468, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _464));
        float _536 = fma(_472, cbModelParam._m0[28u].z, fma(_468, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _464));
        float _561 = _464 + _267;
        float _562 = _468 + _268;
        float _563 = _472 + _269;
        float _573 = fma(_563, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561)) - _528;
        float _574 = fma(_563, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561)) - _532;
        float _575 = fma(_563, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561)) - _536;
        float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
        float _592 = ((_579 * _573) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_528 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_579 * _574) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_532 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _594 = ((_579 * _575) / cbModelParam._m0[34u].z) + ((((((_536 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        float _631 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _632 = _631 * (_597.x + (-0.5));
        float _633 = _631 * (_597.y + (-0.5));
        float _634 = _631 * (_597.z + (-0.5));
        float _641 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _642 = _641 * (_604.x + (-0.5));
        float _643 = _641 * (_604.y + (-0.5));
        float _644 = _641 * (_604.z + (-0.5));
        float _651 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_611.x + (-0.5));
        float _653 = _651 * (_611.y + (-0.5));
        float _654 = _651 * (_611.z + (-0.5));
        float _661 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_618.x + (-0.5));
        float _663 = _661 * (_618.y + (-0.5));
        float _664 = _661 * (_618.z + (-0.5));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = _632 * 0.5;
        float _669 = _642 * 0.5;
        float _670 = _652 * 0.5;
        float _671 = dot(vec3(_668, _669, _670), vec3(_668, _669, _670));
        float _676 = (_671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_671);
        float _685 = (dot(vec3(_267, _268, _269), vec3(_676 * _668, _676 * _669, _676 * _670)) + 1.0) * 0.5;
        float _3139 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _695 = sqrt(((_669 * _669) + (_668 * _668)) + (_670 * _670)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3150 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3161 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))) * (_697 + 1.0))) + _702) * _665;
        float _712 = _633 * 0.5;
        float _713 = _643 * 0.5;
        float _714 = _653 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _728 = (dot(vec3(_267, _268, _269), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3172 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _737 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3183 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3194 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * (_739 + 1.0))) + _744) * _666;
        float _754 = _634 * 0.5;
        float _755 = _644 * 0.5;
        float _756 = _654 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_267, _268, _269), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3205 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _3216 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3227 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * (_781 + 1.0))) + _786) * _667;
        _803 = _634;
        _805 = _633;
        _806 = _632;
        _807 = _644;
        _808 = _643;
        _809 = _642;
        _810 = _654;
        _811 = _653;
        _812 = _652;
        _813 = _667;
        _814 = _666;
        _815 = _665;
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
    }
    else
    {
        _803 = _804;
        _805 = _804;
        _806 = _804;
        _807 = _804;
        _808 = _804;
        _809 = _804;
        _810 = _804;
        _811 = _804;
        _812 = _804;
        _813 = _804;
        _814 = _804;
        _815 = _804;
        _816 = 0.0;
        _817 = 0.0;
        _818 = 0.0;
    }
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _847 = fma(_472, cbModelParam._m0[30u].z, fma(_468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _464));
        float _851 = fma(_472, cbModelParam._m0[31u].z, fma(_468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _464));
        float _855 = fma(_472, cbModelParam._m0[32u].z, fma(_468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _464));
        float _878 = _464 + _267;
        float _879 = _468 + _268;
        float _880 = _472 + _269;
        float _890 = fma(_880, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878)) - _847;
        float _891 = fma(_880, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878)) - _851;
        float _892 = fma(_880, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878)) - _855;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_847 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_851 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[35u].z) + ((((((_855 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _946 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_913.x + (-0.5));
        float _948 = _946 * (_913.y + (-0.5));
        float _949 = _946 * (_913.z + (-0.5));
        float _956 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_920.x + (-0.5));
        float _958 = _956 * (_920.y + (-0.5));
        float _959 = _956 * (_920.z + (-0.5));
        float _966 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_927.x + (-0.5));
        float _968 = _966 * (_927.y + (-0.5));
        float _969 = _966 * (_927.z + (-0.5));
        float _976 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_934.x + (-0.5));
        float _978 = _976 * (_934.y + (-0.5));
        float _979 = _976 * (_934.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_267, _268, _269), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3268 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3279 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3290 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * (_1010 + 1.0))) + _1015) * _980;
        float _1025 = _948 * 0.5;
        float _1026 = _958 * 0.5;
        float _1027 = _968 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_267, _268, _269), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3323 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_1052 + 1.0))) + _1057) * _981;
        float _1067 = _949 * 0.5;
        float _1068 = _959 * 0.5;
        float _1069 = _969 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_267, _268, _269), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3356 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_1094 + 1.0))) + _1099) * _982;
        _1116 = _949;
        _1117 = _948;
        _1118 = _947;
        _1119 = _959;
        _1120 = _958;
        _1121 = _957;
        _1122 = _969;
        _1123 = _968;
        _1124 = _967;
        _1125 = _982;
        _1126 = _981;
        _1127 = _980;
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _804;
        _1117 = _804;
        _1118 = _804;
        _1119 = _804;
        _1120 = _804;
        _1121 = _804;
        _1122 = _804;
        _1123 = _804;
        _1124 = _804;
        _1125 = _804;
        _1126 = _804;
        _1127 = _804;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _816)) + _816;
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _817)) + _817;
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _818)) + _818;
    float _1163 = fma(_1142, cbSceneParam._m0[89u].z, fma(_1141, cbSceneParam._m0[89u].y, _1140 * cbSceneParam._m0[89u].x));
    float _1166 = fma(_1142, cbSceneParam._m0[90u].z, fma(_1141, cbSceneParam._m0[90u].y, _1140 * cbSceneParam._m0[90u].x));
    float _1169 = fma(_1142, cbSceneParam._m0[91u].z, fma(_1141, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1140));
    float _1184 = _440 * 0.5;
    float _1185 = _441 * 0.5;
    float _1186 = _442 * 0.5;
    float _1187 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1190 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1193 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1227;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1200 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_803, _807, _810, _813));
        float _1204 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_805, _808, _811, _814));
        float _1208 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_806, _809, _812, _815));
        float _1215 = dot(vec4(cbModelParam._m0[39u]), vec4(_1184, _1185, _1186, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1215) ? 0.0 : (isnan(0.0) ? _1215 : max(0.0, _1215))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1238;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1229 = dot(vec4(cbModelParam._m0[40u]), vec4(_1184, _1185, _1186, 1.0));
        _1238 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1229) ? 0.0 : (isnan(0.0) ? _1229 : max(0.0, _1229))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1238 = 1.0;
    }
    float _1242 = (_1238 * cbModelParam._m0[1u].x) + (_1227 * (1.0 - cbModelParam._m0[1u].x));
    float _1251 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1332;
    float _1334;
    float _1336;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1299 = fma(_472, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464)) + cbModelParam._m0[13u].w;
        float _1303 = fma(_472, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464)) + cbModelParam._m0[14u].w;
        float _1307 = fma(_472, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464)) + cbModelParam._m0[15u].w;
        float _1310 = fma(_442, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _440));
        float _1313 = fma(_442, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _440));
        float _1316 = fma(_442, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _440));
        float _1342;
        if (_1310 > 0.0)
        {
            _1342 = abs((1.0 - _1299) / _1310);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1299 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1342 = frontier_phi_17_15_ladder;
        }
        float _1547;
        if (_1313 > 0.0)
        {
            _1547 = abs((1.0 - _1303) / _1313);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1303 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1547 = frontier_phi_26_22_ladder;
        }
        float _1736;
        if (_1316 > 0.0)
        {
            _1736 = abs((1.0 - _1307) / _1316);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1307 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1736 = frontier_phi_38_33_ladder;
        }
        float _1738 = isnan(_1547) ? _1342 : (isnan(_1342) ? _1547 : min(_1342, _1547));
        float _1739 = isnan(_1736) ? _1738 : (isnan(_1738) ? _1736 : min(_1738, _1736));
        float _1743 = (_1739 * _1310) + _1299;
        float _1744 = (_1739 * _1313) + _1303;
        float _1745 = (_1739 * _1316) + _1307;
        float _1746 = _1739 * 9.9999997473787516355514526367188e-05;
        float _1748 = (-1.0) - _1746;
        float _1750 = _1746 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1745 > _1750) || ((_1745 < _1748) || ((_1744 > _1750) || ((_1744 < _1748) || ((_1743 < _1748) || (_1743 > _1750))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1745, cbModelParam._m0[9u].z, fma(_1744, cbModelParam._m0[9u].y, _1743 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1745, cbModelParam._m0[10u].z, fma(_1744, cbModelParam._m0[10u].y, _1743 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1745, cbModelParam._m0[11u].z, fma(_1744, cbModelParam._m0[11u].y, _1743 * cbModelParam._m0[11u].x))), _1251);
            frontier_phi_16_38_ladder = _1842.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1842.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1842.x * cbModelParam._m0[1u].y;
        }
        _1332 = frontier_phi_16_38_ladder_2;
        _1334 = frontier_phi_16_38_ladder_1;
        _1336 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_440, _441, _442), _1251);
        _1332 = _1320.x * cbModelParam._m0[1u].y;
        _1334 = _1320.y * cbModelParam._m0[1u].y;
        _1336 = _1320.z * cbModelParam._m0[1u].y;
    }
    float _1339 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1395 = fma(_472, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464)) + cbModelParam._m0[21u].w;
        float _1399 = fma(_472, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464)) + cbModelParam._m0[22u].w;
        float _1403 = fma(_472, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464)) + cbModelParam._m0[23u].w;
        float _1406 = fma(_442, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _440));
        float _1409 = fma(_442, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _440));
        float _1412 = fma(_442, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _440));
        float _1552;
        if (_1406 > 0.0)
        {
            _1552 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1552 = frontier_phi_28_24_ladder;
        }
        float _1763;
        if (_1409 > 0.0)
        {
            _1763 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1763 = frontier_phi_40_35_ladder;
        }
        float _1914;
        if (_1412 > 0.0)
        {
            _1914 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1914 = frontier_phi_49_46_ladder;
        }
        float _1916 = isnan(_1763) ? _1552 : (isnan(_1552) ? _1763 : min(_1552, _1763));
        float _1917 = isnan(_1914) ? _1916 : (isnan(_1916) ? _1914 : min(_1916, _1914));
        float _1921 = (_1917 * _1406) + _1395;
        float _1922 = (_1917 * _1409) + _1399;
        float _1923 = (_1917 * _1412) + _1403;
        float _1924 = _1917 * 9.9999997473787516355514526367188e-05;
        float _1925 = (-1.0) - _1924;
        float _1927 = _1924 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1923 > _1927) || ((_1923 < _1925) || ((_1922 > _1927) || ((_1922 < _1925) || ((_1921 < _1925) || (_1921 > _1927))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1923, cbModelParam._m0[17u].z, fma(_1922, cbModelParam._m0[17u].y, _1921 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1923, cbModelParam._m0[18u].z, fma(_1922, cbModelParam._m0[18u].y, _1921 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1923, cbModelParam._m0[19u].z, fma(_1922, cbModelParam._m0[19u].y, _1921 * cbModelParam._m0[19u].x))), _1339);
            frontier_phi_25_49_ladder = _2163.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2163.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2163.x * cbModelParam._m0[1u].z;
        }
        _1431 = frontier_phi_25_49_ladder_2;
        _1433 = frontier_phi_25_49_ladder_1;
        _1435 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_440, _441, _442), _1339);
        _1431 = _1415.x * cbModelParam._m0[1u].z;
        _1433 = _1415.y * cbModelParam._m0[1u].z;
        _1435 = _1415.z * cbModelParam._m0[1u].z;
    }
    float _1447 = _432 * 0.01200000010430812835693359375;
    float _1449 = _1447 * ((cbModelParam._m0[1u].w * (_1431 - _1332)) + _1332);
    float _1450 = _1447 * ((cbModelParam._m0[1u].w * (_1433 - _1334)) + _1334);
    float _1451 = _1447 * ((cbModelParam._m0[1u].w * (_1435 - _1336)) + _1336);
    float _1454 = fma(_1451, cbSceneParam._m0[89u].z, fma(_1450, cbSceneParam._m0[89u].y, _1449 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1451, cbSceneParam._m0[90u].z, fma(_1450, cbSceneParam._m0[90u].y, _1449 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1451, cbSceneParam._m0[91u].z, fma(_1450, cbSceneParam._m0[91u].y, _1449 * cbSceneParam._m0[91u].x));
    uvec4 _1470 = floatBitsToUint(cbInstanceData._m0[_407 + 5u]);
    uint _1472 = _1470.x * 14u;
    uint _1473 = _1472 + 13u;
    float _1480 = _432 + (-1.0);
    float _1485 = (cbLight._m0[_1473].x * _1480) + 1.0;
    float _1486 = (cbLight._m0[_1473].y * _1480) + 1.0;
    float _1487 = (cbLight._m0[_1473].z * _1480) + 1.0;
    float _1488 = (cbLight._m0[_1473].w * _1480) + 1.0;
    uint _1489 = _1472 + 5u;
    float _1495 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
    uint _1499 = _1472 + 4u;
    float _1506 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
    uint _1510 = _1472 | 1u;
    float _1521 = dot(vec3(cbLight._m0[_1472].xyz), vec3(_267, _268, _269));
    float _1524 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_267, _268, _269));
    float _3492 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _3503 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
    float _1529 = (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.3183098733425140380859375;
    float _1531 = (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.3183098733425140380859375;
    float _1538 = ((cbLight._m0[_1489].x * _1495) * _1531) + ((cbLight._m0[_1499].x * _1506) * _1529);
    float _1539 = ((_1495 * cbLight._m0[_1489].y) * _1531) + ((_1506 * cbLight._m0[_1499].y) * _1529);
    float _1540 = ((_1495 * cbLight._m0[_1489].z) * _1531) + ((_1506 * cbLight._m0[_1499].z) * _1529);
    uvec4 _1544 = floatBitsToUint(cbLight._m0[_1472 + 12u]);
    bool _1546 = _1544.x == 0u;
    float _1557;
    float _1559;
    float _1561;
    if (_1546)
    {
        _1557 = _1538;
        _1559 = _1539;
        _1561 = _1540;
    }
    else
    {
        uint _1565 = _1472 + 6u;
        float _1581 = (dot(vec3(cbLight._m0[_1472 + 2u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _1582 = _1581 * _1581;
        float _3514 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1584 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1557 = (((cbLight._m0[_1565].x * 0.3183098733425140380859375) * _1583) * _1584) + _1538;
        _1559 = (((cbLight._m0[_1565].y * 0.3183098733425140380859375) * _1583) * _1584) + _1539;
        _1561 = (((cbLight._m0[_1565].z * 0.3183098733425140380859375) * _1583) * _1584) + _1540;
    }
    bool _1564 = _1544.y == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1564)
    {
        _1602 = _1557;
        _1604 = _1559;
        _1606 = _1561;
    }
    else
    {
        uint _1707 = _1472 + 7u;
        float _1723 = (dot(vec3(cbLight._m0[_1472 + 3u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _1724 = _1723 * _1723;
        float _3530 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1726 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1602 = (((cbLight._m0[_1707].x * 0.3183098733425140380859375) * _1725) * _1726) + _1557;
        _1604 = (((cbLight._m0[_1707].y * 0.3183098733425140380859375) * _1725) * _1726) + _1559;
        _1606 = (((cbLight._m0[_1707].z * 0.3183098733425140380859375) * _1725) * _1726) + _1561;
    }
    uint _1608 = _1472 + 8u;
    float _1614 = cbLight._m0[_1472].x + _346;
    float _1615 = cbLight._m0[_1472].y + _347;
    float _1616 = cbLight._m0[_1472].z + _348;
    float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
    float _1624 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1472].xyz));
    float _3546 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1627 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _1628 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _1629 = dot(vec3(cbLight._m0[_1472].xyz), vec3(_1614 * _1620, _1615 * _1620, _1616 * _1620));
    float _3568 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1640 = (exp2(log2(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1646 = (0.5 / ((_1627 + 9.9999999392252902907785028219223e-09) + _1628)) * _1627;
    float _3579 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1648 = (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.31831014156341552734375;
    uint _1659 = _1472 + 9u;
    float _1665 = cbLight._m0[_1510].x + _346;
    float _1666 = cbLight._m0[_1510].y + _347;
    float _1667 = cbLight._m0[_1510].z + _348;
    float _1671 = inversesqrt(dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667)));
    float _1675 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1510].xyz));
    float _3590 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1678 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _1679 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_1665 * _1671, _1666 * _1671, _1667 * _1671));
    float _3601 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1688 = (exp2(log2(1.0 - (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1692 = (0.5 / ((_1678 + 9.9999999392252902907785028219223e-09) + _1628)) * _1678;
    float _3612 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1694 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.31831014156341552734375;
    float _1704 = (((_1688 * cbLight._m0[_1659].x) * _1694) * _1495) + (((_1640 * cbLight._m0[_1608].x) * _1648) * _1506);
    float _1705 = (((_1688 * cbLight._m0[_1659].y) * _1694) * _1495) + (((_1640 * cbLight._m0[_1608].y) * _1648) * _1506);
    float _1706 = (((_1688 * cbLight._m0[_1659].z) * _1694) * _1495) + (((_1640 * cbLight._m0[_1608].z) * _1648) * _1506);
    float _1768;
    float _1770;
    float _1772;
    if (_1546)
    {
        _1768 = _1704;
        _1770 = _1705;
        _1772 = _1706;
    }
    else
    {
        uint _1774 = _1472 + 10u;
        uint _1780 = _1472 + 2u;
        float _1786 = cbLight._m0[_1780].x + _346;
        float _1787 = cbLight._m0[_1780].y + _347;
        float _1788 = cbLight._m0[_1780].z + _348;
        float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
        float _1796 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1780].xyz));
        float _3623 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1799 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1800 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1786 * _1792, _1787 * _1792, _1788 * _1792));
        float _3634 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1809 = (exp2(log2(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1813 = (0.5 / ((_1799 + 9.9999999392252902907785028219223e-09) + _1628)) * _1799;
        float _3645 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1815 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.31831014156341552734375;
        float _1816 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1768 = (((_1809 * cbLight._m0[_1774].x) * _1815) * _1816) + _1704;
        _1770 = (((_1809 * cbLight._m0[_1774].y) * _1815) * _1816) + _1705;
        _1772 = (((_1809 * cbLight._m0[_1774].z) * _1815) * _1816) + _1706;
    }
    float _1851;
    float _1853;
    float _1855;
    if (_1564)
    {
        _1851 = _1768;
        _1853 = _1770;
        _1855 = _1772;
    }
    else
    {
        uint _1862 = _1472 + 11u;
        uint _1868 = _1472 + 3u;
        float _1874 = cbLight._m0[_1868].x + _346;
        float _1875 = cbLight._m0[_1868].y + _347;
        float _1876 = cbLight._m0[_1868].z + _348;
        float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
        float _1884 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1868].xyz));
        float _3661 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1888 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_1874 * _1880, _1875 * _1880, _1876 * _1880));
        float _3672 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1901 = (0.5 / ((_1887 + 9.9999999392252902907785028219223e-09) + _1628)) * _1887;
        float _3683 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1903 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.31831014156341552734375;
        float _1904 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1851 = (((_1897 * cbLight._m0[_1862].x) * _1903) * _1904) + _1768;
        _1853 = (((_1897 * cbLight._m0[_1862].y) * _1903) * _1904) + _1770;
        _1855 = (((_1897 * cbLight._m0[_1862].z) * _1903) * _1904) + _1772;
    }
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    if (_1470.y == 0u)
    {
        float _1979 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1980 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1979;
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1979;
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1979;
        uvec4 _1994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1995 = _1994.x;
        uint _2006 = uint((float(_1994.y) * floor(float(uint(cbSceneParam._m0[85u].y * _368) / _1995))) + floor(float(uint(cbSceneParam._m0[85u].x * _367) / _1995)));
        float _2016 = (log2(_1982 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2017 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        uint _2020 = uint(isnan(14.0) ? _2017 : (isnan(_2017) ? 14.0 : min(_2017, 14.0)));
        uvec4 _2025 = texelFetch(g_lightClusterGridBuffer, int(((_2020 << 2u) + (_2006 << 6u)) >> 2u));
        uint _2026 = _2025.x;
        uint _2027 = _1994.z;
        float _2168;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        if (((((1u << ((_2027 >> 4u) & 15u)) + 4294967295u) & _2026) == 0u) || ((_2027 & 240u) == 0u))
        {
            _2168 = 0.0;
            _2170 = 0.0;
            _2172 = 0.0;
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
        }
        else
        {
            float _2169;
            float _2171;
            float _2173;
            float _2175;
            float _2177;
            float _2179;
            float _2327 = 0.0;
            float _2328 = 0.0;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            uint _2333 = 0u;
            uint _2342;
            bool _2343;
            for (;;)
            {
                _2342 = texelFetch(g_lightClassification, int((((_2020 << 5u) + (_2006 << 9u)) + (_2333 << 2u)) >> 2u)).x;
                _2343 = _2342 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2343)
                {
                    frontier_phi_66_pred = _2327;
                    frontier_phi_66_pred_1 = _2332;
                    frontier_phi_66_pred_2 = _2331;
                    frontier_phi_66_pred_3 = _2330;
                    frontier_phi_66_pred_4 = _2329;
                    frontier_phi_66_pred_5 = _2328;
                }
                else
                {
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    uint _2478;
                    _2472 = _2327;
                    _2473 = _2328;
                    _2474 = _2329;
                    _2475 = _2330;
                    _2476 = _2331;
                    _2477 = _2332;
                    _2478 = _2342;
                    float _2399;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    float _2404;
                    for (;;)
                    {
                        uint _2482 = uint(findLSB(_2478)) + (_2333 << 5u);
                        uint _2479 = (_2478 + 4294967295u) & _2478;
                        uint _2484 = _2482 * 48u;
                        vec4 _2498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2484)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 3u)).x));
                        uint _2504 = (_2482 * 48u) + 4u;
                        vec4 _2517 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 3u)).x));
                        uint _2523 = (_2482 * 48u) + 8u;
                        vec3 _2534 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2523)).x, texelFetch(g_PointLightRenderingBuffer, int(_2523 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2523 + 2u)).x));
                        float _2538 = _2498.x - _1980;
                        float _2539 = _2498.y - _1981;
                        float _2540 = _2498.z - _1982;
                        float _2541 = dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540));
                        float _2544 = inversesqrt(_2541);
                        float _2553 = 1.0 - (_2541 * _2498.w);
                        float _3709 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
                        float _2554 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
                        float _2555 = sqrt(_2541) * _2517.w;
                        float _2558 = 1.39999997615814208984375 / (_2555 + 1.39999997615814208984375);
                        float _2559 = _2558 * _2558;
                        float _2562 = ((1.0 - _2559) * dot(vec3(_388, _391, _394), vec3(_2544 * _2538, _2544 * _2539, _2544 * _2540))) + _2559;
                        float _2565 = _2555 * _2555;
                        float _2569 = ((isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0))) * _2554) / ((_2565 * 0.699999988079071044921875) + 1.0);
                        float _2573 = (-0.0) - _1980;
                        float _2574 = (-0.0) - _1981;
                        float _2575 = (-0.0) - _1982;
                        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
                        float _2583 = dot(vec3(_388, _391, _394), vec3(_2579 * _2573, _2579 * _2574, _2579 * _2575));
                        float _3725 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                        float _3736 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
                        float _2587 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                        float _2591 = (0.5 / (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) + 9.9999999392252902907785028219223e-09) + _2587)) * _2587;
                        float _3747 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2600 = (((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 3.1415927410125732421875) / ((_2565 * 2.1991131305694580078125) + 3.141590118408203125)) * _2554;
                        _2402 = (_2569 * _2517.x) + _2475;
                        _2403 = (_2569 * _2517.y) + _2476;
                        _2404 = (_2569 * _2517.z) + _2477;
                        _2399 = (_2600 * _2534.x) + _2472;
                        _2400 = (_2600 * _2534.y) + _2473;
                        _2401 = (_2600 * _2534.z) + _2474;
                        if (_2479 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2472 = _2399;
                            _2473 = _2400;
                            _2474 = _2401;
                            _2475 = _2402;
                            _2476 = _2403;
                            _2477 = _2404;
                            _2478 = _2479;
                        }
                    }
                    frontier_phi_66_pred = _2399;
                    frontier_phi_66_pred_1 = _2404;
                    frontier_phi_66_pred_2 = _2403;
                    frontier_phi_66_pred_3 = _2402;
                    frontier_phi_66_pred_4 = _2401;
                    frontier_phi_66_pred_5 = _2400;
                }
                _2169 = frontier_phi_66_pred;
                _2179 = frontier_phi_66_pred_1;
                _2177 = frontier_phi_66_pred_2;
                _2175 = frontier_phi_66_pred_3;
                _2173 = frontier_phi_66_pred_4;
                _2171 = frontier_phi_66_pred_5;
                uint _2334 = _2333 + 1u;
                if (_2334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2327 = _2169;
                    _2328 = _2171;
                    _2329 = _2173;
                    _2330 = _2175;
                    _2331 = _2177;
                    _2332 = _2179;
                    _2333 = _2334;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2168 = _2169;
            _2170 = _2171;
            _2172 = _2173;
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
        }
        uvec4 _2182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2183 = _2182.z;
        uint _2185 = (_2183 >> 8u) & 15u;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        if (((4294967295u << _2185) & _2026) == 0u)
        {
            _2298 = _2168;
            _2300 = _2170;
            _2302 = _2172;
            _2304 = _2174;
            _2306 = _2176;
            _2308 = _2178;
        }
        else
        {
            float _2323 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2185 < ((_2183 >> 12u) & 15u))
            {
                float _2299;
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2455 = _2168;
                float _2456 = _2170;
                float _2457 = _2172;
                float _2458 = _2174;
                float _2459 = _2176;
                float _2460 = _2178;
                uint _2461 = _2185;
                uint _2470;
                bool _2471;
                for (;;)
                {
                    _2470 = texelFetch(g_lightClassification, int((((_2020 << 5u) + (_2006 << 9u)) + (_2461 << 2u)) >> 2u)).x;
                    _2471 = _2470 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2471)
                    {
                        frontier_phi_77_pred = _2460;
                        frontier_phi_77_pred_1 = _2459;
                        frontier_phi_77_pred_2 = _2458;
                        frontier_phi_77_pred_3 = _2457;
                        frontier_phi_77_pred_4 = _2456;
                        frontier_phi_77_pred_5 = _2455;
                    }
                    else
                    {
                        float _2614;
                        float _2615;
                        float _2616;
                        float _2617;
                        float _2618;
                        float _2619;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2627 = _2455;
                        float _2628 = _2456;
                        float _2629 = _2457;
                        float _2630 = _2458;
                        float _2631 = _2459;
                        float _2632 = _2460;
                        uint _2633 = _2470;
                        uint _2634;
                        vec4 _2659;
                        float _2660;
                        vec4 _2675;
                        vec3 _2687;
                        vec4 _2703;
                        vec4 _2719;
                        float _2766;
                        bool _2767;
                        for (;;)
                        {
                            uint _2644 = ((_2461 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2633));
                            _2634 = (_2633 + 4294967295u) & _2633;
                            uint _2646 = _2644 * 40u;
                            _2659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 3u)).x));
                            _2660 = _2659.w;
                            uint _2662 = (_2644 * 40u) + 4u;
                            _2675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 3u)).x));
                            uint _2677 = (_2644 * 40u) + 8u;
                            _2687 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x));
                            uint _2690 = (_2644 * 40u) + 16u;
                            _2703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 3u)).x));
                            uint _2706 = (_2644 * 40u) + 20u;
                            _2719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 3u)).x));
                            uint _2722 = (_2644 * 40u) + 24u;
                            vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 3u)).x));
                            uint _2741 = (_2644 * 40u) + 28u;
                            vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 3u)).x));
                            _2766 = fma(_1982, _2754.z, fma(_1981, _2754.y, _2754.x * _1980)) + _2754.w;
                            _2767 = !((fma(_1982, _2735.z, fma(_1981, _2735.y, _2735.x * _1980)) + _2735.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2767)
                            {
                                float _2794 = _2659.x - _1980;
                                float _2795 = _2659.y - _1981;
                                float _2796 = _2659.z - _1982;
                                float _2797 = dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796));
                                float _2800 = inversesqrt(_2797);
                                float _2801 = _2800 * _2794;
                                float _2802 = _2800 * _2795;
                                float _2803 = _2800 * _2796;
                                float _2807 = 1.0 - (_2797 / (_2660 * _2660));
                                float _3758 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                                float _2808 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
                                float _2812 = sqrt(_2797) * _2675.w;
                                float _2814 = 1.39999997615814208984375 / (_2812 + 1.39999997615814208984375);
                                float _2815 = _2814 * _2814;
                                float _2816 = 1.0 - _2815;
                                float _2818 = (_2816 * dot(vec3(_2801, _2802, _2803), vec3(_388, _391, _394))) + _2815;
                                float _2821 = _2812 * _2812;
                                float _2825 = (fma(_1982, _2703.z, fma(_1981, _2703.y, _2703.x * _1980)) + _2703.w) / _2766;
                                float _2826 = (fma(_1982, _2719.z, fma(_1981, _2719.y, _2719.x * _1980)) + _2719.w) / _2766;
                                float _2830 = 1.0 - dot(vec2(_2825, _2826), vec2(_2825, _2826));
                                float _3774 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                                float _2831 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                                float _2832 = _2831 * (((isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))) * _2808) / ((_2821 * 0.699999988079071044921875) + 1.0));
                                float _2842 = dot(vec3(_388, _391, _394), vec3((-0.0) - (_1980 * _2323), (-0.0) - (_1981 * _2323), (-0.0) - (_1982 * _2323)));
                                float _3785 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                                float _2850 = (_2816 * dot(vec3(_388, _391, _394), vec3(_2801, _2802, _2803))) + _2815;
                                float _3796 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                                float _2851 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
                                float _2855 = (0.5 / (((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) + 9.9999999392252902907785028219223e-09) + _2851)) * _2851;
                                float _3807 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                                float _2862 = (_2831 * _2808) * (((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 3.1415927410125732421875) / ((_2821 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2832 * _2675.y;
                                frontier_phi_83_pred_1 = _2832 * _2675.x;
                                frontier_phi_83_pred_2 = _2862 * _2687.z;
                                frontier_phi_83_pred_3 = _2862 * _2687.y;
                                frontier_phi_83_pred_4 = _2862 * _2687.x;
                                frontier_phi_83_pred_5 = _2832 * _2675.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2870 = frontier_phi_83_pred;
                            _2869 = frontier_phi_83_pred_1;
                            _2868 = frontier_phi_83_pred_2;
                            _2867 = frontier_phi_83_pred_3;
                            _2866 = frontier_phi_83_pred_4;
                            _2871 = frontier_phi_83_pred_5;
                            _2617 = _2869 + _2630;
                            _2618 = _2870 + _2631;
                            _2619 = _2871 + _2632;
                            _2614 = _2866 + _2627;
                            _2615 = _2867 + _2628;
                            _2616 = _2868 + _2629;
                            if (_2634 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2627 = _2614;
                                _2628 = _2615;
                                _2629 = _2616;
                                _2630 = _2617;
                                _2631 = _2618;
                                _2632 = _2619;
                                _2633 = _2634;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2619;
                        frontier_phi_77_pred_1 = _2618;
                        frontier_phi_77_pred_2 = _2617;
                        frontier_phi_77_pred_3 = _2616;
                        frontier_phi_77_pred_4 = _2615;
                        frontier_phi_77_pred_5 = _2614;
                    }
                    _2309 = frontier_phi_77_pred;
                    _2307 = frontier_phi_77_pred_1;
                    _2305 = frontier_phi_77_pred_2;
                    _2303 = frontier_phi_77_pred_3;
                    _2301 = frontier_phi_77_pred_4;
                    _2299 = frontier_phi_77_pred_5;
                    uint _2462 = _2461 + 1u;
                    if (_2462 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2455 = _2299;
                        _2456 = _2301;
                        _2457 = _2303;
                        _2458 = _2305;
                        _2459 = _2307;
                        _2460 = _2309;
                        _2461 = _2462;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2303;
                frontier_phi_58_59_ladder_1 = _2309;
                frontier_phi_58_59_ladder_2 = _2307;
                frontier_phi_58_59_ladder_3 = _2305;
                frontier_phi_58_59_ladder_4 = _2301;
                frontier_phi_58_59_ladder_5 = _2299;
            }
            else
            {
                frontier_phi_58_59_ladder = _2172;
                frontier_phi_58_59_ladder_1 = _2178;
                frontier_phi_58_59_ladder_2 = _2176;
                frontier_phi_58_59_ladder_3 = _2174;
                frontier_phi_58_59_ladder_4 = _2170;
                frontier_phi_58_59_ladder_5 = _2168;
            }
            _2298 = frontier_phi_58_59_ladder_5;
            _2300 = frontier_phi_58_59_ladder_4;
            _2302 = frontier_phi_58_59_ladder;
            _2304 = frontier_phi_58_59_ladder_3;
            _2306 = frontier_phi_58_59_ladder_2;
            _2308 = frontier_phi_58_59_ladder_1;
        }
        float _2313 = isnan(1.0) ? _432 : (isnan(_432) ? 1.0 : min(_432, 1.0));
        _2039 = (_2313 * _2304) + _1602;
        _2041 = (_2313 * _2306) + _1604;
        _2043 = (_2313 * _2308) + _1606;
        _2045 = ((_2298 * 0.039999999105930328369140625) * _2313) + _1851;
        _2047 = ((_2300 * 0.039999999105930328369140625) * _2313) + _1853;
        _2049 = ((_2302 * 0.039999999105930328369140625) * _2313) + _1855;
    }
    else
    {
        _2039 = _1602;
        _2041 = _1604;
        _2043 = _1606;
        _2045 = _1851;
        _2047 = _1853;
        _2049 = _1855;
    }
    uint _2055 = _408 + uint(cbMatDynParam._m0[0u].w);
    float _2065 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _235.x) * cbSceneParam._m0[72u].y) * _258) * cbInstanceData._m0[_2055].x;
    float _2070 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _235.y) * cbSceneParam._m0[72u].y) * _258) * cbInstanceData._m0[_2055].y;
    float _2075 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _235.z) * cbSceneParam._m0[72u].y) * _258) * cbInstanceData._m0[_2055].z;
    float _3823 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3834 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3845 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _2092 = (((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_2039 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _432))) + ((_2045 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1242)) * cbPerFrame._m0[3u].x)) + _2065;
    float _2094 = (_2070 + ((_2047 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1242)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_2041 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _432)));
    float _2096 = (_2075 + ((_2049 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _1242)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_2043 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _432)));
    float _2097 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2098 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2105 = cbMtdParam._m0[2u].x * _2065;
    float _2106 = cbMtdParam._m0[2u].y * _2070;
    float _2107 = cbMtdParam._m0[2u].z * _2075;
    float _3871 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2109 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    uint _2110 = _407 + 6u;
    float _2118 = _367 / cbSceneParam._m0[86u].x;
    float _2119 = _368 / cbSceneParam._m0[86u].y;
    vec4 _2133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, (log2((isnan(cbSceneParam._m0[77u].w) ? _288 : (isnan(_288) ? cbSceneParam._m0[77u].w : min(_288, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2135 = _2133.x;
    float _2136 = _2133.y;
    float _2137 = _2133.z;
    float _2138 = _2133.w;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    if (_288 > cbSceneParam._m0[78u].w)
    {
        float _2193 = isnan(_288) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _288 : min(cbSceneParam._m0[80u].w, _288));
        float _2194 = _2193 / _288;
        float _2205 = _2194 * _339;
        float _2206 = _340 * _2194;
        float _2207 = (-0.0) - _2206;
        float _2209 = _2194 * _341;
        float _2211 = (cbSceneParam._m0[77u].w * _2207) / _2193;
        float _2212 = _2211 + cbSceneParam._m0[79u].w;
        float _2213 = cbSceneParam._m0[79u].w - _2206;
        float _2219 = sqrt(((_2205 * _2205) + (_2206 * _2206)) + (_2209 * _2209));
        float _2222 = (1.0 - (cbSceneParam._m0[77u].w / _2193)) * _2219;
        float _2227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2412;
        if (abs((_2207 - _2211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2412 = ((((_2212 > 0.0) ? exp2(_2227 * _2212) : (2.0 - exp2(_2229 * _2212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2222;
        }
        else
        {
            float _2356 = 1.0 / cbSceneParam._m0[80u].x;
            float _2357 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : max(_2212, _2213));
            float _2358 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : min(_2212, _2213));
            float _2367 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : min(_2357, 0.0));
            float _2368 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : min(_2358, 0.0));
            _2412 = ((abs(_2219 / _2207) * cbSceneParam._m0[80u].y) * ((((_2367 - _2368) * 2.0) - ((exp2(_2227 * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0)))) - exp2(_2227 * (isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0))))) * _2356)) - ((exp2(_2229 * _2367) - exp2(_2229 * _2368)) * _2356))) + (_2222 * cbSceneParam._m0[80u].z);
        }
        vec4 _2414 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, 1.0), 0.0);
        float _2423 = exp2((_2412 * (-1.44269502162933349609375)) * (1.0 - _2414.w));
        float _2424 = log2(_2423);
        float _2440 = log2(_2138);
        _2231 = (exp2(_2440 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2424 * cbSceneParam._m0[78u].x)) * _2414.x) / cbSceneParam._m0[78u].x)) + _2135;
        _2233 = (exp2(_2440 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2424 * cbSceneParam._m0[78u].y)) * _2414.y) / cbSceneParam._m0[78u].y)) + _2136;
        _2235 = (exp2(_2440 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2424 * cbSceneParam._m0[78u].z)) * _2414.z) / cbSceneParam._m0[78u].z)) + _2137;
        _2237 = _2423 * _2138;
    }
    else
    {
        _2231 = _2135;
        _2233 = _2136;
        _2235 = _2137;
        _2237 = _2138;
    }
    bool _2450;
    vec4 _2246;
    vec4 _2268;
    float _2270;
    float _2274;
    float _2275;
    float _2276;
    float _2279;
    float _2282;
    float _2285;
    float _2286;
    bool _2297;
    for (;;)
    {
        _2246 = cbMatDynParam._m0[0u];
        float _2248 = roundEven(_2246.y);
        bool _2249 = _2248 == 3.0;
        float _2250 = log2(_2237);
        float _2254 = exp2(_2250 * cbSceneParam._m0[78u].x);
        float _2255 = exp2(_2250 * cbSceneParam._m0[78u].y);
        float _2256 = exp2(_2250 * cbSceneParam._m0[78u].z);
        float _2257 = _2254 * _2097;
        float _2258 = _2255 * _2098;
        float _2259 = _2256 * _2099;
        float _2266 = _355 + (-0.5);
        _2268 = cbMtdParam._m0[1u];
        _2270 = _2268.y * _2266;
        float _2273 = (_2248 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2274 = _2273 * (_2249 ? _2257 : (_2257 + (cbSceneParam._m0[72u].w * _2231)));
        _2275 = _2273 * (_2249 ? _2258 : (_2258 + (cbSceneParam._m0[72u].w * _2233)));
        _2276 = _2273 * (_2249 ? _2259 : (_2259 + (cbSceneParam._m0[72u].w * _2235)));
        _2279 = ((_2105 * _2109) * _2254) * _2273;
        _2282 = ((_2106 * _2109) * _2255) * _2273;
        _2285 = ((_2107 * _2109) * _2256) * _2273;
        _2286 = _2266 * 0.999000012874603271484375;
        _2297 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2297)
        {
            if ((cbInstanceData._m0[_407 + 7u].x + _2286) < 0.5)
            {
                _2450 = true;
                break;
            }
        }
        uint _2391 = _408 + uint(_2246.w);
        if ((cbInstanceData._m0[_2391].w < 1.0) && ((cbInstanceData._m0[_2391].w + _2286) < 0.5))
        {
            _2450 = true;
            break;
        }
        if ((_2270 + 1.0) < _2268.x)
        {
            _2450 = true;
            break;
        }
        _2450 = false;
        break;
    }
    float _2605;
    if (_2450)
    {
        discard_state = true;
        _2605 = 0.0;
    }
    else
    {
        _2605 = cbInstanceData._m0[_2110].w;
    }
    SV_Target.x = _2274;
    SV_Target.y = _2275;
    SV_Target.z = _2276;
    SV_Target.w = _2605;
    SV_Target_1.x = _2279;
    SV_Target_1.y = _2282;
    SV_Target_1.z = _2285;
    SV_Target_1.w = cbInstanceData._m0[_2110].w;
    discard_exit();
}


