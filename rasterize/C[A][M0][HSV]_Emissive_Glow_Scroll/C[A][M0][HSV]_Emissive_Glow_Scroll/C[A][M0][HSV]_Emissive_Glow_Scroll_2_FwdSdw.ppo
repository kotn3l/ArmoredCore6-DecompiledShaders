#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _746;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _235 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _247 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _248 = _247 * _169;
    float _249 = _247 * _170;
    float _250 = _247 * _171;
    float _3183 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3194 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3205 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _270 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _311 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _321 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _311);
    float _322 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _311);
    float _323 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _311);
    float _327 = inversesqrt(dot(vec3(_321, _322, _323), vec3(_321, _322, _323)));
    float _328 = _321 * _327;
    float _329 = _322 * _327;
    float _330 = _323 * _327;
    float _336 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _337 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _358 = fma(_250, cbSceneParam._m0[5u].z, fma(_249, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _248));
    float _361 = fma(_250, cbSceneParam._m0[6u].z, fma(_249, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _248));
    float _364 = fma(_250, cbSceneParam._m0[7u].z, fma(_249, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _248));
    uint _377 = uint(roundEven(NORMAL.w)) * 13u;
    uint _378 = _377 + 9u;
    uint _379 = _378 + uint(cbMatDynParam._m0[0u].w);
    float _385 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_379].x;
    float _386 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_379].y;
    float _387 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_379].z;
    float _3216 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
    float _3227 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _3238 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    vec4 _399 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _336, cbSceneParam._m0[86u].y * _337));
    float _402 = _399.x * TEXCOORD.z;
    float _403 = dot(vec3(_248, _249, _250), vec3(_328, _329, _330));
    float _406 = _403 * 2.0;
    float _411 = (_406 * _248) - _328;
    float _412 = (_406 * _249) - _329;
    float _413 = (_406 * _250) - _330;
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _745;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _470 = fma(_443, cbModelParam._m0[26u].z, fma(_439, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _435));
        float _474 = fma(_443, cbModelParam._m0[27u].z, fma(_439, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _435));
        float _478 = fma(_443, cbModelParam._m0[28u].z, fma(_439, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _435));
        float _503 = _435 + _248;
        float _504 = _439 + _249;
        float _505 = _443 + _250;
        float _515 = fma(_505, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503)) - _470;
        float _516 = fma(_505, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503)) - _474;
        float _517 = fma(_505, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503)) - _478;
        float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
        float _534 = ((_521 * _515) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_470 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _535 = ((_521 * _516) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_474 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _536 = ((_521 * _517) / cbModelParam._m0[34u].z) + ((((((_478 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        float _573 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_539.x + (-0.5));
        float _575 = _573 * (_539.y + (-0.5));
        float _576 = _573 * (_539.z + (-0.5));
        float _583 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_546.x + (-0.5));
        float _585 = _583 * (_546.y + (-0.5));
        float _586 = _583 * (_546.z + (-0.5));
        float _593 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_553.x + (-0.5));
        float _595 = _593 * (_553.y + (-0.5));
        float _596 = _593 * (_553.z + (-0.5));
        float _603 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_560.x + (-0.5));
        float _605 = _603 * (_560.y + (-0.5));
        float _606 = _603 * (_560.z + (-0.5));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = _574 * 0.5;
        float _611 = _584 * 0.5;
        float _612 = _594 * 0.5;
        float _613 = dot(vec3(_610, _611, _612), vec3(_610, _611, _612));
        float _618 = (_613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_613);
        float _627 = (dot(vec3(_248, _249, _250), vec3(_618 * _610, _618 * _611, _618 * _612)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _637 = sqrt(((_611 * _611) + (_610 * _610)) + (_612 * _612)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _639 = _638 * 2.0;
        float _643 = (1.0 - _638) / (_638 + 1.0);
        float _3286 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _653 = ((((1.0 - _644) * (_639 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_639 + 1.0))) + _644) * _607;
        float _654 = _575 * 0.5;
        float _655 = _585 * 0.5;
        float _656 = _595 * 0.5;
        float _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_248, _249, _250), vec3(_662 * _654, _662 * _655, _662 * _656)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_655 * _655) + (_654 * _654)) + (_656 * _656)) / (_608 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3319 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_681 + 1.0))) + _686) * _608;
        float _696 = _576 * 0.5;
        float _697 = _586 * 0.5;
        float _698 = _596 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _712 = (dot(vec3(_248, _249, _250), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _721 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3352 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_723 + 1.0))) + _728) * _609;
        _745 = _576;
        _747 = _575;
        _748 = _574;
        _749 = _586;
        _750 = _585;
        _751 = _584;
        _752 = _596;
        _753 = _595;
        _754 = _594;
        _755 = _609;
        _756 = _608;
        _757 = _607;
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0)));
        _759 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
        _760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
    }
    else
    {
        _745 = _746;
        _747 = _746;
        _748 = _746;
        _749 = _746;
        _750 = _746;
        _751 = _746;
        _752 = _746;
        _753 = _746;
        _754 = _746;
        _755 = _746;
        _756 = _746;
        _757 = _746;
        _758 = 0.0;
        _759 = 0.0;
        _760 = 0.0;
    }
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _786 = fma(_443, cbModelParam._m0[30u].z, fma(_439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _435));
        float _790 = fma(_443, cbModelParam._m0[31u].z, fma(_439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _435));
        float _794 = fma(_443, cbModelParam._m0[32u].z, fma(_439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _435));
        float _817 = _435 + _248;
        float _818 = _439 + _249;
        float _819 = _443 + _250;
        float _829 = fma(_819, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817)) - _786;
        float _830 = fma(_819, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817)) - _790;
        float _831 = fma(_819, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817)) - _794;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_786 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_790 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[35u].z) + ((((((_794 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _885 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_852.x + (-0.5));
        float _887 = _885 * (_852.y + (-0.5));
        float _888 = _885 * (_852.z + (-0.5));
        float _895 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_859.x + (-0.5));
        float _897 = _895 * (_859.y + (-0.5));
        float _898 = _895 * (_859.z + (-0.5));
        float _905 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_866.x + (-0.5));
        float _907 = _905 * (_866.y + (-0.5));
        float _908 = _905 * (_866.z + (-0.5));
        float _915 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_873.x + (-0.5));
        float _917 = _915 * (_873.y + (-0.5));
        float _918 = _915 * (_873.z + (-0.5));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = _886 * 0.5;
        float _923 = _896 * 0.5;
        float _924 = _906 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_248, _249, _250), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3415 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_949 + 1.0))) + _954) * _919;
        float _964 = _887 * 0.5;
        float _965 = _897 * 0.5;
        float _966 = _907 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_248, _249, _250), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3448 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_991 + 1.0))) + _996) * _920;
        float _1006 = _888 * 0.5;
        float _1007 = _898 * 0.5;
        float _1008 = _908 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_248, _249, _250), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3481 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1033 + 1.0))) + _1038) * _921;
        _1055 = _888;
        _1056 = _887;
        _1057 = _886;
        _1058 = _898;
        _1059 = _897;
        _1060 = _896;
        _1061 = _908;
        _1062 = _907;
        _1063 = _906;
        _1064 = _921;
        _1065 = _920;
        _1066 = _919;
        _1067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1068 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _746;
        _1056 = _746;
        _1057 = _746;
        _1058 = _746;
        _1059 = _746;
        _1060 = _746;
        _1061 = _746;
        _1062 = _746;
        _1063 = _746;
        _1064 = _746;
        _1065 = _746;
        _1066 = _746;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1079 = (cbModelParam._m0[1u].x * (_1067 - _758)) + _758;
    float _1080 = (cbModelParam._m0[1u].x * (_1068 - _759)) + _759;
    float _1081 = (cbModelParam._m0[1u].x * (_1069 - _760)) + _760;
    float _1102 = fma(_1081, cbSceneParam._m0[89u].z, fma(_1080, cbSceneParam._m0[89u].y, _1079 * cbSceneParam._m0[89u].x));
    float _1105 = fma(_1081, cbSceneParam._m0[90u].z, fma(_1080, cbSceneParam._m0[90u].y, _1079 * cbSceneParam._m0[90u].x));
    float _1108 = fma(_1081, cbSceneParam._m0[91u].z, fma(_1080, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1079));
    float _1123 = _411 * 0.5;
    float _1124 = _412 * 0.5;
    float _1125 = _413 * 0.5;
    float _1126 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1057, _1060, _1063, _1066));
    float _1129 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1056, _1059, _1062, _1065));
    float _1132 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1166;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1139 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_745, _749, _752, _755));
        float _1143 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_747, _750, _753, _756));
        float _1147 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_748, _751, _754, _757));
        float _1154 = dot(vec4(cbModelParam._m0[39u]), vec4(_1123, _1124, _1125, 1.0));
        _1166 = dot(vec3(isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1154) ? 0.0 : (isnan(0.0) ? _1154 : max(0.0, _1154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1166 = 1.0;
    }
    float _1177;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1168 = dot(vec4(cbModelParam._m0[40u]), vec4(_1123, _1124, _1125, 1.0));
        _1177 = dot(vec3(isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1168) ? 0.0 : (isnan(0.0) ? _1168 : max(0.0, _1168))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1177 = 1.0;
    }
    float _1181 = (_1177 * cbModelParam._m0[1u].x) + (_1166 * (1.0 - cbModelParam._m0[1u].x));
    float _1190 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1271;
    float _1273;
    float _1275;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1238 = fma(_443, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435)) + cbModelParam._m0[13u].w;
        float _1242 = fma(_443, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435)) + cbModelParam._m0[14u].w;
        float _1246 = fma(_443, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435)) + cbModelParam._m0[15u].w;
        float _1249 = fma(_413, cbModelParam._m0[13u].z, fma(_412, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411));
        float _1252 = fma(_413, cbModelParam._m0[14u].z, fma(_412, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411));
        float _1255 = fma(_413, cbModelParam._m0[15u].z, fma(_412, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411));
        float _1281;
        if (_1249 > 0.0)
        {
            _1281 = abs((1.0 - _1238) / _1249);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1238 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1281 = frontier_phi_14_12_ladder;
        }
        float _1454;
        if (_1252 > 0.0)
        {
            _1454 = abs((1.0 - _1242) / _1252);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1252 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1242 + 1.0) / _1252);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1454 = frontier_phi_23_19_ladder;
        }
        float _1751;
        if (_1255 > 0.0)
        {
            _1751 = abs((1.0 - _1246) / _1255);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1255 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1246 + 1.0) / _1255);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1751 = frontier_phi_35_30_ladder;
        }
        float _1753 = isnan(_1454) ? _1281 : (isnan(_1281) ? _1454 : min(_1281, _1454));
        float _1754 = isnan(_1751) ? _1753 : (isnan(_1753) ? _1751 : min(_1753, _1751));
        float _1758 = (_1754 * _1249) + _1238;
        float _1759 = (_1754 * _1252) + _1242;
        float _1760 = (_1754 * _1255) + _1246;
        float _1761 = _1754 * 9.9999997473787516355514526367188e-05;
        float _1763 = (-1.0) - _1761;
        float _1765 = _1761 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1760 > _1765) || ((_1760 < _1763) || ((_1759 > _1765) || ((_1759 < _1763) || ((_1758 < _1763) || (_1758 > _1765))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1760, cbModelParam._m0[9u].z, fma(_1759, cbModelParam._m0[9u].y, _1758 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1760, cbModelParam._m0[10u].z, fma(_1759, cbModelParam._m0[10u].y, _1758 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1760, cbModelParam._m0[11u].z, fma(_1759, cbModelParam._m0[11u].y, _1758 * cbModelParam._m0[11u].x))), _1190);
            frontier_phi_13_35_ladder = _1905.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1905.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1905.x * cbModelParam._m0[1u].y;
        }
        _1271 = frontier_phi_13_35_ladder_2;
        _1273 = frontier_phi_13_35_ladder_1;
        _1275 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_411, _412, _413), _1190);
        _1271 = _1259.x * cbModelParam._m0[1u].y;
        _1273 = _1259.y * cbModelParam._m0[1u].y;
        _1275 = _1259.z * cbModelParam._m0[1u].y;
    }
    float _1278 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1370;
    float _1372;
    float _1374;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1334 = fma(_443, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435)) + cbModelParam._m0[21u].w;
        float _1338 = fma(_443, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435)) + cbModelParam._m0[22u].w;
        float _1342 = fma(_443, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435)) + cbModelParam._m0[23u].w;
        float _1345 = fma(_413, cbModelParam._m0[21u].z, fma(_412, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411));
        float _1348 = fma(_413, cbModelParam._m0[22u].z, fma(_412, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411));
        float _1351 = fma(_413, cbModelParam._m0[23u].z, fma(_412, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411));
        float _1459;
        if (_1345 > 0.0)
        {
            _1459 = abs((1.0 - _1334) / _1345);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1334 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1459 = frontier_phi_25_21_ladder;
        }
        float _1778;
        if (_1348 > 0.0)
        {
            _1778 = abs((1.0 - _1338) / _1348);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1338 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1778 = frontier_phi_37_32_ladder;
        }
        float _2051;
        if (_1351 > 0.0)
        {
            _2051 = abs((1.0 - _1342) / _1351);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1342 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2051 = frontier_phi_47_44_ladder;
        }
        float _2053 = isnan(_1778) ? _1459 : (isnan(_1459) ? _1778 : min(_1459, _1778));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1345) + _1334;
        float _2059 = (_2054 * _1348) + _1338;
        float _2060 = (_2054 * _1351) + _1342;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2061;
        float _2064 = _2061 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2060 > _2064) || ((_2060 < _2062) || ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 < _2062) || (_2058 > _2064))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2151 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2060, cbModelParam._m0[17u].z, fma(_2059, cbModelParam._m0[17u].y, _2058 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2060, cbModelParam._m0[18u].z, fma(_2059, cbModelParam._m0[18u].y, _2058 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2060, cbModelParam._m0[19u].z, fma(_2059, cbModelParam._m0[19u].y, _2058 * cbModelParam._m0[19u].x))), _1278);
            frontier_phi_22_47_ladder = _2151.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2151.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2151.x * cbModelParam._m0[1u].z;
        }
        _1370 = frontier_phi_22_47_ladder_2;
        _1372 = frontier_phi_22_47_ladder_1;
        _1374 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_411, _412, _413), _1278);
        _1370 = _1354.x * cbModelParam._m0[1u].z;
        _1372 = _1354.y * cbModelParam._m0[1u].z;
        _1374 = _1354.z * cbModelParam._m0[1u].z;
    }
    float _1386 = _402 * 0.01200000010430812835693359375;
    float _1388 = _1386 * ((cbModelParam._m0[1u].w * (_1370 - _1271)) + _1271);
    float _1389 = _1386 * ((cbModelParam._m0[1u].w * (_1372 - _1273)) + _1273);
    float _1390 = _1386 * ((cbModelParam._m0[1u].w * (_1374 - _1275)) + _1275);
    float _1393 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1396 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1399 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, _1388 * cbSceneParam._m0[91u].x));
    float _1433 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1437 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1441 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1445 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1446 = _1433 / _1445;
    float _1447 = _1437 / _1445;
    float _1448 = _1441 / _1445;
    float _1595;
    float _1596;
    float _1597;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1475 = ((uint(_1448 > cbSceneParam._m0[59u].y) + uint(_1448 > cbSceneParam._m0[59u].x)) + uint(_1448 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1476 = _1475 + 43u;
        uint _1484 = _1475 + 44u;
        uint _1492 = _1475 + 45u;
        uint _1500 = _1475 + 46u;
        float _1511 = fma(_1445, cbSceneParam._m0[_1476].w, fma(_1441, cbSceneParam._m0[_1476].z, fma(_1437, cbSceneParam._m0[_1476].y, _1433 * cbSceneParam._m0[_1476].x)));
        float _1515 = fma(_1445, cbSceneParam._m0[_1484].w, fma(_1441, cbSceneParam._m0[_1484].z, fma(_1437, cbSceneParam._m0[_1484].y, _1433 * cbSceneParam._m0[_1484].x)));
        float _1523 = fma(_1445, cbSceneParam._m0[_1500].w, fma(_1441, cbSceneParam._m0[_1500].z, fma(_1437, cbSceneParam._m0[_1500].y, _1433 * cbSceneParam._m0[_1500].x)));
        float _1528 = cbSceneParam._m0[33u].z * _1523;
        float _1530 = cbSceneParam._m0[33u].w * _1523;
        float _1533 = fma(_1445, cbSceneParam._m0[_1492].w, fma(_1441, cbSceneParam._m0[_1492].z, fma(_1437, cbSceneParam._m0[_1492].y, _1433 * cbSceneParam._m0[_1492].x))) / _1523;
        float _1581 = (cbSceneParam._m0[33u].x - sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448))) * cbSceneParam._m0[33u].y;
        float _3607 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1588 = (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1528 + _1511) / _1523, (_1530 + _1515) / _1523), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1530 + _1511) / _1523, (_1515 - _1528) / _1523), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1511 - _1528) / _1523, (_1515 - _1530) / _1523), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1511 - _1530) / _1523, (_1528 + _1515) / _1523), _1533), 0.0)).x), vec4(0.25)));
        _1595 = 1.0 - (_1588 * cbSceneParam._m0[34u].x);
        _1596 = 1.0 - (_1588 * cbSceneParam._m0[34u].y);
        _1597 = 1.0 - (_1588 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1595 = 1.0;
        _1596 = 1.0;
        _1597 = 1.0;
    }
    float _1661;
    float _1663;
    float _1665;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1649 = fma(_1445, cbSceneParam._m0[63u].w, fma(_1441, cbSceneParam._m0[63u].z, fma(_1437, cbSceneParam._m0[63u].y, _1433 * cbSceneParam._m0[63u].x)));
        float _1650 = fma(_1445, cbSceneParam._m0[60u].w, fma(_1441, cbSceneParam._m0[60u].z, fma(_1437, cbSceneParam._m0[60u].y, _1433 * cbSceneParam._m0[60u].x))) / _1649;
        float _1651 = fma(_1445, cbSceneParam._m0[61u].w, fma(_1441, cbSceneParam._m0[61u].z, fma(_1437, cbSceneParam._m0[61u].y, _1433 * cbSceneParam._m0[61u].x))) / _1649;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1650 >= cbSceneParam._m0[64u].x) && (_1651 >= cbSceneParam._m0[64u].y)) && (_1650 <= cbSceneParam._m0[64u].z)) && (_1651 <= cbSceneParam._m0[64u].w))
        {
            float _1791 = fma(_1445, cbSceneParam._m0[62u].w, fma(_1441, cbSceneParam._m0[62u].z, fma(_1437, cbSceneParam._m0[62u].y, _1433 * cbSceneParam._m0[62u].x))) / _1649;
            float _1795 = isnan(cbSceneParam._m0[41u].w) ? _1791 : (isnan(_1791) ? cbSceneParam._m0[41u].w : max(_1791, cbSceneParam._m0[41u].w));
            float _1838 = (cbSceneParam._m0[33u].x - sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448))) * cbSceneParam._m0[33u].y;
            float _3623 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
            float _1845 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1650, cbSceneParam._m0[33u].w + _1651), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1650, _1651 - cbSceneParam._m0[33u].z), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1650 - cbSceneParam._m0[33u].z, _1651 - cbSceneParam._m0[33u].w), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1650 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1651), _1795), 0.0)).x), vec4(0.25)));
            float _1849 = 1.0 - (_1845 * cbSceneParam._m0[34u].x);
            float _1850 = 1.0 - (_1845 * cbSceneParam._m0[34u].y);
            float _1851 = 1.0 - (_1845 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1851) ? _1597 : (isnan(_1597) ? _1851 : min(_1597, _1851));
            frontier_phi_34_33_ladder_1 = isnan(_1850) ? _1596 : (isnan(_1596) ? _1850 : min(_1596, _1850));
            frontier_phi_34_33_ladder_2 = isnan(_1849) ? _1595 : (isnan(_1595) ? _1849 : min(_1595, _1849));
        }
        else
        {
            frontier_phi_34_33_ladder = _1597;
            frontier_phi_34_33_ladder_1 = _1596;
            frontier_phi_34_33_ladder_2 = _1595;
        }
        _1661 = frontier_phi_34_33_ladder_2;
        _1663 = frontier_phi_34_33_ladder_1;
        _1665 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1661 = _1595;
        _1663 = _1596;
        _1665 = _1597;
    }
    uvec4 _1670 = floatBitsToUint(cbInstanceData._m0[_377 + 5u]);
    uint _1672 = _1670.x * 14u;
    uint _1673 = _1672 + 13u;
    float _1680 = _402 + (-1.0);
    float _1686 = (cbLight._m0[_1673].x * _1680) + 1.0;
    float _1687 = (cbLight._m0[_1673].y * _1680) + 1.0;
    float _1688 = (cbLight._m0[_1673].z * _1680) + 1.0;
    float _1689 = (cbLight._m0[_1673].w * _1680) + 1.0;
    uint _1690 = _1672 + 5u;
    float _1696 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1700 = _1672 + 4u;
    float _1710 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    uint _1714 = _1672 | 1u;
    float _1725 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_248, _249, _250));
    float _1728 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_248, _249, _250));
    float _3659 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _3670 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1733 = (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.3183098733425140380859375;
    float _1735 = (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.3183098733425140380859375;
    float _1742 = ((cbLight._m0[_1690].x * _1696) * _1735) + (((cbLight._m0[_1700].x * _1661) * _1710) * _1733);
    float _1743 = ((_1696 * cbLight._m0[_1690].y) * _1735) + (((cbLight._m0[_1700].y * _1663) * _1710) * _1733);
    float _1744 = ((_1696 * cbLight._m0[_1690].z) * _1735) + (((cbLight._m0[_1700].z * _1665) * _1710) * _1733);
    uvec4 _1748 = floatBitsToUint(cbLight._m0[_1672 + 12u]);
    bool _1750 = _1748.x == 0u;
    float _1852;
    float _1854;
    float _1856;
    if (_1750)
    {
        _1852 = _1742;
        _1854 = _1743;
        _1856 = _1744;
    }
    else
    {
        uint _1860 = _1672 + 6u;
        float _1876 = (dot(vec3(cbLight._m0[_1672 + 2u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1877 = _1876 * _1876;
        float _3681 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1879 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _1852 = (((cbLight._m0[_1860].x * 0.3183098733425140380859375) * _1878) * _1879) + _1742;
        _1854 = (((cbLight._m0[_1860].y * 0.3183098733425140380859375) * _1878) * _1879) + _1743;
        _1856 = (((cbLight._m0[_1860].z * 0.3183098733425140380859375) * _1878) * _1879) + _1744;
    }
    bool _1859 = _1748.y == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1859)
    {
        _1914 = _1852;
        _1916 = _1854;
        _1918 = _1856;
    }
    else
    {
        uint _2022 = _1672 + 7u;
        float _2038 = (dot(vec3(cbLight._m0[_1672 + 3u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _3697 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _2041 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1914 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1852;
        _1916 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1854;
        _1918 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1856;
    }
    uint _1920 = _1672 + 8u;
    float _1926 = cbLight._m0[_1672].x + _328;
    float _1927 = cbLight._m0[_1672].y + _329;
    float _1928 = cbLight._m0[_1672].z + _330;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1936 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1672].xyz));
    float _3713 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _1940 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_1926 * _1932, _1927 * _1932, _1928 * _1932));
    float _3735 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1958 = (0.5 / ((_1939 + 9.9999999392252902907785028219223e-09) + _1940)) * _1939;
    float _3746 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.31831014156341552734375;
    uint _1974 = _1672 + 9u;
    float _1980 = cbLight._m0[_1714].x + _328;
    float _1981 = cbLight._m0[_1714].y + _329;
    float _1982 = cbLight._m0[_1714].z + _330;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1990 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1714].xyz));
    float _3757 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1980 * _1986, _1981 * _1986, _1982 * _1986));
    float _3768 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = (0.5 / ((_1993 + 9.9999999392252902907785028219223e-09) + _1940)) * _1993;
    float _3779 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2009 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.31831014156341552734375;
    float _2019 = (((_2003 * cbLight._m0[_1974].x) * _2009) * _1696) + ((((cbLight._m0[_1920].x * _1661) * _1952) * _1960) * _1710);
    float _2020 = (((_2003 * cbLight._m0[_1974].y) * _2009) * _1696) + ((((cbLight._m0[_1920].y * _1663) * _1952) * _1960) * _1710);
    float _2021 = (((_2003 * cbLight._m0[_1974].z) * _2009) * _1696) + ((((cbLight._m0[_1920].z * _1665) * _1952) * _1960) * _1710);
    float _2077;
    float _2079;
    float _2081;
    if (_1750)
    {
        _2077 = _2019;
        _2079 = _2020;
        _2081 = _2021;
    }
    else
    {
        uint _2083 = _1672 + 10u;
        uint _2089 = _1672 + 2u;
        float _2095 = cbLight._m0[_2089].x + _328;
        float _2096 = cbLight._m0[_2089].y + _329;
        float _2097 = cbLight._m0[_2089].z + _330;
        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
        float _2105 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_2089].xyz));
        float _3790 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _2109 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2095 * _2101, _2096 * _2101, _2097 * _2101));
        float _3801 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = (0.5 / ((_2108 + 9.9999999392252902907785028219223e-09) + _1940)) * _2108;
        float _3812 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2124 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.31831014156341552734375;
        float _2125 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _2077 = (((_2118 * cbLight._m0[_2083].x) * _2124) * _2125) + _2019;
        _2079 = (((_2118 * cbLight._m0[_2083].y) * _2124) * _2125) + _2020;
        _2081 = (((_2118 * cbLight._m0[_2083].z) * _2124) * _2125) + _2021;
    }
    float _2156;
    float _2158;
    float _2160;
    if (_1859)
    {
        _2156 = _2077;
        _2158 = _2079;
        _2160 = _2081;
    }
    else
    {
        uint _2167 = _1672 + 11u;
        uint _2173 = _1672 + 3u;
        float _2179 = cbLight._m0[_2173].x + _328;
        float _2180 = cbLight._m0[_2173].y + _329;
        float _2181 = cbLight._m0[_2173].z + _330;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2189 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_2173].xyz));
        float _3828 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2179 * _2185, _2180 * _2185, _2181 * _2185));
        float _3839 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2206 = (0.5 / ((_2192 + 9.9999999392252902907785028219223e-09) + _1940)) * _2192;
        float _3850 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.31831014156341552734375;
        float _2209 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _2156 = (((_2202 * cbLight._m0[_2167].x) * _2208) * _2209) + _2077;
        _2158 = (((_2202 * cbLight._m0[_2167].y) * _2208) * _2209) + _2079;
        _2160 = (((_2202 * cbLight._m0[_2167].z) * _2208) * _2209) + _2081;
    }
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1670.y == 0u)
    {
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _337) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _336) / _2231)));
        float _2252 = (log2(_1448 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
        }
        else
        {
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            uint _2537 = 0u;
            uint _2546;
            bool _2547;
            for (;;)
            {
                _2546 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2537 << 2u)) >> 2u)).x;
                _2547 = _2546 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2547)
                {
                    frontier_phi_66_pred = _2536;
                    frontier_phi_66_pred_1 = _2535;
                    frontier_phi_66_pred_2 = _2534;
                    frontier_phi_66_pred_3 = _2533;
                    frontier_phi_66_pred_4 = _2532;
                    frontier_phi_66_pred_5 = _2531;
                }
                else
                {
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    uint _2661;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2546;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    for (;;)
                    {
                        uint _2665 = uint(findLSB(_2661)) + (_2537 << 5u);
                        uint _2662 = (_2661 + 4294967295u) & _2661;
                        uint _2667 = _2665 * 48u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2687 = (_2665 * 48u) + 4u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2706 = (_2665 * 48u) + 8u;
                        vec3 _2717 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x));
                        float _2721 = _2681.x - _1446;
                        float _2722 = _2681.y - _1447;
                        float _2723 = _2681.z - _1448;
                        float _2724 = dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723));
                        float _2727 = inversesqrt(_2724);
                        float _2736 = 1.0 - (_2724 * _2681.w);
                        float _3876 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                        float _2738 = sqrt(_2724) * _2700.w;
                        float _2741 = 1.39999997615814208984375 / (_2738 + 1.39999997615814208984375);
                        float _2742 = _2741 * _2741;
                        float _2745 = ((1.0 - _2742) * dot(vec3(_358, _361, _364), vec3(_2727 * _2721, _2727 * _2722, _2727 * _2723))) + _2742;
                        float _2748 = _2738 * _2738;
                        float _2752 = ((isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))) * _2737) / ((_2748 * 0.699999988079071044921875) + 1.0);
                        float _2756 = (-0.0) - _1446;
                        float _2757 = (-0.0) - _1447;
                        float _2758 = (-0.0) - _1448;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2766 = dot(vec3(_358, _361, _364), vec3(_2762 * _2756, _2762 * _2757, _2762 * _2758));
                        float _3892 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _3903 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2770 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                        float _2774 = (0.5 / (((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) + 9.9999999392252902907785028219223e-09) + _2770)) * _2770;
                        float _3914 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2783 = (((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 3.1415927410125732421875) / ((_2748 * 2.1991131305694580078125) + 3.141590118408203125)) * _2737;
                        _2590 = (_2752 * _2700.x) + _2658;
                        _2591 = (_2752 * _2700.y) + _2659;
                        _2592 = (_2752 * _2700.z) + _2660;
                        _2587 = (_2783 * _2717.x) + _2655;
                        _2588 = (_2783 * _2717.y) + _2656;
                        _2589 = (_2783 * _2717.z) + _2657;
                        if (_2662 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2662;
                        }
                    }
                    frontier_phi_66_pred = _2592;
                    frontier_phi_66_pred_1 = _2591;
                    frontier_phi_66_pred_2 = _2590;
                    frontier_phi_66_pred_3 = _2589;
                    frontier_phi_66_pred_4 = _2588;
                    frontier_phi_66_pred_5 = _2587;
                }
                _2391 = frontier_phi_66_pred;
                _2389 = frontier_phi_66_pred_1;
                _2387 = frontier_phi_66_pred_2;
                _2385 = frontier_phi_66_pred_3;
                _2383 = frontier_phi_66_pred_4;
                _2381 = frontier_phi_66_pred_5;
                uint _2538 = _2537 + 1u;
                if (_2538 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2531 = _2381;
                    _2532 = _2383;
                    _2533 = _2385;
                    _2534 = _2387;
                    _2535 = _2389;
                    _2536 = _2391;
                    _2537 = _2538;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
        }
        uvec4 _2394 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2395 = _2394.z;
        uint _2397 = (_2395 >> 8u) & 15u;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((4294967295u << _2397) & _2262) == 0u)
        {
            _2502 = _2380;
            _2504 = _2382;
            _2506 = _2384;
            _2508 = _2386;
            _2510 = _2388;
            _2512 = _2390;
        }
        else
        {
            float _2527 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2397 < ((_2395 >> 12u) & 15u))
            {
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2638 = _2380;
                float _2639 = _2382;
                float _2640 = _2384;
                float _2641 = _2386;
                float _2642 = _2388;
                float _2643 = _2390;
                uint _2644 = _2397;
                uint _2653;
                bool _2654;
                for (;;)
                {
                    _2653 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                    _2654 = _2653 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2654)
                    {
                        frontier_phi_72_pred = _2643;
                        frontier_phi_72_pred_1 = _2642;
                        frontier_phi_72_pred_2 = _2641;
                        frontier_phi_72_pred_3 = _2640;
                        frontier_phi_72_pred_4 = _2639;
                        frontier_phi_72_pred_5 = _2638;
                    }
                    else
                    {
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _2801 = _2638;
                        float _2802 = _2639;
                        float _2803 = _2640;
                        float _2804 = _2641;
                        float _2805 = _2642;
                        float _2806 = _2643;
                        uint _2807 = _2653;
                        uint _2808;
                        vec4 _2833;
                        float _2834;
                        vec4 _2849;
                        vec3 _2861;
                        vec4 _2877;
                        vec4 _2893;
                        float _2940;
                        bool _2941;
                        for (;;)
                        {
                            uint _2818 = ((_2644 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2807));
                            _2808 = (_2807 + 4294967295u) & _2807;
                            uint _2820 = _2818 * 40u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            _2834 = _2833.w;
                            uint _2836 = (_2818 * 40u) + 4u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2851 = (_2818 * 40u) + 8u;
                            _2861 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x));
                            uint _2864 = (_2818 * 40u) + 16u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2880 = (_2818 * 40u) + 20u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2896 = (_2818 * 40u) + 24u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2915 = (_2818 * 40u) + 28u;
                            vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2940 = fma(_1448, _2928.z, fma(_1447, _2928.y, _2928.x * _1446)) + _2928.w;
                            _2941 = !((fma(_1448, _2909.z, fma(_1447, _2909.y, _2909.x * _1446)) + _2909.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2941)
                            {
                                float _2968 = _2833.x - _1446;
                                float _2969 = _2833.y - _1447;
                                float _2970 = _2833.z - _1448;
                                float _2971 = dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970));
                                float _2974 = inversesqrt(_2971);
                                float _2975 = _2974 * _2968;
                                float _2976 = _2974 * _2969;
                                float _2977 = _2974 * _2970;
                                float _2981 = 1.0 - (_2971 / (_2834 * _2834));
                                float _3925 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                                float _2982 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                                float _2986 = sqrt(_2971) * _2849.w;
                                float _2988 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                                float _2989 = _2988 * _2988;
                                float _2990 = 1.0 - _2989;
                                float _2992 = (_2990 * dot(vec3(_2975, _2976, _2977), vec3(_358, _361, _364))) + _2989;
                                float _2995 = _2986 * _2986;
                                float _2999 = (fma(_1448, _2877.z, fma(_1447, _2877.y, _2877.x * _1446)) + _2877.w) / _2940;
                                float _3000 = (fma(_1448, _2893.z, fma(_1447, _2893.y, _2893.x * _1446)) + _2893.w) / _2940;
                                float _3004 = 1.0 - dot(vec2(_2999, _3000), vec2(_2999, _3000));
                                float _3941 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _3006 = _3005 * (((isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))) * _2982) / ((_2995 * 0.699999988079071044921875) + 1.0));
                                float _3016 = dot(vec3(_358, _361, _364), vec3((-0.0) - (_1446 * _2527), (-0.0) - (_1447 * _2527), (-0.0) - (_1448 * _2527)));
                                float _3952 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3024 = (_2990 * dot(vec3(_358, _361, _364), vec3(_2975, _2976, _2977))) + _2989;
                                float _3963 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _3029 = (0.5 / (((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) + 9.9999999392252902907785028219223e-09) + _3025)) * _3025;
                                float _3974 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3036 = (_3005 * _2982) * (((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 3.1415927410125732421875) / ((_2995 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3006 * _2849.y;
                                frontier_phi_78_pred_1 = _3006 * _2849.x;
                                frontier_phi_78_pred_2 = _3036 * _2861.z;
                                frontier_phi_78_pred_3 = _3036 * _2861.y;
                                frontier_phi_78_pred_4 = _3036 * _2861.x;
                                frontier_phi_78_pred_5 = _3006 * _2849.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3044 = frontier_phi_78_pred;
                            _3043 = frontier_phi_78_pred_1;
                            _3042 = frontier_phi_78_pred_2;
                            _3041 = frontier_phi_78_pred_3;
                            _3040 = frontier_phi_78_pred_4;
                            _3045 = frontier_phi_78_pred_5;
                            _2791 = _3043 + _2804;
                            _2792 = _3044 + _2805;
                            _2793 = _3045 + _2806;
                            _2788 = _3040 + _2801;
                            _2789 = _3041 + _2802;
                            _2790 = _3042 + _2803;
                            if (_2808 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2808;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2793;
                        frontier_phi_72_pred_1 = _2792;
                        frontier_phi_72_pred_2 = _2791;
                        frontier_phi_72_pred_3 = _2790;
                        frontier_phi_72_pred_4 = _2789;
                        frontier_phi_72_pred_5 = _2788;
                    }
                    _2513 = frontier_phi_72_pred;
                    _2511 = frontier_phi_72_pred_1;
                    _2509 = frontier_phi_72_pred_2;
                    _2507 = frontier_phi_72_pred_3;
                    _2505 = frontier_phi_72_pred_4;
                    _2503 = frontier_phi_72_pred_5;
                    uint _2645 = _2644 + 1u;
                    if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2638 = _2503;
                        _2639 = _2505;
                        _2640 = _2507;
                        _2641 = _2509;
                        _2642 = _2511;
                        _2643 = _2513;
                        _2644 = _2645;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2513;
                frontier_phi_60_61_ladder_1 = _2511;
                frontier_phi_60_61_ladder_2 = _2507;
                frontier_phi_60_61_ladder_3 = _2505;
                frontier_phi_60_61_ladder_4 = _2503;
                frontier_phi_60_61_ladder_5 = _2509;
            }
            else
            {
                frontier_phi_60_61_ladder = _2390;
                frontier_phi_60_61_ladder_1 = _2388;
                frontier_phi_60_61_ladder_2 = _2384;
                frontier_phi_60_61_ladder_3 = _2382;
                frontier_phi_60_61_ladder_4 = _2380;
                frontier_phi_60_61_ladder_5 = _2386;
            }
            _2502 = frontier_phi_60_61_ladder_4;
            _2504 = frontier_phi_60_61_ladder_3;
            _2506 = frontier_phi_60_61_ladder_2;
            _2508 = frontier_phi_60_61_ladder_5;
            _2510 = frontier_phi_60_61_ladder_1;
            _2512 = frontier_phi_60_61_ladder;
        }
        float _2517 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
        _2275 = (_2517 * _2508) + _1914;
        _2277 = (_2517 * _2510) + _1916;
        _2279 = (_2517 * _2512) + _1918;
        _2281 = ((_2502 * 0.039999999105930328369140625) * _2517) + _2156;
        _2283 = ((_2504 * 0.039999999105930328369140625) * _2517) + _2158;
        _2285 = ((_2506 * 0.039999999105930328369140625) * _2517) + _2160;
    }
    else
    {
        _2275 = _1914;
        _2277 = _1916;
        _2279 = _1918;
        _2281 = _2156;
        _2283 = _2158;
        _2285 = _2160;
    }
    uint _2291 = _378 + uint(cbMatDynParam._m0[0u].w);
    float _2300 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _235.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2291].x;
    float _2304 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _235.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2291].y;
    float _2308 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _235.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2291].z;
    float _3990 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _4001 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _4012 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _2325 = (((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2275 + ((isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0))) * _402))) + ((_2281 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _1181)) * cbPerFrame._m0[3u].x)) + _2300;
    float _2327 = (_2304 + ((_2283 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _1181)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2277 + ((isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))) * _402)));
    float _2329 = (_2308 + ((_2285 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _1181)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_2279 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _402)));
    float _4038 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2342 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    uint _2343 = _377 + 6u;
    float _2351 = _336 / cbSceneParam._m0[86u].x;
    float _2352 = _337 / cbSceneParam._m0[86u].y;
    vec4 _2366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, (log2((isnan(cbSceneParam._m0[77u].w) ? _270 : (isnan(_270) ? cbSceneParam._m0[77u].w : min(_270, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2368 = _2366.x;
    float _2369 = _2366.y;
    float _2370 = _2366.z;
    float _2371 = _2366.w;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    if (_270 > cbSceneParam._m0[78u].w)
    {
        float _2405 = isnan(_270) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _270 : min(cbSceneParam._m0[80u].w, _270));
        float _2406 = _2405 / _270;
        float _2417 = _2406 * _321;
        float _2418 = _322 * _2406;
        float _2419 = (-0.0) - _2418;
        float _2421 = _2406 * _323;
        float _2423 = (cbSceneParam._m0[77u].w * _2419) / _2405;
        float _2424 = _2423 + cbSceneParam._m0[79u].w;
        float _2425 = cbSceneParam._m0[79u].w - _2418;
        float _2431 = sqrt(((_2417 * _2417) + (_2418 * _2418)) + (_2421 * _2421));
        float _2434 = (1.0 - (cbSceneParam._m0[77u].w / _2405)) * _2431;
        float _2439 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2441 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2600;
        if (abs((_2419 - _2423) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2600 = ((((_2424 > 0.0) ? exp2(_2439 * _2424) : (2.0 - exp2(_2441 * _2424))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2434;
        }
        else
        {
            float _2560 = 1.0 / cbSceneParam._m0[80u].x;
            float _2561 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : max(_2424, _2425));
            float _2562 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : min(_2424, _2425));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            float _2572 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : min(_2562, 0.0));
            _2600 = ((abs(_2431 / _2419) * cbSceneParam._m0[80u].y) * ((((_2571 - _2572) * 2.0) - ((exp2(_2439 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0)))) - exp2(_2439 * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0))))) * _2560)) - ((exp2(_2441 * _2571) - exp2(_2441 * _2572)) * _2560))) + (_2434 * cbSceneParam._m0[80u].z);
        }
        vec4 _2602 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, 1.0), 0.0);
        float _2611 = exp2((_2600 * (-1.44269502162933349609375)) * (1.0 - _2602.w));
        float _2612 = log2(_2611);
        float _2628 = log2(_2371);
        _2443 = (exp2(_2628 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].x)) * _2602.x) / cbSceneParam._m0[78u].x)) + _2368;
        _2445 = (exp2(_2628 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].y)) * _2602.y) / cbSceneParam._m0[78u].y)) + _2369;
        _2447 = (exp2(_2628 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].z)) * _2602.z) / cbSceneParam._m0[78u].z)) + _2370;
        _2449 = _2611 * _2371;
    }
    else
    {
        _2443 = _2368;
        _2445 = _2369;
        _2447 = _2370;
        _2449 = _2371;
    }
    float _2460 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2461 = _2460 == 3.0;
    float _2463 = log2(_2449);
    float _2467 = exp2(_2463 * cbSceneParam._m0[78u].x);
    float _2468 = exp2(_2463 * cbSceneParam._m0[78u].y);
    float _2469 = exp2(_2463 * cbSceneParam._m0[78u].z);
    float _2470 = _2467 * (isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0)));
    float _2471 = _2468 * (isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0)));
    float _2472 = _2469 * (isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0)));
    float _2481 = (_2460 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2481 * (_2461 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2443)));
    SV_Target.y = _2481 * (_2461 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.z = _2481 * (_2461 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.w = cbInstanceData._m0[_2343].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2300) * _2342) * _2467) * _2481;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2304) * _2342) * _2468) * _2481;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2308) * _2342) * _2469) * _2481;
    SV_Target_1.w = cbInstanceData._m0[_2343].w;
}


