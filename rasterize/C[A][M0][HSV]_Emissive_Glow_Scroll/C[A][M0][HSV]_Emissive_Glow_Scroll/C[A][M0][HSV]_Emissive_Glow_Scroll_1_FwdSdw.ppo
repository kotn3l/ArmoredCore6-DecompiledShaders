#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _752;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _220 = texture(sampler2D(C_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _236 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3190 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _238 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
    float _246 = (((_238 * _238) * (3.0 - (_238 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _254 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _255 = _254 * _169;
    float _256 = _254 * _170;
    float _257 = _254 * _171;
    float _3201 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3212 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3223 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _276 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _317 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _327 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _317);
    float _328 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _317);
    float _329 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _317);
    float _333 = inversesqrt(dot(vec3(_327, _328, _329), vec3(_327, _328, _329)));
    float _334 = _327 * _333;
    float _335 = _328 * _333;
    float _336 = _329 * _333;
    float _342 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _343 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _364 = fma(_257, cbSceneParam._m0[5u].z, fma(_256, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _255));
    float _367 = fma(_257, cbSceneParam._m0[6u].z, fma(_256, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _255));
    float _370 = fma(_257, cbSceneParam._m0[7u].z, fma(_256, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _255));
    uint _383 = uint(roundEven(NORMAL.w)) * 13u;
    uint _385 = _383 + 9u;
    uint _386 = _385 + uint(cbMatDynParam._m0[0u].w);
    float _392 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0)))) * cbInstanceData._m0[_386].x;
    float _393 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)))) * cbInstanceData._m0[_386].y;
    float _394 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * cbInstanceData._m0[_386].z;
    float _3234 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _3245 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _397 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    vec4 _406 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _342, cbSceneParam._m0[86u].y * _343));
    float _409 = _406.x * TEXCOORD.z;
    float _410 = dot(vec3(_255, _256, _257), vec3(_334, _335, _336));
    float _413 = _410 * 2.0;
    float _417 = (_413 * _255) - _334;
    float _418 = (_413 * _256) - _335;
    float _419 = (_413 * _257) - _336;
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _751;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _476 = fma(_449, cbModelParam._m0[26u].z, fma(_445, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _441));
        float _480 = fma(_449, cbModelParam._m0[27u].z, fma(_445, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _441));
        float _484 = fma(_449, cbModelParam._m0[28u].z, fma(_445, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _441));
        float _509 = _441 + _255;
        float _510 = _445 + _256;
        float _511 = _449 + _257;
        float _521 = fma(_511, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509)) - _476;
        float _522 = fma(_511, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509)) - _480;
        float _523 = fma(_511, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509)) - _484;
        float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
        float _540 = ((_527 * _521) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_476 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _541 = ((_527 * _522) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_480 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _542 = ((_527 * _523) / cbModelParam._m0[34u].z) + ((((((_484 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        float _579 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_545.x + (-0.5));
        float _581 = _579 * (_545.y + (-0.5));
        float _582 = _579 * (_545.z + (-0.5));
        float _589 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_552.x + (-0.5));
        float _591 = _589 * (_552.y + (-0.5));
        float _592 = _589 * (_552.z + (-0.5));
        float _599 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _600 = _599 * (_559.x + (-0.5));
        float _601 = _599 * (_559.y + (-0.5));
        float _602 = _599 * (_559.z + (-0.5));
        float _609 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _610 = _609 * (_566.x + (-0.5));
        float _611 = _609 * (_566.y + (-0.5));
        float _612 = _609 * (_566.z + (-0.5));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = _580 * 0.5;
        float _617 = _590 * 0.5;
        float _618 = _600 * 0.5;
        float _619 = dot(vec3(_616, _617, _618), vec3(_616, _617, _618));
        float _624 = (_619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_619);
        float _633 = (dot(vec3(_255, _256, _257), vec3(_624 * _616, _624 * _617, _624 * _618)) + 1.0) * 0.5;
        float _3282 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _643 = sqrt(((_617 * _617) + (_616 * _616)) + (_618 * _618)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3293 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _645 = _644 * 2.0;
        float _649 = (1.0 - _644) / (_644 + 1.0);
        float _3304 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _650 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _659 = ((((1.0 - _650) * (_645 + 2.0)) * exp2(log2(isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_645 + 1.0))) + _650) * _613;
        float _660 = _581 * 0.5;
        float _661 = _591 * 0.5;
        float _662 = _601 * 0.5;
        float _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _676 = (dot(vec3(_255, _256, _257), vec3(_668 * _660, _668 * _661, _668 * _662)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _685 = sqrt(((_661 * _661) + (_660 * _660)) + (_662 * _662)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _3337 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_687 + 1.0))) + _692) * _614;
        float _702 = _582 * 0.5;
        float _703 = _592 * 0.5;
        float _704 = _602 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _718 = (dot(vec3(_255, _256, _257), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _727 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3370 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_729 + 1.0))) + _734) * _615;
        _751 = _582;
        _753 = _581;
        _754 = _580;
        _755 = _592;
        _756 = _591;
        _757 = _590;
        _758 = _602;
        _759 = _601;
        _760 = _600;
        _761 = _615;
        _762 = _614;
        _763 = _613;
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0)));
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
    }
    else
    {
        _751 = _752;
        _753 = _752;
        _754 = _752;
        _755 = _752;
        _756 = _752;
        _757 = _752;
        _758 = _752;
        _759 = _752;
        _760 = _752;
        _761 = _752;
        _762 = _752;
        _763 = _752;
        _764 = 0.0;
        _765 = 0.0;
        _766 = 0.0;
    }
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _792 = fma(_449, cbModelParam._m0[30u].z, fma(_445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _441));
        float _796 = fma(_449, cbModelParam._m0[31u].z, fma(_445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _441));
        float _800 = fma(_449, cbModelParam._m0[32u].z, fma(_445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _441));
        float _823 = _441 + _255;
        float _824 = _445 + _256;
        float _825 = _449 + _257;
        float _835 = fma(_825, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823)) - _792;
        float _836 = fma(_825, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823)) - _796;
        float _837 = fma(_825, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823)) - _800;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_792 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_796 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[35u].z) + ((((((_800 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _891 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_858.x + (-0.5));
        float _893 = _891 * (_858.y + (-0.5));
        float _894 = _891 * (_858.z + (-0.5));
        float _901 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_865.x + (-0.5));
        float _903 = _901 * (_865.y + (-0.5));
        float _904 = _901 * (_865.z + (-0.5));
        float _911 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_872.x + (-0.5));
        float _913 = _911 * (_872.y + (-0.5));
        float _914 = _911 * (_872.z + (-0.5));
        float _921 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_879.x + (-0.5));
        float _923 = _921 * (_879.y + (-0.5));
        float _924 = _921 * (_879.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_255, _256, _257), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3433 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_955 + 1.0))) + _960) * _925;
        float _970 = _893 * 0.5;
        float _971 = _903 * 0.5;
        float _972 = _913 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_255, _256, _257), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3466 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_997 + 1.0))) + _1002) * _926;
        float _1012 = _894 * 0.5;
        float _1013 = _904 * 0.5;
        float _1014 = _914 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_255, _256, _257), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3499 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1039 + 1.0))) + _1044) * _927;
        _1061 = _894;
        _1062 = _893;
        _1063 = _892;
        _1064 = _904;
        _1065 = _903;
        _1066 = _902;
        _1067 = _914;
        _1068 = _913;
        _1069 = _912;
        _1070 = _927;
        _1071 = _926;
        _1072 = _925;
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _752;
        _1062 = _752;
        _1063 = _752;
        _1064 = _752;
        _1065 = _752;
        _1066 = _752;
        _1067 = _752;
        _1068 = _752;
        _1069 = _752;
        _1070 = _752;
        _1071 = _752;
        _1072 = _752;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _764)) + _764;
    float _1086 = (cbModelParam._m0[1u].x * (_1074 - _765)) + _765;
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _766)) + _766;
    float _1108 = fma(_1087, cbSceneParam._m0[89u].z, fma(_1086, cbSceneParam._m0[89u].y, _1085 * cbSceneParam._m0[89u].x));
    float _1111 = fma(_1087, cbSceneParam._m0[90u].z, fma(_1086, cbSceneParam._m0[90u].y, _1085 * cbSceneParam._m0[90u].x));
    float _1114 = fma(_1087, cbSceneParam._m0[91u].z, fma(_1086, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1085));
    float _1129 = _417 * 0.5;
    float _1130 = _418 * 0.5;
    float _1131 = _419 * 0.5;
    float _1132 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1135 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1062, _1065, _1068, _1071));
    float _1138 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1172;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1145 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_751, _755, _758, _761));
        float _1149 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_753, _756, _759, _762));
        float _1153 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_754, _757, _760, _763));
        float _1160 = dot(vec4(cbModelParam._m0[39u]), vec4(_1129, _1130, _1131, 1.0));
        _1172 = dot(vec3(isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1160) ? 0.0 : (isnan(0.0) ? _1160 : max(0.0, _1160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1172 = 1.0;
    }
    float _1183;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1174 = dot(vec4(cbModelParam._m0[40u]), vec4(_1129, _1130, _1131, 1.0));
        _1183 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1174) ? 0.0 : (isnan(0.0) ? _1174 : max(0.0, _1174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1183 = 1.0;
    }
    float _1187 = (_1183 * cbModelParam._m0[1u].x) + (_1172 * (1.0 - cbModelParam._m0[1u].x));
    float _1196 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1277;
    float _1279;
    float _1281;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1244 = fma(_449, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441)) + cbModelParam._m0[13u].w;
        float _1248 = fma(_449, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441)) + cbModelParam._m0[14u].w;
        float _1252 = fma(_449, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441)) + cbModelParam._m0[15u].w;
        float _1255 = fma(_419, cbModelParam._m0[13u].z, fma(_418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417));
        float _1258 = fma(_419, cbModelParam._m0[14u].z, fma(_418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417));
        float _1261 = fma(_419, cbModelParam._m0[15u].z, fma(_418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417));
        float _1287;
        if (_1255 > 0.0)
        {
            _1287 = abs((1.0 - _1244) / _1255);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1255 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1244 + 1.0) / _1255);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1287 = frontier_phi_14_12_ladder;
        }
        float _1460;
        if (_1258 > 0.0)
        {
            _1460 = abs((1.0 - _1248) / _1258);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1248 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1460 = frontier_phi_23_19_ladder;
        }
        float _1756;
        if (_1261 > 0.0)
        {
            _1756 = abs((1.0 - _1252) / _1261);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1252 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1756 = frontier_phi_35_30_ladder;
        }
        float _1758 = isnan(_1460) ? _1287 : (isnan(_1287) ? _1460 : min(_1287, _1460));
        float _1759 = isnan(_1756) ? _1758 : (isnan(_1758) ? _1756 : min(_1758, _1756));
        float _1763 = (_1759 * _1255) + _1244;
        float _1764 = (_1759 * _1258) + _1248;
        float _1765 = (_1759 * _1261) + _1252;
        float _1766 = _1759 * 9.9999997473787516355514526367188e-05;
        float _1768 = (-1.0) - _1766;
        float _1770 = _1766 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1765 > _1770) || ((_1765 < _1768) || ((_1764 > _1770) || ((_1764 < _1768) || ((_1763 < _1768) || (_1763 > _1770))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1765, cbModelParam._m0[9u].z, fma(_1764, cbModelParam._m0[9u].y, _1763 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1765, cbModelParam._m0[10u].z, fma(_1764, cbModelParam._m0[10u].y, _1763 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1765, cbModelParam._m0[11u].z, fma(_1764, cbModelParam._m0[11u].y, _1763 * cbModelParam._m0[11u].x))), _1196);
            frontier_phi_13_35_ladder = _1910.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1910.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1910.x * cbModelParam._m0[1u].y;
        }
        _1277 = frontier_phi_13_35_ladder_2;
        _1279 = frontier_phi_13_35_ladder_1;
        _1281 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1265 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_417, _418, _419), _1196);
        _1277 = _1265.x * cbModelParam._m0[1u].y;
        _1279 = _1265.y * cbModelParam._m0[1u].y;
        _1281 = _1265.z * cbModelParam._m0[1u].y;
    }
    float _1284 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1340 = fma(_449, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441)) + cbModelParam._m0[21u].w;
        float _1344 = fma(_449, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441)) + cbModelParam._m0[22u].w;
        float _1348 = fma(_449, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441)) + cbModelParam._m0[23u].w;
        float _1351 = fma(_419, cbModelParam._m0[21u].z, fma(_418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417));
        float _1354 = fma(_419, cbModelParam._m0[22u].z, fma(_418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417));
        float _1357 = fma(_419, cbModelParam._m0[23u].z, fma(_418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417));
        float _1465;
        if (_1351 > 0.0)
        {
            _1465 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1465 = frontier_phi_25_21_ladder;
        }
        float _1783;
        if (_1354 > 0.0)
        {
            _1783 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1783 = frontier_phi_37_32_ladder;
        }
        float _2056;
        if (_1357 > 0.0)
        {
            _2056 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2056 = frontier_phi_47_44_ladder;
        }
        float _2058 = isnan(_1783) ? _1465 : (isnan(_1465) ? _1783 : min(_1465, _1783));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1351) + _1340;
        float _2064 = (_2059 * _1354) + _1344;
        float _2065 = (_2059 * _1357) + _1348;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2067 = (-1.0) - _2066;
        float _2069 = _2066 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2065 > _2069) || ((_2065 < _2067) || ((_2064 > _2069) || ((_2064 < _2067) || ((_2063 < _2067) || (_2063 > _2069))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2156 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2065, cbModelParam._m0[17u].z, fma(_2064, cbModelParam._m0[17u].y, _2063 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2065, cbModelParam._m0[18u].z, fma(_2064, cbModelParam._m0[18u].y, _2063 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2065, cbModelParam._m0[19u].z, fma(_2064, cbModelParam._m0[19u].y, _2063 * cbModelParam._m0[19u].x))), _1284);
            frontier_phi_22_47_ladder = _2156.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2156.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2156.x * cbModelParam._m0[1u].z;
        }
        _1376 = frontier_phi_22_47_ladder_2;
        _1378 = frontier_phi_22_47_ladder_1;
        _1380 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_417, _418, _419), _1284);
        _1376 = _1360.x * cbModelParam._m0[1u].z;
        _1378 = _1360.y * cbModelParam._m0[1u].z;
        _1380 = _1360.z * cbModelParam._m0[1u].z;
    }
    float _1392 = _409 * 0.01200000010430812835693359375;
    float _1394 = _1392 * ((cbModelParam._m0[1u].w * (_1376 - _1277)) + _1277);
    float _1395 = _1392 * ((cbModelParam._m0[1u].w * (_1378 - _1279)) + _1279);
    float _1396 = _1392 * ((cbModelParam._m0[1u].w * (_1380 - _1281)) + _1281);
    float _1399 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, _1394 * cbSceneParam._m0[91u].x));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1452 = _1439 / _1451;
    float _1453 = _1443 / _1451;
    float _1454 = _1447 / _1451;
    float _1601;
    float _1602;
    float _1603;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1481 = ((uint(_1454 > cbSceneParam._m0[59u].y) + uint(_1454 > cbSceneParam._m0[59u].x)) + uint(_1454 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1482 = _1481 + 43u;
        uint _1490 = _1481 + 44u;
        uint _1498 = _1481 + 45u;
        uint _1506 = _1481 + 46u;
        float _1517 = fma(_1451, cbSceneParam._m0[_1482].w, fma(_1447, cbSceneParam._m0[_1482].z, fma(_1443, cbSceneParam._m0[_1482].y, _1439 * cbSceneParam._m0[_1482].x)));
        float _1521 = fma(_1451, cbSceneParam._m0[_1490].w, fma(_1447, cbSceneParam._m0[_1490].z, fma(_1443, cbSceneParam._m0[_1490].y, _1439 * cbSceneParam._m0[_1490].x)));
        float _1529 = fma(_1451, cbSceneParam._m0[_1506].w, fma(_1447, cbSceneParam._m0[_1506].z, fma(_1443, cbSceneParam._m0[_1506].y, _1439 * cbSceneParam._m0[_1506].x)));
        float _1534 = cbSceneParam._m0[33u].z * _1529;
        float _1536 = cbSceneParam._m0[33u].w * _1529;
        float _1539 = fma(_1451, cbSceneParam._m0[_1498].w, fma(_1447, cbSceneParam._m0[_1498].z, fma(_1443, cbSceneParam._m0[_1498].y, _1439 * cbSceneParam._m0[_1498].x))) / _1529;
        float _1587 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
        float _3625 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1594 = (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1534 + _1517) / _1529, (_1536 + _1521) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1536 + _1517) / _1529, (_1521 - _1534) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1534) / _1529, (_1521 - _1536) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1536) / _1529, (_1534 + _1521) / _1529), _1539), 0.0)).x), vec4(0.25)));
        _1601 = 1.0 - (_1594 * cbSceneParam._m0[34u].x);
        _1602 = 1.0 - (_1594 * cbSceneParam._m0[34u].y);
        _1603 = 1.0 - (_1594 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1601 = 1.0;
        _1602 = 1.0;
        _1603 = 1.0;
    }
    float _1667;
    float _1669;
    float _1671;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1655 = fma(_1451, cbSceneParam._m0[63u].w, fma(_1447, cbSceneParam._m0[63u].z, fma(_1443, cbSceneParam._m0[63u].y, _1439 * cbSceneParam._m0[63u].x)));
        float _1656 = fma(_1451, cbSceneParam._m0[60u].w, fma(_1447, cbSceneParam._m0[60u].z, fma(_1443, cbSceneParam._m0[60u].y, _1439 * cbSceneParam._m0[60u].x))) / _1655;
        float _1657 = fma(_1451, cbSceneParam._m0[61u].w, fma(_1447, cbSceneParam._m0[61u].z, fma(_1443, cbSceneParam._m0[61u].y, _1439 * cbSceneParam._m0[61u].x))) / _1655;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1656 >= cbSceneParam._m0[64u].x) && (_1657 >= cbSceneParam._m0[64u].y)) && (_1656 <= cbSceneParam._m0[64u].z)) && (_1657 <= cbSceneParam._m0[64u].w))
        {
            float _1796 = fma(_1451, cbSceneParam._m0[62u].w, fma(_1447, cbSceneParam._m0[62u].z, fma(_1443, cbSceneParam._m0[62u].y, _1439 * cbSceneParam._m0[62u].x))) / _1655;
            float _1800 = isnan(cbSceneParam._m0[41u].w) ? _1796 : (isnan(_1796) ? cbSceneParam._m0[41u].w : max(_1796, cbSceneParam._m0[41u].w));
            float _1843 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
            float _3641 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
            float _1850 = (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1656, cbSceneParam._m0[33u].w + _1657), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1656, _1657 - cbSceneParam._m0[33u].z), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1656 - cbSceneParam._m0[33u].z, _1657 - cbSceneParam._m0[33u].w), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1656 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1657), _1800), 0.0)).x), vec4(0.25)));
            float _1854 = 1.0 - (_1850 * cbSceneParam._m0[34u].x);
            float _1855 = 1.0 - (_1850 * cbSceneParam._m0[34u].y);
            float _1856 = 1.0 - (_1850 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1856) ? _1603 : (isnan(_1603) ? _1856 : min(_1603, _1856));
            frontier_phi_34_33_ladder_1 = isnan(_1855) ? _1602 : (isnan(_1602) ? _1855 : min(_1602, _1855));
            frontier_phi_34_33_ladder_2 = isnan(_1854) ? _1601 : (isnan(_1601) ? _1854 : min(_1601, _1854));
        }
        else
        {
            frontier_phi_34_33_ladder = _1603;
            frontier_phi_34_33_ladder_1 = _1602;
            frontier_phi_34_33_ladder_2 = _1601;
        }
        _1667 = frontier_phi_34_33_ladder_2;
        _1669 = frontier_phi_34_33_ladder_1;
        _1671 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1667 = _1601;
        _1669 = _1602;
        _1671 = _1603;
    }
    uvec4 _1676 = floatBitsToUint(cbInstanceData._m0[_383 + 5u]);
    uint _1678 = _1676.x * 14u;
    uint _1679 = _1678 + 13u;
    float _1686 = _409 + (-1.0);
    float _1691 = (cbLight._m0[_1679].x * _1686) + 1.0;
    float _1692 = (cbLight._m0[_1679].y * _1686) + 1.0;
    float _1693 = (cbLight._m0[_1679].z * _1686) + 1.0;
    float _1694 = (cbLight._m0[_1679].w * _1686) + 1.0;
    uint _1695 = _1678 + 5u;
    float _1701 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1705 = _1678 + 4u;
    float _1715 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1719 = _1678 | 1u;
    float _1730 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_255, _256, _257));
    float _1733 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_255, _256, _257));
    float _3677 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _3688 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1738 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.3183098733425140380859375;
    float _1740 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.3183098733425140380859375;
    float _1747 = ((cbLight._m0[_1695].x * _1701) * _1740) + (((cbLight._m0[_1705].x * _1667) * _1715) * _1738);
    float _1748 = ((_1701 * cbLight._m0[_1695].y) * _1740) + (((cbLight._m0[_1705].y * _1669) * _1715) * _1738);
    float _1749 = ((_1701 * cbLight._m0[_1695].z) * _1740) + (((cbLight._m0[_1705].z * _1671) * _1715) * _1738);
    uvec4 _1753 = floatBitsToUint(cbLight._m0[_1678 + 12u]);
    bool _1755 = _1753.x == 0u;
    float _1857;
    float _1859;
    float _1861;
    if (_1755)
    {
        _1857 = _1747;
        _1859 = _1748;
        _1861 = _1749;
    }
    else
    {
        uint _1865 = _1678 + 6u;
        float _1881 = (dot(vec3(cbLight._m0[_1678 + 2u].xyz), vec3(_255, _256, _257)) * 0.5) + 0.5;
        float _1882 = _1881 * _1881;
        float _3699 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1884 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _1857 = (((cbLight._m0[_1865].x * 0.3183098733425140380859375) * _1883) * _1884) + _1747;
        _1859 = (((cbLight._m0[_1865].y * 0.3183098733425140380859375) * _1883) * _1884) + _1748;
        _1861 = (((cbLight._m0[_1865].z * 0.3183098733425140380859375) * _1883) * _1884) + _1749;
    }
    bool _1864 = _1753.y == 0u;
    float _1919;
    float _1921;
    float _1923;
    if (_1864)
    {
        _1919 = _1857;
        _1921 = _1859;
        _1923 = _1861;
    }
    else
    {
        uint _2027 = _1678 + 7u;
        float _2043 = (dot(vec3(cbLight._m0[_1678 + 3u].xyz), vec3(_255, _256, _257)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _3715 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _2046 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _1919 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _1857;
        _1921 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _1859;
        _1923 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _1861;
    }
    uint _1925 = _1678 + 8u;
    float _1931 = cbLight._m0[_1678].x + _334;
    float _1932 = cbLight._m0[_1678].y + _335;
    float _1933 = cbLight._m0[_1678].z + _336;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1941 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1678].xyz));
    float _3731 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _1945 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1931 * _1937, _1932 * _1937, _1933 * _1937));
    float _3753 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1957 = (exp2(log2(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1963 = (0.5 / ((_1944 + 9.9999999392252902907785028219223e-09) + _1945)) * _1944;
    float _3764 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.31831014156341552734375;
    uint _1979 = _1678 + 9u;
    float _1985 = cbLight._m0[_1719].x + _334;
    float _1986 = cbLight._m0[_1719].y + _335;
    float _1987 = cbLight._m0[_1719].z + _336;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1995 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1719].xyz));
    float _3775 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1999 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1985 * _1991, _1986 * _1991, _1987 * _1991));
    float _3786 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2008 = (exp2(log2(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2012 = (0.5 / ((_1998 + 9.9999999392252902907785028219223e-09) + _1945)) * _1998;
    float _3797 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.31831014156341552734375;
    float _2024 = (((_2008 * cbLight._m0[_1979].x) * _2014) * _1701) + ((((cbLight._m0[_1925].x * _1667) * _1957) * _1965) * _1715);
    float _2025 = (((_2008 * cbLight._m0[_1979].y) * _2014) * _1701) + ((((cbLight._m0[_1925].y * _1669) * _1957) * _1965) * _1715);
    float _2026 = (((_2008 * cbLight._m0[_1979].z) * _2014) * _1701) + ((((cbLight._m0[_1925].z * _1671) * _1957) * _1965) * _1715);
    float _2082;
    float _2084;
    float _2086;
    if (_1755)
    {
        _2082 = _2024;
        _2084 = _2025;
        _2086 = _2026;
    }
    else
    {
        uint _2088 = _1678 + 10u;
        uint _2094 = _1678 + 2u;
        float _2100 = cbLight._m0[_2094].x + _334;
        float _2101 = cbLight._m0[_2094].y + _335;
        float _2102 = cbLight._m0[_2094].z + _336;
        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
        float _2110 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_2094].xyz));
        float _3808 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2100 * _2106, _2101 * _2106, _2102 * _2106));
        float _3819 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2127 = (0.5 / ((_2113 + 9.9999999392252902907785028219223e-09) + _1945)) * _2113;
        float _3830 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2129 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.31831014156341552734375;
        float _2130 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _2082 = (((_2123 * cbLight._m0[_2088].x) * _2129) * _2130) + _2024;
        _2084 = (((_2123 * cbLight._m0[_2088].y) * _2129) * _2130) + _2025;
        _2086 = (((_2123 * cbLight._m0[_2088].z) * _2129) * _2130) + _2026;
    }
    float _2161;
    float _2163;
    float _2165;
    if (_1864)
    {
        _2161 = _2082;
        _2163 = _2084;
        _2165 = _2086;
    }
    else
    {
        uint _2172 = _1678 + 11u;
        uint _2178 = _1678 + 3u;
        float _2184 = cbLight._m0[_2178].x + _334;
        float _2185 = cbLight._m0[_2178].y + _335;
        float _2186 = cbLight._m0[_2178].z + _336;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2194 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_2178].xyz));
        float _3846 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _2198 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2184 * _2190, _2185 * _2190, _2186 * _2190));
        float _3857 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2211 = (0.5 / ((_2197 + 9.9999999392252902907785028219223e-09) + _1945)) * _2197;
        float _3868 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2213 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.31831014156341552734375;
        float _2214 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _2161 = (((_2207 * cbLight._m0[_2172].x) * _2213) * _2214) + _2082;
        _2163 = (((_2207 * cbLight._m0[_2172].y) * _2213) * _2214) + _2084;
        _2165 = (((_2207 * cbLight._m0[_2172].z) * _2213) * _2214) + _2086;
    }
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    if (_1676.y == 0u)
    {
        uvec4 _2235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2236 = _2235.x;
        uint _2247 = uint((float(_2235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _343) / _2236))) + floor(float(uint(cbSceneParam._m0[85u].x * _342) / _2236)));
        float _2257 = (log2(_1454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2258 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        uint _2261 = uint(isnan(14.0) ? _2258 : (isnan(_2258) ? 14.0 : min(_2258, 14.0)));
        uvec4 _2266 = texelFetch(g_lightClusterGridBuffer, int(((_2261 << 2u) + (_2247 << 6u)) >> 2u));
        uint _2267 = _2266.x;
        uint _2268 = _2235.z;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        if (((((1u << ((_2268 >> 4u) & 15u)) + 4294967295u) & _2267) == 0u) || ((_2268 & 240u) == 0u))
        {
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
        }
        else
        {
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            uint _2544 = 0u;
            uint _2553;
            bool _2554;
            for (;;)
            {
                _2553 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                _2554 = _2553 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2554)
                {
                    frontier_phi_66_pred = _2543;
                    frontier_phi_66_pred_1 = _2542;
                    frontier_phi_66_pred_2 = _2541;
                    frontier_phi_66_pred_3 = _2540;
                    frontier_phi_66_pred_4 = _2539;
                    frontier_phi_66_pred_5 = _2538;
                }
                else
                {
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    uint _2668;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2542;
                    _2667 = _2543;
                    _2668 = _2553;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    for (;;)
                    {
                        uint _2672 = uint(findLSB(_2668)) + (_2544 << 5u);
                        uint _2669 = (_2668 + 4294967295u) & _2668;
                        uint _2674 = _2672 * 48u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2694 = (_2672 * 48u) + 4u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2713 = (_2672 * 48u) + 8u;
                        vec3 _2724 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x));
                        float _2728 = _2688.x - _1452;
                        float _2729 = _2688.y - _1453;
                        float _2730 = _2688.z - _1454;
                        float _2731 = dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730));
                        float _2734 = inversesqrt(_2731);
                        float _2743 = 1.0 - (_2731 * _2688.w);
                        float _3894 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
                        float _2745 = sqrt(_2731) * _2707.w;
                        float _2748 = 1.39999997615814208984375 / (_2745 + 1.39999997615814208984375);
                        float _2749 = _2748 * _2748;
                        float _2752 = ((1.0 - _2749) * dot(vec3(_364, _367, _370), vec3(_2734 * _2728, _2734 * _2729, _2734 * _2730))) + _2749;
                        float _2755 = _2745 * _2745;
                        float _2759 = ((isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))) * _2744) / ((_2755 * 0.699999988079071044921875) + 1.0);
                        float _2763 = (-0.0) - _1452;
                        float _2764 = (-0.0) - _1453;
                        float _2765 = (-0.0) - _1454;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_364, _367, _370), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _3910 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _3921 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2777 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                        float _2781 = (0.5 / (((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) + 9.9999999392252902907785028219223e-09) + _2777)) * _2777;
                        float _3932 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2790 = (((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 3.1415927410125732421875) / ((_2755 * 2.1991131305694580078125) + 3.141590118408203125)) * _2744;
                        _2597 = (_2759 * _2707.x) + _2665;
                        _2598 = (_2759 * _2707.y) + _2666;
                        _2599 = (_2759 * _2707.z) + _2667;
                        _2594 = (_2790 * _2724.x) + _2662;
                        _2595 = (_2790 * _2724.y) + _2663;
                        _2596 = (_2790 * _2724.z) + _2664;
                        if (_2669 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2599;
                            _2668 = _2669;
                        }
                    }
                    frontier_phi_66_pred = _2599;
                    frontier_phi_66_pred_1 = _2598;
                    frontier_phi_66_pred_2 = _2597;
                    frontier_phi_66_pred_3 = _2596;
                    frontier_phi_66_pred_4 = _2595;
                    frontier_phi_66_pred_5 = _2594;
                }
                _2399 = frontier_phi_66_pred;
                _2397 = frontier_phi_66_pred_1;
                _2395 = frontier_phi_66_pred_2;
                _2393 = frontier_phi_66_pred_3;
                _2391 = frontier_phi_66_pred_4;
                _2389 = frontier_phi_66_pred_5;
                uint _2545 = _2544 + 1u;
                if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2538 = _2389;
                    _2539 = _2391;
                    _2540 = _2393;
                    _2541 = _2395;
                    _2542 = _2397;
                    _2543 = _2399;
                    _2544 = _2545;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
        }
        uvec4 _2402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2403 = _2402.z;
        uint _2405 = (_2403 >> 8u) & 15u;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((4294967295u << _2405) & _2267) == 0u)
        {
            _2509 = _2388;
            _2511 = _2390;
            _2513 = _2392;
            _2515 = _2394;
            _2517 = _2396;
            _2519 = _2398;
        }
        else
        {
            float _2534 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2405 < ((_2403 >> 12u) & 15u))
            {
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2645 = _2388;
                float _2646 = _2390;
                float _2647 = _2392;
                float _2648 = _2394;
                float _2649 = _2396;
                float _2650 = _2398;
                uint _2651 = _2405;
                uint _2660;
                bool _2661;
                for (;;)
                {
                    _2660 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2651 << 2u)) >> 2u)).x;
                    _2661 = _2660 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2661)
                    {
                        frontier_phi_72_pred = _2650;
                        frontier_phi_72_pred_1 = _2649;
                        frontier_phi_72_pred_2 = _2648;
                        frontier_phi_72_pred_3 = _2647;
                        frontier_phi_72_pred_4 = _2646;
                        frontier_phi_72_pred_5 = _2645;
                    }
                    else
                    {
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _2808 = _2645;
                        float _2809 = _2646;
                        float _2810 = _2647;
                        float _2811 = _2648;
                        float _2812 = _2649;
                        float _2813 = _2650;
                        uint _2814 = _2660;
                        uint _2815;
                        vec4 _2840;
                        float _2841;
                        vec4 _2856;
                        vec3 _2868;
                        vec4 _2884;
                        vec4 _2900;
                        float _2947;
                        bool _2948;
                        for (;;)
                        {
                            uint _2825 = ((_2651 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2814));
                            _2815 = (_2814 + 4294967295u) & _2814;
                            uint _2827 = _2825 * 40u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            _2841 = _2840.w;
                            uint _2843 = (_2825 * 40u) + 4u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2858 = (_2825 * 40u) + 8u;
                            _2868 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x));
                            uint _2871 = (_2825 * 40u) + 16u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2825 * 40u) + 20u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2825 * 40u) + 24u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2922 = (_2825 * 40u) + 28u;
                            vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2947 = fma(_1454, _2935.z, fma(_1453, _2935.y, _2935.x * _1452)) + _2935.w;
                            _2948 = !((fma(_1454, _2916.z, fma(_1453, _2916.y, _2916.x * _1452)) + _2916.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2948)
                            {
                                float _2975 = _2840.x - _1452;
                                float _2976 = _2840.y - _1453;
                                float _2977 = _2840.z - _1454;
                                float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                                float _2981 = inversesqrt(_2978);
                                float _2982 = _2981 * _2975;
                                float _2983 = _2981 * _2976;
                                float _2984 = _2981 * _2977;
                                float _2988 = 1.0 - (_2978 / (_2841 * _2841));
                                float _3943 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                                float _2993 = sqrt(_2978) * _2856.w;
                                float _2995 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                                float _2996 = _2995 * _2995;
                                float _2997 = 1.0 - _2996;
                                float _2999 = (_2997 * dot(vec3(_2982, _2983, _2984), vec3(_364, _367, _370))) + _2996;
                                float _3002 = _2993 * _2993;
                                float _3006 = (fma(_1454, _2884.z, fma(_1453, _2884.y, _2884.x * _1452)) + _2884.w) / _2947;
                                float _3007 = (fma(_1454, _2900.z, fma(_1453, _2900.y, _2900.x * _1452)) + _2900.w) / _2947;
                                float _3011 = 1.0 - dot(vec2(_3006, _3007), vec2(_3006, _3007));
                                float _3959 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                                float _3013 = _3012 * (((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2989) / ((_3002 * 0.699999988079071044921875) + 1.0));
                                float _3023 = dot(vec3(_364, _367, _370), vec3((-0.0) - (_1452 * _2534), (-0.0) - (_1453 * _2534), (-0.0) - (_1454 * _2534)));
                                float _3970 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3031 = (_2997 * dot(vec3(_364, _367, _370), vec3(_2982, _2983, _2984))) + _2996;
                                float _3981 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                                float _3036 = (0.5 / (((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) + 9.9999999392252902907785028219223e-09) + _3032)) * _3032;
                                float _3992 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3043 = (_3012 * _2989) * (((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 3.1415927410125732421875) / ((_3002 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3013 * _2856.y;
                                frontier_phi_78_pred_1 = _3013 * _2856.x;
                                frontier_phi_78_pred_2 = _3043 * _2868.z;
                                frontier_phi_78_pred_3 = _3043 * _2868.y;
                                frontier_phi_78_pred_4 = _3043 * _2868.x;
                                frontier_phi_78_pred_5 = _3013 * _2856.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3051 = frontier_phi_78_pred;
                            _3050 = frontier_phi_78_pred_1;
                            _3049 = frontier_phi_78_pred_2;
                            _3048 = frontier_phi_78_pred_3;
                            _3047 = frontier_phi_78_pred_4;
                            _3052 = frontier_phi_78_pred_5;
                            _2798 = _3050 + _2811;
                            _2799 = _3051 + _2812;
                            _2800 = _3052 + _2813;
                            _2795 = _3047 + _2808;
                            _2796 = _3048 + _2809;
                            _2797 = _3049 + _2810;
                            if (_2815 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2815;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2800;
                        frontier_phi_72_pred_1 = _2799;
                        frontier_phi_72_pred_2 = _2798;
                        frontier_phi_72_pred_3 = _2797;
                        frontier_phi_72_pred_4 = _2796;
                        frontier_phi_72_pred_5 = _2795;
                    }
                    _2520 = frontier_phi_72_pred;
                    _2518 = frontier_phi_72_pred_1;
                    _2516 = frontier_phi_72_pred_2;
                    _2514 = frontier_phi_72_pred_3;
                    _2512 = frontier_phi_72_pred_4;
                    _2510 = frontier_phi_72_pred_5;
                    uint _2652 = _2651 + 1u;
                    if (_2652 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2645 = _2510;
                        _2646 = _2512;
                        _2647 = _2514;
                        _2648 = _2516;
                        _2649 = _2518;
                        _2650 = _2520;
                        _2651 = _2652;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2520;
                frontier_phi_60_61_ladder_1 = _2518;
                frontier_phi_60_61_ladder_2 = _2514;
                frontier_phi_60_61_ladder_3 = _2512;
                frontier_phi_60_61_ladder_4 = _2510;
                frontier_phi_60_61_ladder_5 = _2516;
            }
            else
            {
                frontier_phi_60_61_ladder = _2398;
                frontier_phi_60_61_ladder_1 = _2396;
                frontier_phi_60_61_ladder_2 = _2392;
                frontier_phi_60_61_ladder_3 = _2390;
                frontier_phi_60_61_ladder_4 = _2388;
                frontier_phi_60_61_ladder_5 = _2394;
            }
            _2509 = frontier_phi_60_61_ladder_4;
            _2511 = frontier_phi_60_61_ladder_3;
            _2513 = frontier_phi_60_61_ladder_2;
            _2515 = frontier_phi_60_61_ladder_5;
            _2517 = frontier_phi_60_61_ladder_1;
            _2519 = frontier_phi_60_61_ladder;
        }
        float _2524 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
        _2280 = (_2524 * _2515) + _1919;
        _2282 = (_2524 * _2517) + _1921;
        _2284 = (_2524 * _2519) + _1923;
        _2286 = ((_2509 * 0.039999999105930328369140625) * _2524) + _2161;
        _2288 = ((_2511 * 0.039999999105930328369140625) * _2524) + _2163;
        _2290 = ((_2513 * 0.039999999105930328369140625) * _2524) + _2165;
    }
    else
    {
        _2280 = _1919;
        _2282 = _1921;
        _2284 = _1923;
        _2286 = _2161;
        _2288 = _2163;
        _2290 = _2165;
    }
    uint _2296 = _385 + uint(cbMatDynParam._m0[0u].w);
    float _2306 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _220.x) * cbSceneParam._m0[72u].y) * _246) * cbInstanceData._m0[_2296].x;
    float _2311 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _220.y) * cbSceneParam._m0[72u].y) * _246) * cbInstanceData._m0[_2296].y;
    float _2316 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _220.z) * cbSceneParam._m0[72u].y) * _246) * cbInstanceData._m0[_2296].z;
    float _4008 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _4019 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _4030 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _2333 = (((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2280 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _409))) + ((_2286 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _1187)) * cbPerFrame._m0[3u].x)) + _2306;
    float _2335 = (_2311 + ((_2288 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _1187)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2282 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _409)));
    float _2337 = (_2316 + ((_2290 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _1187)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2284 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _409)));
    float _4056 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2350 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    uint _2351 = _383 + 6u;
    float _2359 = _342 / cbSceneParam._m0[86u].x;
    float _2360 = _343 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _276 : (isnan(_276) ? cbSceneParam._m0[77u].w : min(_276, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_276 > cbSceneParam._m0[78u].w)
    {
        float _2413 = isnan(_276) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _276 : min(cbSceneParam._m0[80u].w, _276));
        float _2414 = _2413 / _276;
        float _2425 = _2414 * _327;
        float _2426 = _328 * _2414;
        float _2427 = (-0.0) - _2426;
        float _2429 = _2414 * _329;
        float _2431 = (cbSceneParam._m0[77u].w * _2427) / _2413;
        float _2432 = _2431 + cbSceneParam._m0[79u].w;
        float _2433 = cbSceneParam._m0[79u].w - _2426;
        float _2439 = sqrt(((_2425 * _2425) + (_2426 * _2426)) + (_2429 * _2429));
        float _2442 = (1.0 - (cbSceneParam._m0[77u].w / _2413)) * _2439;
        float _2447 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2449 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2607;
        if (abs((_2427 - _2431) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2607 = ((((_2432 > 0.0) ? exp2(_2447 * _2432) : (2.0 - exp2(_2449 * _2432))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2442;
        }
        else
        {
            float _2567 = 1.0 / cbSceneParam._m0[80u].x;
            float _2568 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : max(_2432, _2433));
            float _2569 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : min(_2432, _2433));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            _2607 = ((abs(_2439 / _2427) * cbSceneParam._m0[80u].y) * ((((_2578 - _2579) * 2.0) - ((exp2(_2447 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)))) - exp2(_2447 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0))))) * _2567)) - ((exp2(_2449 * _2578) - exp2(_2449 * _2579)) * _2567))) + (_2442 * cbSceneParam._m0[80u].z);
        }
        vec4 _2609 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2618 = exp2((_2607 * (-1.44269502162933349609375)) * (1.0 - _2609.w));
        float _2619 = log2(_2618);
        float _2635 = log2(_2379);
        _2451 = (exp2(_2635 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].x)) * _2609.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2453 = (exp2(_2635 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].y)) * _2609.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2455 = (exp2(_2635 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].z)) * _2609.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2457 = _2618 * _2379;
    }
    else
    {
        _2451 = _2376;
        _2453 = _2377;
        _2455 = _2378;
        _2457 = _2379;
    }
    float _2468 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2469 = _2468 == 3.0;
    float _2470 = log2(_2457);
    float _2474 = exp2(_2470 * cbSceneParam._m0[78u].x);
    float _2475 = exp2(_2470 * cbSceneParam._m0[78u].y);
    float _2476 = exp2(_2470 * cbSceneParam._m0[78u].z);
    float _2477 = _2474 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)));
    float _2478 = _2475 * (isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0)));
    float _2479 = _2476 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0)));
    float _2488 = (_2468 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2488 * (_2469 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2451)));
    SV_Target.y = _2488 * (_2469 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2453)));
    SV_Target.z = _2488 * (_2469 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2455)));
    SV_Target.w = cbInstanceData._m0[_2351].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2306) * _2350) * _2474) * _2488;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2311) * _2350) * _2475) * _2488;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2316) * _2350) * _2476) * _2488;
    SV_Target_1.w = cbInstanceData._m0[_2351].w;
}


