#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1036;
float _3397;
float _3398;
float _3399;
float _3400;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _332 = _330.x;
    float _345 = dot(vec4(_332, _330.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _362 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_332 - _345) * cbMtdParam._m0[24u].x) + _345) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3409 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _370 = (_363 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _371 = (_363 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _372 = (_363 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _404 = _402.x;
    float _405 = _402.y;
    float _406 = _402.z;
    float _415 = ((_385.z - _406) * _363) + _406;
    float _418 = ((((_385.x - _404) * _363) + _404) * 2.0) + (-1.0);
    float _420 = ((((_385.y - _405) * _363) + _405) * 2.0) + (-1.0);
    float _421 = dot(vec2(_418, _420), vec2(_418, _420));
    float _3420 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _446 = cbMtdParam._m0[22u].x + _439.w;
    float _450 = gl_FragCoord.x * 0.125;
    float _452 = gl_FragCoord.y * 0.125;
    float _463 = fma(_426, _213 * NORMAL.x, fma(_420, _220 * TANGENT.x, (_206 * _198) * _418));
    float _466 = fma(_426, _213 * NORMAL.y, fma(_420, _220 * TANGENT.y, (_206 * _199) * _418));
    float _469 = fma(_426, _213 * NORMAL.z, fma(_420, _220 * TANGENT.z, (_206 * _200) * _418));
    float _473 = inversesqrt(dot(vec3(_463, _466, _469), vec3(_463, _466, _469)));
    float _474 = _473 * _463;
    float _475 = _473 * _466;
    float _476 = _473 * _469;
    float _3431 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _477 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3453 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3464 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3475 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_450, _452)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _499 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    vec4 _562 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_450, _452));
    float _564 = _562.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _718 = sqrt(((_551 * _551) + (_552 * _552)) + (_553 * _553));
        float _724 = (cbMatDynParam._m0[5u].x * _718) + cbMatDynParam._m0[5u].y;
        float _3486 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _729 = (cbMatDynParam._m0[5u].z * _718) + cbMatDynParam._m0[5u].w;
        float _3497 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) - _725)) + _725) < ((_564 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _594 = fma(_476, cbSceneParam._m0[5u].z, fma(_475, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _474));
    float _597 = fma(_476, cbSceneParam._m0[6u].z, fma(_475, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _474));
    float _600 = fma(_476, cbSceneParam._m0[7u].z, fma(_475, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _474));
    uint _613 = _226 + 9u;
    uint _614 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3508 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _575, cbSceneParam._m0[86u].y * _576));
    float _638 = ((isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * TEXCOORD_5.w) * _634.x;
    float _639 = dot(vec3(_474, _475, _476), vec3(_558, _559, _560));
    float _642 = _639 * 2.0;
    float _646 = (_642 * _474) - _558;
    float _647 = (_642 * _475) - _559;
    float _648 = (_642 * _476) - _560;
    float _652 = abs(dot(vec3(_558, _559, _560), vec3(_474, _475, _476)));
    float _3541 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _654 = sqrt(_477);
    float _667 = exp2((_654 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_654 * 3.0));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _760 = fma(_707, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699));
        float _764 = fma(_707, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699));
        float _768 = fma(_707, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699));
        float _793 = _699 + _474;
        float _794 = _703 + _475;
        float _795 = _707 + _476;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _760;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _764;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _768;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_760 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_764 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_768 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_474, _475, _476), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3589 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_474, _475, _476), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3622 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_474, _475, _476), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3655 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1037 = _865;
        _1038 = _864;
        _1039 = _876;
        _1040 = _875;
        _1041 = _874;
        _1042 = _886;
        _1043 = _885;
        _1044 = _884;
        _1045 = _899;
        _1046 = _898;
        _1047 = _897;
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _1036;
        _1037 = _1036;
        _1038 = _1036;
        _1039 = _1036;
        _1040 = _1036;
        _1041 = _1036;
        _1042 = _1036;
        _1043 = _1036;
        _1044 = _1036;
        _1045 = _1036;
        _1046 = _1036;
        _1047 = _1036;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_707, cbModelParam._m0[30u].z, fma(_703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _699));
        float _1078 = fma(_707, cbModelParam._m0[31u].z, fma(_703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _699));
        float _1082 = fma(_707, cbModelParam._m0[32u].z, fma(_703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _699));
        float _1105 = _699 + _474;
        float _1106 = _703 + _475;
        float _1107 = _707 + _476;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_474, _475, _476), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3718 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_474, _475, _476), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3751 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_474, _475, _476), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3784 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1036;
        _1344 = _1036;
        _1345 = _1036;
        _1346 = _1036;
        _1347 = _1036;
        _1348 = _1036;
        _1349 = _1036;
        _1350 = _1036;
        _1351 = _1036;
        _1352 = _1036;
        _1353 = _1036;
        _1354 = _1036;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1048)) + _1048;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1049)) + _1049;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1050)) + _1050;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _646 * 0.5;
    float _1412 = _647 * 0.5;
    float _1413 = _648 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1035, _1039, _1042, _1045));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _477);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_707, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_707, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_707, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_648, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646));
        float _1543 = fma(_648, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646));
        float _1546 = fma(_648, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1574 = frontier_phi_19_17_ladder;
        }
        float _1776;
        if (_1543 > 0.0)
        {
            _1776 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1776 = frontier_phi_28_24_ladder;
        }
        float _2019;
        if (_1546 > 0.0)
        {
            _2019 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2019 = frontier_phi_40_35_ladder;
        }
        float _2021 = isnan(_1776) ? _1574 : (isnan(_1574) ? _1776 : min(_1574, _1776));
        float _2022 = isnan(_2019) ? _2021 : (isnan(_2021) ? _2019 : min(_2021, _2019));
        float _2026 = (_2022 * _1540) + _1529;
        float _2027 = (_2022 * _1543) + _1533;
        float _2028 = (_2022 * _1546) + _1537;
        float _2029 = _2022 * 9.9999997473787516355514526367188e-05;
        float _2031 = (-1.0) - _2029;
        float _2033 = _2029 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2028 > _2033) || ((_2028 < _2031) || ((_2027 > _2033) || ((_2027 < _2031) || ((_2026 < _2031) || (_2026 > _2033))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2028, cbModelParam._m0[9u].z, fma(_2027, cbModelParam._m0[9u].y, _2026 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2028, cbModelParam._m0[10u].z, fma(_2027, cbModelParam._m0[10u].y, _2026 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2028, cbModelParam._m0[11u].z, fma(_2027, cbModelParam._m0[11u].y, _2026 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_18_40_ladder = _2152.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2152.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2152.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_18_40_ladder_2;
        _1564 = frontier_phi_18_40_ladder_1;
        _1566 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_646, _647, _648), _1480);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _477);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_707, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_707, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_707, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_648, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646));
        float _1640 = fma(_648, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646));
        float _1643 = fma(_648, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646));
        float _1781;
        if (_1637 > 0.0)
        {
            _1781 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1781 = frontier_phi_30_26_ladder;
        }
        float _2046;
        if (_1640 > 0.0)
        {
            _2046 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2046 = frontier_phi_42_37_ladder;
        }
        float _2251;
        if (_1643 > 0.0)
        {
            _2251 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2251 = frontier_phi_51_48_ladder;
        }
        float _2253 = isnan(_2046) ? _1781 : (isnan(_1781) ? _2046 : min(_1781, _2046));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1637) + _1626;
        float _2259 = (_2254 * _1640) + _1630;
        float _2260 = (_2254 * _1643) + _1634;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2261;
        float _2264 = _2261 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2260 > _2264) || ((_2260 < _2262) || ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 < _2262) || (_2258 > _2264))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2260, cbModelParam._m0[17u].z, fma(_2259, cbModelParam._m0[17u].y, _2258 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2260, cbModelParam._m0[18u].z, fma(_2259, cbModelParam._m0[18u].y, _2258 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2260, cbModelParam._m0[19u].z, fma(_2259, cbModelParam._m0[19u].y, _2258 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_27_51_ladder = _2459.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2459.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2459.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_27_51_ladder_2;
        _1664 = frontier_phi_27_51_ladder_1;
        _1666 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_646, _647, _648), _1571);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1678 = ((((1.0 - _667) * ((_654 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_667 * _654)) * _638;
    float _1679 = _1678 * ((cbModelParam._m0[1u].w * (_1662 - _1562)) + _1562);
    float _1680 = _1678 * ((cbModelParam._m0[1u].w * (_1664 - _1564)) + _1564);
    float _1681 = _1678 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1710 = _638 + (-1.0);
    float _1715 = (cbLight._m0[_1703].x * _1710) + 1.0;
    float _1716 = (cbLight._m0[_1703].y * _1710) + 1.0;
    float _1717 = (cbLight._m0[_1703].z * _1710) + 1.0;
    float _1718 = (cbLight._m0[_1703].w * _1710) + 1.0;
    uint _1719 = _1702 + 5u;
    float _1725 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1729 = _1702 + 4u;
    float _1735 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1739 = _1702 | 1u;
    float _1750 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_474, _475, _476));
    float _1753 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_474, _475, _476));
    float _3920 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _3931 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1758 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1760 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1767 = ((cbLight._m0[_1719].x * _1725) * _1760) + ((cbLight._m0[_1729].x * _1735) * _1758);
    float _1768 = ((_1725 * cbLight._m0[_1719].y) * _1760) + ((_1735 * cbLight._m0[_1729].y) * _1758);
    float _1769 = ((_1725 * cbLight._m0[_1719].z) * _1760) + ((_1735 * cbLight._m0[_1729].z) * _1758);
    uvec4 _1773 = floatBitsToUint(cbLight._m0[_1702 + 12u]);
    bool _1775 = _1773.x == 0u;
    float _1786;
    float _1788;
    float _1790;
    if (_1775)
    {
        _1786 = _1767;
        _1788 = _1768;
        _1790 = _1769;
    }
    else
    {
        uint _1794 = _1702 + 6u;
        float _1810 = (dot(vec3(cbLight._m0[_1702 + 2u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _1811 = _1810 * _1810;
        float _3942 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1813 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1786 = (((cbLight._m0[_1794].x * 0.3183098733425140380859375) * _1812) * _1813) + _1767;
        _1788 = (((cbLight._m0[_1794].y * 0.3183098733425140380859375) * _1812) * _1813) + _1768;
        _1790 = (((cbLight._m0[_1794].z * 0.3183098733425140380859375) * _1812) * _1813) + _1769;
    }
    bool _1793 = _1773.y == 0u;
    float _1831;
    float _1833;
    float _1835;
    if (_1793)
    {
        _1831 = _1786;
        _1833 = _1788;
        _1835 = _1790;
    }
    else
    {
        uint _1990 = _1702 + 7u;
        float _2006 = (dot(vec3(cbLight._m0[_1702 + 3u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _3958 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2009 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1831 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1786;
        _1833 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1788;
        _1835 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1790;
    }
    uint _1838 = _1702 + 8u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _477) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1702].x + _558;
    float _1854 = cbLight._m0[_1702].y + _559;
    float _1855 = cbLight._m0[_1702].z + _560;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1702].xyz));
    float _3974 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _1867 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1868 = dot(vec3(_474, _475, _476), vec3(_1860, _1861, _1862));
    float _3996 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1860, _1861, _1862));
    float _4007 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1852 * _1852;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1892 = 1.0 - _1852;
    float _1903 = (0.5 / (((_1867 * ((_1866 * _1892) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1892) + _1852) * _1866))) * _1866;
    float _4018 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    uint _1916 = _1702 + 9u;
    float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _477) * 0.949999988079071044921875);
    float _1928 = _1927 * _1927;
    float _1929 = cbLight._m0[_1739].x + _558;
    float _1930 = cbLight._m0[_1739].y + _559;
    float _1931 = cbLight._m0[_1739].z + _560;
    float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
    float _1936 = _1935 * _1929;
    float _1937 = _1935 * _1930;
    float _1938 = _1935 * _1931;
    float _1939 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1739].xyz));
    float _4029 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1943 = dot(vec3(_474, _475, _476), vec3(_1936, _1937, _1938));
    float _4040 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1936, _1937, _1938));
    float _4051 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1951 = _1928 * _1928;
    float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
    float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1965 = 1.0 - _1928;
    float _1975 = (0.5 / (((_1867 * ((_1942 * _1965) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1965) + _1928) * _1942))) * _1942;
    float _4062 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
    float _1987 = (((_1964 * cbLight._m0[_1916].x) * _1977) * _1725) + (((_1891 * cbLight._m0[_1838].x) * _1905) * _1735);
    float _1988 = (((_1964 * cbLight._m0[_1916].y) * _1977) * _1725) + (((_1891 * cbLight._m0[_1838].y) * _1905) * _1735);
    float _1989 = (((_1964 * cbLight._m0[_1916].z) * _1977) * _1725) + (((_1891 * cbLight._m0[_1838].z) * _1905) * _1735);
    float _2051;
    float _2053;
    float _2055;
    if (_1775)
    {
        _2051 = _1987;
        _2053 = _1988;
        _2055 = _1989;
    }
    else
    {
        uint _2057 = _1702 + 2u;
        uint _2061 = _1702 + 10u;
        float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _477) * 0.949999988079071044921875);
        float _2076 = _2075 * _2075;
        float _2077 = cbLight._m0[_2057].x + _558;
        float _2078 = cbLight._m0[_2057].y + _559;
        float _2079 = cbLight._m0[_2057].z + _560;
        float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
        float _2084 = _2083 * _2077;
        float _2085 = _2083 * _2078;
        float _2086 = _2083 * _2079;
        float _2087 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2057].xyz));
        float _4073 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2091 = dot(vec3(_474, _475, _476), vec3(_2084, _2085, _2086));
        float _4084 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2095 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2084, _2085, _2086));
        float _4095 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2099 = _2076 * _2076;
        float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
        float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2113 = 1.0 - _2076;
        float _2123 = (0.5 / (((_1867 * ((_2090 * _2113) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2113) + _2076) * _2090))) * _2090;
        float _4106 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2125 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
        float _2126 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2051 = (((_2112 * cbLight._m0[_2061].x) * _2125) * _2126) + _1987;
        _2053 = (((_2112 * cbLight._m0[_2061].y) * _2125) * _2126) + _1988;
        _2055 = (((_2112 * cbLight._m0[_2061].z) * _2125) * _2126) + _1989;
    }
    float _2161;
    float _2163;
    float _2165;
    if (_1793)
    {
        _2161 = _2051;
        _2163 = _2053;
        _2165 = _2055;
    }
    else
    {
        uint _2172 = _1702 + 3u;
        uint _2176 = _1702 + 11u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _477) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _558;
        float _2193 = cbLight._m0[_2172].y + _559;
        float _2194 = cbLight._m0[_2172].z + _560;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2172].xyz));
        float _4122 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2206 = dot(vec3(_474, _475, _476), vec3(_2199, _2200, _2201));
        float _4133 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4144 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2228 = 1.0 - _2191;
        float _2238 = (0.5 / (((_1867 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2228) + _2191) * _2205))) * _2205;
        float _4155 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2161 = (((_2227 * cbLight._m0[_2176].x) * _2240) * _2241) + _2051;
        _2163 = (((_2227 * cbLight._m0[_2176].y) * _2240) * _2241) + _2053;
        _2165 = (((_2227 * cbLight._m0[_2176].z) * _2240) * _2241) + _2055;
    }
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    if (_1700.y == 0u)
    {
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2316;
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2316;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2316;
        uvec4 _2331 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2332 = _2331.x;
        uint _2343 = uint((float(_2331.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _2332))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _2332)));
        float _2353 = (log2(_2319 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2354 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        uint _2357 = uint(isnan(14.0) ? _2354 : (isnan(_2354) ? 14.0 : min(_2354, 14.0)));
        uvec4 _2362 = texelFetch(g_lightClusterGridBuffer, int(((_2357 << 2u) + (_2343 << 6u)) >> 2u));
        uint _2363 = _2362.x;
        uint _2364 = _2331.z;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        if (((((1u << ((_2364 >> 4u) & 15u)) + 4294967295u) & _2363) == 0u) || ((_2364 & 240u) == 0u))
        {
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
        }
        else
        {
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2475;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            uint _2623 = 0u;
            uint _2632;
            bool _2633;
            for (;;)
            {
                _2632 = texelFetch(g_lightClassification, int((((_2357 << 5u) + (_2343 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                _2633 = _2632 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2633)
                {
                    frontier_phi_68_pred = _2617;
                    frontier_phi_68_pred_1 = _2622;
                    frontier_phi_68_pred_2 = _2621;
                    frontier_phi_68_pred_3 = _2620;
                    frontier_phi_68_pred_4 = _2619;
                    frontier_phi_68_pred_5 = _2618;
                }
                else
                {
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    uint _2768;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2621;
                    _2767 = _2622;
                    _2768 = _2632;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    for (;;)
                    {
                        uint _2772 = uint(findLSB(_2768)) + (_2623 << 5u);
                        uint _2769 = (_2768 + 4294967295u) & _2768;
                        uint _2774 = _2772 * 48u;
                        vec4 _2788 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2794 = (_2772 * 48u) + 4u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2813 = (_2772 * 48u) + 8u;
                        vec3 _2824 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x));
                        float _2828 = _2788.x - _2317;
                        float _2829 = _2788.y - _2318;
                        float _2830 = _2788.z - _2319;
                        float _2831 = dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830));
                        float _2834 = inversesqrt(_2831);
                        float _2835 = _2834 * _2828;
                        float _2836 = _2834 * _2829;
                        float _2837 = _2834 * _2830;
                        float _2838 = dot(vec3(_594, _597, _600), vec3(_2835, _2836, _2837));
                        float _2843 = 1.0 - (_2831 * _2788.w);
                        float _4181 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2845 = sqrt(_2831) * _2807.w;
                        float _2848 = 1.39999997615814208984375 / (_2845 + 1.39999997615814208984375);
                        float _2849 = _2848 * _2848;
                        float _2852 = ((1.0 - _2849) * _2838) + _2849;
                        float _2855 = _2845 * _2845;
                        float _2859 = ((isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))) * _2844) / ((_2855 * 0.699999988079071044921875) + 1.0);
                        float _2863 = (-0.0) - _2317;
                        float _2864 = (-0.0) - _2318;
                        float _2865 = (-0.0) - _2319;
                        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2880 = exp2(log2(1.0 / ((_2855 * 3.5) + 5.0)) * 0.25);
                        float _2881 = 1.0 - _654;
                        float _2888 = sqrt(1.0 - ((1.0 - (_2881 * _2881)) * (1.0 - (_2880 * _2880))));
                        float _2889 = _2888 * _2888;
                        float _2890 = _2889 * _2889;
                        float _2891 = _2870 + _2835;
                        float _2892 = _2871 + _2836;
                        float _2893 = _2872 + _2837;
                        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
                        float _2901 = dot(vec3(_594, _597, _600), vec3(_2870, _2871, _2872));
                        float _4197 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2904 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2905 = dot(vec3(_594, _597, _600), vec3(_2897 * _2891, _2897 * _2892, _2897 * _2893));
                        float _4208 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2908 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2912 = ((_2908 * _2908) * (_2890 + (-1.0))) + 1.0;
                        float _2913 = _2848 * _2889;
                        float _2914 = _2913 * _2913;
                        float _2917 = ((1.0 - _2914) * _2838) + _2914;
                        float _4219 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2918 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2919 = 1.0 - _2889;
                        float _2929 = (0.5 / (((_2918 * ((_2904 * _2919) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2918 * _2919) + _2889) * _2904))) * _2918;
                        float _4230 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2940 = (((_2890 * 3.1415927410125732421875) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) / ((_2912 * _2912) * ((_2855 * 2.1991131305694580078125) + 3.141590118408203125))) * _2844;
                        _2692 = (_2859 * _2807.x) + _2765;
                        _2693 = (_2859 * _2807.y) + _2766;
                        _2694 = (_2859 * _2807.z) + _2767;
                        _2689 = (_2940 * _2824.x) + _2762;
                        _2690 = (_2940 * _2824.y) + _2763;
                        _2691 = (_2940 * _2824.z) + _2764;
                        if (_2769 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2693;
                            _2767 = _2694;
                            _2768 = _2769;
                        }
                    }
                    frontier_phi_68_pred = _2689;
                    frontier_phi_68_pred_1 = _2694;
                    frontier_phi_68_pred_2 = _2693;
                    frontier_phi_68_pred_3 = _2692;
                    frontier_phi_68_pred_4 = _2691;
                    frontier_phi_68_pred_5 = _2690;
                }
                _2465 = frontier_phi_68_pred;
                _2475 = frontier_phi_68_pred_1;
                _2473 = frontier_phi_68_pred_2;
                _2471 = frontier_phi_68_pred_3;
                _2469 = frontier_phi_68_pred_4;
                _2467 = frontier_phi_68_pred_5;
                uint _2624 = _2623 + 1u;
                if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2617 = _2465;
                    _2618 = _2467;
                    _2619 = _2469;
                    _2620 = _2471;
                    _2621 = _2473;
                    _2622 = _2475;
                    _2623 = _2624;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
        }
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.z;
        uint _2481 = (_2479 >> 8u) & 15u;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((4294967295u << _2481) & _2363) == 0u)
        {
            _2585 = _2464;
            _2587 = _2466;
            _2589 = _2468;
            _2591 = _2470;
            _2593 = _2472;
            _2595 = _2474;
        }
        else
        {
            float _2610 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
            float _2611 = _2610 * _2317;
            float _2612 = _2610 * _2318;
            float _2613 = _2610 * _2319;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2481 < ((_2479 >> 12u) & 15u))
            {
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2596;
                float _2745 = _2464;
                float _2746 = _2466;
                float _2747 = _2468;
                float _2748 = _2470;
                float _2749 = _2472;
                float _2750 = _2474;
                uint _2751 = _2481;
                uint _2760;
                bool _2761;
                for (;;)
                {
                    _2760 = texelFetch(g_lightClassification, int((((_2357 << 5u) + (_2343 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                    _2761 = _2760 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2761)
                    {
                        frontier_phi_79_pred = _2750;
                        frontier_phi_79_pred_1 = _2749;
                        frontier_phi_79_pred_2 = _2748;
                        frontier_phi_79_pred_3 = _2747;
                        frontier_phi_79_pred_4 = _2746;
                        frontier_phi_79_pred_5 = _2745;
                    }
                    else
                    {
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        float _2970 = _2748;
                        float _2971 = _2749;
                        float _2972 = _2750;
                        uint _2973 = _2760;
                        uint _2974;
                        vec4 _2999;
                        float _3000;
                        vec4 _3015;
                        vec3 _3027;
                        vec4 _3042;
                        vec4 _3058;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2984 = ((_2751 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2973));
                            _2974 = (_2973 + 4294967295u) & _2973;
                            uint _2986 = _2984 * 40u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            _3000 = _2999.w;
                            uint _3002 = (_2984 * 40u) + 4u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3017 = (_2984 * 40u) + 8u;
                            _3027 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x));
                            uint _3029 = (_2984 * 40u) + 16u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2984 * 40u) + 20u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_2984 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2984 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_2319, _3092.z, fma(_2318, _3092.y, _3092.x * _2317)) + _3092.w;
                            _3105 = !((fma(_2319, _3073.z, fma(_2318, _3073.y, _3073.x * _2317)) + _3073.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2999.x - _2317;
                                float _3133 = _2999.y - _2318;
                                float _3134 = _2999.z - _2319;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_3000 * _3000));
                                float _4241 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3150 = sqrt(_3135) * _3015.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3156 = ((1.0 - _3153) * dot(vec3(_3139, _3140, _3141), vec3(_594, _597, _600))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_2319, _3042.z, fma(_2318, _3042.y, _3042.x * _2317)) + _3042.w) / _3104;
                                float _3164 = (fma(_2319, _3058.z, fma(_2318, _3058.y, _3058.x * _2317)) + _3058.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4257 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3182 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3183 = 1.0 - _654;
                                float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                                float _3191 = _3190 * _3190;
                                float _3192 = _3191 * _3191;
                                float _3193 = _3139 - _2611;
                                float _3194 = _3140 - _2612;
                                float _3195 = _3141 - _2613;
                                float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                                float _3203 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2611, (-0.0) - _2612, (-0.0) - _2613));
                                float _4268 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3206 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3207 = dot(vec3(_594, _597, _600), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                                float _4279 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                                float _3215 = _3152 * _3191;
                                float _3216 = _3215 * _3215;
                                float _3222 = ((1.0 - _3216) * dot(vec3(_594, _597, _600), vec3(_3139, _3140, _3141))) + _3216;
                                float _4290 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3224 = 1.0 - _3191;
                                float _3234 = (0.5 / (((_3223 * ((_3206 * _3224) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3191) * _3206))) * _3223;
                                float _4301 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3244 = (_3169 * _3146) * (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_3214 * _3214) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3170 * _3015.y;
                                frontier_phi_85_pred_1 = _3170 * _3015.x;
                                frontier_phi_85_pred_2 = _3244 * _3027.z;
                                frontier_phi_85_pred_3 = _3244 * _3027.y;
                                frontier_phi_85_pred_4 = _3244 * _3027.x;
                                frontier_phi_85_pred_5 = _3170 * _3015.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3252 = frontier_phi_85_pred;
                            _3251 = frontier_phi_85_pred_1;
                            _3250 = frontier_phi_85_pred_2;
                            _3249 = frontier_phi_85_pred_3;
                            _3248 = frontier_phi_85_pred_4;
                            _3253 = frontier_phi_85_pred_5;
                            _2957 = _3251 + _2970;
                            _2958 = _3252 + _2971;
                            _2959 = _3253 + _2972;
                            _2954 = _3248 + _2967;
                            _2955 = _3249 + _2968;
                            _2956 = _3250 + _2969;
                            if (_2974 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2974;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2959;
                        frontier_phi_79_pred_1 = _2958;
                        frontier_phi_79_pred_2 = _2957;
                        frontier_phi_79_pred_3 = _2956;
                        frontier_phi_79_pred_4 = _2955;
                        frontier_phi_79_pred_5 = _2954;
                    }
                    _2596 = frontier_phi_79_pred;
                    _2594 = frontier_phi_79_pred_1;
                    _2592 = frontier_phi_79_pred_2;
                    _2590 = frontier_phi_79_pred_3;
                    _2588 = frontier_phi_79_pred_4;
                    _2586 = frontier_phi_79_pred_5;
                    uint _2752 = _2751 + 1u;
                    if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2745 = _2586;
                        _2746 = _2588;
                        _2747 = _2590;
                        _2748 = _2592;
                        _2749 = _2594;
                        _2750 = _2596;
                        _2751 = _2752;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2590;
                frontier_phi_60_61_ladder_1 = _2596;
                frontier_phi_60_61_ladder_2 = _2594;
                frontier_phi_60_61_ladder_3 = _2592;
                frontier_phi_60_61_ladder_4 = _2588;
                frontier_phi_60_61_ladder_5 = _2586;
            }
            else
            {
                frontier_phi_60_61_ladder = _2468;
                frontier_phi_60_61_ladder_1 = _2474;
                frontier_phi_60_61_ladder_2 = _2472;
                frontier_phi_60_61_ladder_3 = _2470;
                frontier_phi_60_61_ladder_4 = _2466;
                frontier_phi_60_61_ladder_5 = _2464;
            }
            _2585 = frontier_phi_60_61_ladder_5;
            _2587 = frontier_phi_60_61_ladder_4;
            _2589 = frontier_phi_60_61_ladder;
            _2591 = frontier_phi_60_61_ladder_3;
            _2593 = frontier_phi_60_61_ladder_2;
            _2595 = frontier_phi_60_61_ladder_1;
        }
        float _2600 = isnan(1.0) ? _638 : (isnan(_638) ? 1.0 : min(_638, 1.0));
        _2376 = (_2600 * _2591) + _1831;
        _2378 = (_2600 * _2593) + _1833;
        _2380 = (_2600 * _2595) + _1835;
        _2382 = ((_2585 * 0.039999999105930328369140625) * _2600) + _2161;
        _2384 = ((_2587 * 0.039999999105930328369140625) * _2600) + _2163;
        _2386 = ((_2589 * 0.039999999105930328369140625) * _2600) + _2165;
    }
    else
    {
        _2376 = _1831;
        _2378 = _1833;
        _2380 = _1835;
        _2382 = _2161;
        _2384 = _2163;
        _2386 = _2165;
    }
    float _4317 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4328 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4339 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _2403 = ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2376 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _638))) + ((_2382 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1469)) * cbPerFrame._m0[3u].x);
    float _2404 = ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2378 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _638))) + ((_2384 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1469)) * cbPerFrame._m0[3u].x);
    float _2405 = ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2380 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _638))) + ((_2386 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1469)) * cbPerFrame._m0[3u].x);
    uint _2406 = _226 + 6u;
    float _2414 = _575 / cbSceneParam._m0[86u].x;
    float _2415 = _576 / cbSceneParam._m0[86u].y;
    vec4 _2429 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2414, _2415, (log2((isnan(cbSceneParam._m0[77u].w) ? _499 : (isnan(_499) ? cbSceneParam._m0[77u].w : min(_499, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2431 = _2429.x;
    float _2432 = _2429.y;
    float _2433 = _2429.z;
    float _2434 = _2429.w;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_499 > cbSceneParam._m0[78u].w)
    {
        float _2489 = isnan(_499) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _499 : min(cbSceneParam._m0[80u].w, _499));
        float _2490 = _2489 / _499;
        float _2501 = _2490 * _551;
        float _2502 = _552 * _2490;
        float _2503 = (-0.0) - _2502;
        float _2505 = _2490 * _553;
        float _2507 = (cbSceneParam._m0[77u].w * _2503) / _2489;
        float _2508 = _2507 + cbSceneParam._m0[79u].w;
        float _2509 = cbSceneParam._m0[79u].w - _2502;
        float _2515 = sqrt(((_2501 * _2501) + (_2502 * _2502)) + (_2505 * _2505));
        float _2518 = (1.0 - (cbSceneParam._m0[77u].w / _2489)) * _2515;
        float _2523 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2525 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2702;
        if (abs((_2503 - _2507) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2702 = ((((_2508 > 0.0) ? exp2(_2523 * _2508) : (2.0 - exp2(_2525 * _2508))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2518;
        }
        else
        {
            float _2646 = 1.0 / cbSceneParam._m0[80u].x;
            float _2647 = isnan(_2509) ? _2508 : (isnan(_2508) ? _2509 : max(_2508, _2509));
            float _2648 = isnan(_2509) ? _2508 : (isnan(_2508) ? _2509 : min(_2508, _2509));
            float _2657 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : min(_2647, 0.0));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            _2702 = ((abs(_2515 / _2503) * cbSceneParam._m0[80u].y) * ((((_2657 - _2658) * 2.0) - ((exp2(_2523 * (isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0)))) - exp2(_2523 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))))) * _2646)) - ((exp2(_2525 * _2657) - exp2(_2525 * _2658)) * _2646))) + (_2518 * cbSceneParam._m0[80u].z);
        }
        vec4 _2704 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2414, _2415, 1.0), 0.0);
        float _2713 = exp2((_2702 * (-1.44269502162933349609375)) * (1.0 - _2704.w));
        float _2714 = log2(_2713);
        float _2730 = log2(_2434);
        _2527 = (exp2(_2730 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].x)) * _2704.x) / cbSceneParam._m0[78u].x)) + _2431;
        _2529 = (exp2(_2730 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].y)) * _2704.y) / cbSceneParam._m0[78u].y)) + _2432;
        _2531 = (exp2(_2730 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].z)) * _2704.z) / cbSceneParam._m0[78u].z)) + _2433;
        _2533 = _2713 * _2434;
    }
    else
    {
        _2527 = _2431;
        _2529 = _2432;
        _2531 = _2433;
        _2533 = _2434;
    }
    bool _2740;
    vec4 _2543;
    vec4 _2565;
    float _2567;
    float _2571;
    float _2572;
    float _2573;
    float _2574;
    bool _2584;
    for (;;)
    {
        _2543 = cbMatDynParam._m0[0u];
        float _2545 = roundEven(_2543.y);
        bool _2546 = _2545 == 3.0;
        float _2547 = log2(_2533);
        float _2554 = exp2(_2547 * cbSceneParam._m0[78u].x) * _2403;
        float _2555 = exp2(_2547 * cbSceneParam._m0[78u].y) * _2404;
        float _2556 = exp2(_2547 * cbSceneParam._m0[78u].z) * _2405;
        float _2563 = _564 + (-0.5);
        _2565 = cbMtdParam._m0[1u];
        _2567 = _2565.y * _2563;
        float _2570 = (_2545 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2571 = _2570 * (_2546 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2527)));
        _2572 = _2570 * (_2546 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2529)));
        _2573 = _2570 * (_2546 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2531)));
        _2574 = _2563 * 0.999000012874603271484375;
        _2584 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2584)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2574) < 0.5)
            {
                _2740 = true;
                break;
            }
        }
        uint _2681 = _613 + uint(_2543.w);
        if ((cbInstanceData._m0[_2681].w < 1.0) && ((cbInstanceData._m0[_2681].w + _2574) < 0.5))
        {
            _2740 = true;
            break;
        }
        if ((_2567 + 1.0) < _2565.x)
        {
            _2740 = true;
            break;
        }
        _2740 = false;
        break;
    }
    float _2945;
    if (_2740)
    {
        discard_state = true;
        _2945 = 0.0;
    }
    else
    {
        _2945 = cbInstanceData._m0[_2406].w;
    }
    SV_Target.x = _2571;
    SV_Target.y = _2572;
    SV_Target.z = _2573;
    SV_Target.w = _2945;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2406].w;
    discard_exit();
}


