#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1021;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _349 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _366 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _349) * cbMtdParam._m0[24u].x) + _349) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3352 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _374 = (_367 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _375 = (_367 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _376 = (_367 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    float _435 = _431.z;
    float _444 = ((_414.z - _435) * _367) + _435;
    float _447 = ((((_414.x - _433) * _367) + _433) * 2.0) + (-1.0);
    float _448 = ((((_414.y - _434) * _367) + _434) * 2.0) + (-1.0);
    float _449 = dot(vec2(_447, _448), vec2(_447, _448));
    float _3363 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    float _459 = _447 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_389.x * 2.0) + (-1.0)));
    float _460 = _448 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_389.y * 2.0) + (-1.0)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _480 = (((_389.z - _444) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _444;
    float _485 = cbMtdParam._m0[22u].x + _473.w;
    float _488 = fma(_454, _217 * NORMAL.x, fma(_460, _224 * TANGENT.x, (_210 * _202) * _459));
    float _491 = fma(_454, _217 * NORMAL.y, fma(_460, _224 * TANGENT.y, (_210 * _203) * _459));
    float _494 = fma(_454, _217 * NORMAL.z, fma(_460, _224 * TANGENT.z, (_210 * _204) * _459));
    float _498 = inversesqrt(dot(vec3(_488, _491, _494), vec3(_488, _491, _494)));
    float _499 = _498 * _488;
    float _500 = _498 * _491;
    float _501 = _498 * _494;
    float _3374 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _502 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3396 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3407 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3418 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _606 = fma(_501, cbSceneParam._m0[5u].z, fma(_500, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _499));
    float _609 = fma(_501, cbSceneParam._m0[6u].z, fma(_500, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _499));
    float _612 = fma(_501, cbSceneParam._m0[7u].z, fma(_500, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _499));
    uint _626 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _632 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_626].x;
    float _633 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_626].y;
    float _634 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_626].z;
    float _3429 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    vec4 _646 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _650 = ((isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * TEXCOORD_5.w) * _646.x;
    float _651 = dot(vec3(_499, _500, _501), vec3(_579, _580, _581));
    float _654 = _651 * 2.0;
    float _658 = (_654 * _499) - _579;
    float _659 = (_654 * _500) - _580;
    float _660 = (_654 * _501) - _581;
    float _664 = abs(dot(vec3(_579, _580, _581), vec3(_499, _500, _501)));
    float _3462 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _666 = sqrt(_502);
    float _679 = exp2((_666 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_666 * 3.0));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1020;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _745 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _749 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _753 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _778 = _711 + _499;
        float _779 = _715 + _500;
        float _780 = _719 + _501;
        float _790 = fma(_780, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778)) - _745;
        float _791 = fma(_780, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778)) - _749;
        float _792 = fma(_780, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778)) - _753;
        float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
        float _809 = ((_796 * _790) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_745 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_796 * _791) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_749 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_796 * _792) / cbModelParam._m0[34u].z) + ((((((_753 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        float _848 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_814.x + (-0.5));
        float _850 = _848 * (_814.y + (-0.5));
        float _851 = _848 * (_814.z + (-0.5));
        float _858 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_821.x + (-0.5));
        float _860 = _858 * (_821.y + (-0.5));
        float _861 = _858 * (_821.z + (-0.5));
        float _868 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_828.x + (-0.5));
        float _870 = _868 * (_828.y + (-0.5));
        float _871 = _868 * (_828.z + (-0.5));
        float _878 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_835.x + (-0.5));
        float _880 = _878 * (_835.y + (-0.5));
        float _881 = _878 * (_835.z + (-0.5));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = _849 * 0.5;
        float _886 = _859 * 0.5;
        float _887 = _869 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _902 = (dot(vec3(_499, _500, _501), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _912 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3510 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_914 + 1.0))) + _919) * _882;
        float _929 = _850 * 0.5;
        float _930 = _860 * 0.5;
        float _931 = _870 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_499, _500, _501), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3543 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_956 + 1.0))) + _961) * _883;
        float _971 = _851 * 0.5;
        float _972 = _861 * 0.5;
        float _973 = _871 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_499, _500, _501), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3576 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_998 + 1.0))) + _1003) * _884;
        _1020 = _851;
        _1022 = _850;
        _1023 = _849;
        _1024 = _861;
        _1025 = _860;
        _1026 = _859;
        _1027 = _871;
        _1028 = _870;
        _1029 = _869;
        _1030 = _884;
        _1031 = _883;
        _1032 = _882;
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
    }
    else
    {
        _1020 = _1021;
        _1022 = _1021;
        _1023 = _1021;
        _1024 = _1021;
        _1025 = _1021;
        _1026 = _1021;
        _1027 = _1021;
        _1028 = _1021;
        _1029 = _1021;
        _1030 = _1021;
        _1031 = _1021;
        _1032 = _1021;
        _1033 = 0.0;
        _1034 = 0.0;
        _1035 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1063 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1067 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1090 = _711 + _499;
        float _1091 = _715 + _500;
        float _1092 = _719 + _501;
        float _1102 = fma(_1092, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1059 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1063 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[35u].z) + ((((((_1067 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_499, _500, _501), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3639 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_499, _500, _501), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3672 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_499, _500, _501), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3705 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1021;
        _1329 = _1021;
        _1330 = _1021;
        _1331 = _1021;
        _1332 = _1021;
        _1333 = _1021;
        _1334 = _1021;
        _1335 = _1021;
        _1336 = _1021;
        _1337 = _1021;
        _1338 = _1021;
        _1339 = _1021;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1033)) + _1033;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1034)) + _1034;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1035)) + _1035;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _658 * 0.5;
    float _1397 = _659 * 0.5;
    float _1398 = _660 * 0.5;
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1020, _1024, _1027, _1030));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _502);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1464 : min(cbModelParam._m0[25u].z, _1464));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1514 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1518 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1522 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1525 = fma(_660, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658));
        float _1528 = fma(_660, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658));
        float _1531 = fma(_660, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658));
        float _1559;
        if (_1525 > 0.0)
        {
            _1559 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1559 = frontier_phi_14_12_ladder;
        }
        float _1782;
        if (_1528 > 0.0)
        {
            _1782 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1782 = frontier_phi_23_19_ladder;
        }
        float _2028;
        if (_1531 > 0.0)
        {
            _2028 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2028 = frontier_phi_35_30_ladder;
        }
        float _2030 = isnan(_1782) ? _1559 : (isnan(_1559) ? _1782 : min(_1559, _1782));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1525) + _1514;
        float _2036 = (_2031 * _1528) + _1518;
        float _2037 = (_2031 * _1531) + _1522;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2038;
        float _2042 = _2038 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 > _2042) || ((_2036 < _2040) || ((_2035 < _2040) || (_2035 > _2042))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2037, cbModelParam._m0[9u].z, fma(_2036, cbModelParam._m0[9u].y, _2035 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2037, cbModelParam._m0[10u].z, fma(_2036, cbModelParam._m0[10u].y, _2035 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2037, cbModelParam._m0[11u].z, fma(_2036, cbModelParam._m0[11u].y, _2035 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_13_35_ladder = _2161.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2161.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2161.x * cbModelParam._m0[1u].y;
        }
        _1547 = frontier_phi_13_35_ladder_2;
        _1549 = frontier_phi_13_35_ladder_1;
        _1551 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_658, _659, _660), _1465);
        _1547 = _1535.x * cbModelParam._m0[1u].y;
        _1549 = _1535.y * cbModelParam._m0[1u].y;
        _1551 = _1535.z * cbModelParam._m0[1u].y;
    }
    float _1555 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _502);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1555 : min(cbModelParam._m0[25u].w, _1555));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_660, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658));
        float _1625 = fma(_660, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658));
        float _1628 = fma(_660, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658));
        float _1787;
        if (_1622 > 0.0)
        {
            _1787 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1787 = frontier_phi_25_21_ladder;
        }
        float _2055;
        if (_1625 > 0.0)
        {
            _2055 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2055 = frontier_phi_37_32_ladder;
        }
        float _2260;
        if (_1628 > 0.0)
        {
            _2260 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2260 = frontier_phi_46_43_ladder;
        }
        float _2262 = isnan(_2055) ? _1787 : (isnan(_1787) ? _2055 : min(_1787, _2055));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1622) + _1611;
        float _2268 = (_2263 * _1625) + _1615;
        float _2269 = (_2263 * _1628) + _1619;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2269, cbModelParam._m0[17u].z, fma(_2268, cbModelParam._m0[17u].y, _2267 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2269, cbModelParam._m0[18u].z, fma(_2268, cbModelParam._m0[18u].y, _2267 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2269, cbModelParam._m0[19u].z, fma(_2268, cbModelParam._m0[19u].y, _2267 * cbModelParam._m0[19u].x))), _1556);
            frontier_phi_22_46_ladder = _2468.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2468.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2468.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_22_46_ladder_2;
        _1649 = frontier_phi_22_46_ladder_1;
        _1651 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_658, _659, _660), _1556);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1663 = ((((1.0 - _679) * ((_666 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_679 * _666)) * _650;
    float _1664 = _1663 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1665 = _1663 * ((cbModelParam._m0[1u].w * (_1649 - _1549)) + _1549);
    float _1666 = _1663 * ((cbModelParam._m0[1u].w * (_1651 - _1551)) + _1551);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    vec4 _1683 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_587, _588));
    float _1685 = _1683.w;
    float _1697 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1685);
    float _1698 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1685);
    float _1699 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1685);
    uvec4 _1703 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1705 = _1703.x * 14u;
    uint _1706 = _1705 + 13u;
    float _1713 = _650 + (-1.0);
    float _1718 = (cbLight._m0[_1706].x * _1713) + 1.0;
    float _1719 = (cbLight._m0[_1706].y * _1713) + 1.0;
    float _1720 = (cbLight._m0[_1706].z * _1713) + 1.0;
    float _1721 = (cbLight._m0[_1706].w * _1713) + 1.0;
    uint _1722 = _1705 + 5u;
    float _1728 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1732 = _1705 + 4u;
    float _1741 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1745 = _1705 | 1u;
    float _1756 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_499, _500, _501));
    float _1759 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_499, _500, _501));
    float _3841 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _3852 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1764 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1766 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1773 = ((cbLight._m0[_1722].x * _1728) * _1766) + (((cbLight._m0[_1732].x * _1697) * _1741) * _1764);
    float _1774 = ((_1728 * cbLight._m0[_1722].y) * _1766) + (((cbLight._m0[_1732].y * _1698) * _1741) * _1764);
    float _1775 = ((_1728 * cbLight._m0[_1722].z) * _1766) + (((cbLight._m0[_1732].z * _1699) * _1741) * _1764);
    uvec4 _1779 = floatBitsToUint(cbLight._m0[_1705 + 12u]);
    bool _1781 = _1779.x == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1781)
    {
        _1792 = _1773;
        _1794 = _1774;
        _1796 = _1775;
    }
    else
    {
        uint _1800 = _1705 + 6u;
        float _1816 = (dot(vec3(cbLight._m0[_1705 + 2u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _1817 = _1816 * _1816;
        float _3863 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1819 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1792 = (((cbLight._m0[_1800].x * 0.3183098733425140380859375) * _1818) * _1819) + _1773;
        _1794 = (((cbLight._m0[_1800].y * 0.3183098733425140380859375) * _1818) * _1819) + _1774;
        _1796 = (((cbLight._m0[_1800].z * 0.3183098733425140380859375) * _1818) * _1819) + _1775;
    }
    bool _1799 = _1779.y == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1799)
    {
        _1837 = _1792;
        _1839 = _1794;
        _1841 = _1796;
    }
    else
    {
        uint _1999 = _1705 + 7u;
        float _2015 = (dot(vec3(cbLight._m0[_1705 + 3u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _3879 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _2018 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1837 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1792;
        _1839 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1794;
        _1841 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1796;
    }
    uint _1844 = _1705 + 8u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _502) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1705].x + _579;
    float _1860 = cbLight._m0[_1705].y + _580;
    float _1861 = cbLight._m0[_1705].z + _581;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1705].xyz));
    float _3895 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _1873 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1874 = dot(vec3(_499, _500, _501), vec3(_1866, _1867, _1868));
    float _3917 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1866, _1867, _1868));
    float _3928 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1858 * _1858;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1898 = 1.0 - _1858;
    float _1909 = (0.5 / (((_1873 * ((_1872 * _1898) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1898) + _1858) * _1872))) * _1872;
    float _3939 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    uint _1925 = _1705 + 9u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _502) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1745].x + _579;
    float _1939 = cbLight._m0[_1745].y + _580;
    float _1940 = cbLight._m0[_1745].z + _581;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1745].xyz));
    float _3950 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1952 = dot(vec3(_499, _500, _501), vec3(_1945, _1946, _1947));
    float _3961 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1945, _1946, _1947));
    float _3972 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1937 * _1937;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1973 = (exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1974 = 1.0 - _1937;
    float _1984 = (0.5 / (((_1873 * ((_1951 * _1974) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1974) + _1937) * _1951))) * _1951;
    float _3983 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    float _1996 = (((_1973 * cbLight._m0[_1925].x) * _1986) * _1728) + ((((cbLight._m0[_1844].x * _1697) * _1897) * _1911) * _1741);
    float _1997 = (((_1973 * cbLight._m0[_1925].y) * _1986) * _1728) + ((((cbLight._m0[_1844].y * _1698) * _1897) * _1911) * _1741);
    float _1998 = (((_1973 * cbLight._m0[_1925].z) * _1986) * _1728) + ((((cbLight._m0[_1844].z * _1699) * _1897) * _1911) * _1741);
    float _2060;
    float _2062;
    float _2064;
    if (_1781)
    {
        _2060 = _1996;
        _2062 = _1997;
        _2064 = _1998;
    }
    else
    {
        uint _2066 = _1705 + 2u;
        uint _2070 = _1705 + 10u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _502) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _579;
        float _2087 = cbLight._m0[_2066].y + _580;
        float _2088 = cbLight._m0[_2066].z + _581;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2066].xyz));
        float _3994 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2100 = dot(vec3(_499, _500, _501), vec3(_2093, _2094, _2095));
        float _4005 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _4016 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = 1.0 - _2085;
        float _2132 = (0.5 / (((_1873 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2122) + _2085) * _2099))) * _2099;
        float _4027 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2060 = (((_2121 * cbLight._m0[_2070].x) * _2134) * _2135) + _1996;
        _2062 = (((_2121 * cbLight._m0[_2070].y) * _2134) * _2135) + _1997;
        _2064 = (((_2121 * cbLight._m0[_2070].z) * _2134) * _2135) + _1998;
    }
    float _2170;
    float _2172;
    float _2174;
    if (_1799)
    {
        _2170 = _2060;
        _2172 = _2062;
        _2174 = _2064;
    }
    else
    {
        uint _2181 = _1705 + 3u;
        uint _2185 = _1705 + 11u;
        float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _502) * 0.949999988079071044921875);
        float _2200 = _2199 * _2199;
        float _2201 = cbLight._m0[_2181].x + _579;
        float _2202 = cbLight._m0[_2181].y + _580;
        float _2203 = cbLight._m0[_2181].z + _581;
        float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
        float _2208 = _2207 * _2201;
        float _2209 = _2207 * _2202;
        float _2210 = _2207 * _2203;
        float _2211 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2181].xyz));
        float _4043 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2215 = dot(vec3(_499, _500, _501), vec3(_2208, _2209, _2210));
        float _4054 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2219 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2208, _2209, _2210));
        float _4065 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2223 = _2200 * _2200;
        float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
        float _2236 = (exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2237 = 1.0 - _2200;
        float _2247 = (0.5 / (((_1873 * ((_2214 * _2237) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2237) + _2200) * _2214))) * _2214;
        float _4076 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2170 = (((_2236 * cbLight._m0[_2185].x) * _2249) * _2250) + _2060;
        _2172 = (((_2236 * cbLight._m0[_2185].y) * _2249) * _2250) + _2062;
        _2174 = (((_2236 * cbLight._m0[_2185].z) * _2249) * _2250) + _2064;
    }
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_1703.y == 0u)
    {
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2325;
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2325;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2325;
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.x;
        uint _2352 = uint((float(_2340.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2341))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2341)));
        float _2362 = (log2(_2328 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2363 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        uint _2366 = uint(isnan(14.0) ? _2363 : (isnan(_2363) ? 14.0 : min(_2363, 14.0)));
        uvec4 _2371 = texelFetch(g_lightClusterGridBuffer, int(((_2366 << 2u) + (_2352 << 6u)) >> 2u));
        uint _2372 = _2371.x;
        uint _2373 = _2340.z;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        if (((((1u << ((_2373 >> 4u) & 15u)) + 4294967295u) & _2372) == 0u) || ((_2373 & 240u) == 0u))
        {
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
        }
        else
        {
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            uint _2624 = 0u;
            uint _2633;
            bool _2634;
            for (;;)
            {
                _2633 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                _2634 = _2633 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2634)
                {
                    frontier_phi_61_pred = _2618;
                    frontier_phi_61_pred_1 = _2623;
                    frontier_phi_61_pred_2 = _2622;
                    frontier_phi_61_pred_3 = _2621;
                    frontier_phi_61_pred_4 = _2620;
                    frontier_phi_61_pred_5 = _2619;
                }
                else
                {
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    uint _2748;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2633;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    for (;;)
                    {
                        uint _2752 = uint(findLSB(_2748)) + (_2624 << 5u);
                        uint _2749 = (_2748 + 4294967295u) & _2748;
                        uint _2754 = _2752 * 48u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2774 = (_2752 * 48u) + 4u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2793 = (_2752 * 48u) + 8u;
                        vec3 _2804 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x));
                        float _2808 = _2768.x - _2326;
                        float _2809 = _2768.y - _2327;
                        float _2810 = _2768.z - _2328;
                        float _2811 = dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810));
                        float _2814 = inversesqrt(_2811);
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2818 = dot(vec3(_606, _609, _612), vec3(_2815, _2816, _2817));
                        float _2823 = 1.0 - (_2811 * _2768.w);
                        float _4102 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2825 = sqrt(_2811) * _2787.w;
                        float _2828 = 1.39999997615814208984375 / (_2825 + 1.39999997615814208984375);
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2818) + _2829;
                        float _2835 = _2825 * _2825;
                        float _2839 = ((isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))) * _2824) / ((_2835 * 0.699999988079071044921875) + 1.0);
                        float _2843 = (-0.0) - _2326;
                        float _2844 = (-0.0) - _2327;
                        float _2845 = (-0.0) - _2328;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2860 = exp2(log2(1.0 / ((_2835 * 3.5) + 5.0)) * 0.25);
                        float _2861 = 1.0 - _666;
                        float _2868 = sqrt(1.0 - ((1.0 - (_2861 * _2861)) * (1.0 - (_2860 * _2860))));
                        float _2869 = _2868 * _2868;
                        float _2870 = _2869 * _2869;
                        float _2871 = _2850 + _2815;
                        float _2872 = _2851 + _2816;
                        float _2873 = _2852 + _2817;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2881 = dot(vec3(_606, _609, _612), vec3(_2850, _2851, _2852));
                        float _4118 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2885 = dot(vec3(_606, _609, _612), vec3(_2877 * _2871, _2877 * _2872, _2877 * _2873));
                        float _4129 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2888 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2892 = ((_2888 * _2888) * (_2870 + (-1.0))) + 1.0;
                        float _2893 = _2828 * _2869;
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2818) + _2894;
                        float _4140 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2899 = 1.0 - _2869;
                        float _2909 = (0.5 / (((_2898 * ((_2884 * _2899) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _2899) + _2869) * _2884))) * _2898;
                        float _4151 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2920 = (((_2870 * 3.1415927410125732421875) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) / ((_2892 * _2892) * ((_2835 * 2.1991131305694580078125) + 3.141590118408203125))) * _2824;
                        _2677 = (_2839 * _2787.x) + _2745;
                        _2678 = (_2839 * _2787.y) + _2746;
                        _2679 = (_2839 * _2787.z) + _2747;
                        _2674 = (_2920 * _2804.x) + _2742;
                        _2675 = (_2920 * _2804.y) + _2743;
                        _2676 = (_2920 * _2804.z) + _2744;
                        if (_2749 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2749;
                        }
                    }
                    frontier_phi_61_pred = _2674;
                    frontier_phi_61_pred_1 = _2679;
                    frontier_phi_61_pred_2 = _2678;
                    frontier_phi_61_pred_3 = _2677;
                    frontier_phi_61_pred_4 = _2676;
                    frontier_phi_61_pred_5 = _2675;
                }
                _2474 = frontier_phi_61_pred;
                _2484 = frontier_phi_61_pred_1;
                _2482 = frontier_phi_61_pred_2;
                _2480 = frontier_phi_61_pred_3;
                _2478 = frontier_phi_61_pred_4;
                _2476 = frontier_phi_61_pred_5;
                uint _2625 = _2624 + 1u;
                if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2618 = _2474;
                    _2619 = _2476;
                    _2620 = _2478;
                    _2621 = _2480;
                    _2622 = _2482;
                    _2623 = _2484;
                    _2624 = _2625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
        }
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.z;
        uint _2490 = (_2488 >> 8u) & 15u;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((4294967295u << _2490) & _2372) == 0u)
        {
            _2586 = _2473;
            _2588 = _2475;
            _2590 = _2477;
            _2592 = _2479;
            _2594 = _2481;
            _2596 = _2483;
        }
        else
        {
            float _2611 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
            float _2612 = _2611 * _2326;
            float _2613 = _2611 * _2327;
            float _2614 = _2611 * _2328;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2490 < ((_2488 >> 12u) & 15u))
            {
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2725 = _2473;
                float _2726 = _2475;
                float _2727 = _2477;
                float _2728 = _2479;
                float _2729 = _2481;
                float _2730 = _2483;
                uint _2731 = _2490;
                uint _2740;
                bool _2741;
                for (;;)
                {
                    _2740 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                    _2741 = _2740 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2741)
                    {
                        frontier_phi_67_pred = _2728;
                        frontier_phi_67_pred_1 = _2729;
                        frontier_phi_67_pred_2 = _2730;
                        frontier_phi_67_pred_3 = _2727;
                        frontier_phi_67_pred_4 = _2726;
                        frontier_phi_67_pred_5 = _2725;
                    }
                    else
                    {
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        uint _2944 = _2740;
                        uint _2945;
                        vec4 _2970;
                        float _2971;
                        vec4 _2986;
                        vec3 _2998;
                        vec4 _3013;
                        vec4 _3028;
                        float _3074;
                        bool _3075;
                        for (;;)
                        {
                            uint _2955 = ((_2731 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2944));
                            _2945 = (_2944 + 4294967295u) & _2944;
                            uint _2957 = _2955 * 40u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.w;
                            uint _2973 = (_2955 * 40u) + 4u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2955 * 40u) + 8u;
                            _2998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x));
                            uint _3000 = (_2955 * 40u) + 16u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3015 = (_2955 * 40u) + 20u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2955 * 40u) + 24u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3049 = (_2955 * 40u) + 28u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3074 = fma(_2328, _3062.z, fma(_2327, _3062.y, _3062.x * _2326)) + _3062.w;
                            _3075 = !((fma(_2328, _3043.z, fma(_2327, _3043.y, _3043.x * _2326)) + _3043.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3075)
                            {
                                float _3102 = _2970.x - _2326;
                                float _3103 = _2970.y - _2327;
                                float _3104 = _2970.z - _2328;
                                float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                                float _3108 = inversesqrt(_3105);
                                float _3109 = _3108 * _3102;
                                float _3110 = _3108 * _3103;
                                float _3111 = _3108 * _3104;
                                float _3115 = 1.0 - (_3105 / (_2971 * _2971));
                                float _4162 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3120 = sqrt(_3105) * _2986.w;
                                float _3122 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                                float _3123 = _3122 * _3122;
                                float _3126 = ((1.0 - _3123) * dot(vec3(_3109, _3110, _3111), vec3(_606, _609, _612))) + _3123;
                                float _3129 = _3120 * _3120;
                                float _3133 = (fma(_2328, _3013.z, fma(_2327, _3013.y, _3013.x * _2326)) + _3013.w) / _3074;
                                float _3134 = (fma(_2328, _3028.z, fma(_2327, _3028.y, _3028.x * _2326)) + _3028.w) / _3074;
                                float _3138 = 1.0 - dot(vec2(_3133, _3134), vec2(_3133, _3134));
                                float _4178 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3140 = _3139 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3116) / ((_3129 * 0.699999988079071044921875) + 1.0));
                                float _3152 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3153 = 1.0 - _666;
                                float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                                float _3161 = _3160 * _3160;
                                float _3162 = _3161 * _3161;
                                float _3163 = _3109 - _2612;
                                float _3164 = _3110 - _2613;
                                float _3165 = _3111 - _2614;
                                float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                                float _3173 = dot(vec3(_606, _609, _612), vec3((-0.0) - _2612, (-0.0) - _2613, (-0.0) - _2614));
                                float _4189 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3177 = dot(vec3(_606, _609, _612), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                                float _4200 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                                float _3185 = _3122 * _3161;
                                float _3186 = _3185 * _3185;
                                float _3192 = ((1.0 - _3186) * dot(vec3(_606, _609, _612), vec3(_3109, _3110, _3111))) + _3186;
                                float _4211 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3194 = 1.0 - _3161;
                                float _3204 = (0.5 / (((_3193 * ((_3176 * _3194) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3193 * _3194) + _3161) * _3176))) * _3193;
                                float _4222 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3214 = (_3139 * _3116) * (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) / ((_3184 * _3184) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3214 * _2998.x;
                                frontier_phi_73_pred_1 = _3214 * _2998.y;
                                frontier_phi_73_pred_2 = _3140 * _2986.z;
                                frontier_phi_73_pred_3 = _3140 * _2986.y;
                                frontier_phi_73_pred_4 = _3140 * _2986.x;
                                frontier_phi_73_pred_5 = _3214 * _2998.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3218 = frontier_phi_73_pred;
                            _3219 = frontier_phi_73_pred_1;
                            _3223 = frontier_phi_73_pred_2;
                            _3222 = frontier_phi_73_pred_3;
                            _3221 = frontier_phi_73_pred_4;
                            _3220 = frontier_phi_73_pred_5;
                            _2928 = _3221 + _2941;
                            _2929 = _3222 + _2942;
                            _2930 = _3223 + _2943;
                            _2925 = _3218 + _2938;
                            _2926 = _3219 + _2939;
                            _2927 = _3220 + _2940;
                            if (_2945 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2945;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2928;
                        frontier_phi_67_pred_1 = _2929;
                        frontier_phi_67_pred_2 = _2930;
                        frontier_phi_67_pred_3 = _2927;
                        frontier_phi_67_pred_4 = _2926;
                        frontier_phi_67_pred_5 = _2925;
                    }
                    _2593 = frontier_phi_67_pred;
                    _2595 = frontier_phi_67_pred_1;
                    _2597 = frontier_phi_67_pred_2;
                    _2591 = frontier_phi_67_pred_3;
                    _2589 = frontier_phi_67_pred_4;
                    _2587 = frontier_phi_67_pred_5;
                    uint _2732 = _2731 + 1u;
                    if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2725 = _2587;
                        _2726 = _2589;
                        _2727 = _2591;
                        _2728 = _2593;
                        _2729 = _2595;
                        _2730 = _2597;
                        _2731 = _2732;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2595;
                frontier_phi_55_56_ladder_1 = _2597;
                frontier_phi_55_56_ladder_2 = _2593;
                frontier_phi_55_56_ladder_3 = _2591;
                frontier_phi_55_56_ladder_4 = _2589;
                frontier_phi_55_56_ladder_5 = _2587;
            }
            else
            {
                frontier_phi_55_56_ladder = _2481;
                frontier_phi_55_56_ladder_1 = _2483;
                frontier_phi_55_56_ladder_2 = _2479;
                frontier_phi_55_56_ladder_3 = _2477;
                frontier_phi_55_56_ladder_4 = _2475;
                frontier_phi_55_56_ladder_5 = _2473;
            }
            _2586 = frontier_phi_55_56_ladder_5;
            _2588 = frontier_phi_55_56_ladder_4;
            _2590 = frontier_phi_55_56_ladder_3;
            _2592 = frontier_phi_55_56_ladder_2;
            _2594 = frontier_phi_55_56_ladder;
            _2596 = frontier_phi_55_56_ladder_1;
        }
        float _2601 = isnan(1.0) ? _650 : (isnan(_650) ? 1.0 : min(_650, 1.0));
        _2385 = (_2601 * _2592) + _1837;
        _2387 = (_2601 * _2594) + _1839;
        _2389 = (_2601 * _2596) + _1841;
        _2391 = ((_2586 * 0.039999999105930328369140625) * _2601) + _2170;
        _2393 = ((_2588 * 0.039999999105930328369140625) * _2601) + _2172;
        _2395 = ((_2590 * 0.039999999105930328369140625) * _2601) + _2174;
    }
    else
    {
        _2385 = _1837;
        _2387 = _1839;
        _2389 = _1841;
        _2391 = _2170;
        _2393 = _2172;
        _2395 = _2174;
    }
    float _4238 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4249 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4260 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    uint _2415 = _230 + 6u;
    float _2423 = _587 / cbSceneParam._m0[86u].x;
    float _2424 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2438 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2440 = _2438.x;
    float _2441 = _2438.y;
    float _2442 = _2438.z;
    float _2443 = _2438.w;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _2498 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _2499 = _2498 / _520;
        float _2510 = _2499 * _572;
        float _2511 = _573 * _2499;
        float _2512 = (-0.0) - _2511;
        float _2514 = _2499 * _574;
        float _2516 = (cbSceneParam._m0[77u].w * _2512) / _2498;
        float _2517 = _2516 + cbSceneParam._m0[79u].w;
        float _2518 = cbSceneParam._m0[79u].w - _2511;
        float _2524 = sqrt(((_2510 * _2510) + (_2511 * _2511)) + (_2514 * _2514));
        float _2527 = (1.0 - (cbSceneParam._m0[77u].w / _2498)) * _2524;
        float _2532 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2534 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2687;
        if (abs((_2512 - _2516) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2687 = ((((_2517 > 0.0) ? exp2(_2532 * _2517) : (2.0 - exp2(_2534 * _2517))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2527;
        }
        else
        {
            float _2647 = 1.0 / cbSceneParam._m0[80u].x;
            float _2648 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : max(_2517, _2518));
            float _2649 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : min(_2517, _2518));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            float _2659 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : min(_2649, 0.0));
            _2687 = ((abs(_2524 / _2512) * cbSceneParam._m0[80u].y) * ((((_2658 - _2659) * 2.0) - ((exp2(_2532 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)))) - exp2(_2532 * (isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0))))) * _2647)) - ((exp2(_2534 * _2658) - exp2(_2534 * _2659)) * _2647))) + (_2527 * cbSceneParam._m0[80u].z);
        }
        vec4 _2689 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, 1.0), 0.0);
        float _2698 = exp2((_2687 * (-1.44269502162933349609375)) * (1.0 - _2689.w));
        float _2699 = log2(_2698);
        float _2715 = log2(_2443);
        _2536 = (exp2(_2715 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].x)) * _2689.x) / cbSceneParam._m0[78u].x)) + _2440;
        _2538 = (exp2(_2715 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].y)) * _2689.y) / cbSceneParam._m0[78u].y)) + _2441;
        _2540 = (exp2(_2715 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].z)) * _2689.z) / cbSceneParam._m0[78u].z)) + _2442;
        _2542 = _2698 * _2443;
    }
    else
    {
        _2536 = _2440;
        _2538 = _2441;
        _2540 = _2442;
        _2542 = _2443;
    }
    float _2554 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2555 = _2554 == 3.0;
    float _2556 = log2(_2542);
    float _2563 = exp2(_2556 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2385 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _650))) + ((_2391 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2564 = exp2(_2556 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2387 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _650))) + ((_2393 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2565 = exp2(_2556 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2389 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _650))) + ((_2395 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2574 = (_2554 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2574 * (_2555 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2536)));
    SV_Target.y = _2574 * (_2555 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2538)));
    SV_Target.z = _2574 * (_2555 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2540)));
    SV_Target.w = cbInstanceData._m0[_2415].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2415].w;
}


