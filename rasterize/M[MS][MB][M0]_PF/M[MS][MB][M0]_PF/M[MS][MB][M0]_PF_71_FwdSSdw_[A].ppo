#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1246;
float _3630;
float _3631;
float _3632;
float _3633;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3642 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3653 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3664 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _405 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_392 - _405) * cbMtdParam._m0[24u].x) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3675 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _430 = (_423 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _431 = (_423 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _432 = (_423 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) + _442;
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _519 = ((_489.z - _510) * _423) + _510;
    float _522 = ((((_489.x - _508) * _423) + _508) * 2.0) + (-1.0);
    float _523 = ((((_489.y - _509) * _423) + _509) * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3686 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))));
    float _534 = _522 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_464.x * 2.0) + (-1.0)));
    float _535 = _523 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_464.y * 2.0) + (-1.0)));
    vec4 _548 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _591 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_564 - _565) * cbMtdParam._m0[24u].w) + _565) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3697 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _600 = ((((cbMtdParam._m0[10u].x - _449) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _592) + _449;
    float _601 = ((((cbMtdParam._m0[10u].y - _450) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _592) + _450;
    float _602 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _451)) * _592) + _451;
    float _607 = (((_464.z - _519) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _519;
    float _611 = ((cbMtdParam._m0[23u].y - _607) * _592) + _607;
    vec4 _630 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _636 = (_630.x * 2.0) + (-1.0);
    float _637 = (_630.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3708 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _654 = (_592 * (((cbMtdParam._m0[22u].z * _534) - _534) + _636)) + _534;
    float _655 = (_592 * (((cbMtdParam._m0[22u].z * _535) - _535) + _637)) + _535;
    float _656 = (_592 * (sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) - _529)) + _529;
    float _658 = cbMtdParam._m0[22u].x + _548.w;
    float _662 = gl_FragCoord.x * 0.125;
    float _664 = gl_FragCoord.y * 0.125;
    float _674 = fma(_656, _241 * NORMAL.x, fma(_655, _248 * TANGENT.x, (_234 * _226) * _654));
    float _677 = fma(_656, _241 * NORMAL.y, fma(_655, _248 * TANGENT.y, (_234 * _227) * _654));
    float _680 = fma(_656, _241 * NORMAL.z, fma(_655, _248 * TANGENT.z, (_234 * _228) * _654));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    float _685 = _684 * _674;
    float _686 = _684 * _677;
    float _687 = _684 * _680;
    float _3719 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _688 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3741 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3752 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3763 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_662, _664)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _710 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _761 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _751);
    float _762 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _751);
    float _763 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _751);
    float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
    float _768 = _761 * _767;
    float _769 = _762 * _767;
    float _770 = _763 * _767;
    vec4 _772 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_662, _664));
    float _774 = _772.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _928 = sqrt(((_761 * _761) + (_762 * _762)) + (_763 * _763));
        float _934 = (cbMatDynParam._m0[5u].x * _928) + cbMatDynParam._m0[5u].y;
        float _3774 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _939 = (cbMatDynParam._m0[5u].z * _928) + cbMatDynParam._m0[5u].w;
        float _3785 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) - _935)) + _935) < ((_774 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _785 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _786 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _804 = fma(_687, cbSceneParam._m0[5u].z, fma(_686, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _685));
    float _807 = fma(_687, cbSceneParam._m0[6u].z, fma(_686, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _685));
    float _810 = fma(_687, cbSceneParam._m0[7u].z, fma(_686, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _685));
    uint _823 = _273 + 9u;
    uint _824 = _823 + uint(cbMatDynParam._m0[0u].w);
    float _830 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_824].x;
    float _831 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_824].y;
    float _832 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_824].z;
    float _3796 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    vec4 _844 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _785, cbSceneParam._m0[86u].y * _786));
    float _848 = ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * TEXCOORD_5.w) * _844.x;
    float _849 = dot(vec3(_685, _686, _687), vec3(_768, _769, _770));
    float _852 = _849 * 2.0;
    float _856 = (_852 * _685) - _768;
    float _857 = (_852 * _686) - _769;
    float _858 = (_852 * _687) - _770;
    float _862 = abs(dot(vec3(_768, _769, _770), vec3(_685, _686, _687)));
    float _3829 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = sqrt(_688);
    float _877 = exp2((_864 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_864 * 3.0));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1245;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _970 = fma(_917, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909));
        float _974 = fma(_917, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909));
        float _978 = fma(_917, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909));
        float _1003 = _909 + _685;
        float _1004 = _913 + _686;
        float _1005 = _917 + _687;
        float _1015 = fma(_1005, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003)) - _970;
        float _1016 = fma(_1005, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003)) - _974;
        float _1017 = fma(_1005, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003)) - _978;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_970 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_974 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[34u].z) + ((((((_978 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1073 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1039.x + (-0.5));
        float _1075 = _1073 * (_1039.y + (-0.5));
        float _1076 = _1073 * (_1039.z + (-0.5));
        float _1083 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1046.x + (-0.5));
        float _1085 = _1083 * (_1046.y + (-0.5));
        float _1086 = _1083 * (_1046.z + (-0.5));
        float _1093 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1053.x + (-0.5));
        float _1095 = _1093 * (_1053.y + (-0.5));
        float _1096 = _1093 * (_1053.z + (-0.5));
        float _1103 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1060.x + (-0.5));
        float _1105 = _1103 * (_1060.y + (-0.5));
        float _1106 = _1103 * (_1060.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1127 = (dot(vec3(_685, _686, _687), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1137 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3877 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1139 + 1.0))) + _1144) * _1107;
        float _1154 = _1075 * 0.5;
        float _1155 = _1085 * 0.5;
        float _1156 = _1095 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_685, _686, _687), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3910 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1181 + 1.0))) + _1186) * _1108;
        float _1196 = _1076 * 0.5;
        float _1197 = _1086 * 0.5;
        float _1198 = _1096 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_685, _686, _687), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3943 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1223 + 1.0))) + _1228) * _1109;
        _1245 = _1076;
        _1247 = _1075;
        _1248 = _1074;
        _1249 = _1086;
        _1250 = _1085;
        _1251 = _1084;
        _1252 = _1096;
        _1253 = _1095;
        _1254 = _1094;
        _1255 = _1109;
        _1256 = _1108;
        _1257 = _1107;
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _1246;
        _1247 = _1246;
        _1248 = _1246;
        _1249 = _1246;
        _1250 = _1246;
        _1251 = _1246;
        _1252 = _1246;
        _1253 = _1246;
        _1254 = _1246;
        _1255 = _1246;
        _1256 = _1246;
        _1257 = _1246;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_917, cbModelParam._m0[30u].z, fma(_913, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909));
        float _1288 = fma(_917, cbModelParam._m0[31u].z, fma(_913, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909));
        float _1292 = fma(_917, cbModelParam._m0[32u].z, fma(_913, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909));
        float _1315 = _909 + _685;
        float _1316 = _913 + _686;
        float _1317 = _917 + _687;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_685, _686, _687), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4006 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_685, _686, _687), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4039 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_685, _686, _687), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4072 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1246;
        _1554 = _1246;
        _1555 = _1246;
        _1556 = _1246;
        _1557 = _1246;
        _1558 = _1246;
        _1559 = _1246;
        _1560 = _1246;
        _1561 = _1246;
        _1562 = _1246;
        _1563 = _1246;
        _1564 = _1246;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1258)) + _1258;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1259)) + _1259;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1260)) + _1260;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _856 * 0.5;
    float _1622 = _857 * 0.5;
    float _1623 = _858 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1245, _1249, _1252, _1255));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _688);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_917, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_917, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_917, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_858, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856));
        float _1753 = fma(_858, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856));
        float _1756 = fma(_858, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1784 = frontier_phi_19_17_ladder;
        }
        float _2007;
        if (_1753 > 0.0)
        {
            _2007 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2007 = frontier_phi_28_24_ladder;
        }
        float _2253;
        if (_1756 > 0.0)
        {
            _2253 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2253 = frontier_phi_40_35_ladder;
        }
        float _2255 = isnan(_2007) ? _1784 : (isnan(_1784) ? _2007 : min(_1784, _2007));
        float _2256 = isnan(_2253) ? _2255 : (isnan(_2255) ? _2253 : min(_2255, _2253));
        float _2260 = (_2256 * _1750) + _1739;
        float _2261 = (_2256 * _1753) + _1743;
        float _2262 = (_2256 * _1756) + _1747;
        float _2263 = _2256 * 9.9999997473787516355514526367188e-05;
        float _2265 = (-1.0) - _2263;
        float _2267 = _2263 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2262 > _2267) || ((_2262 < _2265) || ((_2261 > _2267) || ((_2261 < _2265) || ((_2260 < _2265) || (_2260 > _2267))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2262, cbModelParam._m0[9u].z, fma(_2261, cbModelParam._m0[9u].y, _2260 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2262, cbModelParam._m0[10u].z, fma(_2261, cbModelParam._m0[10u].y, _2260 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2262, cbModelParam._m0[11u].z, fma(_2261, cbModelParam._m0[11u].y, _2260 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_18_40_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_18_40_ladder_2;
        _1774 = frontier_phi_18_40_ladder_1;
        _1776 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_856, _857, _858), _1690);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _688);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1836 = fma(_917, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909)) + cbModelParam._m0[21u].w;
        float _1840 = fma(_917, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909)) + cbModelParam._m0[22u].w;
        float _1844 = fma(_917, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909)) + cbModelParam._m0[23u].w;
        float _1847 = fma(_858, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856));
        float _1850 = fma(_858, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856));
        float _1853 = fma(_858, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856));
        float _2012;
        if (_1847 > 0.0)
        {
            _2012 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2012 = frontier_phi_30_26_ladder;
        }
        float _2280;
        if (_1850 > 0.0)
        {
            _2280 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2280 = frontier_phi_42_37_ladder;
        }
        float _2485;
        if (_1853 > 0.0)
        {
            _2485 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2485 = frontier_phi_51_48_ladder;
        }
        float _2487 = isnan(_2280) ? _2012 : (isnan(_2012) ? _2280 : min(_2012, _2280));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1847) + _1836;
        float _2493 = (_2488 * _1850) + _1840;
        float _2494 = (_2488 * _1853) + _1844;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_27_51_ladder = _2693.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2693.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2693.x * cbModelParam._m0[1u].z;
        }
        _1872 = frontier_phi_27_51_ladder_2;
        _1874 = frontier_phi_27_51_ladder_1;
        _1876 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_856, _857, _858), _1781);
        _1872 = _1856.x * cbModelParam._m0[1u].z;
        _1874 = _1856.y * cbModelParam._m0[1u].z;
        _1876 = _1856.z * cbModelParam._m0[1u].z;
    }
    float _1888 = ((((1.0 - _877) * ((_864 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_877 * _864)) * _848;
    float _1889 = _1888 * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1890 = _1888 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1891 = _1888 * ((cbModelParam._m0[1u].w * (_1876 - _1776)) + _1776);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1889 * cbSceneParam._m0[91u].x));
    vec4 _1908 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_785, _786));
    float _1910 = _1908.w;
    float _1922 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1910);
    float _1923 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1910);
    float _1924 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1910);
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _848 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1966 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1970 = _1930 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_685, _686, _687));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_685, _686, _687));
    float _4208 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4219 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1947].x * _1953) * _1991) + (((cbLight._m0[_1957].x * _1922) * _1966) * _1989);
    float _1999 = ((_1953 * cbLight._m0[_1947].y) * _1991) + (((cbLight._m0[_1957].y * _1923) * _1966) * _1989);
    float _2000 = ((_1953 * cbLight._m0[_1947].z) * _1991) + (((cbLight._m0[_1957].z * _1924) * _1966) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_2006)
    {
        _2017 = _1998;
        _2019 = _1999;
        _2021 = _2000;
    }
    else
    {
        uint _2025 = _1930 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4230 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2044 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1998;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1999;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _2000;
    }
    bool _2024 = _2004.y == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2024)
    {
        _2062 = _2017;
        _2064 = _2019;
        _2066 = _2021;
    }
    else
    {
        uint _2224 = _1930 + 7u;
        float _2240 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2241 = _2240 * _2240;
        float _4246 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2242 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2243 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2062 = (((cbLight._m0[_2224].x * 0.3183098733425140380859375) * _2242) * _2243) + _2017;
        _2064 = (((cbLight._m0[_2224].y * 0.3183098733425140380859375) * _2242) * _2243) + _2019;
        _2066 = (((cbLight._m0[_2224].z * 0.3183098733425140380859375) * _2242) * _2243) + _2021;
    }
    uint _2069 = _1930 + 8u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _688) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1930].x + _768;
    float _2085 = cbLight._m0[_1930].y + _769;
    float _2086 = cbLight._m0[_1930].z + _770;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1930].xyz));
    float _4262 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _2098 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2099 = dot(vec3(_685, _686, _687), vec3(_2091, _2092, _2093));
    float _4284 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2091, _2092, _2093));
    float _4295 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2083 * _2083;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2083;
    float _2134 = (0.5 / (((_2098 * ((_2097 * _2123) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2123) + _2083) * _2097))) * _2097;
    float _4306 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    uint _2150 = _1930 + 9u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _688) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_1970].x + _768;
    float _2164 = cbLight._m0[_1970].y + _769;
    float _2165 = cbLight._m0[_1970].z + _770;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1970].xyz));
    float _4317 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2177 = dot(vec3(_685, _686, _687), vec3(_2170, _2171, _2172));
    float _4328 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2170, _2171, _2172));
    float _4339 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2162 * _2162;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2199 = 1.0 - _2162;
    float _2209 = (0.5 / (((_2098 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2199) + _2162) * _2176))) * _2176;
    float _4350 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    float _2221 = (((_2198 * cbLight._m0[_2150].x) * _2211) * _1953) + ((((cbLight._m0[_2069].x * _1922) * _2122) * _2136) * _1966);
    float _2222 = (((_2198 * cbLight._m0[_2150].y) * _2211) * _1953) + ((((cbLight._m0[_2069].y * _1923) * _2122) * _2136) * _1966);
    float _2223 = (((_2198 * cbLight._m0[_2150].z) * _2211) * _1953) + ((((cbLight._m0[_2069].z * _1924) * _2122) * _2136) * _1966);
    float _2285;
    float _2287;
    float _2289;
    if (_2006)
    {
        _2285 = _2221;
        _2287 = _2222;
        _2289 = _2223;
    }
    else
    {
        uint _2291 = _1930 + 2u;
        uint _2295 = _1930 + 10u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _688) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _768;
        float _2312 = cbLight._m0[_2291].y + _769;
        float _2313 = cbLight._m0[_2291].z + _770;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2291].xyz));
        float _4361 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2325 = dot(vec3(_685, _686, _687), vec3(_2318, _2319, _2320));
        float _4372 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4383 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2346 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2347 = 1.0 - _2310;
        float _2357 = (0.5 / (((_2098 * ((_2324 * _2347) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2347) + _2310) * _2324))) * _2324;
        float _4394 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2285 = (((_2346 * cbLight._m0[_2295].x) * _2359) * _2360) + _2221;
        _2287 = (((_2346 * cbLight._m0[_2295].y) * _2359) * _2360) + _2222;
        _2289 = (((_2346 * cbLight._m0[_2295].z) * _2359) * _2360) + _2223;
    }
    float _2395;
    float _2397;
    float _2399;
    if (_2024)
    {
        _2395 = _2285;
        _2397 = _2287;
        _2399 = _2289;
    }
    else
    {
        uint _2406 = _1930 + 3u;
        uint _2410 = _1930 + 11u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _688) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _768;
        float _2427 = cbLight._m0[_2406].y + _769;
        float _2428 = cbLight._m0[_2406].z + _770;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2406].xyz));
        float _4410 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2440 = dot(vec3(_685, _686, _687), vec3(_2433, _2434, _2435));
        float _4421 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4432 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2462 = 1.0 - _2425;
        float _2472 = (0.5 / (((_2098 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2462) + _2425) * _2439))) * _2439;
        float _4443 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2395 = (((_2461 * cbLight._m0[_2410].x) * _2474) * _2475) + _2285;
        _2397 = (((_2461 * cbLight._m0[_2410].y) * _2474) * _2475) + _2287;
        _2399 = (((_2461 * cbLight._m0[_2410].z) * _2474) * _2475) + _2289;
    }
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_1928.y == 0u)
    {
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2550;
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2550;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2550;
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.x;
        uint _2577 = uint((float(_2565.y) * floor(float(uint(cbSceneParam._m0[85u].y * _786) / _2566))) + floor(float(uint(cbSceneParam._m0[85u].x * _785) / _2566)));
        float _2587 = (log2(_2553 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2588 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        uint _2591 = uint(isnan(14.0) ? _2588 : (isnan(_2588) ? 14.0 : min(_2588, 14.0)));
        uvec4 _2596 = texelFetch(g_lightClusterGridBuffer, int(((_2591 << 2u) + (_2577 << 6u)) >> 2u));
        uint _2597 = _2596.x;
        uint _2598 = _2565.z;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((((1u << ((_2598 >> 4u) & 15u)) + 4294967295u) & _2597) == 0u) || ((_2598 & 240u) == 0u))
        {
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
        }
        else
        {
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            uint _2857 = 0u;
            uint _2866;
            bool _2867;
            for (;;)
            {
                _2866 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                _2867 = _2866 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2867)
                {
                    frontier_phi_68_pred = _2851;
                    frontier_phi_68_pred_1 = _2856;
                    frontier_phi_68_pred_2 = _2855;
                    frontier_phi_68_pred_3 = _2854;
                    frontier_phi_68_pred_4 = _2853;
                    frontier_phi_68_pred_5 = _2852;
                }
                else
                {
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    uint _3002;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2866;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    for (;;)
                    {
                        uint _3006 = uint(findLSB(_3002)) + (_2857 << 5u);
                        uint _3003 = (_3002 + 4294967295u) & _3002;
                        uint _3008 = _3006 * 48u;
                        vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3028 = (_3006 * 48u) + 4u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3047 = (_3006 * 48u) + 8u;
                        vec3 _3058 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x));
                        float _3062 = _3022.x - _2551;
                        float _3063 = _3022.y - _2552;
                        float _3064 = _3022.z - _2553;
                        float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                        float _3068 = inversesqrt(_3065);
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3072 = dot(vec3(_804, _807, _810), vec3(_3069, _3070, _3071));
                        float _3077 = 1.0 - (_3065 * _3022.w);
                        float _4469 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3078 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3079 = sqrt(_3065) * _3041.w;
                        float _3082 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3072) + _3083;
                        float _3089 = _3079 * _3079;
                        float _3093 = ((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3078) / ((_3089 * 0.699999988079071044921875) + 1.0);
                        float _3097 = (-0.0) - _2551;
                        float _3098 = (-0.0) - _2552;
                        float _3099 = (-0.0) - _2553;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3114 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                        float _3115 = 1.0 - _864;
                        float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                        float _3123 = _3122 * _3122;
                        float _3124 = _3123 * _3123;
                        float _3125 = _3104 + _3069;
                        float _3126 = _3105 + _3070;
                        float _3127 = _3106 + _3071;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3135 = dot(vec3(_804, _807, _810), vec3(_3104, _3105, _3106));
                        float _4485 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3139 = dot(vec3(_804, _807, _810), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                        float _4496 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                        float _3147 = _3082 * _3123;
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3072) + _3148;
                        float _4507 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3153 = 1.0 - _3123;
                        float _3163 = (0.5 / (((_3152 * ((_3138 * _3153) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3123) * _3138))) * _3152;
                        float _4518 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3174 = (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3146 * _3146) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125))) * _3078;
                        _2926 = (_3093 * _3041.x) + _2999;
                        _2927 = (_3093 * _3041.y) + _3000;
                        _2928 = (_3093 * _3041.z) + _3001;
                        _2923 = (_3174 * _3058.x) + _2996;
                        _2924 = (_3174 * _3058.y) + _2997;
                        _2925 = (_3174 * _3058.z) + _2998;
                        if (_3003 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _3003;
                        }
                    }
                    frontier_phi_68_pred = _2923;
                    frontier_phi_68_pred_1 = _2928;
                    frontier_phi_68_pred_2 = _2927;
                    frontier_phi_68_pred_3 = _2926;
                    frontier_phi_68_pred_4 = _2925;
                    frontier_phi_68_pred_5 = _2924;
                }
                _2699 = frontier_phi_68_pred;
                _2709 = frontier_phi_68_pred_1;
                _2707 = frontier_phi_68_pred_2;
                _2705 = frontier_phi_68_pred_3;
                _2703 = frontier_phi_68_pred_4;
                _2701 = frontier_phi_68_pred_5;
                uint _2858 = _2857 + 1u;
                if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2851 = _2699;
                    _2852 = _2701;
                    _2853 = _2703;
                    _2854 = _2705;
                    _2855 = _2707;
                    _2856 = _2709;
                    _2857 = _2858;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
        }
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.z;
        uint _2715 = (_2713 >> 8u) & 15u;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((4294967295u << _2715) & _2597) == 0u)
        {
            _2819 = _2698;
            _2821 = _2700;
            _2823 = _2702;
            _2825 = _2704;
            _2827 = _2706;
            _2829 = _2708;
        }
        else
        {
            float _2844 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
            float _2845 = _2844 * _2551;
            float _2846 = _2844 * _2552;
            float _2847 = _2844 * _2553;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2715 < ((_2713 >> 12u) & 15u))
            {
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2979 = _2698;
                float _2980 = _2700;
                float _2981 = _2702;
                float _2982 = _2704;
                float _2983 = _2706;
                float _2984 = _2708;
                uint _2985 = _2715;
                uint _2994;
                bool _2995;
                for (;;)
                {
                    _2994 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                    _2995 = _2994 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2995)
                    {
                        frontier_phi_79_pred = _2984;
                        frontier_phi_79_pred_1 = _2983;
                        frontier_phi_79_pred_2 = _2982;
                        frontier_phi_79_pred_3 = _2981;
                        frontier_phi_79_pred_4 = _2980;
                        frontier_phi_79_pred_5 = _2979;
                    }
                    else
                    {
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        uint _3207 = _2994;
                        uint _3208;
                        vec4 _3233;
                        float _3234;
                        vec4 _3249;
                        vec3 _3261;
                        vec4 _3276;
                        vec4 _3291;
                        float _3337;
                        bool _3338;
                        for (;;)
                        {
                            uint _3218 = ((_2985 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3207));
                            _3208 = (_3207 + 4294967295u) & _3207;
                            uint _3220 = _3218 * 40u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3234 = _3233.w;
                            uint _3236 = (_3218 * 40u) + 4u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3251 = (_3218 * 40u) + 8u;
                            _3261 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x));
                            uint _3263 = (_3218 * 40u) + 16u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3218 * 40u) + 20u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3218 * 40u) + 24u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3312 = (_3218 * 40u) + 28u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3337 = fma(_2553, _3325.z, fma(_2552, _3325.y, _3325.x * _2551)) + _3325.w;
                            _3338 = !((fma(_2553, _3306.z, fma(_2552, _3306.y, _3306.x * _2551)) + _3306.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3338)
                            {
                                float _3365 = _3233.x - _2551;
                                float _3366 = _3233.y - _2552;
                                float _3367 = _3233.z - _2553;
                                float _3368 = dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367));
                                float _3371 = inversesqrt(_3368);
                                float _3372 = _3371 * _3365;
                                float _3373 = _3371 * _3366;
                                float _3374 = _3371 * _3367;
                                float _3378 = 1.0 - (_3368 / (_3234 * _3234));
                                float _4529 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3383 = sqrt(_3368) * _3249.w;
                                float _3385 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                                float _3386 = _3385 * _3385;
                                float _3389 = ((1.0 - _3386) * dot(vec3(_3372, _3373, _3374), vec3(_804, _807, _810))) + _3386;
                                float _3392 = _3383 * _3383;
                                float _3396 = (fma(_2553, _3276.z, fma(_2552, _3276.y, _3276.x * _2551)) + _3276.w) / _3337;
                                float _3397 = (fma(_2553, _3291.z, fma(_2552, _3291.y, _3291.x * _2551)) + _3291.w) / _3337;
                                float _3401 = 1.0 - dot(vec2(_3396, _3397), vec2(_3396, _3397));
                                float _4545 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3403 = _3402 * (((isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0))) * _3379) / ((_3392 * 0.699999988079071044921875) + 1.0));
                                float _3415 = exp2(log2(1.0 / ((_3392 * 3.5) + 5.0)) * 0.25);
                                float _3416 = 1.0 - _864;
                                float _3423 = sqrt(1.0 - ((1.0 - (_3416 * _3416)) * (1.0 - (_3415 * _3415))));
                                float _3424 = _3423 * _3423;
                                float _3425 = _3424 * _3424;
                                float _3426 = _3372 - _2845;
                                float _3427 = _3373 - _2846;
                                float _3428 = _3374 - _2847;
                                float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                                float _3436 = dot(vec3(_804, _807, _810), vec3((-0.0) - _2845, (-0.0) - _2846, (-0.0) - _2847));
                                float _4556 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3440 = dot(vec3(_804, _807, _810), vec3(_3432 * _3426, _3432 * _3427, _3432 * _3428));
                                float _4567 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3447 = ((_3443 * _3443) * (_3425 + (-1.0))) + 1.0;
                                float _3448 = _3385 * _3424;
                                float _3449 = _3448 * _3448;
                                float _3455 = ((1.0 - _3449) * dot(vec3(_804, _807, _810), vec3(_3372, _3373, _3374))) + _3449;
                                float _4578 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3457 = 1.0 - _3424;
                                float _3467 = (0.5 / (((_3456 * ((_3439 * _3457) + _3424)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3424) * _3439))) * _3456;
                                float _4589 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3477 = (_3402 * _3379) * (((_3425 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3447 * _3447) * ((_3392 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3403 * _3249.y;
                                frontier_phi_85_pred_1 = _3403 * _3249.x;
                                frontier_phi_85_pred_2 = _3477 * _3261.z;
                                frontier_phi_85_pred_3 = _3477 * _3261.y;
                                frontier_phi_85_pred_4 = _3477 * _3261.x;
                                frontier_phi_85_pred_5 = _3403 * _3249.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3485 = frontier_phi_85_pred;
                            _3484 = frontier_phi_85_pred_1;
                            _3483 = frontier_phi_85_pred_2;
                            _3482 = frontier_phi_85_pred_3;
                            _3481 = frontier_phi_85_pred_4;
                            _3486 = frontier_phi_85_pred_5;
                            _3191 = _3484 + _3204;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3188 = _3481 + _3201;
                            _3189 = _3482 + _3202;
                            _3190 = _3483 + _3203;
                            if (_3208 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3208;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3193;
                        frontier_phi_79_pred_1 = _3192;
                        frontier_phi_79_pred_2 = _3191;
                        frontier_phi_79_pred_3 = _3190;
                        frontier_phi_79_pred_4 = _3189;
                        frontier_phi_79_pred_5 = _3188;
                    }
                    _2830 = frontier_phi_79_pred;
                    _2828 = frontier_phi_79_pred_1;
                    _2826 = frontier_phi_79_pred_2;
                    _2824 = frontier_phi_79_pred_3;
                    _2822 = frontier_phi_79_pred_4;
                    _2820 = frontier_phi_79_pred_5;
                    uint _2986 = _2985 + 1u;
                    if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2979 = _2820;
                        _2980 = _2822;
                        _2981 = _2824;
                        _2982 = _2826;
                        _2983 = _2828;
                        _2984 = _2830;
                        _2985 = _2986;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2824;
                frontier_phi_60_61_ladder_1 = _2830;
                frontier_phi_60_61_ladder_2 = _2828;
                frontier_phi_60_61_ladder_3 = _2826;
                frontier_phi_60_61_ladder_4 = _2822;
                frontier_phi_60_61_ladder_5 = _2820;
            }
            else
            {
                frontier_phi_60_61_ladder = _2702;
                frontier_phi_60_61_ladder_1 = _2708;
                frontier_phi_60_61_ladder_2 = _2706;
                frontier_phi_60_61_ladder_3 = _2704;
                frontier_phi_60_61_ladder_4 = _2700;
                frontier_phi_60_61_ladder_5 = _2698;
            }
            _2819 = frontier_phi_60_61_ladder_5;
            _2821 = frontier_phi_60_61_ladder_4;
            _2823 = frontier_phi_60_61_ladder;
            _2825 = frontier_phi_60_61_ladder_3;
            _2827 = frontier_phi_60_61_ladder_2;
            _2829 = frontier_phi_60_61_ladder_1;
        }
        float _2834 = isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0));
        _2610 = (_2834 * _2825) + _2062;
        _2612 = (_2834 * _2827) + _2064;
        _2614 = (_2834 * _2829) + _2066;
        _2616 = ((_2819 * 0.039999999105930328369140625) * _2834) + _2395;
        _2618 = ((_2821 * 0.039999999105930328369140625) * _2834) + _2397;
        _2620 = ((_2823 * 0.039999999105930328369140625) * _2834) + _2399;
    }
    else
    {
        _2610 = _2062;
        _2612 = _2064;
        _2614 = _2066;
        _2616 = _2395;
        _2618 = _2397;
        _2620 = _2399;
    }
    float _4605 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4616 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4627 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _2637 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2610 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _848))) + ((_2616 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2638 = ((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2612 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _848))) + ((_2618 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2639 = ((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2614 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _848))) + ((_2620 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    uint _2640 = _273 + 6u;
    float _2648 = _785 / cbSceneParam._m0[86u].x;
    float _2649 = _786 / cbSceneParam._m0[86u].y;
    vec4 _2663 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, (log2((isnan(cbSceneParam._m0[77u].w) ? _710 : (isnan(_710) ? cbSceneParam._m0[77u].w : min(_710, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2665 = _2663.x;
    float _2666 = _2663.y;
    float _2667 = _2663.z;
    float _2668 = _2663.w;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_710 > cbSceneParam._m0[78u].w)
    {
        float _2723 = isnan(_710) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _710 : min(cbSceneParam._m0[80u].w, _710));
        float _2724 = _2723 / _710;
        float _2735 = _2724 * _761;
        float _2736 = _762 * _2724;
        float _2737 = (-0.0) - _2736;
        float _2739 = _2724 * _763;
        float _2741 = (cbSceneParam._m0[77u].w * _2737) / _2723;
        float _2742 = _2741 + cbSceneParam._m0[79u].w;
        float _2743 = cbSceneParam._m0[79u].w - _2736;
        float _2749 = sqrt(((_2735 * _2735) + (_2736 * _2736)) + (_2739 * _2739));
        float _2752 = (1.0 - (cbSceneParam._m0[77u].w / _2723)) * _2749;
        float _2757 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2759 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2936;
        if (abs((_2737 - _2741) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2936 = ((((_2742 > 0.0) ? exp2(_2757 * _2742) : (2.0 - exp2(_2759 * _2742))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2752;
        }
        else
        {
            float _2880 = 1.0 / cbSceneParam._m0[80u].x;
            float _2881 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : max(_2742, _2743));
            float _2882 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : min(_2742, _2743));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            _2936 = ((abs(_2749 / _2737) * cbSceneParam._m0[80u].y) * ((((_2891 - _2892) * 2.0) - ((exp2(_2757 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0)))) - exp2(_2757 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))))) * _2880)) - ((exp2(_2759 * _2891) - exp2(_2759 * _2892)) * _2880))) + (_2752 * cbSceneParam._m0[80u].z);
        }
        vec4 _2938 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, 1.0), 0.0);
        float _2947 = exp2((_2936 * (-1.44269502162933349609375)) * (1.0 - _2938.w));
        float _2948 = log2(_2947);
        float _2964 = log2(_2668);
        _2761 = (exp2(_2964 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].x)) * _2938.x) / cbSceneParam._m0[78u].x)) + _2665;
        _2763 = (exp2(_2964 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].y)) * _2938.y) / cbSceneParam._m0[78u].y)) + _2666;
        _2765 = (exp2(_2964 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].z)) * _2938.z) / cbSceneParam._m0[78u].z)) + _2667;
        _2767 = _2947 * _2668;
    }
    else
    {
        _2761 = _2665;
        _2763 = _2666;
        _2765 = _2667;
        _2767 = _2668;
    }
    bool _2974;
    vec4 _2777;
    vec4 _2799;
    float _2801;
    float _2805;
    float _2806;
    float _2807;
    float _2808;
    bool _2818;
    for (;;)
    {
        _2777 = cbMatDynParam._m0[0u];
        float _2779 = roundEven(_2777.y);
        bool _2780 = _2779 == 3.0;
        float _2781 = log2(_2767);
        float _2788 = exp2(_2781 * cbSceneParam._m0[78u].x) * _2637;
        float _2789 = exp2(_2781 * cbSceneParam._m0[78u].y) * _2638;
        float _2790 = exp2(_2781 * cbSceneParam._m0[78u].z) * _2639;
        float _2797 = _774 + (-0.5);
        _2799 = cbMtdParam._m0[1u];
        _2801 = _2799.y * _2797;
        float _2804 = (_2779 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2805 = _2804 * (_2780 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2761)));
        _2806 = _2804 * (_2780 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2763)));
        _2807 = _2804 * (_2780 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2765)));
        _2808 = _2797 * 0.999000012874603271484375;
        _2818 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2818)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _2808) < 0.5)
            {
                _2974 = true;
                break;
            }
        }
        uint _2915 = _823 + uint(_2777.w);
        if ((cbInstanceData._m0[_2915].w < 1.0) && ((cbInstanceData._m0[_2915].w + _2808) < 0.5))
        {
            _2974 = true;
            break;
        }
        if ((_2801 + 1.0) < _2799.x)
        {
            _2974 = true;
            break;
        }
        _2974 = false;
        break;
    }
    float _3179;
    if (_2974)
    {
        discard_state = true;
        _3179 = 0.0;
    }
    else
    {
        _3179 = cbInstanceData._m0[_2640].w;
    }
    SV_Target.x = _2805;
    SV_Target.y = _2806;
    SV_Target.z = _2807;
    SV_Target.w = _3179;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2640].w;
    discard_exit();
}


