#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1260;
float _3620;
float _3621;
float _3622;
float _3623;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3632 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3643 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3654 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _403 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_390 - _403) * cbMtdParam._m0[24u].x) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3665 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _428 = (_421 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _429 = (_421 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _430 = (_421 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) + _440;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _517 = ((_487.z - _508) * _421) + _508;
    float _520 = ((((_487.x - _506) * _421) + _506) * 2.0) + (-1.0);
    float _521 = ((((_487.y - _507) * _421) + _507) * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3676 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    vec4 _549 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _561 = (_520 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_462.x * 2.0) + (-1.0)))) + (((_549.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _562 = (_521 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_462.y * 2.0) + (-1.0)))) + (((_549.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _603 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_576 - _577) * cbMtdParam._m0[24u].w) + _577) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3687 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _612 = ((((cbMtdParam._m0[10u].x - _447) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _604) + _447;
    float _613 = ((((cbMtdParam._m0[10u].y - _448) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _604) + _448;
    float _614 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _449)) * _604) + _449;
    float _619 = (((_462.z - _517) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _517;
    float _623 = ((_549.z - _619) * cbMtdParam._m0[19u].w) + _619;
    float _627 = ((cbMtdParam._m0[23u].y - _623) * _604) + _623;
    vec4 _646 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _652 = (_646.x * 2.0) + (-1.0);
    float _653 = (_646.y * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3698 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _670 = (_604 * (((cbMtdParam._m0[22u].z * _561) - _561) + _652)) + _561;
    float _671 = (_604 * (((cbMtdParam._m0[22u].z * _562) - _562) + _653)) + _562;
    float _672 = (_604 * (sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) - _527)) + _527;
    float _674 = cbMtdParam._m0[22u].x + _549.w;
    float _676 = gl_FragCoord.x * 0.125;
    float _678 = gl_FragCoord.y * 0.125;
    float _688 = fma(_672, _239 * NORMAL.x, fma(_671, _246 * TANGENT.x, (_232 * _224) * _670));
    float _691 = fma(_672, _239 * NORMAL.y, fma(_671, _246 * TANGENT.y, (_232 * _225) * _670));
    float _694 = fma(_672, _239 * NORMAL.z, fma(_671, _246 * TANGENT.z, (_232 * _226) * _670));
    float _698 = inversesqrt(dot(vec3(_688, _691, _694), vec3(_688, _691, _694)));
    float _699 = _698 * _688;
    float _700 = _698 * _691;
    float _701 = _698 * _694;
    float _3709 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _702 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3731 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3742 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3753 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_676, _678)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _724 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    vec4 _786 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_676, _678));
    float _788 = _786.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _942 = sqrt(((_775 * _775) + (_776 * _776)) + (_777 * _777));
        float _948 = (cbMatDynParam._m0[5u].x * _942) + cbMatDynParam._m0[5u].y;
        float _3764 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _953 = (cbMatDynParam._m0[5u].z * _942) + cbMatDynParam._m0[5u].w;
        float _3775 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) - _949)) + _949) < ((_788 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _799 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _800 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _818 = fma(_701, cbSceneParam._m0[5u].z, fma(_700, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _699));
    float _821 = fma(_701, cbSceneParam._m0[6u].z, fma(_700, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _699));
    float _824 = fma(_701, cbSceneParam._m0[7u].z, fma(_700, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _699));
    uint _837 = _271 + 9u;
    uint _838 = _837 + uint(cbMatDynParam._m0[0u].w);
    float _844 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_838].x;
    float _845 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_838].y;
    float _846 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_838].z;
    float _3786 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    vec4 _858 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _799, cbSceneParam._m0[86u].y * _800));
    float _862 = ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * TEXCOORD_5.w) * _858.x;
    float _863 = dot(vec3(_699, _700, _701), vec3(_782, _783, _784));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _699) - _782;
    float _871 = (_866 * _700) - _783;
    float _872 = (_866 * _701) - _784;
    float _876 = abs(dot(vec3(_782, _783, _784), vec3(_699, _700, _701)));
    float _3819 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_702);
    float _891 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _988 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _992 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _1017 = _923 + _699;
        float _1018 = _927 + _700;
        float _1019 = _931 + _701;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_699, _700, _701), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3867 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_699, _700, _701), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3900 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_699, _700, _701), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3933 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1298 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1302 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1306 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1329 = _923 + _699;
        float _1330 = _927 + _700;
        float _1331 = _931 + _701;
        float _1341 = fma(_1331, cbModelParam._m0[30u].z, fma(_1330, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1329)) - _1298;
        float _1342 = fma(_1331, cbModelParam._m0[31u].z, fma(_1330, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1329)) - _1302;
        float _1343 = fma(_1331, cbModelParam._m0[32u].z, fma(_1330, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1329)) - _1306;
        float _1347 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
        float _1360 = ((_1347 * _1341) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1298 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1347 * _1342) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1302 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1347 * _1343) / cbModelParam._m0[35u].z) + ((((((_1306 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        float _1397 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1364.x + (-0.5));
        float _1399 = _1397 * (_1364.y + (-0.5));
        float _1400 = _1397 * (_1364.z + (-0.5));
        float _1407 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1371.x + (-0.5));
        float _1409 = _1407 * (_1371.y + (-0.5));
        float _1410 = _1407 * (_1371.z + (-0.5));
        float _1417 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1378.x + (-0.5));
        float _1419 = _1417 * (_1378.y + (-0.5));
        float _1420 = _1417 * (_1378.z + (-0.5));
        float _1427 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1385.x + (-0.5));
        float _1429 = _1427 * (_1385.y + (-0.5));
        float _1430 = _1427 * (_1385.z + (-0.5));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = _1398 * 0.5;
        float _1435 = _1408 * 0.5;
        float _1436 = _1418 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_699, _700, _701), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3996 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1461 + 1.0))) + _1466) * _1431;
        float _1476 = _1399 * 0.5;
        float _1477 = _1409 * 0.5;
        float _1478 = _1419 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_699, _700, _701), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4029 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1503 + 1.0))) + _1508) * _1432;
        float _1518 = _1400 * 0.5;
        float _1519 = _1410 * 0.5;
        float _1520 = _1420 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_699, _700, _701), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4062 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1545 + 1.0))) + _1550) * _1433;
        _1567 = _1400;
        _1568 = _1399;
        _1569 = _1398;
        _1570 = _1410;
        _1571 = _1409;
        _1572 = _1408;
        _1573 = _1420;
        _1574 = _1419;
        _1575 = _1418;
        _1576 = _1433;
        _1577 = _1432;
        _1578 = _1431;
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
    }
    else
    {
        _1567 = _1260;
        _1568 = _1260;
        _1569 = _1260;
        _1570 = _1260;
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = 0.0;
        _1580 = 0.0;
        _1581 = 0.0;
    }
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1272)) + _1272;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1273)) + _1273;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1274)) + _1274;
    float _1614 = fma(_1593, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1591 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1593, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1591 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1593, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1591));
    float _1635 = _870 * 0.5;
    float _1636 = _871 * 0.5;
    float _1637 = _872 * 0.5;
    float _1638 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1641 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1644 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1678;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1651 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1655 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1659 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1666 = dot(vec4(cbModelParam._m0[39u]), vec4(_1635, _1636, _1637, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1689;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1680 = dot(vec4(cbModelParam._m0[40u]), vec4(_1635, _1636, _1637, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1693 = (_1689 * cbModelParam._m0[1u].x) + (_1678 * (1.0 - cbModelParam._m0[1u].x));
    float _1703 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _702);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1703 : min(cbModelParam._m0[25u].z, _1703));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1767 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1770 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1798 = frontier_phi_19_17_ladder;
        }
        float _2000;
        if (_1767 > 0.0)
        {
            _2000 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2000 = frontier_phi_28_24_ladder;
        }
        float _2243;
        if (_1770 > 0.0)
        {
            _2243 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2243 = frontier_phi_40_35_ladder;
        }
        float _2245 = isnan(_2000) ? _1798 : (isnan(_1798) ? _2000 : min(_1798, _2000));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1764) + _1753;
        float _2251 = (_2246 * _1767) + _1757;
        float _2252 = (_2246 * _1770) + _1761;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1704);
            frontier_phi_18_40_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_18_40_ladder_2;
        _1788 = frontier_phi_18_40_ladder_1;
        _1790 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1704);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _702);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1864 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1867 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _2005;
        if (_1861 > 0.0)
        {
            _2005 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2005 = frontier_phi_30_26_ladder;
        }
        float _2270;
        if (_1864 > 0.0)
        {
            _2270 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2270 = frontier_phi_42_37_ladder;
        }
        float _2475;
        if (_1867 > 0.0)
        {
            _2475 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2475 = frontier_phi_51_48_ladder;
        }
        float _2477 = isnan(_2270) ? _2005 : (isnan(_2005) ? _2270 : min(_2005, _2270));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1861) + _1850;
        float _2483 = (_2478 * _1864) + _1854;
        float _2484 = (_2478 * _1867) + _1858;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_27_51_ladder = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_27_51_ladder_2;
        _1888 = frontier_phi_27_51_ladder_1;
        _1890 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1795);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1902 = ((((1.0 - _891) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_891 * _878)) * _862;
    float _1903 = _1902 * ((cbModelParam._m0[1u].w * (_1886 - _1786)) + _1786);
    float _1904 = _1902 * ((cbModelParam._m0[1u].w * (_1888 - _1788)) + _1788);
    float _1905 = _1902 * ((cbModelParam._m0[1u].w * (_1890 - _1790)) + _1790);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    uvec4 _1924 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1926 = _1924.x * 14u;
    uint _1927 = _1926 + 13u;
    float _1934 = _862 + (-1.0);
    float _1939 = (cbLight._m0[_1927].x * _1934) + 1.0;
    float _1940 = (cbLight._m0[_1927].y * _1934) + 1.0;
    float _1941 = (cbLight._m0[_1927].z * _1934) + 1.0;
    float _1942 = (cbLight._m0[_1927].w * _1934) + 1.0;
    uint _1943 = _1926 + 5u;
    float _1949 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1953 = _1926 + 4u;
    float _1959 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1963 = _1926 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_699, _700, _701));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_699, _700, _701));
    float _4198 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _4209 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1943].x * _1949) * _1984) + ((cbLight._m0[_1953].x * _1959) * _1982);
    float _1992 = ((_1949 * cbLight._m0[_1943].y) * _1984) + ((_1959 * cbLight._m0[_1953].y) * _1982);
    float _1993 = ((_1949 * cbLight._m0[_1943].z) * _1984) + ((_1959 * cbLight._m0[_1953].z) * _1982);
    uvec4 _1997 = floatBitsToUint(cbLight._m0[_1926 + 12u]);
    bool _1999 = _1997.x == 0u;
    float _2010;
    float _2012;
    float _2014;
    if (_1999)
    {
        _2010 = _1991;
        _2012 = _1992;
        _2014 = _1993;
    }
    else
    {
        uint _2018 = _1926 + 6u;
        float _2034 = (dot(vec3(cbLight._m0[_1926 + 2u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2035 = _2034 * _2034;
        float _4220 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2037 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2010 = (((cbLight._m0[_2018].x * 0.3183098733425140380859375) * _2036) * _2037) + _1991;
        _2012 = (((cbLight._m0[_2018].y * 0.3183098733425140380859375) * _2036) * _2037) + _1992;
        _2014 = (((cbLight._m0[_2018].z * 0.3183098733425140380859375) * _2036) * _2037) + _1993;
    }
    bool _2017 = _1997.y == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2017)
    {
        _2055 = _2010;
        _2057 = _2012;
        _2059 = _2014;
    }
    else
    {
        uint _2214 = _1926 + 7u;
        float _2230 = (dot(vec3(cbLight._m0[_1926 + 3u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4236 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2233 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2055 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2010;
        _2057 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2012;
        _2059 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2014;
    }
    uint _2062 = _1926 + 8u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _702) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1926].x + _782;
    float _2078 = cbLight._m0[_1926].y + _783;
    float _2079 = cbLight._m0[_1926].z + _784;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_1926].xyz));
    float _4252 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2091 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2092 = dot(vec3(_699, _700, _701), vec3(_2084, _2085, _2086));
    float _4274 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2084, _2085, _2086));
    float _4285 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2076 * _2076;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2115 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2116 = 1.0 - _2076;
    float _2127 = (0.5 / (((_2091 * ((_2090 * _2116) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2116) + _2076) * _2090))) * _2090;
    float _4296 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    uint _2140 = _1926 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _702) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1963].x + _782;
    float _2154 = cbLight._m0[_1963].y + _783;
    float _2155 = cbLight._m0[_1963].z + _784;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_1963].xyz));
    float _4307 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2167 = dot(vec3(_699, _700, _701), vec3(_2160, _2161, _2162));
    float _4318 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2160, _2161, _2162));
    float _4329 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2152;
    float _2199 = (0.5 / (((_2091 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2189) + _2152) * _2166))) * _2166;
    float _4340 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2211 = (((_2188 * cbLight._m0[_2140].x) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].x) * _2129) * _1959);
    float _2212 = (((_2188 * cbLight._m0[_2140].y) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].y) * _2129) * _1959);
    float _2213 = (((_2188 * cbLight._m0[_2140].z) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].z) * _2129) * _1959);
    float _2275;
    float _2277;
    float _2279;
    if (_1999)
    {
        _2275 = _2211;
        _2277 = _2212;
        _2279 = _2213;
    }
    else
    {
        uint _2281 = _1926 + 2u;
        uint _2285 = _1926 + 10u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _702) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _782;
        float _2302 = cbLight._m0[_2281].y + _783;
        float _2303 = cbLight._m0[_2281].z + _784;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2281].xyz));
        float _4351 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2315 = dot(vec3(_699, _700, _701), vec3(_2308, _2309, _2310));
        float _4362 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4373 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2336 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2337 = 1.0 - _2300;
        float _2347 = (0.5 / (((_2091 * ((_2314 * _2337) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2337) + _2300) * _2314))) * _2314;
        float _4384 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2275 = (((_2336 * cbLight._m0[_2285].x) * _2349) * _2350) + _2211;
        _2277 = (((_2336 * cbLight._m0[_2285].y) * _2349) * _2350) + _2212;
        _2279 = (((_2336 * cbLight._m0[_2285].z) * _2349) * _2350) + _2213;
    }
    float _2385;
    float _2387;
    float _2389;
    if (_2017)
    {
        _2385 = _2275;
        _2387 = _2277;
        _2389 = _2279;
    }
    else
    {
        uint _2396 = _1926 + 3u;
        uint _2400 = _1926 + 11u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _702) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _782;
        float _2417 = cbLight._m0[_2396].y + _783;
        float _2418 = cbLight._m0[_2396].z + _784;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2396].xyz));
        float _4400 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2430 = dot(vec3(_699, _700, _701), vec3(_2423, _2424, _2425));
        float _4411 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4422 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2452 = 1.0 - _2415;
        float _2462 = (0.5 / (((_2091 * ((_2429 * _2452) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2452) + _2415) * _2429))) * _2429;
        float _4433 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2385 = (((_2451 * cbLight._m0[_2400].x) * _2464) * _2465) + _2275;
        _2387 = (((_2451 * cbLight._m0[_2400].y) * _2464) * _2465) + _2277;
        _2389 = (((_2451 * cbLight._m0[_2400].z) * _2464) * _2465) + _2279;
    }
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_1924.y == 0u)
    {
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2540;
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2540;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2540;
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.x;
        uint _2567 = uint((float(_2555.y) * floor(float(uint(cbSceneParam._m0[85u].y * _800) / _2556))) + floor(float(uint(cbSceneParam._m0[85u].x * _799) / _2556)));
        float _2577 = (log2(_2543 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2578 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        uint _2581 = uint(isnan(14.0) ? _2578 : (isnan(_2578) ? 14.0 : min(_2578, 14.0)));
        uvec4 _2586 = texelFetch(g_lightClusterGridBuffer, int(((_2581 << 2u) + (_2567 << 6u)) >> 2u));
        uint _2587 = _2586.x;
        uint _2588 = _2555.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2588 >> 4u) & 15u)) + 4294967295u) & _2587) == 0u) || ((_2588 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            uint _2847 = 0u;
            uint _2856;
            bool _2857;
            for (;;)
            {
                _2856 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                _2857 = _2856 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2857)
                {
                    frontier_phi_68_pred = _2841;
                    frontier_phi_68_pred_1 = _2846;
                    frontier_phi_68_pred_2 = _2845;
                    frontier_phi_68_pred_3 = _2844;
                    frontier_phi_68_pred_4 = _2843;
                    frontier_phi_68_pred_5 = _2842;
                }
                else
                {
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    uint _2992;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2856;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    for (;;)
                    {
                        uint _2996 = uint(findLSB(_2992)) + (_2847 << 5u);
                        uint _2993 = (_2992 + 4294967295u) & _2992;
                        uint _2998 = _2996 * 48u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3018 = (_2996 * 48u) + 4u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3037 = (_2996 * 48u) + 8u;
                        vec3 _3048 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x));
                        float _3052 = _3012.x - _2541;
                        float _3053 = _3012.y - _2542;
                        float _3054 = _3012.z - _2543;
                        float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                        float _3058 = inversesqrt(_3055);
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3062 = dot(vec3(_818, _821, _824), vec3(_3059, _3060, _3061));
                        float _3067 = 1.0 - (_3055 * _3012.w);
                        float _4459 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3069 = sqrt(_3055) * _3031.w;
                        float _3072 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _3062) + _3073;
                        float _3079 = _3069 * _3069;
                        float _3083 = ((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3068) / ((_3079 * 0.699999988079071044921875) + 1.0);
                        float _3087 = (-0.0) - _2541;
                        float _3088 = (-0.0) - _2542;
                        float _3089 = (-0.0) - _2543;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3104 = exp2(log2(1.0 / ((_3079 * 3.5) + 5.0)) * 0.25);
                        float _3105 = 1.0 - _878;
                        float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                        float _3113 = _3112 * _3112;
                        float _3114 = _3113 * _3113;
                        float _3115 = _3094 + _3059;
                        float _3116 = _3095 + _3060;
                        float _3117 = _3096 + _3061;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3125 = dot(vec3(_818, _821, _824), vec3(_3094, _3095, _3096));
                        float _4475 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3129 = dot(vec3(_818, _821, _824), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                        float _4486 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                        float _3137 = _3072 * _3113;
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3062) + _3138;
                        float _4497 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3143 = 1.0 - _3113;
                        float _3153 = (0.5 / (((_3142 * ((_3128 * _3143) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3113) * _3128))) * _3142;
                        float _4508 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3164 = (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3136 * _3136) * ((_3079 * 2.1991131305694580078125) + 3.141590118408203125))) * _3068;
                        _2916 = (_3083 * _3031.x) + _2989;
                        _2917 = (_3083 * _3031.y) + _2990;
                        _2918 = (_3083 * _3031.z) + _2991;
                        _2913 = (_3164 * _3048.x) + _2986;
                        _2914 = (_3164 * _3048.y) + _2987;
                        _2915 = (_3164 * _3048.z) + _2988;
                        if (_2993 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2993;
                        }
                    }
                    frontier_phi_68_pred = _2913;
                    frontier_phi_68_pred_1 = _2918;
                    frontier_phi_68_pred_2 = _2917;
                    frontier_phi_68_pred_3 = _2916;
                    frontier_phi_68_pred_4 = _2915;
                    frontier_phi_68_pred_5 = _2914;
                }
                _2689 = frontier_phi_68_pred;
                _2699 = frontier_phi_68_pred_1;
                _2697 = frontier_phi_68_pred_2;
                _2695 = frontier_phi_68_pred_3;
                _2693 = frontier_phi_68_pred_4;
                _2691 = frontier_phi_68_pred_5;
                uint _2848 = _2847 + 1u;
                if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2841 = _2689;
                    _2842 = _2691;
                    _2843 = _2693;
                    _2844 = _2695;
                    _2845 = _2697;
                    _2846 = _2699;
                    _2847 = _2848;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((4294967295u << _2705) & _2587) == 0u)
        {
            _2809 = _2688;
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
        }
        else
        {
            float _2834 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
            float _2835 = _2834 * _2541;
            float _2836 = _2834 * _2542;
            float _2837 = _2834 * _2543;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2969 = _2688;
                float _2970 = _2690;
                float _2971 = _2692;
                float _2972 = _2694;
                float _2973 = _2696;
                float _2974 = _2698;
                uint _2975 = _2705;
                uint _2984;
                bool _2985;
                for (;;)
                {
                    _2984 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                    _2985 = _2984 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2985)
                    {
                        frontier_phi_79_pred = _2974;
                        frontier_phi_79_pred_1 = _2973;
                        frontier_phi_79_pred_2 = _2972;
                        frontier_phi_79_pred_3 = _2971;
                        frontier_phi_79_pred_4 = _2970;
                        frontier_phi_79_pred_5 = _2969;
                    }
                    else
                    {
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3191 = _2969;
                        float _3192 = _2970;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        uint _3197 = _2984;
                        uint _3198;
                        vec4 _3223;
                        float _3224;
                        vec4 _3239;
                        vec3 _3251;
                        vec4 _3266;
                        vec4 _3281;
                        float _3327;
                        bool _3328;
                        for (;;)
                        {
                            uint _3208 = ((_2975 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3197));
                            _3198 = (_3197 + 4294967295u) & _3197;
                            uint _3210 = _3208 * 40u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3224 = _3223.w;
                            uint _3226 = (_3208 * 40u) + 4u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3241 = (_3208 * 40u) + 8u;
                            _3251 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x));
                            uint _3253 = (_3208 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3208 * 40u) + 20u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3283 = (_3208 * 40u) + 24u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3302 = (_3208 * 40u) + 28u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            _3327 = fma(_2543, _3315.z, fma(_2542, _3315.y, _3315.x * _2541)) + _3315.w;
                            _3328 = !((fma(_2543, _3296.z, fma(_2542, _3296.y, _3296.x * _2541)) + _3296.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3328)
                            {
                                float _3355 = _3223.x - _2541;
                                float _3356 = _3223.y - _2542;
                                float _3357 = _3223.z - _2543;
                                float _3358 = dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357));
                                float _3361 = inversesqrt(_3358);
                                float _3362 = _3361 * _3355;
                                float _3363 = _3361 * _3356;
                                float _3364 = _3361 * _3357;
                                float _3368 = 1.0 - (_3358 / (_3224 * _3224));
                                float _4519 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3373 = sqrt(_3358) * _3239.w;
                                float _3375 = 1.39999997615814208984375 / (_3373 + 1.39999997615814208984375);
                                float _3376 = _3375 * _3375;
                                float _3379 = ((1.0 - _3376) * dot(vec3(_3362, _3363, _3364), vec3(_818, _821, _824))) + _3376;
                                float _3382 = _3373 * _3373;
                                float _3386 = (fma(_2543, _3266.z, fma(_2542, _3266.y, _3266.x * _2541)) + _3266.w) / _3327;
                                float _3387 = (fma(_2543, _3281.z, fma(_2542, _3281.y, _3281.x * _2541)) + _3281.w) / _3327;
                                float _3391 = 1.0 - dot(vec2(_3386, _3387), vec2(_3386, _3387));
                                float _4535 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3393 = _3392 * (((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3369) / ((_3382 * 0.699999988079071044921875) + 1.0));
                                float _3405 = exp2(log2(1.0 / ((_3382 * 3.5) + 5.0)) * 0.25);
                                float _3406 = 1.0 - _878;
                                float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                                float _3414 = _3413 * _3413;
                                float _3415 = _3414 * _3414;
                                float _3416 = _3362 - _2835;
                                float _3417 = _3363 - _2836;
                                float _3418 = _3364 - _2837;
                                float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                                float _3426 = dot(vec3(_818, _821, _824), vec3((-0.0) - _2835, (-0.0) - _2836, (-0.0) - _2837));
                                float _4546 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3430 = dot(vec3(_818, _821, _824), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                                float _4557 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                                float _3438 = _3375 * _3414;
                                float _3439 = _3438 * _3438;
                                float _3445 = ((1.0 - _3439) * dot(vec3(_818, _821, _824), vec3(_3362, _3363, _3364))) + _3439;
                                float _4568 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3447 = 1.0 - _3414;
                                float _3457 = (0.5 / (((_3446 * ((_3429 * _3447) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3414) * _3429))) * _3446;
                                float _4579 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3467 = (_3392 * _3369) * (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3437 * _3437) * ((_3382 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3393 * _3239.y;
                                frontier_phi_85_pred_1 = _3393 * _3239.x;
                                frontier_phi_85_pred_2 = _3467 * _3251.z;
                                frontier_phi_85_pred_3 = _3467 * _3251.y;
                                frontier_phi_85_pred_4 = _3467 * _3251.x;
                                frontier_phi_85_pred_5 = _3393 * _3239.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3475 = frontier_phi_85_pred;
                            _3474 = frontier_phi_85_pred_1;
                            _3473 = frontier_phi_85_pred_2;
                            _3472 = frontier_phi_85_pred_3;
                            _3471 = frontier_phi_85_pred_4;
                            _3476 = frontier_phi_85_pred_5;
                            _3181 = _3474 + _3194;
                            _3182 = _3475 + _3195;
                            _3183 = _3476 + _3196;
                            _3178 = _3471 + _3191;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            if (_3198 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3198;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3183;
                        frontier_phi_79_pred_1 = _3182;
                        frontier_phi_79_pred_2 = _3181;
                        frontier_phi_79_pred_3 = _3180;
                        frontier_phi_79_pred_4 = _3179;
                        frontier_phi_79_pred_5 = _3178;
                    }
                    _2820 = frontier_phi_79_pred;
                    _2818 = frontier_phi_79_pred_1;
                    _2816 = frontier_phi_79_pred_2;
                    _2814 = frontier_phi_79_pred_3;
                    _2812 = frontier_phi_79_pred_4;
                    _2810 = frontier_phi_79_pred_5;
                    uint _2976 = _2975 + 1u;
                    if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2969 = _2810;
                        _2970 = _2812;
                        _2971 = _2814;
                        _2972 = _2816;
                        _2973 = _2818;
                        _2974 = _2820;
                        _2975 = _2976;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2814;
                frontier_phi_60_61_ladder_1 = _2820;
                frontier_phi_60_61_ladder_2 = _2818;
                frontier_phi_60_61_ladder_3 = _2816;
                frontier_phi_60_61_ladder_4 = _2812;
                frontier_phi_60_61_ladder_5 = _2810;
            }
            else
            {
                frontier_phi_60_61_ladder = _2692;
                frontier_phi_60_61_ladder_1 = _2698;
                frontier_phi_60_61_ladder_2 = _2696;
                frontier_phi_60_61_ladder_3 = _2694;
                frontier_phi_60_61_ladder_4 = _2690;
                frontier_phi_60_61_ladder_5 = _2688;
            }
            _2809 = frontier_phi_60_61_ladder_5;
            _2811 = frontier_phi_60_61_ladder_4;
            _2813 = frontier_phi_60_61_ladder;
            _2815 = frontier_phi_60_61_ladder_3;
            _2817 = frontier_phi_60_61_ladder_2;
            _2819 = frontier_phi_60_61_ladder_1;
        }
        float _2824 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2600 = (_2824 * _2815) + _2055;
        _2602 = (_2824 * _2817) + _2057;
        _2604 = (_2824 * _2819) + _2059;
        _2606 = ((_2809 * 0.039999999105930328369140625) * _2824) + _2385;
        _2608 = ((_2811 * 0.039999999105930328369140625) * _2824) + _2387;
        _2610 = ((_2813 * 0.039999999105930328369140625) * _2824) + _2389;
    }
    else
    {
        _2600 = _2055;
        _2602 = _2057;
        _2604 = _2059;
        _2606 = _2385;
        _2608 = _2387;
        _2610 = _2389;
    }
    float _4595 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4606 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4617 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _2627 = ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2600 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _862))) + ((_2606 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1693)) * cbPerFrame._m0[3u].x);
    float _2628 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2602 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _862))) + ((_2608 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1693)) * cbPerFrame._m0[3u].x);
    float _2629 = ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2604 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _862))) + ((_2610 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1693)) * cbPerFrame._m0[3u].x);
    uint _2630 = _271 + 6u;
    float _2638 = _799 / cbSceneParam._m0[86u].x;
    float _2639 = _800 / cbSceneParam._m0[86u].y;
    vec4 _2653 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, (log2((isnan(cbSceneParam._m0[77u].w) ? _724 : (isnan(_724) ? cbSceneParam._m0[77u].w : min(_724, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2655 = _2653.x;
    float _2656 = _2653.y;
    float _2657 = _2653.z;
    float _2658 = _2653.w;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_724 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_724) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _724 : min(cbSceneParam._m0[80u].w, _724));
        float _2714 = _2713 / _724;
        float _2725 = _2714 * _775;
        float _2726 = _776 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2729 = _2714 * _777;
        float _2731 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2732 = _2731 + cbSceneParam._m0[79u].w;
        float _2733 = cbSceneParam._m0[79u].w - _2726;
        float _2739 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2729 * _2729));
        float _2742 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2739;
        float _2747 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2749 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2926;
        if (abs((_2727 - _2731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2926 = ((((_2732 > 0.0) ? exp2(_2747 * _2732) : (2.0 - exp2(_2749 * _2732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2742;
        }
        else
        {
            float _2870 = 1.0 / cbSceneParam._m0[80u].x;
            float _2871 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : max(_2732, _2733));
            float _2872 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : min(_2732, _2733));
            float _2881 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : min(_2871, 0.0));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            _2926 = ((abs(_2739 / _2727) * cbSceneParam._m0[80u].y) * ((((_2881 - _2882) * 2.0) - ((exp2(_2747 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)))) - exp2(_2747 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))))) * _2870)) - ((exp2(_2749 * _2881) - exp2(_2749 * _2882)) * _2870))) + (_2742 * cbSceneParam._m0[80u].z);
        }
        vec4 _2928 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, 1.0), 0.0);
        float _2937 = exp2((_2926 * (-1.44269502162933349609375)) * (1.0 - _2928.w));
        float _2938 = log2(_2937);
        float _2954 = log2(_2658);
        _2751 = (exp2(_2954 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].x)) * _2928.x) / cbSceneParam._m0[78u].x)) + _2655;
        _2753 = (exp2(_2954 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].y)) * _2928.y) / cbSceneParam._m0[78u].y)) + _2656;
        _2755 = (exp2(_2954 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].z)) * _2928.z) / cbSceneParam._m0[78u].z)) + _2657;
        _2757 = _2937 * _2658;
    }
    else
    {
        _2751 = _2655;
        _2753 = _2656;
        _2755 = _2657;
        _2757 = _2658;
    }
    bool _2964;
    vec4 _2767;
    vec4 _2789;
    float _2791;
    float _2795;
    float _2796;
    float _2797;
    float _2798;
    bool _2808;
    for (;;)
    {
        _2767 = cbMatDynParam._m0[0u];
        float _2769 = roundEven(_2767.y);
        bool _2770 = _2769 == 3.0;
        float _2771 = log2(_2757);
        float _2778 = exp2(_2771 * cbSceneParam._m0[78u].x) * _2627;
        float _2779 = exp2(_2771 * cbSceneParam._m0[78u].y) * _2628;
        float _2780 = exp2(_2771 * cbSceneParam._m0[78u].z) * _2629;
        float _2787 = _788 + (-0.5);
        _2789 = cbMtdParam._m0[1u];
        _2791 = _2789.y * _2787;
        float _2794 = (_2769 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2795 = _2794 * (_2770 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2751)));
        _2796 = _2794 * (_2770 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2753)));
        _2797 = _2794 * (_2770 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2755)));
        _2798 = _2787 * 0.999000012874603271484375;
        _2808 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2808)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _2798) < 0.5)
            {
                _2964 = true;
                break;
            }
        }
        uint _2905 = _837 + uint(_2767.w);
        if ((cbInstanceData._m0[_2905].w < 1.0) && ((cbInstanceData._m0[_2905].w + _2798) < 0.5))
        {
            _2964 = true;
            break;
        }
        if ((_2791 + 1.0) < _2789.x)
        {
            _2964 = true;
            break;
        }
        _2964 = false;
        break;
    }
    float _3169;
    if (_2964)
    {
        discard_state = true;
        _3169 = 0.0;
    }
    else
    {
        _3169 = cbInstanceData._m0[_2630].w;
    }
    SV_Target.x = _2795;
    SV_Target.y = _2796;
    SV_Target.z = _2797;
    SV_Target.w = _3169;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2630].w;
    discard_exit();
}


