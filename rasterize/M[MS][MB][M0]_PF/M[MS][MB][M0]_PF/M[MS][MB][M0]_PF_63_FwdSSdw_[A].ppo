#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1054;
float _3439;
float _3440;
float _3441;
float _3442;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _334 = _332.x;
    float _347 = dot(vec4(_334, _332.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _364 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_334 - _347) * cbMtdParam._m0[24u].x) + _347) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3451 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _372 = (_365 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _373 = (_365 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _374 = (_365 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _387 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _406 = _404.x;
    float _407 = _404.y;
    float _408 = _404.z;
    float _417 = ((_387.z - _408) * _365) + _408;
    float _420 = ((((_387.x - _406) * _365) + _406) * 2.0) + (-1.0);
    float _422 = ((((_387.y - _407) * _365) + _407) * 2.0) + (-1.0);
    float _423 = dot(vec2(_420, _422), vec2(_420, _422));
    float _3462 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))));
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _456 = (((_444.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _420;
    float _457 = (((_444.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _422;
    float _461 = (cbMtdParam._m0[19u].w * (_444.z - _417)) + _417;
    float _466 = cbMtdParam._m0[22u].x + _444.w;
    float _468 = gl_FragCoord.x * 0.125;
    float _470 = gl_FragCoord.y * 0.125;
    float _481 = fma(_428, _215 * NORMAL.x, fma(_457, _222 * TANGENT.x, (_208 * _200) * _456));
    float _484 = fma(_428, _215 * NORMAL.y, fma(_457, _222 * TANGENT.y, (_208 * _201) * _456));
    float _487 = fma(_428, _215 * NORMAL.z, fma(_457, _222 * TANGENT.z, (_208 * _202) * _456));
    float _491 = inversesqrt(dot(vec3(_481, _484, _487), vec3(_481, _484, _487)));
    float _492 = _491 * _481;
    float _493 = _491 * _484;
    float _494 = _491 * _487;
    float _3473 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _495 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3495 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3506 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3517 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_468, _470)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _517 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _569 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _559);
    float _570 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _559);
    float _571 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _559);
    float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
    float _576 = _569 * _575;
    float _577 = _570 * _575;
    float _578 = _571 * _575;
    vec4 _580 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_468, _470));
    float _582 = _580.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _736 = sqrt(((_569 * _569) + (_570 * _570)) + (_571 * _571));
        float _742 = (cbMatDynParam._m0[5u].x * _736) + cbMatDynParam._m0[5u].y;
        float _3528 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _747 = (cbMatDynParam._m0[5u].z * _736) + cbMatDynParam._m0[5u].w;
        float _3539 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) - _743)) + _743) < ((_582 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _593 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _594 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _612 = fma(_494, cbSceneParam._m0[5u].z, fma(_493, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _492));
    float _615 = fma(_494, cbSceneParam._m0[6u].z, fma(_493, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _492));
    float _618 = fma(_494, cbSceneParam._m0[7u].z, fma(_493, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _492));
    uint _631 = _228 + 9u;
    uint _632 = _631 + uint(cbMatDynParam._m0[0u].w);
    float _638 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_632].x;
    float _639 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_632].y;
    float _640 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_632].z;
    float _3550 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    vec4 _652 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _593, cbSceneParam._m0[86u].y * _594));
    float _656 = ((isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * TEXCOORD_5.w) * _652.x;
    float _657 = dot(vec3(_492, _493, _494), vec3(_576, _577, _578));
    float _660 = _657 * 2.0;
    float _664 = (_660 * _492) - _576;
    float _665 = (_660 * _493) - _577;
    float _666 = (_660 * _494) - _578;
    float _670 = abs(dot(vec3(_576, _577, _578), vec3(_492, _493, _494)));
    float _3583 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _672 = sqrt(_495);
    float _685 = exp2((_672 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_672 * 3.0));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1053;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _778 = fma(_725, cbModelParam._m0[26u].z, fma(_721, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717));
        float _782 = fma(_725, cbModelParam._m0[27u].z, fma(_721, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717));
        float _786 = fma(_725, cbModelParam._m0[28u].z, fma(_721, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717));
        float _811 = _717 + _492;
        float _812 = _721 + _493;
        float _813 = _725 + _494;
        float _823 = fma(_813, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811)) - _778;
        float _824 = fma(_813, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811)) - _782;
        float _825 = fma(_813, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811)) - _786;
        float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
        float _842 = ((_829 * _823) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_778 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_829 * _824) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_782 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_829 * _825) / cbModelParam._m0[34u].z) + ((((((_786 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        float _881 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_847.x + (-0.5));
        float _883 = _881 * (_847.y + (-0.5));
        float _884 = _881 * (_847.z + (-0.5));
        float _891 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_854.x + (-0.5));
        float _893 = _891 * (_854.y + (-0.5));
        float _894 = _891 * (_854.z + (-0.5));
        float _901 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_861.x + (-0.5));
        float _903 = _901 * (_861.y + (-0.5));
        float _904 = _901 * (_861.z + (-0.5));
        float _911 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_868.x + (-0.5));
        float _913 = _911 * (_868.y + (-0.5));
        float _914 = _911 * (_868.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _935 = (dot(vec3(_492, _493, _494), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _945 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3631 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_947 + 1.0))) + _952) * _915;
        float _962 = _883 * 0.5;
        float _963 = _893 * 0.5;
        float _964 = _903 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_492, _493, _494), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3664 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_989 + 1.0))) + _994) * _916;
        float _1004 = _884 * 0.5;
        float _1005 = _894 * 0.5;
        float _1006 = _904 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_492, _493, _494), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3697 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1031 + 1.0))) + _1036) * _917;
        _1053 = _884;
        _1055 = _883;
        _1056 = _882;
        _1057 = _894;
        _1058 = _893;
        _1059 = _892;
        _1060 = _904;
        _1061 = _903;
        _1062 = _902;
        _1063 = _917;
        _1064 = _916;
        _1065 = _915;
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _1054;
        _1055 = _1054;
        _1056 = _1054;
        _1057 = _1054;
        _1058 = _1054;
        _1059 = _1054;
        _1060 = _1054;
        _1061 = _1054;
        _1062 = _1054;
        _1063 = _1054;
        _1064 = _1054;
        _1065 = _1054;
        _1066 = 0.0;
        _1067 = 0.0;
        _1068 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_725, cbModelParam._m0[30u].z, fma(_721, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _717));
        float _1096 = fma(_725, cbModelParam._m0[31u].z, fma(_721, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _717));
        float _1100 = fma(_725, cbModelParam._m0[32u].z, fma(_721, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _717));
        float _1123 = _717 + _492;
        float _1124 = _721 + _493;
        float _1125 = _725 + _494;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_492, _493, _494), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3760 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_492, _493, _494), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3793 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_492, _493, _494), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3826 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1054;
        _1362 = _1054;
        _1363 = _1054;
        _1364 = _1054;
        _1365 = _1054;
        _1366 = _1054;
        _1367 = _1054;
        _1368 = _1054;
        _1369 = _1054;
        _1370 = _1054;
        _1371 = _1054;
        _1372 = _1054;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1066)) + _1066;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1067)) + _1067;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1068)) + _1068;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _664 * 0.5;
    float _1430 = _665 * 0.5;
    float _1431 = _666 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1053, _1057, _1060, _1063));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _495);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1547 = fma(_725, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717)) + cbModelParam._m0[13u].w;
        float _1551 = fma(_725, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717)) + cbModelParam._m0[14u].w;
        float _1555 = fma(_725, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717)) + cbModelParam._m0[15u].w;
        float _1558 = fma(_666, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664));
        float _1561 = fma(_666, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664));
        float _1564 = fma(_666, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664));
        float _1592;
        if (_1558 > 0.0)
        {
            _1592 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1592 = frontier_phi_19_17_ladder;
        }
        float _1815;
        if (_1561 > 0.0)
        {
            _1815 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1815 = frontier_phi_28_24_ladder;
        }
        float _2061;
        if (_1564 > 0.0)
        {
            _2061 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2061 = frontier_phi_40_35_ladder;
        }
        float _2063 = isnan(_1815) ? _1592 : (isnan(_1592) ? _1815 : min(_1592, _1815));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1558) + _1547;
        float _2069 = (_2064 * _1561) + _1551;
        float _2070 = (_2064 * _1564) + _1555;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2073 = (-1.0) - _2071;
        float _2075 = _2071 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2070 > _2075) || ((_2070 < _2073) || ((_2069 > _2075) || ((_2069 < _2073) || ((_2068 < _2073) || (_2068 > _2075))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2194 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2070, cbModelParam._m0[9u].z, fma(_2069, cbModelParam._m0[9u].y, _2068 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2070, cbModelParam._m0[10u].z, fma(_2069, cbModelParam._m0[10u].y, _2068 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2070, cbModelParam._m0[11u].z, fma(_2069, cbModelParam._m0[11u].y, _2068 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_18_40_ladder = _2194.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2194.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2194.x * cbModelParam._m0[1u].y;
        }
        _1580 = frontier_phi_18_40_ladder_2;
        _1582 = frontier_phi_18_40_ladder_1;
        _1584 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_664, _665, _666), _1498);
        _1580 = _1568.x * cbModelParam._m0[1u].y;
        _1582 = _1568.y * cbModelParam._m0[1u].y;
        _1584 = _1568.z * cbModelParam._m0[1u].y;
    }
    float _1588 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _495);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1588 : min(cbModelParam._m0[25u].w, _1588));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1644 = fma(_725, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717)) + cbModelParam._m0[21u].w;
        float _1648 = fma(_725, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717)) + cbModelParam._m0[22u].w;
        float _1652 = fma(_725, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717)) + cbModelParam._m0[23u].w;
        float _1655 = fma(_666, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664));
        float _1658 = fma(_666, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664));
        float _1661 = fma(_666, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664));
        float _1820;
        if (_1655 > 0.0)
        {
            _1820 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1820 = frontier_phi_30_26_ladder;
        }
        float _2088;
        if (_1658 > 0.0)
        {
            _2088 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2088 = frontier_phi_42_37_ladder;
        }
        float _2293;
        if (_1661 > 0.0)
        {
            _2293 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2293 = frontier_phi_51_48_ladder;
        }
        float _2295 = isnan(_2088) ? _1820 : (isnan(_1820) ? _2088 : min(_1820, _2088));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1655) + _1644;
        float _2301 = (_2296 * _1658) + _1648;
        float _2302 = (_2296 * _1661) + _1652;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2303;
        float _2306 = _2303 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2302 > _2306) || ((_2302 < _2304) || ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 < _2304) || (_2300 > _2306))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2302, cbModelParam._m0[17u].z, fma(_2301, cbModelParam._m0[17u].y, _2300 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2302, cbModelParam._m0[18u].z, fma(_2301, cbModelParam._m0[18u].y, _2300 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2302, cbModelParam._m0[19u].z, fma(_2301, cbModelParam._m0[19u].y, _2300 * cbModelParam._m0[19u].x))), _1589);
            frontier_phi_27_51_ladder = _2501.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2501.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2501.x * cbModelParam._m0[1u].z;
        }
        _1680 = frontier_phi_27_51_ladder_2;
        _1682 = frontier_phi_27_51_ladder_1;
        _1684 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_664, _665, _666), _1589);
        _1680 = _1664.x * cbModelParam._m0[1u].z;
        _1682 = _1664.y * cbModelParam._m0[1u].z;
        _1684 = _1664.z * cbModelParam._m0[1u].z;
    }
    float _1696 = ((((1.0 - _685) * ((_672 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_685 * _672)) * _656;
    float _1697 = _1696 * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1698 = _1696 * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1699 = _1696 * ((cbModelParam._m0[1u].w * (_1684 - _1584)) + _1584);
    float _1702 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, _1697 * cbSceneParam._m0[91u].x));
    vec4 _1716 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_593, _594));
    float _1718 = _1716.w;
    float _1730 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1718);
    float _1731 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1718);
    float _1732 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1718);
    uvec4 _1736 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1738 = _1736.x * 14u;
    uint _1739 = _1738 + 13u;
    float _1746 = _656 + (-1.0);
    float _1751 = (cbLight._m0[_1739].x * _1746) + 1.0;
    float _1752 = (cbLight._m0[_1739].y * _1746) + 1.0;
    float _1753 = (cbLight._m0[_1739].z * _1746) + 1.0;
    float _1754 = (cbLight._m0[_1739].w * _1746) + 1.0;
    uint _1755 = _1738 + 5u;
    float _1761 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1765 = _1738 + 4u;
    float _1774 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1778 = _1738 | 1u;
    float _1789 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_492, _493, _494));
    float _1792 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_492, _493, _494));
    float _3962 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _3973 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1797 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1799 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.3183098733425140380859375;
    float _1806 = ((cbLight._m0[_1755].x * _1761) * _1799) + (((cbLight._m0[_1765].x * _1730) * _1774) * _1797);
    float _1807 = ((_1761 * cbLight._m0[_1755].y) * _1799) + (((cbLight._m0[_1765].y * _1731) * _1774) * _1797);
    float _1808 = ((_1761 * cbLight._m0[_1755].z) * _1799) + (((cbLight._m0[_1765].z * _1732) * _1774) * _1797);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1738 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1825;
    float _1827;
    float _1829;
    if (_1814)
    {
        _1825 = _1806;
        _1827 = _1807;
        _1829 = _1808;
    }
    else
    {
        uint _1833 = _1738 + 6u;
        float _1849 = (dot(vec3(cbLight._m0[_1738 + 2u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3984 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1852 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _1825 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1806;
        _1827 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1807;
        _1829 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1808;
    }
    bool _1832 = _1812.y == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1832)
    {
        _1870 = _1825;
        _1872 = _1827;
        _1874 = _1829;
    }
    else
    {
        uint _2032 = _1738 + 7u;
        float _2048 = (dot(vec3(cbLight._m0[_1738 + 3u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4000 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2051 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _1870 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _1825;
        _1872 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _1827;
        _1874 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _1829;
    }
    uint _1877 = _1738 + 8u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1738].w)) * _495) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1738].x + _576;
    float _1893 = cbLight._m0[_1738].y + _577;
    float _1894 = cbLight._m0[_1738].z + _578;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1738].xyz));
    float _4016 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _1906 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1907 = dot(vec3(_492, _493, _494), vec3(_1899, _1900, _1901));
    float _4038 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1911 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_1899, _1900, _1901));
    float _4049 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1915 = _1891 * _1891;
    float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
    float _1930 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1931 = 1.0 - _1891;
    float _1942 = (0.5 / (((_1906 * ((_1905 * _1931) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _1931) + _1891) * _1905))) * _1905;
    float _4060 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
    uint _1958 = _1738 + 9u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _495) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1778].x + _576;
    float _1972 = cbLight._m0[_1778].y + _577;
    float _1973 = cbLight._m0[_1778].z + _578;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1778].xyz));
    float _4071 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1985 = dot(vec3(_492, _493, _494), vec3(_1978, _1979, _1980));
    float _4082 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_1978, _1979, _1980));
    float _4093 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1970 * _1970;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = 1.0 - _1970;
    float _2017 = (0.5 / (((_1906 * ((_1984 * _2007) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2007) + _1970) * _1984))) * _1984;
    float _4104 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    float _2029 = (((_2006 * cbLight._m0[_1958].x) * _2019) * _1761) + ((((cbLight._m0[_1877].x * _1730) * _1930) * _1944) * _1774);
    float _2030 = (((_2006 * cbLight._m0[_1958].y) * _2019) * _1761) + ((((cbLight._m0[_1877].y * _1731) * _1930) * _1944) * _1774);
    float _2031 = (((_2006 * cbLight._m0[_1958].z) * _2019) * _1761) + ((((cbLight._m0[_1877].z * _1732) * _1930) * _1944) * _1774);
    float _2093;
    float _2095;
    float _2097;
    if (_1814)
    {
        _2093 = _2029;
        _2095 = _2030;
        _2097 = _2031;
    }
    else
    {
        uint _2099 = _1738 + 2u;
        uint _2103 = _1738 + 10u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _495) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _576;
        float _2120 = cbLight._m0[_2099].y + _577;
        float _2121 = cbLight._m0[_2099].z + _578;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2099].xyz));
        float _4115 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2133 = dot(vec3(_492, _493, _494), vec3(_2126, _2127, _2128));
        float _4126 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4137 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1906 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2155) + _2118) * _2132))) * _2132;
        float _4148 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _2093 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _2029;
        _2095 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _2030;
        _2097 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _2031;
    }
    float _2203;
    float _2205;
    float _2207;
    if (_1832)
    {
        _2203 = _2093;
        _2205 = _2095;
        _2207 = _2097;
    }
    else
    {
        uint _2214 = _1738 + 3u;
        uint _2218 = _1738 + 11u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _495) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _576;
        float _2235 = cbLight._m0[_2214].y + _577;
        float _2236 = cbLight._m0[_2214].z + _578;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2214].xyz));
        float _4164 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2248 = dot(vec3(_492, _493, _494), vec3(_2241, _2242, _2243));
        float _4175 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4186 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2270 = 1.0 - _2233;
        float _2280 = (0.5 / (((_1906 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2270) + _2233) * _2247))) * _2247;
        float _4197 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _2203 = (((_2269 * cbLight._m0[_2218].x) * _2282) * _2283) + _2093;
        _2205 = (((_2269 * cbLight._m0[_2218].y) * _2282) * _2283) + _2095;
        _2207 = (((_2269 * cbLight._m0[_2218].z) * _2282) * _2283) + _2097;
    }
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_1736.y == 0u)
    {
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2358;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2358;
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2358;
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.x;
        uint _2385 = uint((float(_2373.y) * floor(float(uint(cbSceneParam._m0[85u].y * _594) / _2374))) + floor(float(uint(cbSceneParam._m0[85u].x * _593) / _2374)));
        float _2395 = (log2(_2361 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2396 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        uint _2399 = uint(isnan(14.0) ? _2396 : (isnan(_2396) ? 14.0 : min(_2396, 14.0)));
        uvec4 _2404 = texelFetch(g_lightClusterGridBuffer, int(((_2399 << 2u) + (_2385 << 6u)) >> 2u));
        uint _2405 = _2404.x;
        uint _2406 = _2373.z;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((((1u << ((_2406 >> 4u) & 15u)) + 4294967295u) & _2405) == 0u) || ((_2406 & 240u) == 0u))
        {
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
        }
        else
        {
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            uint _2665 = 0u;
            uint _2674;
            bool _2675;
            for (;;)
            {
                _2674 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2665 << 2u)) >> 2u)).x;
                _2675 = _2674 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2675)
                {
                    frontier_phi_68_pred = _2659;
                    frontier_phi_68_pred_1 = _2664;
                    frontier_phi_68_pred_2 = _2663;
                    frontier_phi_68_pred_3 = _2662;
                    frontier_phi_68_pred_4 = _2661;
                    frontier_phi_68_pred_5 = _2660;
                }
                else
                {
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    uint _2810;
                    _2804 = _2659;
                    _2805 = _2660;
                    _2806 = _2661;
                    _2807 = _2662;
                    _2808 = _2663;
                    _2809 = _2664;
                    _2810 = _2674;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    for (;;)
                    {
                        uint _2814 = uint(findLSB(_2810)) + (_2665 << 5u);
                        uint _2811 = (_2810 + 4294967295u) & _2810;
                        uint _2816 = _2814 * 48u;
                        vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2836 = (_2814 * 48u) + 4u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        uint _2855 = (_2814 * 48u) + 8u;
                        vec3 _2866 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x));
                        float _2870 = _2830.x - _2359;
                        float _2871 = _2830.y - _2360;
                        float _2872 = _2830.z - _2361;
                        float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                        float _2876 = inversesqrt(_2873);
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2880 = dot(vec3(_612, _615, _618), vec3(_2877, _2878, _2879));
                        float _2885 = 1.0 - (_2873 * _2830.w);
                        float _4223 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2887 = sqrt(_2873) * _2849.w;
                        float _2890 = 1.39999997615814208984375 / (_2887 + 1.39999997615814208984375);
                        float _2891 = _2890 * _2890;
                        float _2894 = ((1.0 - _2891) * _2880) + _2891;
                        float _2897 = _2887 * _2887;
                        float _2901 = ((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2886) / ((_2897 * 0.699999988079071044921875) + 1.0);
                        float _2905 = (-0.0) - _2359;
                        float _2906 = (-0.0) - _2360;
                        float _2907 = (-0.0) - _2361;
                        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2922 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                        float _2923 = 1.0 - _672;
                        float _2930 = sqrt(1.0 - ((1.0 - (_2923 * _2923)) * (1.0 - (_2922 * _2922))));
                        float _2931 = _2930 * _2930;
                        float _2932 = _2931 * _2931;
                        float _2933 = _2912 + _2877;
                        float _2934 = _2913 + _2878;
                        float _2935 = _2914 + _2879;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2943 = dot(vec3(_612, _615, _618), vec3(_2912, _2913, _2914));
                        float _4239 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2947 = dot(vec3(_612, _615, _618), vec3(_2939 * _2933, _2939 * _2934, _2939 * _2935));
                        float _4250 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2954 = ((_2950 * _2950) * (_2932 + (-1.0))) + 1.0;
                        float _2955 = _2890 * _2931;
                        float _2956 = _2955 * _2955;
                        float _2959 = ((1.0 - _2956) * _2880) + _2956;
                        float _4261 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2961 = 1.0 - _2931;
                        float _2971 = (0.5 / (((_2960 * ((_2946 * _2961) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2960 * _2961) + _2931) * _2946))) * _2960;
                        float _4272 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2982 = (((_2932 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_2954 * _2954) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125))) * _2886;
                        _2734 = (_2901 * _2849.x) + _2807;
                        _2735 = (_2901 * _2849.y) + _2808;
                        _2736 = (_2901 * _2849.z) + _2809;
                        _2731 = (_2982 * _2866.x) + _2804;
                        _2732 = (_2982 * _2866.y) + _2805;
                        _2733 = (_2982 * _2866.z) + _2806;
                        if (_2811 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2811;
                        }
                    }
                    frontier_phi_68_pred = _2731;
                    frontier_phi_68_pred_1 = _2736;
                    frontier_phi_68_pred_2 = _2735;
                    frontier_phi_68_pred_3 = _2734;
                    frontier_phi_68_pred_4 = _2733;
                    frontier_phi_68_pred_5 = _2732;
                }
                _2507 = frontier_phi_68_pred;
                _2517 = frontier_phi_68_pred_1;
                _2515 = frontier_phi_68_pred_2;
                _2513 = frontier_phi_68_pred_3;
                _2511 = frontier_phi_68_pred_4;
                _2509 = frontier_phi_68_pred_5;
                uint _2666 = _2665 + 1u;
                if (_2666 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2659 = _2507;
                    _2660 = _2509;
                    _2661 = _2511;
                    _2662 = _2513;
                    _2663 = _2515;
                    _2664 = _2517;
                    _2665 = _2666;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
        }
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.z;
        uint _2523 = (_2521 >> 8u) & 15u;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((4294967295u << _2523) & _2405) == 0u)
        {
            _2627 = _2506;
            _2629 = _2508;
            _2631 = _2510;
            _2633 = _2512;
            _2635 = _2514;
            _2637 = _2516;
        }
        else
        {
            float _2652 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
            float _2653 = _2652 * _2359;
            float _2654 = _2652 * _2360;
            float _2655 = _2652 * _2361;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2523 < ((_2521 >> 12u) & 15u))
            {
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2787 = _2506;
                float _2788 = _2508;
                float _2789 = _2510;
                float _2790 = _2512;
                float _2791 = _2514;
                float _2792 = _2516;
                uint _2793 = _2523;
                uint _2802;
                bool _2803;
                for (;;)
                {
                    _2802 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                    _2803 = _2802 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2803)
                    {
                        frontier_phi_79_pred = _2792;
                        frontier_phi_79_pred_1 = _2791;
                        frontier_phi_79_pred_2 = _2790;
                        frontier_phi_79_pred_3 = _2789;
                        frontier_phi_79_pred_4 = _2788;
                        frontier_phi_79_pred_5 = _2787;
                    }
                    else
                    {
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3009 = _2787;
                        float _3010 = _2788;
                        float _3011 = _2789;
                        float _3012 = _2790;
                        float _3013 = _2791;
                        float _3014 = _2792;
                        uint _3015 = _2802;
                        uint _3016;
                        vec4 _3041;
                        float _3042;
                        vec4 _3057;
                        vec3 _3069;
                        vec4 _3084;
                        vec4 _3100;
                        float _3146;
                        bool _3147;
                        for (;;)
                        {
                            uint _3026 = ((_2793 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3015));
                            _3016 = (_3015 + 4294967295u) & _3015;
                            uint _3028 = _3026 * 40u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3042 = _3041.w;
                            uint _3044 = (_3026 * 40u) + 4u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_3026 * 40u) + 8u;
                            _3069 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x));
                            uint _3071 = (_3026 * 40u) + 16u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3087 = (_3026 * 40u) + 20u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3026 * 40u) + 24u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3121 = (_3026 * 40u) + 28u;
                            vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            _3146 = fma(_2361, _3134.z, fma(_2360, _3134.y, _3134.x * _2359)) + _3134.w;
                            _3147 = !((fma(_2361, _3115.z, fma(_2360, _3115.y, _3115.x * _2359)) + _3115.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3147)
                            {
                                float _3174 = _3041.x - _2359;
                                float _3175 = _3041.y - _2360;
                                float _3176 = _3041.z - _2361;
                                float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                                float _3180 = inversesqrt(_3177);
                                float _3181 = _3180 * _3174;
                                float _3182 = _3180 * _3175;
                                float _3183 = _3180 * _3176;
                                float _3187 = 1.0 - (_3177 / (_3042 * _3042));
                                float _4283 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3192 = sqrt(_3177) * _3057.w;
                                float _3194 = 1.39999997615814208984375 / (_3192 + 1.39999997615814208984375);
                                float _3195 = _3194 * _3194;
                                float _3198 = ((1.0 - _3195) * dot(vec3(_3181, _3182, _3183), vec3(_612, _615, _618))) + _3195;
                                float _3201 = _3192 * _3192;
                                float _3205 = (fma(_2361, _3084.z, fma(_2360, _3084.y, _3084.x * _2359)) + _3084.w) / _3146;
                                float _3206 = (fma(_2361, _3100.z, fma(_2360, _3100.y, _3100.x * _2359)) + _3100.w) / _3146;
                                float _3210 = 1.0 - dot(vec2(_3205, _3206), vec2(_3205, _3206));
                                float _4299 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3212 = _3211 * (((isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))) * _3188) / ((_3201 * 0.699999988079071044921875) + 1.0));
                                float _3224 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                                float _3225 = 1.0 - _672;
                                float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                                float _3233 = _3232 * _3232;
                                float _3234 = _3233 * _3233;
                                float _3235 = _3181 - _2653;
                                float _3236 = _3182 - _2654;
                                float _3237 = _3183 - _2655;
                                float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                                float _3245 = dot(vec3(_612, _615, _618), vec3((-0.0) - _2653, (-0.0) - _2654, (-0.0) - _2655));
                                float _4310 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3249 = dot(vec3(_612, _615, _618), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                                float _4321 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                                float _3257 = _3194 * _3233;
                                float _3258 = _3257 * _3257;
                                float _3264 = ((1.0 - _3258) * dot(vec3(_612, _615, _618), vec3(_3181, _3182, _3183))) + _3258;
                                float _4332 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3266 = 1.0 - _3233;
                                float _3276 = (0.5 / (((_3265 * ((_3248 * _3266) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3265 * _3266) + _3233) * _3248))) * _3265;
                                float _4343 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3286 = (_3211 * _3188) * (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3256 * _3256) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3212 * _3057.y;
                                frontier_phi_85_pred_1 = _3212 * _3057.x;
                                frontier_phi_85_pred_2 = _3286 * _3069.z;
                                frontier_phi_85_pred_3 = _3286 * _3069.y;
                                frontier_phi_85_pred_4 = _3286 * _3069.x;
                                frontier_phi_85_pred_5 = _3212 * _3057.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3294 = frontier_phi_85_pred;
                            _3293 = frontier_phi_85_pred_1;
                            _3292 = frontier_phi_85_pred_2;
                            _3291 = frontier_phi_85_pred_3;
                            _3290 = frontier_phi_85_pred_4;
                            _3295 = frontier_phi_85_pred_5;
                            _2999 = _3293 + _3012;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            _2996 = _3290 + _3009;
                            _2997 = _3291 + _3010;
                            _2998 = _3292 + _3011;
                            if (_3016 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3016;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3001;
                        frontier_phi_79_pred_1 = _3000;
                        frontier_phi_79_pred_2 = _2999;
                        frontier_phi_79_pred_3 = _2998;
                        frontier_phi_79_pred_4 = _2997;
                        frontier_phi_79_pred_5 = _2996;
                    }
                    _2638 = frontier_phi_79_pred;
                    _2636 = frontier_phi_79_pred_1;
                    _2634 = frontier_phi_79_pred_2;
                    _2632 = frontier_phi_79_pred_3;
                    _2630 = frontier_phi_79_pred_4;
                    _2628 = frontier_phi_79_pred_5;
                    uint _2794 = _2793 + 1u;
                    if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2787 = _2628;
                        _2788 = _2630;
                        _2789 = _2632;
                        _2790 = _2634;
                        _2791 = _2636;
                        _2792 = _2638;
                        _2793 = _2794;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2632;
                frontier_phi_60_61_ladder_1 = _2638;
                frontier_phi_60_61_ladder_2 = _2636;
                frontier_phi_60_61_ladder_3 = _2634;
                frontier_phi_60_61_ladder_4 = _2630;
                frontier_phi_60_61_ladder_5 = _2628;
            }
            else
            {
                frontier_phi_60_61_ladder = _2510;
                frontier_phi_60_61_ladder_1 = _2516;
                frontier_phi_60_61_ladder_2 = _2514;
                frontier_phi_60_61_ladder_3 = _2512;
                frontier_phi_60_61_ladder_4 = _2508;
                frontier_phi_60_61_ladder_5 = _2506;
            }
            _2627 = frontier_phi_60_61_ladder_5;
            _2629 = frontier_phi_60_61_ladder_4;
            _2631 = frontier_phi_60_61_ladder;
            _2633 = frontier_phi_60_61_ladder_3;
            _2635 = frontier_phi_60_61_ladder_2;
            _2637 = frontier_phi_60_61_ladder_1;
        }
        float _2642 = isnan(1.0) ? _656 : (isnan(_656) ? 1.0 : min(_656, 1.0));
        _2418 = (_2642 * _2633) + _1870;
        _2420 = (_2642 * _2635) + _1872;
        _2422 = (_2642 * _2637) + _1874;
        _2424 = ((_2627 * 0.039999999105930328369140625) * _2642) + _2203;
        _2426 = ((_2629 * 0.039999999105930328369140625) * _2642) + _2205;
        _2428 = ((_2631 * 0.039999999105930328369140625) * _2642) + _2207;
    }
    else
    {
        _2418 = _1870;
        _2420 = _1872;
        _2422 = _1874;
        _2424 = _2203;
        _2426 = _2205;
        _2428 = _2207;
    }
    float _4359 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4370 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4381 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2445 = ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2418 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _656))) + ((_2424 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2446 = ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2420 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _656))) + ((_2426 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2447 = ((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2422 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _656))) + ((_2428 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    uint _2448 = _228 + 6u;
    float _2456 = _593 / cbSceneParam._m0[86u].x;
    float _2457 = _594 / cbSceneParam._m0[86u].y;
    vec4 _2471 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2473 = _2471.x;
    float _2474 = _2471.y;
    float _2475 = _2471.z;
    float _2476 = _2471.w;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2531 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2532 = _2531 / _517;
        float _2543 = _2532 * _569;
        float _2544 = _570 * _2532;
        float _2545 = (-0.0) - _2544;
        float _2547 = _2532 * _571;
        float _2549 = (cbSceneParam._m0[77u].w * _2545) / _2531;
        float _2550 = _2549 + cbSceneParam._m0[79u].w;
        float _2551 = cbSceneParam._m0[79u].w - _2544;
        float _2557 = sqrt(((_2543 * _2543) + (_2544 * _2544)) + (_2547 * _2547));
        float _2560 = (1.0 - (cbSceneParam._m0[77u].w / _2531)) * _2557;
        float _2565 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2567 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2744;
        if (abs((_2545 - _2549) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2744 = ((((_2550 > 0.0) ? exp2(_2565 * _2550) : (2.0 - exp2(_2567 * _2550))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2560;
        }
        else
        {
            float _2688 = 1.0 / cbSceneParam._m0[80u].x;
            float _2689 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : max(_2550, _2551));
            float _2690 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : min(_2550, _2551));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            float _2700 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : min(_2690, 0.0));
            _2744 = ((abs(_2557 / _2545) * cbSceneParam._m0[80u].y) * ((((_2699 - _2700) * 2.0) - ((exp2(_2565 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0)))) - exp2(_2565 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0))))) * _2688)) - ((exp2(_2567 * _2699) - exp2(_2567 * _2700)) * _2688))) + (_2560 * cbSceneParam._m0[80u].z);
        }
        vec4 _2746 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, 1.0), 0.0);
        float _2755 = exp2((_2744 * (-1.44269502162933349609375)) * (1.0 - _2746.w));
        float _2756 = log2(_2755);
        float _2772 = log2(_2476);
        _2569 = (exp2(_2772 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].x)) * _2746.x) / cbSceneParam._m0[78u].x)) + _2473;
        _2571 = (exp2(_2772 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].y)) * _2746.y) / cbSceneParam._m0[78u].y)) + _2474;
        _2573 = (exp2(_2772 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].z)) * _2746.z) / cbSceneParam._m0[78u].z)) + _2475;
        _2575 = _2755 * _2476;
    }
    else
    {
        _2569 = _2473;
        _2571 = _2474;
        _2573 = _2475;
        _2575 = _2476;
    }
    bool _2782;
    vec4 _2585;
    vec4 _2607;
    float _2609;
    float _2613;
    float _2614;
    float _2615;
    float _2616;
    bool _2626;
    for (;;)
    {
        _2585 = cbMatDynParam._m0[0u];
        float _2587 = roundEven(_2585.y);
        bool _2588 = _2587 == 3.0;
        float _2589 = log2(_2575);
        float _2596 = exp2(_2589 * cbSceneParam._m0[78u].x) * _2445;
        float _2597 = exp2(_2589 * cbSceneParam._m0[78u].y) * _2446;
        float _2598 = exp2(_2589 * cbSceneParam._m0[78u].z) * _2447;
        float _2605 = _582 + (-0.5);
        _2607 = cbMtdParam._m0[1u];
        _2609 = _2607.y * _2605;
        float _2612 = (_2587 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2613 = _2612 * (_2588 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2569)));
        _2614 = _2612 * (_2588 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2571)));
        _2615 = _2612 * (_2588 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2573)));
        _2616 = _2605 * 0.999000012874603271484375;
        _2626 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2626)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2616) < 0.5)
            {
                _2782 = true;
                break;
            }
        }
        uint _2723 = _631 + uint(_2585.w);
        if ((cbInstanceData._m0[_2723].w < 1.0) && ((cbInstanceData._m0[_2723].w + _2616) < 0.5))
        {
            _2782 = true;
            break;
        }
        if ((_2609 + 1.0) < _2607.x)
        {
            _2782 = true;
            break;
        }
        _2782 = false;
        break;
    }
    float _2987;
    if (_2782)
    {
        discard_state = true;
        _2987 = 0.0;
    }
    else
    {
        _2987 = cbInstanceData._m0[_2448].w;
    }
    SV_Target.x = _2613;
    SV_Target.y = _2614;
    SV_Target.z = _2615;
    SV_Target.w = _2987;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2448].w;
    discard_exit();
}


