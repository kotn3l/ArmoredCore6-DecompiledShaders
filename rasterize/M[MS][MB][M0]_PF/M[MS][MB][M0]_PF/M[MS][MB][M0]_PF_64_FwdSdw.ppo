#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1078;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3668 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3679 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3690 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _320 = _315.x * cbMtdParam._m0[11u].x;
    float _321 = _315.y * cbMtdParam._m0[11u].y;
    float _322 = _315.z * cbMtdParam._m0[11u].z;
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _278) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _377 = _375.x;
    float _390 = dot(vec4(_377, _375.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_377 - _390) * cbMtdParam._m0[24u].x) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3701 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _415 = (_408 * ((_341.x * cbMtdParam._m0[12u].x) - _320)) + _320;
    float _416 = (_408 * ((_341.y * cbMtdParam._m0[12u].y) - _321)) + _321;
    float _417 = (_408 * ((_341.z * cbMtdParam._m0[12u].z) - _322)) + _322;
    float _421 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _415;
    float _424 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _416;
    float _427 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _417;
    float _434 = ((_415 - _421) * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) + _421;
    float _435 = ((_416 - _424) * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) + _424;
    float _436 = ((_417 - _427) * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) + _427;
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _277) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _278) + cbTextureTilingScale._m0[4u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _495 = _491.z;
    float _504 = ((_474.z - _495) * _408) + _495;
    float _507 = ((((_474.x - _493) * _408) + _493) * 2.0) + (-1.0);
    float _508 = ((((_474.y - _494) * _408) + _494) * 2.0) + (-1.0);
    float _509 = dot(vec2(_507, _508), vec2(_507, _508));
    float _3712 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _514 = sqrt(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))));
    float _519 = _507 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_449.x * 2.0) + (-1.0)));
    float _520 = _508 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_449.y * 2.0) + (-1.0)));
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _540 = (((_449.z - _504) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _504;
    float _542 = cbMtdParam._m0[22u].x + _533.w;
    float _545 = fma(_514, _224 * NORMAL.x, fma(_520, _231 * TANGENT.x, (_217 * _209) * _519));
    float _548 = fma(_514, _224 * NORMAL.y, fma(_520, _231 * TANGENT.y, (_217 * _210) * _519));
    float _551 = fma(_514, _224 * NORMAL.z, fma(_520, _231 * TANGENT.z, (_217 * _211) * _519));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3723 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _559 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3745 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3756 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3767 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _629 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _619);
    float _630 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _619);
    float _631 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _619);
    float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
    float _636 = _629 * _635;
    float _637 = _630 * _635;
    float _638 = _631 * _635;
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _666 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _669 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _683 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3778 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _707 = ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * TEXCOORD_5.w) * _703.x;
    float _708 = dot(vec3(_556, _557, _558), vec3(_636, _637, _638));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _556) - _636;
    float _716 = (_711 * _557) - _637;
    float _717 = (_711 * _558) - _638;
    float _721 = abs(dot(vec3(_636, _637, _638), vec3(_556, _557, _558)));
    float _3811 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_559);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _806 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _810 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _835 = _768 + _556;
        float _836 = _772 + _557;
        float _837 = _776 + _558;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_556, _557, _558), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3859 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_556, _557, _558), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3892 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_556, _557, _558), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3925 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1116 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1120 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1124 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1147 = _768 + _556;
        float _1148 = _772 + _557;
        float _1149 = _776 + _558;
        float _1159 = fma(_1149, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147)) - _1116;
        float _1160 = fma(_1149, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147)) - _1120;
        float _1161 = fma(_1149, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147)) - _1124;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1116 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1120 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[35u].z) + ((((((_1124 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1215 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1182.x + (-0.5));
        float _1217 = _1215 * (_1182.y + (-0.5));
        float _1218 = _1215 * (_1182.z + (-0.5));
        float _1225 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1189.x + (-0.5));
        float _1227 = _1225 * (_1189.y + (-0.5));
        float _1228 = _1225 * (_1189.z + (-0.5));
        float _1235 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1196.x + (-0.5));
        float _1237 = _1235 * (_1196.y + (-0.5));
        float _1238 = _1235 * (_1196.z + (-0.5));
        float _1245 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1203.x + (-0.5));
        float _1247 = _1245 * (_1203.y + (-0.5));
        float _1248 = _1245 * (_1203.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_556, _557, _558), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3988 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1279 + 1.0))) + _1284) * _1249;
        float _1294 = _1217 * 0.5;
        float _1295 = _1227 * 0.5;
        float _1296 = _1237 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_556, _557, _558), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4021 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1321 + 1.0))) + _1326) * _1250;
        float _1336 = _1218 * 0.5;
        float _1337 = _1228 * 0.5;
        float _1338 = _1238 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_556, _557, _558), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4054 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1363 + 1.0))) + _1368) * _1251;
        _1385 = _1218;
        _1386 = _1217;
        _1387 = _1216;
        _1388 = _1228;
        _1389 = _1227;
        _1390 = _1226;
        _1391 = _1238;
        _1392 = _1237;
        _1393 = _1236;
        _1394 = _1251;
        _1395 = _1250;
        _1396 = _1249;
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _1078;
        _1386 = _1078;
        _1387 = _1078;
        _1388 = _1078;
        _1389 = _1078;
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1090)) + _1090;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1091)) + _1091;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1092)) + _1092;
    float _1432 = fma(_1411, cbSceneParam._m0[89u].z, fma(_1410, cbSceneParam._m0[89u].y, _1409 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1411, cbSceneParam._m0[90u].z, fma(_1410, cbSceneParam._m0[90u].y, _1409 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1411, cbSceneParam._m0[91u].z, fma(_1410, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1409));
    float _1453 = _715 * 0.5;
    float _1454 = _716 * 0.5;
    float _1455 = _717 * 0.5;
    float _1456 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1459 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1462 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1496;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1469 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1473 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1477 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1484 = dot(vec4(cbModelParam._m0[39u]), vec4(_1453, _1454, _1455, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1507;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1498 = dot(vec4(cbModelParam._m0[40u]), vec4(_1453, _1454, _1455, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1511 = (_1507 * cbModelParam._m0[1u].x) + (_1496 * (1.0 - cbModelParam._m0[1u].x));
    float _1521 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1521 : min(cbModelParam._m0[25u].z, _1521));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1571 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1575 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1579 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1582 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1585 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1588 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1616;
        if (_1582 > 0.0)
        {
            _1616 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1616 = frontier_phi_14_12_ladder;
        }
        float _1787;
        if (_1585 > 0.0)
        {
            _1787 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1787 = frontier_phi_23_19_ladder;
        }
        float _2082;
        if (_1588 > 0.0)
        {
            _2082 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2082 = frontier_phi_35_30_ladder;
        }
        float _2084 = isnan(_1787) ? _1616 : (isnan(_1616) ? _1787 : min(_1616, _1787));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1582) + _1571;
        float _2090 = (_2085 * _1585) + _1575;
        float _2091 = (_2085 * _1588) + _1579;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1522);
            frontier_phi_13_35_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1604 = frontier_phi_13_35_ladder_2;
        _1606 = frontier_phi_13_35_ladder_1;
        _1608 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1522);
        _1604 = _1592.x * cbModelParam._m0[1u].y;
        _1606 = _1592.y * cbModelParam._m0[1u].y;
        _1608 = _1592.z * cbModelParam._m0[1u].y;
    }
    float _1612 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1612 : min(cbModelParam._m0[25u].w, _1612));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1668 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1672 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1676 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1679 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1682 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1685 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1792;
        if (_1679 > 0.0)
        {
            _1792 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1792 = frontier_phi_25_21_ladder;
        }
        float _2109;
        if (_1682 > 0.0)
        {
            _2109 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2109 = frontier_phi_37_32_ladder;
        }
        float _2436;
        if (_1685 > 0.0)
        {
            _2436 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2436 = frontier_phi_47_44_ladder;
        }
        float _2438 = isnan(_2109) ? _1792 : (isnan(_1792) ? _2109 : min(_1792, _2109));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1679) + _1668;
        float _2444 = (_2439 * _1682) + _1672;
        float _2445 = (_2439 * _1685) + _1676;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2446;
        float _2449 = _2446 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2445 > _2449) || ((_2445 < _2447) || ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 < _2447) || (_2443 > _2449))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2445, cbModelParam._m0[17u].z, fma(_2444, cbModelParam._m0[17u].y, _2443 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2445, cbModelParam._m0[18u].z, fma(_2444, cbModelParam._m0[18u].y, _2443 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2445, cbModelParam._m0[19u].z, fma(_2444, cbModelParam._m0[19u].y, _2443 * cbModelParam._m0[19u].x))), _1613);
            frontier_phi_22_47_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1704 = frontier_phi_22_47_ladder_2;
        _1706 = frontier_phi_22_47_ladder_1;
        _1708 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1613);
        _1704 = _1688.x * cbModelParam._m0[1u].z;
        _1706 = _1688.y * cbModelParam._m0[1u].z;
        _1708 = _1688.z * cbModelParam._m0[1u].z;
    }
    float _1720 = ((((1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_736 * _723)) * _707;
    float _1721 = _1720 * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1722 = _1720 * ((cbModelParam._m0[1u].w * (_1706 - _1606)) + _1606);
    float _1723 = _1720 * ((cbModelParam._m0[1u].w * (_1708 - _1608)) + _1608);
    float _1726 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, _1721 * cbSceneParam._m0[91u].x));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1779 = _1766 / _1778;
    float _1780 = _1770 / _1778;
    float _1781 = _1774 / _1778;
    float _1928;
    float _1929;
    float _1930;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1808 = ((uint(_1781 > cbSceneParam._m0[59u].y) + uint(_1781 > cbSceneParam._m0[59u].x)) + uint(_1781 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1809 = _1808 + 43u;
        uint _1817 = _1808 + 44u;
        uint _1825 = _1808 + 45u;
        uint _1833 = _1808 + 46u;
        float _1844 = fma(_1778, cbSceneParam._m0[_1809].w, fma(_1774, cbSceneParam._m0[_1809].z, fma(_1770, cbSceneParam._m0[_1809].y, _1766 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1778, cbSceneParam._m0[_1817].w, fma(_1774, cbSceneParam._m0[_1817].z, fma(_1770, cbSceneParam._m0[_1817].y, _1766 * cbSceneParam._m0[_1817].x)));
        float _1856 = fma(_1778, cbSceneParam._m0[_1833].w, fma(_1774, cbSceneParam._m0[_1833].z, fma(_1770, cbSceneParam._m0[_1833].y, _1766 * cbSceneParam._m0[_1833].x)));
        float _1861 = cbSceneParam._m0[33u].z * _1856;
        float _1863 = cbSceneParam._m0[33u].w * _1856;
        float _1866 = fma(_1778, cbSceneParam._m0[_1825].w, fma(_1774, cbSceneParam._m0[_1825].z, fma(_1770, cbSceneParam._m0[_1825].y, _1766 * cbSceneParam._m0[_1825].x))) / _1856;
        float _1914 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
        float _4180 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1921 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1861 + _1844) / _1856, (_1863 + _1848) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 + _1844) / _1856, (_1848 - _1861) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1861) / _1856, (_1848 - _1863) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1863) / _1856, (_1861 + _1848) / _1856), _1866), 0.0)).x), vec4(0.25)));
        _1928 = 1.0 - (_1921 * cbSceneParam._m0[34u].x);
        _1929 = 1.0 - (_1921 * cbSceneParam._m0[34u].y);
        _1930 = 1.0 - (_1921 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1928 = 1.0;
        _1929 = 1.0;
        _1930 = 1.0;
    }
    float _1994;
    float _1996;
    float _1998;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1982 = fma(_1778, cbSceneParam._m0[63u].w, fma(_1774, cbSceneParam._m0[63u].z, fma(_1770, cbSceneParam._m0[63u].y, _1766 * cbSceneParam._m0[63u].x)));
        float _1983 = fma(_1778, cbSceneParam._m0[60u].w, fma(_1774, cbSceneParam._m0[60u].z, fma(_1770, cbSceneParam._m0[60u].y, _1766 * cbSceneParam._m0[60u].x))) / _1982;
        float _1984 = fma(_1778, cbSceneParam._m0[61u].w, fma(_1774, cbSceneParam._m0[61u].z, fma(_1770, cbSceneParam._m0[61u].y, _1766 * cbSceneParam._m0[61u].x))) / _1982;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1983 >= cbSceneParam._m0[64u].x) && (_1984 >= cbSceneParam._m0[64u].y)) && (_1983 <= cbSceneParam._m0[64u].z)) && (_1984 <= cbSceneParam._m0[64u].w))
        {
            float _2122 = fma(_1778, cbSceneParam._m0[62u].w, fma(_1774, cbSceneParam._m0[62u].z, fma(_1770, cbSceneParam._m0[62u].y, _1766 * cbSceneParam._m0[62u].x))) / _1982;
            float _2126 = isnan(cbSceneParam._m0[41u].w) ? _2122 : (isnan(_2122) ? cbSceneParam._m0[41u].w : max(_2122, cbSceneParam._m0[41u].w));
            float _2169 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
            float _4196 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
            float _2176 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1983, cbSceneParam._m0[33u].w + _1984), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1983, _1984 - cbSceneParam._m0[33u].z), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].z, _1984 - cbSceneParam._m0[33u].w), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1984), _2126), 0.0)).x), vec4(0.25)));
            float _2180 = 1.0 - (_2176 * cbSceneParam._m0[34u].x);
            float _2181 = 1.0 - (_2176 * cbSceneParam._m0[34u].y);
            float _2182 = 1.0 - (_2176 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2182) ? _1930 : (isnan(_1930) ? _2182 : min(_1930, _2182));
            frontier_phi_34_33_ladder_1 = isnan(_2181) ? _1929 : (isnan(_1929) ? _2181 : min(_1929, _2181));
            frontier_phi_34_33_ladder_2 = isnan(_2180) ? _1928 : (isnan(_1928) ? _2180 : min(_1928, _2180));
        }
        else
        {
            frontier_phi_34_33_ladder = _1930;
            frontier_phi_34_33_ladder_1 = _1929;
            frontier_phi_34_33_ladder_2 = _1928;
        }
        _1994 = frontier_phi_34_33_ladder_2;
        _1996 = frontier_phi_34_33_ladder_1;
        _1998 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1994 = _1928;
        _1996 = _1929;
        _1998 = _1930;
    }
    uvec4 _2003 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2005 = _2003.x * 14u;
    uint _2006 = _2005 + 13u;
    float _2013 = _707 + (-1.0);
    float _2018 = (cbLight._m0[_2006].x * _2013) + 1.0;
    float _2019 = (cbLight._m0[_2006].y * _2013) + 1.0;
    float _2020 = (cbLight._m0[_2006].z * _2013) + 1.0;
    float _2021 = (cbLight._m0[_2006].w * _2013) + 1.0;
    uint _2022 = _2005 + 5u;
    float _2028 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2032 = _2005 + 4u;
    float _2041 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2045 = _2005 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_556, _557, _558));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_556, _557, _558));
    float _4232 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4243 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2022].x * _2028) * _2066) + (((cbLight._m0[_2032].x * _1994) * _2041) * _2064);
    float _2074 = ((_2028 * cbLight._m0[_2022].y) * _2066) + (((cbLight._m0[_2032].y * _1996) * _2041) * _2064);
    float _2075 = ((_2028 * cbLight._m0[_2022].z) * _2066) + (((cbLight._m0[_2032].z * _1998) * _2041) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2005 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2081)
    {
        _2183 = _2073;
        _2185 = _2074;
        _2187 = _2075;
    }
    else
    {
        uint _2191 = _2005 + 6u;
        float _2207 = (dot(vec3(cbLight._m0[_2005 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4254 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2210 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2183 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _2073;
        _2185 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _2074;
        _2187 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _2075;
    }
    bool _2190 = _2079.y == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2190)
    {
        _2245 = _2183;
        _2247 = _2185;
        _2249 = _2187;
    }
    else
    {
        uint _2407 = _2005 + 7u;
        float _2423 = (dot(vec3(cbLight._m0[_2005 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4270 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2426 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2245 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2183;
        _2247 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2185;
        _2249 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2187;
    }
    uint _2252 = _2005 + 8u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _559) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2005].x + _636;
    float _2268 = cbLight._m0[_2005].y + _637;
    float _2269 = cbLight._m0[_2005].z + _638;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2005].xyz));
    float _4286 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2281 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2282 = dot(vec3(_556, _557, _558), vec3(_2274, _2275, _2276));
    float _4308 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2274, _2275, _2276));
    float _4319 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2266 * _2266;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2281 * ((_2280 * _2306) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2306) + _2266) * _2280))) * _2280;
    float _4330 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    uint _2333 = _2005 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _559) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2045].x + _636;
    float _2347 = cbLight._m0[_2045].y + _637;
    float _2348 = cbLight._m0[_2045].z + _638;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2045].xyz));
    float _4341 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2360 = dot(vec3(_556, _557, _558), vec3(_2353, _2354, _2355));
    float _4352 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2353, _2354, _2355));
    float _4363 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2382 = 1.0 - _2345;
    float _2392 = (0.5 / (((_2281 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2382) + _2345) * _2359))) * _2359;
    float _4374 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2404 = (((_2381 * cbLight._m0[_2333].x) * _2394) * _2028) + ((((cbLight._m0[_2252].x * _1994) * _2305) * _2319) * _2041);
    float _2405 = (((_2381 * cbLight._m0[_2333].y) * _2394) * _2028) + ((((cbLight._m0[_2252].y * _1996) * _2305) * _2319) * _2041);
    float _2406 = (((_2381 * cbLight._m0[_2333].z) * _2394) * _2028) + ((((cbLight._m0[_2252].z * _1998) * _2305) * _2319) * _2041);
    float _2462;
    float _2464;
    float _2466;
    if (_2081)
    {
        _2462 = _2404;
        _2464 = _2405;
        _2466 = _2406;
    }
    else
    {
        uint _2468 = _2005 + 2u;
        uint _2472 = _2005 + 10u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _559) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _636;
        float _2489 = cbLight._m0[_2468].y + _637;
        float _2490 = cbLight._m0[_2468].z + _638;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2468].xyz));
        float _4385 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2502 = dot(vec3(_556, _557, _558), vec3(_2495, _2496, _2497));
        float _4396 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4407 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2281 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2524) + _2487) * _2501))) * _2501;
        float _4418 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2462 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2404;
        _2464 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2405;
        _2466 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2406;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2190)
    {
        _2568 = _2462;
        _2570 = _2464;
        _2572 = _2466;
    }
    else
    {
        uint _2579 = _2005 + 3u;
        uint _2583 = _2005 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _559) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _636;
        float _2600 = cbLight._m0[_2579].y + _637;
        float _2601 = cbLight._m0[_2579].z + _638;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2579].xyz));
        float _4434 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2613 = dot(vec3(_556, _557, _558), vec3(_2606, _2607, _2608));
        float _4445 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4456 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2635 = 1.0 - _2598;
        float _2645 = (0.5 / (((_2281 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2635) + _2598) * _2612))) * _2612;
        float _4467 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2568 = (((_2634 * cbLight._m0[_2583].x) * _2647) * _2648) + _2462;
        _2570 = (((_2634 * cbLight._m0[_2583].y) * _2647) * _2648) + _2464;
        _2572 = (((_2634 * cbLight._m0[_2583].z) * _2647) * _2648) + _2466;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2003.y == 0u)
    {
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2670)));
        float _2691 = (log2(_1781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
        }
        else
        {
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            uint _2932 = 0u;
            uint _2941;
            bool _2942;
            for (;;)
            {
                _2941 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                _2942 = _2941 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2942)
                {
                    frontier_phi_66_pred = _2931;
                    frontier_phi_66_pred_1 = _2930;
                    frontier_phi_66_pred_2 = _2929;
                    frontier_phi_66_pred_3 = _2928;
                    frontier_phi_66_pred_4 = _2927;
                    frontier_phi_66_pred_5 = _2926;
                }
                else
                {
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    uint _3056;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2941;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    for (;;)
                    {
                        uint _3060 = uint(findLSB(_3056)) + (_2932 << 5u);
                        uint _3057 = (_3056 + 4294967295u) & _3056;
                        uint _3062 = _3060 * 48u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3082 = (_3060 * 48u) + 4u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3101 = (_3060 * 48u) + 8u;
                        vec3 _3112 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x));
                        float _3116 = _3076.x - _1779;
                        float _3117 = _3076.y - _1780;
                        float _3118 = _3076.z - _1781;
                        float _3119 = dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118));
                        float _3122 = inversesqrt(_3119);
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3126 = dot(vec3(_663, _666, _669), vec3(_3123, _3124, _3125));
                        float _3131 = 1.0 - (_3119 * _3076.w);
                        float _4493 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3133 = sqrt(_3119) * _3095.w;
                        float _3136 = 1.39999997615814208984375 / (_3133 + 1.39999997615814208984375);
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3126) + _3137;
                        float _3143 = _3133 * _3133;
                        float _3147 = ((isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))) * _3132) / ((_3143 * 0.699999988079071044921875) + 1.0);
                        float _3151 = (-0.0) - _1779;
                        float _3152 = (-0.0) - _1780;
                        float _3153 = (-0.0) - _1781;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3167 = exp2(log2(1.0 / ((_3143 * 3.5) + 5.0)) * 0.25);
                        float _3168 = 1.0 - _723;
                        float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                        float _3176 = _3175 * _3175;
                        float _3177 = _3176 * _3176;
                        float _3178 = _3158 + _3123;
                        float _3179 = _3159 + _3124;
                        float _3180 = _3160 + _3125;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3188 = dot(vec3(_663, _666, _669), vec3(_3158, _3159, _3160));
                        float _4509 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3192 = dot(vec3(_663, _666, _669), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                        float _4520 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                        float _3200 = _3136 * _3176;
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3126) + _3201;
                        float _4531 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3206 = 1.0 - _3176;
                        float _3216 = (0.5 / (((_3205 * ((_3191 * _3206) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3205 * _3206) + _3176) * _3191))) * _3205;
                        float _4542 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3227 = (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3199 * _3199) * ((_3143 * 2.1991131305694580078125) + 3.141590118408203125))) * _3132;
                        _2985 = (_3147 * _3095.x) + _3053;
                        _2986 = (_3147 * _3095.y) + _3054;
                        _2987 = (_3147 * _3095.z) + _3055;
                        _2982 = (_3227 * _3112.x) + _3050;
                        _2983 = (_3227 * _3112.y) + _3051;
                        _2984 = (_3227 * _3112.z) + _3052;
                        if (_3057 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _3057;
                        }
                    }
                    frontier_phi_66_pred = _2987;
                    frontier_phi_66_pred_1 = _2986;
                    frontier_phi_66_pred_2 = _2985;
                    frontier_phi_66_pred_3 = _2984;
                    frontier_phi_66_pred_4 = _2983;
                    frontier_phi_66_pred_5 = _2982;
                }
                _2792 = frontier_phi_66_pred;
                _2790 = frontier_phi_66_pred_1;
                _2788 = frontier_phi_66_pred_2;
                _2786 = frontier_phi_66_pred_3;
                _2784 = frontier_phi_66_pred_4;
                _2782 = frontier_phi_66_pred_5;
                uint _2933 = _2932 + 1u;
                if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2926 = _2782;
                    _2927 = _2784;
                    _2928 = _2786;
                    _2929 = _2788;
                    _2930 = _2790;
                    _2931 = _2792;
                    _2932 = _2933;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
        }
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.z;
        uint _2798 = (_2796 >> 8u) & 15u;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((4294967295u << _2798) & _2701) == 0u)
        {
            _2894 = _2781;
            _2896 = _2783;
            _2898 = _2785;
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
        }
        else
        {
            float _2919 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
            float _2920 = _2919 * _1779;
            float _2921 = _2919 * _1780;
            float _2922 = _2919 * _1781;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2798 < ((_2796 >> 12u) & 15u))
            {
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _3033 = _2781;
                float _3034 = _2783;
                float _3035 = _2785;
                float _3036 = _2787;
                float _3037 = _2789;
                float _3038 = _2791;
                uint _3039 = _2798;
                uint _3048;
                bool _3049;
                for (;;)
                {
                    _3048 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                    _3049 = _3048 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3049)
                    {
                        frontier_phi_72_pred = _3038;
                        frontier_phi_72_pred_1 = _3037;
                        frontier_phi_72_pred_2 = _3036;
                        frontier_phi_72_pred_3 = _3035;
                        frontier_phi_72_pred_4 = _3034;
                        frontier_phi_72_pred_5 = _3033;
                    }
                    else
                    {
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3245 = _3033;
                        float _3246 = _3034;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        uint _3251 = _3048;
                        uint _3252;
                        vec4 _3277;
                        float _3278;
                        vec4 _3293;
                        vec3 _3305;
                        vec4 _3320;
                        vec4 _3335;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3262 = ((_3039 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3251));
                            _3252 = (_3251 + 4294967295u) & _3251;
                            uint _3264 = _3262 * 40u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3278 = _3277.w;
                            uint _3280 = (_3262 * 40u) + 4u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3262 * 40u) + 8u;
                            _3305 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x));
                            uint _3307 = (_3262 * 40u) + 16u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3262 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3262 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3262 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_1781, _3369.z, fma(_1780, _3369.y, _3369.x * _1779)) + _3369.w;
                            _3382 = !((fma(_1781, _3350.z, fma(_1780, _3350.y, _3350.x * _1779)) + _3350.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3382)
                            {
                                float _3409 = _3277.x - _1779;
                                float _3410 = _3277.y - _1780;
                                float _3411 = _3277.z - _1781;
                                float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                                float _3415 = inversesqrt(_3412);
                                float _3416 = _3415 * _3409;
                                float _3417 = _3415 * _3410;
                                float _3418 = _3415 * _3411;
                                float _3422 = 1.0 - (_3412 / (_3278 * _3278));
                                float _4553 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3427 = sqrt(_3412) * _3293.w;
                                float _3429 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                                float _3430 = _3429 * _3429;
                                float _3433 = ((1.0 - _3430) * dot(vec3(_3416, _3417, _3418), vec3(_663, _666, _669))) + _3430;
                                float _3436 = _3427 * _3427;
                                float _3440 = (fma(_1781, _3320.z, fma(_1780, _3320.y, _3320.x * _1779)) + _3320.w) / _3381;
                                float _3441 = (fma(_1781, _3335.z, fma(_1780, _3335.y, _3335.x * _1779)) + _3335.w) / _3381;
                                float _3445 = 1.0 - dot(vec2(_3440, _3441), vec2(_3440, _3441));
                                float _4569 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3447 = _3446 * (((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3423) / ((_3436 * 0.699999988079071044921875) + 1.0));
                                float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _723;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3416 - _2920;
                                float _3471 = _3417 - _2921;
                                float _3472 = _3418 - _2922;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2920, (-0.0) - _2921, (-0.0) - _2922));
                                float _4580 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3484 = dot(vec3(_663, _666, _669), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4591 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3429 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_663, _666, _669), vec3(_3416, _3417, _3418))) + _3493;
                                float _4602 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4613 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3446 * _3423) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3447 * _3293.y;
                                frontier_phi_78_pred_1 = _3447 * _3293.x;
                                frontier_phi_78_pred_2 = _3521 * _3305.z;
                                frontier_phi_78_pred_3 = _3521 * _3305.y;
                                frontier_phi_78_pred_4 = _3521 * _3305.x;
                                frontier_phi_78_pred_5 = _3447 * _3293.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3529 = frontier_phi_78_pred;
                            _3528 = frontier_phi_78_pred_1;
                            _3527 = frontier_phi_78_pred_2;
                            _3526 = frontier_phi_78_pred_3;
                            _3525 = frontier_phi_78_pred_4;
                            _3530 = frontier_phi_78_pred_5;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            if (_3252 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3252;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3237;
                        frontier_phi_72_pred_1 = _3236;
                        frontier_phi_72_pred_2 = _3235;
                        frontier_phi_72_pred_3 = _3234;
                        frontier_phi_72_pred_4 = _3233;
                        frontier_phi_72_pred_5 = _3232;
                    }
                    _2905 = frontier_phi_72_pred;
                    _2903 = frontier_phi_72_pred_1;
                    _2901 = frontier_phi_72_pred_2;
                    _2899 = frontier_phi_72_pred_3;
                    _2897 = frontier_phi_72_pred_4;
                    _2895 = frontier_phi_72_pred_5;
                    uint _3040 = _3039 + 1u;
                    if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3033 = _2895;
                        _3034 = _2897;
                        _3035 = _2899;
                        _3036 = _2901;
                        _3037 = _2903;
                        _3038 = _2905;
                        _3039 = _3040;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2905;
                frontier_phi_60_61_ladder_1 = _2903;
                frontier_phi_60_61_ladder_2 = _2899;
                frontier_phi_60_61_ladder_3 = _2897;
                frontier_phi_60_61_ladder_4 = _2895;
                frontier_phi_60_61_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_60_61_ladder = _2791;
                frontier_phi_60_61_ladder_1 = _2789;
                frontier_phi_60_61_ladder_2 = _2785;
                frontier_phi_60_61_ladder_3 = _2783;
                frontier_phi_60_61_ladder_4 = _2781;
                frontier_phi_60_61_ladder_5 = _2787;
            }
            _2894 = frontier_phi_60_61_ladder_4;
            _2896 = frontier_phi_60_61_ladder_3;
            _2898 = frontier_phi_60_61_ladder_2;
            _2900 = frontier_phi_60_61_ladder_5;
            _2902 = frontier_phi_60_61_ladder_1;
            _2904 = frontier_phi_60_61_ladder;
        }
        float _2909 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2714 = (_2909 * _2900) + _2245;
        _2716 = (_2909 * _2902) + _2247;
        _2718 = (_2909 * _2904) + _2249;
        _2720 = ((_2894 * 0.039999999105930328369140625) * _2909) + _2568;
        _2722 = ((_2896 * 0.039999999105930328369140625) * _2909) + _2570;
        _2724 = ((_2898 * 0.039999999105930328369140625) * _2909) + _2572;
    }
    else
    {
        _2714 = _2245;
        _2716 = _2247;
        _2718 = _2249;
        _2720 = _2568;
        _2722 = _2570;
        _2724 = _2572;
    }
    float _4629 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4640 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4651 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    uint _2744 = _258 + 6u;
    float _2752 = _644 / cbSceneParam._m0[86u].x;
    float _2753 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2767 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2769 = _2767.x;
    float _2770 = _2767.y;
    float _2771 = _2767.z;
    float _2772 = _2767.w;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2806 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2807 = _2806 / _577;
        float _2818 = _2807 * _629;
        float _2819 = _630 * _2807;
        float _2820 = (-0.0) - _2819;
        float _2822 = _2807 * _631;
        float _2824 = (cbSceneParam._m0[77u].w * _2820) / _2806;
        float _2825 = _2824 + cbSceneParam._m0[79u].w;
        float _2826 = cbSceneParam._m0[79u].w - _2819;
        float _2832 = sqrt(((_2818 * _2818) + (_2819 * _2819)) + (_2822 * _2822));
        float _2835 = (1.0 - (cbSceneParam._m0[77u].w / _2806)) * _2832;
        float _2840 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2842 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2995;
        if (abs((_2820 - _2824) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2995 = ((((_2825 > 0.0) ? exp2(_2840 * _2825) : (2.0 - exp2(_2842 * _2825))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2835;
        }
        else
        {
            float _2955 = 1.0 / cbSceneParam._m0[80u].x;
            float _2956 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : max(_2825, _2826));
            float _2957 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : min(_2825, _2826));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            _2995 = ((abs(_2832 / _2820) * cbSceneParam._m0[80u].y) * ((((_2966 - _2967) * 2.0) - ((exp2(_2840 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)))) - exp2(_2840 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))))) * _2955)) - ((exp2(_2842 * _2966) - exp2(_2842 * _2967)) * _2955))) + (_2835 * cbSceneParam._m0[80u].z);
        }
        vec4 _2997 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, 1.0), 0.0);
        float _3006 = exp2((_2995 * (-1.44269502162933349609375)) * (1.0 - _2997.w));
        float _3007 = log2(_3006);
        float _3023 = log2(_2772);
        _2844 = (exp2(_3023 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].x)) * _2997.x) / cbSceneParam._m0[78u].x)) + _2769;
        _2846 = (exp2(_3023 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].y)) * _2997.y) / cbSceneParam._m0[78u].y)) + _2770;
        _2848 = (exp2(_3023 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].z)) * _2997.z) / cbSceneParam._m0[78u].z)) + _2771;
        _2850 = _3006 * _2772;
    }
    else
    {
        _2844 = _2769;
        _2846 = _2770;
        _2848 = _2771;
        _2850 = _2772;
    }
    float _2862 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2863 = _2862 == 3.0;
    float _2864 = log2(_2850);
    float _2871 = exp2(_2864 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2714 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _707))) + ((_2720 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1511)) * cbPerFrame._m0[3u].x));
    float _2872 = exp2(_2864 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2716 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _707))) + ((_2722 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1511)) * cbPerFrame._m0[3u].x));
    float _2873 = exp2(_2864 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2718 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _707))) + ((_2724 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1511)) * cbPerFrame._m0[3u].x));
    float _2882 = (_2862 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2882 * (_2863 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.y = _2882 * (_2863 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.z = _2882 * (_2863 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.w = cbInstanceData._m0[_2744].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2744].w;
}


