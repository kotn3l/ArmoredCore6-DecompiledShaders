#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1191;
float _3575;
float _3576;
float _3577;
float _3578;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _367 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _367) * cbMtdParam._m0[24u].x) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3587 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _392 = (_385 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _393 = (_385 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _394 = (_385 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _385) + _453;
    float _465 = ((((_432.x - _451) * _385) + _451) * 2.0) + (-1.0);
    float _466 = ((((_432.y - _452) * _385) + _452) * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3598 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))));
    float _477 = _465 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_407.x * 2.0) + (-1.0)));
    float _478 = _466 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_407.y * 2.0) + (-1.0)));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _536 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_507 - _508) * cbMtdParam._m0[24u].w) + _508) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3609 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _545 = ((((cbMtdParam._m0[10u].x - _392) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _537) + _392;
    float _546 = ((((cbMtdParam._m0[10u].y - _393) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _537) + _393;
    float _547 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _394)) * _537) + _394;
    float _552 = (((_407.z - _462) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _462;
    float _556 = ((cbMtdParam._m0[23u].y - _552) * _537) + _552;
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _581 = (_575.x * 2.0) + (-1.0);
    float _582 = (_575.y * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3620 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _599 = (_537 * (((cbMtdParam._m0[22u].z * _477) - _477) + _581)) + _477;
    float _600 = (_537 * (((cbMtdParam._m0[22u].z * _478) - _478) + _582)) + _478;
    float _601 = (_537 * (sqrt(1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) - _472)) + _472;
    float _603 = cbMtdParam._m0[22u].x + _491.w;
    float _607 = gl_FragCoord.x * 0.125;
    float _609 = gl_FragCoord.y * 0.125;
    float _619 = fma(_601, _236 * NORMAL.x, fma(_600, _243 * TANGENT.x, (_229 * _221) * _599));
    float _622 = fma(_601, _236 * NORMAL.y, fma(_600, _243 * TANGENT.y, (_229 * _222) * _599));
    float _625 = fma(_601, _236 * NORMAL.z, fma(_600, _243 * TANGENT.z, (_229 * _223) * _599));
    float _629 = inversesqrt(dot(vec3(_619, _622, _625), vec3(_619, _622, _625)));
    float _630 = _629 * _619;
    float _631 = _629 * _622;
    float _632 = _629 * _625;
    float _3631 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _633 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3653 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3664 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3675 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_607, _609)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    vec4 _717 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_607, _609));
    float _719 = _717.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _873 = sqrt(((_706 * _706) + (_707 * _707)) + (_708 * _708));
        float _879 = (cbMatDynParam._m0[5u].x * _873) + cbMatDynParam._m0[5u].y;
        float _3686 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _884 = (cbMatDynParam._m0[5u].z * _873) + cbMatDynParam._m0[5u].w;
        float _3697 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) - _880)) + _880) < ((_719 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_632, cbSceneParam._m0[5u].z, fma(_631, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _630));
    float _752 = fma(_632, cbSceneParam._m0[6u].z, fma(_631, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _630));
    float _755 = fma(_632, cbSceneParam._m0[7u].z, fma(_631, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _630));
    uint _768 = _249 + 9u;
    uint _769 = _768 + uint(cbMatDynParam._m0[0u].w);
    float _775 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_769].x;
    float _776 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_769].y;
    float _777 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_769].z;
    float _3708 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _793 = ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_630, _631, _632), vec3(_713, _714, _715));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _630) - _713;
    float _802 = (_797 * _631) - _714;
    float _803 = (_797 * _632) - _715;
    float _807 = abs(dot(vec3(_713, _714, _715), vec3(_630, _631, _632)));
    float _3741 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_633);
    float _822 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_862, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854));
        float _919 = fma(_862, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854));
        float _923 = fma(_862, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854));
        float _948 = _854 + _630;
        float _949 = _858 + _631;
        float _950 = _862 + _632;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_630, _631, _632), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3789 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_630, _631, _632), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3822 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_630, _631, _632), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3855 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_862, cbModelParam._m0[30u].z, fma(_858, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _854));
        float _1233 = fma(_862, cbModelParam._m0[31u].z, fma(_858, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _854));
        float _1237 = fma(_862, cbModelParam._m0[32u].z, fma(_858, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _854));
        float _1260 = _854 + _630;
        float _1261 = _858 + _631;
        float _1262 = _862 + _632;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_630, _631, _632), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3918 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_630, _631, _632), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3951 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_630, _631, _632), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _3984 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1191;
        _1499 = _1191;
        _1500 = _1191;
        _1501 = _1191;
        _1502 = _1191;
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1203)) + _1203;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1204)) + _1204;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1205)) + _1205;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _801 * 0.5;
    float _1567 = _802 * 0.5;
    float _1568 = _803 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _633);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_862, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_862, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_862, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1698 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1701 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1729 = frontier_phi_19_17_ladder;
        }
        float _1952;
        if (_1698 > 0.0)
        {
            _1952 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1952 = frontier_phi_28_24_ladder;
        }
        float _2198;
        if (_1701 > 0.0)
        {
            _2198 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2198 = frontier_phi_40_35_ladder;
        }
        float _2200 = isnan(_1952) ? _1729 : (isnan(_1729) ? _1952 : min(_1729, _1952));
        float _2201 = isnan(_2198) ? _2200 : (isnan(_2200) ? _2198 : min(_2200, _2198));
        float _2205 = (_2201 * _1695) + _1684;
        float _2206 = (_2201 * _1698) + _1688;
        float _2207 = (_2201 * _1701) + _1692;
        float _2208 = _2201 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2208;
        float _2212 = _2208 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 > _2212) || ((_2206 < _2210) || ((_2205 < _2210) || (_2205 > _2212))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2207, cbModelParam._m0[9u].z, fma(_2206, cbModelParam._m0[9u].y, _2205 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2207, cbModelParam._m0[10u].z, fma(_2206, cbModelParam._m0[10u].y, _2205 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2207, cbModelParam._m0[11u].z, fma(_2206, cbModelParam._m0[11u].y, _2205 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_18_40_ladder = _2331.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2331.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2331.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_18_40_ladder_2;
        _1719 = frontier_phi_18_40_ladder_1;
        _1721 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1635);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _633);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1781 = fma(_862, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854)) + cbModelParam._m0[21u].w;
        float _1785 = fma(_862, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854)) + cbModelParam._m0[22u].w;
        float _1789 = fma(_862, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854)) + cbModelParam._m0[23u].w;
        float _1792 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1795 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1798 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1957;
        if (_1792 > 0.0)
        {
            _1957 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1957 = frontier_phi_30_26_ladder;
        }
        float _2225;
        if (_1795 > 0.0)
        {
            _2225 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2225 = frontier_phi_42_37_ladder;
        }
        float _2430;
        if (_1798 > 0.0)
        {
            _2430 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2430 = frontier_phi_51_48_ladder;
        }
        float _2432 = isnan(_2225) ? _1957 : (isnan(_1957) ? _2225 : min(_1957, _2225));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1792) + _1781;
        float _2438 = (_2433 * _1795) + _1785;
        float _2439 = (_2433 * _1798) + _1789;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2440;
        float _2443 = _2440 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2439 > _2443) || ((_2439 < _2441) || ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 < _2441) || (_2437 > _2443))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2439, cbModelParam._m0[17u].z, fma(_2438, cbModelParam._m0[17u].y, _2437 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2439, cbModelParam._m0[18u].z, fma(_2438, cbModelParam._m0[18u].y, _2437 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2439, cbModelParam._m0[19u].z, fma(_2438, cbModelParam._m0[19u].y, _2437 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_27_51_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1817 = frontier_phi_27_51_ladder_2;
        _1819 = frontier_phi_27_51_ladder_1;
        _1821 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1726);
        _1817 = _1801.x * cbModelParam._m0[1u].z;
        _1819 = _1801.y * cbModelParam._m0[1u].z;
        _1821 = _1801.z * cbModelParam._m0[1u].z;
    }
    float _1833 = ((((1.0 - _822) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_822 * _809)) * _793;
    float _1834 = _1833 * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1835 = _1833 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1836 = _1833 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1839 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, _1834 * cbSceneParam._m0[91u].x));
    vec4 _1853 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_730, _731));
    float _1855 = _1853.w;
    float _1867 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1855);
    float _1868 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1855);
    float _1869 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1855);
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _793 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1911 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1915 = _1875 | 1u;
    float _1926 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_630, _631, _632));
    float _1929 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_630, _631, _632));
    float _4120 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _4131 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1934 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.3183098733425140380859375;
    float _1936 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.3183098733425140380859375;
    float _1943 = ((cbLight._m0[_1892].x * _1898) * _1936) + (((cbLight._m0[_1902].x * _1867) * _1911) * _1934);
    float _1944 = ((_1898 * cbLight._m0[_1892].y) * _1936) + (((cbLight._m0[_1902].y * _1868) * _1911) * _1934);
    float _1945 = ((_1898 * cbLight._m0[_1892].z) * _1936) + (((cbLight._m0[_1902].z * _1869) * _1911) * _1934);
    uvec4 _1949 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1951 = _1949.x == 0u;
    float _1962;
    float _1964;
    float _1966;
    if (_1951)
    {
        _1962 = _1943;
        _1964 = _1944;
        _1966 = _1945;
    }
    else
    {
        uint _1970 = _1875 + 6u;
        float _1986 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_630, _631, _632)) * 0.5) + 0.5;
        float _1987 = _1986 * _1986;
        float _4142 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1988 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1989 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _1962 = (((cbLight._m0[_1970].x * 0.3183098733425140380859375) * _1988) * _1989) + _1943;
        _1964 = (((cbLight._m0[_1970].y * 0.3183098733425140380859375) * _1988) * _1989) + _1944;
        _1966 = (((cbLight._m0[_1970].z * 0.3183098733425140380859375) * _1988) * _1989) + _1945;
    }
    bool _1969 = _1949.y == 0u;
    float _2007;
    float _2009;
    float _2011;
    if (_1969)
    {
        _2007 = _1962;
        _2009 = _1964;
        _2011 = _1966;
    }
    else
    {
        uint _2169 = _1875 + 7u;
        float _2185 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_630, _631, _632)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4158 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2188 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2007 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _1962;
        _2009 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _1964;
        _2011 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _1966;
    }
    uint _2014 = _1875 + 8u;
    float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _633) * 0.949999988079071044921875);
    float _2028 = _2027 * _2027;
    float _2029 = cbLight._m0[_1875].x + _713;
    float _2030 = cbLight._m0[_1875].y + _714;
    float _2031 = cbLight._m0[_1875].z + _715;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2036 = _2035 * _2029;
    float _2037 = _2035 * _2030;
    float _2038 = _2035 * _2031;
    float _2039 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_1875].xyz));
    float _4174 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2043 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2044 = dot(vec3(_630, _631, _632), vec3(_2036, _2037, _2038));
    float _4196 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2036, _2037, _2038));
    float _4207 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2028 * _2028;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2067 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2068 = 1.0 - _2028;
    float _2079 = (0.5 / (((_2043 * ((_2042 * _2068) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2068) + _2028) * _2042))) * _2042;
    float _4218 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2081 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    uint _2095 = _1875 + 9u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _633) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1915].x + _713;
    float _2109 = cbLight._m0[_1915].y + _714;
    float _2110 = cbLight._m0[_1915].z + _715;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_1915].xyz));
    float _4229 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2122 = dot(vec3(_630, _631, _632), vec3(_2115, _2116, _2117));
    float _4240 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2115, _2116, _2117));
    float _4251 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2107 * _2107;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2143 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2144 = 1.0 - _2107;
    float _2154 = (0.5 / (((_2043 * ((_2121 * _2144) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2144) + _2107) * _2121))) * _2121;
    float _4262 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    float _2166 = (((_2143 * cbLight._m0[_2095].x) * _2156) * _1898) + ((((cbLight._m0[_2014].x * _1867) * _2067) * _2081) * _1911);
    float _2167 = (((_2143 * cbLight._m0[_2095].y) * _2156) * _1898) + ((((cbLight._m0[_2014].y * _1868) * _2067) * _2081) * _1911);
    float _2168 = (((_2143 * cbLight._m0[_2095].z) * _2156) * _1898) + ((((cbLight._m0[_2014].z * _1869) * _2067) * _2081) * _1911);
    float _2230;
    float _2232;
    float _2234;
    if (_1951)
    {
        _2230 = _2166;
        _2232 = _2167;
        _2234 = _2168;
    }
    else
    {
        uint _2236 = _1875 + 2u;
        uint _2240 = _1875 + 10u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _633) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _713;
        float _2257 = cbLight._m0[_2236].y + _714;
        float _2258 = cbLight._m0[_2236].z + _715;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_2236].xyz));
        float _4273 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2270 = dot(vec3(_630, _631, _632), vec3(_2263, _2264, _2265));
        float _4284 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4295 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2292 = 1.0 - _2255;
        float _2302 = (0.5 / (((_2043 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2292) + _2255) * _2269))) * _2269;
        float _4306 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2230 = (((_2291 * cbLight._m0[_2240].x) * _2304) * _2305) + _2166;
        _2232 = (((_2291 * cbLight._m0[_2240].y) * _2304) * _2305) + _2167;
        _2234 = (((_2291 * cbLight._m0[_2240].z) * _2304) * _2305) + _2168;
    }
    float _2340;
    float _2342;
    float _2344;
    if (_1969)
    {
        _2340 = _2230;
        _2342 = _2232;
        _2344 = _2234;
    }
    else
    {
        uint _2351 = _1875 + 3u;
        uint _2355 = _1875 + 11u;
        float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _633) * 0.949999988079071044921875);
        float _2370 = _2369 * _2369;
        float _2371 = cbLight._m0[_2351].x + _713;
        float _2372 = cbLight._m0[_2351].y + _714;
        float _2373 = cbLight._m0[_2351].z + _715;
        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
        float _2378 = _2377 * _2371;
        float _2379 = _2377 * _2372;
        float _2380 = _2377 * _2373;
        float _2381 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_2351].xyz));
        float _4322 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2385 = dot(vec3(_630, _631, _632), vec3(_2378, _2379, _2380));
        float _4333 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2389 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2378, _2379, _2380));
        float _4344 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2393 = _2370 * _2370;
        float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
        float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2407 = 1.0 - _2370;
        float _2417 = (0.5 / (((_2043 * ((_2384 * _2407) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2407) + _2370) * _2384))) * _2384;
        float _4355 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2419 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
        float _2420 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2340 = (((_2406 * cbLight._m0[_2355].x) * _2419) * _2420) + _2230;
        _2342 = (((_2406 * cbLight._m0[_2355].y) * _2419) * _2420) + _2232;
        _2344 = (((_2406 * cbLight._m0[_2355].z) * _2419) * _2420) + _2234;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1873.y == 0u)
    {
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2495;
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2495;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2495;
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.x;
        uint _2522 = uint((float(_2510.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2511))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2511)));
        float _2532 = (log2(_2498 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2533 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        uint _2536 = uint(isnan(14.0) ? _2533 : (isnan(_2533) ? 14.0 : min(_2533, 14.0)));
        uvec4 _2541 = texelFetch(g_lightClusterGridBuffer, int(((_2536 << 2u) + (_2522 << 6u)) >> 2u));
        uint _2542 = _2541.x;
        uint _2543 = _2510.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2543 >> 4u) & 15u)) + 4294967295u) & _2542) == 0u) || ((_2543 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            uint _2802 = 0u;
            uint _2811;
            bool _2812;
            for (;;)
            {
                _2811 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                _2812 = _2811 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2812)
                {
                    frontier_phi_68_pred = _2796;
                    frontier_phi_68_pred_1 = _2801;
                    frontier_phi_68_pred_2 = _2800;
                    frontier_phi_68_pred_3 = _2799;
                    frontier_phi_68_pred_4 = _2798;
                    frontier_phi_68_pred_5 = _2797;
                }
                else
                {
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    uint _2947;
                    _2941 = _2796;
                    _2942 = _2797;
                    _2943 = _2798;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2811;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    for (;;)
                    {
                        uint _2951 = uint(findLSB(_2947)) + (_2802 << 5u);
                        uint _2948 = (_2947 + 4294967295u) & _2947;
                        uint _2953 = _2951 * 48u;
                        vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2973 = (_2951 * 48u) + 4u;
                        vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2992 = (_2951 * 48u) + 8u;
                        vec3 _3003 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x));
                        float _3007 = _2967.x - _2496;
                        float _3008 = _2967.y - _2497;
                        float _3009 = _2967.z - _2498;
                        float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                        float _3013 = inversesqrt(_3010);
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3017 = dot(vec3(_749, _752, _755), vec3(_3014, _3015, _3016));
                        float _3022 = 1.0 - (_3010 * _2967.w);
                        float _4381 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3024 = sqrt(_3010) * _2986.w;
                        float _3027 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _3017) + _3028;
                        float _3034 = _3024 * _3024;
                        float _3038 = ((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3023) / ((_3034 * 0.699999988079071044921875) + 1.0);
                        float _3042 = (-0.0) - _2496;
                        float _3043 = (-0.0) - _2497;
                        float _3044 = (-0.0) - _2498;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3059 = exp2(log2(1.0 / ((_3034 * 3.5) + 5.0)) * 0.25);
                        float _3060 = 1.0 - _809;
                        float _3067 = sqrt(1.0 - ((1.0 - (_3060 * _3060)) * (1.0 - (_3059 * _3059))));
                        float _3068 = _3067 * _3067;
                        float _3069 = _3068 * _3068;
                        float _3070 = _3049 + _3014;
                        float _3071 = _3050 + _3015;
                        float _3072 = _3051 + _3016;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3080 = dot(vec3(_749, _752, _755), vec3(_3049, _3050, _3051));
                        float _4397 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3084 = dot(vec3(_749, _752, _755), vec3(_3076 * _3070, _3076 * _3071, _3076 * _3072));
                        float _4408 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3087 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3091 = ((_3087 * _3087) * (_3069 + (-1.0))) + 1.0;
                        float _3092 = _3027 * _3068;
                        float _3093 = _3092 * _3092;
                        float _3096 = ((1.0 - _3093) * _3017) + _3093;
                        float _4419 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3098 = 1.0 - _3068;
                        float _3108 = (0.5 / (((_3097 * ((_3083 * _3098) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3068) * _3083))) * _3097;
                        float _4430 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3119 = (((_3069 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3091 * _3091) * ((_3034 * 2.1991131305694580078125) + 3.141590118408203125))) * _3023;
                        _2871 = (_3038 * _2986.x) + _2944;
                        _2872 = (_3038 * _2986.y) + _2945;
                        _2873 = (_3038 * _2986.z) + _2946;
                        _2868 = (_3119 * _3003.x) + _2941;
                        _2869 = (_3119 * _3003.y) + _2942;
                        _2870 = (_3119 * _3003.z) + _2943;
                        if (_2948 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2941 = _2868;
                            _2942 = _2869;
                            _2943 = _2870;
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2948;
                        }
                    }
                    frontier_phi_68_pred = _2868;
                    frontier_phi_68_pred_1 = _2873;
                    frontier_phi_68_pred_2 = _2872;
                    frontier_phi_68_pred_3 = _2871;
                    frontier_phi_68_pred_4 = _2870;
                    frontier_phi_68_pred_5 = _2869;
                }
                _2644 = frontier_phi_68_pred;
                _2654 = frontier_phi_68_pred_1;
                _2652 = frontier_phi_68_pred_2;
                _2650 = frontier_phi_68_pred_3;
                _2648 = frontier_phi_68_pred_4;
                _2646 = frontier_phi_68_pred_5;
                uint _2803 = _2802 + 1u;
                if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2796 = _2644;
                    _2797 = _2646;
                    _2798 = _2648;
                    _2799 = _2650;
                    _2800 = _2652;
                    _2801 = _2654;
                    _2802 = _2803;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((4294967295u << _2660) & _2542) == 0u)
        {
            _2764 = _2643;
            _2766 = _2645;
            _2768 = _2647;
            _2770 = _2649;
            _2772 = _2651;
            _2774 = _2653;
        }
        else
        {
            float _2789 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
            float _2790 = _2789 * _2496;
            float _2791 = _2789 * _2497;
            float _2792 = _2789 * _2498;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2924 = _2643;
                float _2925 = _2645;
                float _2926 = _2647;
                float _2927 = _2649;
                float _2928 = _2651;
                float _2929 = _2653;
                uint _2930 = _2660;
                uint _2939;
                bool _2940;
                for (;;)
                {
                    _2939 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                    _2940 = _2939 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2940)
                    {
                        frontier_phi_79_pred = _2929;
                        frontier_phi_79_pred_1 = _2928;
                        frontier_phi_79_pred_2 = _2927;
                        frontier_phi_79_pred_3 = _2926;
                        frontier_phi_79_pred_4 = _2925;
                        frontier_phi_79_pred_5 = _2924;
                    }
                    else
                    {
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3146 = _2924;
                        float _3147 = _2925;
                        float _3148 = _2926;
                        float _3149 = _2927;
                        float _3150 = _2928;
                        float _3151 = _2929;
                        uint _3152 = _2939;
                        uint _3153;
                        vec4 _3178;
                        float _3179;
                        vec4 _3194;
                        vec3 _3206;
                        vec4 _3221;
                        vec4 _3236;
                        float _3282;
                        bool _3283;
                        for (;;)
                        {
                            uint _3163 = ((_2930 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3152));
                            _3153 = (_3152 + 4294967295u) & _3152;
                            uint _3165 = _3163 * 40u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3179 = _3178.w;
                            uint _3181 = (_3163 * 40u) + 4u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3163 * 40u) + 8u;
                            _3206 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x));
                            uint _3208 = (_3163 * 40u) + 16u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3163 * 40u) + 20u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3163 * 40u) + 24u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3257 = (_3163 * 40u) + 28u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3282 = fma(_2498, _3270.z, fma(_2497, _3270.y, _3270.x * _2496)) + _3270.w;
                            _3283 = !((fma(_2498, _3251.z, fma(_2497, _3251.y, _3251.x * _2496)) + _3251.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3283)
                            {
                                float _3310 = _3178.x - _2496;
                                float _3311 = _3178.y - _2497;
                                float _3312 = _3178.z - _2498;
                                float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                                float _3316 = inversesqrt(_3313);
                                float _3317 = _3316 * _3310;
                                float _3318 = _3316 * _3311;
                                float _3319 = _3316 * _3312;
                                float _3323 = 1.0 - (_3313 / (_3179 * _3179));
                                float _4441 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3328 = sqrt(_3313) * _3194.w;
                                float _3330 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                                float _3331 = _3330 * _3330;
                                float _3334 = ((1.0 - _3331) * dot(vec3(_3317, _3318, _3319), vec3(_749, _752, _755))) + _3331;
                                float _3337 = _3328 * _3328;
                                float _3341 = (fma(_2498, _3221.z, fma(_2497, _3221.y, _3221.x * _2496)) + _3221.w) / _3282;
                                float _3342 = (fma(_2498, _3236.z, fma(_2497, _3236.y, _3236.x * _2496)) + _3236.w) / _3282;
                                float _3346 = 1.0 - dot(vec2(_3341, _3342), vec2(_3341, _3342));
                                float _4457 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3348 = _3347 * (((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3324) / ((_3337 * 0.699999988079071044921875) + 1.0));
                                float _3360 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                                float _3361 = 1.0 - _809;
                                float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                                float _3369 = _3368 * _3368;
                                float _3370 = _3369 * _3369;
                                float _3371 = _3317 - _2790;
                                float _3372 = _3318 - _2791;
                                float _3373 = _3319 - _2792;
                                float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                                float _3381 = dot(vec3(_749, _752, _755), vec3((-0.0) - _2790, (-0.0) - _2791, (-0.0) - _2792));
                                float _4468 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3385 = dot(vec3(_749, _752, _755), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                                float _4479 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                                float _3393 = _3330 * _3369;
                                float _3394 = _3393 * _3393;
                                float _3400 = ((1.0 - _3394) * dot(vec3(_749, _752, _755), vec3(_3317, _3318, _3319))) + _3394;
                                float _4490 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3402 = 1.0 - _3369;
                                float _3412 = (0.5 / (((_3401 * ((_3384 * _3402) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3369) * _3384))) * _3401;
                                float _4501 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3422 = (_3347 * _3324) * (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) / ((_3392 * _3392) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3348 * _3194.y;
                                frontier_phi_85_pred_1 = _3348 * _3194.x;
                                frontier_phi_85_pred_2 = _3422 * _3206.z;
                                frontier_phi_85_pred_3 = _3422 * _3206.y;
                                frontier_phi_85_pred_4 = _3422 * _3206.x;
                                frontier_phi_85_pred_5 = _3348 * _3194.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3430 = frontier_phi_85_pred;
                            _3429 = frontier_phi_85_pred_1;
                            _3428 = frontier_phi_85_pred_2;
                            _3427 = frontier_phi_85_pred_3;
                            _3426 = frontier_phi_85_pred_4;
                            _3431 = frontier_phi_85_pred_5;
                            _3136 = _3429 + _3149;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            _3135 = _3428 + _3148;
                            if (_3153 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3153;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3138;
                        frontier_phi_79_pred_1 = _3137;
                        frontier_phi_79_pred_2 = _3136;
                        frontier_phi_79_pred_3 = _3135;
                        frontier_phi_79_pred_4 = _3134;
                        frontier_phi_79_pred_5 = _3133;
                    }
                    _2775 = frontier_phi_79_pred;
                    _2773 = frontier_phi_79_pred_1;
                    _2771 = frontier_phi_79_pred_2;
                    _2769 = frontier_phi_79_pred_3;
                    _2767 = frontier_phi_79_pred_4;
                    _2765 = frontier_phi_79_pred_5;
                    uint _2931 = _2930 + 1u;
                    if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2924 = _2765;
                        _2925 = _2767;
                        _2926 = _2769;
                        _2927 = _2771;
                        _2928 = _2773;
                        _2929 = _2775;
                        _2930 = _2931;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2769;
                frontier_phi_60_61_ladder_1 = _2775;
                frontier_phi_60_61_ladder_2 = _2773;
                frontier_phi_60_61_ladder_3 = _2771;
                frontier_phi_60_61_ladder_4 = _2767;
                frontier_phi_60_61_ladder_5 = _2765;
            }
            else
            {
                frontier_phi_60_61_ladder = _2647;
                frontier_phi_60_61_ladder_1 = _2653;
                frontier_phi_60_61_ladder_2 = _2651;
                frontier_phi_60_61_ladder_3 = _2649;
                frontier_phi_60_61_ladder_4 = _2645;
                frontier_phi_60_61_ladder_5 = _2643;
            }
            _2764 = frontier_phi_60_61_ladder_5;
            _2766 = frontier_phi_60_61_ladder_4;
            _2768 = frontier_phi_60_61_ladder;
            _2770 = frontier_phi_60_61_ladder_3;
            _2772 = frontier_phi_60_61_ladder_2;
            _2774 = frontier_phi_60_61_ladder_1;
        }
        float _2779 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2555 = (_2779 * _2770) + _2007;
        _2557 = (_2779 * _2772) + _2009;
        _2559 = (_2779 * _2774) + _2011;
        _2561 = ((_2764 * 0.039999999105930328369140625) * _2779) + _2340;
        _2563 = ((_2766 * 0.039999999105930328369140625) * _2779) + _2342;
        _2565 = ((_2768 * 0.039999999105930328369140625) * _2779) + _2344;
    }
    else
    {
        _2555 = _2007;
        _2557 = _2009;
        _2559 = _2011;
        _2561 = _2340;
        _2563 = _2342;
        _2565 = _2344;
    }
    float _4517 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4528 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4539 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2582 = ((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2555 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _793))) + ((_2561 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    float _2583 = ((isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2557 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _793))) + ((_2563 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    float _2584 = ((isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2559 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _793))) + ((_2565 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    uint _2585 = _249 + 6u;
    float _2593 = _730 / cbSceneParam._m0[86u].x;
    float _2594 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2669 = _2668 / _655;
        float _2680 = _2669 * _706;
        float _2681 = _707 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2684 = _2669 * _708;
        float _2686 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2687 = _2686 + cbSceneParam._m0[79u].w;
        float _2688 = cbSceneParam._m0[79u].w - _2681;
        float _2694 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2684 * _2684));
        float _2697 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2694;
        float _2702 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2704 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2881;
        if (abs((_2682 - _2686) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2881 = ((((_2687 > 0.0) ? exp2(_2702 * _2687) : (2.0 - exp2(_2704 * _2687))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2697;
        }
        else
        {
            float _2825 = 1.0 / cbSceneParam._m0[80u].x;
            float _2826 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : max(_2687, _2688));
            float _2827 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : min(_2687, _2688));
            float _2836 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : min(_2826, 0.0));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            _2881 = ((abs(_2694 / _2682) * cbSceneParam._m0[80u].y) * ((((_2836 - _2837) * 2.0) - ((exp2(_2702 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0)))) - exp2(_2702 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))))) * _2825)) - ((exp2(_2704 * _2836) - exp2(_2704 * _2837)) * _2825))) + (_2697 * cbSceneParam._m0[80u].z);
        }
        vec4 _2883 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2892 = exp2((_2881 * (-1.44269502162933349609375)) * (1.0 - _2883.w));
        float _2893 = log2(_2892);
        float _2909 = log2(_2613);
        _2706 = (exp2(_2909 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].x)) * _2883.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2708 = (exp2(_2909 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].y)) * _2883.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2710 = (exp2(_2909 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].z)) * _2883.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2712 = _2892 * _2613;
    }
    else
    {
        _2706 = _2610;
        _2708 = _2611;
        _2710 = _2612;
        _2712 = _2613;
    }
    bool _2919;
    vec4 _2722;
    vec4 _2744;
    float _2746;
    float _2750;
    float _2751;
    float _2752;
    float _2753;
    bool _2763;
    for (;;)
    {
        _2722 = cbMatDynParam._m0[0u];
        float _2724 = roundEven(_2722.y);
        bool _2725 = _2724 == 3.0;
        float _2726 = log2(_2712);
        float _2733 = exp2(_2726 * cbSceneParam._m0[78u].x) * _2582;
        float _2734 = exp2(_2726 * cbSceneParam._m0[78u].y) * _2583;
        float _2735 = exp2(_2726 * cbSceneParam._m0[78u].z) * _2584;
        float _2742 = _719 + (-0.5);
        _2744 = cbMtdParam._m0[1u];
        _2746 = _2744.y * _2742;
        float _2749 = (_2724 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2750 = _2749 * (_2725 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2706)));
        _2751 = _2749 * (_2725 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2708)));
        _2752 = _2749 * (_2725 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2710)));
        _2753 = _2742 * 0.999000012874603271484375;
        _2763 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2763)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2753) < 0.5)
            {
                _2919 = true;
                break;
            }
        }
        uint _2860 = _768 + uint(_2722.w);
        if ((cbInstanceData._m0[_2860].w < 1.0) && ((cbInstanceData._m0[_2860].w + _2753) < 0.5))
        {
            _2919 = true;
            break;
        }
        if ((_2746 + 1.0) < _2744.x)
        {
            _2919 = true;
            break;
        }
        _2919 = false;
        break;
    }
    float _3124;
    if (_2919)
    {
        discard_state = true;
        _3124 = 0.0;
    }
    else
    {
        _3124 = cbInstanceData._m0[_2585].w;
    }
    SV_Target.x = _2750;
    SV_Target.y = _2751;
    SV_Target.z = _2752;
    SV_Target.w = _3124;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
    discard_exit();
}


