#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1193;
float _3836;
float _3837;
float _3838;
float _3839;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _369 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _369) * cbMtdParam._m0[24u].x) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3848 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _394 = (_387 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _395 = (_387 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _396 = (_387 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _387) + _455;
    float _467 = ((((_434.x - _453) * _387) + _453) * 2.0) + (-1.0);
    float _468 = ((((_434.y - _454) * _387) + _454) * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3859 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    float _479 = _467 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_409.x * 2.0) + (-1.0)));
    float _480 = _468 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_409.y * 2.0) + (-1.0)));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _509 = _507.x;
    float _510 = 1.0 - _509;
    float _538 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_509 - _510) * cbMtdParam._m0[24u].w) + _510) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3870 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _547 = ((((cbMtdParam._m0[10u].x - _394) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _539) + _394;
    float _548 = ((((cbMtdParam._m0[10u].y - _395) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _539) + _395;
    float _549 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _396)) * _539) + _396;
    float _554 = (((_409.z - _464) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _464;
    float _558 = ((cbMtdParam._m0[23u].y - _554) * _539) + _554;
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _583 = (_577.x * 2.0) + (-1.0);
    float _584 = (_577.y * 2.0) + (-1.0);
    float _585 = dot(vec2(_583, _584), vec2(_583, _584));
    float _3881 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _601 = (_539 * (((cbMtdParam._m0[22u].z * _479) - _479) + _583)) + _479;
    float _602 = (_539 * (((cbMtdParam._m0[22u].z * _480) - _480) + _584)) + _480;
    float _603 = (_539 * (sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) - _474)) + _474;
    float _605 = cbMtdParam._m0[22u].x + _493.w;
    float _609 = gl_FragCoord.x * 0.125;
    float _611 = gl_FragCoord.y * 0.125;
    float _621 = fma(_603, _238 * NORMAL.x, fma(_602, _245 * TANGENT.x, (_231 * _223) * _601));
    float _624 = fma(_603, _238 * NORMAL.y, fma(_602, _245 * TANGENT.y, (_231 * _224) * _601));
    float _627 = fma(_603, _238 * NORMAL.z, fma(_602, _245 * TANGENT.z, (_231 * _225) * _601));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3892 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _635 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3914 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3925 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3936 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_609, _611)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _708 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _698);
    float _709 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _698);
    float _710 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _698);
    float _714 = inversesqrt(dot(vec3(_708, _709, _710), vec3(_708, _709, _710)));
    float _715 = _708 * _714;
    float _716 = _709 * _714;
    float _717 = _710 * _714;
    vec4 _719 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_609, _611));
    float _721 = _719.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _875 = sqrt(((_708 * _708) + (_709 * _709)) + (_710 * _710));
        float _881 = (cbMatDynParam._m0[5u].x * _875) + cbMatDynParam._m0[5u].y;
        float _3947 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _886 = (cbMatDynParam._m0[5u].z * _875) + cbMatDynParam._m0[5u].w;
        float _3958 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) - _882)) + _882) < ((_721 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _732 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _733 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _751 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _754 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _757 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _770 = _251 + 9u;
    uint _771 = _770 + uint(cbMatDynParam._m0[0u].w);
    float _777 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_771].x;
    float _778 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_771].y;
    float _779 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_771].z;
    float _3969 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _732, cbSceneParam._m0[86u].y * _733));
    float _795 = ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * TEXCOORD_5.w) * _791.x;
    float _796 = dot(vec3(_632, _633, _634), vec3(_715, _716, _717));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _632) - _715;
    float _804 = (_799 * _633) - _716;
    float _805 = (_799 * _634) - _717;
    float _809 = abs(dot(vec3(_715, _716, _717), vec3(_632, _633, _634)));
    float _4002 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_635);
    float _824 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1192;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = fma(_864, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856));
        float _921 = fma(_864, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856));
        float _925 = fma(_864, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856));
        float _950 = _856 + _632;
        float _951 = _860 + _633;
        float _952 = _864 + _634;
        float _962 = fma(_952, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950)) - _917;
        float _963 = fma(_952, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950)) - _921;
        float _964 = fma(_952, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950)) - _925;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_917 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_921 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[34u].z) + ((((((_925 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1020 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_986.x + (-0.5));
        float _1022 = _1020 * (_986.y + (-0.5));
        float _1023 = _1020 * (_986.z + (-0.5));
        float _1030 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_993.x + (-0.5));
        float _1032 = _1030 * (_993.y + (-0.5));
        float _1033 = _1030 * (_993.z + (-0.5));
        float _1040 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1000.x + (-0.5));
        float _1042 = _1040 * (_1000.y + (-0.5));
        float _1043 = _1040 * (_1000.z + (-0.5));
        float _1050 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1007.x + (-0.5));
        float _1052 = _1050 * (_1007.y + (-0.5));
        float _1053 = _1050 * (_1007.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1074 = (dot(vec3(_632, _633, _634), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1084 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _4050 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1086 + 1.0))) + _1091) * _1054;
        float _1101 = _1022 * 0.5;
        float _1102 = _1032 * 0.5;
        float _1103 = _1042 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_632, _633, _634), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _4083 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1128 + 1.0))) + _1133) * _1055;
        float _1143 = _1023 * 0.5;
        float _1144 = _1033 * 0.5;
        float _1145 = _1043 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_632, _633, _634), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _4116 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1170 + 1.0))) + _1175) * _1056;
        _1192 = _1023;
        _1194 = _1022;
        _1195 = _1021;
        _1196 = _1033;
        _1197 = _1032;
        _1198 = _1031;
        _1199 = _1043;
        _1200 = _1042;
        _1201 = _1041;
        _1202 = _1056;
        _1203 = _1055;
        _1204 = _1054;
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _1193;
        _1194 = _1193;
        _1195 = _1193;
        _1196 = _1193;
        _1197 = _1193;
        _1198 = _1193;
        _1199 = _1193;
        _1200 = _1193;
        _1201 = _1193;
        _1202 = _1193;
        _1203 = _1193;
        _1204 = _1193;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1231 = fma(_864, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _856));
        float _1235 = fma(_864, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _856));
        float _1239 = fma(_864, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _856));
        float _1262 = _856 + _632;
        float _1263 = _860 + _633;
        float _1264 = _864 + _634;
        float _1274 = fma(_1264, cbModelParam._m0[30u].z, fma(_1263, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1262)) - _1231;
        float _1275 = fma(_1264, cbModelParam._m0[31u].z, fma(_1263, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1262)) - _1235;
        float _1276 = fma(_1264, cbModelParam._m0[32u].z, fma(_1263, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1262)) - _1239;
        float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
        float _1293 = ((_1280 * _1274) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1231 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1280 * _1275) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1235 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1280 * _1276) / cbModelParam._m0[35u].z) + ((((((_1239 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        float _1330 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1297.x + (-0.5));
        float _1332 = _1330 * (_1297.y + (-0.5));
        float _1333 = _1330 * (_1297.z + (-0.5));
        float _1340 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1304.x + (-0.5));
        float _1342 = _1340 * (_1304.y + (-0.5));
        float _1343 = _1340 * (_1304.z + (-0.5));
        float _1350 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1311.x + (-0.5));
        float _1352 = _1350 * (_1311.y + (-0.5));
        float _1353 = _1350 * (_1311.z + (-0.5));
        float _1360 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1318.x + (-0.5));
        float _1362 = _1360 * (_1318.y + (-0.5));
        float _1363 = _1360 * (_1318.z + (-0.5));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = _1331 * 0.5;
        float _1368 = _1341 * 0.5;
        float _1369 = _1351 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_632, _633, _634), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4179 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1394 + 1.0))) + _1399) * _1364;
        float _1409 = _1332 * 0.5;
        float _1410 = _1342 * 0.5;
        float _1411 = _1352 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_632, _633, _634), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4212 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1436 + 1.0))) + _1441) * _1365;
        float _1451 = _1333 * 0.5;
        float _1452 = _1343 * 0.5;
        float _1453 = _1353 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_632, _633, _634), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4245 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1478 + 1.0))) + _1483) * _1366;
        _1500 = _1333;
        _1501 = _1332;
        _1502 = _1331;
        _1503 = _1343;
        _1504 = _1342;
        _1505 = _1341;
        _1506 = _1353;
        _1507 = _1352;
        _1508 = _1351;
        _1509 = _1366;
        _1510 = _1365;
        _1511 = _1364;
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1193;
        _1501 = _1193;
        _1502 = _1193;
        _1503 = _1193;
        _1504 = _1193;
        _1505 = _1193;
        _1506 = _1193;
        _1507 = _1193;
        _1508 = _1193;
        _1509 = _1193;
        _1510 = _1193;
        _1511 = _1193;
        _1512 = 0.0;
        _1513 = 0.0;
        _1514 = 0.0;
    }
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1205)) + _1205;
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1206)) + _1206;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1207)) + _1207;
    float _1547 = fma(_1526, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1524 * cbSceneParam._m0[89u].x));
    float _1550 = fma(_1526, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1524 * cbSceneParam._m0[90u].x));
    float _1553 = fma(_1526, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1524));
    float _1568 = _803 * 0.5;
    float _1569 = _804 * 0.5;
    float _1570 = _805 * 0.5;
    float _1571 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1574 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1577 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1611;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1584 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1192, _1196, _1199, _1202));
        float _1588 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1592 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1599 = dot(vec4(cbModelParam._m0[39u]), vec4(_1568, _1569, _1570, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1622;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1613 = dot(vec4(cbModelParam._m0[40u]), vec4(_1568, _1569, _1570, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1626 = (_1622 * cbModelParam._m0[1u].x) + (_1611 * (1.0 - cbModelParam._m0[1u].x));
    float _1636 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _635);
    float _1637 = isnan(_1636) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1636 : min(cbModelParam._m0[25u].z, _1636));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1686 = fma(_864, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856)) + cbModelParam._m0[13u].w;
        float _1690 = fma(_864, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856)) + cbModelParam._m0[14u].w;
        float _1694 = fma(_864, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856)) + cbModelParam._m0[15u].w;
        float _1697 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1700 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1703 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1731;
        if (_1697 > 0.0)
        {
            _1731 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1731 = frontier_phi_19_17_ladder;
        }
        float _1902;
        if (_1700 > 0.0)
        {
            _1902 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1902 = frontier_phi_28_24_ladder;
        }
        float _2197;
        if (_1703 > 0.0)
        {
            _2197 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2197 = frontier_phi_40_35_ladder;
        }
        float _2199 = isnan(_1902) ? _1731 : (isnan(_1731) ? _1902 : min(_1731, _1902));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1697) + _1686;
        float _2205 = (_2200 * _1700) + _1690;
        float _2206 = (_2200 * _1703) + _1694;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2209 = (-1.0) - _2207;
        float _2211 = _2207 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2206 > _2211) || ((_2206 < _2209) || ((_2205 > _2211) || ((_2205 < _2209) || ((_2204 < _2209) || (_2204 > _2211))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2206, cbModelParam._m0[9u].z, fma(_2205, cbModelParam._m0[9u].y, _2204 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2206, cbModelParam._m0[10u].z, fma(_2205, cbModelParam._m0[10u].y, _2204 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2206, cbModelParam._m0[11u].z, fma(_2205, cbModelParam._m0[11u].y, _2204 * cbModelParam._m0[11u].x))), _1637);
            frontier_phi_18_40_ladder = _2351.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2351.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2351.x * cbModelParam._m0[1u].y;
        }
        _1719 = frontier_phi_18_40_ladder_2;
        _1721 = frontier_phi_18_40_ladder_1;
        _1723 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1637);
        _1719 = _1707.x * cbModelParam._m0[1u].y;
        _1721 = _1707.y * cbModelParam._m0[1u].y;
        _1723 = _1707.z * cbModelParam._m0[1u].y;
    }
    float _1727 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _635);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1727 : min(cbModelParam._m0[25u].w, _1727));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1783 = fma(_864, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856)) + cbModelParam._m0[21u].w;
        float _1787 = fma(_864, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856)) + cbModelParam._m0[22u].w;
        float _1791 = fma(_864, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856)) + cbModelParam._m0[23u].w;
        float _1794 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1797 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1800 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1907;
        if (_1794 > 0.0)
        {
            _1907 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1907 = frontier_phi_30_26_ladder;
        }
        float _2224;
        if (_1797 > 0.0)
        {
            _2224 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2224 = frontier_phi_42_37_ladder;
        }
        float _2551;
        if (_1800 > 0.0)
        {
            _2551 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2551 = frontier_phi_52_49_ladder;
        }
        float _2553 = isnan(_2224) ? _1907 : (isnan(_1907) ? _2224 : min(_1907, _2224));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1794) + _1783;
        float _2559 = (_2554 * _1797) + _1787;
        float _2560 = (_2554 * _1800) + _1791;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1728);
            frontier_phi_27_52_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1819 = frontier_phi_27_52_ladder_2;
        _1821 = frontier_phi_27_52_ladder_1;
        _1823 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1728);
        _1819 = _1803.x * cbModelParam._m0[1u].z;
        _1821 = _1803.y * cbModelParam._m0[1u].z;
        _1823 = _1803.z * cbModelParam._m0[1u].z;
    }
    float _1835 = ((((1.0 - _824) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_824 * _811)) * _795;
    float _1836 = _1835 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1837 = _1835 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1838 = _1835 * ((cbModelParam._m0[1u].w * (_1823 - _1723)) + _1723);
    float _1841 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1836 * cbSceneParam._m0[91u].x));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1885 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1894 = _1881 / _1893;
    float _1895 = _1885 / _1893;
    float _1896 = _1889 / _1893;
    float _2043;
    float _2044;
    float _2045;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1923 = ((uint(_1896 > cbSceneParam._m0[59u].y) + uint(_1896 > cbSceneParam._m0[59u].x)) + uint(_1896 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1924 = _1923 + 43u;
        uint _1932 = _1923 + 44u;
        uint _1940 = _1923 + 45u;
        uint _1948 = _1923 + 46u;
        float _1959 = fma(_1893, cbSceneParam._m0[_1924].w, fma(_1889, cbSceneParam._m0[_1924].z, fma(_1885, cbSceneParam._m0[_1924].y, _1881 * cbSceneParam._m0[_1924].x)));
        float _1963 = fma(_1893, cbSceneParam._m0[_1932].w, fma(_1889, cbSceneParam._m0[_1932].z, fma(_1885, cbSceneParam._m0[_1932].y, _1881 * cbSceneParam._m0[_1932].x)));
        float _1971 = fma(_1893, cbSceneParam._m0[_1948].w, fma(_1889, cbSceneParam._m0[_1948].z, fma(_1885, cbSceneParam._m0[_1948].y, _1881 * cbSceneParam._m0[_1948].x)));
        float _1976 = cbSceneParam._m0[33u].z * _1971;
        float _1978 = cbSceneParam._m0[33u].w * _1971;
        float _1981 = fma(_1893, cbSceneParam._m0[_1940].w, fma(_1889, cbSceneParam._m0[_1940].z, fma(_1885, cbSceneParam._m0[_1940].y, _1881 * cbSceneParam._m0[_1940].x))) / _1971;
        float _2029 = (cbSceneParam._m0[33u].x - sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896))) * cbSceneParam._m0[33u].y;
        float _4371 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2036 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 + _1959) / _1971, (_1978 + _1963) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 + _1959) / _1971, (_1963 - _1976) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 - _1976) / _1971, (_1963 - _1978) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 - _1978) / _1971, (_1976 + _1963) / _1971), _1981), 0.0)).x), vec4(0.25)));
        _2043 = 1.0 - (_2036 * cbSceneParam._m0[34u].x);
        _2044 = 1.0 - (_2036 * cbSceneParam._m0[34u].y);
        _2045 = 1.0 - (_2036 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2043 = 1.0;
        _2044 = 1.0;
        _2045 = 1.0;
    }
    float _2109;
    float _2111;
    float _2113;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2097 = fma(_1893, cbSceneParam._m0[63u].w, fma(_1889, cbSceneParam._m0[63u].z, fma(_1885, cbSceneParam._m0[63u].y, _1881 * cbSceneParam._m0[63u].x)));
        float _2098 = fma(_1893, cbSceneParam._m0[60u].w, fma(_1889, cbSceneParam._m0[60u].z, fma(_1885, cbSceneParam._m0[60u].y, _1881 * cbSceneParam._m0[60u].x))) / _2097;
        float _2099 = fma(_1893, cbSceneParam._m0[61u].w, fma(_1889, cbSceneParam._m0[61u].z, fma(_1885, cbSceneParam._m0[61u].y, _1881 * cbSceneParam._m0[61u].x))) / _2097;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2098 >= cbSceneParam._m0[64u].x) && (_2099 >= cbSceneParam._m0[64u].y)) && (_2098 <= cbSceneParam._m0[64u].z)) && (_2099 <= cbSceneParam._m0[64u].w))
        {
            float _2237 = fma(_1893, cbSceneParam._m0[62u].w, fma(_1889, cbSceneParam._m0[62u].z, fma(_1885, cbSceneParam._m0[62u].y, _1881 * cbSceneParam._m0[62u].x))) / _2097;
            float _2241 = isnan(cbSceneParam._m0[41u].w) ? _2237 : (isnan(_2237) ? cbSceneParam._m0[41u].w : max(_2237, cbSceneParam._m0[41u].w));
            float _2284 = (cbSceneParam._m0[33u].x - sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896))) * cbSceneParam._m0[33u].y;
            float _4387 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
            float _2291 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2098, cbSceneParam._m0[33u].w + _2099), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2098, _2099 - cbSceneParam._m0[33u].z), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2098 - cbSceneParam._m0[33u].z, _2099 - cbSceneParam._m0[33u].w), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2098 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2099), _2241), 0.0)).x), vec4(0.25)));
            float _2295 = 1.0 - (_2291 * cbSceneParam._m0[34u].x);
            float _2296 = 1.0 - (_2291 * cbSceneParam._m0[34u].y);
            float _2297 = 1.0 - (_2291 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2297) ? _2045 : (isnan(_2045) ? _2297 : min(_2045, _2297));
            frontier_phi_39_38_ladder_1 = isnan(_2296) ? _2044 : (isnan(_2044) ? _2296 : min(_2044, _2296));
            frontier_phi_39_38_ladder_2 = isnan(_2295) ? _2043 : (isnan(_2043) ? _2295 : min(_2043, _2295));
        }
        else
        {
            frontier_phi_39_38_ladder = _2045;
            frontier_phi_39_38_ladder_1 = _2044;
            frontier_phi_39_38_ladder_2 = _2043;
        }
        _2109 = frontier_phi_39_38_ladder_2;
        _2111 = frontier_phi_39_38_ladder_1;
        _2113 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2109 = _2043;
        _2111 = _2044;
        _2113 = _2045;
    }
    uvec4 _2118 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2120 = _2118.x * 14u;
    uint _2121 = _2120 + 13u;
    float _2128 = _795 + (-1.0);
    float _2133 = (cbLight._m0[_2121].x * _2128) + 1.0;
    float _2134 = (cbLight._m0[_2121].y * _2128) + 1.0;
    float _2135 = (cbLight._m0[_2121].z * _2128) + 1.0;
    float _2136 = (cbLight._m0[_2121].w * _2128) + 1.0;
    uint _2137 = _2120 + 5u;
    float _2143 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2147 = _2120 + 4u;
    float _2156 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
    uint _2160 = _2120 | 1u;
    float _2171 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_632, _633, _634));
    float _2174 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_632, _633, _634));
    float _4423 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _4434 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2179 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * 0.3183098733425140380859375;
    float _2181 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * 0.3183098733425140380859375;
    float _2188 = ((cbLight._m0[_2137].x * _2143) * _2181) + (((cbLight._m0[_2147].x * _2109) * _2156) * _2179);
    float _2189 = ((_2143 * cbLight._m0[_2137].y) * _2181) + (((cbLight._m0[_2147].y * _2111) * _2156) * _2179);
    float _2190 = ((_2143 * cbLight._m0[_2137].z) * _2181) + (((cbLight._m0[_2147].z * _2113) * _2156) * _2179);
    uvec4 _2194 = floatBitsToUint(cbLight._m0[_2120 + 12u]);
    bool _2196 = _2194.x == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2196)
    {
        _2298 = _2188;
        _2300 = _2189;
        _2302 = _2190;
    }
    else
    {
        uint _2306 = _2120 + 6u;
        float _2322 = (dot(vec3(cbLight._m0[_2120 + 2u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4445 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2325 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2298 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2188;
        _2300 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2189;
        _2302 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2190;
    }
    bool _2305 = _2194.y == 0u;
    float _2360;
    float _2362;
    float _2364;
    if (_2305)
    {
        _2360 = _2298;
        _2362 = _2300;
        _2364 = _2302;
    }
    else
    {
        uint _2522 = _2120 + 7u;
        float _2538 = (dot(vec3(cbLight._m0[_2120 + 3u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4461 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2541 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2360 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2298;
        _2362 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2300;
        _2364 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2302;
    }
    uint _2367 = _2120 + 8u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _635) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2120].x + _715;
    float _2383 = cbLight._m0[_2120].y + _716;
    float _2384 = cbLight._m0[_2120].z + _717;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2120].xyz));
    float _4477 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _4488 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2396 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2397 = dot(vec3(_632, _633, _634), vec3(_2389, _2390, _2391));
    float _4499 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2389, _2390, _2391));
    float _4510 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2381 * _2381;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2421 = 1.0 - _2381;
    float _2432 = (0.5 / (((_2396 * ((_2395 * _2421) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2421) + _2381) * _2395))) * _2395;
    float _4521 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    uint _2448 = _2120 + 9u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _635) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2160].x + _715;
    float _2462 = cbLight._m0[_2160].y + _716;
    float _2463 = cbLight._m0[_2160].z + _717;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2160].xyz));
    float _4532 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2475 = dot(vec3(_632, _633, _634), vec3(_2468, _2469, _2470));
    float _4543 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2479 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2468, _2469, _2470));
    float _4554 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2483 = _2460 * _2460;
    float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
    float _2496 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2497 = 1.0 - _2460;
    float _2507 = (0.5 / (((_2396 * ((_2474 * _2497) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2497) + _2460) * _2474))) * _2474;
    float _4565 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
    float _2519 = (((_2496 * cbLight._m0[_2448].x) * _2509) * _2143) + ((((cbLight._m0[_2367].x * _2109) * _2420) * _2434) * _2156);
    float _2520 = (((_2496 * cbLight._m0[_2448].y) * _2509) * _2143) + ((((cbLight._m0[_2367].y * _2111) * _2420) * _2434) * _2156);
    float _2521 = (((_2496 * cbLight._m0[_2448].z) * _2509) * _2143) + ((((cbLight._m0[_2367].z * _2113) * _2420) * _2434) * _2156);
    float _2577;
    float _2579;
    float _2581;
    if (_2196)
    {
        _2577 = _2519;
        _2579 = _2520;
        _2581 = _2521;
    }
    else
    {
        uint _2583 = _2120 + 2u;
        uint _2587 = _2120 + 10u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _635) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _715;
        float _2604 = cbLight._m0[_2583].y + _716;
        float _2605 = cbLight._m0[_2583].z + _717;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2583].xyz));
        float _4576 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2617 = dot(vec3(_632, _633, _634), vec3(_2610, _2611, _2612));
        float _4587 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4598 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2638 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2639 = 1.0 - _2602;
        float _2649 = (0.5 / (((_2396 * ((_2616 * _2639) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2639) + _2602) * _2616))) * _2616;
        float _4609 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2577 = (((_2638 * cbLight._m0[_2587].x) * _2651) * _2652) + _2519;
        _2579 = (((_2638 * cbLight._m0[_2587].y) * _2651) * _2652) + _2520;
        _2581 = (((_2638 * cbLight._m0[_2587].z) * _2651) * _2652) + _2521;
    }
    float _2683;
    float _2685;
    float _2687;
    if (_2305)
    {
        _2683 = _2577;
        _2685 = _2579;
        _2687 = _2581;
    }
    else
    {
        uint _2694 = _2120 + 3u;
        uint _2698 = _2120 + 11u;
        float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _635) * 0.949999988079071044921875);
        float _2713 = _2712 * _2712;
        float _2714 = cbLight._m0[_2694].x + _715;
        float _2715 = cbLight._m0[_2694].y + _716;
        float _2716 = cbLight._m0[_2694].z + _717;
        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
        float _2721 = _2720 * _2714;
        float _2722 = _2720 * _2715;
        float _2723 = _2720 * _2716;
        float _2724 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2694].xyz));
        float _4625 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2728 = dot(vec3(_632, _633, _634), vec3(_2721, _2722, _2723));
        float _4636 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2732 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2721, _2722, _2723));
        float _4647 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2736 = _2713 * _2713;
        float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
        float _2749 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2750 = 1.0 - _2713;
        float _2760 = (0.5 / (((_2396 * ((_2727 * _2750) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2750) + _2713) * _2727))) * _2727;
        float _4658 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2683 = (((_2749 * cbLight._m0[_2698].x) * _2762) * _2763) + _2577;
        _2685 = (((_2749 * cbLight._m0[_2698].y) * _2762) * _2763) + _2579;
        _2687 = (((_2749 * cbLight._m0[_2698].z) * _2762) * _2763) + _2581;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2118.y == 0u)
    {
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.x;
        uint _2796 = uint((float(_2784.y) * floor(float(uint(cbSceneParam._m0[85u].y * _733) / _2785))) + floor(float(uint(cbSceneParam._m0[85u].x * _732) / _2785)));
        float _2806 = (log2(_1896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2807 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        uint _2810 = uint(isnan(14.0) ? _2807 : (isnan(_2807) ? 14.0 : min(_2807, 14.0)));
        uvec4 _2815 = texelFetch(g_lightClusterGridBuffer, int(((_2810 << 2u) + (_2796 << 6u)) >> 2u));
        uint _2816 = _2815.x;
        uint _2817 = _2784.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2817 >> 4u) & 15u)) + 4294967295u) & _2816) == 0u) || ((_2817 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            uint _3055 = 0u;
            uint _3064;
            bool _3065;
            for (;;)
            {
                _3064 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                _3065 = _3064 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3065)
                {
                    frontier_phi_73_pred = _3054;
                    frontier_phi_73_pred_1 = _3053;
                    frontier_phi_73_pred_2 = _3052;
                    frontier_phi_73_pred_3 = _3051;
                    frontier_phi_73_pred_4 = _3050;
                    frontier_phi_73_pred_5 = _3049;
                }
                else
                {
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    uint _3200;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3064;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    for (;;)
                    {
                        uint _3204 = uint(findLSB(_3200)) + (_3055 << 5u);
                        uint _3201 = (_3200 + 4294967295u) & _3200;
                        uint _3206 = _3204 * 48u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3226 = (_3204 * 48u) + 4u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3245 = (_3204 * 48u) + 8u;
                        vec3 _3256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x));
                        float _3260 = _3220.x - _1894;
                        float _3261 = _3220.y - _1895;
                        float _3262 = _3220.z - _1896;
                        float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                        float _3266 = inversesqrt(_3263);
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3270 = dot(vec3(_751, _754, _757), vec3(_3267, _3268, _3269));
                        float _3275 = 1.0 - (_3263 * _3220.w);
                        float _4684 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3277 = sqrt(_3263) * _3239.w;
                        float _3280 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3270) + _3281;
                        float _3287 = _3277 * _3277;
                        float _3291 = ((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3276) / ((_3287 * 0.699999988079071044921875) + 1.0);
                        float _3295 = (-0.0) - _1894;
                        float _3296 = (-0.0) - _1895;
                        float _3297 = (-0.0) - _1896;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3311 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                        float _3312 = 1.0 - _811;
                        float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                        float _3320 = _3319 * _3319;
                        float _3321 = _3320 * _3320;
                        float _3322 = _3302 + _3267;
                        float _3323 = _3303 + _3268;
                        float _3324 = _3304 + _3269;
                        float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                        float _3332 = dot(vec3(_751, _754, _757), vec3(_3302, _3303, _3304));
                        float _4700 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3336 = dot(vec3(_751, _754, _757), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                        float _4711 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3339 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                        float _3344 = _3280 * _3320;
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3270) + _3345;
                        float _4722 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3350 = 1.0 - _3320;
                        float _3360 = (0.5 / (((_3349 * ((_3335 * _3350) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3320) * _3335))) * _3349;
                        float _4733 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3371 = (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3343 * _3343) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125))) * _3276;
                        _3124 = (_3291 * _3239.x) + _3197;
                        _3125 = (_3291 * _3239.y) + _3198;
                        _3126 = (_3291 * _3239.z) + _3199;
                        _3121 = (_3371 * _3256.x) + _3194;
                        _3122 = (_3371 * _3256.y) + _3195;
                        _3123 = (_3371 * _3256.z) + _3196;
                        if (_3201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3201;
                        }
                    }
                    frontier_phi_73_pred = _3126;
                    frontier_phi_73_pred_1 = _3125;
                    frontier_phi_73_pred_2 = _3124;
                    frontier_phi_73_pred_3 = _3123;
                    frontier_phi_73_pred_4 = _3122;
                    frontier_phi_73_pred_5 = _3121;
                }
                _2907 = frontier_phi_73_pred;
                _2905 = frontier_phi_73_pred_1;
                _2903 = frontier_phi_73_pred_2;
                _2901 = frontier_phi_73_pred_3;
                _2899 = frontier_phi_73_pred_4;
                _2897 = frontier_phi_73_pred_5;
                uint _3056 = _3055 + 1u;
                if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3049 = _2897;
                    _3050 = _2899;
                    _3051 = _2901;
                    _3052 = _2903;
                    _3053 = _2905;
                    _3054 = _2907;
                    _3055 = _3056;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((4294967295u << _2913) & _2816) == 0u)
        {
            _3017 = _2896;
            _3019 = _2898;
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
        }
        else
        {
            float _3042 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
            float _3043 = _3042 * _1894;
            float _3044 = _3042 * _1895;
            float _3045 = _3042 * _1896;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3177 = _2896;
                float _3178 = _2898;
                float _3179 = _2900;
                float _3180 = _2902;
                float _3181 = _2904;
                float _3182 = _2906;
                uint _3183 = _2913;
                uint _3192;
                bool _3193;
                for (;;)
                {
                    _3192 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                    _3193 = _3192 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3193)
                    {
                        frontier_phi_84_pred = _3182;
                        frontier_phi_84_pred_1 = _3181;
                        frontier_phi_84_pred_2 = _3180;
                        frontier_phi_84_pred_3 = _3179;
                        frontier_phi_84_pred_4 = _3178;
                        frontier_phi_84_pred_5 = _3177;
                    }
                    else
                    {
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3398 = _3177;
                        float _3399 = _3178;
                        float _3400 = _3179;
                        float _3401 = _3180;
                        float _3402 = _3181;
                        float _3403 = _3182;
                        uint _3404 = _3192;
                        uint _3405;
                        vec4 _3430;
                        float _3431;
                        vec4 _3446;
                        vec3 _3458;
                        vec4 _3473;
                        vec4 _3488;
                        float _3534;
                        bool _3535;
                        for (;;)
                        {
                            uint _3415 = ((_3183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3404));
                            _3405 = (_3404 + 4294967295u) & _3404;
                            uint _3417 = _3415 * 40u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3431 = _3430.w;
                            uint _3433 = (_3415 * 40u) + 4u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3415 * 40u) + 8u;
                            _3458 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x));
                            uint _3460 = (_3415 * 40u) + 16u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3415 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3415 * 40u) + 24u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3509 = (_3415 * 40u) + 28u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3534 = fma(_1896, _3522.z, fma(_1895, _3522.y, _3522.x * _1894)) + _3522.w;
                            _3535 = !((fma(_1896, _3503.z, fma(_1895, _3503.y, _3503.x * _1894)) + _3503.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3535)
                            {
                                float _3562 = _3430.x - _1894;
                                float _3563 = _3430.y - _1895;
                                float _3564 = _3430.z - _1896;
                                float _3565 = dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564));
                                float _3568 = inversesqrt(_3565);
                                float _3569 = _3568 * _3562;
                                float _3570 = _3568 * _3563;
                                float _3571 = _3568 * _3564;
                                float _3575 = 1.0 - (_3565 / (_3431 * _3431));
                                float _4744 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3580 = sqrt(_3565) * _3446.w;
                                float _3582 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                                float _3583 = _3582 * _3582;
                                float _3586 = ((1.0 - _3583) * dot(vec3(_3569, _3570, _3571), vec3(_751, _754, _757))) + _3583;
                                float _3589 = _3580 * _3580;
                                float _3593 = (fma(_1896, _3473.z, fma(_1895, _3473.y, _3473.x * _1894)) + _3473.w) / _3534;
                                float _3594 = (fma(_1896, _3488.z, fma(_1895, _3488.y, _3488.x * _1894)) + _3488.w) / _3534;
                                float _3598 = 1.0 - dot(vec2(_3593, _3594), vec2(_3593, _3594));
                                float _4760 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3600 = _3599 * (((isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0))) * _3576) / ((_3589 * 0.699999988079071044921875) + 1.0));
                                float _3612 = exp2(log2(1.0 / ((_3589 * 3.5) + 5.0)) * 0.25);
                                float _3613 = 1.0 - _811;
                                float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                                float _3621 = _3620 * _3620;
                                float _3622 = _3621 * _3621;
                                float _3623 = _3569 - _3043;
                                float _3624 = _3570 - _3044;
                                float _3625 = _3571 - _3045;
                                float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                                float _3633 = dot(vec3(_751, _754, _757), vec3((-0.0) - _3043, (-0.0) - _3044, (-0.0) - _3045));
                                float _4771 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3637 = dot(vec3(_751, _754, _757), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                                float _4782 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                                float _3645 = _3582 * _3621;
                                float _3646 = _3645 * _3645;
                                float _3652 = ((1.0 - _3646) * dot(vec3(_751, _754, _757), vec3(_3569, _3570, _3571))) + _3646;
                                float _4793 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3654 = 1.0 - _3621;
                                float _3664 = (0.5 / (((_3653 * ((_3636 * _3654) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3621) * _3636))) * _3653;
                                float _4804 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3674 = (_3599 * _3576) * (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3644 * _3644) * ((_3589 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3600 * _3446.z;
                                frontier_phi_90_pred_1 = _3600 * _3446.y;
                                frontier_phi_90_pred_2 = _3600 * _3446.x;
                                frontier_phi_90_pred_3 = _3674 * _3458.z;
                                frontier_phi_90_pred_4 = _3674 * _3458.y;
                                frontier_phi_90_pred_5 = _3674 * _3458.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3683 = frontier_phi_90_pred;
                            _3682 = frontier_phi_90_pred_1;
                            _3681 = frontier_phi_90_pred_2;
                            _3680 = frontier_phi_90_pred_3;
                            _3679 = frontier_phi_90_pred_4;
                            _3678 = frontier_phi_90_pred_5;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            if (_3405 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3405;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3390;
                        frontier_phi_84_pred_1 = _3389;
                        frontier_phi_84_pred_2 = _3388;
                        frontier_phi_84_pred_3 = _3387;
                        frontier_phi_84_pred_4 = _3386;
                        frontier_phi_84_pred_5 = _3385;
                    }
                    _3028 = frontier_phi_84_pred;
                    _3026 = frontier_phi_84_pred_1;
                    _3024 = frontier_phi_84_pred_2;
                    _3022 = frontier_phi_84_pred_3;
                    _3020 = frontier_phi_84_pred_4;
                    _3018 = frontier_phi_84_pred_5;
                    uint _3184 = _3183 + 1u;
                    if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3177 = _3018;
                        _3178 = _3020;
                        _3179 = _3022;
                        _3180 = _3024;
                        _3181 = _3026;
                        _3182 = _3028;
                        _3183 = _3184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3024;
                frontier_phi_65_66_ladder_1 = _3028;
                frontier_phi_65_66_ladder_2 = _3026;
                frontier_phi_65_66_ladder_3 = _3022;
                frontier_phi_65_66_ladder_4 = _3020;
                frontier_phi_65_66_ladder_5 = _3018;
            }
            else
            {
                frontier_phi_65_66_ladder = _2902;
                frontier_phi_65_66_ladder_1 = _2906;
                frontier_phi_65_66_ladder_2 = _2904;
                frontier_phi_65_66_ladder_3 = _2900;
                frontier_phi_65_66_ladder_4 = _2898;
                frontier_phi_65_66_ladder_5 = _2896;
            }
            _3017 = frontier_phi_65_66_ladder_5;
            _3019 = frontier_phi_65_66_ladder_4;
            _3021 = frontier_phi_65_66_ladder_3;
            _3023 = frontier_phi_65_66_ladder;
            _3025 = frontier_phi_65_66_ladder_2;
            _3027 = frontier_phi_65_66_ladder_1;
        }
        float _3032 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2829 = (_3032 * _3023) + _2360;
        _2831 = (_3032 * _3025) + _2362;
        _2833 = (_3032 * _3027) + _2364;
        _2835 = ((_3017 * 0.039999999105930328369140625) * _3032) + _2683;
        _2837 = ((_3019 * 0.039999999105930328369140625) * _3032) + _2685;
        _2839 = ((_3021 * 0.039999999105930328369140625) * _3032) + _2687;
    }
    else
    {
        _2829 = _2360;
        _2831 = _2362;
        _2833 = _2364;
        _2835 = _2683;
        _2837 = _2685;
        _2839 = _2687;
    }
    float _4820 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4831 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4842 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2856 = ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2829 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _795))) + ((_2835 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1626)) * cbPerFrame._m0[3u].x);
    float _2857 = ((isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2831 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _795))) + ((_2837 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1626)) * cbPerFrame._m0[3u].x);
    float _2858 = ((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2833 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _795))) + ((_2839 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1626)) * cbPerFrame._m0[3u].x);
    uint _2859 = _251 + 6u;
    float _2867 = _732 / cbSceneParam._m0[86u].x;
    float _2868 = _733 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2922 = _2921 / _657;
        float _2933 = _2922 * _708;
        float _2934 = _709 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2937 = _2922 * _710;
        float _2939 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2934;
        float _2947 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3134;
        if (abs((_2935 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3134 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3078 = 1.0 / cbSceneParam._m0[80u].x;
            float _3079 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3080 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            _3134 = ((abs(_2947 / _2935) * cbSceneParam._m0[80u].y) * ((((_3089 - _3090) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))))) * _3078)) - ((exp2(_2957 * _3089) - exp2(_2957 * _3090)) * _3078))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3136 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3145 = exp2((_3134 * (-1.44269502162933349609375)) * (1.0 - _3136.w));
        float _3146 = log2(_3145);
        float _3162 = log2(_2887);
        _2959 = (exp2(_3162 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].x)) * _3136.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2961 = (exp2(_3162 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].y)) * _3136.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2963 = (exp2(_3162 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].z)) * _3136.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2965 = _3145 * _2887;
    }
    else
    {
        _2959 = _2884;
        _2961 = _2885;
        _2963 = _2886;
        _2965 = _2887;
    }
    bool _3172;
    vec4 _2975;
    vec4 _2997;
    float _2999;
    float _3003;
    float _3004;
    float _3005;
    float _3006;
    bool _3016;
    for (;;)
    {
        _2975 = cbMatDynParam._m0[0u];
        float _2977 = roundEven(_2975.y);
        bool _2978 = _2977 == 3.0;
        float _2979 = log2(_2965);
        float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * _2856;
        float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * _2857;
        float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * _2858;
        float _2995 = _721 + (-0.5);
        _2997 = cbMtdParam._m0[1u];
        _2999 = _2997.y * _2995;
        float _3002 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3003 = _3002 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
        _3004 = _3002 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
        _3005 = _3002 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
        _3006 = _2995 * 0.999000012874603271484375;
        _3016 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3016)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _3006) < 0.5)
            {
                _3172 = true;
                break;
            }
        }
        uint _3113 = _770 + uint(_2975.w);
        if ((cbInstanceData._m0[_3113].w < 1.0) && ((cbInstanceData._m0[_3113].w + _3006) < 0.5))
        {
            _3172 = true;
            break;
        }
        if ((_2999 + 1.0) < _2997.x)
        {
            _3172 = true;
            break;
        }
        _3172 = false;
        break;
    }
    float _3376;
    if (_3172)
    {
        discard_state = true;
        _3376 = 0.0;
    }
    else
    {
        _3376 = cbInstanceData._m0[_2859].w;
    }
    SV_Target.x = _3003;
    SV_Target.y = _3004;
    SV_Target.z = _3005;
    SV_Target.w = _3376;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
    discard_exit();
}


