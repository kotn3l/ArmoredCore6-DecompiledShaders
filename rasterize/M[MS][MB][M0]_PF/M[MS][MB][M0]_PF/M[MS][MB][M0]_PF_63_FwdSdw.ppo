#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1000;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _332 = _330.x;
    float _345 = dot(vec4(_332, _330.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _362 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_332 - _345) * cbMtdParam._m0[24u].x) + _345) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3591 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _370 = (_363 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _371 = (_363 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _372 = (_363 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _404 = _402.x;
    float _405 = _402.y;
    float _406 = _402.z;
    float _415 = ((_385.z - _406) * _363) + _406;
    float _418 = ((((_385.x - _404) * _363) + _404) * 2.0) + (-1.0);
    float _420 = ((((_385.y - _405) * _363) + _405) * 2.0) + (-1.0);
    float _421 = dot(vec2(_418, _420), vec2(_418, _420));
    float _3602 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))));
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _454 = (((_442.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _418;
    float _455 = (((_442.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _420;
    float _459 = (cbMtdParam._m0[19u].w * (_442.z - _415)) + _415;
    float _464 = cbMtdParam._m0[22u].x + _442.w;
    float _467 = fma(_426, _213 * NORMAL.x, fma(_455, _220 * TANGENT.x, (_206 * _198) * _454));
    float _470 = fma(_426, _213 * NORMAL.y, fma(_455, _220 * TANGENT.y, (_206 * _199) * _454));
    float _473 = fma(_426, _213 * NORMAL.z, fma(_455, _220 * TANGENT.z, (_206 * _200) * _454));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _478 = _477 * _467;
    float _479 = _477 * _470;
    float _480 = _477 * _473;
    float _3613 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _481 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3635 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3646 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3657 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _499 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    float _566 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _567 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_480, cbSceneParam._m0[5u].z, fma(_479, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _478));
    float _588 = fma(_480, cbSceneParam._m0[6u].z, fma(_479, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _478));
    float _591 = fma(_480, cbSceneParam._m0[7u].z, fma(_479, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _478));
    uint _605 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3668 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _566, cbSceneParam._m0[86u].y * _567));
    float _629 = ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * TEXCOORD_5.w) * _625.x;
    float _630 = dot(vec3(_478, _479, _480), vec3(_558, _559, _560));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _478) - _558;
    float _638 = (_633 * _479) - _559;
    float _639 = (_633 * _480) - _560;
    float _643 = abs(dot(vec3(_558, _559, _560), vec3(_478, _479, _480)));
    float _3701 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _645 = sqrt(_481);
    float _658 = exp2((_645 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_645 * 3.0));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _999;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _724 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _728 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _732 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _757 = _690 + _478;
        float _758 = _694 + _479;
        float _759 = _698 + _480;
        float _769 = fma(_759, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757)) - _724;
        float _770 = fma(_759, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757)) - _728;
        float _771 = fma(_759, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757)) - _732;
        float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
        float _788 = ((_775 * _769) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_724 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_775 * _770) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_728 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_775 * _771) / cbModelParam._m0[34u].z) + ((((((_732 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        float _827 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_793.x + (-0.5));
        float _829 = _827 * (_793.y + (-0.5));
        float _830 = _827 * (_793.z + (-0.5));
        float _837 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_800.x + (-0.5));
        float _839 = _837 * (_800.y + (-0.5));
        float _840 = _837 * (_800.z + (-0.5));
        float _847 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_807.x + (-0.5));
        float _849 = _847 * (_807.y + (-0.5));
        float _850 = _847 * (_807.z + (-0.5));
        float _857 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_814.x + (-0.5));
        float _859 = _857 * (_814.y + (-0.5));
        float _860 = _857 * (_814.z + (-0.5));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = _828 * 0.5;
        float _865 = _838 * 0.5;
        float _866 = _848 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _881 = (dot(vec3(_478, _479, _480), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _891 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3749 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_893 + 1.0))) + _898) * _861;
        float _908 = _829 * 0.5;
        float _909 = _839 * 0.5;
        float _910 = _849 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_478, _479, _480), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3782 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_935 + 1.0))) + _940) * _862;
        float _950 = _830 * 0.5;
        float _951 = _840 * 0.5;
        float _952 = _850 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_478, _479, _480), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3815 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_977 + 1.0))) + _982) * _863;
        _999 = _830;
        _1001 = _829;
        _1002 = _828;
        _1003 = _840;
        _1004 = _839;
        _1005 = _838;
        _1006 = _850;
        _1007 = _849;
        _1008 = _848;
        _1009 = _863;
        _1010 = _862;
        _1011 = _861;
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
    }
    else
    {
        _999 = _1000;
        _1001 = _1000;
        _1002 = _1000;
        _1003 = _1000;
        _1004 = _1000;
        _1005 = _1000;
        _1006 = _1000;
        _1007 = _1000;
        _1008 = _1000;
        _1009 = _1000;
        _1010 = _1000;
        _1011 = _1000;
        _1012 = 0.0;
        _1013 = 0.0;
        _1014 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1042 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1046 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1069 = _690 + _478;
        float _1070 = _694 + _479;
        float _1071 = _698 + _480;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_478, _479, _480), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3878 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_478, _479, _480), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3911 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_478, _479, _480), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3944 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _1000;
        _1308 = _1000;
        _1309 = _1000;
        _1310 = _1000;
        _1311 = _1000;
        _1312 = _1000;
        _1313 = _1000;
        _1314 = _1000;
        _1315 = _1000;
        _1316 = _1000;
        _1317 = _1000;
        _1318 = _1000;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1012)) + _1012;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1013)) + _1013;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1014)) + _1014;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _637 * 0.5;
    float _1376 = _638 * 0.5;
    float _1377 = _639 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_999, _1003, _1006, _1009));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _481);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1493 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1497 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1501 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1504 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1507 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1510 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1538;
        if (_1504 > 0.0)
        {
            _1538 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1538 = frontier_phi_14_12_ladder;
        }
        float _1709;
        if (_1507 > 0.0)
        {
            _1709 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1709 = frontier_phi_23_19_ladder;
        }
        float _2004;
        if (_1510 > 0.0)
        {
            _2004 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2004 = frontier_phi_35_30_ladder;
        }
        float _2006 = isnan(_1709) ? _1538 : (isnan(_1538) ? _1709 : min(_1538, _1709));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1504) + _1493;
        float _2012 = (_2007 * _1507) + _1497;
        float _2013 = (_2007 * _1510) + _1501;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2016 = (-1.0) - _2014;
        float _2018 = _2014 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2013 > _2018) || ((_2013 < _2016) || ((_2012 > _2018) || ((_2012 < _2016) || ((_2011 < _2016) || (_2011 > _2018))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2158 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2013, cbModelParam._m0[9u].z, fma(_2012, cbModelParam._m0[9u].y, _2011 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2013, cbModelParam._m0[10u].z, fma(_2012, cbModelParam._m0[10u].y, _2011 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2013, cbModelParam._m0[11u].z, fma(_2012, cbModelParam._m0[11u].y, _2011 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_13_35_ladder = _2158.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2158.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2158.x * cbModelParam._m0[1u].y;
        }
        _1526 = frontier_phi_13_35_ladder_2;
        _1528 = frontier_phi_13_35_ladder_1;
        _1530 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1444);
        _1526 = _1514.x * cbModelParam._m0[1u].y;
        _1528 = _1514.y * cbModelParam._m0[1u].y;
        _1530 = _1514.z * cbModelParam._m0[1u].y;
    }
    float _1534 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _481);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1534 : min(cbModelParam._m0[25u].w, _1534));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1604 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1607 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1714;
        if (_1601 > 0.0)
        {
            _1714 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1714 = frontier_phi_25_21_ladder;
        }
        float _2031;
        if (_1604 > 0.0)
        {
            _2031 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2031 = frontier_phi_37_32_ladder;
        }
        float _2358;
        if (_1607 > 0.0)
        {
            _2358 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2358 = frontier_phi_47_44_ladder;
        }
        float _2360 = isnan(_2031) ? _1714 : (isnan(_1714) ? _2031 : min(_1714, _2031));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1601) + _1590;
        float _2366 = (_2361 * _1604) + _1594;
        float _2367 = (_2361 * _1607) + _1598;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2368;
        float _2371 = _2368 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2367 > _2371) || ((_2367 < _2369) || ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 < _2369) || (_2365 > _2371))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2367, cbModelParam._m0[17u].z, fma(_2366, cbModelParam._m0[17u].y, _2365 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2367, cbModelParam._m0[18u].z, fma(_2366, cbModelParam._m0[18u].y, _2365 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2367, cbModelParam._m0[19u].z, fma(_2366, cbModelParam._m0[19u].y, _2365 * cbModelParam._m0[19u].x))), _1535);
            frontier_phi_22_47_ladder = _2485.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2485.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2485.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_22_47_ladder_2;
        _1628 = frontier_phi_22_47_ladder_1;
        _1630 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1535);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _658) * ((_645 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_658 * _645)) * _629;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1526)) + _1526);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1528)) + _1528);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1530)) + _1530);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1701 = _1688 / _1700;
    float _1702 = _1692 / _1700;
    float _1703 = _1696 / _1700;
    float _1850;
    float _1851;
    float _1852;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1730 = ((uint(_1703 > cbSceneParam._m0[59u].y) + uint(_1703 > cbSceneParam._m0[59u].x)) + uint(_1703 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1731 = _1730 + 43u;
        uint _1739 = _1730 + 44u;
        uint _1747 = _1730 + 45u;
        uint _1755 = _1730 + 46u;
        float _1766 = fma(_1700, cbSceneParam._m0[_1731].w, fma(_1696, cbSceneParam._m0[_1731].z, fma(_1692, cbSceneParam._m0[_1731].y, _1688 * cbSceneParam._m0[_1731].x)));
        float _1770 = fma(_1700, cbSceneParam._m0[_1739].w, fma(_1696, cbSceneParam._m0[_1739].z, fma(_1692, cbSceneParam._m0[_1739].y, _1688 * cbSceneParam._m0[_1739].x)));
        float _1778 = fma(_1700, cbSceneParam._m0[_1755].w, fma(_1696, cbSceneParam._m0[_1755].z, fma(_1692, cbSceneParam._m0[_1755].y, _1688 * cbSceneParam._m0[_1755].x)));
        float _1783 = cbSceneParam._m0[33u].z * _1778;
        float _1785 = cbSceneParam._m0[33u].w * _1778;
        float _1788 = fma(_1700, cbSceneParam._m0[_1747].w, fma(_1696, cbSceneParam._m0[_1747].z, fma(_1692, cbSceneParam._m0[_1747].y, _1688 * cbSceneParam._m0[_1747].x))) / _1778;
        float _1836 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
        float _4070 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1843 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1783 + _1766) / _1778, (_1785 + _1770) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1766) / _1778, (_1770 - _1783) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1783) / _1778, (_1770 - _1785) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1785) / _1778, (_1783 + _1770) / _1778), _1788), 0.0)).x), vec4(0.25)));
        _1850 = 1.0 - (_1843 * cbSceneParam._m0[34u].x);
        _1851 = 1.0 - (_1843 * cbSceneParam._m0[34u].y);
        _1852 = 1.0 - (_1843 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1850 = 1.0;
        _1851 = 1.0;
        _1852 = 1.0;
    }
    float _1916;
    float _1918;
    float _1920;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1904 = fma(_1700, cbSceneParam._m0[63u].w, fma(_1696, cbSceneParam._m0[63u].z, fma(_1692, cbSceneParam._m0[63u].y, _1688 * cbSceneParam._m0[63u].x)));
        float _1905 = fma(_1700, cbSceneParam._m0[60u].w, fma(_1696, cbSceneParam._m0[60u].z, fma(_1692, cbSceneParam._m0[60u].y, _1688 * cbSceneParam._m0[60u].x))) / _1904;
        float _1906 = fma(_1700, cbSceneParam._m0[61u].w, fma(_1696, cbSceneParam._m0[61u].z, fma(_1692, cbSceneParam._m0[61u].y, _1688 * cbSceneParam._m0[61u].x))) / _1904;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1905 >= cbSceneParam._m0[64u].x) && (_1906 >= cbSceneParam._m0[64u].y)) && (_1905 <= cbSceneParam._m0[64u].z)) && (_1906 <= cbSceneParam._m0[64u].w))
        {
            float _2044 = fma(_1700, cbSceneParam._m0[62u].w, fma(_1696, cbSceneParam._m0[62u].z, fma(_1692, cbSceneParam._m0[62u].y, _1688 * cbSceneParam._m0[62u].x))) / _1904;
            float _2048 = isnan(cbSceneParam._m0[41u].w) ? _2044 : (isnan(_2044) ? cbSceneParam._m0[41u].w : max(_2044, cbSceneParam._m0[41u].w));
            float _2091 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
            float _4086 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
            float _2098 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1905, cbSceneParam._m0[33u].w + _1906), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1905, _1906 - cbSceneParam._m0[33u].z), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].z, _1906 - cbSceneParam._m0[33u].w), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1906), _2048), 0.0)).x), vec4(0.25)));
            float _2102 = 1.0 - (_2098 * cbSceneParam._m0[34u].x);
            float _2103 = 1.0 - (_2098 * cbSceneParam._m0[34u].y);
            float _2104 = 1.0 - (_2098 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2104) ? _1852 : (isnan(_1852) ? _2104 : min(_1852, _2104));
            frontier_phi_34_33_ladder_1 = isnan(_2103) ? _1851 : (isnan(_1851) ? _2103 : min(_1851, _2103));
            frontier_phi_34_33_ladder_2 = isnan(_2102) ? _1850 : (isnan(_1850) ? _2102 : min(_1850, _2102));
        }
        else
        {
            frontier_phi_34_33_ladder = _1852;
            frontier_phi_34_33_ladder_1 = _1851;
            frontier_phi_34_33_ladder_2 = _1850;
        }
        _1916 = frontier_phi_34_33_ladder_2;
        _1918 = frontier_phi_34_33_ladder_1;
        _1920 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1916 = _1850;
        _1918 = _1851;
        _1920 = _1852;
    }
    uvec4 _1925 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1927 = _1925.x * 14u;
    uint _1928 = _1927 + 13u;
    float _1935 = _629 + (-1.0);
    float _1940 = (cbLight._m0[_1928].x * _1935) + 1.0;
    float _1941 = (cbLight._m0[_1928].y * _1935) + 1.0;
    float _1942 = (cbLight._m0[_1928].z * _1935) + 1.0;
    float _1943 = (cbLight._m0[_1928].w * _1935) + 1.0;
    uint _1944 = _1927 + 5u;
    float _1950 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1954 = _1927 + 4u;
    float _1963 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1967 = _1927 | 1u;
    float _1978 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_478, _479, _480));
    float _1981 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_478, _479, _480));
    float _4122 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _4133 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1986 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1988 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.3183098733425140380859375;
    float _1995 = ((cbLight._m0[_1944].x * _1950) * _1988) + (((cbLight._m0[_1954].x * _1916) * _1963) * _1986);
    float _1996 = ((_1950 * cbLight._m0[_1944].y) * _1988) + (((cbLight._m0[_1954].y * _1918) * _1963) * _1986);
    float _1997 = ((_1950 * cbLight._m0[_1944].z) * _1988) + (((cbLight._m0[_1954].z * _1920) * _1963) * _1986);
    uvec4 _2001 = floatBitsToUint(cbLight._m0[_1927 + 12u]);
    bool _2003 = _2001.x == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2003)
    {
        _2105 = _1995;
        _2107 = _1996;
        _2109 = _1997;
    }
    else
    {
        uint _2113 = _1927 + 6u;
        float _2129 = (dot(vec3(cbLight._m0[_1927 + 2u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4144 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2132 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2105 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _1995;
        _2107 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _1996;
        _2109 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _1997;
    }
    bool _2112 = _2001.y == 0u;
    float _2167;
    float _2169;
    float _2171;
    if (_2112)
    {
        _2167 = _2105;
        _2169 = _2107;
        _2171 = _2109;
    }
    else
    {
        uint _2329 = _1927 + 7u;
        float _2345 = (dot(vec3(cbLight._m0[_1927 + 3u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4160 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2348 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2167 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2105;
        _2169 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2107;
        _2171 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2109;
    }
    uint _2174 = _1927 + 8u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _481) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_1927].x + _558;
    float _2190 = cbLight._m0[_1927].y + _559;
    float _2191 = cbLight._m0[_1927].z + _560;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1927].xyz));
    float _4176 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2203 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2204 = dot(vec3(_478, _479, _480), vec3(_2196, _2197, _2198));
    float _4198 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2196, _2197, _2198));
    float _4209 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2188 * _2188;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2228 = 1.0 - _2188;
    float _2239 = (0.5 / (((_2203 * ((_2202 * _2228) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2228) + _2188) * _2202))) * _2202;
    float _4220 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    uint _2255 = _1927 + 9u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _481) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_1967].x + _558;
    float _2269 = cbLight._m0[_1967].y + _559;
    float _2270 = cbLight._m0[_1967].z + _560;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1967].xyz));
    float _4231 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2282 = dot(vec3(_478, _479, _480), vec3(_2275, _2276, _2277));
    float _4242 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2275, _2276, _2277));
    float _4253 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2267 * _2267;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2303 = (exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2304 = 1.0 - _2267;
    float _2314 = (0.5 / (((_2203 * ((_2281 * _2304) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2304) + _2267) * _2281))) * _2281;
    float _4264 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    float _2326 = (((_2303 * cbLight._m0[_2255].x) * _2316) * _1950) + ((((cbLight._m0[_2174].x * _1916) * _2227) * _2241) * _1963);
    float _2327 = (((_2303 * cbLight._m0[_2255].y) * _2316) * _1950) + ((((cbLight._m0[_2174].y * _1918) * _2227) * _2241) * _1963);
    float _2328 = (((_2303 * cbLight._m0[_2255].z) * _2316) * _1950) + ((((cbLight._m0[_2174].z * _1920) * _2227) * _2241) * _1963);
    float _2384;
    float _2386;
    float _2388;
    if (_2003)
    {
        _2384 = _2326;
        _2386 = _2327;
        _2388 = _2328;
    }
    else
    {
        uint _2390 = _1927 + 2u;
        uint _2394 = _1927 + 10u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _481) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _558;
        float _2411 = cbLight._m0[_2390].y + _559;
        float _2412 = cbLight._m0[_2390].z + _560;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2390].xyz));
        float _4275 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2424 = dot(vec3(_478, _479, _480), vec3(_2417, _2418, _2419));
        float _4286 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4297 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2446 = 1.0 - _2409;
        float _2456 = (0.5 / (((_2203 * ((_2423 * _2446) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2446) + _2409) * _2423))) * _2423;
        float _4308 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2384 = (((_2445 * cbLight._m0[_2394].x) * _2458) * _2459) + _2326;
        _2386 = (((_2445 * cbLight._m0[_2394].y) * _2458) * _2459) + _2327;
        _2388 = (((_2445 * cbLight._m0[_2394].z) * _2458) * _2459) + _2328;
    }
    float _2490;
    float _2492;
    float _2494;
    if (_2112)
    {
        _2490 = _2384;
        _2492 = _2386;
        _2494 = _2388;
    }
    else
    {
        uint _2501 = _1927 + 3u;
        uint _2505 = _1927 + 11u;
        float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _481) * 0.949999988079071044921875);
        float _2520 = _2519 * _2519;
        float _2521 = cbLight._m0[_2501].x + _558;
        float _2522 = cbLight._m0[_2501].y + _559;
        float _2523 = cbLight._m0[_2501].z + _560;
        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
        float _2528 = _2527 * _2521;
        float _2529 = _2527 * _2522;
        float _2530 = _2527 * _2523;
        float _2531 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2501].xyz));
        float _4324 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2535 = dot(vec3(_478, _479, _480), vec3(_2528, _2529, _2530));
        float _4335 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2539 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2528, _2529, _2530));
        float _4346 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2543 = _2520 * _2520;
        float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
        float _2556 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2557 = 1.0 - _2520;
        float _2567 = (0.5 / (((_2203 * ((_2534 * _2557) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2557) + _2520) * _2534))) * _2534;
        float _4357 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2490 = (((_2556 * cbLight._m0[_2505].x) * _2569) * _2570) + _2384;
        _2492 = (((_2556 * cbLight._m0[_2505].y) * _2569) * _2570) + _2386;
        _2494 = (((_2556 * cbLight._m0[_2505].z) * _2569) * _2570) + _2388;
    }
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_1925.y == 0u)
    {
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.x;
        uint _2603 = uint((float(_2591.y) * floor(float(uint(cbSceneParam._m0[85u].y * _567) / _2592))) + floor(float(uint(cbSceneParam._m0[85u].x * _566) / _2592)));
        float _2613 = (log2(_1703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2614 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        uint _2617 = uint(isnan(14.0) ? _2614 : (isnan(_2614) ? 14.0 : min(_2614, 14.0)));
        uvec4 _2622 = texelFetch(g_lightClusterGridBuffer, int(((_2617 << 2u) + (_2603 << 6u)) >> 2u));
        uint _2623 = _2622.x;
        uint _2624 = _2591.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2624 >> 4u) & 15u)) + 4294967295u) & _2623) == 0u) || ((_2624 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2864)
                {
                    frontier_phi_66_pred = _2853;
                    frontier_phi_66_pred_1 = _2852;
                    frontier_phi_66_pred_2 = _2851;
                    frontier_phi_66_pred_3 = _2850;
                    frontier_phi_66_pred_4 = _2849;
                    frontier_phi_66_pred_5 = _2848;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2863;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2854 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _1701;
                        float _3039 = _2998.y - _1702;
                        float _3040 = _2998.z - _1703;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_585, _588, _591), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4383 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _1701;
                        float _3074 = (-0.0) - _1702;
                        float _3075 = (-0.0) - _1703;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3089 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _645;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3080 + _3045;
                        float _3101 = _3081 + _3046;
                        float _3102 = _3082 + _3047;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_585, _588, _591), vec3(_3080, _3081, _3082));
                        float _4399 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3114 = dot(vec3(_585, _588, _591), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4410 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = _3058 * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3048) + _3123;
                        float _4421 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4432 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3121 * _3121) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2907 = (_3069 * _3017.x) + _2975;
                        _2908 = (_3069 * _3017.y) + _2976;
                        _2909 = (_3069 * _3017.z) + _2977;
                        _2904 = (_3149 * _3034.x) + _2972;
                        _2905 = (_3149 * _3034.y) + _2973;
                        _2906 = (_3149 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_66_pred = _2909;
                    frontier_phi_66_pred_1 = _2908;
                    frontier_phi_66_pred_2 = _2907;
                    frontier_phi_66_pred_3 = _2906;
                    frontier_phi_66_pred_4 = _2905;
                    frontier_phi_66_pred_5 = _2904;
                }
                _2714 = frontier_phi_66_pred;
                _2712 = frontier_phi_66_pred_1;
                _2710 = frontier_phi_66_pred_2;
                _2708 = frontier_phi_66_pred_3;
                _2706 = frontier_phi_66_pred_4;
                _2704 = frontier_phi_66_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2704;
                    _2849 = _2706;
                    _2850 = _2708;
                    _2851 = _2710;
                    _2852 = _2712;
                    _2853 = _2714;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2720) & _2623) == 0u)
        {
            _2816 = _2703;
            _2818 = _2705;
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
            float _2842 = _2841 * _1701;
            float _2843 = _2841 * _1702;
            float _2844 = _2841 * _1703;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2955 = _2703;
                float _2956 = _2705;
                float _2957 = _2707;
                float _2958 = _2709;
                float _2959 = _2711;
                float _2960 = _2713;
                uint _2961 = _2720;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2971)
                    {
                        frontier_phi_72_pred = _2960;
                        frontier_phi_72_pred_1 = _2959;
                        frontier_phi_72_pred_2 = _2958;
                        frontier_phi_72_pred_3 = _2957;
                        frontier_phi_72_pred_4 = _2956;
                        frontier_phi_72_pred_5 = _2955;
                    }
                    else
                    {
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3167 = _2955;
                        float _3168 = _2956;
                        float _3169 = _2957;
                        float _3170 = _2958;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        uint _3173 = _2970;
                        uint _3174;
                        vec4 _3199;
                        float _3200;
                        vec4 _3215;
                        vec3 _3227;
                        vec4 _3242;
                        vec4 _3258;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3184 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3173));
                            _3174 = (_3173 + 4294967295u) & _3173;
                            uint _3186 = _3184 * 40u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3200 = _3199.w;
                            uint _3202 = (_3184 * 40u) + 4u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3184 * 40u) + 8u;
                            _3227 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x));
                            uint _3229 = (_3184 * 40u) + 16u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3245 = (_3184 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3184 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3184 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_1703, _3292.z, fma(_1702, _3292.y, _3292.x * _1701)) + _3292.w;
                            _3305 = !((fma(_1703, _3273.z, fma(_1702, _3273.y, _3273.x * _1701)) + _3273.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3199.x - _1701;
                                float _3333 = _3199.y - _1702;
                                float _3334 = _3199.z - _1703;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3200 * _3200));
                                float _4443 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3350 = sqrt(_3335) * _3215.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_585, _588, _591))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_1703, _3242.z, fma(_1702, _3242.y, _3242.x * _1701)) + _3242.w) / _3304;
                                float _3364 = (fma(_1703, _3258.z, fma(_1702, _3258.y, _3258.x * _1701)) + _3258.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4459 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _645;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2842;
                                float _3394 = _3340 - _2843;
                                float _3395 = _3341 - _2844;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4470 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3407 = dot(vec3(_585, _588, _591), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4481 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_585, _588, _591), vec3(_3339, _3340, _3341))) + _3416;
                                float _4492 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4503 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3370 * _3215.y;
                                frontier_phi_78_pred_1 = _3370 * _3215.x;
                                frontier_phi_78_pred_2 = _3444 * _3227.z;
                                frontier_phi_78_pred_3 = _3444 * _3227.y;
                                frontier_phi_78_pred_4 = _3444 * _3227.x;
                                frontier_phi_78_pred_5 = _3370 * _3215.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3452 = frontier_phi_78_pred;
                            _3451 = frontier_phi_78_pred_1;
                            _3450 = frontier_phi_78_pred_2;
                            _3449 = frontier_phi_78_pred_3;
                            _3448 = frontier_phi_78_pred_4;
                            _3453 = frontier_phi_78_pred_5;
                            _3157 = _3451 + _3170;
                            _3158 = _3452 + _3171;
                            _3159 = _3453 + _3172;
                            _3154 = _3448 + _3167;
                            _3155 = _3449 + _3168;
                            _3156 = _3450 + _3169;
                            if (_3174 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3174;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3159;
                        frontier_phi_72_pred_1 = _3158;
                        frontier_phi_72_pred_2 = _3157;
                        frontier_phi_72_pred_3 = _3156;
                        frontier_phi_72_pred_4 = _3155;
                        frontier_phi_72_pred_5 = _3154;
                    }
                    _2827 = frontier_phi_72_pred;
                    _2825 = frontier_phi_72_pred_1;
                    _2823 = frontier_phi_72_pred_2;
                    _2821 = frontier_phi_72_pred_3;
                    _2819 = frontier_phi_72_pred_4;
                    _2817 = frontier_phi_72_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2817;
                        _2956 = _2819;
                        _2957 = _2821;
                        _2958 = _2823;
                        _2959 = _2825;
                        _2960 = _2827;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2827;
                frontier_phi_60_61_ladder_1 = _2825;
                frontier_phi_60_61_ladder_2 = _2821;
                frontier_phi_60_61_ladder_3 = _2819;
                frontier_phi_60_61_ladder_4 = _2817;
                frontier_phi_60_61_ladder_5 = _2823;
            }
            else
            {
                frontier_phi_60_61_ladder = _2713;
                frontier_phi_60_61_ladder_1 = _2711;
                frontier_phi_60_61_ladder_2 = _2707;
                frontier_phi_60_61_ladder_3 = _2705;
                frontier_phi_60_61_ladder_4 = _2703;
                frontier_phi_60_61_ladder_5 = _2709;
            }
            _2816 = frontier_phi_60_61_ladder_4;
            _2818 = frontier_phi_60_61_ladder_3;
            _2820 = frontier_phi_60_61_ladder_2;
            _2822 = frontier_phi_60_61_ladder_5;
            _2824 = frontier_phi_60_61_ladder_1;
            _2826 = frontier_phi_60_61_ladder;
        }
        float _2831 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2636 = (_2831 * _2822) + _2167;
        _2638 = (_2831 * _2824) + _2169;
        _2640 = (_2831 * _2826) + _2171;
        _2642 = ((_2816 * 0.039999999105930328369140625) * _2831) + _2490;
        _2644 = ((_2818 * 0.039999999105930328369140625) * _2831) + _2492;
        _2646 = ((_2820 * 0.039999999105930328369140625) * _2831) + _2494;
    }
    else
    {
        _2636 = _2167;
        _2638 = _2169;
        _2640 = _2171;
        _2642 = _2490;
        _2644 = _2492;
        _2646 = _2494;
    }
    float _4519 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4530 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4541 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    uint _2666 = _226 + 6u;
    float _2674 = _566 / cbSceneParam._m0[86u].x;
    float _2675 = _567 / cbSceneParam._m0[86u].y;
    vec4 _2689 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, (log2((isnan(cbSceneParam._m0[77u].w) ? _499 : (isnan(_499) ? cbSceneParam._m0[77u].w : min(_499, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2691 = _2689.x;
    float _2692 = _2689.y;
    float _2693 = _2689.z;
    float _2694 = _2689.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_499 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_499) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _499 : min(cbSceneParam._m0[80u].w, _499));
        float _2729 = _2728 / _499;
        float _2740 = _2729 * _551;
        float _2741 = _552 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2744 = _2729 * _553;
        float _2746 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2741;
        float _2754 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2917;
        if (abs((_2742 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2917 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2879 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2917 = ((abs(_2754 / _2742) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2764 * _2888) - exp2(_2764 * _2889)) * _2877))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2919 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, 1.0), 0.0);
        float _2928 = exp2((_2917 * (-1.44269502162933349609375)) * (1.0 - _2919.w));
        float _2929 = log2(_2928);
        float _2945 = log2(_2694);
        _2766 = (exp2(_2945 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].x)) * _2919.x) / cbSceneParam._m0[78u].x)) + _2691;
        _2768 = (exp2(_2945 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].y)) * _2919.y) / cbSceneParam._m0[78u].y)) + _2692;
        _2770 = (exp2(_2945 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].z)) * _2919.z) / cbSceneParam._m0[78u].z)) + _2693;
        _2772 = _2928 * _2694;
    }
    else
    {
        _2766 = _2691;
        _2768 = _2692;
        _2770 = _2693;
        _2772 = _2694;
    }
    float _2784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2785 = _2784 == 3.0;
    float _2786 = log2(_2772);
    float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2636 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _629))) + ((_2642 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2638 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _629))) + ((_2644 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2640 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _629))) + ((_2646 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2804 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2804 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2804 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2804 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = cbInstanceData._m0[_2666].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2666].w;
}


