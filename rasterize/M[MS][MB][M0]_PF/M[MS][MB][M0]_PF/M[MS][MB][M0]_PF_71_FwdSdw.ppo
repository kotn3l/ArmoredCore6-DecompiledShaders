#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1191;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3781 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3792 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3803 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _403 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_390 - _403) * cbMtdParam._m0[24u].x) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3814 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _428 = (_421 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _429 = (_421 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _430 = (_421 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) + _440;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _517 = ((_487.z - _508) * _421) + _508;
    float _520 = ((((_487.x - _506) * _421) + _506) * 2.0) + (-1.0);
    float _521 = ((((_487.y - _507) * _421) + _507) * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3825 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    float _532 = _520 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_462.x * 2.0) + (-1.0)));
    float _533 = _521 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_462.y * 2.0) + (-1.0)));
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _589 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_562 - _563) * cbMtdParam._m0[24u].w) + _563) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3836 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _598 = ((((cbMtdParam._m0[10u].x - _447) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _590) + _447;
    float _599 = ((((cbMtdParam._m0[10u].y - _448) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _590) + _448;
    float _600 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _449)) * _590) + _449;
    float _605 = (((_462.z - _517) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _517;
    float _609 = ((cbMtdParam._m0[23u].y - _605) * _590) + _605;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3847 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _652 = (_590 * (((cbMtdParam._m0[22u].z * _532) - _532) + _634)) + _532;
    float _653 = (_590 * (((cbMtdParam._m0[22u].z * _533) - _533) + _635)) + _533;
    float _654 = (_590 * (sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) - _527)) + _527;
    float _656 = cbMtdParam._m0[22u].x + _546.w;
    float _659 = fma(_654, _239 * NORMAL.x, fma(_653, _246 * TANGENT.x, (_232 * _224) * _652));
    float _662 = fma(_654, _239 * NORMAL.y, fma(_653, _246 * TANGENT.y, (_232 * _225) * _652));
    float _665 = fma(_654, _239 * NORMAL.z, fma(_653, _246 * TANGENT.z, (_232 * _226) * _652));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3858 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _673 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3880 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3891 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3902 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _779 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _782 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _796 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3913 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    vec4 _816 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _820 = ((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * TEXCOORD_5.w) * _816.x;
    float _821 = dot(vec3(_670, _671, _672), vec3(_749, _750, _751));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _670) - _749;
    float _829 = (_824 * _671) - _750;
    float _830 = (_824 * _672) - _751;
    float _834 = abs(dot(vec3(_749, _750, _751), vec3(_670, _671, _672)));
    float _3946 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_673);
    float _849 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _919 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _923 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _948 = _881 + _670;
        float _949 = _885 + _671;
        float _950 = _889 + _672;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_670, _671, _672), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3994 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_670, _671, _672), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _4027 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_670, _671, _672), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _4060 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1233 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1237 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1260 = _881 + _670;
        float _1261 = _885 + _671;
        float _1262 = _889 + _672;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_670, _671, _672), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4123 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_670, _671, _672), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4156 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_670, _671, _672), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4189 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1191;
        _1499 = _1191;
        _1500 = _1191;
        _1501 = _1191;
        _1502 = _1191;
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1203)) + _1203;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1204)) + _1204;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1205)) + _1205;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _828 * 0.5;
    float _1567 = _829 * 0.5;
    float _1568 = _830 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1698 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1701 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1729 = frontier_phi_14_12_ladder;
        }
        float _1900;
        if (_1698 > 0.0)
        {
            _1900 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1900 = frontier_phi_23_19_ladder;
        }
        float _2195;
        if (_1701 > 0.0)
        {
            _2195 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2195 = frontier_phi_35_30_ladder;
        }
        float _2197 = isnan(_1900) ? _1729 : (isnan(_1729) ? _1900 : min(_1729, _1900));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1695) + _1684;
        float _2203 = (_2198 * _1698) + _1688;
        float _2204 = (_2198 * _1701) + _1692;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2207 = (-1.0) - _2205;
        float _2209 = _2205 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2204 > _2209) || ((_2204 < _2207) || ((_2203 > _2209) || ((_2203 < _2207) || ((_2202 < _2207) || (_2202 > _2209))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2204, cbModelParam._m0[9u].z, fma(_2203, cbModelParam._m0[9u].y, _2202 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2204, cbModelParam._m0[10u].z, fma(_2203, cbModelParam._m0[10u].y, _2202 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2204, cbModelParam._m0[11u].z, fma(_2203, cbModelParam._m0[11u].y, _2202 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_13_35_ladder = _2349.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2349.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2349.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_13_35_ladder_2;
        _1719 = frontier_phi_13_35_ladder_1;
        _1721 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1635);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1781 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1785 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1789 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1792 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1795 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1798 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1905;
        if (_1792 > 0.0)
        {
            _1905 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1905 = frontier_phi_25_21_ladder;
        }
        float _2222;
        if (_1795 > 0.0)
        {
            _2222 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2222 = frontier_phi_37_32_ladder;
        }
        float _2549;
        if (_1798 > 0.0)
        {
            _2549 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2549 = frontier_phi_47_44_ladder;
        }
        float _2551 = isnan(_2222) ? _1905 : (isnan(_1905) ? _2222 : min(_1905, _2222));
        float _2552 = isnan(_2549) ? _2551 : (isnan(_2551) ? _2549 : min(_2551, _2549));
        float _2556 = (_2552 * _1792) + _1781;
        float _2557 = (_2552 * _1795) + _1785;
        float _2558 = (_2552 * _1798) + _1789;
        float _2559 = _2552 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2559;
        float _2562 = _2559 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2558 > _2562) || ((_2558 < _2560) || ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 < _2560) || (_2556 > _2562))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2558, cbModelParam._m0[17u].z, fma(_2557, cbModelParam._m0[17u].y, _2556 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2558, cbModelParam._m0[18u].z, fma(_2557, cbModelParam._m0[18u].y, _2556 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2558, cbModelParam._m0[19u].z, fma(_2557, cbModelParam._m0[19u].y, _2556 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_22_47_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1817 = frontier_phi_22_47_ladder_2;
        _1819 = frontier_phi_22_47_ladder_1;
        _1821 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1726);
        _1817 = _1801.x * cbModelParam._m0[1u].z;
        _1819 = _1801.y * cbModelParam._m0[1u].z;
        _1821 = _1801.z * cbModelParam._m0[1u].z;
    }
    float _1833 = ((((1.0 - _849) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_849 * _836)) * _820;
    float _1834 = _1833 * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1835 = _1833 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1836 = _1833 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1839 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, _1834 * cbSceneParam._m0[91u].x));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1892 = _1879 / _1891;
    float _1893 = _1883 / _1891;
    float _1894 = _1887 / _1891;
    float _2041;
    float _2042;
    float _2043;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1921 = ((uint(_1894 > cbSceneParam._m0[59u].y) + uint(_1894 > cbSceneParam._m0[59u].x)) + uint(_1894 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1922 = _1921 + 43u;
        uint _1930 = _1921 + 44u;
        uint _1938 = _1921 + 45u;
        uint _1946 = _1921 + 46u;
        float _1957 = fma(_1891, cbSceneParam._m0[_1922].w, fma(_1887, cbSceneParam._m0[_1922].z, fma(_1883, cbSceneParam._m0[_1922].y, _1879 * cbSceneParam._m0[_1922].x)));
        float _1961 = fma(_1891, cbSceneParam._m0[_1930].w, fma(_1887, cbSceneParam._m0[_1930].z, fma(_1883, cbSceneParam._m0[_1930].y, _1879 * cbSceneParam._m0[_1930].x)));
        float _1969 = fma(_1891, cbSceneParam._m0[_1946].w, fma(_1887, cbSceneParam._m0[_1946].z, fma(_1883, cbSceneParam._m0[_1946].y, _1879 * cbSceneParam._m0[_1946].x)));
        float _1974 = cbSceneParam._m0[33u].z * _1969;
        float _1976 = cbSceneParam._m0[33u].w * _1969;
        float _1979 = fma(_1891, cbSceneParam._m0[_1938].w, fma(_1887, cbSceneParam._m0[_1938].z, fma(_1883, cbSceneParam._m0[_1938].y, _1879 * cbSceneParam._m0[_1938].x))) / _1969;
        float _2027 = (cbSceneParam._m0[33u].x - sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894))) * cbSceneParam._m0[33u].y;
        float _4315 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2034 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 + _1957) / _1969, (_1976 + _1961) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 + _1957) / _1969, (_1961 - _1974) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 - _1974) / _1969, (_1961 - _1976) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 - _1976) / _1969, (_1974 + _1961) / _1969), _1979), 0.0)).x), vec4(0.25)));
        _2041 = 1.0 - (_2034 * cbSceneParam._m0[34u].x);
        _2042 = 1.0 - (_2034 * cbSceneParam._m0[34u].y);
        _2043 = 1.0 - (_2034 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2041 = 1.0;
        _2042 = 1.0;
        _2043 = 1.0;
    }
    float _2107;
    float _2109;
    float _2111;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2095 = fma(_1891, cbSceneParam._m0[63u].w, fma(_1887, cbSceneParam._m0[63u].z, fma(_1883, cbSceneParam._m0[63u].y, _1879 * cbSceneParam._m0[63u].x)));
        float _2096 = fma(_1891, cbSceneParam._m0[60u].w, fma(_1887, cbSceneParam._m0[60u].z, fma(_1883, cbSceneParam._m0[60u].y, _1879 * cbSceneParam._m0[60u].x))) / _2095;
        float _2097 = fma(_1891, cbSceneParam._m0[61u].w, fma(_1887, cbSceneParam._m0[61u].z, fma(_1883, cbSceneParam._m0[61u].y, _1879 * cbSceneParam._m0[61u].x))) / _2095;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2096 >= cbSceneParam._m0[64u].x) && (_2097 >= cbSceneParam._m0[64u].y)) && (_2096 <= cbSceneParam._m0[64u].z)) && (_2097 <= cbSceneParam._m0[64u].w))
        {
            float _2235 = fma(_1891, cbSceneParam._m0[62u].w, fma(_1887, cbSceneParam._m0[62u].z, fma(_1883, cbSceneParam._m0[62u].y, _1879 * cbSceneParam._m0[62u].x))) / _2095;
            float _2239 = isnan(cbSceneParam._m0[41u].w) ? _2235 : (isnan(_2235) ? cbSceneParam._m0[41u].w : max(_2235, cbSceneParam._m0[41u].w));
            float _2282 = (cbSceneParam._m0[33u].x - sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894))) * cbSceneParam._m0[33u].y;
            float _4331 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
            float _2289 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2096, cbSceneParam._m0[33u].w + _2097), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2096, _2097 - cbSceneParam._m0[33u].z), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2096 - cbSceneParam._m0[33u].z, _2097 - cbSceneParam._m0[33u].w), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2096 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2097), _2239), 0.0)).x), vec4(0.25)));
            float _2293 = 1.0 - (_2289 * cbSceneParam._m0[34u].x);
            float _2294 = 1.0 - (_2289 * cbSceneParam._m0[34u].y);
            float _2295 = 1.0 - (_2289 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2295) ? _2043 : (isnan(_2043) ? _2295 : min(_2043, _2295));
            frontier_phi_34_33_ladder_1 = isnan(_2294) ? _2042 : (isnan(_2042) ? _2294 : min(_2042, _2294));
            frontier_phi_34_33_ladder_2 = isnan(_2293) ? _2041 : (isnan(_2041) ? _2293 : min(_2041, _2293));
        }
        else
        {
            frontier_phi_34_33_ladder = _2043;
            frontier_phi_34_33_ladder_1 = _2042;
            frontier_phi_34_33_ladder_2 = _2041;
        }
        _2107 = frontier_phi_34_33_ladder_2;
        _2109 = frontier_phi_34_33_ladder_1;
        _2111 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2107 = _2041;
        _2109 = _2042;
        _2111 = _2043;
    }
    uvec4 _2116 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2118 = _2116.x * 14u;
    uint _2119 = _2118 + 13u;
    float _2126 = _820 + (-1.0);
    float _2131 = (cbLight._m0[_2119].x * _2126) + 1.0;
    float _2132 = (cbLight._m0[_2119].y * _2126) + 1.0;
    float _2133 = (cbLight._m0[_2119].z * _2126) + 1.0;
    float _2134 = (cbLight._m0[_2119].w * _2126) + 1.0;
    uint _2135 = _2118 + 5u;
    float _2141 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2145 = _2118 + 4u;
    float _2154 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2158 = _2118 | 1u;
    float _2169 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_670, _671, _672));
    float _2172 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_670, _671, _672));
    float _4367 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _4378 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2177 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2179 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2186 = ((cbLight._m0[_2135].x * _2141) * _2179) + (((cbLight._m0[_2145].x * _2107) * _2154) * _2177);
    float _2187 = ((_2141 * cbLight._m0[_2135].y) * _2179) + (((cbLight._m0[_2145].y * _2109) * _2154) * _2177);
    float _2188 = ((_2141 * cbLight._m0[_2135].z) * _2179) + (((cbLight._m0[_2145].z * _2111) * _2154) * _2177);
    uvec4 _2192 = floatBitsToUint(cbLight._m0[_2118 + 12u]);
    bool _2194 = _2192.x == 0u;
    float _2296;
    float _2298;
    float _2300;
    if (_2194)
    {
        _2296 = _2186;
        _2298 = _2187;
        _2300 = _2188;
    }
    else
    {
        uint _2304 = _2118 + 6u;
        float _2320 = (dot(vec3(cbLight._m0[_2118 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4389 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2323 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2296 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2186;
        _2298 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2187;
        _2300 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2188;
    }
    bool _2303 = _2192.y == 0u;
    float _2358;
    float _2360;
    float _2362;
    if (_2303)
    {
        _2358 = _2296;
        _2360 = _2298;
        _2362 = _2300;
    }
    else
    {
        uint _2520 = _2118 + 7u;
        float _2536 = (dot(vec3(cbLight._m0[_2118 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2537 = _2536 * _2536;
        float _4405 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2538 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2539 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2358 = (((cbLight._m0[_2520].x * 0.3183098733425140380859375) * _2538) * _2539) + _2296;
        _2360 = (((cbLight._m0[_2520].y * 0.3183098733425140380859375) * _2538) * _2539) + _2298;
        _2362 = (((cbLight._m0[_2520].z * 0.3183098733425140380859375) * _2538) * _2539) + _2300;
    }
    uint _2365 = _2118 + 8u;
    float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _673) * 0.949999988079071044921875);
    float _2379 = _2378 * _2378;
    float _2380 = cbLight._m0[_2118].x + _749;
    float _2381 = cbLight._m0[_2118].y + _750;
    float _2382 = cbLight._m0[_2118].z + _751;
    float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
    float _2387 = _2386 * _2380;
    float _2388 = _2386 * _2381;
    float _2389 = _2386 * _2382;
    float _2390 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2118].xyz));
    float _4421 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2394 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2395 = dot(vec3(_670, _671, _672), vec3(_2387, _2388, _2389));
    float _4443 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2387, _2388, _2389));
    float _4454 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2379 * _2379;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2419 = 1.0 - _2379;
    float _2430 = (0.5 / (((_2394 * ((_2393 * _2419) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2419) + _2379) * _2393))) * _2393;
    float _4465 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    uint _2446 = _2118 + 9u;
    float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _673) * 0.949999988079071044921875);
    float _2458 = _2457 * _2457;
    float _2459 = cbLight._m0[_2158].x + _749;
    float _2460 = cbLight._m0[_2158].y + _750;
    float _2461 = cbLight._m0[_2158].z + _751;
    float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
    float _2466 = _2465 * _2459;
    float _2467 = _2465 * _2460;
    float _2468 = _2465 * _2461;
    float _2469 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2158].xyz));
    float _4476 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2473 = dot(vec3(_670, _671, _672), vec3(_2466, _2467, _2468));
    float _4487 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2477 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2466, _2467, _2468));
    float _4498 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2481 = _2458 * _2458;
    float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
    float _2494 = (exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2495 = 1.0 - _2458;
    float _2505 = (0.5 / (((_2394 * ((_2472 * _2495) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2495) + _2458) * _2472))) * _2472;
    float _4509 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2507 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
    float _2517 = (((_2494 * cbLight._m0[_2446].x) * _2507) * _2141) + ((((cbLight._m0[_2365].x * _2107) * _2418) * _2432) * _2154);
    float _2518 = (((_2494 * cbLight._m0[_2446].y) * _2507) * _2141) + ((((cbLight._m0[_2365].y * _2109) * _2418) * _2432) * _2154);
    float _2519 = (((_2494 * cbLight._m0[_2446].z) * _2507) * _2141) + ((((cbLight._m0[_2365].z * _2111) * _2418) * _2432) * _2154);
    float _2575;
    float _2577;
    float _2579;
    if (_2194)
    {
        _2575 = _2517;
        _2577 = _2518;
        _2579 = _2519;
    }
    else
    {
        uint _2581 = _2118 + 2u;
        uint _2585 = _2118 + 10u;
        float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2581].w)) * _673) * 0.949999988079071044921875);
        float _2600 = _2599 * _2599;
        float _2601 = cbLight._m0[_2581].x + _749;
        float _2602 = cbLight._m0[_2581].y + _750;
        float _2603 = cbLight._m0[_2581].z + _751;
        float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
        float _2608 = _2607 * _2601;
        float _2609 = _2607 * _2602;
        float _2610 = _2607 * _2603;
        float _2611 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2581].xyz));
        float _4520 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2615 = dot(vec3(_670, _671, _672), vec3(_2608, _2609, _2610));
        float _4531 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2619 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_2608, _2609, _2610));
        float _4542 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2623 = _2600 * _2600;
        float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
        float _2636 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2637 = 1.0 - _2600;
        float _2647 = (0.5 / (((_2394 * ((_2614 * _2637) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2637) + _2600) * _2614))) * _2614;
        float _4553 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2649 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
        float _2650 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2575 = (((_2636 * cbLight._m0[_2585].x) * _2649) * _2650) + _2517;
        _2577 = (((_2636 * cbLight._m0[_2585].y) * _2649) * _2650) + _2518;
        _2579 = (((_2636 * cbLight._m0[_2585].z) * _2649) * _2650) + _2519;
    }
    float _2681;
    float _2683;
    float _2685;
    if (_2303)
    {
        _2681 = _2575;
        _2683 = _2577;
        _2685 = _2579;
    }
    else
    {
        uint _2692 = _2118 + 3u;
        uint _2696 = _2118 + 11u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _673) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _749;
        float _2713 = cbLight._m0[_2692].y + _750;
        float _2714 = cbLight._m0[_2692].z + _751;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2692].xyz));
        float _4569 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2726 = dot(vec3(_670, _671, _672), vec3(_2719, _2720, _2721));
        float _4580 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4591 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2747 = (exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2748 = 1.0 - _2711;
        float _2758 = (0.5 / (((_2394 * ((_2725 * _2748) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2748) + _2711) * _2725))) * _2725;
        float _4602 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2681 = (((_2747 * cbLight._m0[_2696].x) * _2760) * _2761) + _2575;
        _2683 = (((_2747 * cbLight._m0[_2696].y) * _2760) * _2761) + _2577;
        _2685 = (((_2747 * cbLight._m0[_2696].z) * _2760) * _2761) + _2579;
    }
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_2116.y == 0u)
    {
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.x;
        uint _2794 = uint((float(_2782.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2783))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2783)));
        float _2804 = (log2(_1894 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2805 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        uint _2808 = uint(isnan(14.0) ? _2805 : (isnan(_2805) ? 14.0 : min(_2805, 14.0)));
        uvec4 _2813 = texelFetch(g_lightClusterGridBuffer, int(((_2808 << 2u) + (_2794 << 6u)) >> 2u));
        uint _2814 = _2813.x;
        uint _2815 = _2782.z;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((((1u << ((_2815 >> 4u) & 15u)) + 4294967295u) & _2814) == 0u) || ((_2815 & 240u) == 0u))
        {
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
        }
        else
        {
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            uint _3045 = 0u;
            uint _3054;
            bool _3055;
            for (;;)
            {
                _3054 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                _3055 = _3054 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3055)
                {
                    frontier_phi_66_pred = _3044;
                    frontier_phi_66_pred_1 = _3043;
                    frontier_phi_66_pred_2 = _3042;
                    frontier_phi_66_pred_3 = _3041;
                    frontier_phi_66_pred_4 = _3040;
                    frontier_phi_66_pred_5 = _3039;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3054;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3045 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _1892;
                        float _3230 = _3189.y - _1893;
                        float _3231 = _3189.z - _1894;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_776, _779, _782), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4628 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _1892;
                        float _3265 = (-0.0) - _1893;
                        float _3266 = (-0.0) - _1894;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3280 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3281 = 1.0 - _836;
                        float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                        float _3289 = _3288 * _3288;
                        float _3290 = _3289 * _3289;
                        float _3291 = _3271 + _3236;
                        float _3292 = _3272 + _3237;
                        float _3293 = _3273 + _3238;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3301 = dot(vec3(_776, _779, _782), vec3(_3271, _3272, _3273));
                        float _4644 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3305 = dot(vec3(_776, _779, _782), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                        float _4655 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                        float _3313 = _3249 * _3289;
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3239) + _3314;
                        float _4666 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3319 = 1.0 - _3289;
                        float _3329 = (0.5 / (((_3318 * ((_3304 * _3319) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3289) * _3304))) * _3318;
                        float _4677 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3340 = (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3312 * _3312) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3098 = (_3260 * _3208.x) + _3166;
                        _3099 = (_3260 * _3208.y) + _3167;
                        _3100 = (_3260 * _3208.z) + _3168;
                        _3095 = (_3340 * _3225.x) + _3163;
                        _3096 = (_3340 * _3225.y) + _3164;
                        _3097 = (_3340 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_66_pred = _3100;
                    frontier_phi_66_pred_1 = _3099;
                    frontier_phi_66_pred_2 = _3098;
                    frontier_phi_66_pred_3 = _3097;
                    frontier_phi_66_pred_4 = _3096;
                    frontier_phi_66_pred_5 = _3095;
                }
                _2905 = frontier_phi_66_pred;
                _2903 = frontier_phi_66_pred_1;
                _2901 = frontier_phi_66_pred_2;
                _2899 = frontier_phi_66_pred_3;
                _2897 = frontier_phi_66_pred_4;
                _2895 = frontier_phi_66_pred_5;
                uint _3046 = _3045 + 1u;
                if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3039 = _2895;
                    _3040 = _2897;
                    _3041 = _2899;
                    _3042 = _2901;
                    _3043 = _2903;
                    _3044 = _2905;
                    _3045 = _3046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
        }
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.z;
        uint _2911 = (_2909 >> 8u) & 15u;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((4294967295u << _2911) & _2814) == 0u)
        {
            _3007 = _2894;
            _3009 = _2896;
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
        }
        else
        {
            float _3032 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
            float _3033 = _3032 * _1892;
            float _3034 = _3032 * _1893;
            float _3035 = _3032 * _1894;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2911 < ((_2909 >> 12u) & 15u))
            {
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3146 = _2894;
                float _3147 = _2896;
                float _3148 = _2898;
                float _3149 = _2900;
                float _3150 = _2902;
                float _3151 = _2904;
                uint _3152 = _2911;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3162)
                    {
                        frontier_phi_72_pred = _3151;
                        frontier_phi_72_pred_1 = _3150;
                        frontier_phi_72_pred_2 = _3149;
                        frontier_phi_72_pred_3 = _3148;
                        frontier_phi_72_pred_4 = _3147;
                        frontier_phi_72_pred_5 = _3146;
                    }
                    else
                    {
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3358 = _3146;
                        float _3359 = _3147;
                        float _3360 = _3148;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        uint _3364 = _3161;
                        uint _3365;
                        vec4 _3390;
                        float _3391;
                        vec4 _3406;
                        vec3 _3418;
                        vec4 _3433;
                        vec4 _3448;
                        float _3494;
                        bool _3495;
                        for (;;)
                        {
                            uint _3375 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3364));
                            _3365 = (_3364 + 4294967295u) & _3364;
                            uint _3377 = _3375 * 40u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            _3391 = _3390.w;
                            uint _3393 = (_3375 * 40u) + 4u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3375 * 40u) + 8u;
                            _3418 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x));
                            uint _3420 = (_3375 * 40u) + 16u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3375 * 40u) + 20u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3375 * 40u) + 24u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3469 = (_3375 * 40u) + 28u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3494 = fma(_1894, _3482.z, fma(_1893, _3482.y, _3482.x * _1892)) + _3482.w;
                            _3495 = !((fma(_1894, _3463.z, fma(_1893, _3463.y, _3463.x * _1892)) + _3463.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3495)
                            {
                                float _3522 = _3390.x - _1892;
                                float _3523 = _3390.y - _1893;
                                float _3524 = _3390.z - _1894;
                                float _3525 = dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524));
                                float _3528 = inversesqrt(_3525);
                                float _3529 = _3528 * _3522;
                                float _3530 = _3528 * _3523;
                                float _3531 = _3528 * _3524;
                                float _3535 = 1.0 - (_3525 / (_3391 * _3391));
                                float _4688 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3540 = sqrt(_3525) * _3406.w;
                                float _3542 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                                float _3543 = _3542 * _3542;
                                float _3546 = ((1.0 - _3543) * dot(vec3(_3529, _3530, _3531), vec3(_776, _779, _782))) + _3543;
                                float _3549 = _3540 * _3540;
                                float _3553 = (fma(_1894, _3433.z, fma(_1893, _3433.y, _3433.x * _1892)) + _3433.w) / _3494;
                                float _3554 = (fma(_1894, _3448.z, fma(_1893, _3448.y, _3448.x * _1892)) + _3448.w) / _3494;
                                float _3558 = 1.0 - dot(vec2(_3553, _3554), vec2(_3553, _3554));
                                float _4704 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3560 = _3559 * (((isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0))) * _3536) / ((_3549 * 0.699999988079071044921875) + 1.0));
                                float _3572 = exp2(log2(1.0 / ((_3549 * 3.5) + 5.0)) * 0.25);
                                float _3573 = 1.0 - _836;
                                float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                                float _3581 = _3580 * _3580;
                                float _3582 = _3581 * _3581;
                                float _3583 = _3529 - _3033;
                                float _3584 = _3530 - _3034;
                                float _3585 = _3531 - _3035;
                                float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                                float _3593 = dot(vec3(_776, _779, _782), vec3((-0.0) - _3033, (-0.0) - _3034, (-0.0) - _3035));
                                float _4715 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3597 = dot(vec3(_776, _779, _782), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                                float _4726 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                                float _3605 = _3542 * _3581;
                                float _3606 = _3605 * _3605;
                                float _3612 = ((1.0 - _3606) * dot(vec3(_776, _779, _782), vec3(_3529, _3530, _3531))) + _3606;
                                float _4737 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3614 = 1.0 - _3581;
                                float _3624 = (0.5 / (((_3613 * ((_3596 * _3614) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3613 * _3614) + _3581) * _3596))) * _3613;
                                float _4748 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3634 = (_3559 * _3536) * (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3604 * _3604) * ((_3549 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3560 * _3406.y;
                                frontier_phi_78_pred_1 = _3560 * _3406.x;
                                frontier_phi_78_pred_2 = _3634 * _3418.z;
                                frontier_phi_78_pred_3 = _3634 * _3418.y;
                                frontier_phi_78_pred_4 = _3634 * _3418.x;
                                frontier_phi_78_pred_5 = _3560 * _3406.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3642 = frontier_phi_78_pred;
                            _3641 = frontier_phi_78_pred_1;
                            _3640 = frontier_phi_78_pred_2;
                            _3639 = frontier_phi_78_pred_3;
                            _3638 = frontier_phi_78_pred_4;
                            _3643 = frontier_phi_78_pred_5;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            if (_3365 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3365;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3350;
                        frontier_phi_72_pred_1 = _3349;
                        frontier_phi_72_pred_2 = _3348;
                        frontier_phi_72_pred_3 = _3347;
                        frontier_phi_72_pred_4 = _3346;
                        frontier_phi_72_pred_5 = _3345;
                    }
                    _3018 = frontier_phi_72_pred;
                    _3016 = frontier_phi_72_pred_1;
                    _3014 = frontier_phi_72_pred_2;
                    _3012 = frontier_phi_72_pred_3;
                    _3010 = frontier_phi_72_pred_4;
                    _3008 = frontier_phi_72_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _3008;
                        _3147 = _3010;
                        _3148 = _3012;
                        _3149 = _3014;
                        _3150 = _3016;
                        _3151 = _3018;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3018;
                frontier_phi_60_61_ladder_1 = _3016;
                frontier_phi_60_61_ladder_2 = _3012;
                frontier_phi_60_61_ladder_3 = _3010;
                frontier_phi_60_61_ladder_4 = _3008;
                frontier_phi_60_61_ladder_5 = _3014;
            }
            else
            {
                frontier_phi_60_61_ladder = _2904;
                frontier_phi_60_61_ladder_1 = _2902;
                frontier_phi_60_61_ladder_2 = _2898;
                frontier_phi_60_61_ladder_3 = _2896;
                frontier_phi_60_61_ladder_4 = _2894;
                frontier_phi_60_61_ladder_5 = _2900;
            }
            _3007 = frontier_phi_60_61_ladder_4;
            _3009 = frontier_phi_60_61_ladder_3;
            _3011 = frontier_phi_60_61_ladder_2;
            _3013 = frontier_phi_60_61_ladder_5;
            _3015 = frontier_phi_60_61_ladder_1;
            _3017 = frontier_phi_60_61_ladder;
        }
        float _3022 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2827 = (_3022 * _3013) + _2358;
        _2829 = (_3022 * _3015) + _2360;
        _2831 = (_3022 * _3017) + _2362;
        _2833 = ((_3007 * 0.039999999105930328369140625) * _3022) + _2681;
        _2835 = ((_3009 * 0.039999999105930328369140625) * _3022) + _2683;
        _2837 = ((_3011 * 0.039999999105930328369140625) * _3022) + _2685;
    }
    else
    {
        _2827 = _2358;
        _2829 = _2360;
        _2831 = _2362;
        _2833 = _2681;
        _2835 = _2683;
        _2837 = _2685;
    }
    float _4764 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4775 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4786 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    uint _2857 = _271 + 6u;
    float _2865 = _757 / cbSceneParam._m0[86u].x;
    float _2866 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2919 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2920 = _2919 / _691;
        float _2931 = _2920 * _742;
        float _2932 = _743 * _2920;
        float _2933 = (-0.0) - _2932;
        float _2935 = _2920 * _744;
        float _2937 = (cbSceneParam._m0[77u].w * _2933) / _2919;
        float _2938 = _2937 + cbSceneParam._m0[79u].w;
        float _2939 = cbSceneParam._m0[79u].w - _2932;
        float _2945 = sqrt(((_2931 * _2931) + (_2932 * _2932)) + (_2935 * _2935));
        float _2948 = (1.0 - (cbSceneParam._m0[77u].w / _2919)) * _2945;
        float _2953 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2955 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3108;
        if (abs((_2933 - _2937) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3108 = ((((_2938 > 0.0) ? exp2(_2953 * _2938) : (2.0 - exp2(_2955 * _2938))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2948;
        }
        else
        {
            float _3068 = 1.0 / cbSceneParam._m0[80u].x;
            float _3069 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : max(_2938, _2939));
            float _3070 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : min(_2938, _2939));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            _3108 = ((abs(_2945 / _2933) * cbSceneParam._m0[80u].y) * ((((_3079 - _3080) * 2.0) - ((exp2(_2953 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0)))) - exp2(_2953 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))))) * _3068)) - ((exp2(_2955 * _3079) - exp2(_2955 * _3080)) * _3068))) + (_2948 * cbSceneParam._m0[80u].z);
        }
        vec4 _3110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3119 = exp2((_3108 * (-1.44269502162933349609375)) * (1.0 - _3110.w));
        float _3120 = log2(_3119);
        float _3136 = log2(_2885);
        _2957 = (exp2(_3136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].x)) * _3110.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2959 = (exp2(_3136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].y)) * _3110.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2961 = (exp2(_3136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].z)) * _3110.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2963 = _3119 * _2885;
    }
    else
    {
        _2957 = _2882;
        _2959 = _2883;
        _2961 = _2884;
        _2963 = _2885;
    }
    float _2975 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2976 = _2975 == 3.0;
    float _2977 = log2(_2963);
    float _2984 = exp2(_2977 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2827 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _820))) + ((_2833 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _2985 = exp2(_2977 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2829 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _820))) + ((_2835 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _2986 = exp2(_2977 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2831 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _820))) + ((_2837 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _2995 = (_2975 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2995 * (_2976 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2957)));
    SV_Target.y = _2995 * (_2976 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.z = _2995 * (_2976 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.w = cbInstanceData._m0[_2857].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
}


