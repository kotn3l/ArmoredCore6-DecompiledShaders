#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1052;
float _3413;
float _3414;
float _3415;
float _3416;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _332 = _330.x;
    float _345 = dot(vec4(_332, _330.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _362 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_332 - _345) * cbMtdParam._m0[24u].x) + _345) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3425 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _370 = (_363 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _371 = (_363 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _372 = (_363 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _404 = _402.x;
    float _405 = _402.y;
    float _406 = _402.z;
    float _415 = ((_385.z - _406) * _363) + _406;
    float _418 = ((((_385.x - _404) * _363) + _404) * 2.0) + (-1.0);
    float _420 = ((((_385.y - _405) * _363) + _405) * 2.0) + (-1.0);
    float _421 = dot(vec2(_418, _420), vec2(_418, _420));
    float _3436 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _454 = (((_442.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _418;
    float _455 = (((_442.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _420;
    float _459 = (cbMtdParam._m0[19u].w * (_442.z - _415)) + _415;
    float _464 = cbMtdParam._m0[22u].x + _442.w;
    float _466 = gl_FragCoord.x * 0.125;
    float _468 = gl_FragCoord.y * 0.125;
    float _479 = fma(_426, _213 * NORMAL.x, fma(_455, _220 * TANGENT.x, (_206 * _198) * _454));
    float _482 = fma(_426, _213 * NORMAL.y, fma(_455, _220 * TANGENT.y, (_206 * _199) * _454));
    float _485 = fma(_426, _213 * NORMAL.z, fma(_455, _220 * TANGENT.z, (_206 * _200) * _454));
    float _489 = inversesqrt(dot(vec3(_479, _482, _485), vec3(_479, _482, _485)));
    float _490 = _489 * _479;
    float _491 = _489 * _482;
    float _492 = _489 * _485;
    float _3447 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _493 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3469 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3480 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3491 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_466, _468)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _515 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _567 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _557);
    float _568 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _557);
    float _569 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _557);
    float _573 = inversesqrt(dot(vec3(_567, _568, _569), vec3(_567, _568, _569)));
    float _574 = _567 * _573;
    float _575 = _568 * _573;
    float _576 = _569 * _573;
    vec4 _578 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_466, _468));
    float _580 = _578.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _734 = sqrt(((_567 * _567) + (_568 * _568)) + (_569 * _569));
        float _740 = (cbMatDynParam._m0[5u].x * _734) + cbMatDynParam._m0[5u].y;
        float _3502 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _745 = (cbMatDynParam._m0[5u].z * _734) + cbMatDynParam._m0[5u].w;
        float _3513 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) - _741)) + _741) < ((_580 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _610 = fma(_492, cbSceneParam._m0[5u].z, fma(_491, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _490));
    float _613 = fma(_492, cbSceneParam._m0[6u].z, fma(_491, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _490));
    float _616 = fma(_492, cbSceneParam._m0[7u].z, fma(_491, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _490));
    uint _629 = _226 + 9u;
    uint _630 = _629 + uint(cbMatDynParam._m0[0u].w);
    float _636 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_630].x;
    float _637 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_630].y;
    float _638 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_630].z;
    float _3524 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    vec4 _650 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _654 = ((isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * TEXCOORD_5.w) * _650.x;
    float _655 = dot(vec3(_490, _491, _492), vec3(_574, _575, _576));
    float _658 = _655 * 2.0;
    float _662 = (_658 * _490) - _574;
    float _663 = (_658 * _491) - _575;
    float _664 = (_658 * _492) - _576;
    float _668 = abs(dot(vec3(_574, _575, _576), vec3(_490, _491, _492)));
    float _3557 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = sqrt(_493);
    float _683 = exp2((_670 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_670 * 3.0));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1051;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _776 = fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715));
        float _780 = fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715));
        float _784 = fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715));
        float _809 = _715 + _490;
        float _810 = _719 + _491;
        float _811 = _723 + _492;
        float _821 = fma(_811, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809)) - _776;
        float _822 = fma(_811, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809)) - _780;
        float _823 = fma(_811, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809)) - _784;
        float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
        float _840 = ((_827 * _821) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_776 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_827 * _822) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_780 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_827 * _823) / cbModelParam._m0[34u].z) + ((((((_784 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        float _879 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_845.x + (-0.5));
        float _881 = _879 * (_845.y + (-0.5));
        float _882 = _879 * (_845.z + (-0.5));
        float _889 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_852.x + (-0.5));
        float _891 = _889 * (_852.y + (-0.5));
        float _892 = _889 * (_852.z + (-0.5));
        float _899 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_859.x + (-0.5));
        float _901 = _899 * (_859.y + (-0.5));
        float _902 = _899 * (_859.z + (-0.5));
        float _909 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_866.x + (-0.5));
        float _911 = _909 * (_866.y + (-0.5));
        float _912 = _909 * (_866.z + (-0.5));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = _880 * 0.5;
        float _917 = _890 * 0.5;
        float _918 = _900 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _933 = (dot(vec3(_490, _491, _492), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _943 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3605 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_945 + 1.0))) + _950) * _913;
        float _960 = _881 * 0.5;
        float _961 = _891 * 0.5;
        float _962 = _901 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_490, _491, _492), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3638 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_987 + 1.0))) + _992) * _914;
        float _1002 = _882 * 0.5;
        float _1003 = _892 * 0.5;
        float _1004 = _902 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_490, _491, _492), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3671 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1029 + 1.0))) + _1034) * _915;
        _1051 = _882;
        _1053 = _881;
        _1054 = _880;
        _1055 = _892;
        _1056 = _891;
        _1057 = _890;
        _1058 = _902;
        _1059 = _901;
        _1060 = _900;
        _1061 = _915;
        _1062 = _914;
        _1063 = _913;
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _1052;
        _1053 = _1052;
        _1054 = _1052;
        _1055 = _1052;
        _1056 = _1052;
        _1057 = _1052;
        _1058 = _1052;
        _1059 = _1052;
        _1060 = _1052;
        _1061 = _1052;
        _1062 = _1052;
        _1063 = _1052;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715));
        float _1094 = fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715));
        float _1098 = fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715));
        float _1121 = _715 + _490;
        float _1122 = _719 + _491;
        float _1123 = _723 + _492;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_490, _491, _492), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3734 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_490, _491, _492), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3767 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_490, _491, _492), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3800 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1052;
        _1360 = _1052;
        _1361 = _1052;
        _1362 = _1052;
        _1363 = _1052;
        _1364 = _1052;
        _1365 = _1052;
        _1366 = _1052;
        _1367 = _1052;
        _1368 = _1052;
        _1369 = _1052;
        _1370 = _1052;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1064)) + _1064;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1065)) + _1065;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1066)) + _1066;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _662 * 0.5;
    float _1428 = _663 * 0.5;
    float _1429 = _664 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1051, _1055, _1058, _1061));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _493);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1545 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1549 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1553 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1556 = fma(_664, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662));
        float _1559 = fma(_664, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662));
        float _1562 = fma(_664, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662));
        float _1590;
        if (_1556 > 0.0)
        {
            _1590 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1590 = frontier_phi_19_17_ladder;
        }
        float _1792;
        if (_1559 > 0.0)
        {
            _1792 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1792 = frontier_phi_28_24_ladder;
        }
        float _2035;
        if (_1562 > 0.0)
        {
            _2035 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2035 = frontier_phi_40_35_ladder;
        }
        float _2037 = isnan(_1792) ? _1590 : (isnan(_1590) ? _1792 : min(_1590, _1792));
        float _2038 = isnan(_2035) ? _2037 : (isnan(_2037) ? _2035 : min(_2037, _2035));
        float _2042 = (_2038 * _1556) + _1545;
        float _2043 = (_2038 * _1559) + _1549;
        float _2044 = (_2038 * _1562) + _1553;
        float _2045 = _2038 * 9.9999997473787516355514526367188e-05;
        float _2047 = (-1.0) - _2045;
        float _2049 = _2045 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2044 > _2049) || ((_2044 < _2047) || ((_2043 > _2049) || ((_2043 < _2047) || ((_2042 < _2047) || (_2042 > _2049))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2168 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2044, cbModelParam._m0[9u].z, fma(_2043, cbModelParam._m0[9u].y, _2042 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2044, cbModelParam._m0[10u].z, fma(_2043, cbModelParam._m0[10u].y, _2042 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2044, cbModelParam._m0[11u].z, fma(_2043, cbModelParam._m0[11u].y, _2042 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_18_40_ladder = _2168.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2168.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2168.x * cbModelParam._m0[1u].y;
        }
        _1578 = frontier_phi_18_40_ladder_2;
        _1580 = frontier_phi_18_40_ladder_1;
        _1582 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_662, _663, _664), _1496);
        _1578 = _1566.x * cbModelParam._m0[1u].y;
        _1580 = _1566.y * cbModelParam._m0[1u].y;
        _1582 = _1566.z * cbModelParam._m0[1u].y;
    }
    float _1586 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _493);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1586 : min(cbModelParam._m0[25u].w, _1586));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_664, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662));
        float _1656 = fma(_664, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662));
        float _1659 = fma(_664, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662));
        float _1797;
        if (_1653 > 0.0)
        {
            _1797 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1797 = frontier_phi_30_26_ladder;
        }
        float _2062;
        if (_1656 > 0.0)
        {
            _2062 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2062 = frontier_phi_42_37_ladder;
        }
        float _2267;
        if (_1659 > 0.0)
        {
            _2267 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2267 = frontier_phi_51_48_ladder;
        }
        float _2269 = isnan(_2062) ? _1797 : (isnan(_1797) ? _2062 : min(_1797, _2062));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1653) + _1642;
        float _2275 = (_2270 * _1656) + _1646;
        float _2276 = (_2270 * _1659) + _1650;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2277;
        float _2280 = _2277 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2276 > _2280) || ((_2276 < _2278) || ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 < _2278) || (_2274 > _2280))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2276, cbModelParam._m0[17u].z, fma(_2275, cbModelParam._m0[17u].y, _2274 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2276, cbModelParam._m0[18u].z, fma(_2275, cbModelParam._m0[18u].y, _2274 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2276, cbModelParam._m0[19u].z, fma(_2275, cbModelParam._m0[19u].y, _2274 * cbModelParam._m0[19u].x))), _1587);
            frontier_phi_27_51_ladder = _2475.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2475.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2475.x * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_27_51_ladder_2;
        _1680 = frontier_phi_27_51_ladder_1;
        _1682 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_662, _663, _664), _1587);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1694 = ((((1.0 - _683) * ((_670 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_683 * _670)) * _654;
    float _1695 = _1694 * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1696 = _1694 * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1697 = _1694 * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1700 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, _1695 * cbSceneParam._m0[91u].x));
    uvec4 _1716 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1718 = _1716.x * 14u;
    uint _1719 = _1718 + 13u;
    float _1726 = _654 + (-1.0);
    float _1731 = (cbLight._m0[_1719].x * _1726) + 1.0;
    float _1732 = (cbLight._m0[_1719].y * _1726) + 1.0;
    float _1733 = (cbLight._m0[_1719].z * _1726) + 1.0;
    float _1734 = (cbLight._m0[_1719].w * _1726) + 1.0;
    uint _1735 = _1718 + 5u;
    float _1741 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1745 = _1718 + 4u;
    float _1751 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1755 = _1718 | 1u;
    float _1766 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_490, _491, _492));
    float _1769 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_490, _491, _492));
    float _3936 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _3947 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1774 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1776 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1783 = ((cbLight._m0[_1735].x * _1741) * _1776) + ((cbLight._m0[_1745].x * _1751) * _1774);
    float _1784 = ((_1741 * cbLight._m0[_1735].y) * _1776) + ((_1751 * cbLight._m0[_1745].y) * _1774);
    float _1785 = ((_1741 * cbLight._m0[_1735].z) * _1776) + ((_1751 * cbLight._m0[_1745].z) * _1774);
    uvec4 _1789 = floatBitsToUint(cbLight._m0[_1718 + 12u]);
    bool _1791 = _1789.x == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1791)
    {
        _1802 = _1783;
        _1804 = _1784;
        _1806 = _1785;
    }
    else
    {
        uint _1810 = _1718 + 6u;
        float _1826 = (dot(vec3(cbLight._m0[_1718 + 2u].xyz), vec3(_490, _491, _492)) * 0.5) + 0.5;
        float _1827 = _1826 * _1826;
        float _3958 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1829 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1802 = (((cbLight._m0[_1810].x * 0.3183098733425140380859375) * _1828) * _1829) + _1783;
        _1804 = (((cbLight._m0[_1810].y * 0.3183098733425140380859375) * _1828) * _1829) + _1784;
        _1806 = (((cbLight._m0[_1810].z * 0.3183098733425140380859375) * _1828) * _1829) + _1785;
    }
    bool _1809 = _1789.y == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1809)
    {
        _1847 = _1802;
        _1849 = _1804;
        _1851 = _1806;
    }
    else
    {
        uint _2006 = _1718 + 7u;
        float _2022 = (dot(vec3(cbLight._m0[_1718 + 3u].xyz), vec3(_490, _491, _492)) * 0.5) + 0.5;
        float _2023 = _2022 * _2022;
        float _3974 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2024 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2025 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _1847 = (((cbLight._m0[_2006].x * 0.3183098733425140380859375) * _2024) * _2025) + _1802;
        _1849 = (((cbLight._m0[_2006].y * 0.3183098733425140380859375) * _2024) * _2025) + _1804;
        _1851 = (((cbLight._m0[_2006].z * 0.3183098733425140380859375) * _2024) * _2025) + _1806;
    }
    uint _1854 = _1718 + 8u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1718].w)) * _493) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1718].x + _574;
    float _1870 = cbLight._m0[_1718].y + _575;
    float _1871 = cbLight._m0[_1718].z + _576;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1718].xyz));
    float _3990 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _1883 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1884 = dot(vec3(_490, _491, _492), vec3(_1876, _1877, _1878));
    float _4012 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_1876, _1877, _1878));
    float _4023 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1868 * _1868;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1907 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1908 = 1.0 - _1868;
    float _1919 = (0.5 / (((_1883 * ((_1882 * _1908) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1908) + _1868) * _1882))) * _1882;
    float _4034 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    uint _1932 = _1718 + 9u;
    float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _493) * 0.949999988079071044921875);
    float _1944 = _1943 * _1943;
    float _1945 = cbLight._m0[_1755].x + _574;
    float _1946 = cbLight._m0[_1755].y + _575;
    float _1947 = cbLight._m0[_1755].z + _576;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1952 = _1951 * _1945;
    float _1953 = _1951 * _1946;
    float _1954 = _1951 * _1947;
    float _1955 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1755].xyz));
    float _4045 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1959 = dot(vec3(_490, _491, _492), vec3(_1952, _1953, _1954));
    float _4056 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1952, _1953, _1954));
    float _4067 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1944 * _1944;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1981 = 1.0 - _1944;
    float _1991 = (0.5 / (((_1883 * ((_1958 * _1981) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1981) + _1944) * _1958))) * _1958;
    float _4078 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1993 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    float _2003 = (((_1980 * cbLight._m0[_1932].x) * _1993) * _1741) + (((_1907 * cbLight._m0[_1854].x) * _1921) * _1751);
    float _2004 = (((_1980 * cbLight._m0[_1932].y) * _1993) * _1741) + (((_1907 * cbLight._m0[_1854].y) * _1921) * _1751);
    float _2005 = (((_1980 * cbLight._m0[_1932].z) * _1993) * _1741) + (((_1907 * cbLight._m0[_1854].z) * _1921) * _1751);
    float _2067;
    float _2069;
    float _2071;
    if (_1791)
    {
        _2067 = _2003;
        _2069 = _2004;
        _2071 = _2005;
    }
    else
    {
        uint _2073 = _1718 + 2u;
        uint _2077 = _1718 + 10u;
        float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _493) * 0.949999988079071044921875);
        float _2092 = _2091 * _2091;
        float _2093 = cbLight._m0[_2073].x + _574;
        float _2094 = cbLight._m0[_2073].y + _575;
        float _2095 = cbLight._m0[_2073].z + _576;
        float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
        float _2100 = _2099 * _2093;
        float _2101 = _2099 * _2094;
        float _2102 = _2099 * _2095;
        float _2103 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_2073].xyz));
        float _4089 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2107 = dot(vec3(_490, _491, _492), vec3(_2100, _2101, _2102));
        float _4100 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2111 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2100, _2101, _2102));
        float _4111 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2115 = _2092 * _2092;
        float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
        float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2129 = 1.0 - _2092;
        float _2139 = (0.5 / (((_1883 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2129) + _2092) * _2106))) * _2106;
        float _4122 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2067 = (((_2128 * cbLight._m0[_2077].x) * _2141) * _2142) + _2003;
        _2069 = (((_2128 * cbLight._m0[_2077].y) * _2141) * _2142) + _2004;
        _2071 = (((_2128 * cbLight._m0[_2077].z) * _2141) * _2142) + _2005;
    }
    float _2177;
    float _2179;
    float _2181;
    if (_1809)
    {
        _2177 = _2067;
        _2179 = _2069;
        _2181 = _2071;
    }
    else
    {
        uint _2188 = _1718 + 3u;
        uint _2192 = _1718 + 11u;
        float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _493) * 0.949999988079071044921875);
        float _2207 = _2206 * _2206;
        float _2208 = cbLight._m0[_2188].x + _574;
        float _2209 = cbLight._m0[_2188].y + _575;
        float _2210 = cbLight._m0[_2188].z + _576;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2215 = _2214 * _2208;
        float _2216 = _2214 * _2209;
        float _2217 = _2214 * _2210;
        float _2218 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_2188].xyz));
        float _4138 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2222 = dot(vec3(_490, _491, _492), vec3(_2215, _2216, _2217));
        float _4149 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2226 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2215, _2216, _2217));
        float _4160 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2230 = _2207 * _2207;
        float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
        float _2243 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2244 = 1.0 - _2207;
        float _2254 = (0.5 / (((_1883 * ((_2221 * _2244) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2244) + _2207) * _2221))) * _2221;
        float _4171 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2256 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
        float _2257 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _2177 = (((_2243 * cbLight._m0[_2192].x) * _2256) * _2257) + _2067;
        _2179 = (((_2243 * cbLight._m0[_2192].y) * _2256) * _2257) + _2069;
        _2181 = (((_2243 * cbLight._m0[_2192].z) * _2256) * _2257) + _2071;
    }
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    if (_1716.y == 0u)
    {
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2332;
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2332;
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2332;
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.x;
        uint _2359 = uint((float(_2347.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _2348))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _2348)));
        float _2369 = (log2(_2335 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2370 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        uint _2373 = uint(isnan(14.0) ? _2370 : (isnan(_2370) ? 14.0 : min(_2370, 14.0)));
        uvec4 _2378 = texelFetch(g_lightClusterGridBuffer, int(((_2373 << 2u) + (_2359 << 6u)) >> 2u));
        uint _2379 = _2378.x;
        uint _2380 = _2347.z;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((((1u << ((_2380 >> 4u) & 15u)) + 4294967295u) & _2379) == 0u) || ((_2380 & 240u) == 0u))
        {
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
        }
        else
        {
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            uint _2639 = 0u;
            uint _2648;
            bool _2649;
            for (;;)
            {
                _2648 = texelFetch(g_lightClassification, int((((_2373 << 5u) + (_2359 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                _2649 = _2648 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2649)
                {
                    frontier_phi_68_pred = _2633;
                    frontier_phi_68_pred_1 = _2638;
                    frontier_phi_68_pred_2 = _2637;
                    frontier_phi_68_pred_3 = _2636;
                    frontier_phi_68_pred_4 = _2635;
                    frontier_phi_68_pred_5 = _2634;
                }
                else
                {
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    uint _2784;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2648;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    for (;;)
                    {
                        uint _2788 = uint(findLSB(_2784)) + (_2639 << 5u);
                        uint _2785 = (_2784 + 4294967295u) & _2784;
                        uint _2790 = _2788 * 48u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2810 = (_2788 * 48u) + 4u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2829 = (_2788 * 48u) + 8u;
                        vec3 _2840 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x));
                        float _2844 = _2804.x - _2333;
                        float _2845 = _2804.y - _2334;
                        float _2846 = _2804.z - _2335;
                        float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                        float _2850 = inversesqrt(_2847);
                        float _2851 = _2850 * _2844;
                        float _2852 = _2850 * _2845;
                        float _2853 = _2850 * _2846;
                        float _2854 = dot(vec3(_610, _613, _616), vec3(_2851, _2852, _2853));
                        float _2859 = 1.0 - (_2847 * _2804.w);
                        float _4197 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2861 = sqrt(_2847) * _2823.w;
                        float _2864 = 1.39999997615814208984375 / (_2861 + 1.39999997615814208984375);
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2854) + _2865;
                        float _2871 = _2861 * _2861;
                        float _2875 = ((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2860) / ((_2871 * 0.699999988079071044921875) + 1.0);
                        float _2879 = (-0.0) - _2333;
                        float _2880 = (-0.0) - _2334;
                        float _2881 = (-0.0) - _2335;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2896 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                        float _2897 = 1.0 - _670;
                        float _2904 = sqrt(1.0 - ((1.0 - (_2897 * _2897)) * (1.0 - (_2896 * _2896))));
                        float _2905 = _2904 * _2904;
                        float _2906 = _2905 * _2905;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2909 = _2888 + _2853;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2917 = dot(vec3(_610, _613, _616), vec3(_2886, _2887, _2888));
                        float _4213 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2921 = dot(vec3(_610, _613, _616), vec3(_2913 * _2907, _2913 * _2908, _2913 * _2909));
                        float _4224 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2928 = ((_2924 * _2924) * (_2906 + (-1.0))) + 1.0;
                        float _2929 = _2864 * _2905;
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2854) + _2930;
                        float _4235 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2935 = 1.0 - _2905;
                        float _2945 = (0.5 / (((_2934 * ((_2920 * _2935) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2934 * _2935) + _2905) * _2920))) * _2934;
                        float _4246 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2956 = (((_2906 * 3.1415927410125732421875) * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) / ((_2928 * _2928) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125))) * _2860;
                        _2708 = (_2875 * _2823.x) + _2781;
                        _2709 = (_2875 * _2823.y) + _2782;
                        _2710 = (_2875 * _2823.z) + _2783;
                        _2705 = (_2956 * _2840.x) + _2778;
                        _2706 = (_2956 * _2840.y) + _2779;
                        _2707 = (_2956 * _2840.z) + _2780;
                        if (_2785 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2785;
                        }
                    }
                    frontier_phi_68_pred = _2705;
                    frontier_phi_68_pred_1 = _2710;
                    frontier_phi_68_pred_2 = _2709;
                    frontier_phi_68_pred_3 = _2708;
                    frontier_phi_68_pred_4 = _2707;
                    frontier_phi_68_pred_5 = _2706;
                }
                _2481 = frontier_phi_68_pred;
                _2491 = frontier_phi_68_pred_1;
                _2489 = frontier_phi_68_pred_2;
                _2487 = frontier_phi_68_pred_3;
                _2485 = frontier_phi_68_pred_4;
                _2483 = frontier_phi_68_pred_5;
                uint _2640 = _2639 + 1u;
                if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2633 = _2481;
                    _2634 = _2483;
                    _2635 = _2485;
                    _2636 = _2487;
                    _2637 = _2489;
                    _2638 = _2491;
                    _2639 = _2640;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
        }
        uvec4 _2494 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2495 = _2494.z;
        uint _2497 = (_2495 >> 8u) & 15u;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((4294967295u << _2497) & _2379) == 0u)
        {
            _2601 = _2480;
            _2603 = _2482;
            _2605 = _2484;
            _2607 = _2486;
            _2609 = _2488;
            _2611 = _2490;
        }
        else
        {
            float _2626 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
            float _2627 = _2626 * _2333;
            float _2628 = _2626 * _2334;
            float _2629 = _2626 * _2335;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2497 < ((_2495 >> 12u) & 15u))
            {
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2761 = _2480;
                float _2762 = _2482;
                float _2763 = _2484;
                float _2764 = _2486;
                float _2765 = _2488;
                float _2766 = _2490;
                uint _2767 = _2497;
                uint _2776;
                bool _2777;
                for (;;)
                {
                    _2776 = texelFetch(g_lightClassification, int((((_2373 << 5u) + (_2359 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                    _2777 = _2776 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2777)
                    {
                        frontier_phi_79_pred = _2766;
                        frontier_phi_79_pred_1 = _2765;
                        frontier_phi_79_pred_2 = _2764;
                        frontier_phi_79_pred_3 = _2763;
                        frontier_phi_79_pred_4 = _2762;
                        frontier_phi_79_pred_5 = _2761;
                    }
                    else
                    {
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        float _2988 = _2766;
                        uint _2989 = _2776;
                        uint _2990;
                        vec4 _3015;
                        float _3016;
                        vec4 _3031;
                        vec3 _3043;
                        vec4 _3058;
                        vec4 _3074;
                        float _3120;
                        bool _3121;
                        for (;;)
                        {
                            uint _3000 = ((_2767 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2989));
                            _2990 = (_2989 + 4294967295u) & _2989;
                            uint _3002 = _3000 * 40u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3016 = _3015.w;
                            uint _3018 = (_3000 * 40u) + 4u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3033 = (_3000 * 40u) + 8u;
                            _3043 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x));
                            uint _3045 = (_3000 * 40u) + 16u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3061 = (_3000 * 40u) + 20u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3000 * 40u) + 24u;
                            vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3095 = (_3000 * 40u) + 28u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3120 = fma(_2335, _3108.z, fma(_2334, _3108.y, _3108.x * _2333)) + _3108.w;
                            _3121 = !((fma(_2335, _3089.z, fma(_2334, _3089.y, _3089.x * _2333)) + _3089.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3121)
                            {
                                float _3148 = _3015.x - _2333;
                                float _3149 = _3015.y - _2334;
                                float _3150 = _3015.z - _2335;
                                float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                                float _3154 = inversesqrt(_3151);
                                float _3155 = _3154 * _3148;
                                float _3156 = _3154 * _3149;
                                float _3157 = _3154 * _3150;
                                float _3161 = 1.0 - (_3151 / (_3016 * _3016));
                                float _4257 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3166 = sqrt(_3151) * _3031.w;
                                float _3168 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                                float _3169 = _3168 * _3168;
                                float _3172 = ((1.0 - _3169) * dot(vec3(_3155, _3156, _3157), vec3(_610, _613, _616))) + _3169;
                                float _3175 = _3166 * _3166;
                                float _3179 = (fma(_2335, _3058.z, fma(_2334, _3058.y, _3058.x * _2333)) + _3058.w) / _3120;
                                float _3180 = (fma(_2335, _3074.z, fma(_2334, _3074.y, _3074.x * _2333)) + _3074.w) / _3120;
                                float _3184 = 1.0 - dot(vec2(_3179, _3180), vec2(_3179, _3180));
                                float _4273 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3186 = _3185 * (((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3162) / ((_3175 * 0.699999988079071044921875) + 1.0));
                                float _3198 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                                float _3199 = 1.0 - _670;
                                float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                                float _3207 = _3206 * _3206;
                                float _3208 = _3207 * _3207;
                                float _3209 = _3155 - _2627;
                                float _3210 = _3156 - _2628;
                                float _3211 = _3157 - _2629;
                                float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                                float _3219 = dot(vec3(_610, _613, _616), vec3((-0.0) - _2627, (-0.0) - _2628, (-0.0) - _2629));
                                float _4284 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3223 = dot(vec3(_610, _613, _616), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                                float _4295 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                                float _3231 = _3168 * _3207;
                                float _3232 = _3231 * _3231;
                                float _3238 = ((1.0 - _3232) * dot(vec3(_610, _613, _616), vec3(_3155, _3156, _3157))) + _3232;
                                float _4306 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3240 = 1.0 - _3207;
                                float _3250 = (0.5 / (((_3239 * ((_3222 * _3240) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3207) * _3222))) * _3239;
                                float _4317 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3260 = (_3185 * _3162) * (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) / ((_3230 * _3230) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3186 * _3031.y;
                                frontier_phi_85_pred_1 = _3186 * _3031.x;
                                frontier_phi_85_pred_2 = _3260 * _3043.z;
                                frontier_phi_85_pred_3 = _3260 * _3043.y;
                                frontier_phi_85_pred_4 = _3260 * _3043.x;
                                frontier_phi_85_pred_5 = _3186 * _3031.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3268 = frontier_phi_85_pred;
                            _3267 = frontier_phi_85_pred_1;
                            _3266 = frontier_phi_85_pred_2;
                            _3265 = frontier_phi_85_pred_3;
                            _3264 = frontier_phi_85_pred_4;
                            _3269 = frontier_phi_85_pred_5;
                            _2973 = _3267 + _2986;
                            _2974 = _3268 + _2987;
                            _2975 = _3269 + _2988;
                            _2970 = _3264 + _2983;
                            _2971 = _3265 + _2984;
                            _2972 = _3266 + _2985;
                            if (_2990 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2990;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2975;
                        frontier_phi_79_pred_1 = _2974;
                        frontier_phi_79_pred_2 = _2973;
                        frontier_phi_79_pred_3 = _2972;
                        frontier_phi_79_pred_4 = _2971;
                        frontier_phi_79_pred_5 = _2970;
                    }
                    _2612 = frontier_phi_79_pred;
                    _2610 = frontier_phi_79_pred_1;
                    _2608 = frontier_phi_79_pred_2;
                    _2606 = frontier_phi_79_pred_3;
                    _2604 = frontier_phi_79_pred_4;
                    _2602 = frontier_phi_79_pred_5;
                    uint _2768 = _2767 + 1u;
                    if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2761 = _2602;
                        _2762 = _2604;
                        _2763 = _2606;
                        _2764 = _2608;
                        _2765 = _2610;
                        _2766 = _2612;
                        _2767 = _2768;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2606;
                frontier_phi_60_61_ladder_1 = _2612;
                frontier_phi_60_61_ladder_2 = _2610;
                frontier_phi_60_61_ladder_3 = _2608;
                frontier_phi_60_61_ladder_4 = _2604;
                frontier_phi_60_61_ladder_5 = _2602;
            }
            else
            {
                frontier_phi_60_61_ladder = _2484;
                frontier_phi_60_61_ladder_1 = _2490;
                frontier_phi_60_61_ladder_2 = _2488;
                frontier_phi_60_61_ladder_3 = _2486;
                frontier_phi_60_61_ladder_4 = _2482;
                frontier_phi_60_61_ladder_5 = _2480;
            }
            _2601 = frontier_phi_60_61_ladder_5;
            _2603 = frontier_phi_60_61_ladder_4;
            _2605 = frontier_phi_60_61_ladder;
            _2607 = frontier_phi_60_61_ladder_3;
            _2609 = frontier_phi_60_61_ladder_2;
            _2611 = frontier_phi_60_61_ladder_1;
        }
        float _2616 = isnan(1.0) ? _654 : (isnan(_654) ? 1.0 : min(_654, 1.0));
        _2392 = (_2616 * _2607) + _1847;
        _2394 = (_2616 * _2609) + _1849;
        _2396 = (_2616 * _2611) + _1851;
        _2398 = ((_2601 * 0.039999999105930328369140625) * _2616) + _2177;
        _2400 = ((_2603 * 0.039999999105930328369140625) * _2616) + _2179;
        _2402 = ((_2605 * 0.039999999105930328369140625) * _2616) + _2181;
    }
    else
    {
        _2392 = _1847;
        _2394 = _1849;
        _2396 = _1851;
        _2398 = _2177;
        _2400 = _2179;
        _2402 = _2181;
    }
    float _4333 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4344 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4355 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _2419 = ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2392 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _654))) + ((_2398 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2420 = ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2394 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _654))) + ((_2400 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2421 = ((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2396 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _654))) + ((_2402 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    uint _2422 = _226 + 6u;
    float _2430 = _591 / cbSceneParam._m0[86u].x;
    float _2431 = _592 / cbSceneParam._m0[86u].y;
    vec4 _2445 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, (log2((isnan(cbSceneParam._m0[77u].w) ? _515 : (isnan(_515) ? cbSceneParam._m0[77u].w : min(_515, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2447 = _2445.x;
    float _2448 = _2445.y;
    float _2449 = _2445.z;
    float _2450 = _2445.w;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    if (_515 > cbSceneParam._m0[78u].w)
    {
        float _2505 = isnan(_515) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _515 : min(cbSceneParam._m0[80u].w, _515));
        float _2506 = _2505 / _515;
        float _2517 = _2506 * _567;
        float _2518 = _568 * _2506;
        float _2519 = (-0.0) - _2518;
        float _2521 = _2506 * _569;
        float _2523 = (cbSceneParam._m0[77u].w * _2519) / _2505;
        float _2524 = _2523 + cbSceneParam._m0[79u].w;
        float _2525 = cbSceneParam._m0[79u].w - _2518;
        float _2531 = sqrt(((_2517 * _2517) + (_2518 * _2518)) + (_2521 * _2521));
        float _2534 = (1.0 - (cbSceneParam._m0[77u].w / _2505)) * _2531;
        float _2539 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2541 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2718;
        if (abs((_2519 - _2523) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2718 = ((((_2524 > 0.0) ? exp2(_2539 * _2524) : (2.0 - exp2(_2541 * _2524))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2534;
        }
        else
        {
            float _2662 = 1.0 / cbSceneParam._m0[80u].x;
            float _2663 = isnan(_2525) ? _2524 : (isnan(_2524) ? _2525 : max(_2524, _2525));
            float _2664 = isnan(_2525) ? _2524 : (isnan(_2524) ? _2525 : min(_2524, _2525));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            _2718 = ((abs(_2531 / _2519) * cbSceneParam._m0[80u].y) * ((((_2673 - _2674) * 2.0) - ((exp2(_2539 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0)))) - exp2(_2539 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))))) * _2662)) - ((exp2(_2541 * _2673) - exp2(_2541 * _2674)) * _2662))) + (_2534 * cbSceneParam._m0[80u].z);
        }
        vec4 _2720 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, 1.0), 0.0);
        float _2729 = exp2((_2718 * (-1.44269502162933349609375)) * (1.0 - _2720.w));
        float _2730 = log2(_2729);
        float _2746 = log2(_2450);
        _2543 = (exp2(_2746 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].x)) * _2720.x) / cbSceneParam._m0[78u].x)) + _2447;
        _2545 = (exp2(_2746 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].y)) * _2720.y) / cbSceneParam._m0[78u].y)) + _2448;
        _2547 = (exp2(_2746 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].z)) * _2720.z) / cbSceneParam._m0[78u].z)) + _2449;
        _2549 = _2729 * _2450;
    }
    else
    {
        _2543 = _2447;
        _2545 = _2448;
        _2547 = _2449;
        _2549 = _2450;
    }
    bool _2756;
    vec4 _2559;
    vec4 _2581;
    float _2583;
    float _2587;
    float _2588;
    float _2589;
    float _2590;
    bool _2600;
    for (;;)
    {
        _2559 = cbMatDynParam._m0[0u];
        float _2561 = roundEven(_2559.y);
        bool _2562 = _2561 == 3.0;
        float _2563 = log2(_2549);
        float _2570 = exp2(_2563 * cbSceneParam._m0[78u].x) * _2419;
        float _2571 = exp2(_2563 * cbSceneParam._m0[78u].y) * _2420;
        float _2572 = exp2(_2563 * cbSceneParam._m0[78u].z) * _2421;
        float _2579 = _580 + (-0.5);
        _2581 = cbMtdParam._m0[1u];
        _2583 = _2581.y * _2579;
        float _2586 = (_2561 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2587 = _2586 * (_2562 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2543)));
        _2588 = _2586 * (_2562 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2545)));
        _2589 = _2586 * (_2562 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2547)));
        _2590 = _2579 * 0.999000012874603271484375;
        _2600 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2600)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2590) < 0.5)
            {
                _2756 = true;
                break;
            }
        }
        uint _2697 = _629 + uint(_2559.w);
        if ((cbInstanceData._m0[_2697].w < 1.0) && ((cbInstanceData._m0[_2697].w + _2590) < 0.5))
        {
            _2756 = true;
            break;
        }
        if ((_2583 + 1.0) < _2581.x)
        {
            _2756 = true;
            break;
        }
        _2756 = false;
        break;
    }
    float _2961;
    if (_2756)
    {
        discard_state = true;
        _2961 = 0.0;
    }
    else
    {
        _2961 = cbInstanceData._m0[_2422].w;
    }
    SV_Target.x = _2587;
    SV_Target.y = _2588;
    SV_Target.z = _2589;
    SV_Target.w = _2961;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2422].w;
    discard_exit();
}


