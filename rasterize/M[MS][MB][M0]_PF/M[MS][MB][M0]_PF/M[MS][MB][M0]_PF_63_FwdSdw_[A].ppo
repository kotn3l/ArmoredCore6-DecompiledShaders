#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1056;
float _3700;
float _3701;
float _3702;
float _3703;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _349 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _366 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _349) * cbMtdParam._m0[24u].x) + _349) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3712 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _374 = (_367 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _375 = (_367 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _376 = (_367 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _408 = _406.x;
    float _409 = _406.y;
    float _410 = _406.z;
    float _419 = ((_389.z - _410) * _367) + _410;
    float _422 = ((((_389.x - _408) * _367) + _408) * 2.0) + (-1.0);
    float _424 = ((((_389.y - _409) * _367) + _409) * 2.0) + (-1.0);
    float _425 = dot(vec2(_422, _424), vec2(_422, _424));
    float _3723 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _458 = (((_446.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _422;
    float _459 = (((_446.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _424;
    float _463 = (cbMtdParam._m0[19u].w * (_446.z - _419)) + _419;
    float _468 = cbMtdParam._m0[22u].x + _446.w;
    float _470 = gl_FragCoord.x * 0.125;
    float _472 = gl_FragCoord.y * 0.125;
    float _483 = fma(_430, _217 * NORMAL.x, fma(_459, _224 * TANGENT.x, (_210 * _202) * _458));
    float _486 = fma(_430, _217 * NORMAL.y, fma(_459, _224 * TANGENT.y, (_210 * _203) * _458));
    float _489 = fma(_430, _217 * NORMAL.z, fma(_459, _224 * TANGENT.z, (_210 * _204) * _458));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    float _494 = _493 * _483;
    float _495 = _493 * _486;
    float _496 = _493 * _489;
    float _3734 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _497 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3756 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3767 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3778 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_470, _472)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _519 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    vec4 _582 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_470, _472));
    float _584 = _582.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _738 = sqrt(((_571 * _571) + (_572 * _572)) + (_573 * _573));
        float _744 = (cbMatDynParam._m0[5u].x * _738) + cbMatDynParam._m0[5u].y;
        float _3789 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _749 = (cbMatDynParam._m0[5u].z * _738) + cbMatDynParam._m0[5u].w;
        float _3800 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) - _745)) + _745) < ((_584 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _614 = fma(_496, cbSceneParam._m0[5u].z, fma(_495, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _494));
    float _617 = fma(_496, cbSceneParam._m0[6u].z, fma(_495, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _494));
    float _620 = fma(_496, cbSceneParam._m0[7u].z, fma(_495, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _494));
    uint _633 = _230 + 9u;
    uint _634 = _633 + uint(cbMatDynParam._m0[0u].w);
    float _640 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_634].x;
    float _641 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_634].y;
    float _642 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_634].z;
    float _3811 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    vec4 _654 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _658 = ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * TEXCOORD_5.w) * _654.x;
    float _659 = dot(vec3(_494, _495, _496), vec3(_578, _579, _580));
    float _662 = _659 * 2.0;
    float _666 = (_662 * _494) - _578;
    float _667 = (_662 * _495) - _579;
    float _668 = (_662 * _496) - _580;
    float _672 = abs(dot(vec3(_578, _579, _580), vec3(_494, _495, _496)));
    float _3844 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _674 = sqrt(_497);
    float _687 = exp2((_674 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_674 * 3.0));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1055;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _780 = fma(_727, cbModelParam._m0[26u].z, fma(_723, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719));
        float _784 = fma(_727, cbModelParam._m0[27u].z, fma(_723, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719));
        float _788 = fma(_727, cbModelParam._m0[28u].z, fma(_723, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719));
        float _813 = _719 + _494;
        float _814 = _723 + _495;
        float _815 = _727 + _496;
        float _825 = fma(_815, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813)) - _780;
        float _826 = fma(_815, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813)) - _784;
        float _827 = fma(_815, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813)) - _788;
        float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
        float _844 = ((_831 * _825) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_780 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_831 * _826) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_784 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_831 * _827) / cbModelParam._m0[34u].z) + ((((((_788 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        float _883 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_849.x + (-0.5));
        float _885 = _883 * (_849.y + (-0.5));
        float _886 = _883 * (_849.z + (-0.5));
        float _893 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_856.x + (-0.5));
        float _895 = _893 * (_856.y + (-0.5));
        float _896 = _893 * (_856.z + (-0.5));
        float _903 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_863.x + (-0.5));
        float _905 = _903 * (_863.y + (-0.5));
        float _906 = _903 * (_863.z + (-0.5));
        float _913 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_870.x + (-0.5));
        float _915 = _913 * (_870.y + (-0.5));
        float _916 = _913 * (_870.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _937 = (dot(vec3(_494, _495, _496), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _947 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3892 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_949 + 1.0))) + _954) * _917;
        float _964 = _885 * 0.5;
        float _965 = _895 * 0.5;
        float _966 = _905 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_494, _495, _496), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3925 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_991 + 1.0))) + _996) * _918;
        float _1006 = _886 * 0.5;
        float _1007 = _896 * 0.5;
        float _1008 = _906 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_494, _495, _496), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3958 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1033 + 1.0))) + _1038) * _919;
        _1055 = _886;
        _1057 = _885;
        _1058 = _884;
        _1059 = _896;
        _1060 = _895;
        _1061 = _894;
        _1062 = _906;
        _1063 = _905;
        _1064 = _904;
        _1065 = _919;
        _1066 = _918;
        _1067 = _917;
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _1056;
        _1057 = _1056;
        _1058 = _1056;
        _1059 = _1056;
        _1060 = _1056;
        _1061 = _1056;
        _1062 = _1056;
        _1063 = _1056;
        _1064 = _1056;
        _1065 = _1056;
        _1066 = _1056;
        _1067 = _1056;
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_727, cbModelParam._m0[30u].z, fma(_723, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _719));
        float _1098 = fma(_727, cbModelParam._m0[31u].z, fma(_723, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _719));
        float _1102 = fma(_727, cbModelParam._m0[32u].z, fma(_723, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _719));
        float _1125 = _719 + _494;
        float _1126 = _723 + _495;
        float _1127 = _727 + _496;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_494, _495, _496), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4021 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_494, _495, _496), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4054 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_494, _495, _496), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4087 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1056;
        _1364 = _1056;
        _1365 = _1056;
        _1366 = _1056;
        _1367 = _1056;
        _1368 = _1056;
        _1369 = _1056;
        _1370 = _1056;
        _1371 = _1056;
        _1372 = _1056;
        _1373 = _1056;
        _1374 = _1056;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1068)) + _1068;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1069)) + _1069;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1070)) + _1070;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _666 * 0.5;
    float _1432 = _667 * 0.5;
    float _1433 = _668 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1055, _1059, _1062, _1065));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _497);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1549 = fma(_727, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719)) + cbModelParam._m0[13u].w;
        float _1553 = fma(_727, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719)) + cbModelParam._m0[14u].w;
        float _1557 = fma(_727, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719)) + cbModelParam._m0[15u].w;
        float _1560 = fma(_668, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666));
        float _1563 = fma(_668, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666));
        float _1566 = fma(_668, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666));
        float _1594;
        if (_1560 > 0.0)
        {
            _1594 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1594 = frontier_phi_19_17_ladder;
        }
        float _1765;
        if (_1563 > 0.0)
        {
            _1765 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1765 = frontier_phi_28_24_ladder;
        }
        float _2060;
        if (_1566 > 0.0)
        {
            _2060 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2060 = frontier_phi_40_35_ladder;
        }
        float _2062 = isnan(_1765) ? _1594 : (isnan(_1594) ? _1765 : min(_1594, _1765));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1560) + _1549;
        float _2068 = (_2063 * _1563) + _1553;
        float _2069 = (_2063 * _1566) + _1557;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_18_40_ladder = _2214.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2214.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2214.x * cbModelParam._m0[1u].y;
        }
        _1582 = frontier_phi_18_40_ladder_2;
        _1584 = frontier_phi_18_40_ladder_1;
        _1586 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_666, _667, _668), _1500);
        _1582 = _1570.x * cbModelParam._m0[1u].y;
        _1584 = _1570.y * cbModelParam._m0[1u].y;
        _1586 = _1570.z * cbModelParam._m0[1u].y;
    }
    float _1590 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _497);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1590 : min(cbModelParam._m0[25u].w, _1590));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_727, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_727, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_727, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_668, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666));
        float _1660 = fma(_668, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666));
        float _1663 = fma(_668, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666));
        float _1770;
        if (_1657 > 0.0)
        {
            _1770 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1770 = frontier_phi_30_26_ladder;
        }
        float _2087;
        if (_1660 > 0.0)
        {
            _2087 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2087 = frontier_phi_42_37_ladder;
        }
        float _2414;
        if (_1663 > 0.0)
        {
            _2414 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2414 = frontier_phi_52_49_ladder;
        }
        float _2416 = isnan(_2087) ? _1770 : (isnan(_1770) ? _2087 : min(_1770, _2087));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1657) + _1646;
        float _2422 = (_2417 * _1660) + _1650;
        float _2423 = (_2417 * _1663) + _1654;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2424;
        float _2427 = _2424 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2423 > _2427) || ((_2423 < _2425) || ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 < _2425) || (_2421 > _2427))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2423, cbModelParam._m0[17u].z, fma(_2422, cbModelParam._m0[17u].y, _2421 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2423, cbModelParam._m0[18u].z, fma(_2422, cbModelParam._m0[18u].y, _2421 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2423, cbModelParam._m0[19u].z, fma(_2422, cbModelParam._m0[19u].y, _2421 * cbModelParam._m0[19u].x))), _1591);
            frontier_phi_27_52_ladder = _2541.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2541.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2541.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_27_52_ladder_2;
        _1684 = frontier_phi_27_52_ladder_1;
        _1686 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_666, _667, _668), _1591);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1698 = ((((1.0 - _687) * ((_674 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_687 * _674)) * _658;
    float _1699 = _1698 * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1700 = _1698 * ((cbModelParam._m0[1u].w * (_1684 - _1584)) + _1584);
    float _1701 = _1698 * ((cbModelParam._m0[1u].w * (_1686 - _1586)) + _1586);
    float _1704 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1757 = _1744 / _1756;
    float _1758 = _1748 / _1756;
    float _1759 = _1752 / _1756;
    float _1906;
    float _1907;
    float _1908;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1786 = ((uint(_1759 > cbSceneParam._m0[59u].y) + uint(_1759 > cbSceneParam._m0[59u].x)) + uint(_1759 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1787 = _1786 + 43u;
        uint _1795 = _1786 + 44u;
        uint _1803 = _1786 + 45u;
        uint _1811 = _1786 + 46u;
        float _1822 = fma(_1756, cbSceneParam._m0[_1787].w, fma(_1752, cbSceneParam._m0[_1787].z, fma(_1748, cbSceneParam._m0[_1787].y, _1744 * cbSceneParam._m0[_1787].x)));
        float _1826 = fma(_1756, cbSceneParam._m0[_1795].w, fma(_1752, cbSceneParam._m0[_1795].z, fma(_1748, cbSceneParam._m0[_1795].y, _1744 * cbSceneParam._m0[_1795].x)));
        float _1834 = fma(_1756, cbSceneParam._m0[_1811].w, fma(_1752, cbSceneParam._m0[_1811].z, fma(_1748, cbSceneParam._m0[_1811].y, _1744 * cbSceneParam._m0[_1811].x)));
        float _1839 = cbSceneParam._m0[33u].z * _1834;
        float _1841 = cbSceneParam._m0[33u].w * _1834;
        float _1844 = fma(_1756, cbSceneParam._m0[_1803].w, fma(_1752, cbSceneParam._m0[_1803].z, fma(_1748, cbSceneParam._m0[_1803].y, _1744 * cbSceneParam._m0[_1803].x))) / _1834;
        float _1892 = (cbSceneParam._m0[33u].x - sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759))) * cbSceneParam._m0[33u].y;
        float _4213 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1899 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1839 + _1822) / _1834, (_1841 + _1826) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1841 + _1822) / _1834, (_1826 - _1839) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 - _1839) / _1834, (_1826 - _1841) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 - _1841) / _1834, (_1839 + _1826) / _1834), _1844), 0.0)).x), vec4(0.25)));
        _1906 = 1.0 - (_1899 * cbSceneParam._m0[34u].x);
        _1907 = 1.0 - (_1899 * cbSceneParam._m0[34u].y);
        _1908 = 1.0 - (_1899 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1906 = 1.0;
        _1907 = 1.0;
        _1908 = 1.0;
    }
    float _1972;
    float _1974;
    float _1976;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1960 = fma(_1756, cbSceneParam._m0[63u].w, fma(_1752, cbSceneParam._m0[63u].z, fma(_1748, cbSceneParam._m0[63u].y, _1744 * cbSceneParam._m0[63u].x)));
        float _1961 = fma(_1756, cbSceneParam._m0[60u].w, fma(_1752, cbSceneParam._m0[60u].z, fma(_1748, cbSceneParam._m0[60u].y, _1744 * cbSceneParam._m0[60u].x))) / _1960;
        float _1962 = fma(_1756, cbSceneParam._m0[61u].w, fma(_1752, cbSceneParam._m0[61u].z, fma(_1748, cbSceneParam._m0[61u].y, _1744 * cbSceneParam._m0[61u].x))) / _1960;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1961 >= cbSceneParam._m0[64u].x) && (_1962 >= cbSceneParam._m0[64u].y)) && (_1961 <= cbSceneParam._m0[64u].z)) && (_1962 <= cbSceneParam._m0[64u].w))
        {
            float _2100 = fma(_1756, cbSceneParam._m0[62u].w, fma(_1752, cbSceneParam._m0[62u].z, fma(_1748, cbSceneParam._m0[62u].y, _1744 * cbSceneParam._m0[62u].x))) / _1960;
            float _2104 = isnan(cbSceneParam._m0[41u].w) ? _2100 : (isnan(_2100) ? cbSceneParam._m0[41u].w : max(_2100, cbSceneParam._m0[41u].w));
            float _2147 = (cbSceneParam._m0[33u].x - sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759))) * cbSceneParam._m0[33u].y;
            float _4229 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
            float _2154 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1961, cbSceneParam._m0[33u].w + _1962), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1961, _1962 - cbSceneParam._m0[33u].z), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1961 - cbSceneParam._m0[33u].z, _1962 - cbSceneParam._m0[33u].w), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1961 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1962), _2104), 0.0)).x), vec4(0.25)));
            float _2158 = 1.0 - (_2154 * cbSceneParam._m0[34u].x);
            float _2159 = 1.0 - (_2154 * cbSceneParam._m0[34u].y);
            float _2160 = 1.0 - (_2154 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2160) ? _1908 : (isnan(_1908) ? _2160 : min(_1908, _2160));
            frontier_phi_39_38_ladder_1 = isnan(_2159) ? _1907 : (isnan(_1907) ? _2159 : min(_1907, _2159));
            frontier_phi_39_38_ladder_2 = isnan(_2158) ? _1906 : (isnan(_1906) ? _2158 : min(_1906, _2158));
        }
        else
        {
            frontier_phi_39_38_ladder = _1908;
            frontier_phi_39_38_ladder_1 = _1907;
            frontier_phi_39_38_ladder_2 = _1906;
        }
        _1972 = frontier_phi_39_38_ladder_2;
        _1974 = frontier_phi_39_38_ladder_1;
        _1976 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1972 = _1906;
        _1974 = _1907;
        _1976 = _1908;
    }
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _658 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2019 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2023 = _1983 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_494, _495, _496));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_494, _495, _496));
    float _4265 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4276 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_2000].x * _2006) * _2044) + (((cbLight._m0[_2010].x * _1972) * _2019) * _2042);
    float _2052 = ((_2006 * cbLight._m0[_2000].y) * _2044) + (((cbLight._m0[_2010].y * _1974) * _2019) * _2042);
    float _2053 = ((_2006 * cbLight._m0[_2000].z) * _2044) + (((cbLight._m0[_2010].z * _1976) * _2019) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2059)
    {
        _2161 = _2051;
        _2163 = _2052;
        _2165 = _2053;
    }
    else
    {
        uint _2169 = _1983 + 6u;
        float _2185 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4287 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2188 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2161 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _2051;
        _2163 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _2052;
        _2165 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _2053;
    }
    bool _2168 = _2057.y == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2168)
    {
        _2223 = _2161;
        _2225 = _2163;
        _2227 = _2165;
    }
    else
    {
        uint _2385 = _1983 + 7u;
        float _2401 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4303 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2404 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2223 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2161;
        _2225 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2163;
        _2227 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2165;
    }
    uint _2230 = _1983 + 8u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _497) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_1983].x + _578;
    float _2246 = cbLight._m0[_1983].y + _579;
    float _2247 = cbLight._m0[_1983].z + _580;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1983].xyz));
    float _4319 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _2259 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2260 = dot(vec3(_494, _495, _496), vec3(_2252, _2253, _2254));
    float _4341 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2252, _2253, _2254));
    float _4352 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2244 * _2244;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2284 = 1.0 - _2244;
    float _2295 = (0.5 / (((_2259 * ((_2258 * _2284) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2284) + _2244) * _2258))) * _2258;
    float _4363 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    uint _2311 = _1983 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _497) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2023].x + _578;
    float _2325 = cbLight._m0[_2023].y + _579;
    float _2326 = cbLight._m0[_2023].z + _580;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2023].xyz));
    float _4374 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2338 = dot(vec3(_494, _495, _496), vec3(_2331, _2332, _2333));
    float _4385 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2331, _2332, _2333));
    float _4396 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2360 = 1.0 - _2323;
    float _2370 = (0.5 / (((_2259 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2360) + _2323) * _2337))) * _2337;
    float _4407 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2382 = (((_2359 * cbLight._m0[_2311].x) * _2372) * _2006) + ((((cbLight._m0[_2230].x * _1972) * _2283) * _2297) * _2019);
    float _2383 = (((_2359 * cbLight._m0[_2311].y) * _2372) * _2006) + ((((cbLight._m0[_2230].y * _1974) * _2283) * _2297) * _2019);
    float _2384 = (((_2359 * cbLight._m0[_2311].z) * _2372) * _2006) + ((((cbLight._m0[_2230].z * _1976) * _2283) * _2297) * _2019);
    float _2440;
    float _2442;
    float _2444;
    if (_2059)
    {
        _2440 = _2382;
        _2442 = _2383;
        _2444 = _2384;
    }
    else
    {
        uint _2446 = _1983 + 2u;
        uint _2450 = _1983 + 10u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _497) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _578;
        float _2467 = cbLight._m0[_2446].y + _579;
        float _2468 = cbLight._m0[_2446].z + _580;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2446].xyz));
        float _4418 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2480 = dot(vec3(_494, _495, _496), vec3(_2473, _2474, _2475));
        float _4429 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4440 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2502 = 1.0 - _2465;
        float _2512 = (0.5 / (((_2259 * ((_2479 * _2502) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2502) + _2465) * _2479))) * _2479;
        float _4451 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2440 = (((_2501 * cbLight._m0[_2450].x) * _2514) * _2515) + _2382;
        _2442 = (((_2501 * cbLight._m0[_2450].y) * _2514) * _2515) + _2383;
        _2444 = (((_2501 * cbLight._m0[_2450].z) * _2514) * _2515) + _2384;
    }
    float _2546;
    float _2548;
    float _2550;
    if (_2168)
    {
        _2546 = _2440;
        _2548 = _2442;
        _2550 = _2444;
    }
    else
    {
        uint _2557 = _1983 + 3u;
        uint _2561 = _1983 + 11u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _497) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _578;
        float _2578 = cbLight._m0[_2557].y + _579;
        float _2579 = cbLight._m0[_2557].z + _580;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2557].xyz));
        float _4467 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2591 = dot(vec3(_494, _495, _496), vec3(_2584, _2585, _2586));
        float _4478 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4489 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2612 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2613 = 1.0 - _2576;
        float _2623 = (0.5 / (((_2259 * ((_2590 * _2613) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2613) + _2576) * _2590))) * _2590;
        float _4500 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2546 = (((_2612 * cbLight._m0[_2561].x) * _2625) * _2626) + _2440;
        _2548 = (((_2612 * cbLight._m0[_2561].y) * _2625) * _2626) + _2442;
        _2550 = (((_2612 * cbLight._m0[_2561].z) * _2625) * _2626) + _2444;
    }
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_1981.y == 0u)
    {
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.x;
        uint _2659 = uint((float(_2647.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2648))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2648)));
        float _2669 = (log2(_1759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2670 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        uint _2673 = uint(isnan(14.0) ? _2670 : (isnan(_2670) ? 14.0 : min(_2670, 14.0)));
        uvec4 _2678 = texelFetch(g_lightClusterGridBuffer, int(((_2673 << 2u) + (_2659 << 6u)) >> 2u));
        uint _2679 = _2678.x;
        uint _2680 = _2647.z;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((((1u << ((_2680 >> 4u) & 15u)) + 4294967295u) & _2679) == 0u) || ((_2680 & 240u) == 0u))
        {
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
        }
        else
        {
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            uint _2918 = 0u;
            uint _2927;
            bool _2928;
            for (;;)
            {
                _2927 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                _2928 = _2927 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2928)
                {
                    frontier_phi_73_pred = _2917;
                    frontier_phi_73_pred_1 = _2916;
                    frontier_phi_73_pred_2 = _2915;
                    frontier_phi_73_pred_3 = _2914;
                    frontier_phi_73_pred_4 = _2913;
                    frontier_phi_73_pred_5 = _2912;
                }
                else
                {
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    uint _3063;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2927;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    for (;;)
                    {
                        uint _3067 = uint(findLSB(_3063)) + (_2918 << 5u);
                        uint _3064 = (_3063 + 4294967295u) & _3063;
                        uint _3069 = _3067 * 48u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 3u)).x));
                        uint _3089 = (_3067 * 48u) + 4u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3108 = (_3067 * 48u) + 8u;
                        vec3 _3119 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x));
                        float _3123 = _3083.x - _1757;
                        float _3124 = _3083.y - _1758;
                        float _3125 = _3083.z - _1759;
                        float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                        float _3129 = inversesqrt(_3126);
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3133 = dot(vec3(_614, _617, _620), vec3(_3130, _3131, _3132));
                        float _3138 = 1.0 - (_3126 * _3083.w);
                        float _4526 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3140 = sqrt(_3126) * _3102.w;
                        float _3143 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3133) + _3144;
                        float _3150 = _3140 * _3140;
                        float _3154 = ((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3139) / ((_3150 * 0.699999988079071044921875) + 1.0);
                        float _3158 = (-0.0) - _1757;
                        float _3159 = (-0.0) - _1758;
                        float _3160 = (-0.0) - _1759;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3174 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                        float _3175 = 1.0 - _674;
                        float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                        float _3183 = _3182 * _3182;
                        float _3184 = _3183 * _3183;
                        float _3185 = _3165 + _3130;
                        float _3186 = _3166 + _3131;
                        float _3187 = _3167 + _3132;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3195 = dot(vec3(_614, _617, _620), vec3(_3165, _3166, _3167));
                        float _4542 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3199 = dot(vec3(_614, _617, _620), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                        float _4553 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                        float _3207 = _3143 * _3183;
                        float _3208 = _3207 * _3207;
                        float _3211 = ((1.0 - _3208) * _3133) + _3208;
                        float _4564 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3213 = 1.0 - _3183;
                        float _3223 = (0.5 / (((_3212 * ((_3198 * _3213) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3183) * _3198))) * _3212;
                        float _4575 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3234 = (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3206 * _3206) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125))) * _3139;
                        _2987 = (_3154 * _3102.x) + _3060;
                        _2988 = (_3154 * _3102.y) + _3061;
                        _2989 = (_3154 * _3102.z) + _3062;
                        _2984 = (_3234 * _3119.x) + _3057;
                        _2985 = (_3234 * _3119.y) + _3058;
                        _2986 = (_3234 * _3119.z) + _3059;
                        if (_3064 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _3064;
                        }
                    }
                    frontier_phi_73_pred = _2989;
                    frontier_phi_73_pred_1 = _2988;
                    frontier_phi_73_pred_2 = _2987;
                    frontier_phi_73_pred_3 = _2986;
                    frontier_phi_73_pred_4 = _2985;
                    frontier_phi_73_pred_5 = _2984;
                }
                _2770 = frontier_phi_73_pred;
                _2768 = frontier_phi_73_pred_1;
                _2766 = frontier_phi_73_pred_2;
                _2764 = frontier_phi_73_pred_3;
                _2762 = frontier_phi_73_pred_4;
                _2760 = frontier_phi_73_pred_5;
                uint _2919 = _2918 + 1u;
                if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2912 = _2760;
                    _2913 = _2762;
                    _2914 = _2764;
                    _2915 = _2766;
                    _2916 = _2768;
                    _2917 = _2770;
                    _2918 = _2919;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
        }
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.z;
        uint _2776 = (_2774 >> 8u) & 15u;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((4294967295u << _2776) & _2679) == 0u)
        {
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
            _2890 = _2769;
        }
        else
        {
            float _2905 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
            float _2906 = _2905 * _1757;
            float _2907 = _2905 * _1758;
            float _2908 = _2905 * _1759;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2776 < ((_2774 >> 12u) & 15u))
            {
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _3040 = _2759;
                float _3041 = _2761;
                float _3042 = _2763;
                float _3043 = _2765;
                float _3044 = _2767;
                float _3045 = _2769;
                uint _3046 = _2776;
                uint _3055;
                bool _3056;
                for (;;)
                {
                    _3055 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                    _3056 = _3055 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3056)
                    {
                        frontier_phi_84_pred = _3045;
                        frontier_phi_84_pred_1 = _3044;
                        frontier_phi_84_pred_2 = _3043;
                        frontier_phi_84_pred_3 = _3042;
                        frontier_phi_84_pred_4 = _3041;
                        frontier_phi_84_pred_5 = _3040;
                    }
                    else
                    {
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3261 = _3040;
                        float _3262 = _3041;
                        float _3263 = _3042;
                        float _3264 = _3043;
                        float _3265 = _3044;
                        float _3266 = _3045;
                        uint _3267 = _3055;
                        uint _3268;
                        vec4 _3293;
                        float _3294;
                        vec4 _3309;
                        vec3 _3321;
                        vec4 _3336;
                        vec4 _3352;
                        float _3398;
                        bool _3399;
                        for (;;)
                        {
                            uint _3278 = ((_3046 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3267));
                            _3268 = (_3267 + 4294967295u) & _3267;
                            uint _3280 = _3278 * 40u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3294 = _3293.w;
                            uint _3296 = (_3278 * 40u) + 4u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3278 * 40u) + 8u;
                            _3321 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x));
                            uint _3323 = (_3278 * 40u) + 16u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3339 = (_3278 * 40u) + 20u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3278 * 40u) + 24u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3373 = (_3278 * 40u) + 28u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3398 = fma(_1759, _3386.z, fma(_1758, _3386.y, _3386.x * _1757)) + _3386.w;
                            _3399 = !((fma(_1759, _3367.z, fma(_1758, _3367.y, _3367.x * _1757)) + _3367.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3399)
                            {
                                float _3426 = _3293.x - _1757;
                                float _3427 = _3293.y - _1758;
                                float _3428 = _3293.z - _1759;
                                float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                                float _3432 = inversesqrt(_3429);
                                float _3433 = _3432 * _3426;
                                float _3434 = _3432 * _3427;
                                float _3435 = _3432 * _3428;
                                float _3439 = 1.0 - (_3429 / (_3294 * _3294));
                                float _4586 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3444 = sqrt(_3429) * _3309.w;
                                float _3446 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                                float _3447 = _3446 * _3446;
                                float _3450 = ((1.0 - _3447) * dot(vec3(_3433, _3434, _3435), vec3(_614, _617, _620))) + _3447;
                                float _3453 = _3444 * _3444;
                                float _3457 = (fma(_1759, _3336.z, fma(_1758, _3336.y, _3336.x * _1757)) + _3336.w) / _3398;
                                float _3458 = (fma(_1759, _3352.z, fma(_1758, _3352.y, _3352.x * _1757)) + _3352.w) / _3398;
                                float _3462 = 1.0 - dot(vec2(_3457, _3458), vec2(_3457, _3458));
                                float _4602 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3464 = _3463 * (((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3440) / ((_3453 * 0.699999988079071044921875) + 1.0));
                                float _3476 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                                float _3477 = 1.0 - _674;
                                float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                                float _3485 = _3484 * _3484;
                                float _3486 = _3485 * _3485;
                                float _3487 = _3433 - _2906;
                                float _3488 = _3434 - _2907;
                                float _3489 = _3435 - _2908;
                                float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                                float _3497 = dot(vec3(_614, _617, _620), vec3((-0.0) - _2906, (-0.0) - _2907, (-0.0) - _2908));
                                float _4613 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3501 = dot(vec3(_614, _617, _620), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                                float _4624 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                                float _3509 = _3446 * _3485;
                                float _3510 = _3509 * _3509;
                                float _3516 = ((1.0 - _3510) * dot(vec3(_614, _617, _620), vec3(_3433, _3434, _3435))) + _3510;
                                float _4635 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3518 = 1.0 - _3485;
                                float _3528 = (0.5 / (((_3517 * ((_3500 * _3518) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3485) * _3500))) * _3517;
                                float _4646 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3538 = (_3463 * _3440) * (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) / ((_3508 * _3508) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3464 * _3309.z;
                                frontier_phi_90_pred_1 = _3464 * _3309.y;
                                frontier_phi_90_pred_2 = _3464 * _3309.x;
                                frontier_phi_90_pred_3 = _3538 * _3321.z;
                                frontier_phi_90_pred_4 = _3538 * _3321.y;
                                frontier_phi_90_pred_5 = _3538 * _3321.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_90_pred;
                            _3546 = frontier_phi_90_pred_1;
                            _3545 = frontier_phi_90_pred_2;
                            _3544 = frontier_phi_90_pred_3;
                            _3543 = frontier_phi_90_pred_4;
                            _3542 = frontier_phi_90_pred_5;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            _3253 = _3547 + _3266;
                            _3248 = _3542 + _3261;
                            _3249 = _3543 + _3262;
                            _3250 = _3544 + _3263;
                            if (_3268 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3268;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3253;
                        frontier_phi_84_pred_1 = _3252;
                        frontier_phi_84_pred_2 = _3251;
                        frontier_phi_84_pred_3 = _3250;
                        frontier_phi_84_pred_4 = _3249;
                        frontier_phi_84_pred_5 = _3248;
                    }
                    _2891 = frontier_phi_84_pred;
                    _2889 = frontier_phi_84_pred_1;
                    _2887 = frontier_phi_84_pred_2;
                    _2885 = frontier_phi_84_pred_3;
                    _2883 = frontier_phi_84_pred_4;
                    _2881 = frontier_phi_84_pred_5;
                    uint _3047 = _3046 + 1u;
                    if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3040 = _2881;
                        _3041 = _2883;
                        _3042 = _2885;
                        _3043 = _2887;
                        _3044 = _2889;
                        _3045 = _2891;
                        _3046 = _3047;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2887;
                frontier_phi_65_66_ladder_1 = _2891;
                frontier_phi_65_66_ladder_2 = _2889;
                frontier_phi_65_66_ladder_3 = _2885;
                frontier_phi_65_66_ladder_4 = _2883;
                frontier_phi_65_66_ladder_5 = _2881;
            }
            else
            {
                frontier_phi_65_66_ladder = _2765;
                frontier_phi_65_66_ladder_1 = _2769;
                frontier_phi_65_66_ladder_2 = _2767;
                frontier_phi_65_66_ladder_3 = _2763;
                frontier_phi_65_66_ladder_4 = _2761;
                frontier_phi_65_66_ladder_5 = _2759;
            }
            _2880 = frontier_phi_65_66_ladder_5;
            _2882 = frontier_phi_65_66_ladder_4;
            _2884 = frontier_phi_65_66_ladder_3;
            _2886 = frontier_phi_65_66_ladder;
            _2888 = frontier_phi_65_66_ladder_2;
            _2890 = frontier_phi_65_66_ladder_1;
        }
        float _2895 = isnan(1.0) ? _658 : (isnan(_658) ? 1.0 : min(_658, 1.0));
        _2692 = (_2895 * _2886) + _2223;
        _2694 = (_2895 * _2888) + _2225;
        _2696 = (_2895 * _2890) + _2227;
        _2698 = ((_2880 * 0.039999999105930328369140625) * _2895) + _2546;
        _2700 = ((_2882 * 0.039999999105930328369140625) * _2895) + _2548;
        _2702 = ((_2884 * 0.039999999105930328369140625) * _2895) + _2550;
    }
    else
    {
        _2692 = _2223;
        _2694 = _2225;
        _2696 = _2227;
        _2698 = _2546;
        _2700 = _2548;
        _2702 = _2550;
    }
    float _4662 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4673 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4684 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _2719 = ((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2692 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _658))) + ((_2698 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2720 = ((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2694 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _658))) + ((_2700 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2721 = ((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2696 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _658))) + ((_2702 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    uint _2722 = _230 + 6u;
    float _2730 = _595 / cbSceneParam._m0[86u].x;
    float _2731 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2745 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, (log2((isnan(cbSceneParam._m0[77u].w) ? _519 : (isnan(_519) ? cbSceneParam._m0[77u].w : min(_519, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2747 = _2745.x;
    float _2748 = _2745.y;
    float _2749 = _2745.z;
    float _2750 = _2745.w;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_519 > cbSceneParam._m0[78u].w)
    {
        float _2784 = isnan(_519) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _519 : min(cbSceneParam._m0[80u].w, _519));
        float _2785 = _2784 / _519;
        float _2796 = _2785 * _571;
        float _2797 = _572 * _2785;
        float _2798 = (-0.0) - _2797;
        float _2800 = _2785 * _573;
        float _2802 = (cbSceneParam._m0[77u].w * _2798) / _2784;
        float _2803 = _2802 + cbSceneParam._m0[79u].w;
        float _2804 = cbSceneParam._m0[79u].w - _2797;
        float _2810 = sqrt(((_2796 * _2796) + (_2797 * _2797)) + (_2800 * _2800));
        float _2813 = (1.0 - (cbSceneParam._m0[77u].w / _2784)) * _2810;
        float _2818 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2820 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2798 - _2802) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2803 > 0.0) ? exp2(_2818 * _2803) : (2.0 - exp2(_2820 * _2803))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2813;
        }
        else
        {
            float _2941 = 1.0 / cbSceneParam._m0[80u].x;
            float _2942 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : max(_2803, _2804));
            float _2943 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : min(_2803, _2804));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            _2997 = ((abs(_2810 / _2798) * cbSceneParam._m0[80u].y) * ((((_2952 - _2953) * 2.0) - ((exp2(_2818 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)))) - exp2(_2818 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))))) * _2941)) - ((exp2(_2820 * _2952) - exp2(_2820 * _2953)) * _2941))) + (_2813 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2750);
        _2822 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2747;
        _2824 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2748;
        _2826 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2749;
        _2828 = _3008 * _2750;
    }
    else
    {
        _2822 = _2747;
        _2824 = _2748;
        _2826 = _2749;
        _2828 = _2750;
    }
    bool _3035;
    vec4 _2838;
    vec4 _2860;
    float _2862;
    float _2866;
    float _2867;
    float _2868;
    float _2869;
    bool _2879;
    for (;;)
    {
        _2838 = cbMatDynParam._m0[0u];
        float _2840 = roundEven(_2838.y);
        bool _2841 = _2840 == 3.0;
        float _2842 = log2(_2828);
        float _2849 = exp2(_2842 * cbSceneParam._m0[78u].x) * _2719;
        float _2850 = exp2(_2842 * cbSceneParam._m0[78u].y) * _2720;
        float _2851 = exp2(_2842 * cbSceneParam._m0[78u].z) * _2721;
        float _2858 = _584 + (-0.5);
        _2860 = cbMtdParam._m0[1u];
        _2862 = _2860.y * _2858;
        float _2865 = (_2840 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2866 = _2865 * (_2841 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2822)));
        _2867 = _2865 * (_2841 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2824)));
        _2868 = _2865 * (_2841 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2826)));
        _2869 = _2858 * 0.999000012874603271484375;
        _2879 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2879)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2869) < 0.5)
            {
                _3035 = true;
                break;
            }
        }
        uint _2976 = _633 + uint(_2838.w);
        if ((cbInstanceData._m0[_2976].w < 1.0) && ((cbInstanceData._m0[_2976].w + _2869) < 0.5))
        {
            _3035 = true;
            break;
        }
        if ((_2862 + 1.0) < _2860.x)
        {
            _3035 = true;
            break;
        }
        _3035 = false;
        break;
    }
    float _3239;
    if (_3035)
    {
        discard_state = true;
        _3239 = 0.0;
    }
    else
    {
        _3239 = cbInstanceData._m0[_2722].w;
    }
    SV_Target.x = _2866;
    SV_Target.y = _2867;
    SV_Target.z = _2868;
    SV_Target.w = _3239;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2722].w;
    discard_exit();
}


