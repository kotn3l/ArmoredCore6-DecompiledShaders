#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1166;
float _3551;
float _3552;
float _3553;
float _3554;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _361 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _378 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _361) * cbMtdParam._m0[24u].x) + _361) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3563 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _386 = (_379 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _387 = (_379 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _388 = (_379 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _431 = ((_401.z - _422) * _379) + _422;
    float _434 = ((((_401.x - _420) * _379) + _420) * 2.0) + (-1.0);
    float _436 = ((((_401.y - _421) * _379) + _421) * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3574 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    vec4 _458 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _470 = (((_458.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _434;
    float _471 = (((_458.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _436;
    vec4 _483 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _485 = _483.x;
    float _486 = 1.0 - _485;
    float _514 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_485 - _486) * cbMtdParam._m0[24u].w) + _486) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3585 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _523 = ((((cbMtdParam._m0[10u].x - _386) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _515) + _386;
    float _524 = ((((cbMtdParam._m0[10u].y - _387) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _515) + _387;
    float _525 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _388)) * _515) + _388;
    float _529 = (cbMtdParam._m0[19u].w * (_458.z - _431)) + _431;
    float _533 = ((cbMtdParam._m0[23u].y - _529) * _515) + _529;
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _558 = (_552.x * 2.0) + (-1.0);
    float _559 = (_552.y * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3596 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _576 = (_515 * (((cbMtdParam._m0[22u].z * _470) - _470) + _558)) + _470;
    float _577 = (_515 * (((cbMtdParam._m0[22u].z * _471) - _471) + _559)) + _471;
    float _578 = (_515 * (sqrt(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) - _442)) + _442;
    float _580 = cbMtdParam._m0[22u].x + _458.w;
    float _582 = gl_FragCoord.x * 0.125;
    float _584 = gl_FragCoord.y * 0.125;
    float _594 = fma(_578, _230 * NORMAL.x, fma(_577, _237 * TANGENT.x, (_223 * _215) * _576));
    float _597 = fma(_578, _230 * NORMAL.y, fma(_577, _237 * TANGENT.y, (_223 * _216) * _576));
    float _600 = fma(_578, _230 * NORMAL.z, fma(_577, _237 * TANGENT.z, (_223 * _217) * _576));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _605 = _604 * _594;
    float _606 = _604 * _597;
    float _607 = _604 * _600;
    float _3607 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _608 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3629 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3640 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3651 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_582, _584)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _630 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _681 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _671);
    float _682 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _671);
    float _683 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _671);
    float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
    float _688 = _681 * _687;
    float _689 = _682 * _687;
    float _690 = _683 * _687;
    vec4 _692 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_582, _584));
    float _694 = _692.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _848 = sqrt(((_681 * _681) + (_682 * _682)) + (_683 * _683));
        float _854 = (cbMatDynParam._m0[5u].x * _848) + cbMatDynParam._m0[5u].y;
        float _3662 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _859 = (cbMatDynParam._m0[5u].z * _848) + cbMatDynParam._m0[5u].w;
        float _3673 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) - _855)) + _855) < ((_694 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _705 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _706 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _724 = fma(_607, cbSceneParam._m0[5u].z, fma(_606, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _605));
    float _727 = fma(_607, cbSceneParam._m0[6u].z, fma(_606, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _605));
    float _730 = fma(_607, cbSceneParam._m0[7u].z, fma(_606, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _605));
    uint _743 = _243 + 9u;
    uint _744 = _743 + uint(cbMatDynParam._m0[0u].w);
    float _750 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_744].x;
    float _751 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_744].y;
    float _752 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_744].z;
    float _3684 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    vec4 _764 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _705, cbSceneParam._m0[86u].y * _706));
    float _768 = ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * TEXCOORD_5.w) * _764.x;
    float _769 = dot(vec3(_605, _606, _607), vec3(_688, _689, _690));
    float _772 = _769 * 2.0;
    float _776 = (_772 * _605) - _688;
    float _777 = (_772 * _606) - _689;
    float _778 = (_772 * _607) - _690;
    float _782 = abs(dot(vec3(_688, _689, _690), vec3(_605, _606, _607)));
    float _3717 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _784 = sqrt(_608);
    float _797 = exp2((_784 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_784 * 3.0));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1165;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _890 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _894 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _898 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _923 = _829 + _605;
        float _924 = _833 + _606;
        float _925 = _837 + _607;
        float _935 = fma(_925, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923)) - _890;
        float _936 = fma(_925, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923)) - _894;
        float _937 = fma(_925, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923)) - _898;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_890 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_894 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[34u].z) + ((((((_898 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _993 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_959.x + (-0.5));
        float _995 = _993 * (_959.y + (-0.5));
        float _996 = _993 * (_959.z + (-0.5));
        float _1003 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_966.x + (-0.5));
        float _1005 = _1003 * (_966.y + (-0.5));
        float _1006 = _1003 * (_966.z + (-0.5));
        float _1013 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_973.x + (-0.5));
        float _1015 = _1013 * (_973.y + (-0.5));
        float _1016 = _1013 * (_973.z + (-0.5));
        float _1023 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_980.x + (-0.5));
        float _1025 = _1023 * (_980.y + (-0.5));
        float _1026 = _1023 * (_980.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1047 = (dot(vec3(_605, _606, _607), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1057 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3765 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1059 + 1.0))) + _1064) * _1027;
        float _1074 = _995 * 0.5;
        float _1075 = _1005 * 0.5;
        float _1076 = _1015 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_605, _606, _607), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3798 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1101 + 1.0))) + _1106) * _1028;
        float _1116 = _996 * 0.5;
        float _1117 = _1006 * 0.5;
        float _1118 = _1016 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_605, _606, _607), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3831 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1143 + 1.0))) + _1148) * _1029;
        _1165 = _996;
        _1167 = _995;
        _1168 = _994;
        _1169 = _1006;
        _1170 = _1005;
        _1171 = _1004;
        _1172 = _1016;
        _1173 = _1015;
        _1174 = _1014;
        _1175 = _1029;
        _1176 = _1028;
        _1177 = _1027;
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _1166;
        _1167 = _1166;
        _1168 = _1166;
        _1169 = _1166;
        _1170 = _1166;
        _1171 = _1166;
        _1172 = _1166;
        _1173 = _1166;
        _1174 = _1166;
        _1175 = _1166;
        _1176 = _1166;
        _1177 = _1166;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1204 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1208 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1212 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1235 = _829 + _605;
        float _1236 = _833 + _606;
        float _1237 = _837 + _607;
        float _1247 = fma(_1237, cbModelParam._m0[30u].z, fma(_1236, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1235)) - _1204;
        float _1248 = fma(_1237, cbModelParam._m0[31u].z, fma(_1236, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1235)) - _1208;
        float _1249 = fma(_1237, cbModelParam._m0[32u].z, fma(_1236, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1235)) - _1212;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1204 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1208 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[35u].z) + ((((((_1212 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1303 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1270.x + (-0.5));
        float _1305 = _1303 * (_1270.y + (-0.5));
        float _1306 = _1303 * (_1270.z + (-0.5));
        float _1313 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1277.x + (-0.5));
        float _1315 = _1313 * (_1277.y + (-0.5));
        float _1316 = _1313 * (_1277.z + (-0.5));
        float _1323 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1284.x + (-0.5));
        float _1325 = _1323 * (_1284.y + (-0.5));
        float _1326 = _1323 * (_1284.z + (-0.5));
        float _1333 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1291.x + (-0.5));
        float _1335 = _1333 * (_1291.y + (-0.5));
        float _1336 = _1333 * (_1291.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_605, _606, _607), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3894 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1367 + 1.0))) + _1372) * _1337;
        float _1382 = _1305 * 0.5;
        float _1383 = _1315 * 0.5;
        float _1384 = _1325 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_605, _606, _607), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3927 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1409 + 1.0))) + _1414) * _1338;
        float _1424 = _1306 * 0.5;
        float _1425 = _1316 * 0.5;
        float _1426 = _1326 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_605, _606, _607), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3960 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1451 + 1.0))) + _1456) * _1339;
        _1473 = _1306;
        _1474 = _1305;
        _1475 = _1304;
        _1476 = _1316;
        _1477 = _1315;
        _1478 = _1314;
        _1479 = _1326;
        _1480 = _1325;
        _1481 = _1324;
        _1482 = _1339;
        _1483 = _1338;
        _1484 = _1337;
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1166;
        _1474 = _1166;
        _1475 = _1166;
        _1476 = _1166;
        _1477 = _1166;
        _1478 = _1166;
        _1479 = _1166;
        _1480 = _1166;
        _1481 = _1166;
        _1482 = _1166;
        _1483 = _1166;
        _1484 = _1166;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1178)) + _1178;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1179)) + _1179;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1180)) + _1180;
    float _1520 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1523 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1526 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1497));
    float _1541 = _776 * 0.5;
    float _1542 = _777 * 0.5;
    float _1543 = _778 * 0.5;
    float _1544 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1547 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1550 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1584;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1557 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1165, _1169, _1172, _1175));
        float _1561 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1565 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1572 = dot(vec4(cbModelParam._m0[39u]), vec4(_1541, _1542, _1543, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1595;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1586 = dot(vec4(cbModelParam._m0[40u]), vec4(_1541, _1542, _1543, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1599 = (_1595 * cbModelParam._m0[1u].x) + (_1584 * (1.0 - cbModelParam._m0[1u].x));
    float _1609 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1609 : min(cbModelParam._m0[25u].z, _1609));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1659 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1663 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1667 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1670 = fma(_778, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776));
        float _1673 = fma(_778, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776));
        float _1676 = fma(_778, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776));
        float _1704;
        if (_1670 > 0.0)
        {
            _1704 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1704 = frontier_phi_19_17_ladder;
        }
        float _1927;
        if (_1673 > 0.0)
        {
            _1927 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1927 = frontier_phi_28_24_ladder;
        }
        float _2173;
        if (_1676 > 0.0)
        {
            _2173 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2173 = frontier_phi_40_35_ladder;
        }
        float _2175 = isnan(_1927) ? _1704 : (isnan(_1704) ? _1927 : min(_1704, _1927));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1670) + _1659;
        float _2181 = (_2176 * _1673) + _1663;
        float _2182 = (_2176 * _1676) + _1667;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1610);
            frontier_phi_18_40_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1692 = frontier_phi_18_40_ladder_2;
        _1694 = frontier_phi_18_40_ladder_1;
        _1696 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_776, _777, _778), _1610);
        _1692 = _1680.x * cbModelParam._m0[1u].y;
        _1694 = _1680.y * cbModelParam._m0[1u].y;
        _1696 = _1680.z * cbModelParam._m0[1u].y;
    }
    float _1700 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1700 : min(cbModelParam._m0[25u].w, _1700));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1756 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1760 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1764 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1767 = fma(_778, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776));
        float _1770 = fma(_778, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776));
        float _1773 = fma(_778, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776));
        float _1932;
        if (_1767 > 0.0)
        {
            _1932 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1932 = frontier_phi_30_26_ladder;
        }
        float _2200;
        if (_1770 > 0.0)
        {
            _2200 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2200 = frontier_phi_42_37_ladder;
        }
        float _2405;
        if (_1773 > 0.0)
        {
            _2405 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2405 = frontier_phi_51_48_ladder;
        }
        float _2407 = isnan(_2200) ? _1932 : (isnan(_1932) ? _2200 : min(_1932, _2200));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1767) + _1756;
        float _2413 = (_2408 * _1770) + _1760;
        float _2414 = (_2408 * _1773) + _1764;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1701);
            frontier_phi_27_51_ladder = _2613.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2613.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2613.x * cbModelParam._m0[1u].z;
        }
        _1792 = frontier_phi_27_51_ladder_2;
        _1794 = frontier_phi_27_51_ladder_1;
        _1796 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_776, _777, _778), _1701);
        _1792 = _1776.x * cbModelParam._m0[1u].z;
        _1794 = _1776.y * cbModelParam._m0[1u].z;
        _1796 = _1776.z * cbModelParam._m0[1u].z;
    }
    float _1808 = ((((1.0 - _797) * ((_784 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_797 * _784)) * _768;
    float _1809 = _1808 * ((cbModelParam._m0[1u].w * (_1792 - _1692)) + _1692);
    float _1810 = _1808 * ((cbModelParam._m0[1u].w * (_1794 - _1694)) + _1694);
    float _1811 = _1808 * ((cbModelParam._m0[1u].w * (_1796 - _1696)) + _1696);
    float _1814 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1809 * cbSceneParam._m0[91u].x));
    vec4 _1828 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_705, _706));
    float _1830 = _1828.w;
    float _1842 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1830);
    float _1843 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1830);
    float _1844 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1830);
    uvec4 _1848 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1850 = _1848.x * 14u;
    uint _1851 = _1850 + 13u;
    float _1858 = _768 + (-1.0);
    float _1863 = (cbLight._m0[_1851].x * _1858) + 1.0;
    float _1864 = (cbLight._m0[_1851].y * _1858) + 1.0;
    float _1865 = (cbLight._m0[_1851].z * _1858) + 1.0;
    float _1866 = (cbLight._m0[_1851].w * _1858) + 1.0;
    uint _1867 = _1850 + 5u;
    float _1873 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1877 = _1850 + 4u;
    float _1886 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1890 = _1850 | 1u;
    float _1901 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_605, _606, _607));
    float _1904 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_605, _606, _607));
    float _4096 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _4107 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1909 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1911 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.3183098733425140380859375;
    float _1918 = ((cbLight._m0[_1867].x * _1873) * _1911) + (((cbLight._m0[_1877].x * _1842) * _1886) * _1909);
    float _1919 = ((_1873 * cbLight._m0[_1867].y) * _1911) + (((cbLight._m0[_1877].y * _1843) * _1886) * _1909);
    float _1920 = ((_1873 * cbLight._m0[_1867].z) * _1911) + (((cbLight._m0[_1877].z * _1844) * _1886) * _1909);
    uvec4 _1924 = floatBitsToUint(cbLight._m0[_1850 + 12u]);
    bool _1926 = _1924.x == 0u;
    float _1937;
    float _1939;
    float _1941;
    if (_1926)
    {
        _1937 = _1918;
        _1939 = _1919;
        _1941 = _1920;
    }
    else
    {
        uint _1945 = _1850 + 6u;
        float _1961 = (dot(vec3(cbLight._m0[_1850 + 2u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _1962 = _1961 * _1961;
        float _4118 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1963 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1964 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1937 = (((cbLight._m0[_1945].x * 0.3183098733425140380859375) * _1963) * _1964) + _1918;
        _1939 = (((cbLight._m0[_1945].y * 0.3183098733425140380859375) * _1963) * _1964) + _1919;
        _1941 = (((cbLight._m0[_1945].z * 0.3183098733425140380859375) * _1963) * _1964) + _1920;
    }
    bool _1944 = _1924.y == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1944)
    {
        _1982 = _1937;
        _1984 = _1939;
        _1986 = _1941;
    }
    else
    {
        uint _2144 = _1850 + 7u;
        float _2160 = (dot(vec3(cbLight._m0[_1850 + 3u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4134 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2163 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _1982 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _1937;
        _1984 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _1939;
        _1986 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _1941;
    }
    uint _1989 = _1850 + 8u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _608) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1850].x + _688;
    float _2005 = cbLight._m0[_1850].y + _689;
    float _2006 = cbLight._m0[_1850].z + _690;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1850].xyz));
    float _4150 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _2018 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2019 = dot(vec3(_605, _606, _607), vec3(_2011, _2012, _2013));
    float _4172 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2023 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2011, _2012, _2013));
    float _4183 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2027 = _2003 * _2003;
    float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
    float _2042 = (exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2043 = 1.0 - _2003;
    float _2054 = (0.5 / (((_2018 * ((_2017 * _2043) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2043) + _2003) * _2017))) * _2017;
    float _4194 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2056 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
    uint _2070 = _1850 + 9u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _608) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1890].x + _688;
    float _2084 = cbLight._m0[_1890].y + _689;
    float _2085 = cbLight._m0[_1890].z + _690;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1890].xyz));
    float _4205 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2097 = dot(vec3(_605, _606, _607), vec3(_2090, _2091, _2092));
    float _4216 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2090, _2091, _2092));
    float _4227 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2082 * _2082;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2119 = 1.0 - _2082;
    float _2129 = (0.5 / (((_2018 * ((_2096 * _2119) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2119) + _2082) * _2096))) * _2096;
    float _4238 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    float _2141 = (((_2118 * cbLight._m0[_2070].x) * _2131) * _1873) + ((((cbLight._m0[_1989].x * _1842) * _2042) * _2056) * _1886);
    float _2142 = (((_2118 * cbLight._m0[_2070].y) * _2131) * _1873) + ((((cbLight._m0[_1989].y * _1843) * _2042) * _2056) * _1886);
    float _2143 = (((_2118 * cbLight._m0[_2070].z) * _2131) * _1873) + ((((cbLight._m0[_1989].z * _1844) * _2042) * _2056) * _1886);
    float _2205;
    float _2207;
    float _2209;
    if (_1926)
    {
        _2205 = _2141;
        _2207 = _2142;
        _2209 = _2143;
    }
    else
    {
        uint _2211 = _1850 + 2u;
        uint _2215 = _1850 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _608) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _688;
        float _2232 = cbLight._m0[_2211].y + _689;
        float _2233 = cbLight._m0[_2211].z + _690;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2211].xyz));
        float _4249 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2245 = dot(vec3(_605, _606, _607), vec3(_2238, _2239, _2240));
        float _4260 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4271 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2267 = 1.0 - _2230;
        float _2277 = (0.5 / (((_2018 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2267) + _2230) * _2244))) * _2244;
        float _4282 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2205 = (((_2266 * cbLight._m0[_2215].x) * _2279) * _2280) + _2141;
        _2207 = (((_2266 * cbLight._m0[_2215].y) * _2279) * _2280) + _2142;
        _2209 = (((_2266 * cbLight._m0[_2215].z) * _2279) * _2280) + _2143;
    }
    float _2315;
    float _2317;
    float _2319;
    if (_1944)
    {
        _2315 = _2205;
        _2317 = _2207;
        _2319 = _2209;
    }
    else
    {
        uint _2326 = _1850 + 3u;
        uint _2330 = _1850 + 11u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _608) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _688;
        float _2347 = cbLight._m0[_2326].y + _689;
        float _2348 = cbLight._m0[_2326].z + _690;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2326].xyz));
        float _4298 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2360 = dot(vec3(_605, _606, _607), vec3(_2353, _2354, _2355));
        float _4309 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4320 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2382 = 1.0 - _2345;
        float _2392 = (0.5 / (((_2018 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2382) + _2345) * _2359))) * _2359;
        float _4331 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2315 = (((_2381 * cbLight._m0[_2330].x) * _2394) * _2395) + _2205;
        _2317 = (((_2381 * cbLight._m0[_2330].y) * _2394) * _2395) + _2207;
        _2319 = (((_2381 * cbLight._m0[_2330].z) * _2394) * _2395) + _2209;
    }
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_1848.y == 0u)
    {
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2470;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2470;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2470;
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _706) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _705) / _2486)));
        float _2507 = (log2(_2473 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
        }
        else
        {
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2787)
                {
                    frontier_phi_68_pred = _2771;
                    frontier_phi_68_pred_1 = _2776;
                    frontier_phi_68_pred_2 = _2775;
                    frontier_phi_68_pred_3 = _2774;
                    frontier_phi_68_pred_4 = _2773;
                    frontier_phi_68_pred_5 = _2772;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2786;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2777 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _2471;
                        float _2983 = _2942.y - _2472;
                        float _2984 = _2942.z - _2473;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_724, _727, _730), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4357 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _2471;
                        float _3018 = (-0.0) - _2472;
                        float _3019 = (-0.0) - _2473;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3034 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3035 = 1.0 - _784;
                        float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                        float _3043 = _3042 * _3042;
                        float _3044 = _3043 * _3043;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3055 = dot(vec3(_724, _727, _730), vec3(_3024, _3025, _3026));
                        float _4373 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3059 = dot(vec3(_724, _727, _730), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                        float _4384 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                        float _3067 = _3002 * _3043;
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _2992) + _3068;
                        float _4395 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3073 = 1.0 - _3043;
                        float _3083 = (0.5 / (((_3072 * ((_3058 * _3073) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3043) * _3058))) * _3072;
                        float _4406 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3094 = (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3066 * _3066) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2846 = (_3013 * _2961.x) + _2919;
                        _2847 = (_3013 * _2961.y) + _2920;
                        _2848 = (_3013 * _2961.z) + _2921;
                        _2843 = (_3094 * _2978.x) + _2916;
                        _2844 = (_3094 * _2978.y) + _2917;
                        _2845 = (_3094 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_68_pred = _2843;
                    frontier_phi_68_pred_1 = _2848;
                    frontier_phi_68_pred_2 = _2847;
                    frontier_phi_68_pred_3 = _2846;
                    frontier_phi_68_pred_4 = _2845;
                    frontier_phi_68_pred_5 = _2844;
                }
                _2619 = frontier_phi_68_pred;
                _2629 = frontier_phi_68_pred_1;
                _2627 = frontier_phi_68_pred_2;
                _2625 = frontier_phi_68_pred_3;
                _2623 = frontier_phi_68_pred_4;
                _2621 = frontier_phi_68_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2619;
                    _2772 = _2621;
                    _2773 = _2623;
                    _2774 = _2625;
                    _2775 = _2627;
                    _2776 = _2629;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
        }
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.z;
        uint _2635 = (_2633 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2635) & _2517) == 0u)
        {
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
            float _2765 = _2764 * _2471;
            float _2766 = _2764 * _2472;
            float _2767 = _2764 * _2473;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2635 < ((_2633 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2899 = _2618;
                float _2900 = _2620;
                float _2901 = _2622;
                float _2902 = _2624;
                float _2903 = _2626;
                float _2904 = _2628;
                uint _2905 = _2635;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2915)
                    {
                        frontier_phi_79_pred = _2904;
                        frontier_phi_79_pred_1 = _2903;
                        frontier_phi_79_pred_2 = _2902;
                        frontier_phi_79_pred_3 = _2901;
                        frontier_phi_79_pred_4 = _2900;
                        frontier_phi_79_pred_5 = _2899;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        uint _3127 = _2914;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3196;
                        vec4 _3212;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3138 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3183 = (_3138 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3138 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3138 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3138 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2473, _3246.z, fma(_2472, _3246.y, _3246.x * _2471)) + _3246.w;
                            _3259 = !((fma(_2473, _3227.z, fma(_2472, _3227.y, _3227.x * _2471)) + _3227.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3153.x - _2471;
                                float _3287 = _3153.y - _2472;
                                float _3288 = _3153.z - _2473;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3154 * _3154));
                                float _4417 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3304 = sqrt(_3289) * _3169.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_724, _727, _730))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2473, _3196.z, fma(_2472, _3196.y, _3196.x * _2471)) + _3196.w) / _3258;
                                float _3318 = (fma(_2473, _3212.z, fma(_2472, _3212.y, _3212.x * _2471)) + _3212.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4433 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _784;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2765;
                                float _3348 = _3294 - _2766;
                                float _3349 = _3295 - _2767;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_724, _727, _730), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4444 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3361 = dot(vec3(_724, _727, _730), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4455 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_724, _727, _730), vec3(_3293, _3294, _3295))) + _3370;
                                float _4466 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4477 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3324 * _3169.y;
                                frontier_phi_85_pred_1 = _3324 * _3169.x;
                                frontier_phi_85_pred_2 = _3398 * _3181.z;
                                frontier_phi_85_pred_3 = _3398 * _3181.y;
                                frontier_phi_85_pred_4 = _3398 * _3181.x;
                                frontier_phi_85_pred_5 = _3324 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_85_pred;
                            _3405 = frontier_phi_85_pred_1;
                            _3404 = frontier_phi_85_pred_2;
                            _3403 = frontier_phi_85_pred_3;
                            _3402 = frontier_phi_85_pred_4;
                            _3407 = frontier_phi_85_pred_5;
                            _3111 = _3405 + _3124;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3108 = _3402 + _3121;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3113;
                        frontier_phi_79_pred_1 = _3112;
                        frontier_phi_79_pred_2 = _3111;
                        frontier_phi_79_pred_3 = _3110;
                        frontier_phi_79_pred_4 = _3109;
                        frontier_phi_79_pred_5 = _3108;
                    }
                    _2750 = frontier_phi_79_pred;
                    _2748 = frontier_phi_79_pred_1;
                    _2746 = frontier_phi_79_pred_2;
                    _2744 = frontier_phi_79_pred_3;
                    _2742 = frontier_phi_79_pred_4;
                    _2740 = frontier_phi_79_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2740;
                        _2900 = _2742;
                        _2901 = _2744;
                        _2902 = _2746;
                        _2903 = _2748;
                        _2904 = _2750;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2744;
                frontier_phi_60_61_ladder_1 = _2750;
                frontier_phi_60_61_ladder_2 = _2748;
                frontier_phi_60_61_ladder_3 = _2746;
                frontier_phi_60_61_ladder_4 = _2742;
                frontier_phi_60_61_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_60_61_ladder = _2622;
                frontier_phi_60_61_ladder_1 = _2628;
                frontier_phi_60_61_ladder_2 = _2626;
                frontier_phi_60_61_ladder_3 = _2624;
                frontier_phi_60_61_ladder_4 = _2620;
                frontier_phi_60_61_ladder_5 = _2618;
            }
            _2739 = frontier_phi_60_61_ladder_5;
            _2741 = frontier_phi_60_61_ladder_4;
            _2743 = frontier_phi_60_61_ladder;
            _2745 = frontier_phi_60_61_ladder_3;
            _2747 = frontier_phi_60_61_ladder_2;
            _2749 = frontier_phi_60_61_ladder_1;
        }
        float _2754 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
        _2530 = (_2754 * _2745) + _1982;
        _2532 = (_2754 * _2747) + _1984;
        _2534 = (_2754 * _2749) + _1986;
        _2536 = ((_2739 * 0.039999999105930328369140625) * _2754) + _2315;
        _2538 = ((_2741 * 0.039999999105930328369140625) * _2754) + _2317;
        _2540 = ((_2743 * 0.039999999105930328369140625) * _2754) + _2319;
    }
    else
    {
        _2530 = _1982;
        _2532 = _1984;
        _2534 = _1986;
        _2536 = _2315;
        _2538 = _2317;
        _2540 = _2319;
    }
    float _4493 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4504 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4515 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _2557 = ((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2530 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _768))) + ((_2536 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1599)) * cbPerFrame._m0[3u].x);
    float _2558 = ((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2532 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _768))) + ((_2538 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1599)) * cbPerFrame._m0[3u].x);
    float _2559 = ((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2534 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _768))) + ((_2540 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1599)) * cbPerFrame._m0[3u].x);
    uint _2560 = _243 + 6u;
    float _2568 = _705 / cbSceneParam._m0[86u].x;
    float _2569 = _706 / cbSceneParam._m0[86u].y;
    vec4 _2583 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, (log2((isnan(cbSceneParam._m0[77u].w) ? _630 : (isnan(_630) ? cbSceneParam._m0[77u].w : min(_630, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2585 = _2583.x;
    float _2586 = _2583.y;
    float _2587 = _2583.z;
    float _2588 = _2583.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_630 > cbSceneParam._m0[78u].w)
    {
        float _2643 = isnan(_630) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _630 : min(cbSceneParam._m0[80u].w, _630));
        float _2644 = _2643 / _630;
        float _2655 = _2644 * _681;
        float _2656 = _682 * _2644;
        float _2657 = (-0.0) - _2656;
        float _2659 = _2644 * _683;
        float _2661 = (cbSceneParam._m0[77u].w * _2657) / _2643;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2656;
        float _2669 = sqrt(((_2655 * _2655) + (_2656 * _2656)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2643)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2657 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2802 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2856 = ((abs(_2669 / _2657) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2679 * _2811) - exp2(_2679 * _2812)) * _2800))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2588);
        _2681 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2585;
        _2683 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2586;
        _2685 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2587;
        _2687 = _2867 * _2588;
    }
    else
    {
        _2681 = _2585;
        _2683 = _2586;
        _2685 = _2587;
        _2687 = _2588;
    }
    bool _2894;
    vec4 _2697;
    vec4 _2719;
    float _2721;
    float _2725;
    float _2726;
    float _2727;
    float _2728;
    bool _2738;
    for (;;)
    {
        _2697 = cbMatDynParam._m0[0u];
        float _2699 = roundEven(_2697.y);
        bool _2700 = _2699 == 3.0;
        float _2701 = log2(_2687);
        float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * _2557;
        float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * _2558;
        float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * _2559;
        float _2717 = _694 + (-0.5);
        _2719 = cbMtdParam._m0[1u];
        _2721 = _2719.y * _2717;
        float _2724 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2725 = _2724 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
        _2726 = _2724 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
        _2727 = _2724 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
        _2728 = _2717 * 0.999000012874603271484375;
        _2738 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2738)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2728) < 0.5)
            {
                _2894 = true;
                break;
            }
        }
        uint _2835 = _743 + uint(_2697.w);
        if ((cbInstanceData._m0[_2835].w < 1.0) && ((cbInstanceData._m0[_2835].w + _2728) < 0.5))
        {
            _2894 = true;
            break;
        }
        if ((_2721 + 1.0) < _2719.x)
        {
            _2894 = true;
            break;
        }
        _2894 = false;
        break;
    }
    float _3099;
    if (_2894)
    {
        discard_state = true;
        _3099 = 0.0;
    }
    else
    {
        _3099 = cbInstanceData._m0[_2560].w;
    }
    SV_Target.x = _2725;
    SV_Target.y = _2726;
    SV_Target.z = _2727;
    SV_Target.w = _3099;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2560].w;
    discard_exit();
}


