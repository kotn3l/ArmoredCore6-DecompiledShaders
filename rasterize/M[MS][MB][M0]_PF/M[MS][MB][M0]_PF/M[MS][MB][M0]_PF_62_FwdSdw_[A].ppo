#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1081;
float _3724;
float _3725;
float _3726;
float _3727;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _355 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _372 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _355) * cbMtdParam._m0[24u].x) + _355) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3736 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _380 = (_373 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _381 = (_373 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _382 = (_373 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _441 = _437.z;
    float _450 = ((_420.z - _441) * _373) + _441;
    float _453 = ((((_420.x - _439) * _373) + _439) * 2.0) + (-1.0);
    float _454 = ((((_420.y - _440) * _373) + _440) * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3747 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    float _465 = _453 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_395.x * 2.0) + (-1.0)));
    float _466 = _454 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_395.y * 2.0) + (-1.0)));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _486 = (((_395.z - _450) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _450;
    float _491 = cbMtdParam._m0[22u].x + _479.w;
    float _495 = gl_FragCoord.x * 0.125;
    float _497 = gl_FragCoord.y * 0.125;
    float _508 = fma(_460, _223 * NORMAL.x, fma(_466, _230 * TANGENT.x, (_216 * _208) * _465));
    float _511 = fma(_460, _223 * NORMAL.y, fma(_466, _230 * TANGENT.y, (_216 * _209) * _465));
    float _514 = fma(_460, _223 * NORMAL.z, fma(_466, _230 * TANGENT.z, (_216 * _210) * _465));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3758 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _522 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3780 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3791 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3802 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_495, _497)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _544 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _596 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _586);
    float _597 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _586);
    float _598 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _586);
    float _602 = inversesqrt(dot(vec3(_596, _597, _598), vec3(_596, _597, _598)));
    float _603 = _596 * _602;
    float _604 = _597 * _602;
    float _605 = _598 * _602;
    vec4 _607 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_495, _497));
    float _609 = _607.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _763 = sqrt(((_596 * _596) + (_597 * _597)) + (_598 * _598));
        float _769 = (cbMatDynParam._m0[5u].x * _763) + cbMatDynParam._m0[5u].y;
        float _3813 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _774 = (cbMatDynParam._m0[5u].z * _763) + cbMatDynParam._m0[5u].w;
        float _3824 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) - _770)) + _770) < ((_609 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _620 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _621 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _642 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _645 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _658 = _236 + 9u;
    uint _659 = _658 + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3835 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _620, cbSceneParam._m0[86u].y * _621));
    float _683 = ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * TEXCOORD_5.w) * _679.x;
    float _684 = dot(vec3(_519, _520, _521), vec3(_603, _604, _605));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _519) - _603;
    float _692 = (_687 * _520) - _604;
    float _693 = (_687 * _521) - _605;
    float _697 = abs(dot(vec3(_603, _604, _605), vec3(_519, _520, _521)));
    float _3868 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_522);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1080;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _809 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _813 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _838 = _744 + _519;
        float _839 = _748 + _520;
        float _840 = _752 + _521;
        float _850 = fma(_840, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838)) - _805;
        float _851 = fma(_840, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838)) - _809;
        float _852 = fma(_840, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838)) - _813;
        float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
        float _869 = ((_856 * _850) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_805 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_856 * _851) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_809 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_856 * _852) / cbModelParam._m0[34u].z) + ((((((_813 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        float _908 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_874.x + (-0.5));
        float _910 = _908 * (_874.y + (-0.5));
        float _911 = _908 * (_874.z + (-0.5));
        float _918 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_881.x + (-0.5));
        float _920 = _918 * (_881.y + (-0.5));
        float _921 = _918 * (_881.z + (-0.5));
        float _928 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_888.x + (-0.5));
        float _930 = _928 * (_888.y + (-0.5));
        float _931 = _928 * (_888.z + (-0.5));
        float _938 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_895.x + (-0.5));
        float _940 = _938 * (_895.y + (-0.5));
        float _941 = _938 * (_895.z + (-0.5));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = _909 * 0.5;
        float _946 = _919 * 0.5;
        float _947 = _929 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _962 = (dot(vec3(_519, _520, _521), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _972 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3916 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_974 + 1.0))) + _979) * _942;
        float _989 = _910 * 0.5;
        float _990 = _920 * 0.5;
        float _991 = _930 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_519, _520, _521), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3949 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1016 + 1.0))) + _1021) * _943;
        float _1031 = _911 * 0.5;
        float _1032 = _921 * 0.5;
        float _1033 = _931 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_519, _520, _521), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3982 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1058 + 1.0))) + _1063) * _944;
        _1080 = _911;
        _1082 = _910;
        _1083 = _909;
        _1084 = _921;
        _1085 = _920;
        _1086 = _919;
        _1087 = _931;
        _1088 = _930;
        _1089 = _929;
        _1090 = _944;
        _1091 = _943;
        _1092 = _942;
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _1081;
        _1082 = _1081;
        _1083 = _1081;
        _1084 = _1081;
        _1085 = _1081;
        _1086 = _1081;
        _1087 = _1081;
        _1088 = _1081;
        _1089 = _1081;
        _1090 = _1081;
        _1091 = _1081;
        _1092 = _1081;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1119 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1123 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1127 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1150 = _744 + _519;
        float _1151 = _748 + _520;
        float _1152 = _752 + _521;
        float _1162 = fma(_1152, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150)) - _1119;
        float _1163 = fma(_1152, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150)) - _1123;
        float _1164 = fma(_1152, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150)) - _1127;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1119 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1123 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[35u].z) + ((((((_1127 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1218 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1185.x + (-0.5));
        float _1220 = _1218 * (_1185.y + (-0.5));
        float _1221 = _1218 * (_1185.z + (-0.5));
        float _1228 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1192.x + (-0.5));
        float _1230 = _1228 * (_1192.y + (-0.5));
        float _1231 = _1228 * (_1192.z + (-0.5));
        float _1238 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1199.x + (-0.5));
        float _1240 = _1238 * (_1199.y + (-0.5));
        float _1241 = _1238 * (_1199.z + (-0.5));
        float _1248 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1206.x + (-0.5));
        float _1250 = _1248 * (_1206.y + (-0.5));
        float _1251 = _1248 * (_1206.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_519, _520, _521), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4045 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1282 + 1.0))) + _1287) * _1252;
        float _1297 = _1220 * 0.5;
        float _1298 = _1230 * 0.5;
        float _1299 = _1240 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_519, _520, _521), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4078 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1324 + 1.0))) + _1329) * _1253;
        float _1339 = _1221 * 0.5;
        float _1340 = _1231 * 0.5;
        float _1341 = _1241 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_519, _520, _521), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4111 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1366 + 1.0))) + _1371) * _1254;
        _1388 = _1221;
        _1389 = _1220;
        _1390 = _1219;
        _1391 = _1231;
        _1392 = _1230;
        _1393 = _1229;
        _1394 = _1241;
        _1395 = _1240;
        _1396 = _1239;
        _1397 = _1254;
        _1398 = _1253;
        _1399 = _1252;
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1081;
        _1389 = _1081;
        _1390 = _1081;
        _1391 = _1081;
        _1392 = _1081;
        _1393 = _1081;
        _1394 = _1081;
        _1395 = _1081;
        _1396 = _1081;
        _1397 = _1081;
        _1398 = _1081;
        _1399 = _1081;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1093)) + _1093;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1094)) + _1094;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1095)) + _1095;
    float _1435 = fma(_1414, cbSceneParam._m0[89u].z, fma(_1413, cbSceneParam._m0[89u].y, _1412 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1414, cbSceneParam._m0[90u].z, fma(_1413, cbSceneParam._m0[90u].y, _1412 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1414, cbSceneParam._m0[91u].z, fma(_1413, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1412));
    float _1456 = _691 * 0.5;
    float _1457 = _692 * 0.5;
    float _1458 = _693 * 0.5;
    float _1459 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1462 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1465 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1499;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1472 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1080, _1084, _1087, _1090));
        float _1476 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1480 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1487 = dot(vec4(cbModelParam._m0[39u]), vec4(_1456, _1457, _1458, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1510;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1501 = dot(vec4(cbModelParam._m0[40u]), vec4(_1456, _1457, _1458, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1514 = (_1510 * cbModelParam._m0[1u].x) + (_1499 * (1.0 - cbModelParam._m0[1u].x));
    float _1524 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1524 : min(cbModelParam._m0[25u].z, _1524));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1588 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1591 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1619 = frontier_phi_19_17_ladder;
        }
        float _1790;
        if (_1588 > 0.0)
        {
            _1790 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1790 = frontier_phi_28_24_ladder;
        }
        float _2085;
        if (_1591 > 0.0)
        {
            _2085 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2085 = frontier_phi_40_35_ladder;
        }
        float _2087 = isnan(_1790) ? _1619 : (isnan(_1619) ? _1790 : min(_1619, _1790));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1585) + _1574;
        float _2093 = (_2088 * _1588) + _1578;
        float _2094 = (_2088 * _1591) + _1582;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2095;
        float _2099 = _2095 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 > _2099) || ((_2093 < _2097) || ((_2092 < _2097) || (_2092 > _2099))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2094, cbModelParam._m0[9u].z, fma(_2093, cbModelParam._m0[9u].y, _2092 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2094, cbModelParam._m0[10u].z, fma(_2093, cbModelParam._m0[10u].y, _2092 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2094, cbModelParam._m0[11u].z, fma(_2093, cbModelParam._m0[11u].y, _2092 * cbModelParam._m0[11u].x))), _1525);
            frontier_phi_18_40_ladder = _2239.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2239.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2239.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_18_40_ladder_2;
        _1609 = frontier_phi_18_40_ladder_1;
        _1611 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1525);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1671 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1675 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1679 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1682 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1685 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1688 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1795;
        if (_1682 > 0.0)
        {
            _1795 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1795 = frontier_phi_30_26_ladder;
        }
        float _2112;
        if (_1685 > 0.0)
        {
            _2112 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2112 = frontier_phi_42_37_ladder;
        }
        float _2439;
        if (_1688 > 0.0)
        {
            _2439 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2439 = frontier_phi_52_49_ladder;
        }
        float _2441 = isnan(_2112) ? _1795 : (isnan(_1795) ? _2112 : min(_1795, _2112));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1682) + _1671;
        float _2447 = (_2442 * _1685) + _1675;
        float _2448 = (_2442 * _1688) + _1679;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_27_52_ladder = _2566.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2566.x * cbModelParam._m0[1u].z;
        }
        _1707 = frontier_phi_27_52_ladder_2;
        _1709 = frontier_phi_27_52_ladder_1;
        _1711 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1616);
        _1707 = _1691.x * cbModelParam._m0[1u].z;
        _1709 = _1691.y * cbModelParam._m0[1u].z;
        _1711 = _1691.z * cbModelParam._m0[1u].z;
    }
    float _1723 = ((((1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_712 * _699)) * _683;
    float _1724 = _1723 * ((cbModelParam._m0[1u].w * (_1707 - _1607)) + _1607);
    float _1725 = _1723 * ((cbModelParam._m0[1u].w * (_1709 - _1609)) + _1609);
    float _1726 = _1723 * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1729 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, _1724 * cbSceneParam._m0[91u].x));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1781 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1782 = _1769 / _1781;
    float _1783 = _1773 / _1781;
    float _1784 = _1777 / _1781;
    float _1931;
    float _1932;
    float _1933;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1811 = ((uint(_1784 > cbSceneParam._m0[59u].y) + uint(_1784 > cbSceneParam._m0[59u].x)) + uint(_1784 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1812 = _1811 + 43u;
        uint _1820 = _1811 + 44u;
        uint _1828 = _1811 + 45u;
        uint _1836 = _1811 + 46u;
        float _1847 = fma(_1781, cbSceneParam._m0[_1812].w, fma(_1777, cbSceneParam._m0[_1812].z, fma(_1773, cbSceneParam._m0[_1812].y, _1769 * cbSceneParam._m0[_1812].x)));
        float _1851 = fma(_1781, cbSceneParam._m0[_1820].w, fma(_1777, cbSceneParam._m0[_1820].z, fma(_1773, cbSceneParam._m0[_1820].y, _1769 * cbSceneParam._m0[_1820].x)));
        float _1859 = fma(_1781, cbSceneParam._m0[_1836].w, fma(_1777, cbSceneParam._m0[_1836].z, fma(_1773, cbSceneParam._m0[_1836].y, _1769 * cbSceneParam._m0[_1836].x)));
        float _1864 = cbSceneParam._m0[33u].z * _1859;
        float _1866 = cbSceneParam._m0[33u].w * _1859;
        float _1869 = fma(_1781, cbSceneParam._m0[_1828].w, fma(_1777, cbSceneParam._m0[_1828].z, fma(_1773, cbSceneParam._m0[_1828].y, _1769 * cbSceneParam._m0[_1828].x))) / _1859;
        float _1917 = (cbSceneParam._m0[33u].x - sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784))) * cbSceneParam._m0[33u].y;
        float _4237 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1924 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 + _1847) / _1859, (_1866 + _1851) / _1859), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 + _1847) / _1859, (_1851 - _1864) / _1859), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 - _1864) / _1859, (_1851 - _1866) / _1859), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 - _1866) / _1859, (_1864 + _1851) / _1859), _1869), 0.0)).x), vec4(0.25)));
        _1931 = 1.0 - (_1924 * cbSceneParam._m0[34u].x);
        _1932 = 1.0 - (_1924 * cbSceneParam._m0[34u].y);
        _1933 = 1.0 - (_1924 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1931 = 1.0;
        _1932 = 1.0;
        _1933 = 1.0;
    }
    float _1997;
    float _1999;
    float _2001;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1985 = fma(_1781, cbSceneParam._m0[63u].w, fma(_1777, cbSceneParam._m0[63u].z, fma(_1773, cbSceneParam._m0[63u].y, _1769 * cbSceneParam._m0[63u].x)));
        float _1986 = fma(_1781, cbSceneParam._m0[60u].w, fma(_1777, cbSceneParam._m0[60u].z, fma(_1773, cbSceneParam._m0[60u].y, _1769 * cbSceneParam._m0[60u].x))) / _1985;
        float _1987 = fma(_1781, cbSceneParam._m0[61u].w, fma(_1777, cbSceneParam._m0[61u].z, fma(_1773, cbSceneParam._m0[61u].y, _1769 * cbSceneParam._m0[61u].x))) / _1985;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1986 >= cbSceneParam._m0[64u].x) && (_1987 >= cbSceneParam._m0[64u].y)) && (_1986 <= cbSceneParam._m0[64u].z)) && (_1987 <= cbSceneParam._m0[64u].w))
        {
            float _2125 = fma(_1781, cbSceneParam._m0[62u].w, fma(_1777, cbSceneParam._m0[62u].z, fma(_1773, cbSceneParam._m0[62u].y, _1769 * cbSceneParam._m0[62u].x))) / _1985;
            float _2129 = isnan(cbSceneParam._m0[41u].w) ? _2125 : (isnan(_2125) ? cbSceneParam._m0[41u].w : max(_2125, cbSceneParam._m0[41u].w));
            float _2172 = (cbSceneParam._m0[33u].x - sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784))) * cbSceneParam._m0[33u].y;
            float _4253 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
            float _2179 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1986, cbSceneParam._m0[33u].w + _1987), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1986, _1987 - cbSceneParam._m0[33u].z), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1986 - cbSceneParam._m0[33u].z, _1987 - cbSceneParam._m0[33u].w), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1986 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1987), _2129), 0.0)).x), vec4(0.25)));
            float _2183 = 1.0 - (_2179 * cbSceneParam._m0[34u].x);
            float _2184 = 1.0 - (_2179 * cbSceneParam._m0[34u].y);
            float _2185 = 1.0 - (_2179 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2185) ? _1933 : (isnan(_1933) ? _2185 : min(_1933, _2185));
            frontier_phi_39_38_ladder_1 = isnan(_2184) ? _1932 : (isnan(_1932) ? _2184 : min(_1932, _2184));
            frontier_phi_39_38_ladder_2 = isnan(_2183) ? _1931 : (isnan(_1931) ? _2183 : min(_1931, _2183));
        }
        else
        {
            frontier_phi_39_38_ladder = _1933;
            frontier_phi_39_38_ladder_1 = _1932;
            frontier_phi_39_38_ladder_2 = _1931;
        }
        _1997 = frontier_phi_39_38_ladder_2;
        _1999 = frontier_phi_39_38_ladder_1;
        _2001 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1997 = _1931;
        _1999 = _1932;
        _2001 = _1933;
    }
    uvec4 _2006 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2008 = _2006.x * 14u;
    uint _2009 = _2008 + 13u;
    float _2016 = _683 + (-1.0);
    float _2021 = (cbLight._m0[_2009].x * _2016) + 1.0;
    float _2022 = (cbLight._m0[_2009].y * _2016) + 1.0;
    float _2023 = (cbLight._m0[_2009].z * _2016) + 1.0;
    float _2024 = (cbLight._m0[_2009].w * _2016) + 1.0;
    uint _2025 = _2008 + 5u;
    float _2031 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2035 = _2008 + 4u;
    float _2044 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2048 = _2008 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_519, _520, _521));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_519, _520, _521));
    float _4289 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _4300 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2025].x * _2031) * _2069) + (((cbLight._m0[_2035].x * _1997) * _2044) * _2067);
    float _2077 = ((_2031 * cbLight._m0[_2025].y) * _2069) + (((cbLight._m0[_2035].y * _1999) * _2044) * _2067);
    float _2078 = ((_2031 * cbLight._m0[_2025].z) * _2069) + (((cbLight._m0[_2035].z * _2001) * _2044) * _2067);
    uvec4 _2082 = floatBitsToUint(cbLight._m0[_2008 + 12u]);
    bool _2084 = _2082.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2084)
    {
        _2186 = _2076;
        _2188 = _2077;
        _2190 = _2078;
    }
    else
    {
        uint _2194 = _2008 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2008 + 2u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4311 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2213 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2076;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2077;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2078;
    }
    bool _2193 = _2082.y == 0u;
    float _2248;
    float _2250;
    float _2252;
    if (_2193)
    {
        _2248 = _2186;
        _2250 = _2188;
        _2252 = _2190;
    }
    else
    {
        uint _2410 = _2008 + 7u;
        float _2426 = (dot(vec3(cbLight._m0[_2008 + 3u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2427 = _2426 * _2426;
        float _4327 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2428 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2429 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2248 = (((cbLight._m0[_2410].x * 0.3183098733425140380859375) * _2428) * _2429) + _2186;
        _2250 = (((cbLight._m0[_2410].y * 0.3183098733425140380859375) * _2428) * _2429) + _2188;
        _2252 = (((cbLight._m0[_2410].z * 0.3183098733425140380859375) * _2428) * _2429) + _2190;
    }
    uint _2255 = _2008 + 8u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _522) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2008].x + _603;
    float _2271 = cbLight._m0[_2008].y + _604;
    float _2272 = cbLight._m0[_2008].z + _605;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2008].xyz));
    float _4343 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2284 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2285 = dot(vec3(_519, _520, _521), vec3(_2277, _2278, _2279));
    float _4365 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2277, _2278, _2279));
    float _4376 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2269 * _2269;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2309 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2284 * ((_2283 * _2309) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2309) + _2269) * _2283))) * _2283;
    float _4387 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    uint _2336 = _2008 + 9u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _522) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2048].x + _603;
    float _2350 = cbLight._m0[_2048].y + _604;
    float _2351 = cbLight._m0[_2048].z + _605;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2048].xyz));
    float _4398 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2363 = dot(vec3(_519, _520, _521), vec3(_2356, _2357, _2358));
    float _4409 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2367 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2356, _2357, _2358));
    float _4420 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = _2348 * _2348;
    float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
    float _2384 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2385 = 1.0 - _2348;
    float _2395 = (0.5 / (((_2284 * ((_2362 * _2385) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2385) + _2348) * _2362))) * _2362;
    float _4431 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
    float _2407 = (((_2384 * cbLight._m0[_2336].x) * _2397) * _2031) + ((((cbLight._m0[_2255].x * _1997) * _2308) * _2322) * _2044);
    float _2408 = (((_2384 * cbLight._m0[_2336].y) * _2397) * _2031) + ((((cbLight._m0[_2255].y * _1999) * _2308) * _2322) * _2044);
    float _2409 = (((_2384 * cbLight._m0[_2336].z) * _2397) * _2031) + ((((cbLight._m0[_2255].z * _2001) * _2308) * _2322) * _2044);
    float _2465;
    float _2467;
    float _2469;
    if (_2084)
    {
        _2465 = _2407;
        _2467 = _2408;
        _2469 = _2409;
    }
    else
    {
        uint _2471 = _2008 + 2u;
        uint _2475 = _2008 + 10u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _522) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _603;
        float _2492 = cbLight._m0[_2471].y + _604;
        float _2493 = cbLight._m0[_2471].z + _605;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2471].xyz));
        float _4442 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2505 = dot(vec3(_519, _520, _521), vec3(_2498, _2499, _2500));
        float _4453 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4464 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2526 = (exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2527 = 1.0 - _2490;
        float _2537 = (0.5 / (((_2284 * ((_2504 * _2527) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2527) + _2490) * _2504))) * _2504;
        float _4475 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2539 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2540 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2465 = (((_2526 * cbLight._m0[_2475].x) * _2539) * _2540) + _2407;
        _2467 = (((_2526 * cbLight._m0[_2475].y) * _2539) * _2540) + _2408;
        _2469 = (((_2526 * cbLight._m0[_2475].z) * _2539) * _2540) + _2409;
    }
    float _2571;
    float _2573;
    float _2575;
    if (_2193)
    {
        _2571 = _2465;
        _2573 = _2467;
        _2575 = _2469;
    }
    else
    {
        uint _2582 = _2008 + 3u;
        uint _2586 = _2008 + 11u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _522) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _603;
        float _2603 = cbLight._m0[_2582].y + _604;
        float _2604 = cbLight._m0[_2582].z + _605;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2582].xyz));
        float _4491 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2616 = dot(vec3(_519, _520, _521), vec3(_2609, _2610, _2611));
        float _4502 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4513 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2637 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2638 = 1.0 - _2601;
        float _2648 = (0.5 / (((_2284 * ((_2615 * _2638) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2638) + _2601) * _2615))) * _2615;
        float _4524 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2571 = (((_2637 * cbLight._m0[_2586].x) * _2650) * _2651) + _2465;
        _2573 = (((_2637 * cbLight._m0[_2586].y) * _2650) * _2651) + _2467;
        _2575 = (((_2637 * cbLight._m0[_2586].z) * _2650) * _2651) + _2469;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_2006.y == 0u)
    {
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _621) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _620) / _2673)));
        float _2694 = (log2(_1784 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
        }
        else
        {
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            uint _2943 = 0u;
            uint _2952;
            bool _2953;
            for (;;)
            {
                _2952 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                _2953 = _2952 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2953)
                {
                    frontier_phi_73_pred = _2942;
                    frontier_phi_73_pred_1 = _2941;
                    frontier_phi_73_pred_2 = _2940;
                    frontier_phi_73_pred_3 = _2939;
                    frontier_phi_73_pred_4 = _2938;
                    frontier_phi_73_pred_5 = _2937;
                }
                else
                {
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    uint _3088;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2952;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    for (;;)
                    {
                        uint _3092 = uint(findLSB(_3088)) + (_2943 << 5u);
                        uint _3089 = (_3088 + 4294967295u) & _3088;
                        uint _3094 = _3092 * 48u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3114 = (_3092 * 48u) + 4u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 3u)).x));
                        uint _3133 = (_3092 * 48u) + 8u;
                        vec3 _3144 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x));
                        float _3148 = _3108.x - _1782;
                        float _3149 = _3108.y - _1783;
                        float _3150 = _3108.z - _1784;
                        float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                        float _3154 = inversesqrt(_3151);
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3158 = dot(vec3(_639, _642, _645), vec3(_3155, _3156, _3157));
                        float _3163 = 1.0 - (_3151 * _3108.w);
                        float _4550 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3165 = sqrt(_3151) * _3127.w;
                        float _3168 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3158) + _3169;
                        float _3175 = _3165 * _3165;
                        float _3179 = ((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3164) / ((_3175 * 0.699999988079071044921875) + 1.0);
                        float _3183 = (-0.0) - _1782;
                        float _3184 = (-0.0) - _1783;
                        float _3185 = (-0.0) - _1784;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3199 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                        float _3200 = 1.0 - _699;
                        float _3207 = sqrt(1.0 - ((1.0 - (_3200 * _3200)) * (1.0 - (_3199 * _3199))));
                        float _3208 = _3207 * _3207;
                        float _3209 = _3208 * _3208;
                        float _3210 = _3190 + _3155;
                        float _3211 = _3191 + _3156;
                        float _3212 = _3192 + _3157;
                        float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                        float _3220 = dot(vec3(_639, _642, _645), vec3(_3190, _3191, _3192));
                        float _4566 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3224 = dot(vec3(_639, _642, _645), vec3(_3216 * _3210, _3216 * _3211, _3216 * _3212));
                        float _4577 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3231 = ((_3227 * _3227) * (_3209 + (-1.0))) + 1.0;
                        float _3232 = _3168 * _3208;
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3158) + _3233;
                        float _4588 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3238 = 1.0 - _3208;
                        float _3248 = (0.5 / (((_3237 * ((_3223 * _3238) + _3208)) + 9.9999999392252902907785028219223e-09) + (((_3237 * _3238) + _3208) * _3223))) * _3237;
                        float _4599 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3259 = (((_3209 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3231 * _3231) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125))) * _3164;
                        _3012 = (_3179 * _3127.x) + _3085;
                        _3013 = (_3179 * _3127.y) + _3086;
                        _3014 = (_3179 * _3127.z) + _3087;
                        _3009 = (_3259 * _3144.x) + _3082;
                        _3010 = (_3259 * _3144.y) + _3083;
                        _3011 = (_3259 * _3144.z) + _3084;
                        if (_3089 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3089;
                        }
                    }
                    frontier_phi_73_pred = _3014;
                    frontier_phi_73_pred_1 = _3013;
                    frontier_phi_73_pred_2 = _3012;
                    frontier_phi_73_pred_3 = _3011;
                    frontier_phi_73_pred_4 = _3010;
                    frontier_phi_73_pred_5 = _3009;
                }
                _2795 = frontier_phi_73_pred;
                _2793 = frontier_phi_73_pred_1;
                _2791 = frontier_phi_73_pred_2;
                _2789 = frontier_phi_73_pred_3;
                _2787 = frontier_phi_73_pred_4;
                _2785 = frontier_phi_73_pred_5;
                uint _2944 = _2943 + 1u;
                if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2937 = _2785;
                    _2938 = _2787;
                    _2939 = _2789;
                    _2940 = _2791;
                    _2941 = _2793;
                    _2942 = _2795;
                    _2943 = _2944;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
        }
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.z;
        uint _2801 = (_2799 >> 8u) & 15u;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((4294967295u << _2801) & _2704) == 0u)
        {
            _2905 = _2784;
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
        }
        else
        {
            float _2930 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
            float _2931 = _2930 * _1782;
            float _2932 = _2930 * _1783;
            float _2933 = _2930 * _1784;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2801 < ((_2799 >> 12u) & 15u))
            {
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _3065 = _2784;
                float _3066 = _2786;
                float _3067 = _2788;
                float _3068 = _2790;
                float _3069 = _2792;
                float _3070 = _2794;
                uint _3071 = _2801;
                uint _3080;
                bool _3081;
                for (;;)
                {
                    _3080 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                    _3081 = _3080 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3081)
                    {
                        frontier_phi_84_pred = _3070;
                        frontier_phi_84_pred_1 = _3069;
                        frontier_phi_84_pred_2 = _3068;
                        frontier_phi_84_pred_3 = _3067;
                        frontier_phi_84_pred_4 = _3066;
                        frontier_phi_84_pred_5 = _3065;
                    }
                    else
                    {
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3286 = _3065;
                        float _3287 = _3066;
                        float _3288 = _3067;
                        float _3289 = _3068;
                        float _3290 = _3069;
                        float _3291 = _3070;
                        uint _3292 = _3080;
                        uint _3293;
                        vec4 _3318;
                        float _3319;
                        vec4 _3334;
                        vec3 _3346;
                        vec4 _3361;
                        vec4 _3376;
                        float _3422;
                        bool _3423;
                        for (;;)
                        {
                            uint _3303 = ((_3071 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3292));
                            _3293 = (_3292 + 4294967295u) & _3292;
                            uint _3305 = _3303 * 40u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            _3319 = _3318.w;
                            uint _3321 = (_3303 * 40u) + 4u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3303 * 40u) + 8u;
                            _3346 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x));
                            uint _3348 = (_3303 * 40u) + 16u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3303 * 40u) + 20u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3303 * 40u) + 24u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3397 = (_3303 * 40u) + 28u;
                            vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3422 = fma(_1784, _3410.z, fma(_1783, _3410.y, _3410.x * _1782)) + _3410.w;
                            _3423 = !((fma(_1784, _3391.z, fma(_1783, _3391.y, _3391.x * _1782)) + _3391.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3423)
                            {
                                float _3450 = _3318.x - _1782;
                                float _3451 = _3318.y - _1783;
                                float _3452 = _3318.z - _1784;
                                float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                                float _3456 = inversesqrt(_3453);
                                float _3457 = _3456 * _3450;
                                float _3458 = _3456 * _3451;
                                float _3459 = _3456 * _3452;
                                float _3463 = 1.0 - (_3453 / (_3319 * _3319));
                                float _4610 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3468 = sqrt(_3453) * _3334.w;
                                float _3470 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                                float _3471 = _3470 * _3470;
                                float _3474 = ((1.0 - _3471) * dot(vec3(_3457, _3458, _3459), vec3(_639, _642, _645))) + _3471;
                                float _3477 = _3468 * _3468;
                                float _3481 = (fma(_1784, _3361.z, fma(_1783, _3361.y, _3361.x * _1782)) + _3361.w) / _3422;
                                float _3482 = (fma(_1784, _3376.z, fma(_1783, _3376.y, _3376.x * _1782)) + _3376.w) / _3422;
                                float _3486 = 1.0 - dot(vec2(_3481, _3482), vec2(_3481, _3482));
                                float _4626 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3488 = _3487 * (((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3464) / ((_3477 * 0.699999988079071044921875) + 1.0));
                                float _3500 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                                float _3501 = 1.0 - _699;
                                float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                                float _3509 = _3508 * _3508;
                                float _3510 = _3509 * _3509;
                                float _3511 = _3457 - _2931;
                                float _3512 = _3458 - _2932;
                                float _3513 = _3459 - _2933;
                                float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                                float _3521 = dot(vec3(_639, _642, _645), vec3((-0.0) - _2931, (-0.0) - _2932, (-0.0) - _2933));
                                float _4637 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3525 = dot(vec3(_639, _642, _645), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                                float _4648 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                                float _3533 = _3470 * _3509;
                                float _3534 = _3533 * _3533;
                                float _3540 = ((1.0 - _3534) * dot(vec3(_639, _642, _645), vec3(_3457, _3458, _3459))) + _3534;
                                float _4659 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3542 = 1.0 - _3509;
                                float _3552 = (0.5 / (((_3541 * ((_3524 * _3542) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3509) * _3524))) * _3541;
                                float _4670 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3562 = (_3487 * _3464) * (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3532 * _3532) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3488 * _3334.z;
                                frontier_phi_90_pred_1 = _3488 * _3334.y;
                                frontier_phi_90_pred_2 = _3488 * _3334.x;
                                frontier_phi_90_pred_3 = _3562 * _3346.z;
                                frontier_phi_90_pred_4 = _3562 * _3346.y;
                                frontier_phi_90_pred_5 = _3562 * _3346.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3571 = frontier_phi_90_pred;
                            _3570 = frontier_phi_90_pred_1;
                            _3569 = frontier_phi_90_pred_2;
                            _3568 = frontier_phi_90_pred_3;
                            _3567 = frontier_phi_90_pred_4;
                            _3566 = frontier_phi_90_pred_5;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3275 = _3568 + _3288;
                            if (_3293 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3293;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3278;
                        frontier_phi_84_pred_1 = _3277;
                        frontier_phi_84_pred_2 = _3276;
                        frontier_phi_84_pred_3 = _3275;
                        frontier_phi_84_pred_4 = _3274;
                        frontier_phi_84_pred_5 = _3273;
                    }
                    _2916 = frontier_phi_84_pred;
                    _2914 = frontier_phi_84_pred_1;
                    _2912 = frontier_phi_84_pred_2;
                    _2910 = frontier_phi_84_pred_3;
                    _2908 = frontier_phi_84_pred_4;
                    _2906 = frontier_phi_84_pred_5;
                    uint _3072 = _3071 + 1u;
                    if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3065 = _2906;
                        _3066 = _2908;
                        _3067 = _2910;
                        _3068 = _2912;
                        _3069 = _2914;
                        _3070 = _2916;
                        _3071 = _3072;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2912;
                frontier_phi_65_66_ladder_1 = _2916;
                frontier_phi_65_66_ladder_2 = _2914;
                frontier_phi_65_66_ladder_3 = _2910;
                frontier_phi_65_66_ladder_4 = _2908;
                frontier_phi_65_66_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_65_66_ladder = _2790;
                frontier_phi_65_66_ladder_1 = _2794;
                frontier_phi_65_66_ladder_2 = _2792;
                frontier_phi_65_66_ladder_3 = _2788;
                frontier_phi_65_66_ladder_4 = _2786;
                frontier_phi_65_66_ladder_5 = _2784;
            }
            _2905 = frontier_phi_65_66_ladder_5;
            _2907 = frontier_phi_65_66_ladder_4;
            _2909 = frontier_phi_65_66_ladder_3;
            _2911 = frontier_phi_65_66_ladder;
            _2913 = frontier_phi_65_66_ladder_2;
            _2915 = frontier_phi_65_66_ladder_1;
        }
        float _2920 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2717 = (_2920 * _2911) + _2248;
        _2719 = (_2920 * _2913) + _2250;
        _2721 = (_2920 * _2915) + _2252;
        _2723 = ((_2905 * 0.039999999105930328369140625) * _2920) + _2571;
        _2725 = ((_2907 * 0.039999999105930328369140625) * _2920) + _2573;
        _2727 = ((_2909 * 0.039999999105930328369140625) * _2920) + _2575;
    }
    else
    {
        _2717 = _2248;
        _2719 = _2250;
        _2721 = _2252;
        _2723 = _2571;
        _2725 = _2573;
        _2727 = _2575;
    }
    float _4686 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4697 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4708 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2744 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2717 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _683))) + ((_2723 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    float _2745 = ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2719 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _683))) + ((_2725 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    float _2746 = ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2721 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _683))) + ((_2727 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    uint _2747 = _236 + 6u;
    float _2755 = _620 / cbSceneParam._m0[86u].x;
    float _2756 = _621 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _544 : (isnan(_544) ? cbSceneParam._m0[77u].w : min(_544, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_544 > cbSceneParam._m0[78u].w)
    {
        float _2809 = isnan(_544) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _544 : min(cbSceneParam._m0[80u].w, _544));
        float _2810 = _2809 / _544;
        float _2821 = _2810 * _596;
        float _2822 = _597 * _2810;
        float _2823 = (-0.0) - _2822;
        float _2825 = _2810 * _598;
        float _2827 = (cbSceneParam._m0[77u].w * _2823) / _2809;
        float _2828 = _2827 + cbSceneParam._m0[79u].w;
        float _2829 = cbSceneParam._m0[79u].w - _2822;
        float _2835 = sqrt(((_2821 * _2821) + (_2822 * _2822)) + (_2825 * _2825));
        float _2838 = (1.0 - (cbSceneParam._m0[77u].w / _2809)) * _2835;
        float _2843 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2845 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3022;
        if (abs((_2823 - _2827) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3022 = ((((_2828 > 0.0) ? exp2(_2843 * _2828) : (2.0 - exp2(_2845 * _2828))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2838;
        }
        else
        {
            float _2966 = 1.0 / cbSceneParam._m0[80u].x;
            float _2967 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : max(_2828, _2829));
            float _2968 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : min(_2828, _2829));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            _3022 = ((abs(_2835 / _2823) * cbSceneParam._m0[80u].y) * ((((_2977 - _2978) * 2.0) - ((exp2(_2843 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)))) - exp2(_2843 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))))) * _2966)) - ((exp2(_2845 * _2977) - exp2(_2845 * _2978)) * _2966))) + (_2838 * cbSceneParam._m0[80u].z);
        }
        vec4 _3024 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3033 = exp2((_3022 * (-1.44269502162933349609375)) * (1.0 - _3024.w));
        float _3034 = log2(_3033);
        float _3050 = log2(_2775);
        _2847 = (exp2(_3050 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].x)) * _3024.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2849 = (exp2(_3050 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].y)) * _3024.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2851 = (exp2(_3050 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].z)) * _3024.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2853 = _3033 * _2775;
    }
    else
    {
        _2847 = _2772;
        _2849 = _2773;
        _2851 = _2774;
        _2853 = _2775;
    }
    bool _3060;
    vec4 _2863;
    vec4 _2885;
    float _2887;
    float _2891;
    float _2892;
    float _2893;
    float _2894;
    bool _2904;
    for (;;)
    {
        _2863 = cbMatDynParam._m0[0u];
        float _2865 = roundEven(_2863.y);
        bool _2866 = _2865 == 3.0;
        float _2867 = log2(_2853);
        float _2874 = exp2(_2867 * cbSceneParam._m0[78u].x) * _2744;
        float _2875 = exp2(_2867 * cbSceneParam._m0[78u].y) * _2745;
        float _2876 = exp2(_2867 * cbSceneParam._m0[78u].z) * _2746;
        float _2883 = _609 + (-0.5);
        _2885 = cbMtdParam._m0[1u];
        _2887 = _2885.y * _2883;
        float _2890 = (_2865 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2891 = _2890 * (_2866 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2847)));
        _2892 = _2890 * (_2866 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2849)));
        _2893 = _2890 * (_2866 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2851)));
        _2894 = _2883 * 0.999000012874603271484375;
        _2904 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2904)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2894) < 0.5)
            {
                _3060 = true;
                break;
            }
        }
        uint _3001 = _658 + uint(_2863.w);
        if ((cbInstanceData._m0[_3001].w < 1.0) && ((cbInstanceData._m0[_3001].w + _2894) < 0.5))
        {
            _3060 = true;
            break;
        }
        if ((_2887 + 1.0) < _2885.x)
        {
            _3060 = true;
            break;
        }
        _3060 = false;
        break;
    }
    float _3264;
    if (_3060)
    {
        discard_state = true;
        _3264 = 0.0;
    }
    else
    {
        _3264 = cbInstanceData._m0[_2747].w;
    }
    SV_Target.x = _2891;
    SV_Target.y = _2892;
    SV_Target.z = _2893;
    SV_Target.w = _3264;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
    discard_exit();
}


