#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1244;
float _3604;
float _3605;
float _3606;
float _3607;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3616 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3627 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3638 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _403 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_390 - _403) * cbMtdParam._m0[24u].x) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3649 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _428 = (_421 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _429 = (_421 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _430 = (_421 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) + _440;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _517 = ((_487.z - _508) * _421) + _508;
    float _520 = ((((_487.x - _506) * _421) + _506) * 2.0) + (-1.0);
    float _521 = ((((_487.y - _507) * _421) + _507) * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3660 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))));
    float _532 = _520 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_462.x * 2.0) + (-1.0)));
    float _533 = _521 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_462.y * 2.0) + (-1.0)));
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _589 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_562 - _563) * cbMtdParam._m0[24u].w) + _563) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3671 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _598 = ((((cbMtdParam._m0[10u].x - _447) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _590) + _447;
    float _599 = ((((cbMtdParam._m0[10u].y - _448) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _590) + _448;
    float _600 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _449)) * _590) + _449;
    float _605 = (((_462.z - _517) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _517;
    float _609 = ((cbMtdParam._m0[23u].y - _605) * _590) + _605;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3682 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _652 = (_590 * (((cbMtdParam._m0[22u].z * _532) - _532) + _634)) + _532;
    float _653 = (_590 * (((cbMtdParam._m0[22u].z * _533) - _533) + _635)) + _533;
    float _654 = (_590 * (sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) - _527)) + _527;
    float _656 = cbMtdParam._m0[22u].x + _546.w;
    float _660 = gl_FragCoord.x * 0.125;
    float _662 = gl_FragCoord.y * 0.125;
    float _672 = fma(_654, _239 * NORMAL.x, fma(_653, _246 * TANGENT.x, (_232 * _224) * _652));
    float _675 = fma(_654, _239 * NORMAL.y, fma(_653, _246 * TANGENT.y, (_232 * _225) * _652));
    float _678 = fma(_654, _239 * NORMAL.z, fma(_653, _246 * TANGENT.z, (_232 * _226) * _652));
    float _682 = inversesqrt(dot(vec3(_672, _675, _678), vec3(_672, _675, _678)));
    float _683 = _682 * _672;
    float _684 = _682 * _675;
    float _685 = _682 * _678;
    float _3693 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _686 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3715 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3726 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3737 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_660, _662)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    vec4 _770 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_660, _662));
    float _772 = _770.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _926 = sqrt(((_759 * _759) + (_760 * _760)) + (_761 * _761));
        float _932 = (cbMatDynParam._m0[5u].x * _926) + cbMatDynParam._m0[5u].y;
        float _3748 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _937 = (cbMatDynParam._m0[5u].z * _926) + cbMatDynParam._m0[5u].w;
        float _3759 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) - _933)) + _933) < ((_772 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _802 = fma(_685, cbSceneParam._m0[5u].z, fma(_684, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _683));
    float _805 = fma(_685, cbSceneParam._m0[6u].z, fma(_684, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _683));
    float _808 = fma(_685, cbSceneParam._m0[7u].z, fma(_684, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _683));
    uint _821 = _271 + 9u;
    uint _822 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_822].z;
    float _3770 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    vec4 _842 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _846 = ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * TEXCOORD_5.w) * _842.x;
    float _847 = dot(vec3(_683, _684, _685), vec3(_766, _767, _768));
    float _850 = _847 * 2.0;
    float _854 = (_850 * _683) - _766;
    float _855 = (_850 * _684) - _767;
    float _856 = (_850 * _685) - _768;
    float _860 = abs(dot(vec3(_766, _767, _768), vec3(_683, _684, _685)));
    float _3803 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = sqrt(_686);
    float _875 = exp2((_862 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_862 * 3.0));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1243;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _968 = fma(_915, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907));
        float _972 = fma(_915, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907));
        float _976 = fma(_915, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907));
        float _1001 = _907 + _683;
        float _1002 = _911 + _684;
        float _1003 = _915 + _685;
        float _1013 = fma(_1003, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001)) - _968;
        float _1014 = fma(_1003, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001)) - _972;
        float _1015 = fma(_1003, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001)) - _976;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_968 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_972 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[34u].z) + ((((((_976 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1071 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1037.x + (-0.5));
        float _1073 = _1071 * (_1037.y + (-0.5));
        float _1074 = _1071 * (_1037.z + (-0.5));
        float _1081 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1044.x + (-0.5));
        float _1083 = _1081 * (_1044.y + (-0.5));
        float _1084 = _1081 * (_1044.z + (-0.5));
        float _1091 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1051.x + (-0.5));
        float _1093 = _1091 * (_1051.y + (-0.5));
        float _1094 = _1091 * (_1051.z + (-0.5));
        float _1101 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1058.x + (-0.5));
        float _1103 = _1101 * (_1058.y + (-0.5));
        float _1104 = _1101 * (_1058.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1125 = (dot(vec3(_683, _684, _685), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1135 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3851 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1137 + 1.0))) + _1142) * _1105;
        float _1152 = _1073 * 0.5;
        float _1153 = _1083 * 0.5;
        float _1154 = _1093 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_683, _684, _685), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3884 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1179 + 1.0))) + _1184) * _1106;
        float _1194 = _1074 * 0.5;
        float _1195 = _1084 * 0.5;
        float _1196 = _1094 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_683, _684, _685), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3917 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1221 + 1.0))) + _1226) * _1107;
        _1243 = _1074;
        _1245 = _1073;
        _1246 = _1072;
        _1247 = _1084;
        _1248 = _1083;
        _1249 = _1082;
        _1250 = _1094;
        _1251 = _1093;
        _1252 = _1092;
        _1253 = _1107;
        _1254 = _1106;
        _1255 = _1105;
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _1244;
        _1245 = _1244;
        _1246 = _1244;
        _1247 = _1244;
        _1248 = _1244;
        _1249 = _1244;
        _1250 = _1244;
        _1251 = _1244;
        _1252 = _1244;
        _1253 = _1244;
        _1254 = _1244;
        _1255 = _1244;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_915, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907));
        float _1286 = fma(_915, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907));
        float _1290 = fma(_915, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907));
        float _1313 = _907 + _683;
        float _1314 = _911 + _684;
        float _1315 = _915 + _685;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_683, _684, _685), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3980 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_683, _684, _685), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4013 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_683, _684, _685), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4046 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1244;
        _1552 = _1244;
        _1553 = _1244;
        _1554 = _1244;
        _1555 = _1244;
        _1556 = _1244;
        _1557 = _1244;
        _1558 = _1244;
        _1559 = _1244;
        _1560 = _1244;
        _1561 = _1244;
        _1562 = _1244;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1256)) + _1256;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1257)) + _1257;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1258)) + _1258;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _854 * 0.5;
    float _1620 = _855 * 0.5;
    float _1621 = _856 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1247, _1250, _1253));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _686);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_915, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_915, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_915, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_856, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854));
        float _1751 = fma(_856, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854));
        float _1754 = fma(_856, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1782 = frontier_phi_19_17_ladder;
        }
        float _1984;
        if (_1751 > 0.0)
        {
            _1984 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1984 = frontier_phi_28_24_ladder;
        }
        float _2227;
        if (_1754 > 0.0)
        {
            _2227 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2227 = frontier_phi_40_35_ladder;
        }
        float _2229 = isnan(_1984) ? _1782 : (isnan(_1782) ? _1984 : min(_1782, _1984));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1748) + _1737;
        float _2235 = (_2230 * _1751) + _1741;
        float _2236 = (_2230 * _1754) + _1745;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2237;
        float _2241 = _2237 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 > _2241) || ((_2235 < _2239) || ((_2234 < _2239) || (_2234 > _2241))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2236, cbModelParam._m0[9u].z, fma(_2235, cbModelParam._m0[9u].y, _2234 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2236, cbModelParam._m0[10u].z, fma(_2235, cbModelParam._m0[10u].y, _2234 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2236, cbModelParam._m0[11u].z, fma(_2235, cbModelParam._m0[11u].y, _2234 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_18_40_ladder = _2360.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2360.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2360.x * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_18_40_ladder_2;
        _1772 = frontier_phi_18_40_ladder_1;
        _1774 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_854, _855, _856), _1688);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _686);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_915, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_915, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_915, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_856, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854));
        float _1848 = fma(_856, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854));
        float _1851 = fma(_856, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854));
        float _1989;
        if (_1845 > 0.0)
        {
            _1989 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1989 = frontier_phi_30_26_ladder;
        }
        float _2254;
        if (_1848 > 0.0)
        {
            _2254 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2254 = frontier_phi_42_37_ladder;
        }
        float _2459;
        if (_1851 > 0.0)
        {
            _2459 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2459 = frontier_phi_51_48_ladder;
        }
        float _2461 = isnan(_2254) ? _1989 : (isnan(_1989) ? _2254 : min(_1989, _2254));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1845) + _1834;
        float _2467 = (_2462 * _1848) + _1838;
        float _2468 = (_2462 * _1851) + _1842;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_27_51_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2667.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_27_51_ladder_2;
        _1872 = frontier_phi_27_51_ladder_1;
        _1874 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_854, _855, _856), _1779);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1886 = ((((1.0 - _875) * ((_862 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_875 * _862)) * _846;
    float _1887 = _1886 * ((cbModelParam._m0[1u].w * (_1870 - _1770)) + _1770);
    float _1888 = _1886 * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1889 = _1886 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    uvec4 _1908 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1910 = _1908.x * 14u;
    uint _1911 = _1910 + 13u;
    float _1918 = _846 + (-1.0);
    float _1923 = (cbLight._m0[_1911].x * _1918) + 1.0;
    float _1924 = (cbLight._m0[_1911].y * _1918) + 1.0;
    float _1925 = (cbLight._m0[_1911].z * _1918) + 1.0;
    float _1926 = (cbLight._m0[_1911].w * _1918) + 1.0;
    uint _1927 = _1910 + 5u;
    float _1933 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1937 = _1910 + 4u;
    float _1943 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1947 = _1910 | 1u;
    float _1958 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_683, _684, _685));
    float _1961 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_683, _684, _685));
    float _4182 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _4193 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1966 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1968 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _1975 = ((cbLight._m0[_1927].x * _1933) * _1968) + ((cbLight._m0[_1937].x * _1943) * _1966);
    float _1976 = ((_1933 * cbLight._m0[_1927].y) * _1968) + ((_1943 * cbLight._m0[_1937].y) * _1966);
    float _1977 = ((_1933 * cbLight._m0[_1927].z) * _1968) + ((_1943 * cbLight._m0[_1937].z) * _1966);
    uvec4 _1981 = floatBitsToUint(cbLight._m0[_1910 + 12u]);
    bool _1983 = _1981.x == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1983)
    {
        _1994 = _1975;
        _1996 = _1976;
        _1998 = _1977;
    }
    else
    {
        uint _2002 = _1910 + 6u;
        float _2018 = (dot(vec3(cbLight._m0[_1910 + 2u].xyz), vec3(_683, _684, _685)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _4204 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2021 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _1994 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1975;
        _1996 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1976;
        _1998 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1977;
    }
    bool _2001 = _1981.y == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_2001)
    {
        _2039 = _1994;
        _2041 = _1996;
        _2043 = _1998;
    }
    else
    {
        uint _2198 = _1910 + 7u;
        float _2214 = (dot(vec3(cbLight._m0[_1910 + 3u].xyz), vec3(_683, _684, _685)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4220 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2217 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2039 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _1994;
        _2041 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _1996;
        _2043 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _1998;
    }
    uint _2046 = _1910 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _686) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1910].x + _766;
    float _2062 = cbLight._m0[_1910].y + _767;
    float _2063 = cbLight._m0[_1910].z + _768;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_1910].xyz));
    float _4236 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2075 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2076 = dot(vec3(_683, _684, _685), vec3(_2068, _2069, _2070));
    float _4258 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2068, _2069, _2070));
    float _4269 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2100 = 1.0 - _2060;
    float _2111 = (0.5 / (((_2075 * ((_2074 * _2100) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2100) + _2060) * _2074))) * _2074;
    float _4280 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2124 = _1910 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _686) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1947].x + _766;
    float _2138 = cbLight._m0[_1947].y + _767;
    float _2139 = cbLight._m0[_1947].z + _768;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_1947].xyz));
    float _4291 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2151 = dot(vec3(_683, _684, _685), vec3(_2144, _2145, _2146));
    float _4302 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2144, _2145, _2146));
    float _4313 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2136;
    float _2183 = (0.5 / (((_2075 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2173) + _2136) * _2150))) * _2150;
    float _4324 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2195 = (((_2172 * cbLight._m0[_2124].x) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].x) * _2113) * _1943);
    float _2196 = (((_2172 * cbLight._m0[_2124].y) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].y) * _2113) * _1943);
    float _2197 = (((_2172 * cbLight._m0[_2124].z) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].z) * _2113) * _1943);
    float _2259;
    float _2261;
    float _2263;
    if (_1983)
    {
        _2259 = _2195;
        _2261 = _2196;
        _2263 = _2197;
    }
    else
    {
        uint _2265 = _1910 + 2u;
        uint _2269 = _1910 + 10u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _686) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _766;
        float _2286 = cbLight._m0[_2265].y + _767;
        float _2287 = cbLight._m0[_2265].z + _768;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2265].xyz));
        float _4335 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2299 = dot(vec3(_683, _684, _685), vec3(_2292, _2293, _2294));
        float _4346 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4357 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2321 = 1.0 - _2284;
        float _2331 = (0.5 / (((_2075 * ((_2298 * _2321) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2321) + _2284) * _2298))) * _2298;
        float _4368 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2333 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2334 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2259 = (((_2320 * cbLight._m0[_2269].x) * _2333) * _2334) + _2195;
        _2261 = (((_2320 * cbLight._m0[_2269].y) * _2333) * _2334) + _2196;
        _2263 = (((_2320 * cbLight._m0[_2269].z) * _2333) * _2334) + _2197;
    }
    float _2369;
    float _2371;
    float _2373;
    if (_2001)
    {
        _2369 = _2259;
        _2371 = _2261;
        _2373 = _2263;
    }
    else
    {
        uint _2380 = _1910 + 3u;
        uint _2384 = _1910 + 11u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _686) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _766;
        float _2401 = cbLight._m0[_2380].y + _767;
        float _2402 = cbLight._m0[_2380].z + _768;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2380].xyz));
        float _4384 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2414 = dot(vec3(_683, _684, _685), vec3(_2407, _2408, _2409));
        float _4395 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4406 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2435 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2436 = 1.0 - _2399;
        float _2446 = (0.5 / (((_2075 * ((_2413 * _2436) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2436) + _2399) * _2413))) * _2413;
        float _4417 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2369 = (((_2435 * cbLight._m0[_2384].x) * _2448) * _2449) + _2259;
        _2371 = (((_2435 * cbLight._m0[_2384].y) * _2448) * _2449) + _2261;
        _2373 = (((_2435 * cbLight._m0[_2384].z) * _2448) * _2449) + _2263;
    }
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    if (_1908.y == 0u)
    {
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2524;
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2524;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2524;
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.x;
        uint _2551 = uint((float(_2539.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2540))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2540)));
        float _2561 = (log2(_2527 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2562 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        uint _2565 = uint(isnan(14.0) ? _2562 : (isnan(_2562) ? 14.0 : min(_2562, 14.0)));
        uvec4 _2570 = texelFetch(g_lightClusterGridBuffer, int(((_2565 << 2u) + (_2551 << 6u)) >> 2u));
        uint _2571 = _2570.x;
        uint _2572 = _2539.z;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((((1u << ((_2572 >> 4u) & 15u)) + 4294967295u) & _2571) == 0u) || ((_2572 & 240u) == 0u))
        {
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
        }
        else
        {
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            uint _2831 = 0u;
            uint _2840;
            bool _2841;
            for (;;)
            {
                _2840 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                _2841 = _2840 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2841)
                {
                    frontier_phi_68_pred = _2825;
                    frontier_phi_68_pred_1 = _2830;
                    frontier_phi_68_pred_2 = _2829;
                    frontier_phi_68_pred_3 = _2828;
                    frontier_phi_68_pred_4 = _2827;
                    frontier_phi_68_pred_5 = _2826;
                }
                else
                {
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    uint _2976;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2840;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    for (;;)
                    {
                        uint _2980 = uint(findLSB(_2976)) + (_2831 << 5u);
                        uint _2977 = (_2976 + 4294967295u) & _2976;
                        uint _2982 = _2980 * 48u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3002 = (_2980 * 48u) + 4u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3021 = (_2980 * 48u) + 8u;
                        vec3 _3032 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x));
                        float _3036 = _2996.x - _2525;
                        float _3037 = _2996.y - _2526;
                        float _3038 = _2996.z - _2527;
                        float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                        float _3042 = inversesqrt(_3039);
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3046 = dot(vec3(_802, _805, _808), vec3(_3043, _3044, _3045));
                        float _3051 = 1.0 - (_3039 * _2996.w);
                        float _4443 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3053 = sqrt(_3039) * _3015.w;
                        float _3056 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _3046) + _3057;
                        float _3063 = _3053 * _3053;
                        float _3067 = ((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3052) / ((_3063 * 0.699999988079071044921875) + 1.0);
                        float _3071 = (-0.0) - _2525;
                        float _3072 = (-0.0) - _2526;
                        float _3073 = (-0.0) - _2527;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3088 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                        float _3089 = 1.0 - _862;
                        float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                        float _3097 = _3096 * _3096;
                        float _3098 = _3097 * _3097;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3109 = dot(vec3(_802, _805, _808), vec3(_3078, _3079, _3080));
                        float _4459 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3113 = dot(vec3(_802, _805, _808), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                        float _4470 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                        float _3121 = _3056 * _3097;
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3046) + _3122;
                        float _4481 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3127 = 1.0 - _3097;
                        float _3137 = (0.5 / (((_3126 * ((_3112 * _3127) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3097) * _3112))) * _3126;
                        float _4492 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3148 = (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3120 * _3120) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125))) * _3052;
                        _2900 = (_3067 * _3015.x) + _2973;
                        _2901 = (_3067 * _3015.y) + _2974;
                        _2902 = (_3067 * _3015.z) + _2975;
                        _2897 = (_3148 * _3032.x) + _2970;
                        _2898 = (_3148 * _3032.y) + _2971;
                        _2899 = (_3148 * _3032.z) + _2972;
                        if (_2977 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2977;
                        }
                    }
                    frontier_phi_68_pred = _2897;
                    frontier_phi_68_pred_1 = _2902;
                    frontier_phi_68_pred_2 = _2901;
                    frontier_phi_68_pred_3 = _2900;
                    frontier_phi_68_pred_4 = _2899;
                    frontier_phi_68_pred_5 = _2898;
                }
                _2673 = frontier_phi_68_pred;
                _2683 = frontier_phi_68_pred_1;
                _2681 = frontier_phi_68_pred_2;
                _2679 = frontier_phi_68_pred_3;
                _2677 = frontier_phi_68_pred_4;
                _2675 = frontier_phi_68_pred_5;
                uint _2832 = _2831 + 1u;
                if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2825 = _2673;
                    _2826 = _2675;
                    _2827 = _2677;
                    _2828 = _2679;
                    _2829 = _2681;
                    _2830 = _2683;
                    _2831 = _2832;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
        }
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.z;
        uint _2689 = (_2687 >> 8u) & 15u;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((4294967295u << _2689) & _2571) == 0u)
        {
            _2793 = _2672;
            _2795 = _2674;
            _2797 = _2676;
            _2799 = _2678;
            _2801 = _2680;
            _2803 = _2682;
        }
        else
        {
            float _2818 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
            float _2819 = _2818 * _2525;
            float _2820 = _2818 * _2526;
            float _2821 = _2818 * _2527;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2689 < ((_2687 >> 12u) & 15u))
            {
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2953 = _2672;
                float _2954 = _2674;
                float _2955 = _2676;
                float _2956 = _2678;
                float _2957 = _2680;
                float _2958 = _2682;
                uint _2959 = _2689;
                uint _2968;
                bool _2969;
                for (;;)
                {
                    _2968 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                    _2969 = _2968 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2969)
                    {
                        frontier_phi_79_pred = _2958;
                        frontier_phi_79_pred_1 = _2957;
                        frontier_phi_79_pred_2 = _2956;
                        frontier_phi_79_pred_3 = _2955;
                        frontier_phi_79_pred_4 = _2954;
                        frontier_phi_79_pred_5 = _2953;
                    }
                    else
                    {
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        uint _3181 = _2968;
                        uint _3182;
                        vec4 _3207;
                        float _3208;
                        vec4 _3223;
                        vec3 _3235;
                        vec4 _3250;
                        vec4 _3265;
                        float _3311;
                        bool _3312;
                        for (;;)
                        {
                            uint _3192 = ((_2959 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3181));
                            _3182 = (_3181 + 4294967295u) & _3181;
                            uint _3194 = _3192 * 40u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3208 = _3207.w;
                            uint _3210 = (_3192 * 40u) + 4u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3192 * 40u) + 8u;
                            _3235 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x));
                            uint _3237 = (_3192 * 40u) + 16u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3192 * 40u) + 20u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3192 * 40u) + 24u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3286 = (_3192 * 40u) + 28u;
                            vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3311 = fma(_2527, _3299.z, fma(_2526, _3299.y, _3299.x * _2525)) + _3299.w;
                            _3312 = !((fma(_2527, _3280.z, fma(_2526, _3280.y, _3280.x * _2525)) + _3280.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3312)
                            {
                                float _3339 = _3207.x - _2525;
                                float _3340 = _3207.y - _2526;
                                float _3341 = _3207.z - _2527;
                                float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                                float _3345 = inversesqrt(_3342);
                                float _3346 = _3345 * _3339;
                                float _3347 = _3345 * _3340;
                                float _3348 = _3345 * _3341;
                                float _3352 = 1.0 - (_3342 / (_3208 * _3208));
                                float _4503 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3357 = sqrt(_3342) * _3223.w;
                                float _3359 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                                float _3360 = _3359 * _3359;
                                float _3363 = ((1.0 - _3360) * dot(vec3(_3346, _3347, _3348), vec3(_802, _805, _808))) + _3360;
                                float _3366 = _3357 * _3357;
                                float _3370 = (fma(_2527, _3250.z, fma(_2526, _3250.y, _3250.x * _2525)) + _3250.w) / _3311;
                                float _3371 = (fma(_2527, _3265.z, fma(_2526, _3265.y, _3265.x * _2525)) + _3265.w) / _3311;
                                float _3375 = 1.0 - dot(vec2(_3370, _3371), vec2(_3370, _3371));
                                float _4519 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3377 = _3376 * (((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3353) / ((_3366 * 0.699999988079071044921875) + 1.0));
                                float _3389 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                                float _3390 = 1.0 - _862;
                                float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                                float _3398 = _3397 * _3397;
                                float _3399 = _3398 * _3398;
                                float _3400 = _3346 - _2819;
                                float _3401 = _3347 - _2820;
                                float _3402 = _3348 - _2821;
                                float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                                float _3410 = dot(vec3(_802, _805, _808), vec3((-0.0) - _2819, (-0.0) - _2820, (-0.0) - _2821));
                                float _4530 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3414 = dot(vec3(_802, _805, _808), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                                float _4541 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                                float _3422 = _3359 * _3398;
                                float _3423 = _3422 * _3422;
                                float _3429 = ((1.0 - _3423) * dot(vec3(_802, _805, _808), vec3(_3346, _3347, _3348))) + _3423;
                                float _4552 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3431 = 1.0 - _3398;
                                float _3441 = (0.5 / (((_3430 * ((_3413 * _3431) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3398) * _3413))) * _3430;
                                float _4563 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3451 = (_3376 * _3353) * (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3421 * _3421) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3377 * _3223.y;
                                frontier_phi_85_pred_1 = _3377 * _3223.x;
                                frontier_phi_85_pred_2 = _3451 * _3235.z;
                                frontier_phi_85_pred_3 = _3451 * _3235.y;
                                frontier_phi_85_pred_4 = _3451 * _3235.x;
                                frontier_phi_85_pred_5 = _3377 * _3223.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_85_pred;
                            _3458 = frontier_phi_85_pred_1;
                            _3457 = frontier_phi_85_pred_2;
                            _3456 = frontier_phi_85_pred_3;
                            _3455 = frontier_phi_85_pred_4;
                            _3460 = frontier_phi_85_pred_5;
                            _3165 = _3458 + _3178;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            _3162 = _3455 + _3175;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            if (_3182 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3182;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3167;
                        frontier_phi_79_pred_1 = _3166;
                        frontier_phi_79_pred_2 = _3165;
                        frontier_phi_79_pred_3 = _3164;
                        frontier_phi_79_pred_4 = _3163;
                        frontier_phi_79_pred_5 = _3162;
                    }
                    _2804 = frontier_phi_79_pred;
                    _2802 = frontier_phi_79_pred_1;
                    _2800 = frontier_phi_79_pred_2;
                    _2798 = frontier_phi_79_pred_3;
                    _2796 = frontier_phi_79_pred_4;
                    _2794 = frontier_phi_79_pred_5;
                    uint _2960 = _2959 + 1u;
                    if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2953 = _2794;
                        _2954 = _2796;
                        _2955 = _2798;
                        _2956 = _2800;
                        _2957 = _2802;
                        _2958 = _2804;
                        _2959 = _2960;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2798;
                frontier_phi_60_61_ladder_1 = _2804;
                frontier_phi_60_61_ladder_2 = _2802;
                frontier_phi_60_61_ladder_3 = _2800;
                frontier_phi_60_61_ladder_4 = _2796;
                frontier_phi_60_61_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_60_61_ladder = _2676;
                frontier_phi_60_61_ladder_1 = _2682;
                frontier_phi_60_61_ladder_2 = _2680;
                frontier_phi_60_61_ladder_3 = _2678;
                frontier_phi_60_61_ladder_4 = _2674;
                frontier_phi_60_61_ladder_5 = _2672;
            }
            _2793 = frontier_phi_60_61_ladder_5;
            _2795 = frontier_phi_60_61_ladder_4;
            _2797 = frontier_phi_60_61_ladder;
            _2799 = frontier_phi_60_61_ladder_3;
            _2801 = frontier_phi_60_61_ladder_2;
            _2803 = frontier_phi_60_61_ladder_1;
        }
        float _2808 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
        _2584 = (_2808 * _2799) + _2039;
        _2586 = (_2808 * _2801) + _2041;
        _2588 = (_2808 * _2803) + _2043;
        _2590 = ((_2793 * 0.039999999105930328369140625) * _2808) + _2369;
        _2592 = ((_2795 * 0.039999999105930328369140625) * _2808) + _2371;
        _2594 = ((_2797 * 0.039999999105930328369140625) * _2808) + _2373;
    }
    else
    {
        _2584 = _2039;
        _2586 = _2041;
        _2588 = _2043;
        _2590 = _2369;
        _2592 = _2371;
        _2594 = _2373;
    }
    float _4579 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4590 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4601 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2611 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2584 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _846))) + ((_2590 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2612 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2586 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _846))) + ((_2592 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2613 = ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2588 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _846))) + ((_2594 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    uint _2614 = _271 + 6u;
    float _2622 = _783 / cbSceneParam._m0[86u].x;
    float _2623 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2637 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2639 = _2637.x;
    float _2640 = _2637.y;
    float _2641 = _2637.z;
    float _2642 = _2637.w;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2697 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2698 = _2697 / _708;
        float _2709 = _2698 * _759;
        float _2710 = _760 * _2698;
        float _2711 = (-0.0) - _2710;
        float _2713 = _2698 * _761;
        float _2715 = (cbSceneParam._m0[77u].w * _2711) / _2697;
        float _2716 = _2715 + cbSceneParam._m0[79u].w;
        float _2717 = cbSceneParam._m0[79u].w - _2710;
        float _2723 = sqrt(((_2709 * _2709) + (_2710 * _2710)) + (_2713 * _2713));
        float _2726 = (1.0 - (cbSceneParam._m0[77u].w / _2697)) * _2723;
        float _2731 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2733 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2910;
        if (abs((_2711 - _2715) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2910 = ((((_2716 > 0.0) ? exp2(_2731 * _2716) : (2.0 - exp2(_2733 * _2716))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2726;
        }
        else
        {
            float _2854 = 1.0 / cbSceneParam._m0[80u].x;
            float _2855 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : max(_2716, _2717));
            float _2856 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : min(_2716, _2717));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            _2910 = ((abs(_2723 / _2711) * cbSceneParam._m0[80u].y) * ((((_2865 - _2866) * 2.0) - ((exp2(_2731 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)))) - exp2(_2731 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))))) * _2854)) - ((exp2(_2733 * _2865) - exp2(_2733 * _2866)) * _2854))) + (_2726 * cbSceneParam._m0[80u].z);
        }
        vec4 _2912 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, 1.0), 0.0);
        float _2921 = exp2((_2910 * (-1.44269502162933349609375)) * (1.0 - _2912.w));
        float _2922 = log2(_2921);
        float _2938 = log2(_2642);
        _2735 = (exp2(_2938 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].x)) * _2912.x) / cbSceneParam._m0[78u].x)) + _2639;
        _2737 = (exp2(_2938 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].y)) * _2912.y) / cbSceneParam._m0[78u].y)) + _2640;
        _2739 = (exp2(_2938 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].z)) * _2912.z) / cbSceneParam._m0[78u].z)) + _2641;
        _2741 = _2921 * _2642;
    }
    else
    {
        _2735 = _2639;
        _2737 = _2640;
        _2739 = _2641;
        _2741 = _2642;
    }
    bool _2948;
    vec4 _2751;
    vec4 _2773;
    float _2775;
    float _2779;
    float _2780;
    float _2781;
    float _2782;
    bool _2792;
    for (;;)
    {
        _2751 = cbMatDynParam._m0[0u];
        float _2753 = roundEven(_2751.y);
        bool _2754 = _2753 == 3.0;
        float _2755 = log2(_2741);
        float _2762 = exp2(_2755 * cbSceneParam._m0[78u].x) * _2611;
        float _2763 = exp2(_2755 * cbSceneParam._m0[78u].y) * _2612;
        float _2764 = exp2(_2755 * cbSceneParam._m0[78u].z) * _2613;
        float _2771 = _772 + (-0.5);
        _2773 = cbMtdParam._m0[1u];
        _2775 = _2773.y * _2771;
        float _2778 = (_2753 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2779 = _2778 * (_2754 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2735)));
        _2780 = _2778 * (_2754 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2737)));
        _2781 = _2778 * (_2754 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2739)));
        _2782 = _2771 * 0.999000012874603271484375;
        _2792 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2792)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _2782) < 0.5)
            {
                _2948 = true;
                break;
            }
        }
        uint _2889 = _821 + uint(_2751.w);
        if ((cbInstanceData._m0[_2889].w < 1.0) && ((cbInstanceData._m0[_2889].w + _2782) < 0.5))
        {
            _2948 = true;
            break;
        }
        if ((_2775 + 1.0) < _2773.x)
        {
            _2948 = true;
            break;
        }
        _2948 = false;
        break;
    }
    float _3153;
    if (_2948)
    {
        discard_state = true;
        _3153 = 0.0;
    }
    else
    {
        _3153 = cbInstanceData._m0[_2614].w;
    }
    SV_Target.x = _2779;
    SV_Target.y = _2780;
    SV_Target.z = _2781;
    SV_Target.w = _3153;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2614].w;
    discard_exit();
}


