#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1076;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3407 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3418 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3429 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _318 = _313.x * cbMtdParam._m0[11u].x;
    float _319 = _313.y * cbMtdParam._m0[11u].y;
    float _320 = _313.z * cbMtdParam._m0[11u].z;
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _275) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _276) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _388 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_375 - _388) * cbMtdParam._m0[24u].x) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3440 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _413 = (_406 * ((_339.x * cbMtdParam._m0[12u].x) - _318)) + _318;
    float _414 = (_406 * ((_339.y * cbMtdParam._m0[12u].y) - _319)) + _319;
    float _415 = (_406 * ((_339.z * cbMtdParam._m0[12u].z) - _320)) + _320;
    float _419 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _413;
    float _422 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _414;
    float _425 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _415;
    float _432 = ((_413 - _419) * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) + _419;
    float _433 = ((_414 - _422) * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) + _422;
    float _434 = ((_415 - _425) * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) + _425;
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _275) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _276) + cbTextureTilingScale._m0[4u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _493 = _489.z;
    float _502 = ((_472.z - _493) * _406) + _493;
    float _505 = ((((_472.x - _491) * _406) + _491) * 2.0) + (-1.0);
    float _506 = ((((_472.y - _492) * _406) + _492) * 2.0) + (-1.0);
    float _507 = dot(vec2(_505, _506), vec2(_505, _506));
    float _3451 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))));
    float _517 = _505 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_447.x * 2.0) + (-1.0)));
    float _518 = _506 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_447.y * 2.0) + (-1.0)));
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _538 = (((_447.z - _502) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _502;
    float _540 = cbMtdParam._m0[22u].x + _531.w;
    float _543 = fma(_512, _222 * NORMAL.x, fma(_518, _229 * TANGENT.x, (_215 * _207) * _517));
    float _546 = fma(_512, _222 * NORMAL.y, fma(_518, _229 * TANGENT.y, (_215 * _208) * _517));
    float _549 = fma(_512, _222 * NORMAL.z, fma(_518, _229 * TANGENT.z, (_215 * _209) * _517));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3462 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _557 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3484 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3495 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3506 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _627 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _617);
    float _628 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _617);
    float _629 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _617);
    float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
    float _634 = _627 * _633;
    float _635 = _628 * _633;
    float _636 = _629 * _633;
    float _642 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _643 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _661 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _664 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _667 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _681 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3517 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _642, cbSceneParam._m0[86u].y * _643));
    float _705 = ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * TEXCOORD_5.w) * _701.x;
    float _706 = dot(vec3(_554, _555, _556), vec3(_634, _635, _636));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _554) - _634;
    float _714 = (_709 * _555) - _635;
    float _715 = (_709 * _556) - _636;
    float _719 = abs(dot(vec3(_634, _635, _636), vec3(_554, _555, _556)));
    float _3550 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_557);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _804 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _808 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _833 = _766 + _554;
        float _834 = _770 + _555;
        float _835 = _774 + _556;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _800;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _804;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _808;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_554, _555, _556), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3598 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_554, _555, _556), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3631 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_554, _555, _556), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3664 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1077 = _905;
        _1078 = _904;
        _1079 = _916;
        _1080 = _915;
        _1081 = _914;
        _1082 = _926;
        _1083 = _925;
        _1084 = _924;
        _1085 = _939;
        _1086 = _938;
        _1087 = _937;
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _1076;
        _1077 = _1076;
        _1078 = _1076;
        _1079 = _1076;
        _1080 = _1076;
        _1081 = _1076;
        _1082 = _1076;
        _1083 = _1076;
        _1084 = _1076;
        _1085 = _1076;
        _1086 = _1076;
        _1087 = _1076;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1118 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1122 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1145 = _766 + _554;
        float _1146 = _770 + _555;
        float _1147 = _774 + _556;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_554, _555, _556), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3727 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_554, _555, _556), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3760 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_554, _555, _556), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3793 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1076;
        _1384 = _1076;
        _1385 = _1076;
        _1386 = _1076;
        _1387 = _1076;
        _1388 = _1076;
        _1389 = _1076;
        _1390 = _1076;
        _1391 = _1076;
        _1392 = _1076;
        _1393 = _1076;
        _1394 = _1076;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1088)) + _1088;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1089)) + _1089;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1090)) + _1090;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _713 * 0.5;
    float _1452 = _714 * 0.5;
    float _1453 = _715 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1075, _1079, _1082, _1085));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1583 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1586 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1614 = frontier_phi_14_12_ladder;
        }
        float _1837;
        if (_1583 > 0.0)
        {
            _1837 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1837 = frontier_phi_23_19_ladder;
        }
        float _2083;
        if (_1586 > 0.0)
        {
            _2083 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2083 = frontier_phi_35_30_ladder;
        }
        float _2085 = isnan(_1837) ? _1614 : (isnan(_1614) ? _1837 : min(_1614, _1837));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1580) + _1569;
        float _2091 = (_2086 * _1583) + _1573;
        float _2092 = (_2086 * _1586) + _1577;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2093;
        float _2097 = _2093 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 > _2097) || ((_2091 < _2095) || ((_2090 < _2095) || (_2090 > _2097))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2092, cbModelParam._m0[9u].z, fma(_2091, cbModelParam._m0[9u].y, _2090 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2092, cbModelParam._m0[10u].z, fma(_2091, cbModelParam._m0[10u].y, _2090 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2092, cbModelParam._m0[11u].z, fma(_2091, cbModelParam._m0[11u].y, _2090 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_13_35_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_13_35_ladder_2;
        _1604 = frontier_phi_13_35_ladder_1;
        _1606 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1520);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1666 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1670 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1674 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1677 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1680 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1683 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1842;
        if (_1677 > 0.0)
        {
            _1842 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1842 = frontier_phi_25_21_ladder;
        }
        float _2110;
        if (_1680 > 0.0)
        {
            _2110 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2110 = frontier_phi_37_32_ladder;
        }
        float _2315;
        if (_1683 > 0.0)
        {
            _2315 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2315 = frontier_phi_46_43_ladder;
        }
        float _2317 = isnan(_2110) ? _1842 : (isnan(_1842) ? _2110 : min(_1842, _2110));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1677) + _1666;
        float _2323 = (_2318 * _1680) + _1670;
        float _2324 = (_2318 * _1683) + _1674;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2325;
        float _2328 = _2325 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2324 > _2328) || ((_2324 < _2326) || ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 < _2326) || (_2322 > _2328))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2324, cbModelParam._m0[17u].z, fma(_2323, cbModelParam._m0[17u].y, _2322 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2324, cbModelParam._m0[18u].z, fma(_2323, cbModelParam._m0[18u].y, _2322 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2324, cbModelParam._m0[19u].z, fma(_2323, cbModelParam._m0[19u].y, _2322 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_22_46_ladder = _2523.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2523.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2523.x * cbModelParam._m0[1u].z;
        }
        _1702 = frontier_phi_22_46_ladder_2;
        _1704 = frontier_phi_22_46_ladder_1;
        _1706 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1611);
        _1702 = _1686.x * cbModelParam._m0[1u].z;
        _1704 = _1686.y * cbModelParam._m0[1u].z;
        _1706 = _1686.z * cbModelParam._m0[1u].z;
    }
    float _1718 = ((((1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_734 * _721)) * _705;
    float _1719 = _1718 * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1720 = _1718 * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1721 = _1718 * ((cbModelParam._m0[1u].w * (_1706 - _1606)) + _1606);
    float _1724 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, _1719 * cbSceneParam._m0[91u].x));
    vec4 _1738 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_642, _643));
    float _1740 = _1738.w;
    float _1752 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1740);
    float _1753 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1740);
    float _1754 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1740);
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _705 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1796 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1800 = _1760 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_554, _555, _556));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_554, _555, _556));
    float _3929 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3940 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1777].x * _1783) * _1821) + (((cbLight._m0[_1787].x * _1752) * _1796) * _1819);
    float _1829 = ((_1783 * cbLight._m0[_1777].y) * _1821) + (((cbLight._m0[_1787].y * _1753) * _1796) * _1819);
    float _1830 = ((_1783 * cbLight._m0[_1777].z) * _1821) + (((cbLight._m0[_1787].z * _1754) * _1796) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1828;
        _1849 = _1829;
        _1851 = _1830;
    }
    else
    {
        uint _1855 = _1760 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3951 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1874 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1830;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2054 = _1760 + 7u;
        float _2070 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _3967 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2073 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1892 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1847;
        _1894 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1849;
        _1896 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1851;
    }
    uint _1899 = _1760 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _557) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1760].x + _634;
    float _1915 = cbLight._m0[_1760].y + _635;
    float _1916 = cbLight._m0[_1760].z + _636;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1760].xyz));
    float _3983 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1928 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1929 = dot(vec3(_554, _555, _556), vec3(_1921, _1922, _1923));
    float _4005 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1921, _1922, _1923));
    float _4016 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = 1.0 - _1913;
    float _1964 = (0.5 / (((_1928 * ((_1927 * _1953) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1953) + _1913) * _1927))) * _1927;
    float _4027 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1980 = _1760 + 9u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _557) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1800].x + _634;
    float _1994 = cbLight._m0[_1800].y + _635;
    float _1995 = cbLight._m0[_1800].z + _636;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1800].xyz));
    float _4038 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2007 = dot(vec3(_554, _555, _556), vec3(_2000, _2001, _2002));
    float _4049 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2000, _2001, _2002));
    float _4060 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1992 * _1992;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2028 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2029 = 1.0 - _1992;
    float _2039 = (0.5 / (((_1928 * ((_2006 * _2029) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2029) + _1992) * _2006))) * _2006;
    float _4071 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    float _2051 = (((_2028 * cbLight._m0[_1980].x) * _2041) * _1783) + ((((cbLight._m0[_1899].x * _1752) * _1952) * _1966) * _1796);
    float _2052 = (((_2028 * cbLight._m0[_1980].y) * _2041) * _1783) + ((((cbLight._m0[_1899].y * _1753) * _1952) * _1966) * _1796);
    float _2053 = (((_2028 * cbLight._m0[_1980].z) * _2041) * _1783) + ((((cbLight._m0[_1899].z * _1754) * _1952) * _1966) * _1796);
    float _2115;
    float _2117;
    float _2119;
    if (_1836)
    {
        _2115 = _2051;
        _2117 = _2052;
        _2119 = _2053;
    }
    else
    {
        uint _2121 = _1760 + 2u;
        uint _2125 = _1760 + 10u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _557) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _634;
        float _2142 = cbLight._m0[_2121].y + _635;
        float _2143 = cbLight._m0[_2121].z + _636;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2121].xyz));
        float _4082 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2155 = dot(vec3(_554, _555, _556), vec3(_2148, _2149, _2150));
        float _4093 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4104 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = 1.0 - _2140;
        float _2187 = (0.5 / (((_1928 * ((_2154 * _2177) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2177) + _2140) * _2154))) * _2154;
        float _4115 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2115 = (((_2176 * cbLight._m0[_2125].x) * _2189) * _2190) + _2051;
        _2117 = (((_2176 * cbLight._m0[_2125].y) * _2189) * _2190) + _2052;
        _2119 = (((_2176 * cbLight._m0[_2125].z) * _2189) * _2190) + _2053;
    }
    float _2225;
    float _2227;
    float _2229;
    if (_1854)
    {
        _2225 = _2115;
        _2227 = _2117;
        _2229 = _2119;
    }
    else
    {
        uint _2236 = _1760 + 3u;
        uint _2240 = _1760 + 11u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _557) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _634;
        float _2257 = cbLight._m0[_2236].y + _635;
        float _2258 = cbLight._m0[_2236].z + _636;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2236].xyz));
        float _4131 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2270 = dot(vec3(_554, _555, _556), vec3(_2263, _2264, _2265));
        float _4142 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4153 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2292 = 1.0 - _2255;
        float _2302 = (0.5 / (((_1928 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2292) + _2255) * _2269))) * _2269;
        float _4164 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2225 = (((_2291 * cbLight._m0[_2240].x) * _2304) * _2305) + _2115;
        _2227 = (((_2291 * cbLight._m0[_2240].y) * _2304) * _2305) + _2117;
        _2229 = (((_2291 * cbLight._m0[_2240].z) * _2304) * _2305) + _2119;
    }
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_1758.y == 0u)
    {
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2380;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2380;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2380;
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.x;
        uint _2407 = uint((float(_2395.y) * floor(float(uint(cbSceneParam._m0[85u].y * _643) / _2396))) + floor(float(uint(cbSceneParam._m0[85u].x * _642) / _2396)));
        float _2417 = (log2(_2383 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2418 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        uint _2421 = uint(isnan(14.0) ? _2418 : (isnan(_2418) ? 14.0 : min(_2418, 14.0)));
        uvec4 _2426 = texelFetch(g_lightClusterGridBuffer, int(((_2421 << 2u) + (_2407 << 6u)) >> 2u));
        uint _2427 = _2426.x;
        uint _2428 = _2395.z;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        if (((((1u << ((_2428 >> 4u) & 15u)) + 4294967295u) & _2427) == 0u) || ((_2428 & 240u) == 0u))
        {
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
        }
        else
        {
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2539;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            uint _2679 = 0u;
            uint _2688;
            bool _2689;
            for (;;)
            {
                _2688 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                _2689 = _2688 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2689)
                {
                    frontier_phi_61_pred = _2673;
                    frontier_phi_61_pred_1 = _2678;
                    frontier_phi_61_pred_2 = _2677;
                    frontier_phi_61_pred_3 = _2676;
                    frontier_phi_61_pred_4 = _2675;
                    frontier_phi_61_pred_5 = _2674;
                }
                else
                {
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    uint _2803;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2688;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    for (;;)
                    {
                        uint _2807 = uint(findLSB(_2803)) + (_2679 << 5u);
                        uint _2804 = (_2803 + 4294967295u) & _2803;
                        uint _2809 = _2807 * 48u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2829 = (_2807 * 48u) + 4u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2848 = (_2807 * 48u) + 8u;
                        vec3 _2859 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x));
                        float _2863 = _2823.x - _2381;
                        float _2864 = _2823.y - _2382;
                        float _2865 = _2823.z - _2383;
                        float _2866 = dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865));
                        float _2869 = inversesqrt(_2866);
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2873 = dot(vec3(_661, _664, _667), vec3(_2870, _2871, _2872));
                        float _2878 = 1.0 - (_2866 * _2823.w);
                        float _4190 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2880 = sqrt(_2866) * _2842.w;
                        float _2883 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2873) + _2884;
                        float _2890 = _2880 * _2880;
                        float _2894 = ((isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))) * _2879) / ((_2890 * 0.699999988079071044921875) + 1.0);
                        float _2898 = (-0.0) - _2381;
                        float _2899 = (-0.0) - _2382;
                        float _2900 = (-0.0) - _2383;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2915 = exp2(log2(1.0 / ((_2890 * 3.5) + 5.0)) * 0.25);
                        float _2916 = 1.0 - _721;
                        float _2923 = sqrt(1.0 - ((1.0 - (_2916 * _2916)) * (1.0 - (_2915 * _2915))));
                        float _2924 = _2923 * _2923;
                        float _2925 = _2924 * _2924;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2936 = dot(vec3(_661, _664, _667), vec3(_2905, _2906, _2907));
                        float _4206 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2940 = dot(vec3(_661, _664, _667), vec3(_2932 * _2926, _2932 * _2927, _2932 * _2928));
                        float _4217 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2947 = ((_2943 * _2943) * (_2925 + (-1.0))) + 1.0;
                        float _2948 = _2883 * _2924;
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2873) + _2949;
                        float _4228 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2954 = 1.0 - _2924;
                        float _2964 = (0.5 / (((_2953 * ((_2939 * _2954) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2953 * _2954) + _2924) * _2939))) * _2953;
                        float _4239 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2975 = (((_2925 * 3.1415927410125732421875) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) / ((_2947 * _2947) * ((_2890 * 2.1991131305694580078125) + 3.141590118408203125))) * _2879;
                        _2732 = (_2894 * _2842.x) + _2800;
                        _2733 = (_2894 * _2842.y) + _2801;
                        _2734 = (_2894 * _2842.z) + _2802;
                        _2729 = (_2975 * _2859.x) + _2797;
                        _2730 = (_2975 * _2859.y) + _2798;
                        _2731 = (_2975 * _2859.z) + _2799;
                        if (_2804 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2804;
                        }
                    }
                    frontier_phi_61_pred = _2729;
                    frontier_phi_61_pred_1 = _2734;
                    frontier_phi_61_pred_2 = _2733;
                    frontier_phi_61_pred_3 = _2732;
                    frontier_phi_61_pred_4 = _2731;
                    frontier_phi_61_pred_5 = _2730;
                }
                _2529 = frontier_phi_61_pred;
                _2539 = frontier_phi_61_pred_1;
                _2537 = frontier_phi_61_pred_2;
                _2535 = frontier_phi_61_pred_3;
                _2533 = frontier_phi_61_pred_4;
                _2531 = frontier_phi_61_pred_5;
                uint _2680 = _2679 + 1u;
                if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2673 = _2529;
                    _2674 = _2531;
                    _2675 = _2533;
                    _2676 = _2535;
                    _2677 = _2537;
                    _2678 = _2539;
                    _2679 = _2680;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
        }
        uvec4 _2542 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2543 = _2542.z;
        uint _2545 = (_2543 >> 8u) & 15u;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((4294967295u << _2545) & _2427) == 0u)
        {
            _2641 = _2528;
            _2643 = _2530;
            _2645 = _2532;
            _2647 = _2534;
            _2649 = _2536;
            _2651 = _2538;
        }
        else
        {
            float _2666 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
            float _2667 = _2666 * _2381;
            float _2668 = _2666 * _2382;
            float _2669 = _2666 * _2383;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2545 < ((_2543 >> 12u) & 15u))
            {
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2780 = _2528;
                float _2781 = _2530;
                float _2782 = _2532;
                float _2783 = _2534;
                float _2784 = _2536;
                float _2785 = _2538;
                uint _2786 = _2545;
                uint _2795;
                bool _2796;
                for (;;)
                {
                    _2795 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                    _2796 = _2795 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2796)
                    {
                        frontier_phi_67_pred = _2783;
                        frontier_phi_67_pred_1 = _2784;
                        frontier_phi_67_pred_2 = _2785;
                        frontier_phi_67_pred_3 = _2782;
                        frontier_phi_67_pred_4 = _2781;
                        frontier_phi_67_pred_5 = _2780;
                    }
                    else
                    {
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        uint _2999 = _2795;
                        uint _3000;
                        vec4 _3025;
                        float _3026;
                        vec4 _3041;
                        vec3 _3053;
                        vec4 _3068;
                        vec4 _3083;
                        float _3129;
                        bool _3130;
                        for (;;)
                        {
                            uint _3010 = ((_2786 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2999));
                            _3000 = (_2999 + 4294967295u) & _2999;
                            uint _3012 = _3010 * 40u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3026 = _3025.w;
                            uint _3028 = (_3010 * 40u) + 4u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3043 = (_3010 * 40u) + 8u;
                            _3053 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x));
                            uint _3055 = (_3010 * 40u) + 16u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3070 = (_3010 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3010 * 40u) + 24u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3104 = (_3010 * 40u) + 28u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3129 = fma(_2383, _3117.z, fma(_2382, _3117.y, _3117.x * _2381)) + _3117.w;
                            _3130 = !((fma(_2383, _3098.z, fma(_2382, _3098.y, _3098.x * _2381)) + _3098.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3130)
                            {
                                float _3157 = _3025.x - _2381;
                                float _3158 = _3025.y - _2382;
                                float _3159 = _3025.z - _2383;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3026 * _3026));
                                float _4250 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3175 = sqrt(_3160) * _3041.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3181 = ((1.0 - _3178) * dot(vec3(_3164, _3165, _3166), vec3(_661, _664, _667))) + _3178;
                                float _3184 = _3175 * _3175;
                                float _3188 = (fma(_2383, _3068.z, fma(_2382, _3068.y, _3068.x * _2381)) + _3068.w) / _3129;
                                float _3189 = (fma(_2383, _3083.z, fma(_2382, _3083.y, _3083.x * _2381)) + _3083.w) / _3129;
                                float _3193 = 1.0 - dot(vec2(_3188, _3189), vec2(_3188, _3189));
                                float _4266 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3195 = _3194 * (((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3171) / ((_3184 * 0.699999988079071044921875) + 1.0));
                                float _3207 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                                float _3208 = 1.0 - _721;
                                float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                                float _3216 = _3215 * _3215;
                                float _3217 = _3216 * _3216;
                                float _3218 = _3164 - _2667;
                                float _3219 = _3165 - _2668;
                                float _3220 = _3166 - _2669;
                                float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                                float _3228 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2667, (-0.0) - _2668, (-0.0) - _2669));
                                float _4277 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3232 = dot(vec3(_661, _664, _667), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                                float _4288 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                                float _3240 = _3177 * _3216;
                                float _3241 = _3240 * _3240;
                                float _3247 = ((1.0 - _3241) * dot(vec3(_661, _664, _667), vec3(_3164, _3165, _3166))) + _3241;
                                float _4299 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3249 = 1.0 - _3216;
                                float _3259 = (0.5 / (((_3248 * ((_3231 * _3249) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3216) * _3231))) * _3248;
                                float _4310 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3269 = (_3194 * _3171) * (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3239 * _3239) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3269 * _3053.x;
                                frontier_phi_73_pred_1 = _3269 * _3053.y;
                                frontier_phi_73_pred_2 = _3195 * _3041.z;
                                frontier_phi_73_pred_3 = _3195 * _3041.y;
                                frontier_phi_73_pred_4 = _3195 * _3041.x;
                                frontier_phi_73_pred_5 = _3269 * _3053.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3273 = frontier_phi_73_pred;
                            _3274 = frontier_phi_73_pred_1;
                            _3278 = frontier_phi_73_pred_2;
                            _3277 = frontier_phi_73_pred_3;
                            _3276 = frontier_phi_73_pred_4;
                            _3275 = frontier_phi_73_pred_5;
                            _2983 = _3276 + _2996;
                            _2984 = _3277 + _2997;
                            _2985 = _3278 + _2998;
                            _2980 = _3273 + _2993;
                            _2981 = _3274 + _2994;
                            _2982 = _3275 + _2995;
                            if (_3000 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _3000;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2983;
                        frontier_phi_67_pred_1 = _2984;
                        frontier_phi_67_pred_2 = _2985;
                        frontier_phi_67_pred_3 = _2982;
                        frontier_phi_67_pred_4 = _2981;
                        frontier_phi_67_pred_5 = _2980;
                    }
                    _2648 = frontier_phi_67_pred;
                    _2650 = frontier_phi_67_pred_1;
                    _2652 = frontier_phi_67_pred_2;
                    _2646 = frontier_phi_67_pred_3;
                    _2644 = frontier_phi_67_pred_4;
                    _2642 = frontier_phi_67_pred_5;
                    uint _2787 = _2786 + 1u;
                    if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2780 = _2642;
                        _2781 = _2644;
                        _2782 = _2646;
                        _2783 = _2648;
                        _2784 = _2650;
                        _2785 = _2652;
                        _2786 = _2787;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2650;
                frontier_phi_55_56_ladder_1 = _2652;
                frontier_phi_55_56_ladder_2 = _2648;
                frontier_phi_55_56_ladder_3 = _2646;
                frontier_phi_55_56_ladder_4 = _2644;
                frontier_phi_55_56_ladder_5 = _2642;
            }
            else
            {
                frontier_phi_55_56_ladder = _2536;
                frontier_phi_55_56_ladder_1 = _2538;
                frontier_phi_55_56_ladder_2 = _2534;
                frontier_phi_55_56_ladder_3 = _2532;
                frontier_phi_55_56_ladder_4 = _2530;
                frontier_phi_55_56_ladder_5 = _2528;
            }
            _2641 = frontier_phi_55_56_ladder_5;
            _2643 = frontier_phi_55_56_ladder_4;
            _2645 = frontier_phi_55_56_ladder_3;
            _2647 = frontier_phi_55_56_ladder_2;
            _2649 = frontier_phi_55_56_ladder;
            _2651 = frontier_phi_55_56_ladder_1;
        }
        float _2656 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2440 = (_2656 * _2647) + _1892;
        _2442 = (_2656 * _2649) + _1894;
        _2444 = (_2656 * _2651) + _1896;
        _2446 = ((_2641 * 0.039999999105930328369140625) * _2656) + _2225;
        _2448 = ((_2643 * 0.039999999105930328369140625) * _2656) + _2227;
        _2450 = ((_2645 * 0.039999999105930328369140625) * _2656) + _2229;
    }
    else
    {
        _2440 = _1892;
        _2442 = _1894;
        _2444 = _1896;
        _2446 = _2225;
        _2448 = _2227;
        _2450 = _2229;
    }
    float _4326 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4337 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4348 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    uint _2470 = _256 + 6u;
    float _2478 = _642 / cbSceneParam._m0[86u].x;
    float _2479 = _643 / cbSceneParam._m0[86u].y;
    vec4 _2493 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2478, _2479, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2495 = _2493.x;
    float _2496 = _2493.y;
    float _2497 = _2493.z;
    float _2498 = _2493.w;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2553 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2554 = _2553 / _575;
        float _2565 = _2554 * _627;
        float _2566 = _628 * _2554;
        float _2567 = (-0.0) - _2566;
        float _2569 = _2554 * _629;
        float _2571 = (cbSceneParam._m0[77u].w * _2567) / _2553;
        float _2572 = _2571 + cbSceneParam._m0[79u].w;
        float _2573 = cbSceneParam._m0[79u].w - _2566;
        float _2579 = sqrt(((_2565 * _2565) + (_2566 * _2566)) + (_2569 * _2569));
        float _2582 = (1.0 - (cbSceneParam._m0[77u].w / _2553)) * _2579;
        float _2587 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2589 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2742;
        if (abs((_2567 - _2571) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2742 = ((((_2572 > 0.0) ? exp2(_2587 * _2572) : (2.0 - exp2(_2589 * _2572))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2582;
        }
        else
        {
            float _2702 = 1.0 / cbSceneParam._m0[80u].x;
            float _2703 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : max(_2572, _2573));
            float _2704 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : min(_2572, _2573));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            _2742 = ((abs(_2579 / _2567) * cbSceneParam._m0[80u].y) * ((((_2713 - _2714) * 2.0) - ((exp2(_2587 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0)))) - exp2(_2587 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0))))) * _2702)) - ((exp2(_2589 * _2713) - exp2(_2589 * _2714)) * _2702))) + (_2582 * cbSceneParam._m0[80u].z);
        }
        vec4 _2744 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2478, _2479, 1.0), 0.0);
        float _2753 = exp2((_2742 * (-1.44269502162933349609375)) * (1.0 - _2744.w));
        float _2754 = log2(_2753);
        float _2770 = log2(_2498);
        _2591 = (exp2(_2770 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].x)) * _2744.x) / cbSceneParam._m0[78u].x)) + _2495;
        _2593 = (exp2(_2770 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].y)) * _2744.y) / cbSceneParam._m0[78u].y)) + _2496;
        _2595 = (exp2(_2770 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].z)) * _2744.z) / cbSceneParam._m0[78u].z)) + _2497;
        _2597 = _2753 * _2498;
    }
    else
    {
        _2591 = _2495;
        _2593 = _2496;
        _2595 = _2497;
        _2597 = _2498;
    }
    float _2609 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2610 = _2609 == 3.0;
    float _2611 = log2(_2597);
    float _2618 = exp2(_2611 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2440 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _705))) + ((_2446 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2619 = exp2(_2611 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2442 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _705))) + ((_2448 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2620 = exp2(_2611 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2444 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _705))) + ((_2450 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2629 = (_2609 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2629 * (_2610 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.y = _2629 * (_2610 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.z = _2629 * (_2610 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.w = cbInstanceData._m0[_2470].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2470].w;
}


