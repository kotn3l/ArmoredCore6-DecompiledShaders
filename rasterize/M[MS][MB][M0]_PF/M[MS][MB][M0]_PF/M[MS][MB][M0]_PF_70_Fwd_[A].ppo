#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1164;
float _3525;
float _3526;
float _3527;
float _3528;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _359 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _376 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _359) * cbMtdParam._m0[24u].x) + _359) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3537 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _384 = (_377 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _385 = (_377 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _386 = (_377 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _429 = ((_399.z - _420) * _377) + _420;
    float _432 = ((((_399.x - _418) * _377) + _418) * 2.0) + (-1.0);
    float _434 = ((((_399.y - _419) * _377) + _419) * 2.0) + (-1.0);
    float _435 = dot(vec2(_432, _434), vec2(_432, _434));
    float _3548 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))));
    vec4 _456 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _468 = (((_456.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _432;
    float _469 = (((_456.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _434;
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _483 = _481.x;
    float _484 = 1.0 - _483;
    float _512 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_483 - _484) * cbMtdParam._m0[24u].w) + _484) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3559 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _521 = ((((cbMtdParam._m0[10u].x - _384) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _513) + _384;
    float _522 = ((((cbMtdParam._m0[10u].y - _385) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _513) + _385;
    float _523 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _386)) * _513) + _386;
    float _527 = (cbMtdParam._m0[19u].w * (_456.z - _429)) + _429;
    float _531 = ((cbMtdParam._m0[23u].y - _527) * _513) + _527;
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _556 = (_550.x * 2.0) + (-1.0);
    float _557 = (_550.y * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _3570 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _574 = (_513 * (((cbMtdParam._m0[22u].z * _468) - _468) + _556)) + _468;
    float _575 = (_513 * (((cbMtdParam._m0[22u].z * _469) - _469) + _557)) + _469;
    float _576 = (_513 * (sqrt(1.0 - (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) - _440)) + _440;
    float _578 = cbMtdParam._m0[22u].x + _456.w;
    float _580 = gl_FragCoord.x * 0.125;
    float _582 = gl_FragCoord.y * 0.125;
    float _592 = fma(_576, _228 * NORMAL.x, fma(_575, _235 * TANGENT.x, (_221 * _213) * _574));
    float _595 = fma(_576, _228 * NORMAL.y, fma(_575, _235 * TANGENT.y, (_221 * _214) * _574));
    float _598 = fma(_576, _228 * NORMAL.z, fma(_575, _235 * TANGENT.z, (_221 * _215) * _574));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    float _603 = _602 * _592;
    float _604 = _602 * _595;
    float _605 = _602 * _598;
    float _3581 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _606 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3603 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3614 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3625 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_580, _582)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _628 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _679 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _669);
    float _680 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _669);
    float _681 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _669);
    float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
    float _686 = _679 * _685;
    float _687 = _680 * _685;
    float _688 = _681 * _685;
    vec4 _690 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_580, _582));
    float _692 = _690.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _846 = sqrt(((_679 * _679) + (_680 * _680)) + (_681 * _681));
        float _852 = (cbMatDynParam._m0[5u].x * _846) + cbMatDynParam._m0[5u].y;
        float _3636 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _857 = (cbMatDynParam._m0[5u].z * _846) + cbMatDynParam._m0[5u].w;
        float _3647 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) - _853)) + _853) < ((_692 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _722 = fma(_605, cbSceneParam._m0[5u].z, fma(_604, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _603));
    float _725 = fma(_605, cbSceneParam._m0[6u].z, fma(_604, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _603));
    float _728 = fma(_605, cbSceneParam._m0[7u].z, fma(_604, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _603));
    uint _741 = _241 + 9u;
    uint _742 = _741 + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_742].z;
    float _3658 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    vec4 _762 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _766 = ((isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * TEXCOORD_5.w) * _762.x;
    float _767 = dot(vec3(_603, _604, _605), vec3(_686, _687, _688));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _603) - _686;
    float _775 = (_770 * _604) - _687;
    float _776 = (_770 * _605) - _688;
    float _780 = abs(dot(vec3(_686, _687, _688), vec3(_603, _604, _605)));
    float _3691 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_606);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1163;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _888 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _892 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _896 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _921 = _827 + _603;
        float _922 = _831 + _604;
        float _923 = _835 + _605;
        float _933 = fma(_923, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921)) - _888;
        float _934 = fma(_923, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921)) - _892;
        float _935 = fma(_923, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921)) - _896;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_888 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_892 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[34u].z) + ((((((_896 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _991 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_957.x + (-0.5));
        float _993 = _991 * (_957.y + (-0.5));
        float _994 = _991 * (_957.z + (-0.5));
        float _1001 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_964.x + (-0.5));
        float _1003 = _1001 * (_964.y + (-0.5));
        float _1004 = _1001 * (_964.z + (-0.5));
        float _1011 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_971.x + (-0.5));
        float _1013 = _1011 * (_971.y + (-0.5));
        float _1014 = _1011 * (_971.z + (-0.5));
        float _1021 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_978.x + (-0.5));
        float _1023 = _1021 * (_978.y + (-0.5));
        float _1024 = _1021 * (_978.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1045 = (dot(vec3(_603, _604, _605), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1055 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3739 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1057 + 1.0))) + _1062) * _1025;
        float _1072 = _993 * 0.5;
        float _1073 = _1003 * 0.5;
        float _1074 = _1013 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_603, _604, _605), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3772 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1099 + 1.0))) + _1104) * _1026;
        float _1114 = _994 * 0.5;
        float _1115 = _1004 * 0.5;
        float _1116 = _1014 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_603, _604, _605), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3805 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1141 + 1.0))) + _1146) * _1027;
        _1163 = _994;
        _1165 = _993;
        _1166 = _992;
        _1167 = _1004;
        _1168 = _1003;
        _1169 = _1002;
        _1170 = _1014;
        _1171 = _1013;
        _1172 = _1012;
        _1173 = _1027;
        _1174 = _1026;
        _1175 = _1025;
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _1164;
        _1165 = _1164;
        _1166 = _1164;
        _1167 = _1164;
        _1168 = _1164;
        _1169 = _1164;
        _1170 = _1164;
        _1171 = _1164;
        _1172 = _1164;
        _1173 = _1164;
        _1174 = _1164;
        _1175 = _1164;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1202 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1206 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1210 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1233 = _827 + _603;
        float _1234 = _831 + _604;
        float _1235 = _835 + _605;
        float _1245 = fma(_1235, cbModelParam._m0[30u].z, fma(_1234, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233)) - _1202;
        float _1246 = fma(_1235, cbModelParam._m0[31u].z, fma(_1234, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233)) - _1206;
        float _1247 = fma(_1235, cbModelParam._m0[32u].z, fma(_1234, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233)) - _1210;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1202 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1206 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[35u].z) + ((((((_1210 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1301 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1268.x + (-0.5));
        float _1303 = _1301 * (_1268.y + (-0.5));
        float _1304 = _1301 * (_1268.z + (-0.5));
        float _1311 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1275.x + (-0.5));
        float _1313 = _1311 * (_1275.y + (-0.5));
        float _1314 = _1311 * (_1275.z + (-0.5));
        float _1321 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1282.x + (-0.5));
        float _1323 = _1321 * (_1282.y + (-0.5));
        float _1324 = _1321 * (_1282.z + (-0.5));
        float _1331 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1289.x + (-0.5));
        float _1333 = _1331 * (_1289.y + (-0.5));
        float _1334 = _1331 * (_1289.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_603, _604, _605), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3868 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1365 + 1.0))) + _1370) * _1335;
        float _1380 = _1303 * 0.5;
        float _1381 = _1313 * 0.5;
        float _1382 = _1323 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_603, _604, _605), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3901 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1407 + 1.0))) + _1412) * _1336;
        float _1422 = _1304 * 0.5;
        float _1423 = _1314 * 0.5;
        float _1424 = _1324 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_603, _604, _605), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3934 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1449 + 1.0))) + _1454) * _1337;
        _1471 = _1304;
        _1472 = _1303;
        _1473 = _1302;
        _1474 = _1314;
        _1475 = _1313;
        _1476 = _1312;
        _1477 = _1324;
        _1478 = _1323;
        _1479 = _1322;
        _1480 = _1337;
        _1481 = _1336;
        _1482 = _1335;
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
    }
    else
    {
        _1471 = _1164;
        _1472 = _1164;
        _1473 = _1164;
        _1474 = _1164;
        _1475 = _1164;
        _1476 = _1164;
        _1477 = _1164;
        _1478 = _1164;
        _1479 = _1164;
        _1480 = _1164;
        _1481 = _1164;
        _1482 = _1164;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1176)) + _1176;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1177)) + _1177;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1178)) + _1178;
    float _1518 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1521 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1524 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1495));
    float _1539 = _774 * 0.5;
    float _1540 = _775 * 0.5;
    float _1541 = _776 * 0.5;
    float _1542 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1545 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1548 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1582;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1555 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1163, _1167, _1170, _1173));
        float _1559 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1563 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1570 = dot(vec4(cbModelParam._m0[39u]), vec4(_1539, _1540, _1541, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1593;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1584 = dot(vec4(cbModelParam._m0[40u]), vec4(_1539, _1540, _1541, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1597 = (_1593 * cbModelParam._m0[1u].x) + (_1582 * (1.0 - cbModelParam._m0[1u].x));
    float _1607 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1607 : min(cbModelParam._m0[25u].z, _1607));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1657 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1661 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1665 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1668 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1671 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1674 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1702;
        if (_1668 > 0.0)
        {
            _1702 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1702 = frontier_phi_19_17_ladder;
        }
        float _1904;
        if (_1671 > 0.0)
        {
            _1904 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1904 = frontier_phi_28_24_ladder;
        }
        float _2147;
        if (_1674 > 0.0)
        {
            _2147 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2147 = frontier_phi_40_35_ladder;
        }
        float _2149 = isnan(_1904) ? _1702 : (isnan(_1702) ? _1904 : min(_1702, _1904));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1668) + _1657;
        float _2155 = (_2150 * _1671) + _1661;
        float _2156 = (_2150 * _1674) + _1665;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1608);
            frontier_phi_18_40_ladder = _2280.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2280.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2280.x * cbModelParam._m0[1u].y;
        }
        _1690 = frontier_phi_18_40_ladder_2;
        _1692 = frontier_phi_18_40_ladder_1;
        _1694 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1608);
        _1690 = _1678.x * cbModelParam._m0[1u].y;
        _1692 = _1678.y * cbModelParam._m0[1u].y;
        _1694 = _1678.z * cbModelParam._m0[1u].y;
    }
    float _1698 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1698 : min(cbModelParam._m0[25u].w, _1698));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1754 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1758 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1762 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1765 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1768 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1771 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _1909;
        if (_1765 > 0.0)
        {
            _1909 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1909 = frontier_phi_30_26_ladder;
        }
        float _2174;
        if (_1768 > 0.0)
        {
            _2174 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2174 = frontier_phi_42_37_ladder;
        }
        float _2379;
        if (_1771 > 0.0)
        {
            _2379 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2379 = frontier_phi_51_48_ladder;
        }
        float _2381 = isnan(_2174) ? _1909 : (isnan(_1909) ? _2174 : min(_1909, _2174));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1765) + _1754;
        float _2387 = (_2382 * _1768) + _1758;
        float _2388 = (_2382 * _1771) + _1762;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1699);
            frontier_phi_27_51_ladder = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2587.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2587.x * cbModelParam._m0[1u].z;
        }
        _1790 = frontier_phi_27_51_ladder_2;
        _1792 = frontier_phi_27_51_ladder_1;
        _1794 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1699);
        _1790 = _1774.x * cbModelParam._m0[1u].z;
        _1792 = _1774.y * cbModelParam._m0[1u].z;
        _1794 = _1774.z * cbModelParam._m0[1u].z;
    }
    float _1806 = ((((1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _782)) * _766;
    float _1807 = _1806 * ((cbModelParam._m0[1u].w * (_1790 - _1690)) + _1690);
    float _1808 = _1806 * ((cbModelParam._m0[1u].w * (_1792 - _1692)) + _1692);
    float _1809 = _1806 * ((cbModelParam._m0[1u].w * (_1794 - _1694)) + _1694);
    float _1812 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1815 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1818 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, _1807 * cbSceneParam._m0[91u].x));
    uvec4 _1828 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1830 = _1828.x * 14u;
    uint _1831 = _1830 + 13u;
    float _1838 = _766 + (-1.0);
    float _1843 = (cbLight._m0[_1831].x * _1838) + 1.0;
    float _1844 = (cbLight._m0[_1831].y * _1838) + 1.0;
    float _1845 = (cbLight._m0[_1831].z * _1838) + 1.0;
    float _1846 = (cbLight._m0[_1831].w * _1838) + 1.0;
    uint _1847 = _1830 + 5u;
    float _1853 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1857 = _1830 + 4u;
    float _1863 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1867 = _1830 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_603, _604, _605));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_603, _604, _605));
    float _4070 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _4081 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1847].x * _1853) * _1888) + ((cbLight._m0[_1857].x * _1863) * _1886);
    float _1896 = ((_1853 * cbLight._m0[_1847].y) * _1888) + ((_1863 * cbLight._m0[_1857].y) * _1886);
    float _1897 = ((_1853 * cbLight._m0[_1847].z) * _1888) + ((_1863 * cbLight._m0[_1857].z) * _1886);
    uvec4 _1901 = floatBitsToUint(cbLight._m0[_1830 + 12u]);
    bool _1903 = _1901.x == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1903)
    {
        _1914 = _1895;
        _1916 = _1896;
        _1918 = _1897;
    }
    else
    {
        uint _1922 = _1830 + 6u;
        float _1938 = (dot(vec3(cbLight._m0[_1830 + 2u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _4092 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1941 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1914 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1895;
        _1916 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1896;
        _1918 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1897;
    }
    bool _1921 = _1901.y == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1921)
    {
        _1959 = _1914;
        _1961 = _1916;
        _1963 = _1918;
    }
    else
    {
        uint _2118 = _1830 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1830 + 3u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4108 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2137 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _1959 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1914;
        _1961 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1916;
        _1963 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1918;
    }
    uint _1966 = _1830 + 8u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _606) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1830].x + _686;
    float _1982 = cbLight._m0[_1830].y + _687;
    float _1983 = cbLight._m0[_1830].z + _688;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1830].xyz));
    float _4124 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _1995 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _1996 = dot(vec3(_603, _604, _605), vec3(_1988, _1989, _1990));
    float _4146 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1988, _1989, _1990));
    float _4157 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1980 * _1980;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = 1.0 - _1980;
    float _2031 = (0.5 / (((_1995 * ((_1994 * _2020) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2020) + _1980) * _1994))) * _1994;
    float _4168 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    uint _2044 = _1830 + 9u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _606) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1867].x + _686;
    float _2058 = cbLight._m0[_1867].y + _687;
    float _2059 = cbLight._m0[_1867].z + _688;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1867].xyz));
    float _4179 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2071 = dot(vec3(_603, _604, _605), vec3(_2064, _2065, _2066));
    float _4190 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2064, _2065, _2066));
    float _4201 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2056 * _2056;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = 1.0 - _2056;
    float _2103 = (0.5 / (((_1995 * ((_2070 * _2093) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2093) + _2056) * _2070))) * _2070;
    float _4212 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    float _2115 = (((_2092 * cbLight._m0[_2044].x) * _2105) * _1853) + (((_2019 * cbLight._m0[_1966].x) * _2033) * _1863);
    float _2116 = (((_2092 * cbLight._m0[_2044].y) * _2105) * _1853) + (((_2019 * cbLight._m0[_1966].y) * _2033) * _1863);
    float _2117 = (((_2092 * cbLight._m0[_2044].z) * _2105) * _1853) + (((_2019 * cbLight._m0[_1966].z) * _2033) * _1863);
    float _2179;
    float _2181;
    float _2183;
    if (_1903)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1830 + 2u;
        uint _2189 = _1830 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _606) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _686;
        float _2206 = cbLight._m0[_2185].y + _687;
        float _2207 = cbLight._m0[_2185].z + _688;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2185].xyz));
        float _4223 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2219 = dot(vec3(_603, _604, _605), vec3(_2212, _2213, _2214));
        float _4234 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4245 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2241 = 1.0 - _2204;
        float _2251 = (0.5 / (((_1995 * ((_2218 * _2241) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2241) + _2204) * _2218))) * _2218;
        float _4256 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2253 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2254 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2179 = (((_2240 * cbLight._m0[_2189].x) * _2253) * _2254) + _2115;
        _2181 = (((_2240 * cbLight._m0[_2189].y) * _2253) * _2254) + _2116;
        _2183 = (((_2240 * cbLight._m0[_2189].z) * _2253) * _2254) + _2117;
    }
    float _2289;
    float _2291;
    float _2293;
    if (_1921)
    {
        _2289 = _2179;
        _2291 = _2181;
        _2293 = _2183;
    }
    else
    {
        uint _2300 = _1830 + 3u;
        uint _2304 = _1830 + 11u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _606) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _686;
        float _2321 = cbLight._m0[_2300].y + _687;
        float _2322 = cbLight._m0[_2300].z + _688;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2300].xyz));
        float _4272 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2334 = dot(vec3(_603, _604, _605), vec3(_2327, _2328, _2329));
        float _4283 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4294 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2356 = 1.0 - _2319;
        float _2366 = (0.5 / (((_1995 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2356) + _2319) * _2333))) * _2333;
        float _4305 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2289 = (((_2355 * cbLight._m0[_2304].x) * _2368) * _2369) + _2179;
        _2291 = (((_2355 * cbLight._m0[_2304].y) * _2368) * _2369) + _2181;
        _2293 = (((_2355 * cbLight._m0[_2304].z) * _2368) * _2369) + _2183;
    }
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_1828.y == 0u)
    {
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2444;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2444;
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2444;
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.x;
        uint _2471 = uint((float(_2459.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2460))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2460)));
        float _2481 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        uint _2485 = uint(isnan(14.0) ? _2482 : (isnan(_2482) ? 14.0 : min(_2482, 14.0)));
        uvec4 _2490 = texelFetch(g_lightClusterGridBuffer, int(((_2485 << 2u) + (_2471 << 6u)) >> 2u));
        uint _2491 = _2490.x;
        uint _2492 = _2459.z;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((((1u << ((_2492 >> 4u) & 15u)) + 4294967295u) & _2491) == 0u) || ((_2492 & 240u) == 0u))
        {
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
        }
        else
        {
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2761)
                {
                    frontier_phi_68_pred = _2745;
                    frontier_phi_68_pred_1 = _2750;
                    frontier_phi_68_pred_2 = _2749;
                    frontier_phi_68_pred_3 = _2748;
                    frontier_phi_68_pred_4 = _2747;
                    frontier_phi_68_pred_5 = _2746;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2760;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2751 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        float _2956 = _2916.x - _2445;
                        float _2957 = _2916.y - _2446;
                        float _2958 = _2916.z - _2447;
                        float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                        float _2962 = inversesqrt(_2959);
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2966 = dot(vec3(_722, _725, _728), vec3(_2963, _2964, _2965));
                        float _2971 = 1.0 - (_2959 * _2916.w);
                        float _4331 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _2973 = sqrt(_2959) * _2935.w;
                        float _2976 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2966) + _2977;
                        float _2983 = _2973 * _2973;
                        float _2987 = ((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2972) / ((_2983 * 0.699999988079071044921875) + 1.0);
                        float _2991 = (-0.0) - _2445;
                        float _2992 = (-0.0) - _2446;
                        float _2993 = (-0.0) - _2447;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3008 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _782;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_722, _725, _728), vec3(_2998, _2999, _3000));
                        float _4347 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3033 = dot(vec3(_722, _725, _728), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4358 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2976 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2966) + _3042;
                        float _4369 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4380 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) / ((_3040 * _3040) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125))) * _2972;
                        _2820 = (_2987 * _2935.x) + _2893;
                        _2821 = (_2987 * _2935.y) + _2894;
                        _2822 = (_2987 * _2935.z) + _2895;
                        _2817 = (_3068 * _2952.x) + _2890;
                        _2818 = (_3068 * _2952.y) + _2891;
                        _2819 = (_3068 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_68_pred = _2817;
                    frontier_phi_68_pred_1 = _2822;
                    frontier_phi_68_pred_2 = _2821;
                    frontier_phi_68_pred_3 = _2820;
                    frontier_phi_68_pred_4 = _2819;
                    frontier_phi_68_pred_5 = _2818;
                }
                _2593 = frontier_phi_68_pred;
                _2603 = frontier_phi_68_pred_1;
                _2601 = frontier_phi_68_pred_2;
                _2599 = frontier_phi_68_pred_3;
                _2597 = frontier_phi_68_pred_4;
                _2595 = frontier_phi_68_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2593;
                    _2746 = _2595;
                    _2747 = _2597;
                    _2748 = _2599;
                    _2749 = _2601;
                    _2750 = _2603;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
        }
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.z;
        uint _2609 = (_2607 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2609) & _2491) == 0u)
        {
            _2713 = _2592;
            _2715 = _2594;
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _2739 = _2738 * _2445;
            float _2740 = _2738 * _2446;
            float _2741 = _2738 * _2447;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2609 < ((_2607 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2873 = _2592;
                float _2874 = _2594;
                float _2875 = _2596;
                float _2876 = _2598;
                float _2877 = _2600;
                float _2878 = _2602;
                uint _2879 = _2609;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2889)
                    {
                        frontier_phi_79_pred = _2878;
                        frontier_phi_79_pred_1 = _2877;
                        frontier_phi_79_pred_2 = _2876;
                        frontier_phi_79_pred_3 = _2875;
                        frontier_phi_79_pred_4 = _2874;
                        frontier_phi_79_pred_5 = _2873;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        uint _3101 = _2888;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3170;
                        vec4 _3186;
                        float _3232;
                        bool _3233;
                        for (;;)
                        {
                            uint _3112 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3157 = (_3112 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3112 * 40u) + 20u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3112 * 40u) + 24u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3207 = (_3112 * 40u) + 28u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3232 = fma(_2447, _3220.z, fma(_2446, _3220.y, _3220.x * _2445)) + _3220.w;
                            _3233 = !((fma(_2447, _3201.z, fma(_2446, _3201.y, _3201.x * _2445)) + _3201.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3233)
                            {
                                float _3260 = _3127.x - _2445;
                                float _3261 = _3127.y - _2446;
                                float _3262 = _3127.z - _2447;
                                float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                                float _3266 = inversesqrt(_3263);
                                float _3267 = _3266 * _3260;
                                float _3268 = _3266 * _3261;
                                float _3269 = _3266 * _3262;
                                float _3273 = 1.0 - (_3263 / (_3128 * _3128));
                                float _4391 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3278 = sqrt(_3263) * _3143.w;
                                float _3280 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                                float _3281 = _3280 * _3280;
                                float _3284 = ((1.0 - _3281) * dot(vec3(_3267, _3268, _3269), vec3(_722, _725, _728))) + _3281;
                                float _3287 = _3278 * _3278;
                                float _3291 = (fma(_2447, _3170.z, fma(_2446, _3170.y, _3170.x * _2445)) + _3170.w) / _3232;
                                float _3292 = (fma(_2447, _3186.z, fma(_2446, _3186.y, _3186.x * _2445)) + _3186.w) / _3232;
                                float _3296 = 1.0 - dot(vec2(_3291, _3292), vec2(_3291, _3292));
                                float _4407 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3298 = _3297 * (((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3274) / ((_3287 * 0.699999988079071044921875) + 1.0));
                                float _3310 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                                float _3311 = 1.0 - _782;
                                float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                                float _3319 = _3318 * _3318;
                                float _3320 = _3319 * _3319;
                                float _3321 = _3267 - _2739;
                                float _3322 = _3268 - _2740;
                                float _3323 = _3269 - _2741;
                                float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                                float _3331 = dot(vec3(_722, _725, _728), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4418 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3335 = dot(vec3(_722, _725, _728), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                                float _4429 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                                float _3343 = _3280 * _3319;
                                float _3344 = _3343 * _3343;
                                float _3350 = ((1.0 - _3344) * dot(vec3(_722, _725, _728), vec3(_3267, _3268, _3269))) + _3344;
                                float _4440 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3352 = 1.0 - _3319;
                                float _3362 = (0.5 / (((_3351 * ((_3334 * _3352) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3319) * _3334))) * _3351;
                                float _4451 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3372 = (_3297 * _3274) * (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3342 * _3342) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3298 * _3143.y;
                                frontier_phi_85_pred_1 = _3298 * _3143.x;
                                frontier_phi_85_pred_2 = _3372 * _3155.z;
                                frontier_phi_85_pred_3 = _3372 * _3155.y;
                                frontier_phi_85_pred_4 = _3372 * _3155.x;
                                frontier_phi_85_pred_5 = _3298 * _3143.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3380 = frontier_phi_85_pred;
                            _3379 = frontier_phi_85_pred_1;
                            _3378 = frontier_phi_85_pred_2;
                            _3377 = frontier_phi_85_pred_3;
                            _3376 = frontier_phi_85_pred_4;
                            _3381 = frontier_phi_85_pred_5;
                            _3085 = _3379 + _3098;
                            _3086 = _3380 + _3099;
                            _3087 = _3381 + _3100;
                            _3082 = _3376 + _3095;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3087;
                        frontier_phi_79_pred_1 = _3086;
                        frontier_phi_79_pred_2 = _3085;
                        frontier_phi_79_pred_3 = _3084;
                        frontier_phi_79_pred_4 = _3083;
                        frontier_phi_79_pred_5 = _3082;
                    }
                    _2724 = frontier_phi_79_pred;
                    _2722 = frontier_phi_79_pred_1;
                    _2720 = frontier_phi_79_pred_2;
                    _2718 = frontier_phi_79_pred_3;
                    _2716 = frontier_phi_79_pred_4;
                    _2714 = frontier_phi_79_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2714;
                        _2874 = _2716;
                        _2875 = _2718;
                        _2876 = _2720;
                        _2877 = _2722;
                        _2878 = _2724;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2718;
                frontier_phi_60_61_ladder_1 = _2724;
                frontier_phi_60_61_ladder_2 = _2722;
                frontier_phi_60_61_ladder_3 = _2720;
                frontier_phi_60_61_ladder_4 = _2716;
                frontier_phi_60_61_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_60_61_ladder = _2596;
                frontier_phi_60_61_ladder_1 = _2602;
                frontier_phi_60_61_ladder_2 = _2600;
                frontier_phi_60_61_ladder_3 = _2598;
                frontier_phi_60_61_ladder_4 = _2594;
                frontier_phi_60_61_ladder_5 = _2592;
            }
            _2713 = frontier_phi_60_61_ladder_5;
            _2715 = frontier_phi_60_61_ladder_4;
            _2717 = frontier_phi_60_61_ladder;
            _2719 = frontier_phi_60_61_ladder_3;
            _2721 = frontier_phi_60_61_ladder_2;
            _2723 = frontier_phi_60_61_ladder_1;
        }
        float _2728 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2504 = (_2728 * _2719) + _1959;
        _2506 = (_2728 * _2721) + _1961;
        _2508 = (_2728 * _2723) + _1963;
        _2510 = ((_2713 * 0.039999999105930328369140625) * _2728) + _2289;
        _2512 = ((_2715 * 0.039999999105930328369140625) * _2728) + _2291;
        _2514 = ((_2717 * 0.039999999105930328369140625) * _2728) + _2293;
    }
    else
    {
        _2504 = _1959;
        _2506 = _1961;
        _2508 = _1963;
        _2510 = _2289;
        _2512 = _2291;
        _2514 = _2293;
    }
    float _4467 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4478 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4489 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _2531 = ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2504 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _766))) + ((_2510 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1597)) * cbPerFrame._m0[3u].x);
    float _2532 = ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2506 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _766))) + ((_2512 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1597)) * cbPerFrame._m0[3u].x);
    float _2533 = ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2508 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _766))) + ((_2514 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1597)) * cbPerFrame._m0[3u].x);
    uint _2534 = _241 + 6u;
    float _2542 = _703 / cbSceneParam._m0[86u].x;
    float _2543 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, (log2((isnan(cbSceneParam._m0[77u].w) ? _628 : (isnan(_628) ? cbSceneParam._m0[77u].w : min(_628, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2559 = _2557.x;
    float _2560 = _2557.y;
    float _2561 = _2557.z;
    float _2562 = _2557.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_628 > cbSceneParam._m0[78u].w)
    {
        float _2617 = isnan(_628) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _628 : min(cbSceneParam._m0[80u].w, _628));
        float _2618 = _2617 / _628;
        float _2629 = _2618 * _679;
        float _2630 = _680 * _2618;
        float _2631 = (-0.0) - _2630;
        float _2633 = _2618 * _681;
        float _2635 = (cbSceneParam._m0[77u].w * _2631) / _2617;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2630;
        float _2643 = sqrt(((_2629 * _2629) + (_2630 * _2630)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2617)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2631 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2776 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2830 = ((abs(_2643 / _2631) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2653 * _2785) - exp2(_2653 * _2786)) * _2774))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2562);
        _2655 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2559;
        _2657 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2560;
        _2659 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2561;
        _2661 = _2841 * _2562;
    }
    else
    {
        _2655 = _2559;
        _2657 = _2560;
        _2659 = _2561;
        _2661 = _2562;
    }
    bool _2868;
    vec4 _2671;
    vec4 _2693;
    float _2695;
    float _2699;
    float _2700;
    float _2701;
    float _2702;
    bool _2712;
    for (;;)
    {
        _2671 = cbMatDynParam._m0[0u];
        float _2673 = roundEven(_2671.y);
        bool _2674 = _2673 == 3.0;
        float _2675 = log2(_2661);
        float _2682 = exp2(_2675 * cbSceneParam._m0[78u].x) * _2531;
        float _2683 = exp2(_2675 * cbSceneParam._m0[78u].y) * _2532;
        float _2684 = exp2(_2675 * cbSceneParam._m0[78u].z) * _2533;
        float _2691 = _692 + (-0.5);
        _2693 = cbMtdParam._m0[1u];
        _2695 = _2693.y * _2691;
        float _2698 = (_2673 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2699 = _2698 * (_2674 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2655)));
        _2700 = _2698 * (_2674 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2657)));
        _2701 = _2698 * (_2674 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2659)));
        _2702 = _2691 * 0.999000012874603271484375;
        _2712 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2712)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2702) < 0.5)
            {
                _2868 = true;
                break;
            }
        }
        uint _2809 = _741 + uint(_2671.w);
        if ((cbInstanceData._m0[_2809].w < 1.0) && ((cbInstanceData._m0[_2809].w + _2702) < 0.5))
        {
            _2868 = true;
            break;
        }
        if ((_2695 + 1.0) < _2693.x)
        {
            _2868 = true;
            break;
        }
        _2868 = false;
        break;
    }
    float _3073;
    if (_2868)
    {
        discard_state = true;
        _3073 = 0.0;
    }
    else
    {
        _3073 = cbInstanceData._m0[_2534].w;
    }
    SV_Target.x = _2699;
    SV_Target.y = _2700;
    SV_Target.z = _2701;
    SV_Target.w = _3073;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2534].w;
    discard_exit();
}


