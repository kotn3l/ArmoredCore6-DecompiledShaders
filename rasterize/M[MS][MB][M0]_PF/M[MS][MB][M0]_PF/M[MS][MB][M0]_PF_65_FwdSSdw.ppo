#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1094;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3425 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3436 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3447 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _318 = _313.x * cbMtdParam._m0[11u].x;
    float _319 = _313.y * cbMtdParam._m0[11u].y;
    float _320 = _313.z * cbMtdParam._m0[11u].z;
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _275) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _276) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _388 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_375 - _388) * cbMtdParam._m0[24u].x) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3458 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _413 = (_406 * ((_339.x * cbMtdParam._m0[12u].x) - _318)) + _318;
    float _414 = (_406 * ((_339.y * cbMtdParam._m0[12u].y) - _319)) + _319;
    float _415 = (_406 * ((_339.z * cbMtdParam._m0[12u].z) - _320)) + _320;
    float _419 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _413;
    float _422 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _414;
    float _425 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _415;
    float _432 = ((_413 - _419) * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) + _419;
    float _433 = ((_414 - _422) * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) + _422;
    float _434 = ((_415 - _425) * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) + _425;
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _275) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _276) + cbTextureTilingScale._m0[4u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _493 = _489.z;
    float _502 = ((_472.z - _493) * _406) + _493;
    float _505 = ((((_472.x - _491) * _406) + _491) * 2.0) + (-1.0);
    float _506 = ((((_472.y - _492) * _406) + _492) * 2.0) + (-1.0);
    float _507 = dot(vec2(_505, _506), vec2(_505, _506));
    float _3469 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _546 = (_505 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_447.x * 2.0) + (-1.0)))) + (((_534.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _547 = (_506 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_447.y * 2.0) + (-1.0)))) + (((_534.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _552 = (((_447.z - _502) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _502;
    float _556 = ((_534.z - _552) * cbMtdParam._m0[19u].w) + _552;
    float _558 = cbMtdParam._m0[22u].x + _534.w;
    float _561 = fma(_512, _222 * NORMAL.x, fma(_547, _229 * TANGENT.x, (_215 * _207) * _546));
    float _564 = fma(_512, _222 * NORMAL.y, fma(_547, _229 * TANGENT.y, (_215 * _208) * _546));
    float _567 = fma(_512, _222 * NORMAL.z, fma(_547, _229 * TANGENT.z, (_215 * _209) * _546));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3480 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _575 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3502 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3513 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3524 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _679 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _682 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _685 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _699 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _705 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_699].x;
    float _706 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_699].y;
    float _707 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_699].z;
    float _3535 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    vec4 _719 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _723 = ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * TEXCOORD_5.w) * _719.x;
    float _724 = dot(vec3(_572, _573, _574), vec3(_652, _653, _654));
    float _727 = _724 * 2.0;
    float _731 = (_727 * _572) - _652;
    float _732 = (_727 * _573) - _653;
    float _733 = (_727 * _574) - _654;
    float _737 = abs(dot(vec3(_652, _653, _654), vec3(_572, _573, _574)));
    float _3568 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _739 = sqrt(_575);
    float _752 = exp2((_739 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_739 * 3.0));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784));
        float _822 = fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784));
        float _826 = fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784));
        float _851 = _784 + _572;
        float _852 = _788 + _573;
        float _853 = _792 + _574;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_572, _573, _574), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3616 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_572, _573, _574), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3649 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_572, _573, _574), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3682 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1132 = fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784));
        float _1136 = fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784));
        float _1140 = fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784));
        float _1163 = _784 + _572;
        float _1164 = _788 + _573;
        float _1165 = _792 + _574;
        float _1175 = fma(_1165, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163)) - _1132;
        float _1176 = fma(_1165, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163)) - _1136;
        float _1177 = fma(_1165, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163)) - _1140;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1132 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1136 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[35u].z) + ((((((_1140 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1231 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1198.x + (-0.5));
        float _1233 = _1231 * (_1198.y + (-0.5));
        float _1234 = _1231 * (_1198.z + (-0.5));
        float _1241 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1205.x + (-0.5));
        float _1243 = _1241 * (_1205.y + (-0.5));
        float _1244 = _1241 * (_1205.z + (-0.5));
        float _1251 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1212.x + (-0.5));
        float _1253 = _1251 * (_1212.y + (-0.5));
        float _1254 = _1251 * (_1212.z + (-0.5));
        float _1261 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1219.x + (-0.5));
        float _1263 = _1261 * (_1219.y + (-0.5));
        float _1264 = _1261 * (_1219.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_572, _573, _574), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3745 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1295 + 1.0))) + _1300) * _1265;
        float _1310 = _1233 * 0.5;
        float _1311 = _1243 * 0.5;
        float _1312 = _1253 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_572, _573, _574), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3778 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1337 + 1.0))) + _1342) * _1266;
        float _1352 = _1234 * 0.5;
        float _1353 = _1244 * 0.5;
        float _1354 = _1254 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_572, _573, _574), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3811 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1379 + 1.0))) + _1384) * _1267;
        _1401 = _1234;
        _1402 = _1233;
        _1403 = _1232;
        _1404 = _1244;
        _1405 = _1243;
        _1406 = _1242;
        _1407 = _1254;
        _1408 = _1253;
        _1409 = _1252;
        _1410 = _1267;
        _1411 = _1266;
        _1412 = _1265;
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1094;
        _1402 = _1094;
        _1403 = _1094;
        _1404 = _1094;
        _1405 = _1094;
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1106)) + _1106;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1107)) + _1107;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1108)) + _1108;
    float _1448 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1425));
    float _1469 = _731 * 0.5;
    float _1470 = _732 * 0.5;
    float _1471 = _733 * 0.5;
    float _1472 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1475 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1478 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1512;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1485 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1489 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1493 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1500 = dot(vec4(cbModelParam._m0[39u]), vec4(_1469, _1470, _1471, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1523;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1514 = dot(vec4(cbModelParam._m0[40u]), vec4(_1469, _1470, _1471, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1527 = (_1523 * cbModelParam._m0[1u].x) + (_1512 * (1.0 - cbModelParam._m0[1u].x));
    float _1537 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1537 : min(cbModelParam._m0[25u].z, _1537));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1587 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1591 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1595 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1598 = fma(_733, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731));
        float _1601 = fma(_733, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731));
        float _1604 = fma(_733, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731));
        float _1632;
        if (_1598 > 0.0)
        {
            _1632 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1632 = frontier_phi_14_12_ladder;
        }
        float _1855;
        if (_1601 > 0.0)
        {
            _1855 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1855 = frontier_phi_23_19_ladder;
        }
        float _2101;
        if (_1604 > 0.0)
        {
            _2101 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2101 = frontier_phi_35_30_ladder;
        }
        float _2103 = isnan(_1855) ? _1632 : (isnan(_1632) ? _1855 : min(_1632, _1855));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1598) + _1587;
        float _2109 = (_2104 * _1601) + _1591;
        float _2110 = (_2104 * _1604) + _1595;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2111;
        float _2115 = _2111 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 > _2115) || ((_2109 < _2113) || ((_2108 < _2113) || (_2108 > _2115))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2110, cbModelParam._m0[9u].z, fma(_2109, cbModelParam._m0[9u].y, _2108 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2110, cbModelParam._m0[10u].z, fma(_2109, cbModelParam._m0[10u].y, _2108 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2110, cbModelParam._m0[11u].z, fma(_2109, cbModelParam._m0[11u].y, _2108 * cbModelParam._m0[11u].x))), _1538);
            frontier_phi_13_35_ladder = _2234.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2234.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2234.x * cbModelParam._m0[1u].y;
        }
        _1620 = frontier_phi_13_35_ladder_2;
        _1622 = frontier_phi_13_35_ladder_1;
        _1624 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_731, _732, _733), _1538);
        _1620 = _1608.x * cbModelParam._m0[1u].y;
        _1622 = _1608.y * cbModelParam._m0[1u].y;
        _1624 = _1608.z * cbModelParam._m0[1u].y;
    }
    float _1628 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1628 : min(cbModelParam._m0[25u].w, _1628));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_733, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731));
        float _1698 = fma(_733, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731));
        float _1701 = fma(_733, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731));
        float _1860;
        if (_1695 > 0.0)
        {
            _1860 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1860 = frontier_phi_25_21_ladder;
        }
        float _2128;
        if (_1698 > 0.0)
        {
            _2128 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2128 = frontier_phi_37_32_ladder;
        }
        float _2333;
        if (_1701 > 0.0)
        {
            _2333 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2333 = frontier_phi_46_43_ladder;
        }
        float _2335 = isnan(_2128) ? _1860 : (isnan(_1860) ? _2128 : min(_1860, _2128));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1695) + _1684;
        float _2341 = (_2336 * _1698) + _1688;
        float _2342 = (_2336 * _1701) + _1692;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2344 = (-1.0) - _2343;
        float _2346 = _2343 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2342 > _2346) || ((_2342 < _2344) || ((_2341 > _2346) || ((_2341 < _2344) || ((_2340 < _2344) || (_2340 > _2346))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2342, cbModelParam._m0[17u].z, fma(_2341, cbModelParam._m0[17u].y, _2340 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2342, cbModelParam._m0[18u].z, fma(_2341, cbModelParam._m0[18u].y, _2340 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2342, cbModelParam._m0[19u].z, fma(_2341, cbModelParam._m0[19u].y, _2340 * cbModelParam._m0[19u].x))), _1629);
            frontier_phi_22_46_ladder = _2541.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2541.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2541.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_22_46_ladder_2;
        _1722 = frontier_phi_22_46_ladder_1;
        _1724 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_731, _732, _733), _1629);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1736 = ((((1.0 - _752) * ((_739 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_752 * _739)) * _723;
    float _1737 = _1736 * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1738 = _1736 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1739 = _1736 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    vec4 _1756 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1758 = _1756.w;
    float _1770 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1758);
    float _1771 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1758);
    float _1772 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1758);
    uvec4 _1776 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1778 = _1776.x * 14u;
    uint _1779 = _1778 + 13u;
    float _1786 = _723 + (-1.0);
    float _1791 = (cbLight._m0[_1779].x * _1786) + 1.0;
    float _1792 = (cbLight._m0[_1779].y * _1786) + 1.0;
    float _1793 = (cbLight._m0[_1779].z * _1786) + 1.0;
    float _1794 = (cbLight._m0[_1779].w * _1786) + 1.0;
    uint _1795 = _1778 + 5u;
    float _1801 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    uint _1805 = _1778 + 4u;
    float _1814 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1818 = _1778 | 1u;
    float _1829 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_572, _573, _574));
    float _1832 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_572, _573, _574));
    float _3947 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _3958 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1837 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1839 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _1846 = ((cbLight._m0[_1795].x * _1801) * _1839) + (((cbLight._m0[_1805].x * _1770) * _1814) * _1837);
    float _1847 = ((_1801 * cbLight._m0[_1795].y) * _1839) + (((cbLight._m0[_1805].y * _1771) * _1814) * _1837);
    float _1848 = ((_1801 * cbLight._m0[_1795].z) * _1839) + (((cbLight._m0[_1805].z * _1772) * _1814) * _1837);
    uvec4 _1852 = floatBitsToUint(cbLight._m0[_1778 + 12u]);
    bool _1854 = _1852.x == 0u;
    float _1865;
    float _1867;
    float _1869;
    if (_1854)
    {
        _1865 = _1846;
        _1867 = _1847;
        _1869 = _1848;
    }
    else
    {
        uint _1873 = _1778 + 6u;
        float _1889 = (dot(vec3(cbLight._m0[_1778 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _3969 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1892 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1865 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1846;
        _1867 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1847;
        _1869 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1848;
    }
    bool _1872 = _1852.y == 0u;
    float _1910;
    float _1912;
    float _1914;
    if (_1872)
    {
        _1910 = _1865;
        _1912 = _1867;
        _1914 = _1869;
    }
    else
    {
        uint _2072 = _1778 + 7u;
        float _2088 = (dot(vec3(cbLight._m0[_1778 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2089 = _2088 * _2088;
        float _3985 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2091 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _1910 = (((cbLight._m0[_2072].x * 0.3183098733425140380859375) * _2090) * _2091) + _1865;
        _1912 = (((cbLight._m0[_2072].y * 0.3183098733425140380859375) * _2090) * _2091) + _1867;
        _1914 = (((cbLight._m0[_2072].z * 0.3183098733425140380859375) * _2090) * _2091) + _1869;
    }
    uint _1917 = _1778 + 8u;
    float _1930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _575) * 0.949999988079071044921875);
    float _1931 = _1930 * _1930;
    float _1932 = cbLight._m0[_1778].x + _652;
    float _1933 = cbLight._m0[_1778].y + _653;
    float _1934 = cbLight._m0[_1778].z + _654;
    float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
    float _1939 = _1938 * _1932;
    float _1940 = _1938 * _1933;
    float _1941 = _1938 * _1934;
    float _1942 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1778].xyz));
    float _4001 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _1946 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1947 = dot(vec3(_572, _573, _574), vec3(_1939, _1940, _1941));
    float _4023 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1951 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_1939, _1940, _1941));
    float _4034 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1955 = _1931 * _1931;
    float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
    float _1970 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1971 = 1.0 - _1931;
    float _1982 = (0.5 / (((_1946 * ((_1945 * _1971) + _1931)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _1971) + _1931) * _1945))) * _1945;
    float _4045 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1984 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
    uint _1998 = _1778 + 9u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _575) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1818].x + _652;
    float _2012 = cbLight._m0[_1818].y + _653;
    float _2013 = cbLight._m0[_1818].z + _654;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1818].xyz));
    float _4056 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2025 = dot(vec3(_572, _573, _574), vec3(_2018, _2019, _2020));
    float _4067 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2018, _2019, _2020));
    float _4078 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2010 * _2010;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2010;
    float _2057 = (0.5 / (((_1946 * ((_2024 * _2047) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2047) + _2010) * _2024))) * _2024;
    float _4089 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    float _2069 = (((_2046 * cbLight._m0[_1998].x) * _2059) * _1801) + ((((cbLight._m0[_1917].x * _1770) * _1970) * _1984) * _1814);
    float _2070 = (((_2046 * cbLight._m0[_1998].y) * _2059) * _1801) + ((((cbLight._m0[_1917].y * _1771) * _1970) * _1984) * _1814);
    float _2071 = (((_2046 * cbLight._m0[_1998].z) * _2059) * _1801) + ((((cbLight._m0[_1917].z * _1772) * _1970) * _1984) * _1814);
    float _2133;
    float _2135;
    float _2137;
    if (_1854)
    {
        _2133 = _2069;
        _2135 = _2070;
        _2137 = _2071;
    }
    else
    {
        uint _2139 = _1778 + 2u;
        uint _2143 = _1778 + 10u;
        float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _575) * 0.949999988079071044921875);
        float _2158 = _2157 * _2157;
        float _2159 = cbLight._m0[_2139].x + _652;
        float _2160 = cbLight._m0[_2139].y + _653;
        float _2161 = cbLight._m0[_2139].z + _654;
        float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
        float _2166 = _2165 * _2159;
        float _2167 = _2165 * _2160;
        float _2168 = _2165 * _2161;
        float _2169 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2139].xyz));
        float _4100 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2173 = dot(vec3(_572, _573, _574), vec3(_2166, _2167, _2168));
        float _4111 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2177 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2166, _2167, _2168));
        float _4122 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2181 = _2158 * _2158;
        float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
        float _2194 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2195 = 1.0 - _2158;
        float _2205 = (0.5 / (((_1946 * ((_2172 * _2195) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2195) + _2158) * _2172))) * _2172;
        float _4133 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2207 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
        float _2208 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2133 = (((_2194 * cbLight._m0[_2143].x) * _2207) * _2208) + _2069;
        _2135 = (((_2194 * cbLight._m0[_2143].y) * _2207) * _2208) + _2070;
        _2137 = (((_2194 * cbLight._m0[_2143].z) * _2207) * _2208) + _2071;
    }
    float _2243;
    float _2245;
    float _2247;
    if (_1872)
    {
        _2243 = _2133;
        _2245 = _2135;
        _2247 = _2137;
    }
    else
    {
        uint _2254 = _1778 + 3u;
        uint _2258 = _1778 + 11u;
        float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _575) * 0.949999988079071044921875);
        float _2273 = _2272 * _2272;
        float _2274 = cbLight._m0[_2254].x + _652;
        float _2275 = cbLight._m0[_2254].y + _653;
        float _2276 = cbLight._m0[_2254].z + _654;
        float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
        float _2281 = _2280 * _2274;
        float _2282 = _2280 * _2275;
        float _2283 = _2280 * _2276;
        float _2284 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2254].xyz));
        float _4149 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2288 = dot(vec3(_572, _573, _574), vec3(_2281, _2282, _2283));
        float _4160 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2292 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2281, _2282, _2283));
        float _4171 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2296 = _2273 * _2273;
        float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
        float _2309 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2310 = 1.0 - _2273;
        float _2320 = (0.5 / (((_1946 * ((_2287 * _2310) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2310) + _2273) * _2287))) * _2287;
        float _4182 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2322 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
        float _2323 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _2243 = (((_2309 * cbLight._m0[_2258].x) * _2322) * _2323) + _2133;
        _2245 = (((_2309 * cbLight._m0[_2258].y) * _2322) * _2323) + _2135;
        _2247 = (((_2309 * cbLight._m0[_2258].z) * _2322) * _2323) + _2137;
    }
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_1776.y == 0u)
    {
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2398;
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2398;
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2398;
        uvec4 _2413 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2414 = _2413.x;
        uint _2425 = uint((float(_2413.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2414))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2414)));
        float _2435 = (log2(_2401 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2436 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        uint _2439 = uint(isnan(14.0) ? _2436 : (isnan(_2436) ? 14.0 : min(_2436, 14.0)));
        uvec4 _2444 = texelFetch(g_lightClusterGridBuffer, int(((_2439 << 2u) + (_2425 << 6u)) >> 2u));
        uint _2445 = _2444.x;
        uint _2446 = _2413.z;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((((1u << ((_2446 >> 4u) & 15u)) + 4294967295u) & _2445) == 0u) || ((_2446 & 240u) == 0u))
        {
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
        }
        else
        {
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            uint _2697 = 0u;
            uint _2706;
            bool _2707;
            for (;;)
            {
                _2706 = texelFetch(g_lightClassification, int((((_2439 << 5u) + (_2425 << 9u)) + (_2697 << 2u)) >> 2u)).x;
                _2707 = _2706 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2707)
                {
                    frontier_phi_61_pred = _2691;
                    frontier_phi_61_pred_1 = _2696;
                    frontier_phi_61_pred_2 = _2695;
                    frontier_phi_61_pred_3 = _2694;
                    frontier_phi_61_pred_4 = _2693;
                    frontier_phi_61_pred_5 = _2692;
                }
                else
                {
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    uint _2821;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2706;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    for (;;)
                    {
                        uint _2825 = uint(findLSB(_2821)) + (_2697 << 5u);
                        uint _2822 = (_2821 + 4294967295u) & _2821;
                        uint _2827 = _2825 * 48u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2847 = (_2825 * 48u) + 4u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2866 = (_2825 * 48u) + 8u;
                        vec3 _2877 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x));
                        float _2881 = _2841.x - _2399;
                        float _2882 = _2841.y - _2400;
                        float _2883 = _2841.z - _2401;
                        float _2884 = dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883));
                        float _2887 = inversesqrt(_2884);
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2891 = dot(vec3(_679, _682, _685), vec3(_2888, _2889, _2890));
                        float _2896 = 1.0 - (_2884 * _2841.w);
                        float _4208 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2898 = sqrt(_2884) * _2860.w;
                        float _2901 = 1.39999997615814208984375 / (_2898 + 1.39999997615814208984375);
                        float _2902 = _2901 * _2901;
                        float _2905 = ((1.0 - _2902) * _2891) + _2902;
                        float _2908 = _2898 * _2898;
                        float _2912 = ((isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))) * _2897) / ((_2908 * 0.699999988079071044921875) + 1.0);
                        float _2916 = (-0.0) - _2399;
                        float _2917 = (-0.0) - _2400;
                        float _2918 = (-0.0) - _2401;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2933 = exp2(log2(1.0 / ((_2908 * 3.5) + 5.0)) * 0.25);
                        float _2934 = 1.0 - _739;
                        float _2941 = sqrt(1.0 - ((1.0 - (_2934 * _2934)) * (1.0 - (_2933 * _2933))));
                        float _2942 = _2941 * _2941;
                        float _2943 = _2942 * _2942;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2954 = dot(vec3(_679, _682, _685), vec3(_2923, _2924, _2925));
                        float _4224 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2958 = dot(vec3(_679, _682, _685), vec3(_2950 * _2944, _2950 * _2945, _2950 * _2946));
                        float _4235 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2965 = ((_2961 * _2961) * (_2943 + (-1.0))) + 1.0;
                        float _2966 = _2901 * _2942;
                        float _2967 = _2966 * _2966;
                        float _2970 = ((1.0 - _2967) * _2891) + _2967;
                        float _4246 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2972 = 1.0 - _2942;
                        float _2982 = (0.5 / (((_2971 * ((_2957 * _2972) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2971 * _2972) + _2942) * _2957))) * _2971;
                        float _4257 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2993 = (((_2943 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_2965 * _2965) * ((_2908 * 2.1991131305694580078125) + 3.141590118408203125))) * _2897;
                        _2750 = (_2912 * _2860.x) + _2818;
                        _2751 = (_2912 * _2860.y) + _2819;
                        _2752 = (_2912 * _2860.z) + _2820;
                        _2747 = (_2993 * _2877.x) + _2815;
                        _2748 = (_2993 * _2877.y) + _2816;
                        _2749 = (_2993 * _2877.z) + _2817;
                        if (_2822 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2822;
                        }
                    }
                    frontier_phi_61_pred = _2747;
                    frontier_phi_61_pred_1 = _2752;
                    frontier_phi_61_pred_2 = _2751;
                    frontier_phi_61_pred_3 = _2750;
                    frontier_phi_61_pred_4 = _2749;
                    frontier_phi_61_pred_5 = _2748;
                }
                _2547 = frontier_phi_61_pred;
                _2557 = frontier_phi_61_pred_1;
                _2555 = frontier_phi_61_pred_2;
                _2553 = frontier_phi_61_pred_3;
                _2551 = frontier_phi_61_pred_4;
                _2549 = frontier_phi_61_pred_5;
                uint _2698 = _2697 + 1u;
                if (_2698 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2691 = _2547;
                    _2692 = _2549;
                    _2693 = _2551;
                    _2694 = _2553;
                    _2695 = _2555;
                    _2696 = _2557;
                    _2697 = _2698;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
        }
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.z;
        uint _2563 = (_2561 >> 8u) & 15u;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((4294967295u << _2563) & _2445) == 0u)
        {
            _2659 = _2546;
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
            _2667 = _2554;
            _2669 = _2556;
        }
        else
        {
            float _2684 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
            float _2685 = _2684 * _2399;
            float _2686 = _2684 * _2400;
            float _2687 = _2684 * _2401;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2563 < ((_2561 >> 12u) & 15u))
            {
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2798 = _2546;
                float _2799 = _2548;
                float _2800 = _2550;
                float _2801 = _2552;
                float _2802 = _2554;
                float _2803 = _2556;
                uint _2804 = _2563;
                uint _2813;
                bool _2814;
                for (;;)
                {
                    _2813 = texelFetch(g_lightClassification, int((((_2439 << 5u) + (_2425 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                    _2814 = _2813 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2814)
                    {
                        frontier_phi_67_pred = _2801;
                        frontier_phi_67_pred_1 = _2802;
                        frontier_phi_67_pred_2 = _2803;
                        frontier_phi_67_pred_3 = _2800;
                        frontier_phi_67_pred_4 = _2799;
                        frontier_phi_67_pred_5 = _2798;
                    }
                    else
                    {
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        uint _3017 = _2813;
                        uint _3018;
                        vec4 _3043;
                        float _3044;
                        vec4 _3059;
                        vec3 _3071;
                        vec4 _3086;
                        vec4 _3101;
                        float _3147;
                        bool _3148;
                        for (;;)
                        {
                            uint _3028 = ((_2804 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3017));
                            _3018 = (_3017 + 4294967295u) & _3017;
                            uint _3030 = _3028 * 40u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            _3044 = _3043.w;
                            uint _3046 = (_3028 * 40u) + 4u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3061 = (_3028 * 40u) + 8u;
                            _3071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x));
                            uint _3073 = (_3028 * 40u) + 16u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3088 = (_3028 * 40u) + 20u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3028 * 40u) + 24u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3122 = (_3028 * 40u) + 28u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3147 = fma(_2401, _3135.z, fma(_2400, _3135.y, _3135.x * _2399)) + _3135.w;
                            _3148 = !((fma(_2401, _3116.z, fma(_2400, _3116.y, _3116.x * _2399)) + _3116.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3148)
                            {
                                float _3175 = _3043.x - _2399;
                                float _3176 = _3043.y - _2400;
                                float _3177 = _3043.z - _2401;
                                float _3178 = dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177));
                                float _3181 = inversesqrt(_3178);
                                float _3182 = _3181 * _3175;
                                float _3183 = _3181 * _3176;
                                float _3184 = _3181 * _3177;
                                float _3188 = 1.0 - (_3178 / (_3044 * _3044));
                                float _4268 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3193 = sqrt(_3178) * _3059.w;
                                float _3195 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                                float _3196 = _3195 * _3195;
                                float _3199 = ((1.0 - _3196) * dot(vec3(_3182, _3183, _3184), vec3(_679, _682, _685))) + _3196;
                                float _3202 = _3193 * _3193;
                                float _3206 = (fma(_2401, _3086.z, fma(_2400, _3086.y, _3086.x * _2399)) + _3086.w) / _3147;
                                float _3207 = (fma(_2401, _3101.z, fma(_2400, _3101.y, _3101.x * _2399)) + _3101.w) / _3147;
                                float _3211 = 1.0 - dot(vec2(_3206, _3207), vec2(_3206, _3207));
                                float _4284 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3213 = _3212 * (((isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))) * _3189) / ((_3202 * 0.699999988079071044921875) + 1.0));
                                float _3225 = exp2(log2(1.0 / ((_3202 * 3.5) + 5.0)) * 0.25);
                                float _3226 = 1.0 - _739;
                                float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                                float _3234 = _3233 * _3233;
                                float _3235 = _3234 * _3234;
                                float _3236 = _3182 - _2685;
                                float _3237 = _3183 - _2686;
                                float _3238 = _3184 - _2687;
                                float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                                float _3246 = dot(vec3(_679, _682, _685), vec3((-0.0) - _2685, (-0.0) - _2686, (-0.0) - _2687));
                                float _4295 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3250 = dot(vec3(_679, _682, _685), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                                float _4306 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3253 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                                float _3258 = _3195 * _3234;
                                float _3259 = _3258 * _3258;
                                float _3265 = ((1.0 - _3259) * dot(vec3(_679, _682, _685), vec3(_3182, _3183, _3184))) + _3259;
                                float _4317 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3267 = 1.0 - _3234;
                                float _3277 = (0.5 / (((_3266 * ((_3249 * _3267) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3234) * _3249))) * _3266;
                                float _4328 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3287 = (_3212 * _3189) * (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3257 * _3257) * ((_3202 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3287 * _3071.x;
                                frontier_phi_73_pred_1 = _3287 * _3071.y;
                                frontier_phi_73_pred_2 = _3213 * _3059.z;
                                frontier_phi_73_pred_3 = _3213 * _3059.y;
                                frontier_phi_73_pred_4 = _3213 * _3059.x;
                                frontier_phi_73_pred_5 = _3287 * _3071.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3291 = frontier_phi_73_pred;
                            _3292 = frontier_phi_73_pred_1;
                            _3296 = frontier_phi_73_pred_2;
                            _3295 = frontier_phi_73_pred_3;
                            _3294 = frontier_phi_73_pred_4;
                            _3293 = frontier_phi_73_pred_5;
                            _3001 = _3294 + _3014;
                            _3002 = _3295 + _3015;
                            _3003 = _3296 + _3016;
                            _2998 = _3291 + _3011;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            if (_3018 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3018;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3001;
                        frontier_phi_67_pred_1 = _3002;
                        frontier_phi_67_pred_2 = _3003;
                        frontier_phi_67_pred_3 = _3000;
                        frontier_phi_67_pred_4 = _2999;
                        frontier_phi_67_pred_5 = _2998;
                    }
                    _2666 = frontier_phi_67_pred;
                    _2668 = frontier_phi_67_pred_1;
                    _2670 = frontier_phi_67_pred_2;
                    _2664 = frontier_phi_67_pred_3;
                    _2662 = frontier_phi_67_pred_4;
                    _2660 = frontier_phi_67_pred_5;
                    uint _2805 = _2804 + 1u;
                    if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2798 = _2660;
                        _2799 = _2662;
                        _2800 = _2664;
                        _2801 = _2666;
                        _2802 = _2668;
                        _2803 = _2670;
                        _2804 = _2805;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2668;
                frontier_phi_55_56_ladder_1 = _2670;
                frontier_phi_55_56_ladder_2 = _2666;
                frontier_phi_55_56_ladder_3 = _2664;
                frontier_phi_55_56_ladder_4 = _2662;
                frontier_phi_55_56_ladder_5 = _2660;
            }
            else
            {
                frontier_phi_55_56_ladder = _2554;
                frontier_phi_55_56_ladder_1 = _2556;
                frontier_phi_55_56_ladder_2 = _2552;
                frontier_phi_55_56_ladder_3 = _2550;
                frontier_phi_55_56_ladder_4 = _2548;
                frontier_phi_55_56_ladder_5 = _2546;
            }
            _2659 = frontier_phi_55_56_ladder_5;
            _2661 = frontier_phi_55_56_ladder_4;
            _2663 = frontier_phi_55_56_ladder_3;
            _2665 = frontier_phi_55_56_ladder_2;
            _2667 = frontier_phi_55_56_ladder;
            _2669 = frontier_phi_55_56_ladder_1;
        }
        float _2674 = isnan(1.0) ? _723 : (isnan(_723) ? 1.0 : min(_723, 1.0));
        _2458 = (_2674 * _2665) + _1910;
        _2460 = (_2674 * _2667) + _1912;
        _2462 = (_2674 * _2669) + _1914;
        _2464 = ((_2659 * 0.039999999105930328369140625) * _2674) + _2243;
        _2466 = ((_2661 * 0.039999999105930328369140625) * _2674) + _2245;
        _2468 = ((_2663 * 0.039999999105930328369140625) * _2674) + _2247;
    }
    else
    {
        _2458 = _1910;
        _2460 = _1912;
        _2462 = _1914;
        _2464 = _2243;
        _2466 = _2245;
        _2468 = _2247;
    }
    float _4344 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4355 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4366 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    uint _2488 = _256 + 6u;
    float _2496 = _660 / cbSceneParam._m0[86u].x;
    float _2497 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2511 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2513 = _2511.x;
    float _2514 = _2511.y;
    float _2515 = _2511.z;
    float _2516 = _2511.w;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2571 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2572 = _2571 / _593;
        float _2583 = _2572 * _645;
        float _2584 = _646 * _2572;
        float _2585 = (-0.0) - _2584;
        float _2587 = _2572 * _647;
        float _2589 = (cbSceneParam._m0[77u].w * _2585) / _2571;
        float _2590 = _2589 + cbSceneParam._m0[79u].w;
        float _2591 = cbSceneParam._m0[79u].w - _2584;
        float _2597 = sqrt(((_2583 * _2583) + (_2584 * _2584)) + (_2587 * _2587));
        float _2600 = (1.0 - (cbSceneParam._m0[77u].w / _2571)) * _2597;
        float _2605 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2607 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2760;
        if (abs((_2585 - _2589) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2760 = ((((_2590 > 0.0) ? exp2(_2605 * _2590) : (2.0 - exp2(_2607 * _2590))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2600;
        }
        else
        {
            float _2720 = 1.0 / cbSceneParam._m0[80u].x;
            float _2721 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : max(_2590, _2591));
            float _2722 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : min(_2590, _2591));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            _2760 = ((abs(_2597 / _2585) * cbSceneParam._m0[80u].y) * ((((_2731 - _2732) * 2.0) - ((exp2(_2605 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0)))) - exp2(_2605 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))))) * _2720)) - ((exp2(_2607 * _2731) - exp2(_2607 * _2732)) * _2720))) + (_2600 * cbSceneParam._m0[80u].z);
        }
        vec4 _2762 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, 1.0), 0.0);
        float _2771 = exp2((_2760 * (-1.44269502162933349609375)) * (1.0 - _2762.w));
        float _2772 = log2(_2771);
        float _2788 = log2(_2516);
        _2609 = (exp2(_2788 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].x)) * _2762.x) / cbSceneParam._m0[78u].x)) + _2513;
        _2611 = (exp2(_2788 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].y)) * _2762.y) / cbSceneParam._m0[78u].y)) + _2514;
        _2613 = (exp2(_2788 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].z)) * _2762.z) / cbSceneParam._m0[78u].z)) + _2515;
        _2615 = _2771 * _2516;
    }
    else
    {
        _2609 = _2513;
        _2611 = _2514;
        _2613 = _2515;
        _2615 = _2516;
    }
    float _2627 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2628 = _2627 == 3.0;
    float _2629 = log2(_2615);
    float _2636 = exp2(_2629 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2458 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _723))) + ((_2464 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2637 = exp2(_2629 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2460 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _723))) + ((_2466 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2638 = exp2(_2629 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2462 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _723))) + ((_2468 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2647 = (_2627 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2647 * (_2628 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.y = _2647 * (_2628 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.z = _2647 * (_2628 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.w = cbInstanceData._m0[_2488].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2488].w;
}


