#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1096;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3686 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3697 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3708 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _320 = _315.x * cbMtdParam._m0[11u].x;
    float _321 = _315.y * cbMtdParam._m0[11u].y;
    float _322 = _315.z * cbMtdParam._m0[11u].z;
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _278) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _377 = _375.x;
    float _390 = dot(vec4(_377, _375.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_377 - _390) * cbMtdParam._m0[24u].x) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3719 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _415 = (_408 * ((_341.x * cbMtdParam._m0[12u].x) - _320)) + _320;
    float _416 = (_408 * ((_341.y * cbMtdParam._m0[12u].y) - _321)) + _321;
    float _417 = (_408 * ((_341.z * cbMtdParam._m0[12u].z) - _322)) + _322;
    float _421 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _415;
    float _424 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _416;
    float _427 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _417;
    float _434 = ((_415 - _421) * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) + _421;
    float _435 = ((_416 - _424) * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) + _424;
    float _436 = ((_417 - _427) * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) + _427;
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _277) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _278) + cbTextureTilingScale._m0[4u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _495 = _491.z;
    float _504 = ((_474.z - _495) * _408) + _495;
    float _507 = ((((_474.x - _493) * _408) + _493) * 2.0) + (-1.0);
    float _508 = ((((_474.y - _494) * _408) + _494) * 2.0) + (-1.0);
    float _509 = dot(vec2(_507, _508), vec2(_507, _508));
    float _3730 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _514 = sqrt(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))));
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _548 = (_507 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_449.x * 2.0) + (-1.0)))) + (((_536.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _549 = (_508 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_449.y * 2.0) + (-1.0)))) + (((_536.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _554 = (((_449.z - _504) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _504;
    float _558 = ((_536.z - _554) * cbMtdParam._m0[19u].w) + _554;
    float _560 = cbMtdParam._m0[22u].x + _536.w;
    float _563 = fma(_514, _224 * NORMAL.x, fma(_549, _231 * TANGENT.x, (_217 * _209) * _548));
    float _566 = fma(_514, _224 * NORMAL.y, fma(_549, _231 * TANGENT.y, (_217 * _210) * _548));
    float _569 = fma(_514, _224 * NORMAL.z, fma(_549, _231 * TANGENT.z, (_217 * _211) * _548));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3741 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _577 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3763 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3774 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3785 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _684 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _687 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _701 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _707 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_701].x;
    float _708 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_701].y;
    float _709 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_701].z;
    float _3796 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    vec4 _721 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _725 = ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * TEXCOORD_5.w) * _721.x;
    float _726 = dot(vec3(_574, _575, _576), vec3(_654, _655, _656));
    float _729 = _726 * 2.0;
    float _733 = (_729 * _574) - _654;
    float _734 = (_729 * _575) - _655;
    float _735 = (_729 * _576) - _656;
    float _739 = abs(dot(vec3(_654, _655, _656), vec3(_574, _575, _576)));
    float _3829 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _741 = sqrt(_577);
    float _754 = exp2((_741 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_741 * 3.0));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_794, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786));
        float _824 = fma(_794, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786));
        float _828 = fma(_794, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786));
        float _853 = _786 + _574;
        float _854 = _790 + _575;
        float _855 = _794 + _576;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_574, _575, _576), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3877 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_574, _575, _576), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3910 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_574, _575, _576), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3943 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_794, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _786));
        float _1138 = fma(_794, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _786));
        float _1142 = fma(_794, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _786));
        float _1165 = _786 + _574;
        float _1166 = _790 + _575;
        float _1167 = _794 + _576;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_574, _575, _576), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4006 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_574, _575, _576), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4039 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_574, _575, _576), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4072 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1096;
        _1404 = _1096;
        _1405 = _1096;
        _1406 = _1096;
        _1407 = _1096;
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1108)) + _1108;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1109)) + _1109;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1110)) + _1110;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _733 * 0.5;
    float _1472 = _734 * 0.5;
    float _1473 = _735 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1589 = fma(_794, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786)) + cbModelParam._m0[13u].w;
        float _1593 = fma(_794, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786)) + cbModelParam._m0[14u].w;
        float _1597 = fma(_794, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786)) + cbModelParam._m0[15u].w;
        float _1600 = fma(_735, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733));
        float _1603 = fma(_735, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733));
        float _1606 = fma(_735, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733));
        float _1634;
        if (_1600 > 0.0)
        {
            _1634 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1634 = frontier_phi_14_12_ladder;
        }
        float _1805;
        if (_1603 > 0.0)
        {
            _1805 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1805 = frontier_phi_23_19_ladder;
        }
        float _2100;
        if (_1606 > 0.0)
        {
            _2100 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2100 = frontier_phi_35_30_ladder;
        }
        float _2102 = isnan(_1805) ? _1634 : (isnan(_1634) ? _1805 : min(_1634, _1805));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1600) + _1589;
        float _2108 = (_2103 * _1603) + _1593;
        float _2109 = (_2103 * _1606) + _1597;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2110;
        float _2114 = _2110 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 > _2114) || ((_2108 < _2112) || ((_2107 < _2112) || (_2107 > _2114))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2109, cbModelParam._m0[9u].z, fma(_2108, cbModelParam._m0[9u].y, _2107 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2109, cbModelParam._m0[10u].z, fma(_2108, cbModelParam._m0[10u].y, _2107 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2109, cbModelParam._m0[11u].z, fma(_2108, cbModelParam._m0[11u].y, _2107 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_13_35_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1622 = frontier_phi_13_35_ladder_2;
        _1624 = frontier_phi_13_35_ladder_1;
        _1626 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_733, _734, _735), _1540);
        _1622 = _1610.x * cbModelParam._m0[1u].y;
        _1624 = _1610.y * cbModelParam._m0[1u].y;
        _1626 = _1610.z * cbModelParam._m0[1u].y;
    }
    float _1630 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1630 : min(cbModelParam._m0[25u].w, _1630));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1686 = fma(_794, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786)) + cbModelParam._m0[21u].w;
        float _1690 = fma(_794, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786)) + cbModelParam._m0[22u].w;
        float _1694 = fma(_794, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786)) + cbModelParam._m0[23u].w;
        float _1697 = fma(_735, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733));
        float _1700 = fma(_735, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733));
        float _1703 = fma(_735, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733));
        float _1810;
        if (_1697 > 0.0)
        {
            _1810 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1810 = frontier_phi_25_21_ladder;
        }
        float _2127;
        if (_1700 > 0.0)
        {
            _2127 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2127 = frontier_phi_37_32_ladder;
        }
        float _2454;
        if (_1703 > 0.0)
        {
            _2454 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2454 = frontier_phi_47_44_ladder;
        }
        float _2456 = isnan(_2127) ? _1810 : (isnan(_1810) ? _2127 : min(_1810, _2127));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1697) + _1686;
        float _2462 = (_2457 * _1700) + _1690;
        float _2463 = (_2457 * _1703) + _1694;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2463, cbModelParam._m0[17u].z, fma(_2462, cbModelParam._m0[17u].y, _2461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2463, cbModelParam._m0[18u].z, fma(_2462, cbModelParam._m0[18u].y, _2461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2463, cbModelParam._m0[19u].z, fma(_2462, cbModelParam._m0[19u].y, _2461 * cbModelParam._m0[19u].x))), _1631);
            frontier_phi_22_47_ladder = _2581.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2581.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2581.x * cbModelParam._m0[1u].z;
        }
        _1722 = frontier_phi_22_47_ladder_2;
        _1724 = frontier_phi_22_47_ladder_1;
        _1726 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_733, _734, _735), _1631);
        _1722 = _1706.x * cbModelParam._m0[1u].z;
        _1724 = _1706.y * cbModelParam._m0[1u].z;
        _1726 = _1706.z * cbModelParam._m0[1u].z;
    }
    float _1738 = ((((1.0 - _754) * ((_741 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_754 * _741)) * _725;
    float _1739 = _1738 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1740 = _1738 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1741 = _1738 * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1744 = fma(_1741, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1739 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1741, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1739 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1741, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1739 * cbSceneParam._m0[91u].x));
    float _1784 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1788 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1797 = _1784 / _1796;
    float _1798 = _1788 / _1796;
    float _1799 = _1792 / _1796;
    float _1946;
    float _1947;
    float _1948;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1826 = ((uint(_1799 > cbSceneParam._m0[59u].y) + uint(_1799 > cbSceneParam._m0[59u].x)) + uint(_1799 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1827 = _1826 + 43u;
        uint _1835 = _1826 + 44u;
        uint _1843 = _1826 + 45u;
        uint _1851 = _1826 + 46u;
        float _1862 = fma(_1796, cbSceneParam._m0[_1827].w, fma(_1792, cbSceneParam._m0[_1827].z, fma(_1788, cbSceneParam._m0[_1827].y, _1784 * cbSceneParam._m0[_1827].x)));
        float _1866 = fma(_1796, cbSceneParam._m0[_1835].w, fma(_1792, cbSceneParam._m0[_1835].z, fma(_1788, cbSceneParam._m0[_1835].y, _1784 * cbSceneParam._m0[_1835].x)));
        float _1874 = fma(_1796, cbSceneParam._m0[_1851].w, fma(_1792, cbSceneParam._m0[_1851].z, fma(_1788, cbSceneParam._m0[_1851].y, _1784 * cbSceneParam._m0[_1851].x)));
        float _1879 = cbSceneParam._m0[33u].z * _1874;
        float _1881 = cbSceneParam._m0[33u].w * _1874;
        float _1884 = fma(_1796, cbSceneParam._m0[_1843].w, fma(_1792, cbSceneParam._m0[_1843].z, fma(_1788, cbSceneParam._m0[_1843].y, _1784 * cbSceneParam._m0[_1843].x))) / _1874;
        float _1932 = (cbSceneParam._m0[33u].x - sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799))) * cbSceneParam._m0[33u].y;
        float _4198 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1939 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 + _1862) / _1874, (_1881 + _1866) / _1874), _1884), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 + _1862) / _1874, (_1866 - _1879) / _1874), _1884), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 - _1879) / _1874, (_1866 - _1881) / _1874), _1884), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 - _1881) / _1874, (_1879 + _1866) / _1874), _1884), 0.0)).x), vec4(0.25)));
        _1946 = 1.0 - (_1939 * cbSceneParam._m0[34u].x);
        _1947 = 1.0 - (_1939 * cbSceneParam._m0[34u].y);
        _1948 = 1.0 - (_1939 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1946 = 1.0;
        _1947 = 1.0;
        _1948 = 1.0;
    }
    float _2012;
    float _2014;
    float _2016;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2000 = fma(_1796, cbSceneParam._m0[63u].w, fma(_1792, cbSceneParam._m0[63u].z, fma(_1788, cbSceneParam._m0[63u].y, _1784 * cbSceneParam._m0[63u].x)));
        float _2001 = fma(_1796, cbSceneParam._m0[60u].w, fma(_1792, cbSceneParam._m0[60u].z, fma(_1788, cbSceneParam._m0[60u].y, _1784 * cbSceneParam._m0[60u].x))) / _2000;
        float _2002 = fma(_1796, cbSceneParam._m0[61u].w, fma(_1792, cbSceneParam._m0[61u].z, fma(_1788, cbSceneParam._m0[61u].y, _1784 * cbSceneParam._m0[61u].x))) / _2000;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2001 >= cbSceneParam._m0[64u].x) && (_2002 >= cbSceneParam._m0[64u].y)) && (_2001 <= cbSceneParam._m0[64u].z)) && (_2002 <= cbSceneParam._m0[64u].w))
        {
            float _2140 = fma(_1796, cbSceneParam._m0[62u].w, fma(_1792, cbSceneParam._m0[62u].z, fma(_1788, cbSceneParam._m0[62u].y, _1784 * cbSceneParam._m0[62u].x))) / _2000;
            float _2144 = isnan(cbSceneParam._m0[41u].w) ? _2140 : (isnan(_2140) ? cbSceneParam._m0[41u].w : max(_2140, cbSceneParam._m0[41u].w));
            float _2187 = (cbSceneParam._m0[33u].x - sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799))) * cbSceneParam._m0[33u].y;
            float _4214 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
            float _2194 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2001, cbSceneParam._m0[33u].w + _2002), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2001, _2002 - cbSceneParam._m0[33u].z), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2001 - cbSceneParam._m0[33u].z, _2002 - cbSceneParam._m0[33u].w), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2001 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2002), _2144), 0.0)).x), vec4(0.25)));
            float _2198 = 1.0 - (_2194 * cbSceneParam._m0[34u].x);
            float _2199 = 1.0 - (_2194 * cbSceneParam._m0[34u].y);
            float _2200 = 1.0 - (_2194 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2200) ? _1948 : (isnan(_1948) ? _2200 : min(_1948, _2200));
            frontier_phi_34_33_ladder_1 = isnan(_2199) ? _1947 : (isnan(_1947) ? _2199 : min(_1947, _2199));
            frontier_phi_34_33_ladder_2 = isnan(_2198) ? _1946 : (isnan(_1946) ? _2198 : min(_1946, _2198));
        }
        else
        {
            frontier_phi_34_33_ladder = _1948;
            frontier_phi_34_33_ladder_1 = _1947;
            frontier_phi_34_33_ladder_2 = _1946;
        }
        _2012 = frontier_phi_34_33_ladder_2;
        _2014 = frontier_phi_34_33_ladder_1;
        _2016 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2012 = _1946;
        _2014 = _1947;
        _2016 = _1948;
    }
    uvec4 _2021 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2023 = _2021.x * 14u;
    uint _2024 = _2023 + 13u;
    float _2031 = _725 + (-1.0);
    float _2036 = (cbLight._m0[_2024].x * _2031) + 1.0;
    float _2037 = (cbLight._m0[_2024].y * _2031) + 1.0;
    float _2038 = (cbLight._m0[_2024].z * _2031) + 1.0;
    float _2039 = (cbLight._m0[_2024].w * _2031) + 1.0;
    uint _2040 = _2023 + 5u;
    float _2046 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2050 = _2023 + 4u;
    float _2059 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2063 = _2023 | 1u;
    float _2074 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_574, _575, _576));
    float _2077 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_574, _575, _576));
    float _4250 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _4261 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2082 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2084 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2091 = ((cbLight._m0[_2040].x * _2046) * _2084) + (((cbLight._m0[_2050].x * _2012) * _2059) * _2082);
    float _2092 = ((_2046 * cbLight._m0[_2040].y) * _2084) + (((cbLight._m0[_2050].y * _2014) * _2059) * _2082);
    float _2093 = ((_2046 * cbLight._m0[_2040].z) * _2084) + (((cbLight._m0[_2050].z * _2016) * _2059) * _2082);
    uvec4 _2097 = floatBitsToUint(cbLight._m0[_2023 + 12u]);
    bool _2099 = _2097.x == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2099)
    {
        _2201 = _2091;
        _2203 = _2092;
        _2205 = _2093;
    }
    else
    {
        uint _2209 = _2023 + 6u;
        float _2225 = (dot(vec3(cbLight._m0[_2023 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4272 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2228 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2201 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _2091;
        _2203 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _2092;
        _2205 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _2093;
    }
    bool _2208 = _2097.y == 0u;
    float _2263;
    float _2265;
    float _2267;
    if (_2208)
    {
        _2263 = _2201;
        _2265 = _2203;
        _2267 = _2205;
    }
    else
    {
        uint _2425 = _2023 + 7u;
        float _2441 = (dot(vec3(cbLight._m0[_2023 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2442 = _2441 * _2441;
        float _4288 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2443 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2444 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2263 = (((cbLight._m0[_2425].x * 0.3183098733425140380859375) * _2443) * _2444) + _2201;
        _2265 = (((cbLight._m0[_2425].y * 0.3183098733425140380859375) * _2443) * _2444) + _2203;
        _2267 = (((cbLight._m0[_2425].z * 0.3183098733425140380859375) * _2443) * _2444) + _2205;
    }
    uint _2270 = _2023 + 8u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _577) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2023].x + _654;
    float _2286 = cbLight._m0[_2023].y + _655;
    float _2287 = cbLight._m0[_2023].z + _656;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2023].xyz));
    float _4304 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2299 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2300 = dot(vec3(_574, _575, _576), vec3(_2292, _2293, _2294));
    float _4326 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2304 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2292, _2293, _2294));
    float _4337 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2308 = _2284 * _2284;
    float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
    float _2323 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2324 = 1.0 - _2284;
    float _2335 = (0.5 / (((_2299 * ((_2298 * _2324) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2324) + _2284) * _2298))) * _2298;
    float _4348 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
    uint _2351 = _2023 + 9u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _577) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2063].x + _654;
    float _2365 = cbLight._m0[_2063].y + _655;
    float _2366 = cbLight._m0[_2063].z + _656;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2063].xyz));
    float _4359 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2378 = dot(vec3(_574, _575, _576), vec3(_2371, _2372, _2373));
    float _4370 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2371, _2372, _2373));
    float _4381 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2363 * _2363;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2400 = 1.0 - _2363;
    float _2410 = (0.5 / (((_2299 * ((_2377 * _2400) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2400) + _2363) * _2377))) * _2377;
    float _4392 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2412 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    float _2422 = (((_2399 * cbLight._m0[_2351].x) * _2412) * _2046) + ((((cbLight._m0[_2270].x * _2012) * _2323) * _2337) * _2059);
    float _2423 = (((_2399 * cbLight._m0[_2351].y) * _2412) * _2046) + ((((cbLight._m0[_2270].y * _2014) * _2323) * _2337) * _2059);
    float _2424 = (((_2399 * cbLight._m0[_2351].z) * _2412) * _2046) + ((((cbLight._m0[_2270].z * _2016) * _2323) * _2337) * _2059);
    float _2480;
    float _2482;
    float _2484;
    if (_2099)
    {
        _2480 = _2422;
        _2482 = _2423;
        _2484 = _2424;
    }
    else
    {
        uint _2486 = _2023 + 2u;
        uint _2490 = _2023 + 10u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _577) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _654;
        float _2507 = cbLight._m0[_2486].y + _655;
        float _2508 = cbLight._m0[_2486].z + _656;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2486].xyz));
        float _4403 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2520 = dot(vec3(_574, _575, _576), vec3(_2513, _2514, _2515));
        float _4414 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4425 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2542 = 1.0 - _2505;
        float _2552 = (0.5 / (((_2299 * ((_2519 * _2542) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2542) + _2505) * _2519))) * _2519;
        float _4436 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2480 = (((_2541 * cbLight._m0[_2490].x) * _2554) * _2555) + _2422;
        _2482 = (((_2541 * cbLight._m0[_2490].y) * _2554) * _2555) + _2423;
        _2484 = (((_2541 * cbLight._m0[_2490].z) * _2554) * _2555) + _2424;
    }
    float _2586;
    float _2588;
    float _2590;
    if (_2208)
    {
        _2586 = _2480;
        _2588 = _2482;
        _2590 = _2484;
    }
    else
    {
        uint _2597 = _2023 + 3u;
        uint _2601 = _2023 + 11u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _577) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _654;
        float _2618 = cbLight._m0[_2597].y + _655;
        float _2619 = cbLight._m0[_2597].z + _656;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2597].xyz));
        float _4452 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2631 = dot(vec3(_574, _575, _576), vec3(_2624, _2625, _2626));
        float _4463 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4474 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2652 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2653 = 1.0 - _2616;
        float _2663 = (0.5 / (((_2299 * ((_2630 * _2653) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2653) + _2616) * _2630))) * _2630;
        float _4485 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2586 = (((_2652 * cbLight._m0[_2601].x) * _2665) * _2666) + _2480;
        _2588 = (((_2652 * cbLight._m0[_2601].y) * _2665) * _2666) + _2482;
        _2590 = (((_2652 * cbLight._m0[_2601].z) * _2665) * _2666) + _2484;
    }
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_2021.y == 0u)
    {
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.x;
        uint _2699 = uint((float(_2687.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2688))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2688)));
        float _2709 = (log2(_1799 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2710 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        uint _2713 = uint(isnan(14.0) ? _2710 : (isnan(_2710) ? 14.0 : min(_2710, 14.0)));
        uvec4 _2718 = texelFetch(g_lightClusterGridBuffer, int(((_2713 << 2u) + (_2699 << 6u)) >> 2u));
        uint _2719 = _2718.x;
        uint _2720 = _2687.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2720 >> 4u) & 15u)) + 4294967295u) & _2719) == 0u) || ((_2720 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            uint _2950 = 0u;
            uint _2959;
            bool _2960;
            for (;;)
            {
                _2959 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                _2960 = _2959 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2960)
                {
                    frontier_phi_66_pred = _2949;
                    frontier_phi_66_pred_1 = _2948;
                    frontier_phi_66_pred_2 = _2947;
                    frontier_phi_66_pred_3 = _2946;
                    frontier_phi_66_pred_4 = _2945;
                    frontier_phi_66_pred_5 = _2944;
                }
                else
                {
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    uint _3074;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2959;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    for (;;)
                    {
                        uint _3078 = uint(findLSB(_3074)) + (_2950 << 5u);
                        uint _3075 = (_3074 + 4294967295u) & _3074;
                        uint _3080 = _3078 * 48u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3100 = (_3078 * 48u) + 4u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3119 = (_3078 * 48u) + 8u;
                        vec3 _3130 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x));
                        float _3134 = _3094.x - _1797;
                        float _3135 = _3094.y - _1798;
                        float _3136 = _3094.z - _1799;
                        float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                        float _3140 = inversesqrt(_3137);
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3144 = dot(vec3(_681, _684, _687), vec3(_3141, _3142, _3143));
                        float _3149 = 1.0 - (_3137 * _3094.w);
                        float _4511 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3151 = sqrt(_3137) * _3113.w;
                        float _3154 = 1.39999997615814208984375 / (_3151 + 1.39999997615814208984375);
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3144) + _3155;
                        float _3161 = _3151 * _3151;
                        float _3165 = ((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3150) / ((_3161 * 0.699999988079071044921875) + 1.0);
                        float _3169 = (-0.0) - _1797;
                        float _3170 = (-0.0) - _1798;
                        float _3171 = (-0.0) - _1799;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3185 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                        float _3186 = 1.0 - _741;
                        float _3193 = sqrt(1.0 - ((1.0 - (_3186 * _3186)) * (1.0 - (_3185 * _3185))));
                        float _3194 = _3193 * _3193;
                        float _3195 = _3194 * _3194;
                        float _3196 = _3176 + _3141;
                        float _3197 = _3177 + _3142;
                        float _3198 = _3178 + _3143;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3206 = dot(vec3(_681, _684, _687), vec3(_3176, _3177, _3178));
                        float _4527 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3210 = dot(vec3(_681, _684, _687), vec3(_3202 * _3196, _3202 * _3197, _3202 * _3198));
                        float _4538 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3217 = ((_3213 * _3213) * (_3195 + (-1.0))) + 1.0;
                        float _3218 = _3154 * _3194;
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3144) + _3219;
                        float _4549 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3224 = 1.0 - _3194;
                        float _3234 = (0.5 / (((_3223 * ((_3209 * _3224) + _3194)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3194) * _3209))) * _3223;
                        float _4560 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3245 = (((_3195 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3217 * _3217) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125))) * _3150;
                        _3003 = (_3165 * _3113.x) + _3071;
                        _3004 = (_3165 * _3113.y) + _3072;
                        _3005 = (_3165 * _3113.z) + _3073;
                        _3000 = (_3245 * _3130.x) + _3068;
                        _3001 = (_3245 * _3130.y) + _3069;
                        _3002 = (_3245 * _3130.z) + _3070;
                        if (_3075 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3075;
                        }
                    }
                    frontier_phi_66_pred = _3005;
                    frontier_phi_66_pred_1 = _3004;
                    frontier_phi_66_pred_2 = _3003;
                    frontier_phi_66_pred_3 = _3002;
                    frontier_phi_66_pred_4 = _3001;
                    frontier_phi_66_pred_5 = _3000;
                }
                _2810 = frontier_phi_66_pred;
                _2808 = frontier_phi_66_pred_1;
                _2806 = frontier_phi_66_pred_2;
                _2804 = frontier_phi_66_pred_3;
                _2802 = frontier_phi_66_pred_4;
                _2800 = frontier_phi_66_pred_5;
                uint _2951 = _2950 + 1u;
                if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2944 = _2800;
                    _2945 = _2802;
                    _2946 = _2804;
                    _2947 = _2806;
                    _2948 = _2808;
                    _2949 = _2810;
                    _2950 = _2951;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((4294967295u << _2816) & _2719) == 0u)
        {
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
            _2920 = _2807;
            _2922 = _2809;
        }
        else
        {
            float _2937 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
            float _2938 = _2937 * _1797;
            float _2939 = _2937 * _1798;
            float _2940 = _2937 * _1799;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _3051 = _2799;
                float _3052 = _2801;
                float _3053 = _2803;
                float _3054 = _2805;
                float _3055 = _2807;
                float _3056 = _2809;
                uint _3057 = _2816;
                uint _3066;
                bool _3067;
                for (;;)
                {
                    _3066 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                    _3067 = _3066 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3067)
                    {
                        frontier_phi_72_pred = _3056;
                        frontier_phi_72_pred_1 = _3055;
                        frontier_phi_72_pred_2 = _3054;
                        frontier_phi_72_pred_3 = _3053;
                        frontier_phi_72_pred_4 = _3052;
                        frontier_phi_72_pred_5 = _3051;
                    }
                    else
                    {
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3263 = _3051;
                        float _3264 = _3052;
                        float _3265 = _3053;
                        float _3266 = _3054;
                        float _3267 = _3055;
                        float _3268 = _3056;
                        uint _3269 = _3066;
                        uint _3270;
                        vec4 _3295;
                        float _3296;
                        vec4 _3311;
                        vec3 _3323;
                        vec4 _3338;
                        vec4 _3353;
                        float _3399;
                        bool _3400;
                        for (;;)
                        {
                            uint _3280 = ((_3057 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3269));
                            _3270 = (_3269 + 4294967295u) & _3269;
                            uint _3282 = _3280 * 40u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3296 = _3295.w;
                            uint _3298 = (_3280 * 40u) + 4u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3280 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3325 = (_3280 * 40u) + 16u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3280 * 40u) + 20u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3280 * 40u) + 24u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3374 = (_3280 * 40u) + 28u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3399 = fma(_1799, _3387.z, fma(_1798, _3387.y, _3387.x * _1797)) + _3387.w;
                            _3400 = !((fma(_1799, _3368.z, fma(_1798, _3368.y, _3368.x * _1797)) + _3368.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3400)
                            {
                                float _3427 = _3295.x - _1797;
                                float _3428 = _3295.y - _1798;
                                float _3429 = _3295.z - _1799;
                                float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                                float _3433 = inversesqrt(_3430);
                                float _3434 = _3433 * _3427;
                                float _3435 = _3433 * _3428;
                                float _3436 = _3433 * _3429;
                                float _3440 = 1.0 - (_3430 / (_3296 * _3296));
                                float _4571 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3445 = sqrt(_3430) * _3311.w;
                                float _3447 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                                float _3448 = _3447 * _3447;
                                float _3451 = ((1.0 - _3448) * dot(vec3(_3434, _3435, _3436), vec3(_681, _684, _687))) + _3448;
                                float _3454 = _3445 * _3445;
                                float _3458 = (fma(_1799, _3338.z, fma(_1798, _3338.y, _3338.x * _1797)) + _3338.w) / _3399;
                                float _3459 = (fma(_1799, _3353.z, fma(_1798, _3353.y, _3353.x * _1797)) + _3353.w) / _3399;
                                float _3463 = 1.0 - dot(vec2(_3458, _3459), vec2(_3458, _3459));
                                float _4587 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3465 = _3464 * (((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3441) / ((_3454 * 0.699999988079071044921875) + 1.0));
                                float _3477 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                                float _3478 = 1.0 - _741;
                                float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                                float _3486 = _3485 * _3485;
                                float _3487 = _3486 * _3486;
                                float _3488 = _3434 - _2938;
                                float _3489 = _3435 - _2939;
                                float _3490 = _3436 - _2940;
                                float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                                float _3498 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2938, (-0.0) - _2939, (-0.0) - _2940));
                                float _4598 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3502 = dot(vec3(_681, _684, _687), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                                float _4609 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                                float _3510 = _3447 * _3486;
                                float _3511 = _3510 * _3510;
                                float _3517 = ((1.0 - _3511) * dot(vec3(_681, _684, _687), vec3(_3434, _3435, _3436))) + _3511;
                                float _4620 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3519 = 1.0 - _3486;
                                float _3529 = (0.5 / (((_3518 * ((_3501 * _3519) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3486) * _3501))) * _3518;
                                float _4631 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3539 = (_3464 * _3441) * (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3509 * _3509) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3465 * _3311.y;
                                frontier_phi_78_pred_1 = _3465 * _3311.x;
                                frontier_phi_78_pred_2 = _3539 * _3323.z;
                                frontier_phi_78_pred_3 = _3539 * _3323.y;
                                frontier_phi_78_pred_4 = _3539 * _3323.x;
                                frontier_phi_78_pred_5 = _3465 * _3311.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_78_pred;
                            _3546 = frontier_phi_78_pred_1;
                            _3545 = frontier_phi_78_pred_2;
                            _3544 = frontier_phi_78_pred_3;
                            _3543 = frontier_phi_78_pred_4;
                            _3548 = frontier_phi_78_pred_5;
                            _3253 = _3546 + _3266;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            if (_3270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3270;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3255;
                        frontier_phi_72_pred_1 = _3254;
                        frontier_phi_72_pred_2 = _3253;
                        frontier_phi_72_pred_3 = _3252;
                        frontier_phi_72_pred_4 = _3251;
                        frontier_phi_72_pred_5 = _3250;
                    }
                    _2923 = frontier_phi_72_pred;
                    _2921 = frontier_phi_72_pred_1;
                    _2919 = frontier_phi_72_pred_2;
                    _2917 = frontier_phi_72_pred_3;
                    _2915 = frontier_phi_72_pred_4;
                    _2913 = frontier_phi_72_pred_5;
                    uint _3058 = _3057 + 1u;
                    if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3051 = _2913;
                        _3052 = _2915;
                        _3053 = _2917;
                        _3054 = _2919;
                        _3055 = _2921;
                        _3056 = _2923;
                        _3057 = _3058;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2923;
                frontier_phi_60_61_ladder_1 = _2921;
                frontier_phi_60_61_ladder_2 = _2917;
                frontier_phi_60_61_ladder_3 = _2915;
                frontier_phi_60_61_ladder_4 = _2913;
                frontier_phi_60_61_ladder_5 = _2919;
            }
            else
            {
                frontier_phi_60_61_ladder = _2809;
                frontier_phi_60_61_ladder_1 = _2807;
                frontier_phi_60_61_ladder_2 = _2803;
                frontier_phi_60_61_ladder_3 = _2801;
                frontier_phi_60_61_ladder_4 = _2799;
                frontier_phi_60_61_ladder_5 = _2805;
            }
            _2912 = frontier_phi_60_61_ladder_4;
            _2914 = frontier_phi_60_61_ladder_3;
            _2916 = frontier_phi_60_61_ladder_2;
            _2918 = frontier_phi_60_61_ladder_5;
            _2920 = frontier_phi_60_61_ladder_1;
            _2922 = frontier_phi_60_61_ladder;
        }
        float _2927 = isnan(1.0) ? _725 : (isnan(_725) ? 1.0 : min(_725, 1.0));
        _2732 = (_2927 * _2918) + _2263;
        _2734 = (_2927 * _2920) + _2265;
        _2736 = (_2927 * _2922) + _2267;
        _2738 = ((_2912 * 0.039999999105930328369140625) * _2927) + _2586;
        _2740 = ((_2914 * 0.039999999105930328369140625) * _2927) + _2588;
        _2742 = ((_2916 * 0.039999999105930328369140625) * _2927) + _2590;
    }
    else
    {
        _2732 = _2263;
        _2734 = _2265;
        _2736 = _2267;
        _2738 = _2586;
        _2740 = _2588;
        _2742 = _2590;
    }
    float _4647 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4658 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4669 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    uint _2762 = _258 + 6u;
    float _2770 = _662 / cbSceneParam._m0[86u].x;
    float _2771 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2785 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2787 = _2785.x;
    float _2788 = _2785.y;
    float _2789 = _2785.z;
    float _2790 = _2785.w;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2825 = _2824 / _595;
        float _2836 = _2825 * _647;
        float _2837 = _648 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2840 = _2825 * _649;
        float _2842 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2843 = _2842 + cbSceneParam._m0[79u].w;
        float _2844 = cbSceneParam._m0[79u].w - _2837;
        float _2850 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2840 * _2840));
        float _2853 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2850;
        float _2858 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2860 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3013;
        if (abs((_2838 - _2842) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3013 = ((((_2843 > 0.0) ? exp2(_2858 * _2843) : (2.0 - exp2(_2860 * _2843))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2853;
        }
        else
        {
            float _2973 = 1.0 / cbSceneParam._m0[80u].x;
            float _2974 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : max(_2843, _2844));
            float _2975 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : min(_2843, _2844));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            _3013 = ((abs(_2850 / _2838) * cbSceneParam._m0[80u].y) * ((((_2984 - _2985) * 2.0) - ((exp2(_2858 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)))) - exp2(_2858 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))))) * _2973)) - ((exp2(_2860 * _2984) - exp2(_2860 * _2985)) * _2973))) + (_2853 * cbSceneParam._m0[80u].z);
        }
        vec4 _3015 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, 1.0), 0.0);
        float _3024 = exp2((_3013 * (-1.44269502162933349609375)) * (1.0 - _3015.w));
        float _3025 = log2(_3024);
        float _3041 = log2(_2790);
        _2862 = (exp2(_3041 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].x)) * _3015.x) / cbSceneParam._m0[78u].x)) + _2787;
        _2864 = (exp2(_3041 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].y)) * _3015.y) / cbSceneParam._m0[78u].y)) + _2788;
        _2866 = (exp2(_3041 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].z)) * _3015.z) / cbSceneParam._m0[78u].z)) + _2789;
        _2868 = _3024 * _2790;
    }
    else
    {
        _2862 = _2787;
        _2864 = _2788;
        _2866 = _2789;
        _2868 = _2790;
    }
    float _2880 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2881 = _2880 == 3.0;
    float _2882 = log2(_2868);
    float _2889 = exp2(_2882 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2732 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _725))) + ((_2738 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2890 = exp2(_2882 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2734 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _725))) + ((_2740 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2891 = exp2(_2882 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2736 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _725))) + ((_2742 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2900 = (_2880 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2900 * (_2881 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.y = _2900 * (_2881 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.z = _2900 * (_2881 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.w = cbInstanceData._m0[_2762].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2762].w;
}


