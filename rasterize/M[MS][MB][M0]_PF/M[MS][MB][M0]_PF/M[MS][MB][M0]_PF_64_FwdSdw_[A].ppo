#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1136;
float _3779;
float _3780;
float _3781;
float _3782;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3791 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3802 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3813 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _394 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _394) * cbMtdParam._m0[24u].x) + _394) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3824 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _419 = (_412 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _420 = (_412 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _421 = (_412 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _425 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _419;
    float _428 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _420;
    float _431 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _421;
    float _438 = ((_419 - _425) * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) + _425;
    float _439 = ((_420 - _428) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) + _428;
    float _440 = ((_421 - _431) * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) + _431;
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _499 = _495.z;
    float _508 = ((_478.z - _499) * _412) + _499;
    float _511 = ((((_478.x - _497) * _412) + _497) * 2.0) + (-1.0);
    float _512 = ((((_478.y - _498) * _412) + _498) * 2.0) + (-1.0);
    float _513 = dot(vec2(_511, _512), vec2(_511, _512));
    float _3835 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    float _523 = _511 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_453.x * 2.0) + (-1.0)));
    float _524 = _512 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_453.y * 2.0) + (-1.0)));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _544 = (((_453.z - _508) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _508;
    float _546 = cbMtdParam._m0[22u].x + _537.w;
    float _550 = gl_FragCoord.x * 0.125;
    float _552 = gl_FragCoord.y * 0.125;
    float _563 = fma(_518, _228 * NORMAL.x, fma(_524, _235 * TANGENT.x, (_221 * _213) * _523));
    float _566 = fma(_518, _228 * NORMAL.y, fma(_524, _235 * TANGENT.y, (_221 * _214) * _523));
    float _569 = fma(_518, _228 * NORMAL.z, fma(_524, _235 * TANGENT.z, (_221 * _215) * _523));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3846 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _577 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3868 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3879 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3890 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_550, _552)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    vec4 _662 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_550, _552));
    float _664 = _662.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _818 = sqrt(((_651 * _651) + (_652 * _652)) + (_653 * _653));
        float _824 = (cbMatDynParam._m0[5u].x * _818) + cbMatDynParam._m0[5u].y;
        float _3901 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _829 = (cbMatDynParam._m0[5u].z * _818) + cbMatDynParam._m0[5u].w;
        float _3912 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) - _825)) + _825) < ((_664 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _697 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _700 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _713 = _262 + 9u;
    uint _714 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3923 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _738 = ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * TEXCOORD_5.w) * _734.x;
    float _739 = dot(vec3(_574, _575, _576), vec3(_658, _659, _660));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _574) - _658;
    float _747 = (_742 * _575) - _659;
    float _748 = (_742 * _576) - _660;
    float _752 = abs(dot(vec3(_658, _659, _660), vec3(_574, _575, _576)));
    float _3956 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_577);
    float _767 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = fma(_807, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799));
        float _864 = fma(_807, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799));
        float _868 = fma(_807, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799));
        float _893 = _799 + _574;
        float _894 = _803 + _575;
        float _895 = _807 + _576;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _860;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _864;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _868;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_860 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_864 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_868 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_574, _575, _576), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _4004 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_574, _575, _576), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _4037 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_574, _575, _576), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _4070 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1174 = fma(_807, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799));
        float _1178 = fma(_807, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799));
        float _1182 = fma(_807, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799));
        float _1205 = _799 + _574;
        float _1206 = _803 + _575;
        float _1207 = _807 + _576;
        float _1217 = fma(_1207, cbModelParam._m0[30u].z, fma(_1206, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1205)) - _1174;
        float _1218 = fma(_1207, cbModelParam._m0[31u].z, fma(_1206, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1205)) - _1178;
        float _1219 = fma(_1207, cbModelParam._m0[32u].z, fma(_1206, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1205)) - _1182;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1174 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1178 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[35u].z) + ((((((_1182 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1273 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1240.x + (-0.5));
        float _1275 = _1273 * (_1240.y + (-0.5));
        float _1276 = _1273 * (_1240.z + (-0.5));
        float _1283 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1247.x + (-0.5));
        float _1285 = _1283 * (_1247.y + (-0.5));
        float _1286 = _1283 * (_1247.z + (-0.5));
        float _1293 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1254.x + (-0.5));
        float _1295 = _1293 * (_1254.y + (-0.5));
        float _1296 = _1293 * (_1254.z + (-0.5));
        float _1303 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1261.x + (-0.5));
        float _1305 = _1303 * (_1261.y + (-0.5));
        float _1306 = _1303 * (_1261.z + (-0.5));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = _1274 * 0.5;
        float _1311 = _1284 * 0.5;
        float _1312 = _1294 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_574, _575, _576), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4133 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1337 + 1.0))) + _1342) * _1307;
        float _1352 = _1275 * 0.5;
        float _1353 = _1285 * 0.5;
        float _1354 = _1295 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_574, _575, _576), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4166 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1379 + 1.0))) + _1384) * _1308;
        float _1394 = _1276 * 0.5;
        float _1395 = _1286 * 0.5;
        float _1396 = _1296 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_574, _575, _576), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4199 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1421 + 1.0))) + _1426) * _1309;
        _1443 = _1276;
        _1444 = _1275;
        _1445 = _1274;
        _1446 = _1286;
        _1447 = _1285;
        _1448 = _1284;
        _1449 = _1296;
        _1450 = _1295;
        _1451 = _1294;
        _1452 = _1309;
        _1453 = _1308;
        _1454 = _1307;
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
    }
    else
    {
        _1443 = _1136;
        _1444 = _1136;
        _1445 = _1136;
        _1446 = _1136;
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = 0.0;
        _1456 = 0.0;
        _1457 = 0.0;
    }
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1148)) + _1148;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1149)) + _1149;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1150)) + _1150;
    float _1490 = fma(_1469, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1467 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1469, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1467 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1469, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1467));
    float _1511 = _746 * 0.5;
    float _1512 = _747 * 0.5;
    float _1513 = _748 * 0.5;
    float _1514 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1517 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1520 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1554;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1527 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1531 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1535 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1542 = dot(vec4(cbModelParam._m0[39u]), vec4(_1511, _1512, _1513, 1.0));
        _1554 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1554 = 1.0;
    }
    float _1565;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1556 = dot(vec4(cbModelParam._m0[40u]), vec4(_1511, _1512, _1513, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1569 = (_1565 * cbModelParam._m0[1u].x) + (_1554 * (1.0 - cbModelParam._m0[1u].x));
    float _1579 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1579 : min(cbModelParam._m0[25u].z, _1579));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1629 = fma(_807, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799)) + cbModelParam._m0[13u].w;
        float _1633 = fma(_807, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799)) + cbModelParam._m0[14u].w;
        float _1637 = fma(_807, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799)) + cbModelParam._m0[15u].w;
        float _1640 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1643 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1646 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1674;
        if (_1640 > 0.0)
        {
            _1674 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1674 = frontier_phi_19_17_ladder;
        }
        float _1845;
        if (_1643 > 0.0)
        {
            _1845 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1845 = frontier_phi_28_24_ladder;
        }
        float _2140;
        if (_1646 > 0.0)
        {
            _2140 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2140 = frontier_phi_40_35_ladder;
        }
        float _2142 = isnan(_1845) ? _1674 : (isnan(_1674) ? _1845 : min(_1674, _1845));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1640) + _1629;
        float _2148 = (_2143 * _1643) + _1633;
        float _2149 = (_2143 * _1646) + _1637;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1580);
            frontier_phi_18_40_ladder = _2294.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2294.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2294.x * cbModelParam._m0[1u].y;
        }
        _1662 = frontier_phi_18_40_ladder_2;
        _1664 = frontier_phi_18_40_ladder_1;
        _1666 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1580);
        _1662 = _1650.x * cbModelParam._m0[1u].y;
        _1664 = _1650.y * cbModelParam._m0[1u].y;
        _1666 = _1650.z * cbModelParam._m0[1u].y;
    }
    float _1670 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1670 : min(cbModelParam._m0[25u].w, _1670));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1726 = fma(_807, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799)) + cbModelParam._m0[21u].w;
        float _1730 = fma(_807, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799)) + cbModelParam._m0[22u].w;
        float _1734 = fma(_807, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799)) + cbModelParam._m0[23u].w;
        float _1737 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1740 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1743 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1850;
        if (_1737 > 0.0)
        {
            _1850 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1850 = frontier_phi_30_26_ladder;
        }
        float _2167;
        if (_1740 > 0.0)
        {
            _2167 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2167 = frontier_phi_42_37_ladder;
        }
        float _2494;
        if (_1743 > 0.0)
        {
            _2494 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2494 = frontier_phi_52_49_ladder;
        }
        float _2496 = isnan(_2167) ? _1850 : (isnan(_1850) ? _2167 : min(_1850, _2167));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1737) + _1726;
        float _2502 = (_2497 * _1740) + _1730;
        float _2503 = (_2497 * _1743) + _1734;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1671);
            frontier_phi_27_52_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1762 = frontier_phi_27_52_ladder_2;
        _1764 = frontier_phi_27_52_ladder_1;
        _1766 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1671);
        _1762 = _1746.x * cbModelParam._m0[1u].z;
        _1764 = _1746.y * cbModelParam._m0[1u].z;
        _1766 = _1746.z * cbModelParam._m0[1u].z;
    }
    float _1778 = ((((1.0 - _767) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_767 * _754)) * _738;
    float _1779 = _1778 * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1780 = _1778 * ((cbModelParam._m0[1u].w * (_1764 - _1664)) + _1664);
    float _1781 = _1778 * ((cbModelParam._m0[1u].w * (_1766 - _1666)) + _1666);
    float _1784 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, _1779 * cbSceneParam._m0[91u].x));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1828 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1836 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1837 = _1824 / _1836;
    float _1838 = _1828 / _1836;
    float _1839 = _1832 / _1836;
    float _1986;
    float _1987;
    float _1988;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1866 = ((uint(_1839 > cbSceneParam._m0[59u].y) + uint(_1839 > cbSceneParam._m0[59u].x)) + uint(_1839 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1867 = _1866 + 43u;
        uint _1875 = _1866 + 44u;
        uint _1883 = _1866 + 45u;
        uint _1891 = _1866 + 46u;
        float _1902 = fma(_1836, cbSceneParam._m0[_1867].w, fma(_1832, cbSceneParam._m0[_1867].z, fma(_1828, cbSceneParam._m0[_1867].y, _1824 * cbSceneParam._m0[_1867].x)));
        float _1906 = fma(_1836, cbSceneParam._m0[_1875].w, fma(_1832, cbSceneParam._m0[_1875].z, fma(_1828, cbSceneParam._m0[_1875].y, _1824 * cbSceneParam._m0[_1875].x)));
        float _1914 = fma(_1836, cbSceneParam._m0[_1891].w, fma(_1832, cbSceneParam._m0[_1891].z, fma(_1828, cbSceneParam._m0[_1891].y, _1824 * cbSceneParam._m0[_1891].x)));
        float _1919 = cbSceneParam._m0[33u].z * _1914;
        float _1921 = cbSceneParam._m0[33u].w * _1914;
        float _1924 = fma(_1836, cbSceneParam._m0[_1883].w, fma(_1832, cbSceneParam._m0[_1883].z, fma(_1828, cbSceneParam._m0[_1883].y, _1824 * cbSceneParam._m0[_1883].x))) / _1914;
        float _1972 = (cbSceneParam._m0[33u].x - sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839))) * cbSceneParam._m0[33u].y;
        float _4325 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1979 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 + _1902) / _1914, (_1921 + _1906) / _1914), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1921 + _1902) / _1914, (_1906 - _1919) / _1914), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 - _1919) / _1914, (_1906 - _1921) / _1914), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 - _1921) / _1914, (_1919 + _1906) / _1914), _1924), 0.0)).x), vec4(0.25)));
        _1986 = 1.0 - (_1979 * cbSceneParam._m0[34u].x);
        _1987 = 1.0 - (_1979 * cbSceneParam._m0[34u].y);
        _1988 = 1.0 - (_1979 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1986 = 1.0;
        _1987 = 1.0;
        _1988 = 1.0;
    }
    float _2052;
    float _2054;
    float _2056;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2040 = fma(_1836, cbSceneParam._m0[63u].w, fma(_1832, cbSceneParam._m0[63u].z, fma(_1828, cbSceneParam._m0[63u].y, _1824 * cbSceneParam._m0[63u].x)));
        float _2041 = fma(_1836, cbSceneParam._m0[60u].w, fma(_1832, cbSceneParam._m0[60u].z, fma(_1828, cbSceneParam._m0[60u].y, _1824 * cbSceneParam._m0[60u].x))) / _2040;
        float _2042 = fma(_1836, cbSceneParam._m0[61u].w, fma(_1832, cbSceneParam._m0[61u].z, fma(_1828, cbSceneParam._m0[61u].y, _1824 * cbSceneParam._m0[61u].x))) / _2040;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2041 >= cbSceneParam._m0[64u].x) && (_2042 >= cbSceneParam._m0[64u].y)) && (_2041 <= cbSceneParam._m0[64u].z)) && (_2042 <= cbSceneParam._m0[64u].w))
        {
            float _2180 = fma(_1836, cbSceneParam._m0[62u].w, fma(_1832, cbSceneParam._m0[62u].z, fma(_1828, cbSceneParam._m0[62u].y, _1824 * cbSceneParam._m0[62u].x))) / _2040;
            float _2184 = isnan(cbSceneParam._m0[41u].w) ? _2180 : (isnan(_2180) ? cbSceneParam._m0[41u].w : max(_2180, cbSceneParam._m0[41u].w));
            float _2227 = (cbSceneParam._m0[33u].x - sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839))) * cbSceneParam._m0[33u].y;
            float _4341 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
            float _2234 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2041, cbSceneParam._m0[33u].w + _2042), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2041, _2042 - cbSceneParam._m0[33u].z), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2041 - cbSceneParam._m0[33u].z, _2042 - cbSceneParam._m0[33u].w), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2041 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2042), _2184), 0.0)).x), vec4(0.25)));
            float _2238 = 1.0 - (_2234 * cbSceneParam._m0[34u].x);
            float _2239 = 1.0 - (_2234 * cbSceneParam._m0[34u].y);
            float _2240 = 1.0 - (_2234 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2240) ? _1988 : (isnan(_1988) ? _2240 : min(_1988, _2240));
            frontier_phi_39_38_ladder_1 = isnan(_2239) ? _1987 : (isnan(_1987) ? _2239 : min(_1987, _2239));
            frontier_phi_39_38_ladder_2 = isnan(_2238) ? _1986 : (isnan(_1986) ? _2238 : min(_1986, _2238));
        }
        else
        {
            frontier_phi_39_38_ladder = _1988;
            frontier_phi_39_38_ladder_1 = _1987;
            frontier_phi_39_38_ladder_2 = _1986;
        }
        _2052 = frontier_phi_39_38_ladder_2;
        _2054 = frontier_phi_39_38_ladder_1;
        _2056 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2052 = _1986;
        _2054 = _1987;
        _2056 = _1988;
    }
    uvec4 _2061 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2063 = _2061.x * 14u;
    uint _2064 = _2063 + 13u;
    float _2071 = _738 + (-1.0);
    float _2076 = (cbLight._m0[_2064].x * _2071) + 1.0;
    float _2077 = (cbLight._m0[_2064].y * _2071) + 1.0;
    float _2078 = (cbLight._m0[_2064].z * _2071) + 1.0;
    float _2079 = (cbLight._m0[_2064].w * _2071) + 1.0;
    uint _2080 = _2063 + 5u;
    float _2086 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2090 = _2063 + 4u;
    float _2099 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2103 = _2063 | 1u;
    float _2114 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_574, _575, _576));
    float _2117 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_574, _575, _576));
    float _4377 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _4388 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2122 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2124 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2131 = ((cbLight._m0[_2080].x * _2086) * _2124) + (((cbLight._m0[_2090].x * _2052) * _2099) * _2122);
    float _2132 = ((_2086 * cbLight._m0[_2080].y) * _2124) + (((cbLight._m0[_2090].y * _2054) * _2099) * _2122);
    float _2133 = ((_2086 * cbLight._m0[_2080].z) * _2124) + (((cbLight._m0[_2090].z * _2056) * _2099) * _2122);
    uvec4 _2137 = floatBitsToUint(cbLight._m0[_2063 + 12u]);
    bool _2139 = _2137.x == 0u;
    float _2241;
    float _2243;
    float _2245;
    if (_2139)
    {
        _2241 = _2131;
        _2243 = _2132;
        _2245 = _2133;
    }
    else
    {
        uint _2249 = _2063 + 6u;
        float _2265 = (dot(vec3(cbLight._m0[_2063 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2266 = _2265 * _2265;
        float _4399 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2267 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2268 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2241 = (((cbLight._m0[_2249].x * 0.3183098733425140380859375) * _2267) * _2268) + _2131;
        _2243 = (((cbLight._m0[_2249].y * 0.3183098733425140380859375) * _2267) * _2268) + _2132;
        _2245 = (((cbLight._m0[_2249].z * 0.3183098733425140380859375) * _2267) * _2268) + _2133;
    }
    bool _2248 = _2137.y == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2248)
    {
        _2303 = _2241;
        _2305 = _2243;
        _2307 = _2245;
    }
    else
    {
        uint _2465 = _2063 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2063 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4415 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2484 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2303 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2241;
        _2305 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2243;
        _2307 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2245;
    }
    uint _2310 = _2063 + 8u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _577) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2063].x + _658;
    float _2326 = cbLight._m0[_2063].y + _659;
    float _2327 = cbLight._m0[_2063].z + _660;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2063].xyz));
    float _4431 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _2339 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2340 = dot(vec3(_574, _575, _576), vec3(_2332, _2333, _2334));
    float _4453 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2332, _2333, _2334));
    float _4464 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2324 * _2324;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2364 = 1.0 - _2324;
    float _2375 = (0.5 / (((_2339 * ((_2338 * _2364) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2364) + _2324) * _2338))) * _2338;
    float _4475 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    uint _2391 = _2063 + 9u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _577) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2103].x + _658;
    float _2405 = cbLight._m0[_2103].y + _659;
    float _2406 = cbLight._m0[_2103].z + _660;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2103].xyz));
    float _4486 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2418 = dot(vec3(_574, _575, _576), vec3(_2411, _2412, _2413));
    float _4497 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2411, _2412, _2413));
    float _4508 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2403 * _2403;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2440 = 1.0 - _2403;
    float _2450 = (0.5 / (((_2339 * ((_2417 * _2440) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2440) + _2403) * _2417))) * _2417;
    float _4519 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    float _2462 = (((_2439 * cbLight._m0[_2391].x) * _2452) * _2086) + ((((cbLight._m0[_2310].x * _2052) * _2363) * _2377) * _2099);
    float _2463 = (((_2439 * cbLight._m0[_2391].y) * _2452) * _2086) + ((((cbLight._m0[_2310].y * _2054) * _2363) * _2377) * _2099);
    float _2464 = (((_2439 * cbLight._m0[_2391].z) * _2452) * _2086) + ((((cbLight._m0[_2310].z * _2056) * _2363) * _2377) * _2099);
    float _2520;
    float _2522;
    float _2524;
    if (_2139)
    {
        _2520 = _2462;
        _2522 = _2463;
        _2524 = _2464;
    }
    else
    {
        uint _2526 = _2063 + 2u;
        uint _2530 = _2063 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _577) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _658;
        float _2547 = cbLight._m0[_2526].y + _659;
        float _2548 = cbLight._m0[_2526].z + _660;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2526].xyz));
        float _4530 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2560 = dot(vec3(_574, _575, _576), vec3(_2553, _2554, _2555));
        float _4541 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4552 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2339 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2582) + _2545) * _2559))) * _2559;
        float _4563 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2520 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2462;
        _2522 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2463;
        _2524 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2464;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2248)
    {
        _2626 = _2520;
        _2628 = _2522;
        _2630 = _2524;
    }
    else
    {
        uint _2637 = _2063 + 3u;
        uint _2641 = _2063 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _577) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _658;
        float _2658 = cbLight._m0[_2637].y + _659;
        float _2659 = cbLight._m0[_2637].z + _660;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2637].xyz));
        float _4579 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2671 = dot(vec3(_574, _575, _576), vec3(_2664, _2665, _2666));
        float _4590 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4601 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2692 = (exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2693 = 1.0 - _2656;
        float _2703 = (0.5 / (((_2339 * ((_2670 * _2693) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2693) + _2656) * _2670))) * _2670;
        float _4612 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2626 = (((_2692 * cbLight._m0[_2641].x) * _2705) * _2706) + _2520;
        _2628 = (((_2692 * cbLight._m0[_2641].y) * _2705) * _2706) + _2522;
        _2630 = (((_2692 * cbLight._m0[_2641].z) * _2705) * _2706) + _2524;
    }
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_2061.y == 0u)
    {
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.x;
        uint _2739 = uint((float(_2727.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2728))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2728)));
        float _2749 = (log2(_1839 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        uint _2753 = uint(isnan(14.0) ? _2750 : (isnan(_2750) ? 14.0 : min(_2750, 14.0)));
        uvec4 _2758 = texelFetch(g_lightClusterGridBuffer, int(((_2753 << 2u) + (_2739 << 6u)) >> 2u));
        uint _2759 = _2758.x;
        uint _2760 = _2727.z;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((((1u << ((_2760 >> 4u) & 15u)) + 4294967295u) & _2759) == 0u) || ((_2760 & 240u) == 0u))
        {
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
        }
        else
        {
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            uint _2998 = 0u;
            uint _3007;
            bool _3008;
            for (;;)
            {
                _3007 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                _3008 = _3007 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3008)
                {
                    frontier_phi_73_pred = _2997;
                    frontier_phi_73_pred_1 = _2996;
                    frontier_phi_73_pred_2 = _2995;
                    frontier_phi_73_pred_3 = _2994;
                    frontier_phi_73_pred_4 = _2993;
                    frontier_phi_73_pred_5 = _2992;
                }
                else
                {
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    uint _3143;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _3007;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    for (;;)
                    {
                        uint _3147 = uint(findLSB(_3143)) + (_2998 << 5u);
                        uint _3144 = (_3143 + 4294967295u) & _3143;
                        uint _3149 = _3147 * 48u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3169 = (_3147 * 48u) + 4u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3188 = (_3147 * 48u) + 8u;
                        vec3 _3199 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x));
                        float _3203 = _3163.x - _1837;
                        float _3204 = _3163.y - _1838;
                        float _3205 = _3163.z - _1839;
                        float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                        float _3209 = inversesqrt(_3206);
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3213 = dot(vec3(_694, _697, _700), vec3(_3210, _3211, _3212));
                        float _3218 = 1.0 - (_3206 * _3163.w);
                        float _4638 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3220 = sqrt(_3206) * _3182.w;
                        float _3223 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3213) + _3224;
                        float _3230 = _3220 * _3220;
                        float _3234 = ((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3219) / ((_3230 * 0.699999988079071044921875) + 1.0);
                        float _3238 = (-0.0) - _1837;
                        float _3239 = (-0.0) - _1838;
                        float _3240 = (-0.0) - _1839;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3254 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                        float _3255 = 1.0 - _754;
                        float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                        float _3263 = _3262 * _3262;
                        float _3264 = _3263 * _3263;
                        float _3265 = _3245 + _3210;
                        float _3266 = _3246 + _3211;
                        float _3267 = _3247 + _3212;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3275 = dot(vec3(_694, _697, _700), vec3(_3245, _3246, _3247));
                        float _4654 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3279 = dot(vec3(_694, _697, _700), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                        float _4665 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                        float _3287 = _3223 * _3263;
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3213) + _3288;
                        float _4676 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3293 = 1.0 - _3263;
                        float _3303 = (0.5 / (((_3292 * ((_3278 * _3293) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3263) * _3278))) * _3292;
                        float _4687 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3314 = (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) / ((_3286 * _3286) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125))) * _3219;
                        _3067 = (_3234 * _3182.x) + _3140;
                        _3068 = (_3234 * _3182.y) + _3141;
                        _3069 = (_3234 * _3182.z) + _3142;
                        _3064 = (_3314 * _3199.x) + _3137;
                        _3065 = (_3314 * _3199.y) + _3138;
                        _3066 = (_3314 * _3199.z) + _3139;
                        if (_3144 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3144;
                        }
                    }
                    frontier_phi_73_pred = _3069;
                    frontier_phi_73_pred_1 = _3068;
                    frontier_phi_73_pred_2 = _3067;
                    frontier_phi_73_pred_3 = _3066;
                    frontier_phi_73_pred_4 = _3065;
                    frontier_phi_73_pred_5 = _3064;
                }
                _2850 = frontier_phi_73_pred;
                _2848 = frontier_phi_73_pred_1;
                _2846 = frontier_phi_73_pred_2;
                _2844 = frontier_phi_73_pred_3;
                _2842 = frontier_phi_73_pred_4;
                _2840 = frontier_phi_73_pred_5;
                uint _2999 = _2998 + 1u;
                if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2992 = _2840;
                    _2993 = _2842;
                    _2994 = _2844;
                    _2995 = _2846;
                    _2996 = _2848;
                    _2997 = _2850;
                    _2998 = _2999;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
        }
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.z;
        uint _2856 = (_2854 >> 8u) & 15u;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((4294967295u << _2856) & _2759) == 0u)
        {
            _2960 = _2839;
            _2962 = _2841;
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
        }
        else
        {
            float _2985 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
            float _2986 = _2985 * _1837;
            float _2987 = _2985 * _1838;
            float _2988 = _2985 * _1839;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2856 < ((_2854 >> 12u) & 15u))
            {
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _3120 = _2839;
                float _3121 = _2841;
                float _3122 = _2843;
                float _3123 = _2845;
                float _3124 = _2847;
                float _3125 = _2849;
                uint _3126 = _2856;
                uint _3135;
                bool _3136;
                for (;;)
                {
                    _3135 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                    _3136 = _3135 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3136)
                    {
                        frontier_phi_84_pred = _3125;
                        frontier_phi_84_pred_1 = _3124;
                        frontier_phi_84_pred_2 = _3123;
                        frontier_phi_84_pred_3 = _3122;
                        frontier_phi_84_pred_4 = _3121;
                        frontier_phi_84_pred_5 = _3120;
                    }
                    else
                    {
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3341 = _3120;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        uint _3347 = _3135;
                        uint _3348;
                        vec4 _3373;
                        float _3374;
                        vec4 _3389;
                        vec3 _3401;
                        vec4 _3416;
                        vec4 _3431;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3358 = ((_3126 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3347));
                            _3348 = (_3347 + 4294967295u) & _3347;
                            uint _3360 = _3358 * 40u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            _3374 = _3373.w;
                            uint _3376 = (_3358 * 40u) + 4u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3358 * 40u) + 8u;
                            _3401 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x));
                            uint _3403 = (_3358 * 40u) + 16u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3358 * 40u) + 20u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3358 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3358 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_1839, _3465.z, fma(_1838, _3465.y, _3465.x * _1837)) + _3465.w;
                            _3478 = !((fma(_1839, _3446.z, fma(_1838, _3446.y, _3446.x * _1837)) + _3446.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3373.x - _1837;
                                float _3506 = _3373.y - _1838;
                                float _3507 = _3373.z - _1839;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3374 * _3374));
                                float _4698 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3523 = sqrt(_3508) * _3389.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_694, _697, _700))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_1839, _3416.z, fma(_1838, _3416.y, _3416.x * _1837)) + _3416.w) / _3477;
                                float _3537 = (fma(_1839, _3431.z, fma(_1838, _3431.y, _3431.x * _1837)) + _3431.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4714 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _754;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _2986;
                                float _3567 = _3513 - _2987;
                                float _3568 = _3514 - _2988;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2986, (-0.0) - _2987, (-0.0) - _2988));
                                float _4725 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3580 = dot(vec3(_694, _697, _700), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4736 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_694, _697, _700), vec3(_3512, _3513, _3514))) + _3589;
                                float _4747 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4758 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3543 * _3389.z;
                                frontier_phi_90_pred_1 = _3543 * _3389.y;
                                frontier_phi_90_pred_2 = _3543 * _3389.x;
                                frontier_phi_90_pred_3 = _3617 * _3401.z;
                                frontier_phi_90_pred_4 = _3617 * _3401.y;
                                frontier_phi_90_pred_5 = _3617 * _3401.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_90_pred;
                            _3625 = frontier_phi_90_pred_1;
                            _3624 = frontier_phi_90_pred_2;
                            _3623 = frontier_phi_90_pred_3;
                            _3622 = frontier_phi_90_pred_4;
                            _3621 = frontier_phi_90_pred_5;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            if (_3348 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3348;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3333;
                        frontier_phi_84_pred_1 = _3332;
                        frontier_phi_84_pred_2 = _3331;
                        frontier_phi_84_pred_3 = _3330;
                        frontier_phi_84_pred_4 = _3329;
                        frontier_phi_84_pred_5 = _3328;
                    }
                    _2971 = frontier_phi_84_pred;
                    _2969 = frontier_phi_84_pred_1;
                    _2967 = frontier_phi_84_pred_2;
                    _2965 = frontier_phi_84_pred_3;
                    _2963 = frontier_phi_84_pred_4;
                    _2961 = frontier_phi_84_pred_5;
                    uint _3127 = _3126 + 1u;
                    if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3120 = _2961;
                        _3121 = _2963;
                        _3122 = _2965;
                        _3123 = _2967;
                        _3124 = _2969;
                        _3125 = _2971;
                        _3126 = _3127;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2967;
                frontier_phi_65_66_ladder_1 = _2971;
                frontier_phi_65_66_ladder_2 = _2969;
                frontier_phi_65_66_ladder_3 = _2965;
                frontier_phi_65_66_ladder_4 = _2963;
                frontier_phi_65_66_ladder_5 = _2961;
            }
            else
            {
                frontier_phi_65_66_ladder = _2845;
                frontier_phi_65_66_ladder_1 = _2849;
                frontier_phi_65_66_ladder_2 = _2847;
                frontier_phi_65_66_ladder_3 = _2843;
                frontier_phi_65_66_ladder_4 = _2841;
                frontier_phi_65_66_ladder_5 = _2839;
            }
            _2960 = frontier_phi_65_66_ladder_5;
            _2962 = frontier_phi_65_66_ladder_4;
            _2964 = frontier_phi_65_66_ladder_3;
            _2966 = frontier_phi_65_66_ladder;
            _2968 = frontier_phi_65_66_ladder_2;
            _2970 = frontier_phi_65_66_ladder_1;
        }
        float _2975 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2772 = (_2975 * _2966) + _2303;
        _2774 = (_2975 * _2968) + _2305;
        _2776 = (_2975 * _2970) + _2307;
        _2778 = ((_2960 * 0.039999999105930328369140625) * _2975) + _2626;
        _2780 = ((_2962 * 0.039999999105930328369140625) * _2975) + _2628;
        _2782 = ((_2964 * 0.039999999105930328369140625) * _2975) + _2630;
    }
    else
    {
        _2772 = _2303;
        _2774 = _2305;
        _2776 = _2307;
        _2778 = _2626;
        _2780 = _2628;
        _2782 = _2630;
    }
    float _4774 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4785 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4796 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2799 = ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2772 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _738))) + ((_2778 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1569)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2774 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _738))) + ((_2780 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1569)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2776 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _738))) + ((_2782 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1569)) * cbPerFrame._m0[3u].x);
    uint _2802 = _262 + 6u;
    float _2810 = _675 / cbSceneParam._m0[86u].x;
    float _2811 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2864 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2865 = _2864 / _599;
        float _2876 = _2865 * _651;
        float _2877 = _652 * _2865;
        float _2878 = (-0.0) - _2877;
        float _2880 = _2865 * _653;
        float _2882 = (cbSceneParam._m0[77u].w * _2878) / _2864;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2877;
        float _2890 = sqrt(((_2876 * _2876) + (_2877 * _2877)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2864)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3077;
        if (abs((_2878 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3077 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3021 = 1.0 / cbSceneParam._m0[80u].x;
            float _3022 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3023 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            _3077 = ((abs(_2890 / _2878) * cbSceneParam._m0[80u].y) * ((((_3032 - _3033) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))))) * _3021)) - ((exp2(_2900 * _3032) - exp2(_2900 * _3033)) * _3021))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3079 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3088 = exp2((_3077 * (-1.44269502162933349609375)) * (1.0 - _3079.w));
        float _3089 = log2(_3088);
        float _3105 = log2(_2830);
        _2902 = (exp2(_3105 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].x)) * _3079.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2904 = (exp2(_3105 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].y)) * _3079.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2906 = (exp2(_3105 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].z)) * _3079.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2908 = _3088 * _2830;
    }
    else
    {
        _2902 = _2827;
        _2904 = _2828;
        _2906 = _2829;
        _2908 = _2830;
    }
    bool _3115;
    vec4 _2918;
    vec4 _2940;
    float _2942;
    float _2946;
    float _2947;
    float _2948;
    float _2949;
    bool _2959;
    for (;;)
    {
        _2918 = cbMatDynParam._m0[0u];
        float _2920 = roundEven(_2918.y);
        bool _2921 = _2920 == 3.0;
        float _2922 = log2(_2908);
        float _2929 = exp2(_2922 * cbSceneParam._m0[78u].x) * _2799;
        float _2930 = exp2(_2922 * cbSceneParam._m0[78u].y) * _2800;
        float _2931 = exp2(_2922 * cbSceneParam._m0[78u].z) * _2801;
        float _2938 = _664 + (-0.5);
        _2940 = cbMtdParam._m0[1u];
        _2942 = _2940.y * _2938;
        float _2945 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2946 = _2945 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
        _2947 = _2945 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
        _2948 = _2945 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
        _2949 = _2938 * 0.999000012874603271484375;
        _2959 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2959)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _2949) < 0.5)
            {
                _3115 = true;
                break;
            }
        }
        uint _3056 = _713 + uint(_2918.w);
        if ((cbInstanceData._m0[_3056].w < 1.0) && ((cbInstanceData._m0[_3056].w + _2949) < 0.5))
        {
            _3115 = true;
            break;
        }
        if ((_2942 + 1.0) < _2940.x)
        {
            _3115 = true;
            break;
        }
        _3115 = false;
        break;
    }
    float _3319;
    if (_3115)
    {
        discard_state = true;
        _3319 = 0.0;
    }
    else
    {
        _3319 = cbInstanceData._m0[_2802].w;
    }
    SV_Target.x = _2946;
    SV_Target.y = _2947;
    SV_Target.z = _2948;
    SV_Target.w = _3319;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2802].w;
    discard_exit();
}


