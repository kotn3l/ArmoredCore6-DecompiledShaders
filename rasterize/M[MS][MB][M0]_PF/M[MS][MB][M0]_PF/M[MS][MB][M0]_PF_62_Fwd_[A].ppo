#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1077;
float _3437;
float _3438;
float _3439;
float _3440;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _351 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _368 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _351) * cbMtdParam._m0[24u].x) + _351) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3449 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _376 = (_369 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _377 = (_369 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _378 = (_369 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _437 = _433.z;
    float _446 = ((_416.z - _437) * _369) + _437;
    float _449 = ((((_416.x - _435) * _369) + _435) * 2.0) + (-1.0);
    float _450 = ((((_416.y - _436) * _369) + _436) * 2.0) + (-1.0);
    float _451 = dot(vec2(_449, _450), vec2(_449, _450));
    float _3460 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))));
    float _461 = _449 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_391.x * 2.0) + (-1.0)));
    float _462 = _450 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_391.y * 2.0) + (-1.0)));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = (((_391.z - _446) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _446;
    float _487 = cbMtdParam._m0[22u].x + _475.w;
    float _491 = gl_FragCoord.x * 0.125;
    float _493 = gl_FragCoord.y * 0.125;
    float _504 = fma(_456, _219 * NORMAL.x, fma(_462, _226 * TANGENT.x, (_212 * _204) * _461));
    float _507 = fma(_456, _219 * NORMAL.y, fma(_462, _226 * TANGENT.y, (_212 * _205) * _461));
    float _510 = fma(_456, _219 * NORMAL.z, fma(_462, _226 * TANGENT.z, (_212 * _206) * _461));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3471 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _518 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3493 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3504 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3515 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_491, _493)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _592 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _582);
    float _593 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _582);
    float _594 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _582);
    float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
    float _599 = _592 * _598;
    float _600 = _593 * _598;
    float _601 = _594 * _598;
    vec4 _603 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_491, _493));
    float _605 = _603.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _759 = sqrt(((_592 * _592) + (_593 * _593)) + (_594 * _594));
        float _765 = (cbMatDynParam._m0[5u].x * _759) + cbMatDynParam._m0[5u].y;
        float _3526 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _770 = (cbMatDynParam._m0[5u].z * _759) + cbMatDynParam._m0[5u].w;
        float _3537 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) - _766)) + _766) < ((_605 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _616 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _617 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _635 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _638 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _641 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _654 = _232 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3548 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _616, cbSceneParam._m0[86u].y * _617));
    float _679 = ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * TEXCOORD_5.w) * _675.x;
    float _680 = dot(vec3(_515, _516, _517), vec3(_599, _600, _601));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _515) - _599;
    float _688 = (_683 * _516) - _600;
    float _689 = (_683 * _517) - _601;
    float _693 = abs(dot(vec3(_599, _600, _601), vec3(_515, _516, _517)));
    float _3581 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_518);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1076;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _801 = fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740));
        float _805 = fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740));
        float _809 = fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740));
        float _834 = _740 + _515;
        float _835 = _744 + _516;
        float _836 = _748 + _517;
        float _846 = fma(_836, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834)) - _801;
        float _847 = fma(_836, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834)) - _805;
        float _848 = fma(_836, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834)) - _809;
        float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
        float _865 = ((_852 * _846) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_801 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_852 * _847) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_805 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_852 * _848) / cbModelParam._m0[34u].z) + ((((((_809 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        float _904 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_870.x + (-0.5));
        float _906 = _904 * (_870.y + (-0.5));
        float _907 = _904 * (_870.z + (-0.5));
        float _914 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_877.x + (-0.5));
        float _916 = _914 * (_877.y + (-0.5));
        float _917 = _914 * (_877.z + (-0.5));
        float _924 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_884.x + (-0.5));
        float _926 = _924 * (_884.y + (-0.5));
        float _927 = _924 * (_884.z + (-0.5));
        float _934 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_891.x + (-0.5));
        float _936 = _934 * (_891.y + (-0.5));
        float _937 = _934 * (_891.z + (-0.5));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = _905 * 0.5;
        float _942 = _915 * 0.5;
        float _943 = _925 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _958 = (dot(vec3(_515, _516, _517), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _968 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3629 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_970 + 1.0))) + _975) * _938;
        float _985 = _906 * 0.5;
        float _986 = _916 * 0.5;
        float _987 = _926 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_515, _516, _517), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3662 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1012 + 1.0))) + _1017) * _939;
        float _1027 = _907 * 0.5;
        float _1028 = _917 * 0.5;
        float _1029 = _927 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_515, _516, _517), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3695 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1054 + 1.0))) + _1059) * _940;
        _1076 = _907;
        _1078 = _906;
        _1079 = _905;
        _1080 = _917;
        _1081 = _916;
        _1082 = _915;
        _1083 = _927;
        _1084 = _926;
        _1085 = _925;
        _1086 = _940;
        _1087 = _939;
        _1088 = _938;
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
    }
    else
    {
        _1076 = _1077;
        _1078 = _1077;
        _1079 = _1077;
        _1080 = _1077;
        _1081 = _1077;
        _1082 = _1077;
        _1083 = _1077;
        _1084 = _1077;
        _1085 = _1077;
        _1086 = _1077;
        _1087 = _1077;
        _1088 = _1077;
        _1089 = 0.0;
        _1090 = 0.0;
        _1091 = 0.0;
    }
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1115 = fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740));
        float _1119 = fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740));
        float _1123 = fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740));
        float _1146 = _740 + _515;
        float _1147 = _744 + _516;
        float _1148 = _748 + _517;
        float _1158 = fma(_1148, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146)) - _1115;
        float _1159 = fma(_1148, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146)) - _1119;
        float _1160 = fma(_1148, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146)) - _1123;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1115 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1119 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[35u].z) + ((((((_1123 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1214 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1181.x + (-0.5));
        float _1216 = _1214 * (_1181.y + (-0.5));
        float _1217 = _1214 * (_1181.z + (-0.5));
        float _1224 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1188.x + (-0.5));
        float _1226 = _1224 * (_1188.y + (-0.5));
        float _1227 = _1224 * (_1188.z + (-0.5));
        float _1234 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1195.x + (-0.5));
        float _1236 = _1234 * (_1195.y + (-0.5));
        float _1237 = _1234 * (_1195.z + (-0.5));
        float _1244 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1202.x + (-0.5));
        float _1246 = _1244 * (_1202.y + (-0.5));
        float _1247 = _1244 * (_1202.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_515, _516, _517), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3758 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1278 + 1.0))) + _1283) * _1248;
        float _1293 = _1216 * 0.5;
        float _1294 = _1226 * 0.5;
        float _1295 = _1236 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_515, _516, _517), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3791 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1320 + 1.0))) + _1325) * _1249;
        float _1335 = _1217 * 0.5;
        float _1336 = _1227 * 0.5;
        float _1337 = _1237 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_515, _516, _517), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3824 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1362 + 1.0))) + _1367) * _1250;
        _1384 = _1217;
        _1385 = _1216;
        _1386 = _1215;
        _1387 = _1227;
        _1388 = _1226;
        _1389 = _1225;
        _1390 = _1237;
        _1391 = _1236;
        _1392 = _1235;
        _1393 = _1250;
        _1394 = _1249;
        _1395 = _1248;
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1077;
        _1385 = _1077;
        _1386 = _1077;
        _1387 = _1077;
        _1388 = _1077;
        _1389 = _1077;
        _1390 = _1077;
        _1391 = _1077;
        _1392 = _1077;
        _1393 = _1077;
        _1394 = _1077;
        _1395 = _1077;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1089)) + _1089;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1090)) + _1090;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1091)) + _1091;
    float _1431 = fma(_1410, cbSceneParam._m0[89u].z, fma(_1409, cbSceneParam._m0[89u].y, _1408 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1410, cbSceneParam._m0[90u].z, fma(_1409, cbSceneParam._m0[90u].y, _1408 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1410, cbSceneParam._m0[91u].z, fma(_1409, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1408));
    float _1452 = _687 * 0.5;
    float _1453 = _688 * 0.5;
    float _1454 = _689 * 0.5;
    float _1455 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1458 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1461 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1495;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1468 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1076, _1080, _1083, _1086));
        float _1472 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1476 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1483 = dot(vec4(cbModelParam._m0[39u]), vec4(_1452, _1453, _1454, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1506;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1497 = dot(vec4(cbModelParam._m0[40u]), vec4(_1452, _1453, _1454, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1510 = (_1506 * cbModelParam._m0[1u].x) + (_1495 * (1.0 - cbModelParam._m0[1u].x));
    float _1520 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1520 : min(cbModelParam._m0[25u].z, _1520));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1570 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1574 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1578 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1581 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1584 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1587 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1615;
        if (_1581 > 0.0)
        {
            _1615 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1615 = frontier_phi_19_17_ladder;
        }
        float _1817;
        if (_1584 > 0.0)
        {
            _1817 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1817 = frontier_phi_28_24_ladder;
        }
        float _2060;
        if (_1587 > 0.0)
        {
            _2060 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2060 = frontier_phi_40_35_ladder;
        }
        float _2062 = isnan(_1817) ? _1615 : (isnan(_1615) ? _1817 : min(_1615, _1817));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1581) + _1570;
        float _2068 = (_2063 * _1584) + _1574;
        float _2069 = (_2063 * _1587) + _1578;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2193 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1521);
            frontier_phi_18_40_ladder = _2193.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2193.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2193.x * cbModelParam._m0[1u].y;
        }
        _1603 = frontier_phi_18_40_ladder_2;
        _1605 = frontier_phi_18_40_ladder_1;
        _1607 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1521);
        _1603 = _1591.x * cbModelParam._m0[1u].y;
        _1605 = _1591.y * cbModelParam._m0[1u].y;
        _1607 = _1591.z * cbModelParam._m0[1u].y;
    }
    float _1611 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1611 : min(cbModelParam._m0[25u].w, _1611));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1667 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1671 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1675 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1678 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1681 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1684 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1822;
        if (_1678 > 0.0)
        {
            _1822 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1822 = frontier_phi_30_26_ladder;
        }
        float _2087;
        if (_1681 > 0.0)
        {
            _2087 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2087 = frontier_phi_42_37_ladder;
        }
        float _2292;
        if (_1684 > 0.0)
        {
            _2292 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2292 = frontier_phi_51_48_ladder;
        }
        float _2294 = isnan(_2087) ? _1822 : (isnan(_1822) ? _2087 : min(_1822, _2087));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1678) + _1667;
        float _2300 = (_2295 * _1681) + _1671;
        float _2301 = (_2295 * _1684) + _1675;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2302;
        float _2305 = _2302 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2301 > _2305) || ((_2301 < _2303) || ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 < _2303) || (_2299 > _2305))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2301, cbModelParam._m0[17u].z, fma(_2300, cbModelParam._m0[17u].y, _2299 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2301, cbModelParam._m0[18u].z, fma(_2300, cbModelParam._m0[18u].y, _2299 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2301, cbModelParam._m0[19u].z, fma(_2300, cbModelParam._m0[19u].y, _2299 * cbModelParam._m0[19u].x))), _1612);
            frontier_phi_27_51_ladder = _2500.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2500.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2500.x * cbModelParam._m0[1u].z;
        }
        _1703 = frontier_phi_27_51_ladder_2;
        _1705 = frontier_phi_27_51_ladder_1;
        _1707 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1612);
        _1703 = _1687.x * cbModelParam._m0[1u].z;
        _1705 = _1687.y * cbModelParam._m0[1u].z;
        _1707 = _1687.z * cbModelParam._m0[1u].z;
    }
    float _1719 = ((((1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_708 * _695)) * _679;
    float _1720 = _1719 * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1721 = _1719 * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1722 = _1719 * ((cbModelParam._m0[1u].w * (_1707 - _1607)) + _1607);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    uvec4 _1741 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1743 = _1741.x * 14u;
    uint _1744 = _1743 + 13u;
    float _1751 = _679 + (-1.0);
    float _1756 = (cbLight._m0[_1744].x * _1751) + 1.0;
    float _1757 = (cbLight._m0[_1744].y * _1751) + 1.0;
    float _1758 = (cbLight._m0[_1744].z * _1751) + 1.0;
    float _1759 = (cbLight._m0[_1744].w * _1751) + 1.0;
    uint _1760 = _1743 + 5u;
    float _1766 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1770 = _1743 + 4u;
    float _1776 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1780 = _1743 | 1u;
    float _1791 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_515, _516, _517));
    float _1794 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_515, _516, _517));
    float _3960 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _3971 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1799 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1801 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1808 = ((cbLight._m0[_1760].x * _1766) * _1801) + ((cbLight._m0[_1770].x * _1776) * _1799);
    float _1809 = ((_1766 * cbLight._m0[_1760].y) * _1801) + ((_1776 * cbLight._m0[_1770].y) * _1799);
    float _1810 = ((_1766 * cbLight._m0[_1760].z) * _1801) + ((_1776 * cbLight._m0[_1770].z) * _1799);
    uvec4 _1814 = floatBitsToUint(cbLight._m0[_1743 + 12u]);
    bool _1816 = _1814.x == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1816)
    {
        _1827 = _1808;
        _1829 = _1809;
        _1831 = _1810;
    }
    else
    {
        uint _1835 = _1743 + 6u;
        float _1851 = (dot(vec3(cbLight._m0[_1743 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3982 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1854 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _1827 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1808;
        _1829 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1809;
        _1831 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1810;
    }
    bool _1834 = _1814.y == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1834)
    {
        _1872 = _1827;
        _1874 = _1829;
        _1876 = _1831;
    }
    else
    {
        uint _2031 = _1743 + 7u;
        float _2047 = (dot(vec3(cbLight._m0[_1743 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _3998 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2050 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1872 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1827;
        _1874 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1829;
        _1876 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1831;
    }
    uint _1879 = _1743 + 8u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _518) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1743].x + _599;
    float _1895 = cbLight._m0[_1743].y + _600;
    float _1896 = cbLight._m0[_1743].z + _601;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1743].xyz));
    float _4014 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1908 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1909 = dot(vec3(_515, _516, _517), vec3(_1901, _1902, _1903));
    float _4036 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1901, _1902, _1903));
    float _4047 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1893 * _1893;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1893;
    float _1944 = (0.5 / (((_1908 * ((_1907 * _1933) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _1933) + _1893) * _1907))) * _1907;
    float _4058 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1946 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    uint _1957 = _1743 + 9u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _518) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1780].x + _599;
    float _1971 = cbLight._m0[_1780].y + _600;
    float _1972 = cbLight._m0[_1780].z + _601;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1780].xyz));
    float _4069 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1984 = dot(vec3(_515, _516, _517), vec3(_1977, _1978, _1979));
    float _4080 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1977, _1978, _1979));
    float _4091 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1992 = _1969 * _1969;
    float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = 1.0 - _1969;
    float _2016 = (0.5 / (((_1908 * ((_1983 * _2006) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2006) + _1969) * _1983))) * _1983;
    float _4102 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
    float _2028 = (((_2005 * cbLight._m0[_1957].x) * _2018) * _1766) + (((_1932 * cbLight._m0[_1879].x) * _1946) * _1776);
    float _2029 = (((_2005 * cbLight._m0[_1957].y) * _2018) * _1766) + (((_1932 * cbLight._m0[_1879].y) * _1946) * _1776);
    float _2030 = (((_2005 * cbLight._m0[_1957].z) * _2018) * _1766) + (((_1932 * cbLight._m0[_1879].z) * _1946) * _1776);
    float _2092;
    float _2094;
    float _2096;
    if (_1816)
    {
        _2092 = _2028;
        _2094 = _2029;
        _2096 = _2030;
    }
    else
    {
        uint _2098 = _1743 + 2u;
        uint _2102 = _1743 + 10u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _518) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _599;
        float _2119 = cbLight._m0[_2098].y + _600;
        float _2120 = cbLight._m0[_2098].z + _601;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2098].xyz));
        float _4113 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2132 = dot(vec3(_515, _516, _517), vec3(_2125, _2126, _2127));
        float _4124 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4135 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2154 = 1.0 - _2117;
        float _2164 = (0.5 / (((_1908 * ((_2131 * _2154) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2154) + _2117) * _2131))) * _2131;
        float _4146 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _2092 = (((_2153 * cbLight._m0[_2102].x) * _2166) * _2167) + _2028;
        _2094 = (((_2153 * cbLight._m0[_2102].y) * _2166) * _2167) + _2029;
        _2096 = (((_2153 * cbLight._m0[_2102].z) * _2166) * _2167) + _2030;
    }
    float _2202;
    float _2204;
    float _2206;
    if (_1834)
    {
        _2202 = _2092;
        _2204 = _2094;
        _2206 = _2096;
    }
    else
    {
        uint _2213 = _1743 + 3u;
        uint _2217 = _1743 + 11u;
        float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _518) * 0.949999988079071044921875);
        float _2232 = _2231 * _2231;
        float _2233 = cbLight._m0[_2213].x + _599;
        float _2234 = cbLight._m0[_2213].y + _600;
        float _2235 = cbLight._m0[_2213].z + _601;
        float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
        float _2240 = _2239 * _2233;
        float _2241 = _2239 * _2234;
        float _2242 = _2239 * _2235;
        float _2243 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2213].xyz));
        float _4162 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2247 = dot(vec3(_515, _516, _517), vec3(_2240, _2241, _2242));
        float _4173 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2251 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2240, _2241, _2242));
        float _4184 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2255 = _2232 * _2232;
        float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
        float _2268 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2269 = 1.0 - _2232;
        float _2279 = (0.5 / (((_1908 * ((_2246 * _2269) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2269) + _2232) * _2246))) * _2246;
        float _4195 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2281 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
        float _2282 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2202 = (((_2268 * cbLight._m0[_2217].x) * _2281) * _2282) + _2092;
        _2204 = (((_2268 * cbLight._m0[_2217].y) * _2281) * _2282) + _2094;
        _2206 = (((_2268 * cbLight._m0[_2217].z) * _2281) * _2282) + _2096;
    }
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_1741.y == 0u)
    {
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2357;
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2357;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2357;
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.x;
        uint _2384 = uint((float(_2372.y) * floor(float(uint(cbSceneParam._m0[85u].y * _617) / _2373))) + floor(float(uint(cbSceneParam._m0[85u].x * _616) / _2373)));
        float _2394 = (log2(_2360 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2395 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        uint _2398 = uint(isnan(14.0) ? _2395 : (isnan(_2395) ? 14.0 : min(_2395, 14.0)));
        uvec4 _2403 = texelFetch(g_lightClusterGridBuffer, int(((_2398 << 2u) + (_2384 << 6u)) >> 2u));
        uint _2404 = _2403.x;
        uint _2405 = _2372.z;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((((1u << ((_2405 >> 4u) & 15u)) + 4294967295u) & _2404) == 0u) || ((_2405 & 240u) == 0u))
        {
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
        }
        else
        {
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            uint _2664 = 0u;
            uint _2673;
            bool _2674;
            for (;;)
            {
                _2673 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                _2674 = _2673 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2674)
                {
                    frontier_phi_68_pred = _2658;
                    frontier_phi_68_pred_1 = _2663;
                    frontier_phi_68_pred_2 = _2662;
                    frontier_phi_68_pred_3 = _2661;
                    frontier_phi_68_pred_4 = _2660;
                    frontier_phi_68_pred_5 = _2659;
                }
                else
                {
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    uint _2809;
                    _2803 = _2658;
                    _2804 = _2659;
                    _2805 = _2660;
                    _2806 = _2661;
                    _2807 = _2662;
                    _2808 = _2663;
                    _2809 = _2673;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    for (;;)
                    {
                        uint _2813 = uint(findLSB(_2809)) + (_2664 << 5u);
                        uint _2810 = (_2809 + 4294967295u) & _2809;
                        uint _2815 = _2813 * 48u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 3u)).x));
                        uint _2835 = (_2813 * 48u) + 4u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2854 = (_2813 * 48u) + 8u;
                        vec3 _2865 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x));
                        float _2869 = _2829.x - _2358;
                        float _2870 = _2829.y - _2359;
                        float _2871 = _2829.z - _2360;
                        float _2872 = dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871));
                        float _2875 = inversesqrt(_2872);
                        float _2876 = _2875 * _2869;
                        float _2877 = _2875 * _2870;
                        float _2878 = _2875 * _2871;
                        float _2879 = dot(vec3(_635, _638, _641), vec3(_2876, _2877, _2878));
                        float _2884 = 1.0 - (_2872 * _2829.w);
                        float _4221 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2886 = sqrt(_2872) * _2848.w;
                        float _2889 = 1.39999997615814208984375 / (_2886 + 1.39999997615814208984375);
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2879) + _2890;
                        float _2896 = _2886 * _2886;
                        float _2900 = ((isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))) * _2885) / ((_2896 * 0.699999988079071044921875) + 1.0);
                        float _2904 = (-0.0) - _2358;
                        float _2905 = (-0.0) - _2359;
                        float _2906 = (-0.0) - _2360;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2921 = exp2(log2(1.0 / ((_2896 * 3.5) + 5.0)) * 0.25);
                        float _2922 = 1.0 - _695;
                        float _2929 = sqrt(1.0 - ((1.0 - (_2922 * _2922)) * (1.0 - (_2921 * _2921))));
                        float _2930 = _2929 * _2929;
                        float _2931 = _2930 * _2930;
                        float _2932 = _2911 + _2876;
                        float _2933 = _2912 + _2877;
                        float _2934 = _2913 + _2878;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2942 = dot(vec3(_635, _638, _641), vec3(_2911, _2912, _2913));
                        float _4237 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2946 = dot(vec3(_635, _638, _641), vec3(_2938 * _2932, _2938 * _2933, _2938 * _2934));
                        float _4248 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2953 = ((_2949 * _2949) * (_2931 + (-1.0))) + 1.0;
                        float _2954 = _2889 * _2930;
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2879) + _2955;
                        float _4259 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2960 = 1.0 - _2930;
                        float _2970 = (0.5 / (((_2959 * ((_2945 * _2960) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2959 * _2960) + _2930) * _2945))) * _2959;
                        float _4270 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2981 = (((_2931 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_2953 * _2953) * ((_2896 * 2.1991131305694580078125) + 3.141590118408203125))) * _2885;
                        _2733 = (_2900 * _2848.x) + _2806;
                        _2734 = (_2900 * _2848.y) + _2807;
                        _2735 = (_2900 * _2848.z) + _2808;
                        _2730 = (_2981 * _2865.x) + _2803;
                        _2731 = (_2981 * _2865.y) + _2804;
                        _2732 = (_2981 * _2865.z) + _2805;
                        if (_2810 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2810;
                        }
                    }
                    frontier_phi_68_pred = _2730;
                    frontier_phi_68_pred_1 = _2735;
                    frontier_phi_68_pred_2 = _2734;
                    frontier_phi_68_pred_3 = _2733;
                    frontier_phi_68_pred_4 = _2732;
                    frontier_phi_68_pred_5 = _2731;
                }
                _2506 = frontier_phi_68_pred;
                _2516 = frontier_phi_68_pred_1;
                _2514 = frontier_phi_68_pred_2;
                _2512 = frontier_phi_68_pred_3;
                _2510 = frontier_phi_68_pred_4;
                _2508 = frontier_phi_68_pred_5;
                uint _2665 = _2664 + 1u;
                if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2658 = _2506;
                    _2659 = _2508;
                    _2660 = _2510;
                    _2661 = _2512;
                    _2662 = _2514;
                    _2663 = _2516;
                    _2664 = _2665;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
        }
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.z;
        uint _2522 = (_2520 >> 8u) & 15u;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((4294967295u << _2522) & _2404) == 0u)
        {
            _2626 = _2505;
            _2628 = _2507;
            _2630 = _2509;
            _2632 = _2511;
            _2634 = _2513;
            _2636 = _2515;
        }
        else
        {
            float _2651 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
            float _2652 = _2651 * _2358;
            float _2653 = _2651 * _2359;
            float _2654 = _2651 * _2360;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2522 < ((_2520 >> 12u) & 15u))
            {
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2786 = _2505;
                float _2787 = _2507;
                float _2788 = _2509;
                float _2789 = _2511;
                float _2790 = _2513;
                float _2791 = _2515;
                uint _2792 = _2522;
                uint _2801;
                bool _2802;
                for (;;)
                {
                    _2801 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                    _2802 = _2801 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2802)
                    {
                        frontier_phi_79_pred = _2791;
                        frontier_phi_79_pred_1 = _2790;
                        frontier_phi_79_pred_2 = _2789;
                        frontier_phi_79_pred_3 = _2788;
                        frontier_phi_79_pred_4 = _2787;
                        frontier_phi_79_pred_5 = _2786;
                    }
                    else
                    {
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3008 = _2786;
                        float _3009 = _2787;
                        float _3010 = _2788;
                        float _3011 = _2789;
                        float _3012 = _2790;
                        float _3013 = _2791;
                        uint _3014 = _2801;
                        uint _3015;
                        vec4 _3040;
                        float _3041;
                        vec4 _3056;
                        vec3 _3068;
                        vec4 _3083;
                        vec4 _3098;
                        float _3144;
                        bool _3145;
                        for (;;)
                        {
                            uint _3025 = ((_2792 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3014));
                            _3015 = (_3014 + 4294967295u) & _3014;
                            uint _3027 = _3025 * 40u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3041 = _3040.w;
                            uint _3043 = (_3025 * 40u) + 4u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3058 = (_3025 * 40u) + 8u;
                            _3068 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x));
                            uint _3070 = (_3025 * 40u) + 16u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3025 * 40u) + 20u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3025 * 40u) + 24u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3119 = (_3025 * 40u) + 28u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3144 = fma(_2360, _3132.z, fma(_2359, _3132.y, _3132.x * _2358)) + _3132.w;
                            _3145 = !((fma(_2360, _3113.z, fma(_2359, _3113.y, _3113.x * _2358)) + _3113.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3145)
                            {
                                float _3172 = _3040.x - _2358;
                                float _3173 = _3040.y - _2359;
                                float _3174 = _3040.z - _2360;
                                float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                                float _3178 = inversesqrt(_3175);
                                float _3179 = _3178 * _3172;
                                float _3180 = _3178 * _3173;
                                float _3181 = _3178 * _3174;
                                float _3185 = 1.0 - (_3175 / (_3041 * _3041));
                                float _4281 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3190 = sqrt(_3175) * _3056.w;
                                float _3192 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                                float _3193 = _3192 * _3192;
                                float _3196 = ((1.0 - _3193) * dot(vec3(_3179, _3180, _3181), vec3(_635, _638, _641))) + _3193;
                                float _3199 = _3190 * _3190;
                                float _3203 = (fma(_2360, _3083.z, fma(_2359, _3083.y, _3083.x * _2358)) + _3083.w) / _3144;
                                float _3204 = (fma(_2360, _3098.z, fma(_2359, _3098.y, _3098.x * _2358)) + _3098.w) / _3144;
                                float _3208 = 1.0 - dot(vec2(_3203, _3204), vec2(_3203, _3204));
                                float _4297 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3210 = _3209 * (((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3186) / ((_3199 * 0.699999988079071044921875) + 1.0));
                                float _3222 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                                float _3223 = 1.0 - _695;
                                float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                                float _3231 = _3230 * _3230;
                                float _3232 = _3231 * _3231;
                                float _3233 = _3179 - _2652;
                                float _3234 = _3180 - _2653;
                                float _3235 = _3181 - _2654;
                                float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                                float _3243 = dot(vec3(_635, _638, _641), vec3((-0.0) - _2652, (-0.0) - _2653, (-0.0) - _2654));
                                float _4308 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3247 = dot(vec3(_635, _638, _641), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                                float _4319 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                                float _3255 = _3192 * _3231;
                                float _3256 = _3255 * _3255;
                                float _3262 = ((1.0 - _3256) * dot(vec3(_635, _638, _641), vec3(_3179, _3180, _3181))) + _3256;
                                float _4330 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3264 = 1.0 - _3231;
                                float _3274 = (0.5 / (((_3263 * ((_3246 * _3264) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3231) * _3246))) * _3263;
                                float _4341 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3284 = (_3209 * _3186) * (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3254 * _3254) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3210 * _3056.y;
                                frontier_phi_85_pred_1 = _3210 * _3056.x;
                                frontier_phi_85_pred_2 = _3284 * _3068.z;
                                frontier_phi_85_pred_3 = _3284 * _3068.y;
                                frontier_phi_85_pred_4 = _3284 * _3068.x;
                                frontier_phi_85_pred_5 = _3210 * _3056.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_85_pred;
                            _3291 = frontier_phi_85_pred_1;
                            _3290 = frontier_phi_85_pred_2;
                            _3289 = frontier_phi_85_pred_3;
                            _3288 = frontier_phi_85_pred_4;
                            _3293 = frontier_phi_85_pred_5;
                            _2998 = _3291 + _3011;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            _2995 = _3288 + _3008;
                            _2996 = _3289 + _3009;
                            _2997 = _3290 + _3010;
                            if (_3015 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3015;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3000;
                        frontier_phi_79_pred_1 = _2999;
                        frontier_phi_79_pred_2 = _2998;
                        frontier_phi_79_pred_3 = _2997;
                        frontier_phi_79_pred_4 = _2996;
                        frontier_phi_79_pred_5 = _2995;
                    }
                    _2637 = frontier_phi_79_pred;
                    _2635 = frontier_phi_79_pred_1;
                    _2633 = frontier_phi_79_pred_2;
                    _2631 = frontier_phi_79_pred_3;
                    _2629 = frontier_phi_79_pred_4;
                    _2627 = frontier_phi_79_pred_5;
                    uint _2793 = _2792 + 1u;
                    if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2786 = _2627;
                        _2787 = _2629;
                        _2788 = _2631;
                        _2789 = _2633;
                        _2790 = _2635;
                        _2791 = _2637;
                        _2792 = _2793;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2631;
                frontier_phi_60_61_ladder_1 = _2637;
                frontier_phi_60_61_ladder_2 = _2635;
                frontier_phi_60_61_ladder_3 = _2633;
                frontier_phi_60_61_ladder_4 = _2629;
                frontier_phi_60_61_ladder_5 = _2627;
            }
            else
            {
                frontier_phi_60_61_ladder = _2509;
                frontier_phi_60_61_ladder_1 = _2515;
                frontier_phi_60_61_ladder_2 = _2513;
                frontier_phi_60_61_ladder_3 = _2511;
                frontier_phi_60_61_ladder_4 = _2507;
                frontier_phi_60_61_ladder_5 = _2505;
            }
            _2626 = frontier_phi_60_61_ladder_5;
            _2628 = frontier_phi_60_61_ladder_4;
            _2630 = frontier_phi_60_61_ladder;
            _2632 = frontier_phi_60_61_ladder_3;
            _2634 = frontier_phi_60_61_ladder_2;
            _2636 = frontier_phi_60_61_ladder_1;
        }
        float _2641 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2417 = (_2641 * _2632) + _1872;
        _2419 = (_2641 * _2634) + _1874;
        _2421 = (_2641 * _2636) + _1876;
        _2423 = ((_2626 * 0.039999999105930328369140625) * _2641) + _2202;
        _2425 = ((_2628 * 0.039999999105930328369140625) * _2641) + _2204;
        _2427 = ((_2630 * 0.039999999105930328369140625) * _2641) + _2206;
    }
    else
    {
        _2417 = _1872;
        _2419 = _1874;
        _2421 = _1876;
        _2423 = _2202;
        _2425 = _2204;
        _2427 = _2206;
    }
    float _4357 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4368 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4379 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2444 = ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2417 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _679))) + ((_2423 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    float _2445 = ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2419 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _679))) + ((_2425 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    float _2446 = ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2421 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _679))) + ((_2427 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    uint _2447 = _232 + 6u;
    float _2455 = _616 / cbSceneParam._m0[86u].x;
    float _2456 = _617 / cbSceneParam._m0[86u].y;
    vec4 _2470 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2472 = _2470.x;
    float _2473 = _2470.y;
    float _2474 = _2470.z;
    float _2475 = _2470.w;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2530 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2531 = _2530 / _540;
        float _2542 = _2531 * _592;
        float _2543 = _593 * _2531;
        float _2544 = (-0.0) - _2543;
        float _2546 = _2531 * _594;
        float _2548 = (cbSceneParam._m0[77u].w * _2544) / _2530;
        float _2549 = _2548 + cbSceneParam._m0[79u].w;
        float _2550 = cbSceneParam._m0[79u].w - _2543;
        float _2556 = sqrt(((_2542 * _2542) + (_2543 * _2543)) + (_2546 * _2546));
        float _2559 = (1.0 - (cbSceneParam._m0[77u].w / _2530)) * _2556;
        float _2564 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2566 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2743;
        if (abs((_2544 - _2548) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2743 = ((((_2549 > 0.0) ? exp2(_2564 * _2549) : (2.0 - exp2(_2566 * _2549))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2559;
        }
        else
        {
            float _2687 = 1.0 / cbSceneParam._m0[80u].x;
            float _2688 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : max(_2549, _2550));
            float _2689 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : min(_2549, _2550));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            _2743 = ((abs(_2556 / _2544) * cbSceneParam._m0[80u].y) * ((((_2698 - _2699) * 2.0) - ((exp2(_2564 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)))) - exp2(_2564 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))))) * _2687)) - ((exp2(_2566 * _2698) - exp2(_2566 * _2699)) * _2687))) + (_2559 * cbSceneParam._m0[80u].z);
        }
        vec4 _2745 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, 1.0), 0.0);
        float _2754 = exp2((_2743 * (-1.44269502162933349609375)) * (1.0 - _2745.w));
        float _2755 = log2(_2754);
        float _2771 = log2(_2475);
        _2568 = (exp2(_2771 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].x)) * _2745.x) / cbSceneParam._m0[78u].x)) + _2472;
        _2570 = (exp2(_2771 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].y)) * _2745.y) / cbSceneParam._m0[78u].y)) + _2473;
        _2572 = (exp2(_2771 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].z)) * _2745.z) / cbSceneParam._m0[78u].z)) + _2474;
        _2574 = _2754 * _2475;
    }
    else
    {
        _2568 = _2472;
        _2570 = _2473;
        _2572 = _2474;
        _2574 = _2475;
    }
    bool _2781;
    vec4 _2584;
    vec4 _2606;
    float _2608;
    float _2612;
    float _2613;
    float _2614;
    float _2615;
    bool _2625;
    for (;;)
    {
        _2584 = cbMatDynParam._m0[0u];
        float _2586 = roundEven(_2584.y);
        bool _2587 = _2586 == 3.0;
        float _2588 = log2(_2574);
        float _2595 = exp2(_2588 * cbSceneParam._m0[78u].x) * _2444;
        float _2596 = exp2(_2588 * cbSceneParam._m0[78u].y) * _2445;
        float _2597 = exp2(_2588 * cbSceneParam._m0[78u].z) * _2446;
        float _2604 = _605 + (-0.5);
        _2606 = cbMtdParam._m0[1u];
        _2608 = _2606.y * _2604;
        float _2611 = (_2586 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2612 = _2611 * (_2587 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2568)));
        _2613 = _2611 * (_2587 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2570)));
        _2614 = _2611 * (_2587 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2572)));
        _2615 = _2604 * 0.999000012874603271484375;
        _2625 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2625)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2615) < 0.5)
            {
                _2781 = true;
                break;
            }
        }
        uint _2722 = _654 + uint(_2584.w);
        if ((cbInstanceData._m0[_2722].w < 1.0) && ((cbInstanceData._m0[_2722].w + _2615) < 0.5))
        {
            _2781 = true;
            break;
        }
        if ((_2608 + 1.0) < _2606.x)
        {
            _2781 = true;
            break;
        }
        _2781 = false;
        break;
    }
    float _2986;
    if (_2781)
    {
        discard_state = true;
        _2986 = 0.0;
    }
    else
    {
        _2986 = cbInstanceData._m0[_2447].w;
    }
    SV_Target.x = _2612;
    SV_Target.y = _2613;
    SV_Target.z = _2614;
    SV_Target.w = _2986;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2447].w;
    discard_exit();
}


