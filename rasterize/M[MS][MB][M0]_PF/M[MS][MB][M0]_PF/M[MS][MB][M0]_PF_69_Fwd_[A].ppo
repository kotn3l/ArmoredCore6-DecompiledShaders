#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1189;
float _3549;
float _3550;
float _3551;
float _3552;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _365 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _365) * cbMtdParam._m0[24u].x) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3561 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _390 = (_383 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _391 = (_383 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _392 = (_383 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _383) + _451;
    float _463 = ((((_430.x - _449) * _383) + _449) * 2.0) + (-1.0);
    float _464 = ((((_430.y - _450) * _383) + _450) * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3572 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    float _475 = _463 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_405.x * 2.0) + (-1.0)));
    float _476 = _464 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_405.y * 2.0) + (-1.0)));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _534 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_505 - _506) * cbMtdParam._m0[24u].w) + _506) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3583 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _543 = ((((cbMtdParam._m0[10u].x - _390) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _535) + _390;
    float _544 = ((((cbMtdParam._m0[10u].y - _391) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _535) + _391;
    float _545 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _392)) * _535) + _392;
    float _550 = (((_405.z - _460) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _460;
    float _554 = ((cbMtdParam._m0[23u].y - _550) * _535) + _550;
    vec4 _573 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _579 = (_573.x * 2.0) + (-1.0);
    float _580 = (_573.y * 2.0) + (-1.0);
    float _581 = dot(vec2(_579, _580), vec2(_579, _580));
    float _3594 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _597 = (_535 * (((cbMtdParam._m0[22u].z * _475) - _475) + _579)) + _475;
    float _598 = (_535 * (((cbMtdParam._m0[22u].z * _476) - _476) + _580)) + _476;
    float _599 = (_535 * (sqrt(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) - _470)) + _470;
    float _601 = cbMtdParam._m0[22u].x + _489.w;
    float _605 = gl_FragCoord.x * 0.125;
    float _607 = gl_FragCoord.y * 0.125;
    float _617 = fma(_599, _234 * NORMAL.x, fma(_598, _241 * TANGENT.x, (_227 * _219) * _597));
    float _620 = fma(_599, _234 * NORMAL.y, fma(_598, _241 * TANGENT.y, (_227 * _220) * _597));
    float _623 = fma(_599, _234 * NORMAL.z, fma(_598, _241 * TANGENT.z, (_227 * _221) * _597));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    float _628 = _627 * _617;
    float _629 = _627 * _620;
    float _630 = _627 * _623;
    float _3605 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _631 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3627 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3638 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3649 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_605, _607)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _704 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _694);
    float _705 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _694);
    float _706 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _694);
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _704 * _710;
    float _712 = _705 * _710;
    float _713 = _706 * _710;
    vec4 _715 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_605, _607));
    float _717 = _715.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _871 = sqrt(((_704 * _704) + (_705 * _705)) + (_706 * _706));
        float _877 = (cbMatDynParam._m0[5u].x * _871) + cbMatDynParam._m0[5u].y;
        float _3660 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _882 = (cbMatDynParam._m0[5u].z * _871) + cbMatDynParam._m0[5u].w;
        float _3671 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) - _878)) + _878) < ((_717 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _728 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _729 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _747 = fma(_630, cbSceneParam._m0[5u].z, fma(_629, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _628));
    float _750 = fma(_630, cbSceneParam._m0[6u].z, fma(_629, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _628));
    float _753 = fma(_630, cbSceneParam._m0[7u].z, fma(_629, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _628));
    uint _766 = _247 + 9u;
    uint _767 = _766 + uint(cbMatDynParam._m0[0u].w);
    float _773 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_767].x;
    float _774 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_767].y;
    float _775 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_767].z;
    float _3682 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    vec4 _787 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _728, cbSceneParam._m0[86u].y * _729));
    float _791 = ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * TEXCOORD_5.w) * _787.x;
    float _792 = dot(vec3(_628, _629, _630), vec3(_711, _712, _713));
    float _795 = _792 * 2.0;
    float _799 = (_795 * _628) - _711;
    float _800 = (_795 * _629) - _712;
    float _801 = (_795 * _630) - _713;
    float _805 = abs(dot(vec3(_711, _712, _713), vec3(_628, _629, _630)));
    float _3715 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _807 = sqrt(_631);
    float _820 = exp2((_807 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_807 * 3.0));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1188;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _913 = fma(_860, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852));
        float _917 = fma(_860, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852));
        float _921 = fma(_860, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852));
        float _946 = _852 + _628;
        float _947 = _856 + _629;
        float _948 = _860 + _630;
        float _958 = fma(_948, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946)) - _913;
        float _959 = fma(_948, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946)) - _917;
        float _960 = fma(_948, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946)) - _921;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _977 = ((_964 * _958) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_913 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_964 * _959) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_917 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_964 * _960) / cbModelParam._m0[34u].z) + ((((((_921 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        float _1016 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_982.x + (-0.5));
        float _1018 = _1016 * (_982.y + (-0.5));
        float _1019 = _1016 * (_982.z + (-0.5));
        float _1026 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_989.x + (-0.5));
        float _1028 = _1026 * (_989.y + (-0.5));
        float _1029 = _1026 * (_989.z + (-0.5));
        float _1036 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_996.x + (-0.5));
        float _1038 = _1036 * (_996.y + (-0.5));
        float _1039 = _1036 * (_996.z + (-0.5));
        float _1046 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1003.x + (-0.5));
        float _1048 = _1046 * (_1003.y + (-0.5));
        float _1049 = _1046 * (_1003.z + (-0.5));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = _1017 * 0.5;
        float _1054 = _1027 * 0.5;
        float _1055 = _1037 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1070 = (dot(vec3(_628, _629, _630), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1080 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3763 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1082 + 1.0))) + _1087) * _1050;
        float _1097 = _1018 * 0.5;
        float _1098 = _1028 * 0.5;
        float _1099 = _1038 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_628, _629, _630), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3796 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1124 + 1.0))) + _1129) * _1051;
        float _1139 = _1019 * 0.5;
        float _1140 = _1029 * 0.5;
        float _1141 = _1039 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_628, _629, _630), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3829 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1166 + 1.0))) + _1171) * _1052;
        _1188 = _1019;
        _1190 = _1018;
        _1191 = _1017;
        _1192 = _1029;
        _1193 = _1028;
        _1194 = _1027;
        _1195 = _1039;
        _1196 = _1038;
        _1197 = _1037;
        _1198 = _1052;
        _1199 = _1051;
        _1200 = _1050;
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _1189;
        _1190 = _1189;
        _1191 = _1189;
        _1192 = _1189;
        _1193 = _1189;
        _1194 = _1189;
        _1195 = _1189;
        _1196 = _1189;
        _1197 = _1189;
        _1198 = _1189;
        _1199 = _1189;
        _1200 = _1189;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_860, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _852));
        float _1231 = fma(_860, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _852));
        float _1235 = fma(_860, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _852));
        float _1258 = _852 + _628;
        float _1259 = _856 + _629;
        float _1260 = _860 + _630;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_628, _629, _630), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3892 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_628, _629, _630), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3925 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_628, _629, _630), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3958 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1189;
        _1497 = _1189;
        _1498 = _1189;
        _1499 = _1189;
        _1500 = _1189;
        _1501 = _1189;
        _1502 = _1189;
        _1503 = _1189;
        _1504 = _1189;
        _1505 = _1189;
        _1506 = _1189;
        _1507 = _1189;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1201)) + _1201;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1202)) + _1202;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1203)) + _1203;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _799 * 0.5;
    float _1565 = _800 * 0.5;
    float _1566 = _801 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1188, _1192, _1195, _1198));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1191, _1194, _1197, _1200));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _631);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1682 = fma(_860, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852)) + cbModelParam._m0[13u].w;
        float _1686 = fma(_860, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852)) + cbModelParam._m0[14u].w;
        float _1690 = fma(_860, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852)) + cbModelParam._m0[15u].w;
        float _1693 = fma(_801, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799));
        float _1696 = fma(_801, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799));
        float _1699 = fma(_801, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799));
        float _1727;
        if (_1693 > 0.0)
        {
            _1727 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1727 = frontier_phi_19_17_ladder;
        }
        float _1929;
        if (_1696 > 0.0)
        {
            _1929 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1929 = frontier_phi_28_24_ladder;
        }
        float _2172;
        if (_1699 > 0.0)
        {
            _2172 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2172 = frontier_phi_40_35_ladder;
        }
        float _2174 = isnan(_1929) ? _1727 : (isnan(_1727) ? _1929 : min(_1727, _1929));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1693) + _1682;
        float _2180 = (_2175 * _1696) + _1686;
        float _2181 = (_2175 * _1699) + _1690;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2182;
        float _2186 = _2182 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 > _2186) || ((_2180 < _2184) || ((_2179 < _2184) || (_2179 > _2186))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_18_40_ladder = _2305.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2305.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2305.x * cbModelParam._m0[1u].y;
        }
        _1715 = frontier_phi_18_40_ladder_2;
        _1717 = frontier_phi_18_40_ladder_1;
        _1719 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_799, _800, _801), _1633);
        _1715 = _1703.x * cbModelParam._m0[1u].y;
        _1717 = _1703.y * cbModelParam._m0[1u].y;
        _1719 = _1703.z * cbModelParam._m0[1u].y;
    }
    float _1723 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _631);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1723 : min(cbModelParam._m0[25u].w, _1723));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1779 = fma(_860, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852)) + cbModelParam._m0[21u].w;
        float _1783 = fma(_860, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852)) + cbModelParam._m0[22u].w;
        float _1787 = fma(_860, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852)) + cbModelParam._m0[23u].w;
        float _1790 = fma(_801, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799));
        float _1793 = fma(_801, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799));
        float _1796 = fma(_801, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799));
        float _1934;
        if (_1790 > 0.0)
        {
            _1934 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1934 = frontier_phi_30_26_ladder;
        }
        float _2199;
        if (_1793 > 0.0)
        {
            _2199 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2199 = frontier_phi_42_37_ladder;
        }
        float _2404;
        if (_1796 > 0.0)
        {
            _2404 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2404 = frontier_phi_51_48_ladder;
        }
        float _2406 = isnan(_2199) ? _1934 : (isnan(_1934) ? _2199 : min(_1934, _2199));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1790) + _1779;
        float _2412 = (_2407 * _1793) + _1783;
        float _2413 = (_2407 * _1796) + _1787;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2414;
        float _2417 = _2414 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2413 > _2417) || ((_2413 < _2415) || ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 < _2415) || (_2411 > _2417))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2413, cbModelParam._m0[17u].z, fma(_2412, cbModelParam._m0[17u].y, _2411 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2413, cbModelParam._m0[18u].z, fma(_2412, cbModelParam._m0[18u].y, _2411 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2413, cbModelParam._m0[19u].z, fma(_2412, cbModelParam._m0[19u].y, _2411 * cbModelParam._m0[19u].x))), _1724);
            frontier_phi_27_51_ladder = _2612.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2612.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2612.x * cbModelParam._m0[1u].z;
        }
        _1815 = frontier_phi_27_51_ladder_2;
        _1817 = frontier_phi_27_51_ladder_1;
        _1819 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_799, _800, _801), _1724);
        _1815 = _1799.x * cbModelParam._m0[1u].z;
        _1817 = _1799.y * cbModelParam._m0[1u].z;
        _1819 = _1799.z * cbModelParam._m0[1u].z;
    }
    float _1831 = ((((1.0 - _820) * ((_807 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_820 * _807)) * _791;
    float _1832 = _1831 * ((cbModelParam._m0[1u].w * (_1815 - _1715)) + _1715);
    float _1833 = _1831 * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1834 = _1831 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1837 = fma(_1834, cbSceneParam._m0[89u].z, fma(_1833, cbSceneParam._m0[89u].y, _1832 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1834, cbSceneParam._m0[90u].z, fma(_1833, cbSceneParam._m0[90u].y, _1832 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1834, cbSceneParam._m0[91u].z, fma(_1833, cbSceneParam._m0[91u].y, _1832 * cbSceneParam._m0[91u].x));
    uvec4 _1853 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1855 = _1853.x * 14u;
    uint _1856 = _1855 + 13u;
    float _1863 = _791 + (-1.0);
    float _1868 = (cbLight._m0[_1856].x * _1863) + 1.0;
    float _1869 = (cbLight._m0[_1856].y * _1863) + 1.0;
    float _1870 = (cbLight._m0[_1856].z * _1863) + 1.0;
    float _1871 = (cbLight._m0[_1856].w * _1863) + 1.0;
    uint _1872 = _1855 + 5u;
    float _1878 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1882 = _1855 + 4u;
    float _1888 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1892 = _1855 | 1u;
    float _1903 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_628, _629, _630));
    float _1906 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_628, _629, _630));
    float _4094 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _4105 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1911 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1913 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.3183098733425140380859375;
    float _1920 = ((cbLight._m0[_1872].x * _1878) * _1913) + ((cbLight._m0[_1882].x * _1888) * _1911);
    float _1921 = ((_1878 * cbLight._m0[_1872].y) * _1913) + ((_1888 * cbLight._m0[_1882].y) * _1911);
    float _1922 = ((_1878 * cbLight._m0[_1872].z) * _1913) + ((_1888 * cbLight._m0[_1882].z) * _1911);
    uvec4 _1926 = floatBitsToUint(cbLight._m0[_1855 + 12u]);
    bool _1928 = _1926.x == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1928)
    {
        _1939 = _1920;
        _1941 = _1921;
        _1943 = _1922;
    }
    else
    {
        uint _1947 = _1855 + 6u;
        float _1963 = (dot(vec3(cbLight._m0[_1855 + 2u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _1964 = _1963 * _1963;
        float _4116 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1966 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1939 = (((cbLight._m0[_1947].x * 0.3183098733425140380859375) * _1965) * _1966) + _1920;
        _1941 = (((cbLight._m0[_1947].y * 0.3183098733425140380859375) * _1965) * _1966) + _1921;
        _1943 = (((cbLight._m0[_1947].z * 0.3183098733425140380859375) * _1965) * _1966) + _1922;
    }
    bool _1946 = _1926.y == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1946)
    {
        _1984 = _1939;
        _1986 = _1941;
        _1988 = _1943;
    }
    else
    {
        uint _2143 = _1855 + 7u;
        float _2159 = (dot(vec3(cbLight._m0[_1855 + 3u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4132 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2162 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1984 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _1939;
        _1986 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _1941;
        _1988 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _1943;
    }
    uint _1991 = _1855 + 8u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _631) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1855].x + _711;
    float _2007 = cbLight._m0[_1855].y + _712;
    float _2008 = cbLight._m0[_1855].z + _713;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_1855].xyz));
    float _4148 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2020 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2021 = dot(vec3(_628, _629, _630), vec3(_2013, _2014, _2015));
    float _4170 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2013, _2014, _2015));
    float _4181 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2005 * _2005;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2044 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2045 = 1.0 - _2005;
    float _2056 = (0.5 / (((_2020 * ((_2019 * _2045) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2045) + _2005) * _2019))) * _2019;
    float _4192 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    uint _2069 = _1855 + 9u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _631) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1892].x + _711;
    float _2083 = cbLight._m0[_1892].y + _712;
    float _2084 = cbLight._m0[_1892].z + _713;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_1892].xyz));
    float _4203 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2096 = dot(vec3(_628, _629, _630), vec3(_2089, _2090, _2091));
    float _4214 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2089, _2090, _2091));
    float _4225 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2081 * _2081;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2081;
    float _2128 = (0.5 / (((_2020 * ((_2095 * _2118) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2118) + _2081) * _2095))) * _2095;
    float _4236 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    float _2140 = (((_2117 * cbLight._m0[_2069].x) * _2130) * _1878) + (((_2044 * cbLight._m0[_1991].x) * _2058) * _1888);
    float _2141 = (((_2117 * cbLight._m0[_2069].y) * _2130) * _1878) + (((_2044 * cbLight._m0[_1991].y) * _2058) * _1888);
    float _2142 = (((_2117 * cbLight._m0[_2069].z) * _2130) * _1878) + (((_2044 * cbLight._m0[_1991].z) * _2058) * _1888);
    float _2204;
    float _2206;
    float _2208;
    if (_1928)
    {
        _2204 = _2140;
        _2206 = _2141;
        _2208 = _2142;
    }
    else
    {
        uint _2210 = _1855 + 2u;
        uint _2214 = _1855 + 10u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _631) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _711;
        float _2231 = cbLight._m0[_2210].y + _712;
        float _2232 = cbLight._m0[_2210].z + _713;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2210].xyz));
        float _4247 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2244 = dot(vec3(_628, _629, _630), vec3(_2237, _2238, _2239));
        float _4258 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4269 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_2020 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2266) + _2229) * _2243))) * _2243;
        float _4280 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2204 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2140;
        _2206 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2141;
        _2208 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2142;
    }
    float _2314;
    float _2316;
    float _2318;
    if (_1946)
    {
        _2314 = _2204;
        _2316 = _2206;
        _2318 = _2208;
    }
    else
    {
        uint _2325 = _1855 + 3u;
        uint _2329 = _1855 + 11u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _631) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _711;
        float _2346 = cbLight._m0[_2325].y + _712;
        float _2347 = cbLight._m0[_2325].z + _713;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2325].xyz));
        float _4296 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2359 = dot(vec3(_628, _629, _630), vec3(_2352, _2353, _2354));
        float _4307 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4318 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2381 = 1.0 - _2344;
        float _2391 = (0.5 / (((_2020 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2381) + _2344) * _2358))) * _2358;
        float _4329 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2314 = (((_2380 * cbLight._m0[_2329].x) * _2393) * _2394) + _2204;
        _2316 = (((_2380 * cbLight._m0[_2329].y) * _2393) * _2394) + _2206;
        _2318 = (((_2380 * cbLight._m0[_2329].z) * _2393) * _2394) + _2208;
    }
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    if (_1853.y == 0u)
    {
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2469;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2469;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2469;
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.x;
        uint _2496 = uint((float(_2484.y) * floor(float(uint(cbSceneParam._m0[85u].y * _729) / _2485))) + floor(float(uint(cbSceneParam._m0[85u].x * _728) / _2485)));
        float _2506 = (log2(_2472 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        uint _2510 = uint(isnan(14.0) ? _2507 : (isnan(_2507) ? 14.0 : min(_2507, 14.0)));
        uvec4 _2515 = texelFetch(g_lightClusterGridBuffer, int(((_2510 << 2u) + (_2496 << 6u)) >> 2u));
        uint _2516 = _2515.x;
        uint _2517 = _2484.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2517 >> 4u) & 15u)) + 4294967295u) & _2516) == 0u) || ((_2517 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            uint _2776 = 0u;
            uint _2785;
            bool _2786;
            for (;;)
            {
                _2785 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                _2786 = _2785 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2786)
                {
                    frontier_phi_68_pred = _2770;
                    frontier_phi_68_pred_1 = _2775;
                    frontier_phi_68_pred_2 = _2774;
                    frontier_phi_68_pred_3 = _2773;
                    frontier_phi_68_pred_4 = _2772;
                    frontier_phi_68_pred_5 = _2771;
                }
                else
                {
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    uint _2921;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2785;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    for (;;)
                    {
                        uint _2925 = uint(findLSB(_2921)) + (_2776 << 5u);
                        uint _2922 = (_2921 + 4294967295u) & _2921;
                        uint _2927 = _2925 * 48u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2947 = (_2925 * 48u) + 4u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2966 = (_2925 * 48u) + 8u;
                        vec3 _2977 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x));
                        float _2981 = _2941.x - _2470;
                        float _2982 = _2941.y - _2471;
                        float _2983 = _2941.z - _2472;
                        float _2984 = dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983));
                        float _2987 = inversesqrt(_2984);
                        float _2988 = _2987 * _2981;
                        float _2989 = _2987 * _2982;
                        float _2990 = _2987 * _2983;
                        float _2991 = dot(vec3(_747, _750, _753), vec3(_2988, _2989, _2990));
                        float _2996 = 1.0 - (_2984 * _2941.w);
                        float _4355 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2997 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _2998 = sqrt(_2984) * _2960.w;
                        float _3001 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2991) + _3002;
                        float _3008 = _2998 * _2998;
                        float _3012 = ((isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0))) * _2997) / ((_3008 * 0.699999988079071044921875) + 1.0);
                        float _3016 = (-0.0) - _2470;
                        float _3017 = (-0.0) - _2471;
                        float _3018 = (-0.0) - _2472;
                        float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3033 = exp2(log2(1.0 / ((_3008 * 3.5) + 5.0)) * 0.25);
                        float _3034 = 1.0 - _807;
                        float _3041 = sqrt(1.0 - ((1.0 - (_3034 * _3034)) * (1.0 - (_3033 * _3033))));
                        float _3042 = _3041 * _3041;
                        float _3043 = _3042 * _3042;
                        float _3044 = _3023 + _2988;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3054 = dot(vec3(_747, _750, _753), vec3(_3023, _3024, _3025));
                        float _4371 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3058 = dot(vec3(_747, _750, _753), vec3(_3050 * _3044, _3050 * _3045, _3050 * _3046));
                        float _4382 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3061 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3065 = ((_3061 * _3061) * (_3043 + (-1.0))) + 1.0;
                        float _3066 = _3001 * _3042;
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _2991) + _3067;
                        float _4393 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3072 = 1.0 - _3042;
                        float _3082 = (0.5 / (((_3071 * ((_3057 * _3072) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_3071 * _3072) + _3042) * _3057))) * _3071;
                        float _4404 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3093 = (((_3043 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3065 * _3065) * ((_3008 * 2.1991131305694580078125) + 3.141590118408203125))) * _2997;
                        _2845 = (_3012 * _2960.x) + _2918;
                        _2846 = (_3012 * _2960.y) + _2919;
                        _2847 = (_3012 * _2960.z) + _2920;
                        _2842 = (_3093 * _2977.x) + _2915;
                        _2843 = (_3093 * _2977.y) + _2916;
                        _2844 = (_3093 * _2977.z) + _2917;
                        if (_2922 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2922;
                        }
                    }
                    frontier_phi_68_pred = _2842;
                    frontier_phi_68_pred_1 = _2847;
                    frontier_phi_68_pred_2 = _2846;
                    frontier_phi_68_pred_3 = _2845;
                    frontier_phi_68_pred_4 = _2844;
                    frontier_phi_68_pred_5 = _2843;
                }
                _2618 = frontier_phi_68_pred;
                _2628 = frontier_phi_68_pred_1;
                _2626 = frontier_phi_68_pred_2;
                _2624 = frontier_phi_68_pred_3;
                _2622 = frontier_phi_68_pred_4;
                _2620 = frontier_phi_68_pred_5;
                uint _2777 = _2776 + 1u;
                if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2770 = _2618;
                    _2771 = _2620;
                    _2772 = _2622;
                    _2773 = _2624;
                    _2774 = _2626;
                    _2775 = _2628;
                    _2776 = _2777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((4294967295u << _2634) & _2516) == 0u)
        {
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
        }
        else
        {
            float _2763 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
            float _2764 = _2763 * _2470;
            float _2765 = _2763 * _2471;
            float _2766 = _2763 * _2472;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2898 = _2617;
                float _2899 = _2619;
                float _2900 = _2621;
                float _2901 = _2623;
                float _2902 = _2625;
                float _2903 = _2627;
                uint _2904 = _2634;
                uint _2913;
                bool _2914;
                for (;;)
                {
                    _2913 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2904 << 2u)) >> 2u)).x;
                    _2914 = _2913 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2914)
                    {
                        frontier_phi_79_pred = _2903;
                        frontier_phi_79_pred_1 = _2902;
                        frontier_phi_79_pred_2 = _2901;
                        frontier_phi_79_pred_3 = _2900;
                        frontier_phi_79_pred_4 = _2899;
                        frontier_phi_79_pred_5 = _2898;
                    }
                    else
                    {
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3120 = _2898;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        uint _3126 = _2913;
                        uint _3127;
                        vec4 _3152;
                        float _3153;
                        vec4 _3168;
                        vec3 _3180;
                        vec4 _3195;
                        vec4 _3210;
                        float _3256;
                        bool _3257;
                        for (;;)
                        {
                            uint _3137 = ((_2904 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3126));
                            _3127 = (_3126 + 4294967295u) & _3126;
                            uint _3139 = _3137 * 40u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3153 = _3152.w;
                            uint _3155 = (_3137 * 40u) + 4u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3137 * 40u) + 8u;
                            _3180 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x));
                            uint _3182 = (_3137 * 40u) + 16u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3137 * 40u) + 20u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3137 * 40u) + 24u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3231 = (_3137 * 40u) + 28u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3256 = fma(_2472, _3244.z, fma(_2471, _3244.y, _3244.x * _2470)) + _3244.w;
                            _3257 = !((fma(_2472, _3225.z, fma(_2471, _3225.y, _3225.x * _2470)) + _3225.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3257)
                            {
                                float _3284 = _3152.x - _2470;
                                float _3285 = _3152.y - _2471;
                                float _3286 = _3152.z - _2472;
                                float _3287 = dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286));
                                float _3290 = inversesqrt(_3287);
                                float _3291 = _3290 * _3284;
                                float _3292 = _3290 * _3285;
                                float _3293 = _3290 * _3286;
                                float _3297 = 1.0 - (_3287 / (_3153 * _3153));
                                float _4415 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3302 = sqrt(_3287) * _3168.w;
                                float _3304 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                                float _3305 = _3304 * _3304;
                                float _3308 = ((1.0 - _3305) * dot(vec3(_3291, _3292, _3293), vec3(_747, _750, _753))) + _3305;
                                float _3311 = _3302 * _3302;
                                float _3315 = (fma(_2472, _3195.z, fma(_2471, _3195.y, _3195.x * _2470)) + _3195.w) / _3256;
                                float _3316 = (fma(_2472, _3210.z, fma(_2471, _3210.y, _3210.x * _2470)) + _3210.w) / _3256;
                                float _3320 = 1.0 - dot(vec2(_3315, _3316), vec2(_3315, _3316));
                                float _4431 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3322 = _3321 * (((isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))) * _3298) / ((_3311 * 0.699999988079071044921875) + 1.0));
                                float _3334 = exp2(log2(1.0 / ((_3311 * 3.5) + 5.0)) * 0.25);
                                float _3335 = 1.0 - _807;
                                float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                                float _3343 = _3342 * _3342;
                                float _3344 = _3343 * _3343;
                                float _3345 = _3291 - _2764;
                                float _3346 = _3292 - _2765;
                                float _3347 = _3293 - _2766;
                                float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                                float _3355 = dot(vec3(_747, _750, _753), vec3((-0.0) - _2764, (-0.0) - _2765, (-0.0) - _2766));
                                float _4442 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3359 = dot(vec3(_747, _750, _753), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                                float _4453 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                                float _3367 = _3304 * _3343;
                                float _3368 = _3367 * _3367;
                                float _3374 = ((1.0 - _3368) * dot(vec3(_747, _750, _753), vec3(_3291, _3292, _3293))) + _3368;
                                float _4464 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3376 = 1.0 - _3343;
                                float _3386 = (0.5 / (((_3375 * ((_3358 * _3376) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3343) * _3358))) * _3375;
                                float _4475 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3396 = (_3321 * _3298) * (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) / ((_3366 * _3366) * ((_3311 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3322 * _3168.y;
                                frontier_phi_85_pred_1 = _3322 * _3168.x;
                                frontier_phi_85_pred_2 = _3396 * _3180.z;
                                frontier_phi_85_pred_3 = _3396 * _3180.y;
                                frontier_phi_85_pred_4 = _3396 * _3180.x;
                                frontier_phi_85_pred_5 = _3322 * _3168.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_85_pred;
                            _3403 = frontier_phi_85_pred_1;
                            _3402 = frontier_phi_85_pred_2;
                            _3401 = frontier_phi_85_pred_3;
                            _3400 = frontier_phi_85_pred_4;
                            _3405 = frontier_phi_85_pred_5;
                            _3110 = _3403 + _3123;
                            _3111 = _3404 + _3124;
                            _3112 = _3405 + _3125;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            if (_3127 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3127;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3112;
                        frontier_phi_79_pred_1 = _3111;
                        frontier_phi_79_pred_2 = _3110;
                        frontier_phi_79_pred_3 = _3109;
                        frontier_phi_79_pred_4 = _3108;
                        frontier_phi_79_pred_5 = _3107;
                    }
                    _2749 = frontier_phi_79_pred;
                    _2747 = frontier_phi_79_pred_1;
                    _2745 = frontier_phi_79_pred_2;
                    _2743 = frontier_phi_79_pred_3;
                    _2741 = frontier_phi_79_pred_4;
                    _2739 = frontier_phi_79_pred_5;
                    uint _2905 = _2904 + 1u;
                    if (_2905 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2898 = _2739;
                        _2899 = _2741;
                        _2900 = _2743;
                        _2901 = _2745;
                        _2902 = _2747;
                        _2903 = _2749;
                        _2904 = _2905;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2743;
                frontier_phi_60_61_ladder_1 = _2749;
                frontier_phi_60_61_ladder_2 = _2747;
                frontier_phi_60_61_ladder_3 = _2745;
                frontier_phi_60_61_ladder_4 = _2741;
                frontier_phi_60_61_ladder_5 = _2739;
            }
            else
            {
                frontier_phi_60_61_ladder = _2621;
                frontier_phi_60_61_ladder_1 = _2627;
                frontier_phi_60_61_ladder_2 = _2625;
                frontier_phi_60_61_ladder_3 = _2623;
                frontier_phi_60_61_ladder_4 = _2619;
                frontier_phi_60_61_ladder_5 = _2617;
            }
            _2738 = frontier_phi_60_61_ladder_5;
            _2740 = frontier_phi_60_61_ladder_4;
            _2742 = frontier_phi_60_61_ladder;
            _2744 = frontier_phi_60_61_ladder_3;
            _2746 = frontier_phi_60_61_ladder_2;
            _2748 = frontier_phi_60_61_ladder_1;
        }
        float _2753 = isnan(1.0) ? _791 : (isnan(_791) ? 1.0 : min(_791, 1.0));
        _2529 = (_2753 * _2744) + _1984;
        _2531 = (_2753 * _2746) + _1986;
        _2533 = (_2753 * _2748) + _1988;
        _2535 = ((_2738 * 0.039999999105930328369140625) * _2753) + _2314;
        _2537 = ((_2740 * 0.039999999105930328369140625) * _2753) + _2316;
        _2539 = ((_2742 * 0.039999999105930328369140625) * _2753) + _2318;
    }
    else
    {
        _2529 = _1984;
        _2531 = _1986;
        _2533 = _1988;
        _2535 = _2314;
        _2537 = _2316;
        _2539 = _2318;
    }
    float _4491 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4502 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4513 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2556 = ((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2529 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _791))) + ((_2535 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    float _2557 = ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2531 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _791))) + ((_2537 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    float _2558 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2533 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _791))) + ((_2539 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    uint _2559 = _247 + 6u;
    float _2567 = _728 / cbSceneParam._m0[86u].x;
    float _2568 = _729 / cbSceneParam._m0[86u].y;
    vec4 _2582 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2584 = _2582.x;
    float _2585 = _2582.y;
    float _2586 = _2582.z;
    float _2587 = _2582.w;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2643 = _2642 / _653;
        float _2654 = _2643 * _704;
        float _2655 = _705 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2658 = _2643 * _706;
        float _2660 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2661 = _2660 + cbSceneParam._m0[79u].w;
        float _2662 = cbSceneParam._m0[79u].w - _2655;
        float _2668 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2658 * _2658));
        float _2671 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2668;
        float _2676 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2678 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2855;
        if (abs((_2656 - _2660) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2855 = ((((_2661 > 0.0) ? exp2(_2676 * _2661) : (2.0 - exp2(_2678 * _2661))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2671;
        }
        else
        {
            float _2799 = 1.0 / cbSceneParam._m0[80u].x;
            float _2800 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : max(_2661, _2662));
            float _2801 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : min(_2661, _2662));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            _2855 = ((abs(_2668 / _2656) * cbSceneParam._m0[80u].y) * ((((_2810 - _2811) * 2.0) - ((exp2(_2676 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)))) - exp2(_2676 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))))) * _2799)) - ((exp2(_2678 * _2810) - exp2(_2678 * _2811)) * _2799))) + (_2671 * cbSceneParam._m0[80u].z);
        }
        vec4 _2857 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, 1.0), 0.0);
        float _2866 = exp2((_2855 * (-1.44269502162933349609375)) * (1.0 - _2857.w));
        float _2867 = log2(_2866);
        float _2883 = log2(_2587);
        _2680 = (exp2(_2883 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].x)) * _2857.x) / cbSceneParam._m0[78u].x)) + _2584;
        _2682 = (exp2(_2883 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].y)) * _2857.y) / cbSceneParam._m0[78u].y)) + _2585;
        _2684 = (exp2(_2883 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].z)) * _2857.z) / cbSceneParam._m0[78u].z)) + _2586;
        _2686 = _2866 * _2587;
    }
    else
    {
        _2680 = _2584;
        _2682 = _2585;
        _2684 = _2586;
        _2686 = _2587;
    }
    bool _2893;
    vec4 _2696;
    vec4 _2718;
    float _2720;
    float _2724;
    float _2725;
    float _2726;
    float _2727;
    bool _2737;
    for (;;)
    {
        _2696 = cbMatDynParam._m0[0u];
        float _2698 = roundEven(_2696.y);
        bool _2699 = _2698 == 3.0;
        float _2700 = log2(_2686);
        float _2707 = exp2(_2700 * cbSceneParam._m0[78u].x) * _2556;
        float _2708 = exp2(_2700 * cbSceneParam._m0[78u].y) * _2557;
        float _2709 = exp2(_2700 * cbSceneParam._m0[78u].z) * _2558;
        float _2716 = _717 + (-0.5);
        _2718 = cbMtdParam._m0[1u];
        _2720 = _2718.y * _2716;
        float _2723 = (_2698 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2724 = _2723 * (_2699 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2680)));
        _2725 = _2723 * (_2699 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2682)));
        _2726 = _2723 * (_2699 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2684)));
        _2727 = _2716 * 0.999000012874603271484375;
        _2737 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2737)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2727) < 0.5)
            {
                _2893 = true;
                break;
            }
        }
        uint _2834 = _766 + uint(_2696.w);
        if ((cbInstanceData._m0[_2834].w < 1.0) && ((cbInstanceData._m0[_2834].w + _2727) < 0.5))
        {
            _2893 = true;
            break;
        }
        if ((_2720 + 1.0) < _2718.x)
        {
            _2893 = true;
            break;
        }
        _2893 = false;
        break;
    }
    float _3098;
    if (_2893)
    {
        discard_state = true;
        _3098 = 0.0;
    }
    else
    {
        _3098 = cbInstanceData._m0[_2559].w;
    }
    SV_Target.x = _2724;
    SV_Target.y = _2725;
    SV_Target.z = _2726;
    SV_Target.w = _3098;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2559].w;
    discard_exit();
}


