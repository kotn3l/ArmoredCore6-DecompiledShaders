#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1134;
float _3518;
float _3519;
float _3520;
float _3521;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3530 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3541 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3552 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _392 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_379 - _392) * cbMtdParam._m0[24u].x) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3563 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _417 = (_410 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _418 = (_410 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _419 = (_410 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _423 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _417;
    float _426 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _418;
    float _429 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _419;
    float _436 = ((_417 - _423) * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) + _423;
    float _437 = ((_418 - _426) * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) + _426;
    float _438 = ((_419 - _429) * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) + _429;
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _495 = _493.x;
    float _496 = _493.y;
    float _497 = _493.z;
    float _506 = ((_476.z - _497) * _410) + _497;
    float _509 = ((((_476.x - _495) * _410) + _495) * 2.0) + (-1.0);
    float _510 = ((((_476.y - _496) * _410) + _496) * 2.0) + (-1.0);
    float _511 = dot(vec2(_509, _510), vec2(_509, _510));
    float _3574 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _516 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    float _521 = _509 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_451.x * 2.0) + (-1.0)));
    float _522 = _510 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_451.y * 2.0) + (-1.0)));
    vec4 _535 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _542 = (((_451.z - _506) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _506;
    float _544 = cbMtdParam._m0[22u].x + _535.w;
    float _548 = gl_FragCoord.x * 0.125;
    float _550 = gl_FragCoord.y * 0.125;
    float _561 = fma(_516, _226 * NORMAL.x, fma(_522, _233 * TANGENT.x, (_219 * _211) * _521));
    float _564 = fma(_516, _226 * NORMAL.y, fma(_522, _233 * TANGENT.y, (_219 * _212) * _521));
    float _567 = fma(_516, _226 * NORMAL.z, fma(_522, _233 * TANGENT.z, (_219 * _213) * _521));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3585 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _575 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3607 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3618 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3629 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_548, _550)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _597 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    vec4 _660 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_548, _550));
    float _662 = _660.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _816 = sqrt(((_649 * _649) + (_650 * _650)) + (_651 * _651));
        float _822 = (cbMatDynParam._m0[5u].x * _816) + cbMatDynParam._m0[5u].y;
        float _3640 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _827 = (cbMatDynParam._m0[5u].z * _816) + cbMatDynParam._m0[5u].w;
        float _3651 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) - _823)) + _823) < ((_662 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _692 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _695 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _698 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _711 = _260 + 9u;
    uint _712 = _711 + uint(cbMatDynParam._m0[0u].w);
    float _718 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_712].x;
    float _719 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_712].y;
    float _720 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_712].z;
    float _3662 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    vec4 _732 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _736 = ((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * TEXCOORD_5.w) * _732.x;
    float _737 = dot(vec3(_572, _573, _574), vec3(_656, _657, _658));
    float _740 = _737 * 2.0;
    float _744 = (_740 * _572) - _656;
    float _745 = (_740 * _573) - _657;
    float _746 = (_740 * _574) - _658;
    float _750 = abs(dot(vec3(_656, _657, _658), vec3(_572, _573, _574)));
    float _3695 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _752 = sqrt(_575);
    float _765 = exp2((_752 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_752 * 3.0));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1133;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _858 = fma(_805, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797));
        float _862 = fma(_805, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797));
        float _866 = fma(_805, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797));
        float _891 = _797 + _572;
        float _892 = _801 + _573;
        float _893 = _805 + _574;
        float _903 = fma(_893, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891)) - _858;
        float _904 = fma(_893, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891)) - _862;
        float _905 = fma(_893, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891)) - _866;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_858 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_862 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[34u].z) + ((((((_866 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _961 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_927.x + (-0.5));
        float _963 = _961 * (_927.y + (-0.5));
        float _964 = _961 * (_927.z + (-0.5));
        float _971 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_934.x + (-0.5));
        float _973 = _971 * (_934.y + (-0.5));
        float _974 = _971 * (_934.z + (-0.5));
        float _981 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_941.x + (-0.5));
        float _983 = _981 * (_941.y + (-0.5));
        float _984 = _981 * (_941.z + (-0.5));
        float _991 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_948.x + (-0.5));
        float _993 = _991 * (_948.y + (-0.5));
        float _994 = _991 * (_948.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1015 = (dot(vec3(_572, _573, _574), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1025 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3743 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1027 + 1.0))) + _1032) * _995;
        float _1042 = _963 * 0.5;
        float _1043 = _973 * 0.5;
        float _1044 = _983 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_572, _573, _574), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3776 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1069 + 1.0))) + _1074) * _996;
        float _1084 = _964 * 0.5;
        float _1085 = _974 * 0.5;
        float _1086 = _984 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_572, _573, _574), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3809 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1111 + 1.0))) + _1116) * _997;
        _1133 = _964;
        _1135 = _963;
        _1136 = _962;
        _1137 = _974;
        _1138 = _973;
        _1139 = _972;
        _1140 = _984;
        _1141 = _983;
        _1142 = _982;
        _1143 = _997;
        _1144 = _996;
        _1145 = _995;
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _1134;
        _1135 = _1134;
        _1136 = _1134;
        _1137 = _1134;
        _1138 = _1134;
        _1139 = _1134;
        _1140 = _1134;
        _1141 = _1134;
        _1142 = _1134;
        _1143 = _1134;
        _1144 = _1134;
        _1145 = _1134;
        _1146 = 0.0;
        _1147 = 0.0;
        _1148 = 0.0;
    }
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1172 = fma(_805, cbModelParam._m0[30u].z, fma(_801, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _797));
        float _1176 = fma(_805, cbModelParam._m0[31u].z, fma(_801, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _797));
        float _1180 = fma(_805, cbModelParam._m0[32u].z, fma(_801, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _797));
        float _1203 = _797 + _572;
        float _1204 = _801 + _573;
        float _1205 = _805 + _574;
        float _1215 = fma(_1205, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203)) - _1172;
        float _1216 = fma(_1205, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203)) - _1176;
        float _1217 = fma(_1205, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203)) - _1180;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1172 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1176 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[35u].z) + ((((((_1180 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1271 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1238.x + (-0.5));
        float _1273 = _1271 * (_1238.y + (-0.5));
        float _1274 = _1271 * (_1238.z + (-0.5));
        float _1281 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1245.x + (-0.5));
        float _1283 = _1281 * (_1245.y + (-0.5));
        float _1284 = _1281 * (_1245.z + (-0.5));
        float _1291 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1252.x + (-0.5));
        float _1293 = _1291 * (_1252.y + (-0.5));
        float _1294 = _1291 * (_1252.z + (-0.5));
        float _1301 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1259.x + (-0.5));
        float _1303 = _1301 * (_1259.y + (-0.5));
        float _1304 = _1301 * (_1259.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_572, _573, _574), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3872 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1335 + 1.0))) + _1340) * _1305;
        float _1350 = _1273 * 0.5;
        float _1351 = _1283 * 0.5;
        float _1352 = _1293 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_572, _573, _574), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3905 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1377 + 1.0))) + _1382) * _1306;
        float _1392 = _1274 * 0.5;
        float _1393 = _1284 * 0.5;
        float _1394 = _1294 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_572, _573, _574), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3938 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1419 + 1.0))) + _1424) * _1307;
        _1441 = _1274;
        _1442 = _1273;
        _1443 = _1272;
        _1444 = _1284;
        _1445 = _1283;
        _1446 = _1282;
        _1447 = _1294;
        _1448 = _1293;
        _1449 = _1292;
        _1450 = _1307;
        _1451 = _1306;
        _1452 = _1305;
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1134;
        _1442 = _1134;
        _1443 = _1134;
        _1444 = _1134;
        _1445 = _1134;
        _1446 = _1134;
        _1447 = _1134;
        _1448 = _1134;
        _1449 = _1134;
        _1450 = _1134;
        _1451 = _1134;
        _1452 = _1134;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1146)) + _1146;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1147)) + _1147;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1148)) + _1148;
    float _1488 = fma(_1467, cbSceneParam._m0[89u].z, fma(_1466, cbSceneParam._m0[89u].y, _1465 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1467, cbSceneParam._m0[90u].z, fma(_1466, cbSceneParam._m0[90u].y, _1465 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1467, cbSceneParam._m0[91u].z, fma(_1466, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1465));
    float _1509 = _744 * 0.5;
    float _1510 = _745 * 0.5;
    float _1511 = _746 * 0.5;
    float _1512 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1515 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1518 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1552;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1525 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1133, _1137, _1140, _1143));
        float _1529 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1533 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1540 = dot(vec4(cbModelParam._m0[39u]), vec4(_1509, _1510, _1511, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1563;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1554 = dot(vec4(cbModelParam._m0[40u]), vec4(_1509, _1510, _1511, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1567 = (_1563 * cbModelParam._m0[1u].x) + (_1552 * (1.0 - cbModelParam._m0[1u].x));
    float _1577 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1577 : min(cbModelParam._m0[25u].z, _1577));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1627 = fma(_805, cbModelParam._m0[13u].z, fma(_801, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797)) + cbModelParam._m0[13u].w;
        float _1631 = fma(_805, cbModelParam._m0[14u].z, fma(_801, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797)) + cbModelParam._m0[14u].w;
        float _1635 = fma(_805, cbModelParam._m0[15u].z, fma(_801, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797)) + cbModelParam._m0[15u].w;
        float _1638 = fma(_746, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744));
        float _1641 = fma(_746, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744));
        float _1644 = fma(_746, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744));
        float _1672;
        if (_1638 > 0.0)
        {
            _1672 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1672 = frontier_phi_19_17_ladder;
        }
        float _1895;
        if (_1641 > 0.0)
        {
            _1895 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1895 = frontier_phi_28_24_ladder;
        }
        float _2141;
        if (_1644 > 0.0)
        {
            _2141 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2141 = frontier_phi_40_35_ladder;
        }
        float _2143 = isnan(_1895) ? _1672 : (isnan(_1672) ? _1895 : min(_1672, _1895));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1638) + _1627;
        float _2149 = (_2144 * _1641) + _1631;
        float _2150 = (_2144 * _1644) + _1635;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2151;
        float _2155 = _2151 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 > _2155) || ((_2149 < _2153) || ((_2148 < _2153) || (_2148 > _2155))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2150, cbModelParam._m0[9u].z, fma(_2149, cbModelParam._m0[9u].y, _2148 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2150, cbModelParam._m0[10u].z, fma(_2149, cbModelParam._m0[10u].y, _2148 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2150, cbModelParam._m0[11u].z, fma(_2149, cbModelParam._m0[11u].y, _2148 * cbModelParam._m0[11u].x))), _1578);
            frontier_phi_18_40_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1660 = frontier_phi_18_40_ladder_2;
        _1662 = frontier_phi_18_40_ladder_1;
        _1664 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_744, _745, _746), _1578);
        _1660 = _1648.x * cbModelParam._m0[1u].y;
        _1662 = _1648.y * cbModelParam._m0[1u].y;
        _1664 = _1648.z * cbModelParam._m0[1u].y;
    }
    float _1668 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1668 : min(cbModelParam._m0[25u].w, _1668));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1724 = fma(_805, cbModelParam._m0[21u].z, fma(_801, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797)) + cbModelParam._m0[21u].w;
        float _1728 = fma(_805, cbModelParam._m0[22u].z, fma(_801, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797)) + cbModelParam._m0[22u].w;
        float _1732 = fma(_805, cbModelParam._m0[23u].z, fma(_801, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797)) + cbModelParam._m0[23u].w;
        float _1735 = fma(_746, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744));
        float _1738 = fma(_746, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744));
        float _1741 = fma(_746, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744));
        float _1900;
        if (_1735 > 0.0)
        {
            _1900 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1900 = frontier_phi_30_26_ladder;
        }
        float _2168;
        if (_1738 > 0.0)
        {
            _2168 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2168 = frontier_phi_42_37_ladder;
        }
        float _2373;
        if (_1741 > 0.0)
        {
            _2373 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2373 = frontier_phi_51_48_ladder;
        }
        float _2375 = isnan(_2168) ? _1900 : (isnan(_1900) ? _2168 : min(_1900, _2168));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1735) + _1724;
        float _2381 = (_2376 * _1738) + _1728;
        float _2382 = (_2376 * _1741) + _1732;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2383;
        float _2386 = _2383 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2382 > _2386) || ((_2382 < _2384) || ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 < _2384) || (_2380 > _2386))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2382, cbModelParam._m0[17u].z, fma(_2381, cbModelParam._m0[17u].y, _2380 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2382, cbModelParam._m0[18u].z, fma(_2381, cbModelParam._m0[18u].y, _2380 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2382, cbModelParam._m0[19u].z, fma(_2381, cbModelParam._m0[19u].y, _2380 * cbModelParam._m0[19u].x))), _1669);
            frontier_phi_27_51_ladder = _2581.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2581.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2581.x * cbModelParam._m0[1u].z;
        }
        _1760 = frontier_phi_27_51_ladder_2;
        _1762 = frontier_phi_27_51_ladder_1;
        _1764 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_744, _745, _746), _1669);
        _1760 = _1744.x * cbModelParam._m0[1u].z;
        _1762 = _1744.y * cbModelParam._m0[1u].z;
        _1764 = _1744.z * cbModelParam._m0[1u].z;
    }
    float _1776 = ((((1.0 - _765) * ((_752 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_765 * _752)) * _736;
    float _1777 = _1776 * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1778 = _1776 * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1779 = _1776 * ((cbModelParam._m0[1u].w * (_1764 - _1664)) + _1664);
    float _1782 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, _1777 * cbSceneParam._m0[91u].x));
    vec4 _1796 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_673, _674));
    float _1798 = _1796.w;
    float _1810 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1798);
    float _1811 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1798);
    float _1812 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1798);
    uvec4 _1816 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1818 = _1816.x * 14u;
    uint _1819 = _1818 + 13u;
    float _1826 = _736 + (-1.0);
    float _1831 = (cbLight._m0[_1819].x * _1826) + 1.0;
    float _1832 = (cbLight._m0[_1819].y * _1826) + 1.0;
    float _1833 = (cbLight._m0[_1819].z * _1826) + 1.0;
    float _1834 = (cbLight._m0[_1819].w * _1826) + 1.0;
    uint _1835 = _1818 + 5u;
    float _1841 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1845 = _1818 + 4u;
    float _1854 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1858 = _1818 | 1u;
    float _1869 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_572, _573, _574));
    float _1872 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_572, _573, _574));
    float _4074 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _4085 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1877 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.3183098733425140380859375;
    float _1879 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.3183098733425140380859375;
    float _1886 = ((cbLight._m0[_1835].x * _1841) * _1879) + (((cbLight._m0[_1845].x * _1810) * _1854) * _1877);
    float _1887 = ((_1841 * cbLight._m0[_1835].y) * _1879) + (((cbLight._m0[_1845].y * _1811) * _1854) * _1877);
    float _1888 = ((_1841 * cbLight._m0[_1835].z) * _1879) + (((cbLight._m0[_1845].z * _1812) * _1854) * _1877);
    uvec4 _1892 = floatBitsToUint(cbLight._m0[_1818 + 12u]);
    bool _1894 = _1892.x == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1894)
    {
        _1905 = _1886;
        _1907 = _1887;
        _1909 = _1888;
    }
    else
    {
        uint _1913 = _1818 + 6u;
        float _1929 = (dot(vec3(cbLight._m0[_1818 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _1930 = _1929 * _1929;
        float _4096 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1931 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1932 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1905 = (((cbLight._m0[_1913].x * 0.3183098733425140380859375) * _1931) * _1932) + _1886;
        _1907 = (((cbLight._m0[_1913].y * 0.3183098733425140380859375) * _1931) * _1932) + _1887;
        _1909 = (((cbLight._m0[_1913].z * 0.3183098733425140380859375) * _1931) * _1932) + _1888;
    }
    bool _1912 = _1892.y == 0u;
    float _1950;
    float _1952;
    float _1954;
    if (_1912)
    {
        _1950 = _1905;
        _1952 = _1907;
        _1954 = _1909;
    }
    else
    {
        uint _2112 = _1818 + 7u;
        float _2128 = (dot(vec3(cbLight._m0[_1818 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4112 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2131 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1950 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _1905;
        _1952 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _1907;
        _1954 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _1909;
    }
    uint _1957 = _1818 + 8u;
    float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _575) * 0.949999988079071044921875);
    float _1971 = _1970 * _1970;
    float _1972 = cbLight._m0[_1818].x + _656;
    float _1973 = cbLight._m0[_1818].y + _657;
    float _1974 = cbLight._m0[_1818].z + _658;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1979 = _1978 * _1972;
    float _1980 = _1978 * _1973;
    float _1981 = _1978 * _1974;
    float _1982 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1818].xyz));
    float _4128 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _1986 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _1987 = dot(vec3(_572, _573, _574), vec3(_1979, _1980, _1981));
    float _4150 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _1991 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_1979, _1980, _1981));
    float _4161 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1995 = _1971 * _1971;
    float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1971;
    float _2022 = (0.5 / (((_1986 * ((_1985 * _2011) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1986 * _2011) + _1971) * _1985))) * _1985;
    float _4172 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2024 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
    uint _2038 = _1818 + 9u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _575) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1858].x + _656;
    float _2052 = cbLight._m0[_1858].y + _657;
    float _2053 = cbLight._m0[_1858].z + _658;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1858].xyz));
    float _4183 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2065 = dot(vec3(_572, _573, _574), vec3(_2058, _2059, _2060));
    float _4194 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2058, _2059, _2060));
    float _4205 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2073 = _2050 * _2050;
    float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
    float _2086 = (exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2087 = 1.0 - _2050;
    float _2097 = (0.5 / (((_1986 * ((_2064 * _2087) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1986 * _2087) + _2050) * _2064))) * _2064;
    float _4216 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
    float _2109 = (((_2086 * cbLight._m0[_2038].x) * _2099) * _1841) + ((((cbLight._m0[_1957].x * _1810) * _2010) * _2024) * _1854);
    float _2110 = (((_2086 * cbLight._m0[_2038].y) * _2099) * _1841) + ((((cbLight._m0[_1957].y * _1811) * _2010) * _2024) * _1854);
    float _2111 = (((_2086 * cbLight._m0[_2038].z) * _2099) * _1841) + ((((cbLight._m0[_1957].z * _1812) * _2010) * _2024) * _1854);
    float _2173;
    float _2175;
    float _2177;
    if (_1894)
    {
        _2173 = _2109;
        _2175 = _2110;
        _2177 = _2111;
    }
    else
    {
        uint _2179 = _1818 + 2u;
        uint _2183 = _1818 + 10u;
        float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _575) * 0.949999988079071044921875);
        float _2198 = _2197 * _2197;
        float _2199 = cbLight._m0[_2179].x + _656;
        float _2200 = cbLight._m0[_2179].y + _657;
        float _2201 = cbLight._m0[_2179].z + _658;
        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
        float _2206 = _2205 * _2199;
        float _2207 = _2205 * _2200;
        float _2208 = _2205 * _2201;
        float _2209 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2179].xyz));
        float _4227 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2213 = dot(vec3(_572, _573, _574), vec3(_2206, _2207, _2208));
        float _4238 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2217 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2206, _2207, _2208));
        float _4249 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2221 = _2198 * _2198;
        float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
        float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2235 = 1.0 - _2198;
        float _2245 = (0.5 / (((_1986 * ((_2212 * _2235) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_1986 * _2235) + _2198) * _2212))) * _2212;
        float _4260 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2173 = (((_2234 * cbLight._m0[_2183].x) * _2247) * _2248) + _2109;
        _2175 = (((_2234 * cbLight._m0[_2183].y) * _2247) * _2248) + _2110;
        _2177 = (((_2234 * cbLight._m0[_2183].z) * _2247) * _2248) + _2111;
    }
    float _2283;
    float _2285;
    float _2287;
    if (_1912)
    {
        _2283 = _2173;
        _2285 = _2175;
        _2287 = _2177;
    }
    else
    {
        uint _2294 = _1818 + 3u;
        uint _2298 = _1818 + 11u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _575) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _656;
        float _2315 = cbLight._m0[_2294].y + _657;
        float _2316 = cbLight._m0[_2294].z + _658;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2294].xyz));
        float _4276 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2328 = dot(vec3(_572, _573, _574), vec3(_2321, _2322, _2323));
        float _4287 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4298 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2350 = 1.0 - _2313;
        float _2360 = (0.5 / (((_1986 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_1986 * _2350) + _2313) * _2327))) * _2327;
        float _4309 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2283 = (((_2349 * cbLight._m0[_2298].x) * _2362) * _2363) + _2173;
        _2285 = (((_2349 * cbLight._m0[_2298].y) * _2362) * _2363) + _2175;
        _2287 = (((_2349 * cbLight._m0[_2298].z) * _2362) * _2363) + _2177;
    }
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_1816.y == 0u)
    {
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2438;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2438;
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2438;
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.x;
        uint _2465 = uint((float(_2453.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2454))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2454)));
        float _2475 = (log2(_2441 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2476 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        uint _2479 = uint(isnan(14.0) ? _2476 : (isnan(_2476) ? 14.0 : min(_2476, 14.0)));
        uvec4 _2484 = texelFetch(g_lightClusterGridBuffer, int(((_2479 << 2u) + (_2465 << 6u)) >> 2u));
        uint _2485 = _2484.x;
        uint _2486 = _2453.z;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((((1u << ((_2486 >> 4u) & 15u)) + 4294967295u) & _2485) == 0u) || ((_2486 & 240u) == 0u))
        {
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
        }
        else
        {
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            uint _2745 = 0u;
            uint _2754;
            bool _2755;
            for (;;)
            {
                _2754 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                _2755 = _2754 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2755)
                {
                    frontier_phi_68_pred = _2739;
                    frontier_phi_68_pred_1 = _2744;
                    frontier_phi_68_pred_2 = _2743;
                    frontier_phi_68_pred_3 = _2742;
                    frontier_phi_68_pred_4 = _2741;
                    frontier_phi_68_pred_5 = _2740;
                }
                else
                {
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    uint _2890;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2754;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    for (;;)
                    {
                        uint _2894 = uint(findLSB(_2890)) + (_2745 << 5u);
                        uint _2891 = (_2890 + 4294967295u) & _2890;
                        uint _2896 = _2894 * 48u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2916 = (_2894 * 48u) + 4u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2935 = (_2894 * 48u) + 8u;
                        vec3 _2946 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x));
                        float _2950 = _2910.x - _2439;
                        float _2951 = _2910.y - _2440;
                        float _2952 = _2910.z - _2441;
                        float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                        float _2956 = inversesqrt(_2953);
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2960 = dot(vec3(_692, _695, _698), vec3(_2957, _2958, _2959));
                        float _2965 = 1.0 - (_2953 * _2910.w);
                        float _4335 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _2967 = sqrt(_2953) * _2929.w;
                        float _2970 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2960) + _2971;
                        float _2977 = _2967 * _2967;
                        float _2981 = ((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2966) / ((_2977 * 0.699999988079071044921875) + 1.0);
                        float _2985 = (-0.0) - _2439;
                        float _2986 = (-0.0) - _2440;
                        float _2987 = (-0.0) - _2441;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _3002 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _752;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_692, _695, _698), vec3(_2992, _2993, _2994));
                        float _4351 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3027 = dot(vec3(_692, _695, _698), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4362 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2970 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2960) + _3036;
                        float _4373 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4384 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3062 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3034 * _3034) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125))) * _2966;
                        _2814 = (_2981 * _2929.x) + _2887;
                        _2815 = (_2981 * _2929.y) + _2888;
                        _2816 = (_2981 * _2929.z) + _2889;
                        _2811 = (_3062 * _2946.x) + _2884;
                        _2812 = (_3062 * _2946.y) + _2885;
                        _2813 = (_3062 * _2946.z) + _2886;
                        if (_2891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2891;
                        }
                    }
                    frontier_phi_68_pred = _2811;
                    frontier_phi_68_pred_1 = _2816;
                    frontier_phi_68_pred_2 = _2815;
                    frontier_phi_68_pred_3 = _2814;
                    frontier_phi_68_pred_4 = _2813;
                    frontier_phi_68_pred_5 = _2812;
                }
                _2587 = frontier_phi_68_pred;
                _2597 = frontier_phi_68_pred_1;
                _2595 = frontier_phi_68_pred_2;
                _2593 = frontier_phi_68_pred_3;
                _2591 = frontier_phi_68_pred_4;
                _2589 = frontier_phi_68_pred_5;
                uint _2746 = _2745 + 1u;
                if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2739 = _2587;
                    _2740 = _2589;
                    _2741 = _2591;
                    _2742 = _2593;
                    _2743 = _2595;
                    _2744 = _2597;
                    _2745 = _2746;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
        }
        uvec4 _2600 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2601 = _2600.z;
        uint _2603 = (_2601 >> 8u) & 15u;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((4294967295u << _2603) & _2485) == 0u)
        {
            _2707 = _2586;
            _2709 = _2588;
            _2711 = _2590;
            _2713 = _2592;
            _2715 = _2594;
            _2717 = _2596;
        }
        else
        {
            float _2732 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
            float _2733 = _2732 * _2439;
            float _2734 = _2732 * _2440;
            float _2735 = _2732 * _2441;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2603 < ((_2601 >> 12u) & 15u))
            {
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2867 = _2586;
                float _2868 = _2588;
                float _2869 = _2590;
                float _2870 = _2592;
                float _2871 = _2594;
                float _2872 = _2596;
                uint _2873 = _2603;
                uint _2882;
                bool _2883;
                for (;;)
                {
                    _2882 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                    _2883 = _2882 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2883)
                    {
                        frontier_phi_79_pred = _2872;
                        frontier_phi_79_pred_1 = _2871;
                        frontier_phi_79_pred_2 = _2870;
                        frontier_phi_79_pred_3 = _2869;
                        frontier_phi_79_pred_4 = _2868;
                        frontier_phi_79_pred_5 = _2867;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        uint _3095 = _2882;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3164;
                        vec4 _3179;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3106 = ((_2873 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3151 = (_3106 * 40u) + 16u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3106 * 40u) + 20u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3106 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3106 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_2441, _3213.z, fma(_2440, _3213.y, _3213.x * _2439)) + _3213.w;
                            _3226 = !((fma(_2441, _3194.z, fma(_2440, _3194.y, _3194.x * _2439)) + _3194.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3121.x - _2439;
                                float _3254 = _3121.y - _2440;
                                float _3255 = _3121.z - _2441;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3122 * _3122));
                                float _4395 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3271 = sqrt(_3256) * _3137.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_692, _695, _698))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_2441, _3164.z, fma(_2440, _3164.y, _3164.x * _2439)) + _3164.w) / _3225;
                                float _3285 = (fma(_2441, _3179.z, fma(_2440, _3179.y, _3179.x * _2439)) + _3179.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4411 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _752;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2733;
                                float _3315 = _3261 - _2734;
                                float _3316 = _3262 - _2735;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_692, _695, _698), vec3((-0.0) - _2733, (-0.0) - _2734, (-0.0) - _2735));
                                float _4422 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3328 = dot(vec3(_692, _695, _698), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4433 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_692, _695, _698), vec3(_3260, _3261, _3262))) + _3337;
                                float _4444 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4455 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3291 * _3137.y;
                                frontier_phi_85_pred_1 = _3291 * _3137.x;
                                frontier_phi_85_pred_2 = _3365 * _3149.z;
                                frontier_phi_85_pred_3 = _3365 * _3149.y;
                                frontier_phi_85_pred_4 = _3365 * _3149.x;
                                frontier_phi_85_pred_5 = _3291 * _3137.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_85_pred;
                            _3372 = frontier_phi_85_pred_1;
                            _3371 = frontier_phi_85_pred_2;
                            _3370 = frontier_phi_85_pred_3;
                            _3369 = frontier_phi_85_pred_4;
                            _3374 = frontier_phi_85_pred_5;
                            _3079 = _3372 + _3092;
                            _3080 = _3373 + _3093;
                            _3081 = _3374 + _3094;
                            _3076 = _3369 + _3089;
                            _3077 = _3370 + _3090;
                            _3078 = _3371 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3081;
                        frontier_phi_79_pred_1 = _3080;
                        frontier_phi_79_pred_2 = _3079;
                        frontier_phi_79_pred_3 = _3078;
                        frontier_phi_79_pred_4 = _3077;
                        frontier_phi_79_pred_5 = _3076;
                    }
                    _2718 = frontier_phi_79_pred;
                    _2716 = frontier_phi_79_pred_1;
                    _2714 = frontier_phi_79_pred_2;
                    _2712 = frontier_phi_79_pred_3;
                    _2710 = frontier_phi_79_pred_4;
                    _2708 = frontier_phi_79_pred_5;
                    uint _2874 = _2873 + 1u;
                    if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2867 = _2708;
                        _2868 = _2710;
                        _2869 = _2712;
                        _2870 = _2714;
                        _2871 = _2716;
                        _2872 = _2718;
                        _2873 = _2874;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2712;
                frontier_phi_60_61_ladder_1 = _2718;
                frontier_phi_60_61_ladder_2 = _2716;
                frontier_phi_60_61_ladder_3 = _2714;
                frontier_phi_60_61_ladder_4 = _2710;
                frontier_phi_60_61_ladder_5 = _2708;
            }
            else
            {
                frontier_phi_60_61_ladder = _2590;
                frontier_phi_60_61_ladder_1 = _2596;
                frontier_phi_60_61_ladder_2 = _2594;
                frontier_phi_60_61_ladder_3 = _2592;
                frontier_phi_60_61_ladder_4 = _2588;
                frontier_phi_60_61_ladder_5 = _2586;
            }
            _2707 = frontier_phi_60_61_ladder_5;
            _2709 = frontier_phi_60_61_ladder_4;
            _2711 = frontier_phi_60_61_ladder;
            _2713 = frontier_phi_60_61_ladder_3;
            _2715 = frontier_phi_60_61_ladder_2;
            _2717 = frontier_phi_60_61_ladder_1;
        }
        float _2722 = isnan(1.0) ? _736 : (isnan(_736) ? 1.0 : min(_736, 1.0));
        _2498 = (_2722 * _2713) + _1950;
        _2500 = (_2722 * _2715) + _1952;
        _2502 = (_2722 * _2717) + _1954;
        _2504 = ((_2707 * 0.039999999105930328369140625) * _2722) + _2283;
        _2506 = ((_2709 * 0.039999999105930328369140625) * _2722) + _2285;
        _2508 = ((_2711 * 0.039999999105930328369140625) * _2722) + _2287;
    }
    else
    {
        _2498 = _1950;
        _2500 = _1952;
        _2502 = _1954;
        _2504 = _2283;
        _2506 = _2285;
        _2508 = _2287;
    }
    float _4471 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4482 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4493 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _2525 = ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2498 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _736))) + ((_2504 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1567)) * cbPerFrame._m0[3u].x);
    float _2526 = ((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2500 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _736))) + ((_2506 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1567)) * cbPerFrame._m0[3u].x);
    float _2527 = ((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2502 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _736))) + ((_2508 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1567)) * cbPerFrame._m0[3u].x);
    uint _2528 = _260 + 6u;
    float _2536 = _673 / cbSceneParam._m0[86u].x;
    float _2537 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _597 : (isnan(_597) ? cbSceneParam._m0[77u].w : min(_597, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_597 > cbSceneParam._m0[78u].w)
    {
        float _2611 = isnan(_597) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _597 : min(cbSceneParam._m0[80u].w, _597));
        float _2612 = _2611 / _597;
        float _2623 = _2612 * _649;
        float _2624 = _650 * _2612;
        float _2625 = (-0.0) - _2624;
        float _2627 = _2612 * _651;
        float _2629 = (cbSceneParam._m0[77u].w * _2625) / _2611;
        float _2630 = _2629 + cbSceneParam._m0[79u].w;
        float _2631 = cbSceneParam._m0[79u].w - _2624;
        float _2637 = sqrt(((_2623 * _2623) + (_2624 * _2624)) + (_2627 * _2627));
        float _2640 = (1.0 - (cbSceneParam._m0[77u].w / _2611)) * _2637;
        float _2645 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2647 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2824;
        if (abs((_2625 - _2629) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2824 = ((((_2630 > 0.0) ? exp2(_2645 * _2630) : (2.0 - exp2(_2647 * _2630))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2640;
        }
        else
        {
            float _2768 = 1.0 / cbSceneParam._m0[80u].x;
            float _2769 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : max(_2630, _2631));
            float _2770 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : min(_2630, _2631));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            _2824 = ((abs(_2637 / _2625) * cbSceneParam._m0[80u].y) * ((((_2779 - _2780) * 2.0) - ((exp2(_2645 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0)))) - exp2(_2645 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))))) * _2768)) - ((exp2(_2647 * _2779) - exp2(_2647 * _2780)) * _2768))) + (_2640 * cbSceneParam._m0[80u].z);
        }
        vec4 _2826 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2835 = exp2((_2824 * (-1.44269502162933349609375)) * (1.0 - _2826.w));
        float _2836 = log2(_2835);
        float _2852 = log2(_2556);
        _2649 = (exp2(_2852 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].x)) * _2826.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2651 = (exp2(_2852 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].y)) * _2826.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2653 = (exp2(_2852 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].z)) * _2826.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2655 = _2835 * _2556;
    }
    else
    {
        _2649 = _2553;
        _2651 = _2554;
        _2653 = _2555;
        _2655 = _2556;
    }
    bool _2862;
    vec4 _2665;
    vec4 _2687;
    float _2689;
    float _2693;
    float _2694;
    float _2695;
    float _2696;
    bool _2706;
    for (;;)
    {
        _2665 = cbMatDynParam._m0[0u];
        float _2667 = roundEven(_2665.y);
        bool _2668 = _2667 == 3.0;
        float _2669 = log2(_2655);
        float _2676 = exp2(_2669 * cbSceneParam._m0[78u].x) * _2525;
        float _2677 = exp2(_2669 * cbSceneParam._m0[78u].y) * _2526;
        float _2678 = exp2(_2669 * cbSceneParam._m0[78u].z) * _2527;
        float _2685 = _662 + (-0.5);
        _2687 = cbMtdParam._m0[1u];
        _2689 = _2687.y * _2685;
        float _2692 = (_2667 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2693 = _2692 * (_2668 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2649)));
        _2694 = _2692 * (_2668 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2651)));
        _2695 = _2692 * (_2668 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2653)));
        _2696 = _2685 * 0.999000012874603271484375;
        _2706 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2706)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _2696) < 0.5)
            {
                _2862 = true;
                break;
            }
        }
        uint _2803 = _711 + uint(_2665.w);
        if ((cbInstanceData._m0[_2803].w < 1.0) && ((cbInstanceData._m0[_2803].w + _2696) < 0.5))
        {
            _2862 = true;
            break;
        }
        if ((_2689 + 1.0) < _2687.x)
        {
            _2862 = true;
            break;
        }
        _2862 = false;
        break;
    }
    float _3067;
    if (_2862)
    {
        discard_state = true;
        _3067 = 0.0;
    }
    else
    {
        _3067 = cbInstanceData._m0[_2528].w;
    }
    SV_Target.x = _2693;
    SV_Target.y = _2694;
    SV_Target.z = _2695;
    SV_Target.w = _3067;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2528].w;
    discard_exit();
}


