#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1148;
float _3509;
float _3510;
float _3511;
float _3512;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _359 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _376 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _359) * cbMtdParam._m0[24u].x) + _359) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3521 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _384 = (_377 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _385 = (_377 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _386 = (_377 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _429 = ((_399.z - _420) * _377) + _420;
    float _432 = ((((_399.x - _418) * _377) + _418) * 2.0) + (-1.0);
    float _434 = ((((_399.y - _419) * _377) + _419) * 2.0) + (-1.0);
    float _435 = dot(vec2(_432, _434), vec2(_432, _434));
    float _3532 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _469 = _467.x;
    float _470 = 1.0 - _469;
    float _498 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_469 - _470) * cbMtdParam._m0[24u].w) + _470) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3543 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _507 = ((((cbMtdParam._m0[10u].x - _384) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _499) + _384;
    float _508 = ((((cbMtdParam._m0[10u].y - _385) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _499) + _385;
    float _509 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _386)) * _499) + _386;
    float _513 = ((cbMtdParam._m0[23u].y - _429) * _499) + _429;
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _538 = (_532.x * 2.0) + (-1.0);
    float _539 = (_532.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3554 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _556 = (_499 * (((cbMtdParam._m0[22u].z * _432) - _432) + _538)) + _432;
    float _557 = (_499 * (((cbMtdParam._m0[22u].z * _434) - _434) + _539)) + _434;
    float _558 = (_499 * (sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) - _440)) + _440;
    float _560 = cbMtdParam._m0[22u].x + _453.w;
    float _564 = gl_FragCoord.x * 0.125;
    float _566 = gl_FragCoord.y * 0.125;
    float _576 = fma(_558, _228 * NORMAL.x, fma(_557, _235 * TANGENT.x, (_221 * _213) * _556));
    float _579 = fma(_558, _228 * NORMAL.y, fma(_557, _235 * TANGENT.y, (_221 * _214) * _556));
    float _582 = fma(_558, _228 * NORMAL.z, fma(_557, _235 * TANGENT.z, (_221 * _215) * _556));
    float _586 = inversesqrt(dot(vec3(_576, _579, _582), vec3(_576, _579, _582)));
    float _587 = _586 * _576;
    float _588 = _586 * _579;
    float _589 = _586 * _582;
    float _3565 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _590 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3587 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3598 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3609 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_564, _566)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _663 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _653);
    float _664 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _653);
    float _665 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _653);
    float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
    float _670 = _663 * _669;
    float _671 = _664 * _669;
    float _672 = _665 * _669;
    vec4 _674 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_564, _566));
    float _676 = _674.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _830 = sqrt(((_663 * _663) + (_664 * _664)) + (_665 * _665));
        float _836 = (cbMatDynParam._m0[5u].x * _830) + cbMatDynParam._m0[5u].y;
        float _3620 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _841 = (cbMatDynParam._m0[5u].z * _830) + cbMatDynParam._m0[5u].w;
        float _3631 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) - _837)) + _837) < ((_676 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _687 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _688 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _706 = fma(_589, cbSceneParam._m0[5u].z, fma(_588, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _587));
    float _709 = fma(_589, cbSceneParam._m0[6u].z, fma(_588, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _587));
    float _712 = fma(_589, cbSceneParam._m0[7u].z, fma(_588, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _587));
    uint _725 = _241 + 9u;
    uint _726 = _725 + uint(cbMatDynParam._m0[0u].w);
    float _732 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_726].x;
    float _733 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_726].y;
    float _734 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_726].z;
    float _3642 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    vec4 _746 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _687, cbSceneParam._m0[86u].y * _688));
    float _750 = ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * TEXCOORD_5.w) * _746.x;
    float _751 = dot(vec3(_587, _588, _589), vec3(_670, _671, _672));
    float _754 = _751 * 2.0;
    float _758 = (_754 * _587) - _670;
    float _759 = (_754 * _588) - _671;
    float _760 = (_754 * _589) - _672;
    float _764 = abs(dot(vec3(_670, _671, _672), vec3(_587, _588, _589)));
    float _3675 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _766 = sqrt(_590);
    float _779 = exp2((_766 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_766 * 3.0));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1147;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _872 = fma(_819, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811));
        float _876 = fma(_819, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811));
        float _880 = fma(_819, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811));
        float _905 = _811 + _587;
        float _906 = _815 + _588;
        float _907 = _819 + _589;
        float _917 = fma(_907, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905)) - _872;
        float _918 = fma(_907, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905)) - _876;
        float _919 = fma(_907, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905)) - _880;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_872 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_876 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[34u].z) + ((((((_880 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _975 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_941.x + (-0.5));
        float _977 = _975 * (_941.y + (-0.5));
        float _978 = _975 * (_941.z + (-0.5));
        float _985 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_948.x + (-0.5));
        float _987 = _985 * (_948.y + (-0.5));
        float _988 = _985 * (_948.z + (-0.5));
        float _995 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_955.x + (-0.5));
        float _997 = _995 * (_955.y + (-0.5));
        float _998 = _995 * (_955.z + (-0.5));
        float _1005 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_962.x + (-0.5));
        float _1007 = _1005 * (_962.y + (-0.5));
        float _1008 = _1005 * (_962.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1029 = (dot(vec3(_587, _588, _589), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1039 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3723 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1041 + 1.0))) + _1046) * _1009;
        float _1056 = _977 * 0.5;
        float _1057 = _987 * 0.5;
        float _1058 = _997 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_587, _588, _589), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3756 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1083 + 1.0))) + _1088) * _1010;
        float _1098 = _978 * 0.5;
        float _1099 = _988 * 0.5;
        float _1100 = _998 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_587, _588, _589), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3789 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1125 + 1.0))) + _1130) * _1011;
        _1147 = _978;
        _1149 = _977;
        _1150 = _976;
        _1151 = _988;
        _1152 = _987;
        _1153 = _986;
        _1154 = _998;
        _1155 = _997;
        _1156 = _996;
        _1157 = _1011;
        _1158 = _1010;
        _1159 = _1009;
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _1148;
        _1149 = _1148;
        _1150 = _1148;
        _1151 = _1148;
        _1152 = _1148;
        _1153 = _1148;
        _1154 = _1148;
        _1155 = _1148;
        _1156 = _1148;
        _1157 = _1148;
        _1158 = _1148;
        _1159 = _1148;
        _1160 = 0.0;
        _1161 = 0.0;
        _1162 = 0.0;
    }
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1186 = fma(_819, cbModelParam._m0[30u].z, fma(_815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _811));
        float _1190 = fma(_819, cbModelParam._m0[31u].z, fma(_815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _811));
        float _1194 = fma(_819, cbModelParam._m0[32u].z, fma(_815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _811));
        float _1217 = _811 + _587;
        float _1218 = _815 + _588;
        float _1219 = _819 + _589;
        float _1229 = fma(_1219, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217)) - _1186;
        float _1230 = fma(_1219, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217)) - _1190;
        float _1231 = fma(_1219, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217)) - _1194;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1186 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1190 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[35u].z) + ((((((_1194 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1285 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1252.x + (-0.5));
        float _1287 = _1285 * (_1252.y + (-0.5));
        float _1288 = _1285 * (_1252.z + (-0.5));
        float _1295 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1259.x + (-0.5));
        float _1297 = _1295 * (_1259.y + (-0.5));
        float _1298 = _1295 * (_1259.z + (-0.5));
        float _1305 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1266.x + (-0.5));
        float _1307 = _1305 * (_1266.y + (-0.5));
        float _1308 = _1305 * (_1266.z + (-0.5));
        float _1315 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1273.x + (-0.5));
        float _1317 = _1315 * (_1273.y + (-0.5));
        float _1318 = _1315 * (_1273.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_587, _588, _589), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3852 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1349 + 1.0))) + _1354) * _1319;
        float _1364 = _1287 * 0.5;
        float _1365 = _1297 * 0.5;
        float _1366 = _1307 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_587, _588, _589), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3885 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1391 + 1.0))) + _1396) * _1320;
        float _1406 = _1288 * 0.5;
        float _1407 = _1298 * 0.5;
        float _1408 = _1308 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_587, _588, _589), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3918 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1433 + 1.0))) + _1438) * _1321;
        _1455 = _1288;
        _1456 = _1287;
        _1457 = _1286;
        _1458 = _1298;
        _1459 = _1297;
        _1460 = _1296;
        _1461 = _1308;
        _1462 = _1307;
        _1463 = _1306;
        _1464 = _1321;
        _1465 = _1320;
        _1466 = _1319;
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1148;
        _1456 = _1148;
        _1457 = _1148;
        _1458 = _1148;
        _1459 = _1148;
        _1460 = _1148;
        _1461 = _1148;
        _1462 = _1148;
        _1463 = _1148;
        _1464 = _1148;
        _1465 = _1148;
        _1466 = _1148;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1160)) + _1160;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1161)) + _1161;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1162)) + _1162;
    float _1502 = fma(_1481, cbSceneParam._m0[89u].z, fma(_1480, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1481, cbSceneParam._m0[90u].z, fma(_1480, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1481, cbSceneParam._m0[91u].z, fma(_1480, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1479));
    float _1523 = _758 * 0.5;
    float _1524 = _759 * 0.5;
    float _1525 = _760 * 0.5;
    float _1526 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1529 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1532 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1566;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1539 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1147, _1151, _1154, _1157));
        float _1543 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1547 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1150, _1153, _1156, _1159));
        float _1554 = dot(vec4(cbModelParam._m0[39u]), vec4(_1523, _1524, _1525, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1577;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1568 = dot(vec4(cbModelParam._m0[40u]), vec4(_1523, _1524, _1525, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1581 = (_1577 * cbModelParam._m0[1u].x) + (_1566 * (1.0 - cbModelParam._m0[1u].x));
    float _1591 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _590);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1591 : min(cbModelParam._m0[25u].z, _1591));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1641 = fma(_819, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811)) + cbModelParam._m0[13u].w;
        float _1645 = fma(_819, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811)) + cbModelParam._m0[14u].w;
        float _1649 = fma(_819, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811)) + cbModelParam._m0[15u].w;
        float _1652 = fma(_760, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758));
        float _1655 = fma(_760, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758));
        float _1658 = fma(_760, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758));
        float _1686;
        if (_1652 > 0.0)
        {
            _1686 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1686 = frontier_phi_19_17_ladder;
        }
        float _1888;
        if (_1655 > 0.0)
        {
            _1888 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1888 = frontier_phi_28_24_ladder;
        }
        float _2131;
        if (_1658 > 0.0)
        {
            _2131 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2131 = frontier_phi_40_35_ladder;
        }
        float _2133 = isnan(_1888) ? _1686 : (isnan(_1686) ? _1888 : min(_1686, _1888));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1652) + _1641;
        float _2139 = (_2134 * _1655) + _1645;
        float _2140 = (_2134 * _1658) + _1649;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2141;
        float _2145 = _2141 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 > _2145) || ((_2139 < _2143) || ((_2138 < _2143) || (_2138 > _2145))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2140, cbModelParam._m0[9u].z, fma(_2139, cbModelParam._m0[9u].y, _2138 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2140, cbModelParam._m0[10u].z, fma(_2139, cbModelParam._m0[10u].y, _2138 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2140, cbModelParam._m0[11u].z, fma(_2139, cbModelParam._m0[11u].y, _2138 * cbModelParam._m0[11u].x))), _1592);
            frontier_phi_18_40_ladder = _2264.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2264.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2264.x * cbModelParam._m0[1u].y;
        }
        _1674 = frontier_phi_18_40_ladder_2;
        _1676 = frontier_phi_18_40_ladder_1;
        _1678 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_758, _759, _760), _1592);
        _1674 = _1662.x * cbModelParam._m0[1u].y;
        _1676 = _1662.y * cbModelParam._m0[1u].y;
        _1678 = _1662.z * cbModelParam._m0[1u].y;
    }
    float _1682 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _590);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1682 : min(cbModelParam._m0[25u].w, _1682));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1738 = fma(_819, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811)) + cbModelParam._m0[21u].w;
        float _1742 = fma(_819, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811)) + cbModelParam._m0[22u].w;
        float _1746 = fma(_819, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811)) + cbModelParam._m0[23u].w;
        float _1749 = fma(_760, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758));
        float _1752 = fma(_760, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758));
        float _1755 = fma(_760, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758));
        float _1893;
        if (_1749 > 0.0)
        {
            _1893 = abs((1.0 - _1738) / _1749);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1738 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1893 = frontier_phi_30_26_ladder;
        }
        float _2158;
        if (_1752 > 0.0)
        {
            _2158 = abs((1.0 - _1742) / _1752);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1742 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2158 = frontier_phi_42_37_ladder;
        }
        float _2363;
        if (_1755 > 0.0)
        {
            _2363 = abs((1.0 - _1746) / _1755);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1746 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2363 = frontier_phi_51_48_ladder;
        }
        float _2365 = isnan(_2158) ? _1893 : (isnan(_1893) ? _2158 : min(_1893, _2158));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1749) + _1738;
        float _2371 = (_2366 * _1752) + _1742;
        float _2372 = (_2366 * _1755) + _1746;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2373;
        float _2376 = _2373 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2372 > _2376) || ((_2372 < _2374) || ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 < _2374) || (_2370 > _2376))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2372, cbModelParam._m0[17u].z, fma(_2371, cbModelParam._m0[17u].y, _2370 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2372, cbModelParam._m0[18u].z, fma(_2371, cbModelParam._m0[18u].y, _2370 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2372, cbModelParam._m0[19u].z, fma(_2371, cbModelParam._m0[19u].y, _2370 * cbModelParam._m0[19u].x))), _1683);
            frontier_phi_27_51_ladder = _2571.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2571.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2571.x * cbModelParam._m0[1u].z;
        }
        _1774 = frontier_phi_27_51_ladder_2;
        _1776 = frontier_phi_27_51_ladder_1;
        _1778 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_758, _759, _760), _1683);
        _1774 = _1758.x * cbModelParam._m0[1u].z;
        _1776 = _1758.y * cbModelParam._m0[1u].z;
        _1778 = _1758.z * cbModelParam._m0[1u].z;
    }
    float _1790 = ((((1.0 - _779) * ((_766 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_779 * _766)) * _750;
    float _1791 = _1790 * ((cbModelParam._m0[1u].w * (_1774 - _1674)) + _1674);
    float _1792 = _1790 * ((cbModelParam._m0[1u].w * (_1776 - _1676)) + _1676);
    float _1793 = _1790 * ((cbModelParam._m0[1u].w * (_1778 - _1678)) + _1678);
    float _1796 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, _1791 * cbSceneParam._m0[91u].x));
    uvec4 _1812 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1814 = _1812.x * 14u;
    uint _1815 = _1814 + 13u;
    float _1822 = _750 + (-1.0);
    float _1827 = (cbLight._m0[_1815].x * _1822) + 1.0;
    float _1828 = (cbLight._m0[_1815].y * _1822) + 1.0;
    float _1829 = (cbLight._m0[_1815].z * _1822) + 1.0;
    float _1830 = (cbLight._m0[_1815].w * _1822) + 1.0;
    uint _1831 = _1814 + 5u;
    float _1837 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1841 = _1814 + 4u;
    float _1847 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1851 = _1814 | 1u;
    float _1862 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_587, _588, _589));
    float _1865 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_587, _588, _589));
    float _4054 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _4065 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1870 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1872 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1879 = ((cbLight._m0[_1831].x * _1837) * _1872) + ((cbLight._m0[_1841].x * _1847) * _1870);
    float _1880 = ((_1837 * cbLight._m0[_1831].y) * _1872) + ((_1847 * cbLight._m0[_1841].y) * _1870);
    float _1881 = ((_1837 * cbLight._m0[_1831].z) * _1872) + ((_1847 * cbLight._m0[_1841].z) * _1870);
    uvec4 _1885 = floatBitsToUint(cbLight._m0[_1814 + 12u]);
    bool _1887 = _1885.x == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1887)
    {
        _1898 = _1879;
        _1900 = _1880;
        _1902 = _1881;
    }
    else
    {
        uint _1906 = _1814 + 6u;
        float _1922 = (dot(vec3(cbLight._m0[_1814 + 2u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _4076 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1925 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _1898 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1879;
        _1900 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1880;
        _1902 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1881;
    }
    bool _1905 = _1885.y == 0u;
    float _1943;
    float _1945;
    float _1947;
    if (_1905)
    {
        _1943 = _1898;
        _1945 = _1900;
        _1947 = _1902;
    }
    else
    {
        uint _2102 = _1814 + 7u;
        float _2118 = (dot(vec3(cbLight._m0[_1814 + 3u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4092 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2121 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1943 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _1898;
        _1945 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _1900;
        _1947 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _1902;
    }
    uint _1950 = _1814 + 8u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1814].w)) * _590) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1814].x + _670;
    float _1966 = cbLight._m0[_1814].y + _671;
    float _1967 = cbLight._m0[_1814].z + _672;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1814].xyz));
    float _4108 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _1979 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _1980 = dot(vec3(_587, _588, _589), vec3(_1972, _1973, _1974));
    float _4130 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_1972, _1973, _1974));
    float _4141 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1964 * _1964;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1979 * ((_1978 * _2004) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2004) + _1964) * _1978))) * _1978;
    float _4152 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    uint _2028 = _1814 + 9u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1851].w)) * _590) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1851].x + _670;
    float _2042 = cbLight._m0[_1851].y + _671;
    float _2043 = cbLight._m0[_1851].z + _672;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1851].xyz));
    float _4163 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2055 = dot(vec3(_587, _588, _589), vec3(_2048, _2049, _2050));
    float _4174 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_2048, _2049, _2050));
    float _4185 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2040 * _2040;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2040;
    float _2087 = (0.5 / (((_1979 * ((_2054 * _2077) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2077) + _2040) * _2054))) * _2054;
    float _4196 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    float _2099 = (((_2076 * cbLight._m0[_2028].x) * _2089) * _1837) + (((_2003 * cbLight._m0[_1950].x) * _2017) * _1847);
    float _2100 = (((_2076 * cbLight._m0[_2028].y) * _2089) * _1837) + (((_2003 * cbLight._m0[_1950].y) * _2017) * _1847);
    float _2101 = (((_2076 * cbLight._m0[_2028].z) * _2089) * _1837) + (((_2003 * cbLight._m0[_1950].z) * _2017) * _1847);
    float _2163;
    float _2165;
    float _2167;
    if (_1887)
    {
        _2163 = _2099;
        _2165 = _2100;
        _2167 = _2101;
    }
    else
    {
        uint _2169 = _1814 + 2u;
        uint _2173 = _1814 + 10u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _590) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _670;
        float _2190 = cbLight._m0[_2169].y + _671;
        float _2191 = cbLight._m0[_2169].z + _672;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2169].xyz));
        float _4207 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2203 = dot(vec3(_587, _588, _589), vec3(_2196, _2197, _2198));
        float _4218 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4229 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2225 = 1.0 - _2188;
        float _2235 = (0.5 / (((_1979 * ((_2202 * _2225) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2225) + _2188) * _2202))) * _2202;
        float _4240 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2238 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _2163 = (((_2224 * cbLight._m0[_2173].x) * _2237) * _2238) + _2099;
        _2165 = (((_2224 * cbLight._m0[_2173].y) * _2237) * _2238) + _2100;
        _2167 = (((_2224 * cbLight._m0[_2173].z) * _2237) * _2238) + _2101;
    }
    float _2273;
    float _2275;
    float _2277;
    if (_1905)
    {
        _2273 = _2163;
        _2275 = _2165;
        _2277 = _2167;
    }
    else
    {
        uint _2284 = _1814 + 3u;
        uint _2288 = _1814 + 11u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _590) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _670;
        float _2305 = cbLight._m0[_2284].y + _671;
        float _2306 = cbLight._m0[_2284].z + _672;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2284].xyz));
        float _4256 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2318 = dot(vec3(_587, _588, _589), vec3(_2311, _2312, _2313));
        float _4267 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4278 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2340 = 1.0 - _2303;
        float _2350 = (0.5 / (((_1979 * ((_2317 * _2340) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2340) + _2303) * _2317))) * _2317;
        float _4289 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2352 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2353 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2273 = (((_2339 * cbLight._m0[_2288].x) * _2352) * _2353) + _2163;
        _2275 = (((_2339 * cbLight._m0[_2288].y) * _2352) * _2353) + _2165;
        _2277 = (((_2339 * cbLight._m0[_2288].z) * _2352) * _2353) + _2167;
    }
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_1812.y == 0u)
    {
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2428;
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2428;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2428;
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.x;
        uint _2455 = uint((float(_2443.y) * floor(float(uint(cbSceneParam._m0[85u].y * _688) / _2444))) + floor(float(uint(cbSceneParam._m0[85u].x * _687) / _2444)));
        float _2465 = (log2(_2431 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2466 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        uint _2469 = uint(isnan(14.0) ? _2466 : (isnan(_2466) ? 14.0 : min(_2466, 14.0)));
        uvec4 _2474 = texelFetch(g_lightClusterGridBuffer, int(((_2469 << 2u) + (_2455 << 6u)) >> 2u));
        uint _2475 = _2474.x;
        uint _2476 = _2443.z;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((((1u << ((_2476 >> 4u) & 15u)) + 4294967295u) & _2475) == 0u) || ((_2476 & 240u) == 0u))
        {
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
        }
        else
        {
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            uint _2735 = 0u;
            uint _2744;
            bool _2745;
            for (;;)
            {
                _2744 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                _2745 = _2744 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2745)
                {
                    frontier_phi_68_pred = _2729;
                    frontier_phi_68_pred_1 = _2734;
                    frontier_phi_68_pred_2 = _2733;
                    frontier_phi_68_pred_3 = _2732;
                    frontier_phi_68_pred_4 = _2731;
                    frontier_phi_68_pred_5 = _2730;
                }
                else
                {
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    uint _2880;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2744;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    for (;;)
                    {
                        uint _2884 = uint(findLSB(_2880)) + (_2735 << 5u);
                        uint _2881 = (_2880 + 4294967295u) & _2880;
                        uint _2886 = _2884 * 48u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2906 = (_2884 * 48u) + 4u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2925 = (_2884 * 48u) + 8u;
                        vec3 _2936 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x));
                        float _2940 = _2900.x - _2429;
                        float _2941 = _2900.y - _2430;
                        float _2942 = _2900.z - _2431;
                        float _2943 = dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942));
                        float _2946 = inversesqrt(_2943);
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2950 = dot(vec3(_706, _709, _712), vec3(_2947, _2948, _2949));
                        float _2955 = 1.0 - (_2943 * _2900.w);
                        float _4315 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _2957 = sqrt(_2943) * _2919.w;
                        float _2960 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2950) + _2961;
                        float _2967 = _2957 * _2957;
                        float _2971 = ((isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))) * _2956) / ((_2967 * 0.699999988079071044921875) + 1.0);
                        float _2975 = (-0.0) - _2429;
                        float _2976 = (-0.0) - _2430;
                        float _2977 = (-0.0) - _2431;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2992 = exp2(log2(1.0 / ((_2967 * 3.5) + 5.0)) * 0.25);
                        float _2993 = 1.0 - _766;
                        float _3000 = sqrt(1.0 - ((1.0 - (_2993 * _2993)) * (1.0 - (_2992 * _2992))));
                        float _3001 = _3000 * _3000;
                        float _3002 = _3001 * _3001;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3013 = dot(vec3(_706, _709, _712), vec3(_2982, _2983, _2984));
                        float _4331 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3017 = dot(vec3(_706, _709, _712), vec3(_3009 * _3003, _3009 * _3004, _3009 * _3005));
                        float _4342 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3024 = ((_3020 * _3020) * (_3002 + (-1.0))) + 1.0;
                        float _3025 = _2960 * _3001;
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _2950) + _3026;
                        float _4353 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3031 = 1.0 - _3001;
                        float _3041 = (0.5 / (((_3030 * ((_3016 * _3031) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _3001) * _3016))) * _3030;
                        float _4364 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3052 = (((_3002 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3024 * _3024) * ((_2967 * 2.1991131305694580078125) + 3.141590118408203125))) * _2956;
                        _2804 = (_2971 * _2919.x) + _2877;
                        _2805 = (_2971 * _2919.y) + _2878;
                        _2806 = (_2971 * _2919.z) + _2879;
                        _2801 = (_3052 * _2936.x) + _2874;
                        _2802 = (_3052 * _2936.y) + _2875;
                        _2803 = (_3052 * _2936.z) + _2876;
                        if (_2881 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2881;
                        }
                    }
                    frontier_phi_68_pred = _2801;
                    frontier_phi_68_pred_1 = _2806;
                    frontier_phi_68_pred_2 = _2805;
                    frontier_phi_68_pred_3 = _2804;
                    frontier_phi_68_pred_4 = _2803;
                    frontier_phi_68_pred_5 = _2802;
                }
                _2577 = frontier_phi_68_pred;
                _2587 = frontier_phi_68_pred_1;
                _2585 = frontier_phi_68_pred_2;
                _2583 = frontier_phi_68_pred_3;
                _2581 = frontier_phi_68_pred_4;
                _2579 = frontier_phi_68_pred_5;
                uint _2736 = _2735 + 1u;
                if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2729 = _2577;
                    _2730 = _2579;
                    _2731 = _2581;
                    _2732 = _2583;
                    _2733 = _2585;
                    _2734 = _2587;
                    _2735 = _2736;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
        }
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.z;
        uint _2593 = (_2591 >> 8u) & 15u;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((4294967295u << _2593) & _2475) == 0u)
        {
            _2697 = _2576;
            _2699 = _2578;
            _2701 = _2580;
            _2703 = _2582;
            _2705 = _2584;
            _2707 = _2586;
        }
        else
        {
            float _2722 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
            float _2723 = _2722 * _2429;
            float _2724 = _2722 * _2430;
            float _2725 = _2722 * _2431;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2593 < ((_2591 >> 12u) & 15u))
            {
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2857 = _2576;
                float _2858 = _2578;
                float _2859 = _2580;
                float _2860 = _2582;
                float _2861 = _2584;
                float _2862 = _2586;
                uint _2863 = _2593;
                uint _2872;
                bool _2873;
                for (;;)
                {
                    _2872 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                    _2873 = _2872 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2873)
                    {
                        frontier_phi_79_pred = _2862;
                        frontier_phi_79_pred_1 = _2861;
                        frontier_phi_79_pred_2 = _2860;
                        frontier_phi_79_pred_3 = _2859;
                        frontier_phi_79_pred_4 = _2858;
                        frontier_phi_79_pred_5 = _2857;
                    }
                    else
                    {
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        uint _3085 = _2872;
                        uint _3086;
                        vec4 _3111;
                        float _3112;
                        vec4 _3127;
                        vec3 _3139;
                        vec4 _3154;
                        vec4 _3170;
                        float _3216;
                        bool _3217;
                        for (;;)
                        {
                            uint _3096 = ((_2863 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3085));
                            _3086 = (_3085 + 4294967295u) & _3085;
                            uint _3098 = _3096 * 40u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3112 = _3111.w;
                            uint _3114 = (_3096 * 40u) + 4u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3096 * 40u) + 8u;
                            _3139 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x));
                            uint _3141 = (_3096 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3157 = (_3096 * 40u) + 20u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3096 * 40u) + 24u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3191 = (_3096 * 40u) + 28u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3216 = fma(_2431, _3204.z, fma(_2430, _3204.y, _3204.x * _2429)) + _3204.w;
                            _3217 = !((fma(_2431, _3185.z, fma(_2430, _3185.y, _3185.x * _2429)) + _3185.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3217)
                            {
                                float _3244 = _3111.x - _2429;
                                float _3245 = _3111.y - _2430;
                                float _3246 = _3111.z - _2431;
                                float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                                float _3250 = inversesqrt(_3247);
                                float _3251 = _3250 * _3244;
                                float _3252 = _3250 * _3245;
                                float _3253 = _3250 * _3246;
                                float _3257 = 1.0 - (_3247 / (_3112 * _3112));
                                float _4375 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3262 = sqrt(_3247) * _3127.w;
                                float _3264 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                                float _3265 = _3264 * _3264;
                                float _3268 = ((1.0 - _3265) * dot(vec3(_3251, _3252, _3253), vec3(_706, _709, _712))) + _3265;
                                float _3271 = _3262 * _3262;
                                float _3275 = (fma(_2431, _3154.z, fma(_2430, _3154.y, _3154.x * _2429)) + _3154.w) / _3216;
                                float _3276 = (fma(_2431, _3170.z, fma(_2430, _3170.y, _3170.x * _2429)) + _3170.w) / _3216;
                                float _3280 = 1.0 - dot(vec2(_3275, _3276), vec2(_3275, _3276));
                                float _4391 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3282 = _3281 * (((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3258) / ((_3271 * 0.699999988079071044921875) + 1.0));
                                float _3294 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                                float _3295 = 1.0 - _766;
                                float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                                float _3303 = _3302 * _3302;
                                float _3304 = _3303 * _3303;
                                float _3305 = _3251 - _2723;
                                float _3306 = _3252 - _2724;
                                float _3307 = _3253 - _2725;
                                float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                                float _3315 = dot(vec3(_706, _709, _712), vec3((-0.0) - _2723, (-0.0) - _2724, (-0.0) - _2725));
                                float _4402 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3318 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3319 = dot(vec3(_706, _709, _712), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                                float _4413 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                                float _3327 = _3264 * _3303;
                                float _3328 = _3327 * _3327;
                                float _3334 = ((1.0 - _3328) * dot(vec3(_706, _709, _712), vec3(_3251, _3252, _3253))) + _3328;
                                float _4424 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3336 = 1.0 - _3303;
                                float _3346 = (0.5 / (((_3335 * ((_3318 * _3336) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3303) * _3318))) * _3335;
                                float _4435 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3356 = (_3281 * _3258) * (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3326 * _3326) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3282 * _3127.y;
                                frontier_phi_85_pred_1 = _3282 * _3127.x;
                                frontier_phi_85_pred_2 = _3356 * _3139.z;
                                frontier_phi_85_pred_3 = _3356 * _3139.y;
                                frontier_phi_85_pred_4 = _3356 * _3139.x;
                                frontier_phi_85_pred_5 = _3282 * _3127.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3364 = frontier_phi_85_pred;
                            _3363 = frontier_phi_85_pred_1;
                            _3362 = frontier_phi_85_pred_2;
                            _3361 = frontier_phi_85_pred_3;
                            _3360 = frontier_phi_85_pred_4;
                            _3365 = frontier_phi_85_pred_5;
                            _3069 = _3363 + _3082;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3066 = _3360 + _3079;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            if (_3086 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3086;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3071;
                        frontier_phi_79_pred_1 = _3070;
                        frontier_phi_79_pred_2 = _3069;
                        frontier_phi_79_pred_3 = _3068;
                        frontier_phi_79_pred_4 = _3067;
                        frontier_phi_79_pred_5 = _3066;
                    }
                    _2708 = frontier_phi_79_pred;
                    _2706 = frontier_phi_79_pred_1;
                    _2704 = frontier_phi_79_pred_2;
                    _2702 = frontier_phi_79_pred_3;
                    _2700 = frontier_phi_79_pred_4;
                    _2698 = frontier_phi_79_pred_5;
                    uint _2864 = _2863 + 1u;
                    if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2857 = _2698;
                        _2858 = _2700;
                        _2859 = _2702;
                        _2860 = _2704;
                        _2861 = _2706;
                        _2862 = _2708;
                        _2863 = _2864;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2702;
                frontier_phi_60_61_ladder_1 = _2708;
                frontier_phi_60_61_ladder_2 = _2706;
                frontier_phi_60_61_ladder_3 = _2704;
                frontier_phi_60_61_ladder_4 = _2700;
                frontier_phi_60_61_ladder_5 = _2698;
            }
            else
            {
                frontier_phi_60_61_ladder = _2580;
                frontier_phi_60_61_ladder_1 = _2586;
                frontier_phi_60_61_ladder_2 = _2584;
                frontier_phi_60_61_ladder_3 = _2582;
                frontier_phi_60_61_ladder_4 = _2578;
                frontier_phi_60_61_ladder_5 = _2576;
            }
            _2697 = frontier_phi_60_61_ladder_5;
            _2699 = frontier_phi_60_61_ladder_4;
            _2701 = frontier_phi_60_61_ladder;
            _2703 = frontier_phi_60_61_ladder_3;
            _2705 = frontier_phi_60_61_ladder_2;
            _2707 = frontier_phi_60_61_ladder_1;
        }
        float _2712 = isnan(1.0) ? _750 : (isnan(_750) ? 1.0 : min(_750, 1.0));
        _2488 = (_2712 * _2703) + _1943;
        _2490 = (_2712 * _2705) + _1945;
        _2492 = (_2712 * _2707) + _1947;
        _2494 = ((_2697 * 0.039999999105930328369140625) * _2712) + _2273;
        _2496 = ((_2699 * 0.039999999105930328369140625) * _2712) + _2275;
        _2498 = ((_2701 * 0.039999999105930328369140625) * _2712) + _2277;
    }
    else
    {
        _2488 = _1943;
        _2490 = _1945;
        _2492 = _1947;
        _2494 = _2273;
        _2496 = _2275;
        _2498 = _2277;
    }
    float _4451 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4462 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4473 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _2515 = ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2488 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _750))) + ((_2494 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    float _2516 = ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2490 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _750))) + ((_2496 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    float _2517 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2492 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _750))) + ((_2498 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    uint _2518 = _241 + 6u;
    float _2526 = _687 / cbSceneParam._m0[86u].x;
    float _2527 = _688 / cbSceneParam._m0[86u].y;
    vec4 _2541 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2543 = _2541.x;
    float _2544 = _2541.y;
    float _2545 = _2541.z;
    float _2546 = _2541.w;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2601 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2602 = _2601 / _612;
        float _2613 = _2602 * _663;
        float _2614 = _664 * _2602;
        float _2615 = (-0.0) - _2614;
        float _2617 = _2602 * _665;
        float _2619 = (cbSceneParam._m0[77u].w * _2615) / _2601;
        float _2620 = _2619 + cbSceneParam._m0[79u].w;
        float _2621 = cbSceneParam._m0[79u].w - _2614;
        float _2627 = sqrt(((_2613 * _2613) + (_2614 * _2614)) + (_2617 * _2617));
        float _2630 = (1.0 - (cbSceneParam._m0[77u].w / _2601)) * _2627;
        float _2635 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2637 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2814;
        if (abs((_2615 - _2619) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2814 = ((((_2620 > 0.0) ? exp2(_2635 * _2620) : (2.0 - exp2(_2637 * _2620))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2630;
        }
        else
        {
            float _2758 = 1.0 / cbSceneParam._m0[80u].x;
            float _2759 = isnan(_2621) ? _2620 : (isnan(_2620) ? _2621 : max(_2620, _2621));
            float _2760 = isnan(_2621) ? _2620 : (isnan(_2620) ? _2621 : min(_2620, _2621));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            _2814 = ((abs(_2627 / _2615) * cbSceneParam._m0[80u].y) * ((((_2769 - _2770) * 2.0) - ((exp2(_2635 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)))) - exp2(_2635 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))))) * _2758)) - ((exp2(_2637 * _2769) - exp2(_2637 * _2770)) * _2758))) + (_2630 * cbSceneParam._m0[80u].z);
        }
        vec4 _2816 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, 1.0), 0.0);
        float _2825 = exp2((_2814 * (-1.44269502162933349609375)) * (1.0 - _2816.w));
        float _2826 = log2(_2825);
        float _2842 = log2(_2546);
        _2639 = (exp2(_2842 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].x)) * _2816.x) / cbSceneParam._m0[78u].x)) + _2543;
        _2641 = (exp2(_2842 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].y)) * _2816.y) / cbSceneParam._m0[78u].y)) + _2544;
        _2643 = (exp2(_2842 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].z)) * _2816.z) / cbSceneParam._m0[78u].z)) + _2545;
        _2645 = _2825 * _2546;
    }
    else
    {
        _2639 = _2543;
        _2641 = _2544;
        _2643 = _2545;
        _2645 = _2546;
    }
    bool _2852;
    vec4 _2655;
    vec4 _2677;
    float _2679;
    float _2683;
    float _2684;
    float _2685;
    float _2686;
    bool _2696;
    for (;;)
    {
        _2655 = cbMatDynParam._m0[0u];
        float _2657 = roundEven(_2655.y);
        bool _2658 = _2657 == 3.0;
        float _2659 = log2(_2645);
        float _2666 = exp2(_2659 * cbSceneParam._m0[78u].x) * _2515;
        float _2667 = exp2(_2659 * cbSceneParam._m0[78u].y) * _2516;
        float _2668 = exp2(_2659 * cbSceneParam._m0[78u].z) * _2517;
        float _2675 = _676 + (-0.5);
        _2677 = cbMtdParam._m0[1u];
        _2679 = _2677.y * _2675;
        float _2682 = (_2657 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2683 = _2682 * (_2658 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2639)));
        _2684 = _2682 * (_2658 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2641)));
        _2685 = _2682 * (_2658 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2643)));
        _2686 = _2675 * 0.999000012874603271484375;
        _2696 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2696)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2686) < 0.5)
            {
                _2852 = true;
                break;
            }
        }
        uint _2793 = _725 + uint(_2655.w);
        if ((cbInstanceData._m0[_2793].w < 1.0) && ((cbInstanceData._m0[_2793].w + _2686) < 0.5))
        {
            _2852 = true;
            break;
        }
        if ((_2679 + 1.0) < _2677.x)
        {
            _2852 = true;
            break;
        }
        _2852 = false;
        break;
    }
    float _3057;
    if (_2852)
    {
        discard_state = true;
        _3057 = 0.0;
    }
    else
    {
        _3057 = cbInstanceData._m0[_2518].w;
    }
    SV_Target.x = _2683;
    SV_Target.y = _2684;
    SV_Target.z = _2685;
    SV_Target.w = _3057;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2518].w;
    discard_exit();
}


