#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1152;
float _3796;
float _3797;
float _3798;
float _3799;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _363 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _380 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _363) * cbMtdParam._m0[24u].x) + _363) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3808 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _388 = (_381 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _389 = (_381 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _390 = (_381 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _433 = ((_403.z - _424) * _381) + _424;
    float _436 = ((((_403.x - _422) * _381) + _422) * 2.0) + (-1.0);
    float _438 = ((((_403.y - _423) * _381) + _423) * 2.0) + (-1.0);
    float _439 = dot(vec2(_436, _438), vec2(_436, _438));
    float _3819 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _473 = _471.x;
    float _474 = 1.0 - _473;
    float _502 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_473 - _474) * cbMtdParam._m0[24u].w) + _474) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3830 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _511 = ((((cbMtdParam._m0[10u].x - _388) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _503) + _388;
    float _512 = ((((cbMtdParam._m0[10u].y - _389) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _503) + _389;
    float _513 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _390)) * _503) + _390;
    float _517 = ((cbMtdParam._m0[23u].y - _433) * _503) + _433;
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _542 = (_536.x * 2.0) + (-1.0);
    float _543 = (_536.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3841 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _560 = (_503 * (((cbMtdParam._m0[22u].z * _436) - _436) + _542)) + _436;
    float _561 = (_503 * (((cbMtdParam._m0[22u].z * _438) - _438) + _543)) + _438;
    float _562 = (_503 * (sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _444)) + _444;
    float _564 = cbMtdParam._m0[22u].x + _457.w;
    float _568 = gl_FragCoord.x * 0.125;
    float _570 = gl_FragCoord.y * 0.125;
    float _580 = fma(_562, _232 * NORMAL.x, fma(_561, _239 * TANGENT.x, (_225 * _217) * _560));
    float _583 = fma(_562, _232 * NORMAL.y, fma(_561, _239 * TANGENT.y, (_225 * _218) * _560));
    float _586 = fma(_562, _232 * NORMAL.z, fma(_561, _239 * TANGENT.z, (_225 * _219) * _560));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _591 = _590 * _580;
    float _592 = _590 * _583;
    float _593 = _590 * _586;
    float _3852 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _594 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3874 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3885 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3896 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_568, _570)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _616 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _667 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _657);
    float _668 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _657);
    float _669 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _657);
    float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
    float _674 = _667 * _673;
    float _675 = _668 * _673;
    float _676 = _669 * _673;
    vec4 _678 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_568, _570));
    float _680 = _678.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _834 = sqrt(((_667 * _667) + (_668 * _668)) + (_669 * _669));
        float _840 = (cbMatDynParam._m0[5u].x * _834) + cbMatDynParam._m0[5u].y;
        float _3907 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _845 = (cbMatDynParam._m0[5u].z * _834) + cbMatDynParam._m0[5u].w;
        float _3918 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) - _841)) + _841) < ((_680 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_593, cbSceneParam._m0[5u].z, fma(_592, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _591));
    float _713 = fma(_593, cbSceneParam._m0[6u].z, fma(_592, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _591));
    float _716 = fma(_593, cbSceneParam._m0[7u].z, fma(_592, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _591));
    uint _729 = _245 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3929 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _754 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _750.x;
    float _755 = dot(vec3(_591, _592, _593), vec3(_674, _675, _676));
    float _758 = _755 * 2.0;
    float _762 = (_758 * _591) - _674;
    float _763 = (_758 * _592) - _675;
    float _764 = (_758 * _593) - _676;
    float _768 = abs(dot(vec3(_674, _675, _676), vec3(_591, _592, _593)));
    float _3962 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = sqrt(_594);
    float _783 = exp2((_770 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1151;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _876 = fma(_823, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815));
        float _880 = fma(_823, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815));
        float _884 = fma(_823, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815));
        float _909 = _815 + _591;
        float _910 = _819 + _592;
        float _911 = _823 + _593;
        float _921 = fma(_911, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909)) - _876;
        float _922 = fma(_911, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909)) - _880;
        float _923 = fma(_911, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909)) - _884;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_876 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_880 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[34u].z) + ((((((_884 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _979 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_945.x + (-0.5));
        float _981 = _979 * (_945.y + (-0.5));
        float _982 = _979 * (_945.z + (-0.5));
        float _989 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_952.x + (-0.5));
        float _991 = _989 * (_952.y + (-0.5));
        float _992 = _989 * (_952.z + (-0.5));
        float _999 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_959.x + (-0.5));
        float _1001 = _999 * (_959.y + (-0.5));
        float _1002 = _999 * (_959.z + (-0.5));
        float _1009 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_966.x + (-0.5));
        float _1011 = _1009 * (_966.y + (-0.5));
        float _1012 = _1009 * (_966.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1033 = (dot(vec3(_591, _592, _593), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1043 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _4010 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1045 + 1.0))) + _1050) * _1013;
        float _1060 = _981 * 0.5;
        float _1061 = _991 * 0.5;
        float _1062 = _1001 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_591, _592, _593), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _4043 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1087 + 1.0))) + _1092) * _1014;
        float _1102 = _982 * 0.5;
        float _1103 = _992 * 0.5;
        float _1104 = _1002 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_591, _592, _593), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _4076 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1129 + 1.0))) + _1134) * _1015;
        _1151 = _982;
        _1153 = _981;
        _1154 = _980;
        _1155 = _992;
        _1156 = _991;
        _1157 = _990;
        _1158 = _1002;
        _1159 = _1001;
        _1160 = _1000;
        _1161 = _1015;
        _1162 = _1014;
        _1163 = _1013;
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _1152;
        _1153 = _1152;
        _1154 = _1152;
        _1155 = _1152;
        _1156 = _1152;
        _1157 = _1152;
        _1158 = _1152;
        _1159 = _1152;
        _1160 = _1152;
        _1161 = _1152;
        _1162 = _1152;
        _1163 = _1152;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1190 = fma(_823, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815));
        float _1194 = fma(_823, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815));
        float _1198 = fma(_823, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815));
        float _1221 = _815 + _591;
        float _1222 = _819 + _592;
        float _1223 = _823 + _593;
        float _1233 = fma(_1223, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221)) - _1190;
        float _1234 = fma(_1223, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221)) - _1194;
        float _1235 = fma(_1223, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221)) - _1198;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1190 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1194 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[35u].z) + ((((((_1198 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1289 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1256.x + (-0.5));
        float _1291 = _1289 * (_1256.y + (-0.5));
        float _1292 = _1289 * (_1256.z + (-0.5));
        float _1299 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1263.x + (-0.5));
        float _1301 = _1299 * (_1263.y + (-0.5));
        float _1302 = _1299 * (_1263.z + (-0.5));
        float _1309 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1270.x + (-0.5));
        float _1311 = _1309 * (_1270.y + (-0.5));
        float _1312 = _1309 * (_1270.z + (-0.5));
        float _1319 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1277.x + (-0.5));
        float _1321 = _1319 * (_1277.y + (-0.5));
        float _1322 = _1319 * (_1277.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_591, _592, _593), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4139 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1353 + 1.0))) + _1358) * _1323;
        float _1368 = _1291 * 0.5;
        float _1369 = _1301 * 0.5;
        float _1370 = _1311 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_591, _592, _593), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4172 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1395 + 1.0))) + _1400) * _1324;
        float _1410 = _1292 * 0.5;
        float _1411 = _1302 * 0.5;
        float _1412 = _1312 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_591, _592, _593), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4205 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1437 + 1.0))) + _1442) * _1325;
        _1459 = _1292;
        _1460 = _1291;
        _1461 = _1290;
        _1462 = _1302;
        _1463 = _1301;
        _1464 = _1300;
        _1465 = _1312;
        _1466 = _1311;
        _1467 = _1310;
        _1468 = _1325;
        _1469 = _1324;
        _1470 = _1323;
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1152;
        _1460 = _1152;
        _1461 = _1152;
        _1462 = _1152;
        _1463 = _1152;
        _1464 = _1152;
        _1465 = _1152;
        _1466 = _1152;
        _1467 = _1152;
        _1468 = _1152;
        _1469 = _1152;
        _1470 = _1152;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1164)) + _1164;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1165)) + _1165;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1166)) + _1166;
    float _1506 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1483));
    float _1527 = _762 * 0.5;
    float _1528 = _763 * 0.5;
    float _1529 = _764 * 0.5;
    float _1530 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1533 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1536 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1570;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1543 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1151, _1155, _1158, _1161));
        float _1547 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1551 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1558 = dot(vec4(cbModelParam._m0[39u]), vec4(_1527, _1528, _1529, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1581;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1572 = dot(vec4(cbModelParam._m0[40u]), vec4(_1527, _1528, _1529, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1585 = (_1581 * cbModelParam._m0[1u].x) + (_1570 * (1.0 - cbModelParam._m0[1u].x));
    float _1595 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1595 : min(cbModelParam._m0[25u].z, _1595));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_823, cbModelParam._m0[13u].z, fma(_819, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_823, cbModelParam._m0[14u].z, fma(_819, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_823, cbModelParam._m0[15u].z, fma(_819, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1659 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1662 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1690 = frontier_phi_19_17_ladder;
        }
        float _1861;
        if (_1659 > 0.0)
        {
            _1861 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1861 = frontier_phi_28_24_ladder;
        }
        float _2156;
        if (_1662 > 0.0)
        {
            _2156 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2156 = frontier_phi_40_35_ladder;
        }
        float _2158 = isnan(_1861) ? _1690 : (isnan(_1690) ? _1861 : min(_1690, _1861));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1656) + _1645;
        float _2164 = (_2159 * _1659) + _1649;
        float _2165 = (_2159 * _1662) + _1653;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1596);
            frontier_phi_18_40_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_18_40_ladder_2;
        _1680 = frontier_phi_18_40_ladder_1;
        _1682 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1596);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1742 = fma(_823, cbModelParam._m0[21u].z, fma(_819, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815)) + cbModelParam._m0[21u].w;
        float _1746 = fma(_823, cbModelParam._m0[22u].z, fma(_819, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815)) + cbModelParam._m0[22u].w;
        float _1750 = fma(_823, cbModelParam._m0[23u].z, fma(_819, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815)) + cbModelParam._m0[23u].w;
        float _1753 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1756 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1759 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _1866;
        if (_1753 > 0.0)
        {
            _1866 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1866 = frontier_phi_30_26_ladder;
        }
        float _2183;
        if (_1756 > 0.0)
        {
            _2183 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2183 = frontier_phi_42_37_ladder;
        }
        float _2510;
        if (_1759 > 0.0)
        {
            _2510 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2510 = frontier_phi_52_49_ladder;
        }
        float _2512 = isnan(_2183) ? _1866 : (isnan(_1866) ? _2183 : min(_1866, _2183));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1753) + _1742;
        float _2518 = (_2513 * _1756) + _1746;
        float _2519 = (_2513 * _1759) + _1750;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_27_52_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1778 = frontier_phi_27_52_ladder_2;
        _1780 = frontier_phi_27_52_ladder_1;
        _1782 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1687);
        _1778 = _1762.x * cbModelParam._m0[1u].z;
        _1780 = _1762.y * cbModelParam._m0[1u].z;
        _1782 = _1762.z * cbModelParam._m0[1u].z;
    }
    float _1794 = ((((1.0 - _783) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_783 * _770)) * _754;
    float _1795 = _1794 * ((cbModelParam._m0[1u].w * (_1778 - _1678)) + _1678);
    float _1796 = _1794 * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1797 = _1794 * ((cbModelParam._m0[1u].w * (_1782 - _1682)) + _1682);
    float _1800 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1795 * cbSceneParam._m0[91u].x));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1853 = _1840 / _1852;
    float _1854 = _1844 / _1852;
    float _1855 = _1848 / _1852;
    float _2002;
    float _2003;
    float _2004;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1882 = ((uint(_1855 > cbSceneParam._m0[59u].y) + uint(_1855 > cbSceneParam._m0[59u].x)) + uint(_1855 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1883 = _1882 + 43u;
        uint _1891 = _1882 + 44u;
        uint _1899 = _1882 + 45u;
        uint _1907 = _1882 + 46u;
        float _1918 = fma(_1852, cbSceneParam._m0[_1883].w, fma(_1848, cbSceneParam._m0[_1883].z, fma(_1844, cbSceneParam._m0[_1883].y, _1840 * cbSceneParam._m0[_1883].x)));
        float _1922 = fma(_1852, cbSceneParam._m0[_1891].w, fma(_1848, cbSceneParam._m0[_1891].z, fma(_1844, cbSceneParam._m0[_1891].y, _1840 * cbSceneParam._m0[_1891].x)));
        float _1930 = fma(_1852, cbSceneParam._m0[_1907].w, fma(_1848, cbSceneParam._m0[_1907].z, fma(_1844, cbSceneParam._m0[_1907].y, _1840 * cbSceneParam._m0[_1907].x)));
        float _1935 = cbSceneParam._m0[33u].z * _1930;
        float _1937 = cbSceneParam._m0[33u].w * _1930;
        float _1940 = fma(_1852, cbSceneParam._m0[_1899].w, fma(_1848, cbSceneParam._m0[_1899].z, fma(_1844, cbSceneParam._m0[_1899].y, _1840 * cbSceneParam._m0[_1899].x))) / _1930;
        float _1988 = (cbSceneParam._m0[33u].x - sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855))) * cbSceneParam._m0[33u].y;
        float _4331 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1995 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1935 + _1918) / _1930, (_1937 + _1922) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 + _1918) / _1930, (_1922 - _1935) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 - _1935) / _1930, (_1922 - _1937) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 - _1937) / _1930, (_1935 + _1922) / _1930), _1940), 0.0)).x), vec4(0.25)));
        _2002 = 1.0 - (_1995 * cbSceneParam._m0[34u].x);
        _2003 = 1.0 - (_1995 * cbSceneParam._m0[34u].y);
        _2004 = 1.0 - (_1995 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2002 = 1.0;
        _2003 = 1.0;
        _2004 = 1.0;
    }
    float _2068;
    float _2070;
    float _2072;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2056 = fma(_1852, cbSceneParam._m0[63u].w, fma(_1848, cbSceneParam._m0[63u].z, fma(_1844, cbSceneParam._m0[63u].y, _1840 * cbSceneParam._m0[63u].x)));
        float _2057 = fma(_1852, cbSceneParam._m0[60u].w, fma(_1848, cbSceneParam._m0[60u].z, fma(_1844, cbSceneParam._m0[60u].y, _1840 * cbSceneParam._m0[60u].x))) / _2056;
        float _2058 = fma(_1852, cbSceneParam._m0[61u].w, fma(_1848, cbSceneParam._m0[61u].z, fma(_1844, cbSceneParam._m0[61u].y, _1840 * cbSceneParam._m0[61u].x))) / _2056;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2057 >= cbSceneParam._m0[64u].x) && (_2058 >= cbSceneParam._m0[64u].y)) && (_2057 <= cbSceneParam._m0[64u].z)) && (_2058 <= cbSceneParam._m0[64u].w))
        {
            float _2196 = fma(_1852, cbSceneParam._m0[62u].w, fma(_1848, cbSceneParam._m0[62u].z, fma(_1844, cbSceneParam._m0[62u].y, _1840 * cbSceneParam._m0[62u].x))) / _2056;
            float _2200 = isnan(cbSceneParam._m0[41u].w) ? _2196 : (isnan(_2196) ? cbSceneParam._m0[41u].w : max(_2196, cbSceneParam._m0[41u].w));
            float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855))) * cbSceneParam._m0[33u].y;
            float _4347 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
            float _2250 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2057, cbSceneParam._m0[33u].w + _2058), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2057, _2058 - cbSceneParam._m0[33u].z), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2057 - cbSceneParam._m0[33u].z, _2058 - cbSceneParam._m0[33u].w), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2057 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2058), _2200), 0.0)).x), vec4(0.25)));
            float _2254 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
            float _2255 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
            float _2256 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2256) ? _2004 : (isnan(_2004) ? _2256 : min(_2004, _2256));
            frontier_phi_39_38_ladder_1 = isnan(_2255) ? _2003 : (isnan(_2003) ? _2255 : min(_2003, _2255));
            frontier_phi_39_38_ladder_2 = isnan(_2254) ? _2002 : (isnan(_2002) ? _2254 : min(_2002, _2254));
        }
        else
        {
            frontier_phi_39_38_ladder = _2004;
            frontier_phi_39_38_ladder_1 = _2003;
            frontier_phi_39_38_ladder_2 = _2002;
        }
        _2068 = frontier_phi_39_38_ladder_2;
        _2070 = frontier_phi_39_38_ladder_1;
        _2072 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2068 = _2002;
        _2070 = _2003;
        _2072 = _2004;
    }
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _754 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2115 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2119 = _2079 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_591, _592, _593));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_591, _592, _593));
    float _4383 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4394 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2096].x * _2102) * _2140) + (((cbLight._m0[_2106].x * _2068) * _2115) * _2138);
    float _2148 = ((_2102 * cbLight._m0[_2096].y) * _2140) + (((cbLight._m0[_2106].y * _2070) * _2115) * _2138);
    float _2149 = ((_2102 * cbLight._m0[_2096].z) * _2140) + (((cbLight._m0[_2106].z * _2072) * _2115) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2155)
    {
        _2257 = _2147;
        _2259 = _2148;
        _2261 = _2149;
    }
    else
    {
        uint _2265 = _2079 + 6u;
        float _2281 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4405 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2284 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2257 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2147;
        _2259 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2148;
        _2261 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2149;
    }
    bool _2264 = _2153.y == 0u;
    float _2319;
    float _2321;
    float _2323;
    if (_2264)
    {
        _2319 = _2257;
        _2321 = _2259;
        _2323 = _2261;
    }
    else
    {
        uint _2481 = _2079 + 7u;
        float _2497 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2498 = _2497 * _2497;
        float _4421 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2499 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2500 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2319 = (((cbLight._m0[_2481].x * 0.3183098733425140380859375) * _2499) * _2500) + _2257;
        _2321 = (((cbLight._m0[_2481].y * 0.3183098733425140380859375) * _2499) * _2500) + _2259;
        _2323 = (((cbLight._m0[_2481].z * 0.3183098733425140380859375) * _2499) * _2500) + _2261;
    }
    uint _2326 = _2079 + 8u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _594) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2079].x + _674;
    float _2342 = cbLight._m0[_2079].y + _675;
    float _2343 = cbLight._m0[_2079].z + _676;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2079].xyz));
    float _4437 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _2355 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2356 = dot(vec3(_591, _592, _593), vec3(_2348, _2349, _2350));
    float _4459 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2348, _2349, _2350));
    float _4470 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2340 * _2340;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2380 = 1.0 - _2340;
    float _2391 = (0.5 / (((_2355 * ((_2354 * _2380) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2380) + _2340) * _2354))) * _2354;
    float _4481 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    uint _2407 = _2079 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _594) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2119].x + _674;
    float _2421 = cbLight._m0[_2119].y + _675;
    float _2422 = cbLight._m0[_2119].z + _676;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2119].xyz));
    float _4492 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2434 = dot(vec3(_591, _592, _593), vec3(_2427, _2428, _2429));
    float _4503 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2427, _2428, _2429));
    float _4514 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2456 = 1.0 - _2419;
    float _2466 = (0.5 / (((_2355 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2456) + _2419) * _2433))) * _2433;
    float _4525 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2478 = (((_2455 * cbLight._m0[_2407].x) * _2468) * _2102) + ((((cbLight._m0[_2326].x * _2068) * _2379) * _2393) * _2115);
    float _2479 = (((_2455 * cbLight._m0[_2407].y) * _2468) * _2102) + ((((cbLight._m0[_2326].y * _2070) * _2379) * _2393) * _2115);
    float _2480 = (((_2455 * cbLight._m0[_2407].z) * _2468) * _2102) + ((((cbLight._m0[_2326].z * _2072) * _2379) * _2393) * _2115);
    float _2536;
    float _2538;
    float _2540;
    if (_2155)
    {
        _2536 = _2478;
        _2538 = _2479;
        _2540 = _2480;
    }
    else
    {
        uint _2542 = _2079 + 2u;
        uint _2546 = _2079 + 10u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _594) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _674;
        float _2563 = cbLight._m0[_2542].y + _675;
        float _2564 = cbLight._m0[_2542].z + _676;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2542].xyz));
        float _4536 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2576 = dot(vec3(_591, _592, _593), vec3(_2569, _2570, _2571));
        float _4547 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4558 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2598 = 1.0 - _2561;
        float _2608 = (0.5 / (((_2355 * ((_2575 * _2598) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2598) + _2561) * _2575))) * _2575;
        float _4569 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2536 = (((_2597 * cbLight._m0[_2546].x) * _2610) * _2611) + _2478;
        _2538 = (((_2597 * cbLight._m0[_2546].y) * _2610) * _2611) + _2479;
        _2540 = (((_2597 * cbLight._m0[_2546].z) * _2610) * _2611) + _2480;
    }
    float _2642;
    float _2644;
    float _2646;
    if (_2264)
    {
        _2642 = _2536;
        _2644 = _2538;
        _2646 = _2540;
    }
    else
    {
        uint _2653 = _2079 + 3u;
        uint _2657 = _2079 + 11u;
        float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2653].w)) * _594) * 0.949999988079071044921875);
        float _2672 = _2671 * _2671;
        float _2673 = cbLight._m0[_2653].x + _674;
        float _2674 = cbLight._m0[_2653].y + _675;
        float _2675 = cbLight._m0[_2653].z + _676;
        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
        float _2680 = _2679 * _2673;
        float _2681 = _2679 * _2674;
        float _2682 = _2679 * _2675;
        float _2683 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2653].xyz));
        float _4585 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2687 = dot(vec3(_591, _592, _593), vec3(_2680, _2681, _2682));
        float _4596 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2691 = dot(vec3(cbLight._m0[_2653].xyz), vec3(_2680, _2681, _2682));
        float _4607 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2695 = _2672 * _2672;
        float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
        float _2708 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2709 = 1.0 - _2672;
        float _2719 = (0.5 / (((_2355 * ((_2686 * _2709) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2709) + _2672) * _2686))) * _2686;
        float _4618 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2642 = (((_2708 * cbLight._m0[_2657].x) * _2721) * _2722) + _2536;
        _2644 = (((_2708 * cbLight._m0[_2657].y) * _2721) * _2722) + _2538;
        _2646 = (((_2708 * cbLight._m0[_2657].z) * _2721) * _2722) + _2540;
    }
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_2077.y == 0u)
    {
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.x;
        uint _2755 = uint((float(_2743.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2744))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2744)));
        float _2765 = (log2(_1855 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2766 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        uint _2769 = uint(isnan(14.0) ? _2766 : (isnan(_2766) ? 14.0 : min(_2766, 14.0)));
        uvec4 _2774 = texelFetch(g_lightClusterGridBuffer, int(((_2769 << 2u) + (_2755 << 6u)) >> 2u));
        uint _2775 = _2774.x;
        uint _2776 = _2743.z;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((((1u << ((_2776 >> 4u) & 15u)) + 4294967295u) & _2775) == 0u) || ((_2776 & 240u) == 0u))
        {
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
        }
        else
        {
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            uint _3014 = 0u;
            uint _3023;
            bool _3024;
            for (;;)
            {
                _3023 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                _3024 = _3023 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3024)
                {
                    frontier_phi_73_pred = _3013;
                    frontier_phi_73_pred_1 = _3012;
                    frontier_phi_73_pred_2 = _3011;
                    frontier_phi_73_pred_3 = _3010;
                    frontier_phi_73_pred_4 = _3009;
                    frontier_phi_73_pred_5 = _3008;
                }
                else
                {
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    uint _3159;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3023;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    for (;;)
                    {
                        uint _3163 = uint(findLSB(_3159)) + (_3014 << 5u);
                        uint _3160 = (_3159 + 4294967295u) & _3159;
                        uint _3165 = _3163 * 48u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3185 = (_3163 * 48u) + 4u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3204 = (_3163 * 48u) + 8u;
                        vec3 _3215 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x));
                        float _3219 = _3179.x - _1853;
                        float _3220 = _3179.y - _1854;
                        float _3221 = _3179.z - _1855;
                        float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                        float _3225 = inversesqrt(_3222);
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3229 = dot(vec3(_710, _713, _716), vec3(_3226, _3227, _3228));
                        float _3234 = 1.0 - (_3222 * _3179.w);
                        float _4644 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3236 = sqrt(_3222) * _3198.w;
                        float _3239 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3229) + _3240;
                        float _3246 = _3236 * _3236;
                        float _3250 = ((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3235) / ((_3246 * 0.699999988079071044921875) + 1.0);
                        float _3254 = (-0.0) - _1853;
                        float _3255 = (-0.0) - _1854;
                        float _3256 = (-0.0) - _1855;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3270 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                        float _3271 = 1.0 - _770;
                        float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                        float _3279 = _3278 * _3278;
                        float _3280 = _3279 * _3279;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3283 = _3263 + _3228;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3291 = dot(vec3(_710, _713, _716), vec3(_3261, _3262, _3263));
                        float _4660 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3295 = dot(vec3(_710, _713, _716), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                        float _4671 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                        float _3303 = _3239 * _3279;
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3229) + _3304;
                        float _4682 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3309 = 1.0 - _3279;
                        float _3319 = (0.5 / (((_3308 * ((_3294 * _3309) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3279) * _3294))) * _3308;
                        float _4693 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3330 = (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) / ((_3302 * _3302) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125))) * _3235;
                        _3083 = (_3250 * _3198.x) + _3156;
                        _3084 = (_3250 * _3198.y) + _3157;
                        _3085 = (_3250 * _3198.z) + _3158;
                        _3080 = (_3330 * _3215.x) + _3153;
                        _3081 = (_3330 * _3215.y) + _3154;
                        _3082 = (_3330 * _3215.z) + _3155;
                        if (_3160 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3160;
                        }
                    }
                    frontier_phi_73_pred = _3085;
                    frontier_phi_73_pred_1 = _3084;
                    frontier_phi_73_pred_2 = _3083;
                    frontier_phi_73_pred_3 = _3082;
                    frontier_phi_73_pred_4 = _3081;
                    frontier_phi_73_pred_5 = _3080;
                }
                _2866 = frontier_phi_73_pred;
                _2864 = frontier_phi_73_pred_1;
                _2862 = frontier_phi_73_pred_2;
                _2860 = frontier_phi_73_pred_3;
                _2858 = frontier_phi_73_pred_4;
                _2856 = frontier_phi_73_pred_5;
                uint _3015 = _3014 + 1u;
                if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3008 = _2856;
                    _3009 = _2858;
                    _3010 = _2860;
                    _3011 = _2862;
                    _3012 = _2864;
                    _3013 = _2866;
                    _3014 = _3015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
        }
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.z;
        uint _2872 = (_2870 >> 8u) & 15u;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((4294967295u << _2872) & _2775) == 0u)
        {
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
            _2986 = _2865;
        }
        else
        {
            float _3001 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
            float _3002 = _3001 * _1853;
            float _3003 = _3001 * _1854;
            float _3004 = _3001 * _1855;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2872 < ((_2870 >> 12u) & 15u))
            {
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _3136 = _2855;
                float _3137 = _2857;
                float _3138 = _2859;
                float _3139 = _2861;
                float _3140 = _2863;
                float _3141 = _2865;
                uint _3142 = _2872;
                uint _3151;
                bool _3152;
                for (;;)
                {
                    _3151 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                    _3152 = _3151 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3152)
                    {
                        frontier_phi_84_pred = _3141;
                        frontier_phi_84_pred_1 = _3140;
                        frontier_phi_84_pred_2 = _3139;
                        frontier_phi_84_pred_3 = _3138;
                        frontier_phi_84_pred_4 = _3137;
                        frontier_phi_84_pred_5 = _3136;
                    }
                    else
                    {
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3357 = _3136;
                        float _3358 = _3137;
                        float _3359 = _3138;
                        float _3360 = _3139;
                        float _3361 = _3140;
                        float _3362 = _3141;
                        uint _3363 = _3151;
                        uint _3364;
                        vec4 _3389;
                        float _3390;
                        vec4 _3405;
                        vec3 _3417;
                        vec4 _3432;
                        vec4 _3448;
                        float _3494;
                        bool _3495;
                        for (;;)
                        {
                            uint _3374 = ((_3142 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3363));
                            _3364 = (_3363 + 4294967295u) & _3363;
                            uint _3376 = _3374 * 40u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3390 = _3389.w;
                            uint _3392 = (_3374 * 40u) + 4u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3374 * 40u) + 8u;
                            _3417 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x));
                            uint _3419 = (_3374 * 40u) + 16u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3435 = (_3374 * 40u) + 20u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3374 * 40u) + 24u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3469 = (_3374 * 40u) + 28u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3494 = fma(_1855, _3482.z, fma(_1854, _3482.y, _3482.x * _1853)) + _3482.w;
                            _3495 = !((fma(_1855, _3463.z, fma(_1854, _3463.y, _3463.x * _1853)) + _3463.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3495)
                            {
                                float _3522 = _3389.x - _1853;
                                float _3523 = _3389.y - _1854;
                                float _3524 = _3389.z - _1855;
                                float _3525 = dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524));
                                float _3528 = inversesqrt(_3525);
                                float _3529 = _3528 * _3522;
                                float _3530 = _3528 * _3523;
                                float _3531 = _3528 * _3524;
                                float _3535 = 1.0 - (_3525 / (_3390 * _3390));
                                float _4704 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3540 = sqrt(_3525) * _3405.w;
                                float _3542 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                                float _3543 = _3542 * _3542;
                                float _3546 = ((1.0 - _3543) * dot(vec3(_3529, _3530, _3531), vec3(_710, _713, _716))) + _3543;
                                float _3549 = _3540 * _3540;
                                float _3553 = (fma(_1855, _3432.z, fma(_1854, _3432.y, _3432.x * _1853)) + _3432.w) / _3494;
                                float _3554 = (fma(_1855, _3448.z, fma(_1854, _3448.y, _3448.x * _1853)) + _3448.w) / _3494;
                                float _3558 = 1.0 - dot(vec2(_3553, _3554), vec2(_3553, _3554));
                                float _4720 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3560 = _3559 * (((isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0))) * _3536) / ((_3549 * 0.699999988079071044921875) + 1.0));
                                float _3572 = exp2(log2(1.0 / ((_3549 * 3.5) + 5.0)) * 0.25);
                                float _3573 = 1.0 - _770;
                                float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                                float _3581 = _3580 * _3580;
                                float _3582 = _3581 * _3581;
                                float _3583 = _3529 - _3002;
                                float _3584 = _3530 - _3003;
                                float _3585 = _3531 - _3004;
                                float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                                float _3593 = dot(vec3(_710, _713, _716), vec3((-0.0) - _3002, (-0.0) - _3003, (-0.0) - _3004));
                                float _4731 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3597 = dot(vec3(_710, _713, _716), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                                float _4742 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                                float _3605 = _3542 * _3581;
                                float _3606 = _3605 * _3605;
                                float _3612 = ((1.0 - _3606) * dot(vec3(_710, _713, _716), vec3(_3529, _3530, _3531))) + _3606;
                                float _4753 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3614 = 1.0 - _3581;
                                float _3624 = (0.5 / (((_3613 * ((_3596 * _3614) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3613 * _3614) + _3581) * _3596))) * _3613;
                                float _4764 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3634 = (_3559 * _3536) * (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3604 * _3604) * ((_3549 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3560 * _3405.z;
                                frontier_phi_90_pred_1 = _3560 * _3405.y;
                                frontier_phi_90_pred_2 = _3560 * _3405.x;
                                frontier_phi_90_pred_3 = _3634 * _3417.z;
                                frontier_phi_90_pred_4 = _3634 * _3417.y;
                                frontier_phi_90_pred_5 = _3634 * _3417.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_90_pred;
                            _3642 = frontier_phi_90_pred_1;
                            _3641 = frontier_phi_90_pred_2;
                            _3640 = frontier_phi_90_pred_3;
                            _3639 = frontier_phi_90_pred_4;
                            _3638 = frontier_phi_90_pred_5;
                            _3347 = _3641 + _3360;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            _3344 = _3638 + _3357;
                            _3345 = _3639 + _3358;
                            _3346 = _3640 + _3359;
                            if (_3364 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3364;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3349;
                        frontier_phi_84_pred_1 = _3348;
                        frontier_phi_84_pred_2 = _3347;
                        frontier_phi_84_pred_3 = _3346;
                        frontier_phi_84_pred_4 = _3345;
                        frontier_phi_84_pred_5 = _3344;
                    }
                    _2987 = frontier_phi_84_pred;
                    _2985 = frontier_phi_84_pred_1;
                    _2983 = frontier_phi_84_pred_2;
                    _2981 = frontier_phi_84_pred_3;
                    _2979 = frontier_phi_84_pred_4;
                    _2977 = frontier_phi_84_pred_5;
                    uint _3143 = _3142 + 1u;
                    if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3136 = _2977;
                        _3137 = _2979;
                        _3138 = _2981;
                        _3139 = _2983;
                        _3140 = _2985;
                        _3141 = _2987;
                        _3142 = _3143;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2983;
                frontier_phi_65_66_ladder_1 = _2987;
                frontier_phi_65_66_ladder_2 = _2985;
                frontier_phi_65_66_ladder_3 = _2981;
                frontier_phi_65_66_ladder_4 = _2979;
                frontier_phi_65_66_ladder_5 = _2977;
            }
            else
            {
                frontier_phi_65_66_ladder = _2861;
                frontier_phi_65_66_ladder_1 = _2865;
                frontier_phi_65_66_ladder_2 = _2863;
                frontier_phi_65_66_ladder_3 = _2859;
                frontier_phi_65_66_ladder_4 = _2857;
                frontier_phi_65_66_ladder_5 = _2855;
            }
            _2976 = frontier_phi_65_66_ladder_5;
            _2978 = frontier_phi_65_66_ladder_4;
            _2980 = frontier_phi_65_66_ladder_3;
            _2982 = frontier_phi_65_66_ladder;
            _2984 = frontier_phi_65_66_ladder_2;
            _2986 = frontier_phi_65_66_ladder_1;
        }
        float _2991 = isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0));
        _2788 = (_2991 * _2982) + _2319;
        _2790 = (_2991 * _2984) + _2321;
        _2792 = (_2991 * _2986) + _2323;
        _2794 = ((_2976 * 0.039999999105930328369140625) * _2991) + _2642;
        _2796 = ((_2978 * 0.039999999105930328369140625) * _2991) + _2644;
        _2798 = ((_2980 * 0.039999999105930328369140625) * _2991) + _2646;
    }
    else
    {
        _2788 = _2319;
        _2790 = _2321;
        _2792 = _2323;
        _2794 = _2642;
        _2796 = _2644;
        _2798 = _2646;
    }
    float _4780 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4791 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4802 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2815 = ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2788 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _754))) + ((_2794 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1585)) * cbPerFrame._m0[3u].x);
    float _2816 = ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2790 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _754))) + ((_2796 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1585)) * cbPerFrame._m0[3u].x);
    float _2817 = ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2792 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _754))) + ((_2798 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1585)) * cbPerFrame._m0[3u].x);
    uint _2818 = _245 + 6u;
    float _2826 = _691 / cbSceneParam._m0[86u].x;
    float _2827 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2841 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, (log2((isnan(cbSceneParam._m0[77u].w) ? _616 : (isnan(_616) ? cbSceneParam._m0[77u].w : min(_616, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2843 = _2841.x;
    float _2844 = _2841.y;
    float _2845 = _2841.z;
    float _2846 = _2841.w;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_616 > cbSceneParam._m0[78u].w)
    {
        float _2880 = isnan(_616) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _616 : min(cbSceneParam._m0[80u].w, _616));
        float _2881 = _2880 / _616;
        float _2892 = _2881 * _667;
        float _2893 = _668 * _2881;
        float _2894 = (-0.0) - _2893;
        float _2896 = _2881 * _669;
        float _2898 = (cbSceneParam._m0[77u].w * _2894) / _2880;
        float _2899 = _2898 + cbSceneParam._m0[79u].w;
        float _2900 = cbSceneParam._m0[79u].w - _2893;
        float _2906 = sqrt(((_2892 * _2892) + (_2893 * _2893)) + (_2896 * _2896));
        float _2909 = (1.0 - (cbSceneParam._m0[77u].w / _2880)) * _2906;
        float _2914 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2916 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3093;
        if (abs((_2894 - _2898) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3093 = ((((_2899 > 0.0) ? exp2(_2914 * _2899) : (2.0 - exp2(_2916 * _2899))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2909;
        }
        else
        {
            float _3037 = 1.0 / cbSceneParam._m0[80u].x;
            float _3038 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : max(_2899, _2900));
            float _3039 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : min(_2899, _2900));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            _3093 = ((abs(_2906 / _2894) * cbSceneParam._m0[80u].y) * ((((_3048 - _3049) * 2.0) - ((exp2(_2914 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0)))) - exp2(_2914 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))))) * _3037)) - ((exp2(_2916 * _3048) - exp2(_2916 * _3049)) * _3037))) + (_2909 * cbSceneParam._m0[80u].z);
        }
        vec4 _3095 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, 1.0), 0.0);
        float _3104 = exp2((_3093 * (-1.44269502162933349609375)) * (1.0 - _3095.w));
        float _3105 = log2(_3104);
        float _3121 = log2(_2846);
        _2918 = (exp2(_3121 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].x)) * _3095.x) / cbSceneParam._m0[78u].x)) + _2843;
        _2920 = (exp2(_3121 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].y)) * _3095.y) / cbSceneParam._m0[78u].y)) + _2844;
        _2922 = (exp2(_3121 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].z)) * _3095.z) / cbSceneParam._m0[78u].z)) + _2845;
        _2924 = _3104 * _2846;
    }
    else
    {
        _2918 = _2843;
        _2920 = _2844;
        _2922 = _2845;
        _2924 = _2846;
    }
    bool _3131;
    vec4 _2934;
    vec4 _2956;
    float _2958;
    float _2962;
    float _2963;
    float _2964;
    float _2965;
    bool _2975;
    for (;;)
    {
        _2934 = cbMatDynParam._m0[0u];
        float _2936 = roundEven(_2934.y);
        bool _2937 = _2936 == 3.0;
        float _2938 = log2(_2924);
        float _2945 = exp2(_2938 * cbSceneParam._m0[78u].x) * _2815;
        float _2946 = exp2(_2938 * cbSceneParam._m0[78u].y) * _2816;
        float _2947 = exp2(_2938 * cbSceneParam._m0[78u].z) * _2817;
        float _2954 = _680 + (-0.5);
        _2956 = cbMtdParam._m0[1u];
        _2958 = _2956.y * _2954;
        float _2961 = (_2936 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2962 = _2961 * (_2937 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2918)));
        _2963 = _2961 * (_2937 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2920)));
        _2964 = _2961 * (_2937 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2922)));
        _2965 = _2954 * 0.999000012874603271484375;
        _2975 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2975)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2965) < 0.5)
            {
                _3131 = true;
                break;
            }
        }
        uint _3072 = _729 + uint(_2934.w);
        if ((cbInstanceData._m0[_3072].w < 1.0) && ((cbInstanceData._m0[_3072].w + _2965) < 0.5))
        {
            _3131 = true;
            break;
        }
        if ((_2958 + 1.0) < _2956.x)
        {
            _3131 = true;
            break;
        }
        _3131 = false;
        break;
    }
    float _3335;
    if (_3131)
    {
        discard_state = true;
        _3335 = 0.0;
    }
    else
    {
        _3335 = cbInstanceData._m0[_2818].w;
    }
    SV_Target.x = _2962;
    SV_Target.y = _2963;
    SV_Target.z = _2964;
    SV_Target.w = _3335;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2818].w;
    discard_exit();
}


