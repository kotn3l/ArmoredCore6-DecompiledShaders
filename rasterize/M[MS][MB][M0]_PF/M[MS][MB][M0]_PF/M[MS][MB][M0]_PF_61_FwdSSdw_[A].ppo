#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1038;
float _3423;
float _3424;
float _3425;
float _3426;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _334 = _332.x;
    float _347 = dot(vec4(_334, _332.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _364 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_334 - _347) * cbMtdParam._m0[24u].x) + _347) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3435 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _372 = (_365 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _373 = (_365 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _374 = (_365 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _387 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _406 = _404.x;
    float _407 = _404.y;
    float _408 = _404.z;
    float _417 = ((_387.z - _408) * _365) + _408;
    float _420 = ((((_387.x - _406) * _365) + _406) * 2.0) + (-1.0);
    float _422 = ((((_387.y - _407) * _365) + _407) * 2.0) + (-1.0);
    float _423 = dot(vec2(_420, _422), vec2(_420, _422));
    float _3446 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = sqrt(1.0 - (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _448 = cbMtdParam._m0[22u].x + _441.w;
    float _452 = gl_FragCoord.x * 0.125;
    float _454 = gl_FragCoord.y * 0.125;
    float _465 = fma(_428, _215 * NORMAL.x, fma(_422, _222 * TANGENT.x, (_208 * _200) * _420));
    float _468 = fma(_428, _215 * NORMAL.y, fma(_422, _222 * TANGENT.y, (_208 * _201) * _420));
    float _471 = fma(_428, _215 * NORMAL.z, fma(_422, _222 * TANGENT.z, (_208 * _202) * _420));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    float _3457 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _479 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3479 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3490 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3501 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_452, _454)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _501 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _553 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _543);
    float _554 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _543);
    float _555 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _543);
    float _559 = inversesqrt(dot(vec3(_553, _554, _555), vec3(_553, _554, _555)));
    float _560 = _553 * _559;
    float _561 = _554 * _559;
    float _562 = _555 * _559;
    vec4 _564 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_452, _454));
    float _566 = _564.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _720 = sqrt(((_553 * _553) + (_554 * _554)) + (_555 * _555));
        float _726 = (cbMatDynParam._m0[5u].x * _720) + cbMatDynParam._m0[5u].y;
        float _3512 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _731 = (cbMatDynParam._m0[5u].z * _720) + cbMatDynParam._m0[5u].w;
        float _3523 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) - _727)) + _727) < ((_566 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _577 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _578 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _596 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _599 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _602 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    uint _615 = _228 + 9u;
    uint _616 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3534 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _577, cbSceneParam._m0[86u].y * _578));
    float _640 = ((isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * TEXCOORD_5.w) * _636.x;
    float _641 = dot(vec3(_476, _477, _478), vec3(_560, _561, _562));
    float _644 = _641 * 2.0;
    float _648 = (_644 * _476) - _560;
    float _649 = (_644 * _477) - _561;
    float _650 = (_644 * _478) - _562;
    float _654 = abs(dot(vec3(_560, _561, _562), vec3(_476, _477, _478)));
    float _3567 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _656 = sqrt(_479);
    float _669 = exp2((_656 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_656 * 3.0));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _762 = fma(_709, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701));
        float _766 = fma(_709, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701));
        float _770 = fma(_709, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701));
        float _795 = _701 + _476;
        float _796 = _705 + _477;
        float _797 = _709 + _478;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _762;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _766;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _770;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_762 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_766 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_770 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_476, _477, _478), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3615 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_476, _477, _478), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3648 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_476, _477, _478), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3681 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1039 = _867;
        _1040 = _866;
        _1041 = _878;
        _1042 = _877;
        _1043 = _876;
        _1044 = _888;
        _1045 = _887;
        _1046 = _886;
        _1047 = _901;
        _1048 = _900;
        _1049 = _899;
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _1038;
        _1039 = _1038;
        _1040 = _1038;
        _1041 = _1038;
        _1042 = _1038;
        _1043 = _1038;
        _1044 = _1038;
        _1045 = _1038;
        _1046 = _1038;
        _1047 = _1038;
        _1048 = _1038;
        _1049 = _1038;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_709, cbModelParam._m0[30u].z, fma(_705, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _701));
        float _1080 = fma(_709, cbModelParam._m0[31u].z, fma(_705, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _701));
        float _1084 = fma(_709, cbModelParam._m0[32u].z, fma(_705, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _701));
        float _1107 = _701 + _476;
        float _1108 = _705 + _477;
        float _1109 = _709 + _478;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_476, _477, _478), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3744 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_476, _477, _478), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3777 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_476, _477, _478), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3810 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1038;
        _1346 = _1038;
        _1347 = _1038;
        _1348 = _1038;
        _1349 = _1038;
        _1350 = _1038;
        _1351 = _1038;
        _1352 = _1038;
        _1353 = _1038;
        _1354 = _1038;
        _1355 = _1038;
        _1356 = _1038;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1050)) + _1050;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1051)) + _1051;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1052)) + _1052;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _648 * 0.5;
    float _1414 = _649 * 0.5;
    float _1415 = _650 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1037, _1041, _1044, _1047));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _479);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_709, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_709, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_709, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_650, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648));
        float _1545 = fma(_650, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648));
        float _1548 = fma(_650, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1576 = frontier_phi_19_17_ladder;
        }
        float _1799;
        if (_1545 > 0.0)
        {
            _1799 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1799 = frontier_phi_28_24_ladder;
        }
        float _2045;
        if (_1548 > 0.0)
        {
            _2045 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2045 = frontier_phi_40_35_ladder;
        }
        float _2047 = isnan(_1799) ? _1576 : (isnan(_1576) ? _1799 : min(_1576, _1799));
        float _2048 = isnan(_2045) ? _2047 : (isnan(_2047) ? _2045 : min(_2047, _2045));
        float _2052 = (_2048 * _1542) + _1531;
        float _2053 = (_2048 * _1545) + _1535;
        float _2054 = (_2048 * _1548) + _1539;
        float _2055 = _2048 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2055;
        float _2059 = _2055 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 > _2059) || ((_2053 < _2057) || ((_2052 < _2057) || (_2052 > _2059))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2178 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2054, cbModelParam._m0[9u].z, fma(_2053, cbModelParam._m0[9u].y, _2052 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2054, cbModelParam._m0[10u].z, fma(_2053, cbModelParam._m0[10u].y, _2052 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2054, cbModelParam._m0[11u].z, fma(_2053, cbModelParam._m0[11u].y, _2052 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_18_40_ladder = _2178.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2178.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2178.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_18_40_ladder_2;
        _1566 = frontier_phi_18_40_ladder_1;
        _1568 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_648, _649, _650), _1482);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _479);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_709, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_709, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_709, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_650, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648));
        float _1642 = fma(_650, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648));
        float _1645 = fma(_650, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648));
        float _1804;
        if (_1639 > 0.0)
        {
            _1804 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1804 = frontier_phi_30_26_ladder;
        }
        float _2072;
        if (_1642 > 0.0)
        {
            _2072 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2072 = frontier_phi_42_37_ladder;
        }
        float _2277;
        if (_1645 > 0.0)
        {
            _2277 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2277 = frontier_phi_51_48_ladder;
        }
        float _2279 = isnan(_2072) ? _1804 : (isnan(_1804) ? _2072 : min(_1804, _2072));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1639) + _1628;
        float _2285 = (_2280 * _1642) + _1632;
        float _2286 = (_2280 * _1645) + _1636;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2287;
        float _2290 = _2287 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2286 > _2290) || ((_2286 < _2288) || ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 < _2288) || (_2284 > _2290))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2286, cbModelParam._m0[17u].z, fma(_2285, cbModelParam._m0[17u].y, _2284 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2286, cbModelParam._m0[18u].z, fma(_2285, cbModelParam._m0[18u].y, _2284 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2286, cbModelParam._m0[19u].z, fma(_2285, cbModelParam._m0[19u].y, _2284 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_27_51_ladder = _2485.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2485.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2485.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_27_51_ladder_2;
        _1666 = frontier_phi_27_51_ladder_1;
        _1668 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_648, _649, _650), _1573);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1680 = ((((1.0 - _669) * ((_656 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_669 * _656)) * _640;
    float _1681 = _1680 * ((cbModelParam._m0[1u].w * (_1664 - _1564)) + _1564);
    float _1682 = _1680 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1683 = _1680 * ((cbModelParam._m0[1u].w * (_1668 - _1568)) + _1568);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    vec4 _1700 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_577, _578));
    float _1702 = _1700.w;
    float _1714 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1702);
    float _1715 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1702);
    float _1716 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1702);
    uvec4 _1720 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1722 = _1720.x * 14u;
    uint _1723 = _1722 + 13u;
    float _1730 = _640 + (-1.0);
    float _1735 = (cbLight._m0[_1723].x * _1730) + 1.0;
    float _1736 = (cbLight._m0[_1723].y * _1730) + 1.0;
    float _1737 = (cbLight._m0[_1723].z * _1730) + 1.0;
    float _1738 = (cbLight._m0[_1723].w * _1730) + 1.0;
    uint _1739 = _1722 + 5u;
    float _1745 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1749 = _1722 + 4u;
    float _1758 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1762 = _1722 | 1u;
    float _1773 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_476, _477, _478));
    float _1776 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_476, _477, _478));
    float _3946 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _3957 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1781 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1783 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.3183098733425140380859375;
    float _1790 = ((cbLight._m0[_1739].x * _1745) * _1783) + (((cbLight._m0[_1749].x * _1714) * _1758) * _1781);
    float _1791 = ((_1745 * cbLight._m0[_1739].y) * _1783) + (((cbLight._m0[_1749].y * _1715) * _1758) * _1781);
    float _1792 = ((_1745 * cbLight._m0[_1739].z) * _1783) + (((cbLight._m0[_1749].z * _1716) * _1758) * _1781);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1722 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1790;
        _1811 = _1791;
        _1813 = _1792;
    }
    else
    {
        uint _1817 = _1722 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1722 + 2u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3968 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1836 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1792;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2016 = _1722 + 7u;
        float _2032 = (dot(vec3(cbLight._m0[_1722 + 3u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _3984 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2035 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1854 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1809;
        _1856 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1811;
        _1858 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1813;
    }
    uint _1861 = _1722 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _479) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1722].x + _560;
    float _1877 = cbLight._m0[_1722].y + _561;
    float _1878 = cbLight._m0[_1722].z + _562;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1722].xyz));
    float _4000 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _1890 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1891 = dot(vec3(_476, _477, _478), vec3(_1883, _1884, _1885));
    float _4022 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1883, _1884, _1885));
    float _4033 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1914 = (exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1915 = 1.0 - _1875;
    float _1926 = (0.5 / (((_1890 * ((_1889 * _1915) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1915) + _1875) * _1889))) * _1889;
    float _4044 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1942 = _1722 + 9u;
    float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _479) * 0.949999988079071044921875);
    float _1954 = _1953 * _1953;
    float _1955 = cbLight._m0[_1762].x + _560;
    float _1956 = cbLight._m0[_1762].y + _561;
    float _1957 = cbLight._m0[_1762].z + _562;
    float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
    float _1962 = _1961 * _1955;
    float _1963 = _1961 * _1956;
    float _1964 = _1961 * _1957;
    float _1965 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1762].xyz));
    float _4055 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1969 = dot(vec3(_476, _477, _478), vec3(_1962, _1963, _1964));
    float _4066 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1973 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1962, _1963, _1964));
    float _4077 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1977 = _1954 * _1954;
    float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = 1.0 - _1954;
    float _2001 = (0.5 / (((_1890 * ((_1968 * _1991) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1991) + _1954) * _1968))) * _1968;
    float _4088 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
    float _2013 = (((_1990 * cbLight._m0[_1942].x) * _2003) * _1745) + ((((cbLight._m0[_1861].x * _1714) * _1914) * _1928) * _1758);
    float _2014 = (((_1990 * cbLight._m0[_1942].y) * _2003) * _1745) + ((((cbLight._m0[_1861].y * _1715) * _1914) * _1928) * _1758);
    float _2015 = (((_1990 * cbLight._m0[_1942].z) * _2003) * _1745) + ((((cbLight._m0[_1861].z * _1716) * _1914) * _1928) * _1758);
    float _2077;
    float _2079;
    float _2081;
    if (_1798)
    {
        _2077 = _2013;
        _2079 = _2014;
        _2081 = _2015;
    }
    else
    {
        uint _2083 = _1722 + 2u;
        uint _2087 = _1722 + 10u;
        float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _479) * 0.949999988079071044921875);
        float _2102 = _2101 * _2101;
        float _2103 = cbLight._m0[_2083].x + _560;
        float _2104 = cbLight._m0[_2083].y + _561;
        float _2105 = cbLight._m0[_2083].z + _562;
        float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
        float _2110 = _2109 * _2103;
        float _2111 = _2109 * _2104;
        float _2112 = _2109 * _2105;
        float _2113 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2083].xyz));
        float _4099 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2117 = dot(vec3(_476, _477, _478), vec3(_2110, _2111, _2112));
        float _4110 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2121 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2110, _2111, _2112));
        float _4121 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2125 = _2102 * _2102;
        float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
        float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2139 = 1.0 - _2102;
        float _2149 = (0.5 / (((_1890 * ((_2116 * _2139) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2139) + _2102) * _2116))) * _2116;
        float _4132 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2151 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
        float _2152 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _2077 = (((_2138 * cbLight._m0[_2087].x) * _2151) * _2152) + _2013;
        _2079 = (((_2138 * cbLight._m0[_2087].y) * _2151) * _2152) + _2014;
        _2081 = (((_2138 * cbLight._m0[_2087].z) * _2151) * _2152) + _2015;
    }
    float _2187;
    float _2189;
    float _2191;
    if (_1816)
    {
        _2187 = _2077;
        _2189 = _2079;
        _2191 = _2081;
    }
    else
    {
        uint _2198 = _1722 + 3u;
        uint _2202 = _1722 + 11u;
        float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _479) * 0.949999988079071044921875);
        float _2217 = _2216 * _2216;
        float _2218 = cbLight._m0[_2198].x + _560;
        float _2219 = cbLight._m0[_2198].y + _561;
        float _2220 = cbLight._m0[_2198].z + _562;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2225 = _2224 * _2218;
        float _2226 = _2224 * _2219;
        float _2227 = _2224 * _2220;
        float _2228 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2198].xyz));
        float _4148 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2232 = dot(vec3(_476, _477, _478), vec3(_2225, _2226, _2227));
        float _4159 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2236 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2225, _2226, _2227));
        float _4170 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2240 = _2217 * _2217;
        float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
        float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2254 = 1.0 - _2217;
        float _2264 = (0.5 / (((_1890 * ((_2231 * _2254) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2254) + _2217) * _2231))) * _2231;
        float _4181 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2187 = (((_2253 * cbLight._m0[_2202].x) * _2266) * _2267) + _2077;
        _2189 = (((_2253 * cbLight._m0[_2202].y) * _2266) * _2267) + _2079;
        _2191 = (((_2253 * cbLight._m0[_2202].z) * _2266) * _2267) + _2081;
    }
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_1720.y == 0u)
    {
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2342;
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2342;
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2342;
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.x;
        uint _2369 = uint((float(_2357.y) * floor(float(uint(cbSceneParam._m0[85u].y * _578) / _2358))) + floor(float(uint(cbSceneParam._m0[85u].x * _577) / _2358)));
        float _2379 = (log2(_2345 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2380 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        uint _2383 = uint(isnan(14.0) ? _2380 : (isnan(_2380) ? 14.0 : min(_2380, 14.0)));
        uvec4 _2388 = texelFetch(g_lightClusterGridBuffer, int(((_2383 << 2u) + (_2369 << 6u)) >> 2u));
        uint _2389 = _2388.x;
        uint _2390 = _2357.z;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        if (((((1u << ((_2390 >> 4u) & 15u)) + 4294967295u) & _2389) == 0u) || ((_2390 & 240u) == 0u))
        {
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
        }
        else
        {
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            uint _2649 = 0u;
            uint _2658;
            bool _2659;
            for (;;)
            {
                _2658 = texelFetch(g_lightClassification, int((((_2383 << 5u) + (_2369 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                _2659 = _2658 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2659)
                {
                    frontier_phi_68_pred = _2643;
                    frontier_phi_68_pred_1 = _2648;
                    frontier_phi_68_pred_2 = _2647;
                    frontier_phi_68_pred_3 = _2646;
                    frontier_phi_68_pred_4 = _2645;
                    frontier_phi_68_pred_5 = _2644;
                }
                else
                {
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    uint _2794;
                    _2788 = _2643;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2658;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    for (;;)
                    {
                        uint _2798 = uint(findLSB(_2794)) + (_2649 << 5u);
                        uint _2795 = (_2794 + 4294967295u) & _2794;
                        uint _2800 = _2798 * 48u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 3u)).x));
                        uint _2820 = (_2798 * 48u) + 4u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2839 = (_2798 * 48u) + 8u;
                        vec3 _2850 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x));
                        float _2854 = _2814.x - _2343;
                        float _2855 = _2814.y - _2344;
                        float _2856 = _2814.z - _2345;
                        float _2857 = dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856));
                        float _2860 = inversesqrt(_2857);
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2864 = dot(vec3(_596, _599, _602), vec3(_2861, _2862, _2863));
                        float _2869 = 1.0 - (_2857 * _2814.w);
                        float _4207 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2871 = sqrt(_2857) * _2833.w;
                        float _2874 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2864) + _2875;
                        float _2881 = _2871 * _2871;
                        float _2885 = ((isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))) * _2870) / ((_2881 * 0.699999988079071044921875) + 1.0);
                        float _2889 = (-0.0) - _2343;
                        float _2890 = (-0.0) - _2344;
                        float _2891 = (-0.0) - _2345;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2906 = exp2(log2(1.0 / ((_2881 * 3.5) + 5.0)) * 0.25);
                        float _2907 = 1.0 - _656;
                        float _2914 = sqrt(1.0 - ((1.0 - (_2907 * _2907)) * (1.0 - (_2906 * _2906))));
                        float _2915 = _2914 * _2914;
                        float _2916 = _2915 * _2915;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2927 = dot(vec3(_596, _599, _602), vec3(_2896, _2897, _2898));
                        float _4223 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2931 = dot(vec3(_596, _599, _602), vec3(_2923 * _2917, _2923 * _2918, _2923 * _2919));
                        float _4234 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2938 = ((_2934 * _2934) * (_2916 + (-1.0))) + 1.0;
                        float _2939 = _2874 * _2915;
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2864) + _2940;
                        float _4245 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2945 = 1.0 - _2915;
                        float _2955 = (0.5 / (((_2944 * ((_2930 * _2945) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2944 * _2945) + _2915) * _2930))) * _2944;
                        float _4256 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2966 = (((_2916 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_2938 * _2938) * ((_2881 * 2.1991131305694580078125) + 3.141590118408203125))) * _2870;
                        _2718 = (_2885 * _2833.x) + _2791;
                        _2719 = (_2885 * _2833.y) + _2792;
                        _2720 = (_2885 * _2833.z) + _2793;
                        _2715 = (_2966 * _2850.x) + _2788;
                        _2716 = (_2966 * _2850.y) + _2789;
                        _2717 = (_2966 * _2850.z) + _2790;
                        if (_2795 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2788 = _2715;
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2795;
                        }
                    }
                    frontier_phi_68_pred = _2715;
                    frontier_phi_68_pred_1 = _2720;
                    frontier_phi_68_pred_2 = _2719;
                    frontier_phi_68_pred_3 = _2718;
                    frontier_phi_68_pred_4 = _2717;
                    frontier_phi_68_pred_5 = _2716;
                }
                _2491 = frontier_phi_68_pred;
                _2501 = frontier_phi_68_pred_1;
                _2499 = frontier_phi_68_pred_2;
                _2497 = frontier_phi_68_pred_3;
                _2495 = frontier_phi_68_pred_4;
                _2493 = frontier_phi_68_pred_5;
                uint _2650 = _2649 + 1u;
                if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2643 = _2491;
                    _2644 = _2493;
                    _2645 = _2495;
                    _2646 = _2497;
                    _2647 = _2499;
                    _2648 = _2501;
                    _2649 = _2650;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
        }
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.z;
        uint _2507 = (_2505 >> 8u) & 15u;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((4294967295u << _2507) & _2389) == 0u)
        {
            _2611 = _2490;
            _2613 = _2492;
            _2615 = _2494;
            _2617 = _2496;
            _2619 = _2498;
            _2621 = _2500;
        }
        else
        {
            float _2636 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
            float _2637 = _2636 * _2343;
            float _2638 = _2636 * _2344;
            float _2639 = _2636 * _2345;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2507 < ((_2505 >> 12u) & 15u))
            {
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2771 = _2490;
                float _2772 = _2492;
                float _2773 = _2494;
                float _2774 = _2496;
                float _2775 = _2498;
                float _2776 = _2500;
                uint _2777 = _2507;
                uint _2786;
                bool _2787;
                for (;;)
                {
                    _2786 = texelFetch(g_lightClassification, int((((_2383 << 5u) + (_2369 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                    _2787 = _2786 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2787)
                    {
                        frontier_phi_79_pred = _2776;
                        frontier_phi_79_pred_1 = _2775;
                        frontier_phi_79_pred_2 = _2774;
                        frontier_phi_79_pred_3 = _2773;
                        frontier_phi_79_pred_4 = _2772;
                        frontier_phi_79_pred_5 = _2771;
                    }
                    else
                    {
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2993 = _2771;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        uint _2999 = _2786;
                        uint _3000;
                        vec4 _3025;
                        float _3026;
                        vec4 _3041;
                        vec3 _3053;
                        vec4 _3068;
                        vec4 _3084;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3010 = ((_2777 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2999));
                            _3000 = (_2999 + 4294967295u) & _2999;
                            uint _3012 = _3010 * 40u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3026 = _3025.w;
                            uint _3028 = (_3010 * 40u) + 4u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3043 = (_3010 * 40u) + 8u;
                            _3053 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x));
                            uint _3055 = (_3010 * 40u) + 16u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3071 = (_3010 * 40u) + 20u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3010 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3010 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2345, _3118.z, fma(_2344, _3118.y, _3118.x * _2343)) + _3118.w;
                            _3131 = !((fma(_2345, _3099.z, fma(_2344, _3099.y, _3099.x * _2343)) + _3099.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3025.x - _2343;
                                float _3159 = _3025.y - _2344;
                                float _3160 = _3025.z - _2345;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3026 * _3026));
                                float _4267 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3176 = sqrt(_3161) * _3041.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_596, _599, _602))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2345, _3068.z, fma(_2344, _3068.y, _3068.x * _2343)) + _3068.w) / _3130;
                                float _3190 = (fma(_2345, _3084.z, fma(_2344, _3084.y, _3084.x * _2343)) + _3084.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4283 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _656;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2637;
                                float _3220 = _3166 - _2638;
                                float _3221 = _3167 - _2639;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2637, (-0.0) - _2638, (-0.0) - _2639));
                                float _4294 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3233 = dot(vec3(_596, _599, _602), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4305 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_596, _599, _602), vec3(_3165, _3166, _3167))) + _3242;
                                float _4316 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4327 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3196 * _3041.y;
                                frontier_phi_85_pred_1 = _3196 * _3041.x;
                                frontier_phi_85_pred_2 = _3270 * _3053.z;
                                frontier_phi_85_pred_3 = _3270 * _3053.y;
                                frontier_phi_85_pred_4 = _3270 * _3053.x;
                                frontier_phi_85_pred_5 = _3196 * _3041.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3278 = frontier_phi_85_pred;
                            _3277 = frontier_phi_85_pred_1;
                            _3276 = frontier_phi_85_pred_2;
                            _3275 = frontier_phi_85_pred_3;
                            _3274 = frontier_phi_85_pred_4;
                            _3279 = frontier_phi_85_pred_5;
                            _2983 = _3277 + _2996;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2980 = _3274 + _2993;
                            _2981 = _3275 + _2994;
                            _2982 = _3276 + _2995;
                            if (_3000 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _3000;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2985;
                        frontier_phi_79_pred_1 = _2984;
                        frontier_phi_79_pred_2 = _2983;
                        frontier_phi_79_pred_3 = _2982;
                        frontier_phi_79_pred_4 = _2981;
                        frontier_phi_79_pred_5 = _2980;
                    }
                    _2622 = frontier_phi_79_pred;
                    _2620 = frontier_phi_79_pred_1;
                    _2618 = frontier_phi_79_pred_2;
                    _2616 = frontier_phi_79_pred_3;
                    _2614 = frontier_phi_79_pred_4;
                    _2612 = frontier_phi_79_pred_5;
                    uint _2778 = _2777 + 1u;
                    if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2771 = _2612;
                        _2772 = _2614;
                        _2773 = _2616;
                        _2774 = _2618;
                        _2775 = _2620;
                        _2776 = _2622;
                        _2777 = _2778;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2616;
                frontier_phi_60_61_ladder_1 = _2622;
                frontier_phi_60_61_ladder_2 = _2620;
                frontier_phi_60_61_ladder_3 = _2618;
                frontier_phi_60_61_ladder_4 = _2614;
                frontier_phi_60_61_ladder_5 = _2612;
            }
            else
            {
                frontier_phi_60_61_ladder = _2494;
                frontier_phi_60_61_ladder_1 = _2500;
                frontier_phi_60_61_ladder_2 = _2498;
                frontier_phi_60_61_ladder_3 = _2496;
                frontier_phi_60_61_ladder_4 = _2492;
                frontier_phi_60_61_ladder_5 = _2490;
            }
            _2611 = frontier_phi_60_61_ladder_5;
            _2613 = frontier_phi_60_61_ladder_4;
            _2615 = frontier_phi_60_61_ladder;
            _2617 = frontier_phi_60_61_ladder_3;
            _2619 = frontier_phi_60_61_ladder_2;
            _2621 = frontier_phi_60_61_ladder_1;
        }
        float _2626 = isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0));
        _2402 = (_2626 * _2617) + _1854;
        _2404 = (_2626 * _2619) + _1856;
        _2406 = (_2626 * _2621) + _1858;
        _2408 = ((_2611 * 0.039999999105930328369140625) * _2626) + _2187;
        _2410 = ((_2613 * 0.039999999105930328369140625) * _2626) + _2189;
        _2412 = ((_2615 * 0.039999999105930328369140625) * _2626) + _2191;
    }
    else
    {
        _2402 = _1854;
        _2404 = _1856;
        _2406 = _1858;
        _2408 = _2187;
        _2410 = _2189;
        _2412 = _2191;
    }
    float _4343 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4354 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4365 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2429 = ((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2402 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _640))) + ((_2408 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    float _2430 = ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2404 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _640))) + ((_2410 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    float _2431 = ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2406 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _640))) + ((_2412 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    uint _2432 = _228 + 6u;
    float _2440 = _577 / cbSceneParam._m0[86u].x;
    float _2441 = _578 / cbSceneParam._m0[86u].y;
    vec4 _2455 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, (log2((isnan(cbSceneParam._m0[77u].w) ? _501 : (isnan(_501) ? cbSceneParam._m0[77u].w : min(_501, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2457 = _2455.x;
    float _2458 = _2455.y;
    float _2459 = _2455.z;
    float _2460 = _2455.w;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_501 > cbSceneParam._m0[78u].w)
    {
        float _2515 = isnan(_501) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _501 : min(cbSceneParam._m0[80u].w, _501));
        float _2516 = _2515 / _501;
        float _2527 = _2516 * _553;
        float _2528 = _554 * _2516;
        float _2529 = (-0.0) - _2528;
        float _2531 = _2516 * _555;
        float _2533 = (cbSceneParam._m0[77u].w * _2529) / _2515;
        float _2534 = _2533 + cbSceneParam._m0[79u].w;
        float _2535 = cbSceneParam._m0[79u].w - _2528;
        float _2541 = sqrt(((_2527 * _2527) + (_2528 * _2528)) + (_2531 * _2531));
        float _2544 = (1.0 - (cbSceneParam._m0[77u].w / _2515)) * _2541;
        float _2549 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2551 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2728;
        if (abs((_2529 - _2533) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2728 = ((((_2534 > 0.0) ? exp2(_2549 * _2534) : (2.0 - exp2(_2551 * _2534))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2544;
        }
        else
        {
            float _2672 = 1.0 / cbSceneParam._m0[80u].x;
            float _2673 = isnan(_2535) ? _2534 : (isnan(_2534) ? _2535 : max(_2534, _2535));
            float _2674 = isnan(_2535) ? _2534 : (isnan(_2534) ? _2535 : min(_2534, _2535));
            float _2683 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : min(_2673, 0.0));
            float _2684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : min(_2674, 0.0));
            _2728 = ((abs(_2541 / _2529) * cbSceneParam._m0[80u].y) * ((((_2683 - _2684) * 2.0) - ((exp2(_2549 * (isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0)))) - exp2(_2549 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))))) * _2672)) - ((exp2(_2551 * _2683) - exp2(_2551 * _2684)) * _2672))) + (_2544 * cbSceneParam._m0[80u].z);
        }
        vec4 _2730 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, 1.0), 0.0);
        float _2739 = exp2((_2728 * (-1.44269502162933349609375)) * (1.0 - _2730.w));
        float _2740 = log2(_2739);
        float _2756 = log2(_2460);
        _2553 = (exp2(_2756 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].x)) * _2730.x) / cbSceneParam._m0[78u].x)) + _2457;
        _2555 = (exp2(_2756 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].y)) * _2730.y) / cbSceneParam._m0[78u].y)) + _2458;
        _2557 = (exp2(_2756 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].z)) * _2730.z) / cbSceneParam._m0[78u].z)) + _2459;
        _2559 = _2739 * _2460;
    }
    else
    {
        _2553 = _2457;
        _2555 = _2458;
        _2557 = _2459;
        _2559 = _2460;
    }
    bool _2766;
    vec4 _2569;
    vec4 _2591;
    float _2593;
    float _2597;
    float _2598;
    float _2599;
    float _2600;
    bool _2610;
    for (;;)
    {
        _2569 = cbMatDynParam._m0[0u];
        float _2571 = roundEven(_2569.y);
        bool _2572 = _2571 == 3.0;
        float _2573 = log2(_2559);
        float _2580 = exp2(_2573 * cbSceneParam._m0[78u].x) * _2429;
        float _2581 = exp2(_2573 * cbSceneParam._m0[78u].y) * _2430;
        float _2582 = exp2(_2573 * cbSceneParam._m0[78u].z) * _2431;
        float _2589 = _566 + (-0.5);
        _2591 = cbMtdParam._m0[1u];
        _2593 = _2591.y * _2589;
        float _2596 = (_2571 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2597 = _2596 * (_2572 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2553)));
        _2598 = _2596 * (_2572 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2555)));
        _2599 = _2596 * (_2572 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2557)));
        _2600 = _2589 * 0.999000012874603271484375;
        _2610 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2610)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2600) < 0.5)
            {
                _2766 = true;
                break;
            }
        }
        uint _2707 = _615 + uint(_2569.w);
        if ((cbInstanceData._m0[_2707].w < 1.0) && ((cbInstanceData._m0[_2707].w + _2600) < 0.5))
        {
            _2766 = true;
            break;
        }
        if ((_2593 + 1.0) < _2591.x)
        {
            _2766 = true;
            break;
        }
        _2766 = false;
        break;
    }
    float _2971;
    if (_2766)
    {
        discard_state = true;
        _2971 = 0.0;
    }
    else
    {
        _2971 = cbInstanceData._m0[_2432].w;
    }
    SV_Target.x = _2597;
    SV_Target.y = _2598;
    SV_Target.z = _2599;
    SV_Target.w = _2971;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2432].w;
    discard_exit();
}


