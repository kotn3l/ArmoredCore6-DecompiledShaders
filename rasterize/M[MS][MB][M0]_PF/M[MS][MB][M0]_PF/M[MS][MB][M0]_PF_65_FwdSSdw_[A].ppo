#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1150;
float _3534;
float _3535;
float _3536;
float _3537;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3546 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3557 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3568 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _392 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_379 - _392) * cbMtdParam._m0[24u].x) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3579 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _417 = (_410 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _418 = (_410 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _419 = (_410 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _423 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _417;
    float _426 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _418;
    float _429 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _419;
    float _436 = ((_417 - _423) * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) + _423;
    float _437 = ((_418 - _426) * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) + _426;
    float _438 = ((_419 - _429) * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) + _429;
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _495 = _493.x;
    float _496 = _493.y;
    float _497 = _493.z;
    float _506 = ((_476.z - _497) * _410) + _497;
    float _509 = ((((_476.x - _495) * _410) + _495) * 2.0) + (-1.0);
    float _510 = ((((_476.y - _496) * _410) + _496) * 2.0) + (-1.0);
    float _511 = dot(vec2(_509, _510), vec2(_509, _510));
    float _3590 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _516 = sqrt(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))));
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _550 = (_509 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_451.x * 2.0) + (-1.0)))) + (((_538.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _551 = (_510 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_451.y * 2.0) + (-1.0)))) + (((_538.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _556 = (((_451.z - _506) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _506;
    float _560 = ((_538.z - _556) * cbMtdParam._m0[19u].w) + _556;
    float _562 = cbMtdParam._m0[22u].x + _538.w;
    float _564 = gl_FragCoord.x * 0.125;
    float _566 = gl_FragCoord.y * 0.125;
    float _577 = fma(_516, _226 * NORMAL.x, fma(_551, _233 * TANGENT.x, (_219 * _211) * _550));
    float _580 = fma(_516, _226 * NORMAL.y, fma(_551, _233 * TANGENT.y, (_219 * _212) * _550));
    float _583 = fma(_516, _226 * NORMAL.z, fma(_551, _233 * TANGENT.z, (_219 * _213) * _550));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3601 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _591 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3623 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3634 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3645 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_564, _566)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _665 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _655);
    float _666 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _655);
    float _667 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _655);
    float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
    float _672 = _665 * _671;
    float _673 = _666 * _671;
    float _674 = _667 * _671;
    vec4 _676 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_564, _566));
    float _678 = _676.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _832 = sqrt(((_665 * _665) + (_666 * _666)) + (_667 * _667));
        float _838 = (cbMatDynParam._m0[5u].x * _832) + cbMatDynParam._m0[5u].y;
        float _3656 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _843 = (cbMatDynParam._m0[5u].z * _832) + cbMatDynParam._m0[5u].w;
        float _3667 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) - _839)) + _839) < ((_678 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _689 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _690 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _708 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _711 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _714 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    uint _727 = _260 + 9u;
    uint _728 = _727 + uint(cbMatDynParam._m0[0u].w);
    float _734 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_728].x;
    float _735 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_728].y;
    float _736 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_728].z;
    float _3678 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    vec4 _748 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _689, cbSceneParam._m0[86u].y * _690));
    float _752 = ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * TEXCOORD_5.w) * _748.x;
    float _753 = dot(vec3(_588, _589, _590), vec3(_672, _673, _674));
    float _756 = _753 * 2.0;
    float _760 = (_756 * _588) - _672;
    float _761 = (_756 * _589) - _673;
    float _762 = (_756 * _590) - _674;
    float _766 = abs(dot(vec3(_672, _673, _674), vec3(_588, _589, _590)));
    float _3711 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _768 = sqrt(_591);
    float _781 = exp2((_768 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_768 * 3.0));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1149;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _874 = fma(_821, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813));
        float _878 = fma(_821, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813));
        float _882 = fma(_821, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813));
        float _907 = _813 + _588;
        float _908 = _817 + _589;
        float _909 = _821 + _590;
        float _919 = fma(_909, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907)) - _874;
        float _920 = fma(_909, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907)) - _878;
        float _921 = fma(_909, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907)) - _882;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_874 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_878 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[34u].z) + ((((((_882 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _977 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_943.x + (-0.5));
        float _979 = _977 * (_943.y + (-0.5));
        float _980 = _977 * (_943.z + (-0.5));
        float _987 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_950.x + (-0.5));
        float _989 = _987 * (_950.y + (-0.5));
        float _990 = _987 * (_950.z + (-0.5));
        float _997 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_957.x + (-0.5));
        float _999 = _997 * (_957.y + (-0.5));
        float _1000 = _997 * (_957.z + (-0.5));
        float _1007 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_964.x + (-0.5));
        float _1009 = _1007 * (_964.y + (-0.5));
        float _1010 = _1007 * (_964.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1031 = (dot(vec3(_588, _589, _590), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1041 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3759 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1043 + 1.0))) + _1048) * _1011;
        float _1058 = _979 * 0.5;
        float _1059 = _989 * 0.5;
        float _1060 = _999 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_588, _589, _590), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3792 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1085 + 1.0))) + _1090) * _1012;
        float _1100 = _980 * 0.5;
        float _1101 = _990 * 0.5;
        float _1102 = _1000 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_588, _589, _590), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3825 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1127 + 1.0))) + _1132) * _1013;
        _1149 = _980;
        _1151 = _979;
        _1152 = _978;
        _1153 = _990;
        _1154 = _989;
        _1155 = _988;
        _1156 = _1000;
        _1157 = _999;
        _1158 = _998;
        _1159 = _1013;
        _1160 = _1012;
        _1161 = _1011;
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _1150;
        _1151 = _1150;
        _1152 = _1150;
        _1153 = _1150;
        _1154 = _1150;
        _1155 = _1150;
        _1156 = _1150;
        _1157 = _1150;
        _1158 = _1150;
        _1159 = _1150;
        _1160 = _1150;
        _1161 = _1150;
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
    }
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1188 = fma(_821, cbModelParam._m0[30u].z, fma(_817, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _813));
        float _1192 = fma(_821, cbModelParam._m0[31u].z, fma(_817, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _813));
        float _1196 = fma(_821, cbModelParam._m0[32u].z, fma(_817, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _813));
        float _1219 = _813 + _588;
        float _1220 = _817 + _589;
        float _1221 = _821 + _590;
        float _1231 = fma(_1221, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219)) - _1188;
        float _1232 = fma(_1221, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219)) - _1192;
        float _1233 = fma(_1221, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219)) - _1196;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1188 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1192 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[35u].z) + ((((((_1196 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1287 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1254.x + (-0.5));
        float _1289 = _1287 * (_1254.y + (-0.5));
        float _1290 = _1287 * (_1254.z + (-0.5));
        float _1297 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1261.x + (-0.5));
        float _1299 = _1297 * (_1261.y + (-0.5));
        float _1300 = _1297 * (_1261.z + (-0.5));
        float _1307 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1268.x + (-0.5));
        float _1309 = _1307 * (_1268.y + (-0.5));
        float _1310 = _1307 * (_1268.z + (-0.5));
        float _1317 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1275.x + (-0.5));
        float _1319 = _1317 * (_1275.y + (-0.5));
        float _1320 = _1317 * (_1275.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_588, _589, _590), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3888 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1351 + 1.0))) + _1356) * _1321;
        float _1366 = _1289 * 0.5;
        float _1367 = _1299 * 0.5;
        float _1368 = _1309 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_588, _589, _590), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3921 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1393 + 1.0))) + _1398) * _1322;
        float _1408 = _1290 * 0.5;
        float _1409 = _1300 * 0.5;
        float _1410 = _1310 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_588, _589, _590), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3954 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1435 + 1.0))) + _1440) * _1323;
        _1457 = _1290;
        _1458 = _1289;
        _1459 = _1288;
        _1460 = _1300;
        _1461 = _1299;
        _1462 = _1298;
        _1463 = _1310;
        _1464 = _1309;
        _1465 = _1308;
        _1466 = _1323;
        _1467 = _1322;
        _1468 = _1321;
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1150;
        _1458 = _1150;
        _1459 = _1150;
        _1460 = _1150;
        _1461 = _1150;
        _1462 = _1150;
        _1463 = _1150;
        _1464 = _1150;
        _1465 = _1150;
        _1466 = _1150;
        _1467 = _1150;
        _1468 = _1150;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1162)) + _1162;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1163)) + _1163;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1164)) + _1164;
    float _1504 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1481));
    float _1525 = _760 * 0.5;
    float _1526 = _761 * 0.5;
    float _1527 = _762 * 0.5;
    float _1528 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1531 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1534 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1568;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1541 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1149, _1153, _1156, _1159));
        float _1545 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1549 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1556 = dot(vec4(cbModelParam._m0[39u]), vec4(_1525, _1526, _1527, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1579;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1570 = dot(vec4(cbModelParam._m0[40u]), vec4(_1525, _1526, _1527, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1583 = (_1579 * cbModelParam._m0[1u].x) + (_1568 * (1.0 - cbModelParam._m0[1u].x));
    float _1593 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1593 : min(cbModelParam._m0[25u].z, _1593));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_821, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_821, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_821, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_762, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760));
        float _1657 = fma(_762, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760));
        float _1660 = fma(_762, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1688 = frontier_phi_19_17_ladder;
        }
        float _1911;
        if (_1657 > 0.0)
        {
            _1911 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1911 = frontier_phi_28_24_ladder;
        }
        float _2157;
        if (_1660 > 0.0)
        {
            _2157 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2157 = frontier_phi_40_35_ladder;
        }
        float _2159 = isnan(_1911) ? _1688 : (isnan(_1688) ? _1911 : min(_1688, _1911));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1654) + _1643;
        float _2165 = (_2160 * _1657) + _1647;
        float _2166 = (_2160 * _1660) + _1651;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1594);
            frontier_phi_18_40_ladder = _2290.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2290.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2290.x * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_18_40_ladder_2;
        _1678 = frontier_phi_18_40_ladder_1;
        _1680 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_760, _761, _762), _1594);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1740 = fma(_821, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813)) + cbModelParam._m0[21u].w;
        float _1744 = fma(_821, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813)) + cbModelParam._m0[22u].w;
        float _1748 = fma(_821, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813)) + cbModelParam._m0[23u].w;
        float _1751 = fma(_762, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760));
        float _1754 = fma(_762, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760));
        float _1757 = fma(_762, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760));
        float _1916;
        if (_1751 > 0.0)
        {
            _1916 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1916 = frontier_phi_30_26_ladder;
        }
        float _2184;
        if (_1754 > 0.0)
        {
            _2184 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2184 = frontier_phi_42_37_ladder;
        }
        float _2389;
        if (_1757 > 0.0)
        {
            _2389 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2389 = frontier_phi_51_48_ladder;
        }
        float _2391 = isnan(_2184) ? _1916 : (isnan(_1916) ? _2184 : min(_1916, _2184));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1751) + _1740;
        float _2397 = (_2392 * _1754) + _1744;
        float _2398 = (_2392 * _1757) + _1748;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2399;
        float _2402 = _2399 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2398 > _2402) || ((_2398 < _2400) || ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 < _2400) || (_2396 > _2402))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2398, cbModelParam._m0[17u].z, fma(_2397, cbModelParam._m0[17u].y, _2396 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2398, cbModelParam._m0[18u].z, fma(_2397, cbModelParam._m0[18u].y, _2396 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2398, cbModelParam._m0[19u].z, fma(_2397, cbModelParam._m0[19u].y, _2396 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_27_51_ladder = _2597.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2597.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2597.x * cbModelParam._m0[1u].z;
        }
        _1776 = frontier_phi_27_51_ladder_2;
        _1778 = frontier_phi_27_51_ladder_1;
        _1780 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_760, _761, _762), _1685);
        _1776 = _1760.x * cbModelParam._m0[1u].z;
        _1778 = _1760.y * cbModelParam._m0[1u].z;
        _1780 = _1760.z * cbModelParam._m0[1u].z;
    }
    float _1792 = ((((1.0 - _781) * ((_768 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_781 * _768)) * _752;
    float _1793 = _1792 * ((cbModelParam._m0[1u].w * (_1776 - _1676)) + _1676);
    float _1794 = _1792 * ((cbModelParam._m0[1u].w * (_1778 - _1678)) + _1678);
    float _1795 = _1792 * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1798 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1793 * cbSceneParam._m0[91u].x));
    vec4 _1812 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_689, _690));
    float _1814 = _1812.w;
    float _1826 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1814);
    float _1827 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1814);
    float _1828 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1814);
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _752 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1870 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1874 = _1834 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_588, _589, _590));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_588, _589, _590));
    float _4090 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _4101 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1851].x * _1857) * _1895) + (((cbLight._m0[_1861].x * _1826) * _1870) * _1893);
    float _1903 = ((_1857 * cbLight._m0[_1851].y) * _1895) + (((cbLight._m0[_1861].y * _1827) * _1870) * _1893);
    float _1904 = ((_1857 * cbLight._m0[_1851].z) * _1895) + (((cbLight._m0[_1861].z * _1828) * _1870) * _1893);
    uvec4 _1908 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1910 = _1908.x == 0u;
    float _1921;
    float _1923;
    float _1925;
    if (_1910)
    {
        _1921 = _1902;
        _1923 = _1903;
        _1925 = _1904;
    }
    else
    {
        uint _1929 = _1834 + 6u;
        float _1945 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _1946 = _1945 * _1945;
        float _4112 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1948 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _1921 = (((cbLight._m0[_1929].x * 0.3183098733425140380859375) * _1947) * _1948) + _1902;
        _1923 = (((cbLight._m0[_1929].y * 0.3183098733425140380859375) * _1947) * _1948) + _1903;
        _1925 = (((cbLight._m0[_1929].z * 0.3183098733425140380859375) * _1947) * _1948) + _1904;
    }
    bool _1928 = _1908.y == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1928)
    {
        _1966 = _1921;
        _1968 = _1923;
        _1970 = _1925;
    }
    else
    {
        uint _2128 = _1834 + 7u;
        float _2144 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4128 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2147 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1966 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _1921;
        _1968 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _1923;
        _1970 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _1925;
    }
    uint _1973 = _1834 + 8u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _591) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1834].x + _672;
    float _1989 = cbLight._m0[_1834].y + _673;
    float _1990 = cbLight._m0[_1834].z + _674;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1834].xyz));
    float _4144 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _2002 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2003 = dot(vec3(_588, _589, _590), vec3(_1995, _1996, _1997));
    float _4166 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1995, _1996, _1997));
    float _4177 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1987 * _1987;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2027 = 1.0 - _1987;
    float _2038 = (0.5 / (((_2002 * ((_2001 * _2027) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2027) + _1987) * _2001))) * _2001;
    float _4188 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    uint _2054 = _1834 + 9u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _591) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1874].x + _672;
    float _2068 = cbLight._m0[_1874].y + _673;
    float _2069 = cbLight._m0[_1874].z + _674;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1874].xyz));
    float _4199 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2081 = dot(vec3(_588, _589, _590), vec3(_2074, _2075, _2076));
    float _4210 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2074, _2075, _2076));
    float _4221 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2066 * _2066;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2103 = 1.0 - _2066;
    float _2113 = (0.5 / (((_2002 * ((_2080 * _2103) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2103) + _2066) * _2080))) * _2080;
    float _4232 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    float _2125 = (((_2102 * cbLight._m0[_2054].x) * _2115) * _1857) + ((((cbLight._m0[_1973].x * _1826) * _2026) * _2040) * _1870);
    float _2126 = (((_2102 * cbLight._m0[_2054].y) * _2115) * _1857) + ((((cbLight._m0[_1973].y * _1827) * _2026) * _2040) * _1870);
    float _2127 = (((_2102 * cbLight._m0[_2054].z) * _2115) * _1857) + ((((cbLight._m0[_1973].z * _1828) * _2026) * _2040) * _1870);
    float _2189;
    float _2191;
    float _2193;
    if (_1910)
    {
        _2189 = _2125;
        _2191 = _2126;
        _2193 = _2127;
    }
    else
    {
        uint _2195 = _1834 + 2u;
        uint _2199 = _1834 + 10u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _591) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _672;
        float _2216 = cbLight._m0[_2195].y + _673;
        float _2217 = cbLight._m0[_2195].z + _674;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2195].xyz));
        float _4243 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2229 = dot(vec3(_588, _589, _590), vec3(_2222, _2223, _2224));
        float _4254 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4265 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2251 = 1.0 - _2214;
        float _2261 = (0.5 / (((_2002 * ((_2228 * _2251) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2251) + _2214) * _2228))) * _2228;
        float _4276 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2189 = (((_2250 * cbLight._m0[_2199].x) * _2263) * _2264) + _2125;
        _2191 = (((_2250 * cbLight._m0[_2199].y) * _2263) * _2264) + _2126;
        _2193 = (((_2250 * cbLight._m0[_2199].z) * _2263) * _2264) + _2127;
    }
    float _2299;
    float _2301;
    float _2303;
    if (_1928)
    {
        _2299 = _2189;
        _2301 = _2191;
        _2303 = _2193;
    }
    else
    {
        uint _2310 = _1834 + 3u;
        uint _2314 = _1834 + 11u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _591) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _672;
        float _2331 = cbLight._m0[_2310].y + _673;
        float _2332 = cbLight._m0[_2310].z + _674;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2310].xyz));
        float _4292 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2344 = dot(vec3(_588, _589, _590), vec3(_2337, _2338, _2339));
        float _4303 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4314 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2365 = (exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2366 = 1.0 - _2329;
        float _2376 = (0.5 / (((_2002 * ((_2343 * _2366) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2366) + _2329) * _2343))) * _2343;
        float _4325 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2378 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2379 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2299 = (((_2365 * cbLight._m0[_2314].x) * _2378) * _2379) + _2189;
        _2301 = (((_2365 * cbLight._m0[_2314].y) * _2378) * _2379) + _2191;
        _2303 = (((_2365 * cbLight._m0[_2314].z) * _2378) * _2379) + _2193;
    }
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_1832.y == 0u)
    {
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2454;
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2454;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2454;
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.x;
        uint _2481 = uint((float(_2469.y) * floor(float(uint(cbSceneParam._m0[85u].y * _690) / _2470))) + floor(float(uint(cbSceneParam._m0[85u].x * _689) / _2470)));
        float _2491 = (log2(_2457 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2492 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        uint _2495 = uint(isnan(14.0) ? _2492 : (isnan(_2492) ? 14.0 : min(_2492, 14.0)));
        uvec4 _2500 = texelFetch(g_lightClusterGridBuffer, int(((_2495 << 2u) + (_2481 << 6u)) >> 2u));
        uint _2501 = _2500.x;
        uint _2502 = _2469.z;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        if (((((1u << ((_2502 >> 4u) & 15u)) + 4294967295u) & _2501) == 0u) || ((_2502 & 240u) == 0u))
        {
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
        }
        else
        {
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2771)
                {
                    frontier_phi_68_pred = _2755;
                    frontier_phi_68_pred_1 = _2760;
                    frontier_phi_68_pred_2 = _2759;
                    frontier_phi_68_pred_3 = _2758;
                    frontier_phi_68_pred_4 = _2757;
                    frontier_phi_68_pred_5 = _2756;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2770;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2761 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2455;
                        float _2967 = _2926.y - _2456;
                        float _2968 = _2926.z - _2457;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_708, _711, _714), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4351 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2455;
                        float _3002 = (-0.0) - _2456;
                        float _3003 = (-0.0) - _2457;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _768;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_708, _711, _714), vec3(_3008, _3009, _3010));
                        float _4367 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3043 = dot(vec3(_708, _711, _714), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4378 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4389 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4400 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2830 = (_2997 * _2945.x) + _2903;
                        _2831 = (_2997 * _2945.y) + _2904;
                        _2832 = (_2997 * _2945.z) + _2905;
                        _2827 = (_3078 * _2962.x) + _2900;
                        _2828 = (_3078 * _2962.y) + _2901;
                        _2829 = (_3078 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_68_pred = _2827;
                    frontier_phi_68_pred_1 = _2832;
                    frontier_phi_68_pred_2 = _2831;
                    frontier_phi_68_pred_3 = _2830;
                    frontier_phi_68_pred_4 = _2829;
                    frontier_phi_68_pred_5 = _2828;
                }
                _2603 = frontier_phi_68_pred;
                _2613 = frontier_phi_68_pred_1;
                _2611 = frontier_phi_68_pred_2;
                _2609 = frontier_phi_68_pred_3;
                _2607 = frontier_phi_68_pred_4;
                _2605 = frontier_phi_68_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2603;
                    _2756 = _2605;
                    _2757 = _2607;
                    _2758 = _2609;
                    _2759 = _2611;
                    _2760 = _2613;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
        }
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.z;
        uint _2619 = (_2617 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2619) & _2501) == 0u)
        {
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
            _2729 = _2608;
            _2731 = _2610;
            _2733 = _2612;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
            float _2749 = _2748 * _2455;
            float _2750 = _2748 * _2456;
            float _2751 = _2748 * _2457;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2619 < ((_2617 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2883 = _2602;
                float _2884 = _2604;
                float _2885 = _2606;
                float _2886 = _2608;
                float _2887 = _2610;
                float _2888 = _2612;
                uint _2889 = _2619;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2899)
                    {
                        frontier_phi_79_pred = _2888;
                        frontier_phi_79_pred_1 = _2887;
                        frontier_phi_79_pred_2 = _2886;
                        frontier_phi_79_pred_3 = _2885;
                        frontier_phi_79_pred_4 = _2884;
                        frontier_phi_79_pred_5 = _2883;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        uint _3111 = _2898;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3180;
                        vec4 _3195;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3122 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3167 = (_3122 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3122 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3122 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3122 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2457, _3229.z, fma(_2456, _3229.y, _3229.x * _2455)) + _3229.w;
                            _3242 = !((fma(_2457, _3210.z, fma(_2456, _3210.y, _3210.x * _2455)) + _3210.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3137.x - _2455;
                                float _3270 = _3137.y - _2456;
                                float _3271 = _3137.z - _2457;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3138 * _3138));
                                float _4411 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3287 = sqrt(_3272) * _3153.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_708, _711, _714))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2457, _3180.z, fma(_2456, _3180.y, _3180.x * _2455)) + _3180.w) / _3241;
                                float _3301 = (fma(_2457, _3195.z, fma(_2456, _3195.y, _3195.x * _2455)) + _3195.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4427 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _768;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2749;
                                float _3331 = _3277 - _2750;
                                float _3332 = _3278 - _2751;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_708, _711, _714), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4438 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3344 = dot(vec3(_708, _711, _714), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4449 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_708, _711, _714), vec3(_3276, _3277, _3278))) + _3353;
                                float _4460 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4471 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3307 * _3153.y;
                                frontier_phi_85_pred_1 = _3307 * _3153.x;
                                frontier_phi_85_pred_2 = _3381 * _3165.z;
                                frontier_phi_85_pred_3 = _3381 * _3165.y;
                                frontier_phi_85_pred_4 = _3381 * _3165.x;
                                frontier_phi_85_pred_5 = _3307 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3389 = frontier_phi_85_pred;
                            _3388 = frontier_phi_85_pred_1;
                            _3387 = frontier_phi_85_pred_2;
                            _3386 = frontier_phi_85_pred_3;
                            _3385 = frontier_phi_85_pred_4;
                            _3390 = frontier_phi_85_pred_5;
                            _3095 = _3388 + _3108;
                            _3096 = _3389 + _3109;
                            _3097 = _3390 + _3110;
                            _3092 = _3385 + _3105;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3097;
                        frontier_phi_79_pred_1 = _3096;
                        frontier_phi_79_pred_2 = _3095;
                        frontier_phi_79_pred_3 = _3094;
                        frontier_phi_79_pred_4 = _3093;
                        frontier_phi_79_pred_5 = _3092;
                    }
                    _2734 = frontier_phi_79_pred;
                    _2732 = frontier_phi_79_pred_1;
                    _2730 = frontier_phi_79_pred_2;
                    _2728 = frontier_phi_79_pred_3;
                    _2726 = frontier_phi_79_pred_4;
                    _2724 = frontier_phi_79_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2724;
                        _2884 = _2726;
                        _2885 = _2728;
                        _2886 = _2730;
                        _2887 = _2732;
                        _2888 = _2734;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2728;
                frontier_phi_60_61_ladder_1 = _2734;
                frontier_phi_60_61_ladder_2 = _2732;
                frontier_phi_60_61_ladder_3 = _2730;
                frontier_phi_60_61_ladder_4 = _2726;
                frontier_phi_60_61_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_60_61_ladder = _2606;
                frontier_phi_60_61_ladder_1 = _2612;
                frontier_phi_60_61_ladder_2 = _2610;
                frontier_phi_60_61_ladder_3 = _2608;
                frontier_phi_60_61_ladder_4 = _2604;
                frontier_phi_60_61_ladder_5 = _2602;
            }
            _2723 = frontier_phi_60_61_ladder_5;
            _2725 = frontier_phi_60_61_ladder_4;
            _2727 = frontier_phi_60_61_ladder;
            _2729 = frontier_phi_60_61_ladder_3;
            _2731 = frontier_phi_60_61_ladder_2;
            _2733 = frontier_phi_60_61_ladder_1;
        }
        float _2738 = isnan(1.0) ? _752 : (isnan(_752) ? 1.0 : min(_752, 1.0));
        _2514 = (_2738 * _2729) + _1966;
        _2516 = (_2738 * _2731) + _1968;
        _2518 = (_2738 * _2733) + _1970;
        _2520 = ((_2723 * 0.039999999105930328369140625) * _2738) + _2299;
        _2522 = ((_2725 * 0.039999999105930328369140625) * _2738) + _2301;
        _2524 = ((_2727 * 0.039999999105930328369140625) * _2738) + _2303;
    }
    else
    {
        _2514 = _1966;
        _2516 = _1968;
        _2518 = _1970;
        _2520 = _2299;
        _2522 = _2301;
        _2524 = _2303;
    }
    float _4487 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4498 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4509 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _2541 = ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2514 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _752))) + ((_2520 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    float _2542 = ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2516 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _752))) + ((_2522 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    float _2543 = ((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2518 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _752))) + ((_2524 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    uint _2544 = _260 + 6u;
    float _2552 = _689 / cbSceneParam._m0[86u].x;
    float _2553 = _690 / cbSceneParam._m0[86u].y;
    vec4 _2567 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2569 = _2567.x;
    float _2570 = _2567.y;
    float _2571 = _2567.z;
    float _2572 = _2567.w;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2627 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2628 = _2627 / _613;
        float _2639 = _2628 * _665;
        float _2640 = _666 * _2628;
        float _2641 = (-0.0) - _2640;
        float _2643 = _2628 * _667;
        float _2645 = (cbSceneParam._m0[77u].w * _2641) / _2627;
        float _2646 = _2645 + cbSceneParam._m0[79u].w;
        float _2647 = cbSceneParam._m0[79u].w - _2640;
        float _2653 = sqrt(((_2639 * _2639) + (_2640 * _2640)) + (_2643 * _2643));
        float _2656 = (1.0 - (cbSceneParam._m0[77u].w / _2627)) * _2653;
        float _2661 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2663 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2641 - _2645) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2646 > 0.0) ? exp2(_2661 * _2646) : (2.0 - exp2(_2663 * _2646))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2656;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : max(_2646, _2647));
            float _2786 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : min(_2646, _2647));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2840 = ((abs(_2653 / _2641) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2661 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2661 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2663 * _2795) - exp2(_2663 * _2796)) * _2784))) + (_2656 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2572);
        _2665 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2569;
        _2667 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2570;
        _2669 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2571;
        _2671 = _2851 * _2572;
    }
    else
    {
        _2665 = _2569;
        _2667 = _2570;
        _2669 = _2571;
        _2671 = _2572;
    }
    bool _2878;
    vec4 _2681;
    vec4 _2703;
    float _2705;
    float _2709;
    float _2710;
    float _2711;
    float _2712;
    bool _2722;
    for (;;)
    {
        _2681 = cbMatDynParam._m0[0u];
        float _2683 = roundEven(_2681.y);
        bool _2684 = _2683 == 3.0;
        float _2685 = log2(_2671);
        float _2692 = exp2(_2685 * cbSceneParam._m0[78u].x) * _2541;
        float _2693 = exp2(_2685 * cbSceneParam._m0[78u].y) * _2542;
        float _2694 = exp2(_2685 * cbSceneParam._m0[78u].z) * _2543;
        float _2701 = _678 + (-0.5);
        _2703 = cbMtdParam._m0[1u];
        _2705 = _2703.y * _2701;
        float _2708 = (_2683 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2709 = _2708 * (_2684 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2665)));
        _2710 = _2708 * (_2684 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2667)));
        _2711 = _2708 * (_2684 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2669)));
        _2712 = _2701 * 0.999000012874603271484375;
        _2722 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2722)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _2712) < 0.5)
            {
                _2878 = true;
                break;
            }
        }
        uint _2819 = _727 + uint(_2681.w);
        if ((cbInstanceData._m0[_2819].w < 1.0) && ((cbInstanceData._m0[_2819].w + _2712) < 0.5))
        {
            _2878 = true;
            break;
        }
        if ((_2705 + 1.0) < _2703.x)
        {
            _2878 = true;
            break;
        }
        _2878 = false;
        break;
    }
    float _3083;
    if (_2878)
    {
        discard_state = true;
        _3083 = 0.0;
    }
    else
    {
        _3083 = cbInstanceData._m0[_2544].w;
    }
    SV_Target.x = _2709;
    SV_Target.y = _2710;
    SV_Target.z = _2711;
    SV_Target.w = _3083;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2544].w;
    discard_exit();
}


