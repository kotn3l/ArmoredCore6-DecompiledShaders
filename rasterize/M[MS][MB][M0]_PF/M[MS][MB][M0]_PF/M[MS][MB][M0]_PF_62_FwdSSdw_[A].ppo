#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1079;
float _3463;
float _3464;
float _3465;
float _3466;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _353 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].zw, cbMtdParam._m0[30u].x, 0.0));
    float _370 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _353) * cbMtdParam._m0[24u].x) + _353) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3475 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _378 = (_371 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _379 = (_371 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _380 = (_371 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _371) + _439;
    float _451 = ((((_418.x - _437) * _371) + _437) * 2.0) + (-1.0);
    float _452 = ((((_418.y - _438) * _371) + _438) * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3486 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))));
    float _463 = _451 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_393.x * 2.0) + (-1.0)));
    float _464 = _452 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_393.y * 2.0) + (-1.0)));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _484 = (((_393.z - _448) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _448;
    float _489 = cbMtdParam._m0[22u].x + _477.w;
    float _493 = gl_FragCoord.x * 0.125;
    float _495 = gl_FragCoord.y * 0.125;
    float _506 = fma(_458, _221 * NORMAL.x, fma(_464, _228 * TANGENT.x, (_214 * _206) * _463));
    float _509 = fma(_458, _221 * NORMAL.y, fma(_464, _228 * TANGENT.y, (_214 * _207) * _463));
    float _512 = fma(_458, _221 * NORMAL.z, fma(_464, _228 * TANGENT.z, (_214 * _208) * _463));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3497 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _520 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3519 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3530 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3541 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_493, _495)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _594 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _584);
    float _595 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _584);
    float _596 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _584);
    float _600 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
    float _601 = _594 * _600;
    float _602 = _595 * _600;
    float _603 = _596 * _600;
    vec4 _605 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_493, _495));
    float _607 = _605.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _761 = sqrt(((_594 * _594) + (_595 * _595)) + (_596 * _596));
        float _767 = (cbMatDynParam._m0[5u].x * _761) + cbMatDynParam._m0[5u].y;
        float _3552 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _772 = (cbMatDynParam._m0[5u].z * _761) + cbMatDynParam._m0[5u].w;
        float _3563 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) - _768)) + _768) < ((_607 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _618 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _619 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _640 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _643 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _656 = _234 + 9u;
    uint _657 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3574 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _618, cbSceneParam._m0[86u].y * _619));
    float _681 = ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * TEXCOORD_5.w) * _677.x;
    float _682 = dot(vec3(_517, _518, _519), vec3(_601, _602, _603));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _517) - _601;
    float _690 = (_685 * _518) - _602;
    float _691 = (_685 * _519) - _603;
    float _695 = abs(dot(vec3(_601, _602, _603), vec3(_517, _518, _519)));
    float _3607 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_520);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1078;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _803 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _807 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _811 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _836 = _742 + _517;
        float _837 = _746 + _518;
        float _838 = _750 + _519;
        float _848 = fma(_838, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _836)) - _803;
        float _849 = fma(_838, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _836)) - _807;
        float _850 = fma(_838, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _836)) - _811;
        float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
        float _867 = ((_854 * _848) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_803 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_854 * _849) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_807 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_854 * _850) / cbModelParam._m0[34u].z) + ((((((_811 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        float _906 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_872.x + (-0.5));
        float _908 = _906 * (_872.y + (-0.5));
        float _909 = _906 * (_872.z + (-0.5));
        float _916 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_879.x + (-0.5));
        float _918 = _916 * (_879.y + (-0.5));
        float _919 = _916 * (_879.z + (-0.5));
        float _926 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_886.x + (-0.5));
        float _928 = _926 * (_886.y + (-0.5));
        float _929 = _926 * (_886.z + (-0.5));
        float _936 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_893.x + (-0.5));
        float _938 = _936 * (_893.y + (-0.5));
        float _939 = _936 * (_893.z + (-0.5));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = _907 * 0.5;
        float _944 = _917 * 0.5;
        float _945 = _927 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _960 = (dot(vec3(_517, _518, _519), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _970 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3655 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_972 + 1.0))) + _977) * _940;
        float _987 = _908 * 0.5;
        float _988 = _918 * 0.5;
        float _989 = _928 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_517, _518, _519), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3688 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1014 + 1.0))) + _1019) * _941;
        float _1029 = _909 * 0.5;
        float _1030 = _919 * 0.5;
        float _1031 = _929 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_517, _518, _519), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3721 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1056 + 1.0))) + _1061) * _942;
        _1078 = _909;
        _1080 = _908;
        _1081 = _907;
        _1082 = _919;
        _1083 = _918;
        _1084 = _917;
        _1085 = _929;
        _1086 = _928;
        _1087 = _927;
        _1088 = _942;
        _1089 = _941;
        _1090 = _940;
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
    }
    else
    {
        _1078 = _1079;
        _1080 = _1079;
        _1081 = _1079;
        _1082 = _1079;
        _1083 = _1079;
        _1084 = _1079;
        _1085 = _1079;
        _1086 = _1079;
        _1087 = _1079;
        _1088 = _1079;
        _1089 = _1079;
        _1090 = _1079;
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
    }
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1117 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1121 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1125 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1148 = _742 + _517;
        float _1149 = _746 + _518;
        float _1150 = _750 + _519;
        float _1160 = fma(_1150, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148)) - _1117;
        float _1161 = fma(_1150, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148)) - _1121;
        float _1162 = fma(_1150, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148)) - _1125;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1117 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1121 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[35u].z) + ((((((_1125 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1216 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1183.x + (-0.5));
        float _1218 = _1216 * (_1183.y + (-0.5));
        float _1219 = _1216 * (_1183.z + (-0.5));
        float _1226 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1190.x + (-0.5));
        float _1228 = _1226 * (_1190.y + (-0.5));
        float _1229 = _1226 * (_1190.z + (-0.5));
        float _1236 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1197.x + (-0.5));
        float _1238 = _1236 * (_1197.y + (-0.5));
        float _1239 = _1236 * (_1197.z + (-0.5));
        float _1246 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1204.x + (-0.5));
        float _1248 = _1246 * (_1204.y + (-0.5));
        float _1249 = _1246 * (_1204.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_517, _518, _519), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3784 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1280 + 1.0))) + _1285) * _1250;
        float _1295 = _1218 * 0.5;
        float _1296 = _1228 * 0.5;
        float _1297 = _1238 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_517, _518, _519), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3817 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1322 + 1.0))) + _1327) * _1251;
        float _1337 = _1219 * 0.5;
        float _1338 = _1229 * 0.5;
        float _1339 = _1239 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_517, _518, _519), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3850 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1364 + 1.0))) + _1369) * _1252;
        _1386 = _1219;
        _1387 = _1218;
        _1388 = _1217;
        _1389 = _1229;
        _1390 = _1228;
        _1391 = _1227;
        _1392 = _1239;
        _1393 = _1238;
        _1394 = _1237;
        _1395 = _1252;
        _1396 = _1251;
        _1397 = _1250;
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1079;
        _1387 = _1079;
        _1388 = _1079;
        _1389 = _1079;
        _1390 = _1079;
        _1391 = _1079;
        _1392 = _1079;
        _1393 = _1079;
        _1394 = _1079;
        _1395 = _1079;
        _1396 = _1079;
        _1397 = _1079;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1091)) + _1091;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1092)) + _1092;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1093)) + _1093;
    float _1433 = fma(_1412, cbSceneParam._m0[89u].z, fma(_1411, cbSceneParam._m0[89u].y, _1410 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1412, cbSceneParam._m0[90u].z, fma(_1411, cbSceneParam._m0[90u].y, _1410 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1412, cbSceneParam._m0[91u].z, fma(_1411, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1410));
    float _1454 = _689 * 0.5;
    float _1455 = _690 * 0.5;
    float _1456 = _691 * 0.5;
    float _1457 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1460 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1463 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1497;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1470 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1078, _1082, _1085, _1088));
        float _1474 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1478 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1485 = dot(vec4(cbModelParam._m0[39u]), vec4(_1454, _1455, _1456, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1508;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1499 = dot(vec4(cbModelParam._m0[40u]), vec4(_1454, _1455, _1456, 1.0));
        _1508 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1508 = 1.0;
    }
    float _1512 = (_1508 * cbModelParam._m0[1u].x) + (_1497 * (1.0 - cbModelParam._m0[1u].x));
    float _1522 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1522 : min(cbModelParam._m0[25u].z, _1522));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1572 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1576 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1580 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1583 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1586 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1589 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1617;
        if (_1583 > 0.0)
        {
            _1617 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1617 = frontier_phi_19_17_ladder;
        }
        float _1840;
        if (_1586 > 0.0)
        {
            _1840 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1840 = frontier_phi_28_24_ladder;
        }
        float _2086;
        if (_1589 > 0.0)
        {
            _2086 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2086 = frontier_phi_40_35_ladder;
        }
        float _2088 = isnan(_1840) ? _1617 : (isnan(_1617) ? _1840 : min(_1617, _1840));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1583) + _1572;
        float _2094 = (_2089 * _1586) + _1576;
        float _2095 = (_2089 * _1589) + _1580;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2098 = (-1.0) - _2096;
        float _2100 = _2096 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2095 > _2100) || ((_2095 < _2098) || ((_2094 > _2100) || ((_2094 < _2098) || ((_2093 < _2098) || (_2093 > _2100))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2219 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2095, cbModelParam._m0[9u].z, fma(_2094, cbModelParam._m0[9u].y, _2093 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2095, cbModelParam._m0[10u].z, fma(_2094, cbModelParam._m0[10u].y, _2093 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2095, cbModelParam._m0[11u].z, fma(_2094, cbModelParam._m0[11u].y, _2093 * cbModelParam._m0[11u].x))), _1523);
            frontier_phi_18_40_ladder = _2219.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2219.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2219.x * cbModelParam._m0[1u].y;
        }
        _1605 = frontier_phi_18_40_ladder_2;
        _1607 = frontier_phi_18_40_ladder_1;
        _1609 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1523);
        _1605 = _1593.x * cbModelParam._m0[1u].y;
        _1607 = _1593.y * cbModelParam._m0[1u].y;
        _1609 = _1593.z * cbModelParam._m0[1u].y;
    }
    float _1613 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1613 : min(cbModelParam._m0[25u].w, _1613));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1683 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1686 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1845;
        if (_1680 > 0.0)
        {
            _1845 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1845 = frontier_phi_30_26_ladder;
        }
        float _2113;
        if (_1683 > 0.0)
        {
            _2113 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2113 = frontier_phi_42_37_ladder;
        }
        float _2318;
        if (_1686 > 0.0)
        {
            _2318 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2318 = frontier_phi_51_48_ladder;
        }
        float _2320 = isnan(_2113) ? _1845 : (isnan(_1845) ? _2113 : min(_1845, _2113));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1680) + _1669;
        float _2326 = (_2321 * _1683) + _1673;
        float _2327 = (_2321 * _1686) + _1677;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2328;
        float _2331 = _2328 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2327 > _2331) || ((_2327 < _2329) || ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 < _2329) || (_2325 > _2331))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2327, cbModelParam._m0[17u].z, fma(_2326, cbModelParam._m0[17u].y, _2325 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2327, cbModelParam._m0[18u].z, fma(_2326, cbModelParam._m0[18u].y, _2325 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2327, cbModelParam._m0[19u].z, fma(_2326, cbModelParam._m0[19u].y, _2325 * cbModelParam._m0[19u].x))), _1614);
            frontier_phi_27_51_ladder = _2526.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2526.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2526.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_27_51_ladder_2;
        _1707 = frontier_phi_27_51_ladder_1;
        _1709 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1614);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1721 = ((((1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_710 * _697)) * _681;
    float _1722 = _1721 * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1723 = _1721 * ((cbModelParam._m0[1u].w * (_1707 - _1607)) + _1607);
    float _1724 = _1721 * ((cbModelParam._m0[1u].w * (_1709 - _1609)) + _1609);
    float _1727 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    vec4 _1741 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_618, _619));
    float _1743 = _1741.w;
    float _1755 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1743);
    float _1756 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1743);
    float _1757 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1743);
    uvec4 _1761 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1763 = _1761.x * 14u;
    uint _1764 = _1763 + 13u;
    float _1771 = _681 + (-1.0);
    float _1776 = (cbLight._m0[_1764].x * _1771) + 1.0;
    float _1777 = (cbLight._m0[_1764].y * _1771) + 1.0;
    float _1778 = (cbLight._m0[_1764].z * _1771) + 1.0;
    float _1779 = (cbLight._m0[_1764].w * _1771) + 1.0;
    uint _1780 = _1763 + 5u;
    float _1786 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1790 = _1763 + 4u;
    float _1799 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1803 = _1763 | 1u;
    float _1814 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_517, _518, _519));
    float _1817 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_517, _518, _519));
    float _3986 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _3997 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1822 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1824 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1831 = ((cbLight._m0[_1780].x * _1786) * _1824) + (((cbLight._m0[_1790].x * _1755) * _1799) * _1822);
    float _1832 = ((_1786 * cbLight._m0[_1780].y) * _1824) + (((cbLight._m0[_1790].y * _1756) * _1799) * _1822);
    float _1833 = ((_1786 * cbLight._m0[_1780].z) * _1824) + (((cbLight._m0[_1790].z * _1757) * _1799) * _1822);
    uvec4 _1837 = floatBitsToUint(cbLight._m0[_1763 + 12u]);
    bool _1839 = _1837.x == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1839)
    {
        _1850 = _1831;
        _1852 = _1832;
        _1854 = _1833;
    }
    else
    {
        uint _1858 = _1763 + 6u;
        float _1874 = (dot(vec3(cbLight._m0[_1763 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _4008 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1877 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _1850 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1831;
        _1852 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1832;
        _1854 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1833;
    }
    bool _1857 = _1837.y == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1857)
    {
        _1895 = _1850;
        _1897 = _1852;
        _1899 = _1854;
    }
    else
    {
        uint _2057 = _1763 + 7u;
        float _2073 = (dot(vec3(cbLight._m0[_1763 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4024 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2076 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1895 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _1850;
        _1897 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _1852;
        _1899 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _1854;
    }
    uint _1902 = _1763 + 8u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _520) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1763].x + _601;
    float _1918 = cbLight._m0[_1763].y + _602;
    float _1919 = cbLight._m0[_1763].z + _603;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1763].xyz));
    float _4040 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1931 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1932 = dot(vec3(_517, _518, _519), vec3(_1924, _1925, _1926));
    float _4062 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1924, _1925, _1926));
    float _4073 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1916 * _1916;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1956 = 1.0 - _1916;
    float _1967 = (0.5 / (((_1931 * ((_1930 * _1956) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _1956) + _1916) * _1930))) * _1930;
    float _4084 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    uint _1983 = _1763 + 9u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _520) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1803].x + _601;
    float _1997 = cbLight._m0[_1803].y + _602;
    float _1998 = cbLight._m0[_1803].z + _603;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1803].xyz));
    float _4095 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2010 = dot(vec3(_517, _518, _519), vec3(_2003, _2004, _2005));
    float _4106 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2003, _2004, _2005));
    float _4117 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1995 * _1995;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2031 = (exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2032 = 1.0 - _1995;
    float _2042 = (0.5 / (((_1931 * ((_2009 * _2032) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2032) + _1995) * _2009))) * _2009;
    float _4128 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    float _2054 = (((_2031 * cbLight._m0[_1983].x) * _2044) * _1786) + ((((cbLight._m0[_1902].x * _1755) * _1955) * _1969) * _1799);
    float _2055 = (((_2031 * cbLight._m0[_1983].y) * _2044) * _1786) + ((((cbLight._m0[_1902].y * _1756) * _1955) * _1969) * _1799);
    float _2056 = (((_2031 * cbLight._m0[_1983].z) * _2044) * _1786) + ((((cbLight._m0[_1902].z * _1757) * _1955) * _1969) * _1799);
    float _2118;
    float _2120;
    float _2122;
    if (_1839)
    {
        _2118 = _2054;
        _2120 = _2055;
        _2122 = _2056;
    }
    else
    {
        uint _2124 = _1763 + 2u;
        uint _2128 = _1763 + 10u;
        float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _520) * 0.949999988079071044921875);
        float _2143 = _2142 * _2142;
        float _2144 = cbLight._m0[_2124].x + _601;
        float _2145 = cbLight._m0[_2124].y + _602;
        float _2146 = cbLight._m0[_2124].z + _603;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2151 = _2150 * _2144;
        float _2152 = _2150 * _2145;
        float _2153 = _2150 * _2146;
        float _2154 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2124].xyz));
        float _4139 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2158 = dot(vec3(_517, _518, _519), vec3(_2151, _2152, _2153));
        float _4150 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2162 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2151, _2152, _2153));
        float _4161 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2166 = _2143 * _2143;
        float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
        float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2180 = 1.0 - _2143;
        float _2190 = (0.5 / (((_1931 * ((_2157 * _2180) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2180) + _2143) * _2157))) * _2157;
        float _4172 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _2118 = (((_2179 * cbLight._m0[_2128].x) * _2192) * _2193) + _2054;
        _2120 = (((_2179 * cbLight._m0[_2128].y) * _2192) * _2193) + _2055;
        _2122 = (((_2179 * cbLight._m0[_2128].z) * _2192) * _2193) + _2056;
    }
    float _2228;
    float _2230;
    float _2232;
    if (_1857)
    {
        _2228 = _2118;
        _2230 = _2120;
        _2232 = _2122;
    }
    else
    {
        uint _2239 = _1763 + 3u;
        uint _2243 = _1763 + 11u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _520) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _601;
        float _2260 = cbLight._m0[_2239].y + _602;
        float _2261 = cbLight._m0[_2239].z + _603;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2239].xyz));
        float _4188 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2273 = dot(vec3(_517, _518, _519), vec3(_2266, _2267, _2268));
        float _4199 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4210 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2295 = 1.0 - _2258;
        float _2305 = (0.5 / (((_1931 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2295) + _2258) * _2272))) * _2272;
        float _4221 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2228 = (((_2294 * cbLight._m0[_2243].x) * _2307) * _2308) + _2118;
        _2230 = (((_2294 * cbLight._m0[_2243].y) * _2307) * _2308) + _2120;
        _2232 = (((_2294 * cbLight._m0[_2243].z) * _2307) * _2308) + _2122;
    }
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_1761.y == 0u)
    {
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2383;
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2383;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2383;
        uvec4 _2398 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2399 = _2398.x;
        uint _2410 = uint((float(_2398.y) * floor(float(uint(cbSceneParam._m0[85u].y * _619) / _2399))) + floor(float(uint(cbSceneParam._m0[85u].x * _618) / _2399)));
        float _2420 = (log2(_2386 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2421 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        uint _2424 = uint(isnan(14.0) ? _2421 : (isnan(_2421) ? 14.0 : min(_2421, 14.0)));
        uvec4 _2429 = texelFetch(g_lightClusterGridBuffer, int(((_2424 << 2u) + (_2410 << 6u)) >> 2u));
        uint _2430 = _2429.x;
        uint _2431 = _2398.z;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((((1u << ((_2431 >> 4u) & 15u)) + 4294967295u) & _2430) == 0u) || ((_2431 & 240u) == 0u))
        {
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
        }
        else
        {
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            uint _2690 = 0u;
            uint _2699;
            bool _2700;
            for (;;)
            {
                _2699 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                _2700 = _2699 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2700)
                {
                    frontier_phi_68_pred = _2684;
                    frontier_phi_68_pred_1 = _2689;
                    frontier_phi_68_pred_2 = _2688;
                    frontier_phi_68_pred_3 = _2687;
                    frontier_phi_68_pred_4 = _2686;
                    frontier_phi_68_pred_5 = _2685;
                }
                else
                {
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    uint _2835;
                    _2829 = _2684;
                    _2830 = _2685;
                    _2831 = _2686;
                    _2832 = _2687;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2699;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    for (;;)
                    {
                        uint _2839 = uint(findLSB(_2835)) + (_2690 << 5u);
                        uint _2836 = (_2835 + 4294967295u) & _2835;
                        uint _2841 = _2839 * 48u;
                        vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 3u)).x));
                        uint _2861 = (_2839 * 48u) + 4u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2880 = (_2839 * 48u) + 8u;
                        vec3 _2891 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x));
                        float _2895 = _2855.x - _2384;
                        float _2896 = _2855.y - _2385;
                        float _2897 = _2855.z - _2386;
                        float _2898 = dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897));
                        float _2901 = inversesqrt(_2898);
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2905 = dot(vec3(_637, _640, _643), vec3(_2902, _2903, _2904));
                        float _2910 = 1.0 - (_2898 * _2855.w);
                        float _4247 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2912 = sqrt(_2898) * _2874.w;
                        float _2915 = 1.39999997615814208984375 / (_2912 + 1.39999997615814208984375);
                        float _2916 = _2915 * _2915;
                        float _2919 = ((1.0 - _2916) * _2905) + _2916;
                        float _2922 = _2912 * _2912;
                        float _2926 = ((isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))) * _2911) / ((_2922 * 0.699999988079071044921875) + 1.0);
                        float _2930 = (-0.0) - _2384;
                        float _2931 = (-0.0) - _2385;
                        float _2932 = (-0.0) - _2386;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2937 = _2936 * _2930;
                        float _2938 = _2936 * _2931;
                        float _2939 = _2936 * _2932;
                        float _2947 = exp2(log2(1.0 / ((_2922 * 3.5) + 5.0)) * 0.25);
                        float _2948 = 1.0 - _697;
                        float _2955 = sqrt(1.0 - ((1.0 - (_2948 * _2948)) * (1.0 - (_2947 * _2947))));
                        float _2956 = _2955 * _2955;
                        float _2957 = _2956 * _2956;
                        float _2958 = _2937 + _2902;
                        float _2959 = _2938 + _2903;
                        float _2960 = _2939 + _2904;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2968 = dot(vec3(_637, _640, _643), vec3(_2937, _2938, _2939));
                        float _4263 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2971 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2972 = dot(vec3(_637, _640, _643), vec3(_2964 * _2958, _2964 * _2959, _2964 * _2960));
                        float _4274 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2979 = ((_2975 * _2975) * (_2957 + (-1.0))) + 1.0;
                        float _2980 = _2915 * _2956;
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2905) + _2981;
                        float _4285 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2985 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _2986 = 1.0 - _2956;
                        float _2996 = (0.5 / (((_2985 * ((_2971 * _2986) + _2956)) + 9.9999999392252902907785028219223e-09) + (((_2985 * _2986) + _2956) * _2971))) * _2985;
                        float _4296 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _3007 = (((_2957 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_2979 * _2979) * ((_2922 * 2.1991131305694580078125) + 3.141590118408203125))) * _2911;
                        _2759 = (_2926 * _2874.x) + _2832;
                        _2760 = (_2926 * _2874.y) + _2833;
                        _2761 = (_2926 * _2874.z) + _2834;
                        _2756 = (_3007 * _2891.x) + _2829;
                        _2757 = (_3007 * _2891.y) + _2830;
                        _2758 = (_3007 * _2891.z) + _2831;
                        if (_2836 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2829 = _2756;
                            _2830 = _2757;
                            _2831 = _2758;
                            _2832 = _2759;
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2836;
                        }
                    }
                    frontier_phi_68_pred = _2756;
                    frontier_phi_68_pred_1 = _2761;
                    frontier_phi_68_pred_2 = _2760;
                    frontier_phi_68_pred_3 = _2759;
                    frontier_phi_68_pred_4 = _2758;
                    frontier_phi_68_pred_5 = _2757;
                }
                _2532 = frontier_phi_68_pred;
                _2542 = frontier_phi_68_pred_1;
                _2540 = frontier_phi_68_pred_2;
                _2538 = frontier_phi_68_pred_3;
                _2536 = frontier_phi_68_pred_4;
                _2534 = frontier_phi_68_pred_5;
                uint _2691 = _2690 + 1u;
                if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2684 = _2532;
                    _2685 = _2534;
                    _2686 = _2536;
                    _2687 = _2538;
                    _2688 = _2540;
                    _2689 = _2542;
                    _2690 = _2691;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
        }
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.z;
        uint _2548 = (_2546 >> 8u) & 15u;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((4294967295u << _2548) & _2430) == 0u)
        {
            _2652 = _2531;
            _2654 = _2533;
            _2656 = _2535;
            _2658 = _2537;
            _2660 = _2539;
            _2662 = _2541;
        }
        else
        {
            float _2677 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
            float _2678 = _2677 * _2384;
            float _2679 = _2677 * _2385;
            float _2680 = _2677 * _2386;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2548 < ((_2546 >> 12u) & 15u))
            {
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2812 = _2531;
                float _2813 = _2533;
                float _2814 = _2535;
                float _2815 = _2537;
                float _2816 = _2539;
                float _2817 = _2541;
                uint _2818 = _2548;
                uint _2827;
                bool _2828;
                for (;;)
                {
                    _2827 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2818 << 2u)) >> 2u)).x;
                    _2828 = _2827 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2828)
                    {
                        frontier_phi_79_pred = _2817;
                        frontier_phi_79_pred_1 = _2816;
                        frontier_phi_79_pred_2 = _2815;
                        frontier_phi_79_pred_3 = _2814;
                        frontier_phi_79_pred_4 = _2813;
                        frontier_phi_79_pred_5 = _2812;
                    }
                    else
                    {
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3034 = _2812;
                        float _3035 = _2813;
                        float _3036 = _2814;
                        float _3037 = _2815;
                        float _3038 = _2816;
                        float _3039 = _2817;
                        uint _3040 = _2827;
                        uint _3041;
                        vec4 _3066;
                        float _3067;
                        vec4 _3082;
                        vec3 _3094;
                        vec4 _3109;
                        vec4 _3124;
                        float _3170;
                        bool _3171;
                        for (;;)
                        {
                            uint _3051 = ((_2818 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3040));
                            _3041 = (_3040 + 4294967295u) & _3040;
                            uint _3053 = _3051 * 40u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3067 = _3066.w;
                            uint _3069 = (_3051 * 40u) + 4u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3051 * 40u) + 8u;
                            _3094 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x));
                            uint _3096 = (_3051 * 40u) + 16u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3051 * 40u) + 20u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3051 * 40u) + 24u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3145 = (_3051 * 40u) + 28u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3170 = fma(_2386, _3158.z, fma(_2385, _3158.y, _3158.x * _2384)) + _3158.w;
                            _3171 = !((fma(_2386, _3139.z, fma(_2385, _3139.y, _3139.x * _2384)) + _3139.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3171)
                            {
                                float _3198 = _3066.x - _2384;
                                float _3199 = _3066.y - _2385;
                                float _3200 = _3066.z - _2386;
                                float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                                float _3204 = inversesqrt(_3201);
                                float _3205 = _3204 * _3198;
                                float _3206 = _3204 * _3199;
                                float _3207 = _3204 * _3200;
                                float _3211 = 1.0 - (_3201 / (_3067 * _3067));
                                float _4307 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3216 = sqrt(_3201) * _3082.w;
                                float _3218 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                                float _3219 = _3218 * _3218;
                                float _3222 = ((1.0 - _3219) * dot(vec3(_3205, _3206, _3207), vec3(_637, _640, _643))) + _3219;
                                float _3225 = _3216 * _3216;
                                float _3229 = (fma(_2386, _3109.z, fma(_2385, _3109.y, _3109.x * _2384)) + _3109.w) / _3170;
                                float _3230 = (fma(_2386, _3124.z, fma(_2385, _3124.y, _3124.x * _2384)) + _3124.w) / _3170;
                                float _3234 = 1.0 - dot(vec2(_3229, _3230), vec2(_3229, _3230));
                                float _4323 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3236 = _3235 * (((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3212) / ((_3225 * 0.699999988079071044921875) + 1.0));
                                float _3248 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                                float _3249 = 1.0 - _697;
                                float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                                float _3257 = _3256 * _3256;
                                float _3258 = _3257 * _3257;
                                float _3259 = _3205 - _2678;
                                float _3260 = _3206 - _2679;
                                float _3261 = _3207 - _2680;
                                float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                                float _3269 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2678, (-0.0) - _2679, (-0.0) - _2680));
                                float _4334 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3273 = dot(vec3(_637, _640, _643), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                                float _4345 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                                float _3281 = _3218 * _3257;
                                float _3282 = _3281 * _3281;
                                float _3288 = ((1.0 - _3282) * dot(vec3(_637, _640, _643), vec3(_3205, _3206, _3207))) + _3282;
                                float _4356 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3290 = 1.0 - _3257;
                                float _3300 = (0.5 / (((_3289 * ((_3272 * _3290) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3257) * _3272))) * _3289;
                                float _4367 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3310 = (_3235 * _3212) * (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3280 * _3280) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3236 * _3082.y;
                                frontier_phi_85_pred_1 = _3236 * _3082.x;
                                frontier_phi_85_pred_2 = _3310 * _3094.z;
                                frontier_phi_85_pred_3 = _3310 * _3094.y;
                                frontier_phi_85_pred_4 = _3310 * _3094.x;
                                frontier_phi_85_pred_5 = _3236 * _3082.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3318 = frontier_phi_85_pred;
                            _3317 = frontier_phi_85_pred_1;
                            _3316 = frontier_phi_85_pred_2;
                            _3315 = frontier_phi_85_pred_3;
                            _3314 = frontier_phi_85_pred_4;
                            _3319 = frontier_phi_85_pred_5;
                            _3024 = _3317 + _3037;
                            _3025 = _3318 + _3038;
                            _3026 = _3319 + _3039;
                            _3021 = _3314 + _3034;
                            _3022 = _3315 + _3035;
                            _3023 = _3316 + _3036;
                            if (_3041 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3041;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3026;
                        frontier_phi_79_pred_1 = _3025;
                        frontier_phi_79_pred_2 = _3024;
                        frontier_phi_79_pred_3 = _3023;
                        frontier_phi_79_pred_4 = _3022;
                        frontier_phi_79_pred_5 = _3021;
                    }
                    _2663 = frontier_phi_79_pred;
                    _2661 = frontier_phi_79_pred_1;
                    _2659 = frontier_phi_79_pred_2;
                    _2657 = frontier_phi_79_pred_3;
                    _2655 = frontier_phi_79_pred_4;
                    _2653 = frontier_phi_79_pred_5;
                    uint _2819 = _2818 + 1u;
                    if (_2819 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2812 = _2653;
                        _2813 = _2655;
                        _2814 = _2657;
                        _2815 = _2659;
                        _2816 = _2661;
                        _2817 = _2663;
                        _2818 = _2819;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2657;
                frontier_phi_60_61_ladder_1 = _2663;
                frontier_phi_60_61_ladder_2 = _2661;
                frontier_phi_60_61_ladder_3 = _2659;
                frontier_phi_60_61_ladder_4 = _2655;
                frontier_phi_60_61_ladder_5 = _2653;
            }
            else
            {
                frontier_phi_60_61_ladder = _2535;
                frontier_phi_60_61_ladder_1 = _2541;
                frontier_phi_60_61_ladder_2 = _2539;
                frontier_phi_60_61_ladder_3 = _2537;
                frontier_phi_60_61_ladder_4 = _2533;
                frontier_phi_60_61_ladder_5 = _2531;
            }
            _2652 = frontier_phi_60_61_ladder_5;
            _2654 = frontier_phi_60_61_ladder_4;
            _2656 = frontier_phi_60_61_ladder;
            _2658 = frontier_phi_60_61_ladder_3;
            _2660 = frontier_phi_60_61_ladder_2;
            _2662 = frontier_phi_60_61_ladder_1;
        }
        float _2667 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2443 = (_2667 * _2658) + _1895;
        _2445 = (_2667 * _2660) + _1897;
        _2447 = (_2667 * _2662) + _1899;
        _2449 = ((_2652 * 0.039999999105930328369140625) * _2667) + _2228;
        _2451 = ((_2654 * 0.039999999105930328369140625) * _2667) + _2230;
        _2453 = ((_2656 * 0.039999999105930328369140625) * _2667) + _2232;
    }
    else
    {
        _2443 = _1895;
        _2445 = _1897;
        _2447 = _1899;
        _2449 = _2228;
        _2451 = _2230;
        _2453 = _2232;
    }
    float _4383 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4394 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4405 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2470 = ((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2443 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _681))) + ((_2449 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1512)) * cbPerFrame._m0[3u].x);
    float _2471 = ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2445 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _681))) + ((_2451 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1512)) * cbPerFrame._m0[3u].x);
    float _2472 = ((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2447 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _681))) + ((_2453 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1512)) * cbPerFrame._m0[3u].x);
    uint _2473 = _234 + 6u;
    float _2481 = _618 / cbSceneParam._m0[86u].x;
    float _2482 = _619 / cbSceneParam._m0[86u].y;
    vec4 _2496 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2498 = _2496.x;
    float _2499 = _2496.y;
    float _2500 = _2496.z;
    float _2501 = _2496.w;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2556 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2557 = _2556 / _542;
        float _2568 = _2557 * _594;
        float _2569 = _595 * _2557;
        float _2570 = (-0.0) - _2569;
        float _2572 = _2557 * _596;
        float _2574 = (cbSceneParam._m0[77u].w * _2570) / _2556;
        float _2575 = _2574 + cbSceneParam._m0[79u].w;
        float _2576 = cbSceneParam._m0[79u].w - _2569;
        float _2582 = sqrt(((_2568 * _2568) + (_2569 * _2569)) + (_2572 * _2572));
        float _2585 = (1.0 - (cbSceneParam._m0[77u].w / _2556)) * _2582;
        float _2590 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2592 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2769;
        if (abs((_2570 - _2574) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2769 = ((((_2575 > 0.0) ? exp2(_2590 * _2575) : (2.0 - exp2(_2592 * _2575))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2585;
        }
        else
        {
            float _2713 = 1.0 / cbSceneParam._m0[80u].x;
            float _2714 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : max(_2575, _2576));
            float _2715 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : min(_2575, _2576));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            float _2725 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : min(_2715, 0.0));
            _2769 = ((abs(_2582 / _2570) * cbSceneParam._m0[80u].y) * ((((_2724 - _2725) * 2.0) - ((exp2(_2590 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)))) - exp2(_2590 * (isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))))) * _2713)) - ((exp2(_2592 * _2724) - exp2(_2592 * _2725)) * _2713))) + (_2585 * cbSceneParam._m0[80u].z);
        }
        vec4 _2771 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, 1.0), 0.0);
        float _2780 = exp2((_2769 * (-1.44269502162933349609375)) * (1.0 - _2771.w));
        float _2781 = log2(_2780);
        float _2797 = log2(_2501);
        _2594 = (exp2(_2797 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].x)) * _2771.x) / cbSceneParam._m0[78u].x)) + _2498;
        _2596 = (exp2(_2797 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].y)) * _2771.y) / cbSceneParam._m0[78u].y)) + _2499;
        _2598 = (exp2(_2797 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].z)) * _2771.z) / cbSceneParam._m0[78u].z)) + _2500;
        _2600 = _2780 * _2501;
    }
    else
    {
        _2594 = _2498;
        _2596 = _2499;
        _2598 = _2500;
        _2600 = _2501;
    }
    bool _2807;
    vec4 _2610;
    vec4 _2632;
    float _2634;
    float _2638;
    float _2639;
    float _2640;
    float _2641;
    bool _2651;
    for (;;)
    {
        _2610 = cbMatDynParam._m0[0u];
        float _2612 = roundEven(_2610.y);
        bool _2613 = _2612 == 3.0;
        float _2614 = log2(_2600);
        float _2621 = exp2(_2614 * cbSceneParam._m0[78u].x) * _2470;
        float _2622 = exp2(_2614 * cbSceneParam._m0[78u].y) * _2471;
        float _2623 = exp2(_2614 * cbSceneParam._m0[78u].z) * _2472;
        float _2630 = _607 + (-0.5);
        _2632 = cbMtdParam._m0[1u];
        _2634 = _2632.y * _2630;
        float _2637 = (_2612 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2638 = _2637 * (_2613 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2594)));
        _2639 = _2637 * (_2613 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2596)));
        _2640 = _2637 * (_2613 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2598)));
        _2641 = _2630 * 0.999000012874603271484375;
        _2651 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2651)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2641) < 0.5)
            {
                _2807 = true;
                break;
            }
        }
        uint _2748 = _656 + uint(_2610.w);
        if ((cbInstanceData._m0[_2748].w < 1.0) && ((cbInstanceData._m0[_2748].w + _2641) < 0.5))
        {
            _2807 = true;
            break;
        }
        if ((_2634 + 1.0) < _2632.x)
        {
            _2807 = true;
            break;
        }
        _2807 = false;
        break;
    }
    float _3012;
    if (_2807)
    {
        discard_state = true;
        _3012 = 0.0;
    }
    else
    {
        _3012 = cbInstanceData._m0[_2473].w;
    }
    SV_Target.x = _2638;
    SV_Target.y = _2639;
    SV_Target.z = _2640;
    SV_Target.w = _3012;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2473].w;
    discard_exit();
}


