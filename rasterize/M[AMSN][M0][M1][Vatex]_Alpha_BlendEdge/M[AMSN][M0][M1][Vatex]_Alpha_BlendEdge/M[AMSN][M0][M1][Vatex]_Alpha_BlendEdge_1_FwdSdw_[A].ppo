#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _903;
float _3558;
float _3559;
float _3560;
float _3561;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _236.w;
    float _242 = _236.x * cbMtdParam._m0[9u].x;
    float _243 = _236.y * cbMtdParam._m0[9u].y;
    float _244 = _236.z * cbMtdParam._m0[9u].z;
    float _263 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[10u].x;
    float _264 = _241 * TEXCOORD.x;
    float _275 = (_264 < 0.5) ? 0.0 : 1.0;
    float _285 = (((((_264 * 2.0) * (1.0 - _275)) * _263) + (-0.5)) + ((1.0 - (((1.0 - _264) * 2.0) * (1.0 - _263))) * _275)) * cbMtdParam._m0[10u].z;
    precise float _289 = _285 * ((_285 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _290 = cbMtdParam._m0[10u].y + _289;
    float _3570 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _296 = (_291 * _291) * (3.0 - (_291 * 2.0));
    vec4 _308 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = _308.z;
    float _315 = (_308.x * 2.0) + (-1.0);
    float _317 = (_308.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_315, _317), vec2(_315, _317));
    float _3581 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _323 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    float _326 = fma(_323, _206 * NORMAL.x, fma(_317, _213 * TANGENT.x, (_199 * _191) * _315));
    float _329 = fma(_323, _206 * NORMAL.y, fma(_317, _213 * TANGENT.y, (_199 * _192) * _315));
    float _332 = fma(_323, _206 * NORMAL.z, fma(_317, _213 * TANGENT.z, (_199 * _193) * _315));
    float _336 = inversesqrt(dot(vec3(_326, _329, _332), vec3(_326, _329, _332)));
    float _337 = _336 * _326;
    float _338 = _336 * _329;
    float _339 = _336 * _332;
    float _3592 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _340 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _341 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3625 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3636 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _360 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _411 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _401);
    float _412 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _401);
    float _413 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _401);
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _411 * _417;
    float _419 = _412 * _417;
    float _420 = _413 * _417;
    vec4 _425 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _427 = _425.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _584 = sqrt(((_411 * _411) + (_412 * _412)) + (_413 * _413));
        float _590 = (cbMatDynParam._m0[5u].x * _584) + cbMatDynParam._m0[5u].y;
        float _3647 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _591 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _595 = (cbMatDynParam._m0[5u].z * _584) + cbMatDynParam._m0[5u].w;
        float _3658 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) - _591)) + _591) < ((_427 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _460 = fma(_339, cbSceneParam._m0[5u].z, fma(_338, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _337));
    float _463 = fma(_339, cbSceneParam._m0[6u].z, fma(_338, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _337));
    float _466 = fma(_339, cbSceneParam._m0[7u].z, fma(_338, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _337));
    uint _479 = uint(roundEven(NORMAL.w)) * 13u;
    uint _481 = _479 + 9u;
    uint _482 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _488 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_482].x;
    float _489 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_482].y;
    float _490 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_482].z;
    float _3669 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    vec4 _502 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _439, cbSceneParam._m0[86u].y * _440));
    float _505 = _502.x * TEXCOORD.y;
    float _506 = dot(vec3(_337, _338, _339), vec3(_418, _419, _420));
    float _509 = _506 * 2.0;
    float _513 = (_509 * _337) - _418;
    float _514 = (_509 * _338) - _419;
    float _515 = (_509 * _339) - _420;
    float _519 = abs(dot(vec3(_418, _419, _420), vec3(_337, _338, _339)));
    float _3702 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _521 = sqrt(_341);
    float _533 = exp2((_521 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_521 * 3.0));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _902;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _629 = fma(_573, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565));
        float _633 = fma(_573, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565));
        float _637 = fma(_573, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565));
        float _660 = _565 + _337;
        float _661 = _569 + _338;
        float _662 = _573 + _339;
        float _672 = fma(_662, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660)) - _629;
        float _673 = fma(_662, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660)) - _633;
        float _674 = fma(_662, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660)) - _637;
        float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
        float _691 = ((_678 * _672) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_629 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_678 * _673) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_633 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_678 * _674) / cbModelParam._m0[34u].z) + ((((((_637 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        float _730 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_696.x + (-0.5));
        float _732 = _730 * (_696.y + (-0.5));
        float _733 = _730 * (_696.z + (-0.5));
        float _740 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_703.x + (-0.5));
        float _742 = _740 * (_703.y + (-0.5));
        float _743 = _740 * (_703.z + (-0.5));
        float _750 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_710.x + (-0.5));
        float _752 = _750 * (_710.y + (-0.5));
        float _753 = _750 * (_710.z + (-0.5));
        float _760 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_717.x + (-0.5));
        float _762 = _760 * (_717.y + (-0.5));
        float _763 = _760 * (_717.z + (-0.5));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = _731 * 0.5;
        float _768 = _741 * 0.5;
        float _769 = _751 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _784 = (dot(vec3(_337, _338, _339), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _794 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3750 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_796 + 1.0))) + _801) * _764;
        float _811 = _732 * 0.5;
        float _812 = _742 * 0.5;
        float _813 = _752 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_337, _338, _339), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3783 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_838 + 1.0))) + _843) * _765;
        float _853 = _733 * 0.5;
        float _854 = _743 * 0.5;
        float _855 = _753 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _869 = (dot(vec3(_337, _338, _339), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _878 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3816 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_880 + 1.0))) + _885) * _766;
        _902 = _733;
        _904 = _732;
        _905 = _731;
        _906 = _743;
        _907 = _742;
        _908 = _741;
        _909 = _753;
        _910 = _752;
        _911 = _751;
        _912 = _766;
        _913 = _765;
        _914 = _764;
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
    }
    else
    {
        _902 = _903;
        _904 = _903;
        _905 = _903;
        _906 = _903;
        _907 = _903;
        _908 = _903;
        _909 = _903;
        _910 = _903;
        _911 = _903;
        _912 = _903;
        _913 = _903;
        _914 = _903;
        _915 = 0.0;
        _916 = 0.0;
        _917 = 0.0;
    }
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _946 = fma(_573, cbModelParam._m0[30u].z, fma(_569, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _565));
        float _950 = fma(_573, cbModelParam._m0[31u].z, fma(_569, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _565));
        float _954 = fma(_573, cbModelParam._m0[32u].z, fma(_569, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _565));
        float _977 = _565 + _337;
        float _978 = _569 + _338;
        float _979 = _573 + _339;
        float _989 = fma(_979, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977)) - _946;
        float _990 = fma(_979, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977)) - _950;
        float _991 = fma(_979, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977)) - _954;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_946 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_950 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[35u].z) + ((((((_954 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1045 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1012.x + (-0.5));
        float _1047 = _1045 * (_1012.y + (-0.5));
        float _1048 = _1045 * (_1012.z + (-0.5));
        float _1055 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1019.x + (-0.5));
        float _1057 = _1055 * (_1019.y + (-0.5));
        float _1058 = _1055 * (_1019.z + (-0.5));
        float _1065 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1026.x + (-0.5));
        float _1067 = _1065 * (_1026.y + (-0.5));
        float _1068 = _1065 * (_1026.z + (-0.5));
        float _1075 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1033.x + (-0.5));
        float _1077 = _1075 * (_1033.y + (-0.5));
        float _1078 = _1075 * (_1033.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_337, _338, _339), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3879 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1109 + 1.0))) + _1114) * _1079;
        float _1124 = _1047 * 0.5;
        float _1125 = _1057 * 0.5;
        float _1126 = _1067 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_337, _338, _339), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3912 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1151 + 1.0))) + _1156) * _1080;
        float _1166 = _1048 * 0.5;
        float _1167 = _1058 * 0.5;
        float _1168 = _1068 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_337, _338, _339), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3945 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1193 + 1.0))) + _1198) * _1081;
        _1215 = _1048;
        _1216 = _1047;
        _1217 = _1046;
        _1218 = _1058;
        _1219 = _1057;
        _1220 = _1056;
        _1221 = _1068;
        _1222 = _1067;
        _1223 = _1066;
        _1224 = _1081;
        _1225 = _1080;
        _1226 = _1079;
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _903;
        _1216 = _903;
        _1217 = _903;
        _1218 = _903;
        _1219 = _903;
        _1220 = _903;
        _1221 = _903;
        _1222 = _903;
        _1223 = _903;
        _1224 = _903;
        _1225 = _903;
        _1226 = _903;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1262 = fma(_1241, cbSceneParam._m0[89u].z, fma(_1240, cbSceneParam._m0[89u].y, _1239 * cbSceneParam._m0[89u].x));
    float _1265 = fma(_1241, cbSceneParam._m0[90u].z, fma(_1240, cbSceneParam._m0[90u].y, _1239 * cbSceneParam._m0[90u].x));
    float _1268 = fma(_1241, cbSceneParam._m0[91u].z, fma(_1240, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1239));
    float _1283 = _513 * 0.5;
    float _1284 = _514 * 0.5;
    float _1285 = _515 * 0.5;
    float _1286 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1289 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1292 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1326;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1299 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_902, _906, _909, _912));
        float _1303 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_904, _907, _910, _913));
        float _1307 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_905, _908, _911, _914));
        float _1314 = dot(vec4(cbModelParam._m0[39u]), vec4(_1283, _1284, _1285, 1.0));
        _1326 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1326 = 1.0;
    }
    float _1337;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1328 = dot(vec4(cbModelParam._m0[40u]), vec4(_1283, _1284, _1285, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1341 = (_1337 * cbModelParam._m0[1u].x) + (_1326 * (1.0 - cbModelParam._m0[1u].x));
    float _1351 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _341);
    float _1352 = isnan(_1351) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1351 : min(cbModelParam._m0[25u].z, _1351));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1401 = fma(_573, cbModelParam._m0[13u].z, fma(_569, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565)) + cbModelParam._m0[13u].w;
        float _1405 = fma(_573, cbModelParam._m0[14u].z, fma(_569, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565)) + cbModelParam._m0[14u].w;
        float _1409 = fma(_573, cbModelParam._m0[15u].z, fma(_569, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565)) + cbModelParam._m0[15u].w;
        float _1412 = fma(_515, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513));
        float _1415 = fma(_515, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513));
        float _1418 = fma(_515, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513));
        float _1446;
        if (_1412 > 0.0)
        {
            _1446 = abs((1.0 - _1401) / _1412);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1401 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1446 = frontier_phi_17_15_ladder;
        }
        float _1620;
        if (_1415 > 0.0)
        {
            _1620 = abs((1.0 - _1405) / _1415);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1405 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1620 = frontier_phi_26_22_ladder;
        }
        float _1916;
        if (_1418 > 0.0)
        {
            _1916 = abs((1.0 - _1409) / _1418);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1409 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1916 = frontier_phi_38_33_ladder;
        }
        float _1918 = isnan(_1620) ? _1446 : (isnan(_1446) ? _1620 : min(_1446, _1620));
        float _1919 = isnan(_1916) ? _1918 : (isnan(_1918) ? _1916 : min(_1918, _1916));
        float _1923 = (_1919 * _1412) + _1401;
        float _1924 = (_1919 * _1415) + _1405;
        float _1925 = (_1919 * _1418) + _1409;
        float _1926 = _1919 * 9.9999997473787516355514526367188e-05;
        float _1928 = (-1.0) - _1926;
        float _1930 = _1926 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1925 > _1930) || ((_1925 < _1928) || ((_1924 > _1930) || ((_1924 < _1928) || ((_1923 < _1928) || (_1923 > _1930))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1925, cbModelParam._m0[9u].z, fma(_1924, cbModelParam._m0[9u].y, _1923 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1925, cbModelParam._m0[10u].z, fma(_1924, cbModelParam._m0[10u].y, _1923 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1925, cbModelParam._m0[11u].z, fma(_1924, cbModelParam._m0[11u].y, _1923 * cbModelParam._m0[11u].x))), _1352);
            frontier_phi_16_38_ladder = _2070.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2070.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2070.x * cbModelParam._m0[1u].y;
        }
        _1434 = frontier_phi_16_38_ladder_2;
        _1436 = frontier_phi_16_38_ladder_1;
        _1438 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_513, _514, _515), _1352);
        _1434 = _1422.x * cbModelParam._m0[1u].y;
        _1436 = _1422.y * cbModelParam._m0[1u].y;
        _1438 = _1422.z * cbModelParam._m0[1u].y;
    }
    float _1442 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _341);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1442 : min(cbModelParam._m0[25u].w, _1442));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1500 = fma(_573, cbModelParam._m0[21u].z, fma(_569, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565)) + cbModelParam._m0[21u].w;
        float _1504 = fma(_573, cbModelParam._m0[22u].z, fma(_569, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565)) + cbModelParam._m0[22u].w;
        float _1508 = fma(_573, cbModelParam._m0[23u].z, fma(_569, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565)) + cbModelParam._m0[23u].w;
        float _1511 = fma(_515, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513));
        float _1514 = fma(_515, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513));
        float _1517 = fma(_515, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513));
        float _1625;
        if (_1511 > 0.0)
        {
            _1625 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1625 = frontier_phi_28_24_ladder;
        }
        float _1943;
        if (_1514 > 0.0)
        {
            _1943 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1943 = frontier_phi_40_35_ladder;
        }
        float _2270;
        if (_1517 > 0.0)
        {
            _2270 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2270 = frontier_phi_50_47_ladder;
        }
        float _2272 = isnan(_1943) ? _1625 : (isnan(_1625) ? _1943 : min(_1625, _1943));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1511) + _1500;
        float _2278 = (_2273 * _1514) + _1504;
        float _2279 = (_2273 * _1517) + _1508;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1443);
            frontier_phi_25_50_ladder = _2397.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2397.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2397.x * cbModelParam._m0[1u].z;
        }
        _1536 = frontier_phi_25_50_ladder_2;
        _1538 = frontier_phi_25_50_ladder_1;
        _1540 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_513, _514, _515), _1443);
        _1536 = _1520.x * cbModelParam._m0[1u].z;
        _1538 = _1520.y * cbModelParam._m0[1u].z;
        _1540 = _1520.z * cbModelParam._m0[1u].z;
    }
    float _1552 = ((((1.0 - _533) * ((_521 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_533 * _521)) * _505;
    float _1553 = _1552 * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1554 = _1552 * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1555 = _1552 * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1558 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, _1553 * cbSceneParam._m0[91u].x));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1612 = _1599 / _1611;
    float _1613 = _1603 / _1611;
    float _1614 = _1607 / _1611;
    float _1761;
    float _1762;
    float _1763;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1641 = ((uint(_1614 > cbSceneParam._m0[59u].y) + uint(_1614 > cbSceneParam._m0[59u].x)) + uint(_1614 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1642 = _1641 + 43u;
        uint _1650 = _1641 + 44u;
        uint _1658 = _1641 + 45u;
        uint _1666 = _1641 + 46u;
        float _1677 = fma(_1611, cbSceneParam._m0[_1642].w, fma(_1607, cbSceneParam._m0[_1642].z, fma(_1603, cbSceneParam._m0[_1642].y, _1599 * cbSceneParam._m0[_1642].x)));
        float _1681 = fma(_1611, cbSceneParam._m0[_1650].w, fma(_1607, cbSceneParam._m0[_1650].z, fma(_1603, cbSceneParam._m0[_1650].y, _1599 * cbSceneParam._m0[_1650].x)));
        float _1689 = fma(_1611, cbSceneParam._m0[_1666].w, fma(_1607, cbSceneParam._m0[_1666].z, fma(_1603, cbSceneParam._m0[_1666].y, _1599 * cbSceneParam._m0[_1666].x)));
        float _1694 = cbSceneParam._m0[33u].z * _1689;
        float _1696 = cbSceneParam._m0[33u].w * _1689;
        float _1699 = fma(_1611, cbSceneParam._m0[_1658].w, fma(_1607, cbSceneParam._m0[_1658].z, fma(_1603, cbSceneParam._m0[_1658].y, _1599 * cbSceneParam._m0[_1658].x))) / _1689;
        float _1747 = (cbSceneParam._m0[33u].x - sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614))) * cbSceneParam._m0[33u].y;
        float _4071 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1754 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 + _1677) / _1689, (_1696 + _1681) / _1689), _1699), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 + _1677) / _1689, (_1681 - _1694) / _1689), _1699), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1677 - _1694) / _1689, (_1681 - _1696) / _1689), _1699), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1677 - _1696) / _1689, (_1694 + _1681) / _1689), _1699), 0.0)).x), vec4(0.25)));
        _1761 = 1.0 - (_1754 * cbSceneParam._m0[34u].x);
        _1762 = 1.0 - (_1754 * cbSceneParam._m0[34u].y);
        _1763 = 1.0 - (_1754 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1761 = 1.0;
        _1762 = 1.0;
        _1763 = 1.0;
    }
    float _1827;
    float _1829;
    float _1831;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1815 = fma(_1611, cbSceneParam._m0[63u].w, fma(_1607, cbSceneParam._m0[63u].z, fma(_1603, cbSceneParam._m0[63u].y, _1599 * cbSceneParam._m0[63u].x)));
        float _1816 = fma(_1611, cbSceneParam._m0[60u].w, fma(_1607, cbSceneParam._m0[60u].z, fma(_1603, cbSceneParam._m0[60u].y, _1599 * cbSceneParam._m0[60u].x))) / _1815;
        float _1817 = fma(_1611, cbSceneParam._m0[61u].w, fma(_1607, cbSceneParam._m0[61u].z, fma(_1603, cbSceneParam._m0[61u].y, _1599 * cbSceneParam._m0[61u].x))) / _1815;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1816 >= cbSceneParam._m0[64u].x) && (_1817 >= cbSceneParam._m0[64u].y)) && (_1816 <= cbSceneParam._m0[64u].z)) && (_1817 <= cbSceneParam._m0[64u].w))
        {
            float _1956 = fma(_1611, cbSceneParam._m0[62u].w, fma(_1607, cbSceneParam._m0[62u].z, fma(_1603, cbSceneParam._m0[62u].y, _1599 * cbSceneParam._m0[62u].x))) / _1815;
            float _1960 = isnan(cbSceneParam._m0[41u].w) ? _1956 : (isnan(_1956) ? cbSceneParam._m0[41u].w : max(_1956, cbSceneParam._m0[41u].w));
            float _2003 = (cbSceneParam._m0[33u].x - sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614))) * cbSceneParam._m0[33u].y;
            float _4087 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
            float _2010 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1816, cbSceneParam._m0[33u].w + _1817), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1816, _1817 - cbSceneParam._m0[33u].z), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1816 - cbSceneParam._m0[33u].z, _1817 - cbSceneParam._m0[33u].w), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1816 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1817), _1960), 0.0)).x), vec4(0.25)));
            float _2014 = 1.0 - (_2010 * cbSceneParam._m0[34u].x);
            float _2015 = 1.0 - (_2010 * cbSceneParam._m0[34u].y);
            float _2016 = 1.0 - (_2010 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2016) ? _1763 : (isnan(_1763) ? _2016 : min(_1763, _2016));
            frontier_phi_37_36_ladder_1 = isnan(_2015) ? _1762 : (isnan(_1762) ? _2015 : min(_1762, _2015));
            frontier_phi_37_36_ladder_2 = isnan(_2014) ? _1761 : (isnan(_1761) ? _2014 : min(_1761, _2014));
        }
        else
        {
            frontier_phi_37_36_ladder = _1763;
            frontier_phi_37_36_ladder_1 = _1762;
            frontier_phi_37_36_ladder_2 = _1761;
        }
        _1827 = frontier_phi_37_36_ladder_2;
        _1829 = frontier_phi_37_36_ladder_1;
        _1831 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1827 = _1761;
        _1829 = _1762;
        _1831 = _1763;
    }
    uvec4 _1836 = floatBitsToUint(cbInstanceData._m0[_479 + 5u]);
    uint _1838 = _1836.x * 14u;
    uint _1839 = _1838 + 13u;
    float _1846 = _505 + (-1.0);
    float _1851 = (cbLight._m0[_1839].x * _1846) + 1.0;
    float _1852 = (cbLight._m0[_1839].y * _1846) + 1.0;
    float _1853 = (cbLight._m0[_1839].z * _1846) + 1.0;
    float _1854 = (cbLight._m0[_1839].w * _1846) + 1.0;
    uint _1855 = _1838 + 5u;
    float _1861 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1865 = _1838 + 4u;
    float _1875 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1879 = _1838 | 1u;
    float _1890 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_337, _338, _339));
    float _1893 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_337, _338, _339));
    float _4123 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _4134 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1898 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1900 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1907 = ((cbLight._m0[_1855].x * _1861) * _1900) + (((cbLight._m0[_1865].x * _1827) * _1875) * _1898);
    float _1908 = ((_1861 * cbLight._m0[_1855].y) * _1900) + (((cbLight._m0[_1865].y * _1829) * _1875) * _1898);
    float _1909 = ((_1861 * cbLight._m0[_1855].z) * _1900) + (((cbLight._m0[_1865].z * _1831) * _1875) * _1898);
    uvec4 _1913 = floatBitsToUint(cbLight._m0[_1838 + 12u]);
    bool _1915 = _1913.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_1915)
    {
        _2017 = _1907;
        _2019 = _1908;
        _2021 = _1909;
    }
    else
    {
        uint _2025 = _1838 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1838 + 2u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4145 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2044 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1907;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1908;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _1909;
    }
    bool _2024 = _1913.y == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_2024)
    {
        _2079 = _2017;
        _2081 = _2019;
        _2083 = _2021;
    }
    else
    {
        uint _2241 = _1838 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1838 + 3u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4161 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2260 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2079 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2017;
        _2081 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2019;
        _2083 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2021;
    }
    uint _2086 = _1838 + 8u;
    float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _341) * 0.949999988079071044921875);
    float _2100 = _2099 * _2099;
    float _2101 = cbLight._m0[_1838].x + _418;
    float _2102 = cbLight._m0[_1838].y + _419;
    float _2103 = cbLight._m0[_1838].z + _420;
    float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
    float _2108 = _2107 * _2101;
    float _2109 = _2107 * _2102;
    float _2110 = _2107 * _2103;
    float _2111 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1838].xyz));
    float _4177 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _2115 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2116 = dot(vec3(_337, _338, _339), vec3(_2108, _2109, _2110));
    float _4199 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2120 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2108, _2109, _2110));
    float _4210 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = _2100 * _2100;
    float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
    float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2140 = 1.0 - _2100;
    float _2151 = (0.5 / (((_2115 * ((_2114 * _2140) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2140) + _2100) * _2114))) * _2114;
    float _4221 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2153 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
    uint _2167 = _1838 + 9u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _341) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_1879].x + _418;
    float _2181 = cbLight._m0[_1879].y + _419;
    float _2182 = cbLight._m0[_1879].z + _420;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1879].xyz));
    float _4232 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2194 = dot(vec3(_337, _338, _339), vec3(_2187, _2188, _2189));
    float _4243 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2198 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2187, _2188, _2189));
    float _4254 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2202 = _2179 * _2179;
    float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
    float _2215 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2216 = 1.0 - _2179;
    float _2226 = (0.5 / (((_2115 * ((_2193 * _2216) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2216) + _2179) * _2193))) * _2193;
    float _4265 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
    float _2238 = (((_2215 * cbLight._m0[_2167].x) * _2228) * _1861) + ((((cbLight._m0[_2086].x * _1827) * _2139) * _2153) * _1875);
    float _2239 = (((_2215 * cbLight._m0[_2167].y) * _2228) * _1861) + ((((cbLight._m0[_2086].y * _1829) * _2139) * _2153) * _1875);
    float _2240 = (((_2215 * cbLight._m0[_2167].z) * _2228) * _1861) + ((((cbLight._m0[_2086].z * _1831) * _2139) * _2153) * _1875);
    float _2296;
    float _2298;
    float _2300;
    if (_1915)
    {
        _2296 = _2238;
        _2298 = _2239;
        _2300 = _2240;
    }
    else
    {
        uint _2302 = _1838 + 2u;
        uint _2306 = _1838 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _341) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _418;
        float _2323 = cbLight._m0[_2302].y + _419;
        float _2324 = cbLight._m0[_2302].z + _420;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_2302].xyz));
        float _4276 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2336 = dot(vec3(_337, _338, _339), vec3(_2329, _2330, _2331));
        float _4287 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4298 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2358 = 1.0 - _2321;
        float _2368 = (0.5 / (((_2115 * ((_2335 * _2358) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2358) + _2321) * _2335))) * _2335;
        float _4309 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2296 = (((_2357 * cbLight._m0[_2306].x) * _2370) * _2371) + _2238;
        _2298 = (((_2357 * cbLight._m0[_2306].y) * _2370) * _2371) + _2239;
        _2300 = (((_2357 * cbLight._m0[_2306].z) * _2370) * _2371) + _2240;
    }
    float _2402;
    float _2404;
    float _2406;
    if (_2024)
    {
        _2402 = _2296;
        _2404 = _2298;
        _2406 = _2300;
    }
    else
    {
        uint _2413 = _1838 + 3u;
        uint _2417 = _1838 + 11u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _341) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _418;
        float _2434 = cbLight._m0[_2413].y + _419;
        float _2435 = cbLight._m0[_2413].z + _420;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_2413].xyz));
        float _4325 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2447 = dot(vec3(_337, _338, _339), vec3(_2440, _2441, _2442));
        float _4336 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4347 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2469 = 1.0 - _2432;
        float _2479 = (0.5 / (((_2115 * ((_2446 * _2469) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2469) + _2432) * _2446))) * _2446;
        float _4358 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2402 = (((_2468 * cbLight._m0[_2417].x) * _2481) * _2482) + _2296;
        _2404 = (((_2468 * cbLight._m0[_2417].y) * _2481) * _2482) + _2298;
        _2406 = (((_2468 * cbLight._m0[_2417].z) * _2481) * _2482) + _2300;
    }
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_1836.y == 0u)
    {
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.x;
        uint _2515 = uint((float(_2503.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _2504))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _2504)));
        float _2525 = (log2(_1614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        uint _2529 = uint(isnan(14.0) ? _2526 : (isnan(_2526) ? 14.0 : min(_2526, 14.0)));
        uvec4 _2534 = texelFetch(g_lightClusterGridBuffer, int(((_2529 << 2u) + (_2515 << 6u)) >> 2u));
        uint _2535 = _2534.x;
        uint _2536 = _2503.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2536 >> 4u) & 15u)) + 4294967295u) & _2535) == 0u) || ((_2536 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            uint _2776 = 0u;
            uint _2785;
            bool _2786;
            for (;;)
            {
                _2785 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                _2786 = _2785 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2786)
                {
                    frontier_phi_71_pred = _2775;
                    frontier_phi_71_pred_1 = _2774;
                    frontier_phi_71_pred_2 = _2773;
                    frontier_phi_71_pred_3 = _2772;
                    frontier_phi_71_pred_4 = _2771;
                    frontier_phi_71_pred_5 = _2770;
                }
                else
                {
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    uint _2921;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2785;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    for (;;)
                    {
                        uint _2925 = uint(findLSB(_2921)) + (_2776 << 5u);
                        uint _2922 = (_2921 + 4294967295u) & _2921;
                        uint _2927 = _2925 * 48u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2947 = (_2925 * 48u) + 4u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2966 = (_2925 * 48u) + 8u;
                        vec3 _2977 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x));
                        float _2981 = _2941.x - _1612;
                        float _2982 = _2941.y - _1613;
                        float _2983 = _2941.z - _1614;
                        float _2984 = dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983));
                        float _2987 = inversesqrt(_2984);
                        float _2988 = _2987 * _2981;
                        float _2989 = _2987 * _2982;
                        float _2990 = _2987 * _2983;
                        float _2991 = dot(vec3(_460, _463, _466), vec3(_2988, _2989, _2990));
                        float _2996 = 1.0 - (_2984 * _2941.w);
                        float _4384 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2997 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _2998 = sqrt(_2984) * _2960.w;
                        float _3001 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2991) + _3002;
                        float _3008 = _2998 * _2998;
                        float _3012 = ((isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0))) * _2997) / ((_3008 * 0.699999988079071044921875) + 1.0);
                        float _3016 = (-0.0) - _1612;
                        float _3017 = (-0.0) - _1613;
                        float _3018 = (-0.0) - _1614;
                        float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3032 = exp2(log2(1.0 / ((_3008 * 3.5) + 5.0)) * 0.25);
                        float _3033 = 1.0 - _521;
                        float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                        float _3041 = _3040 * _3040;
                        float _3042 = _3041 * _3041;
                        float _3043 = _3023 + _2988;
                        float _3044 = _3024 + _2989;
                        float _3045 = _3025 + _2990;
                        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                        float _3053 = dot(vec3(_460, _463, _466), vec3(_3023, _3024, _3025));
                        float _4400 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3057 = dot(vec3(_460, _463, _466), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                        float _4411 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                        float _3065 = _3001 * _3041;
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _2991) + _3066;
                        float _4422 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3071 = 1.0 - _3041;
                        float _3081 = (0.5 / (((_3070 * ((_3056 * _3071) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3070 * _3071) + _3041) * _3056))) * _3070;
                        float _4433 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3092 = (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3064 * _3064) * ((_3008 * 2.1991131305694580078125) + 3.141590118408203125))) * _2997;
                        _2845 = (_3012 * _2960.x) + _2918;
                        _2846 = (_3012 * _2960.y) + _2919;
                        _2847 = (_3012 * _2960.z) + _2920;
                        _2842 = (_3092 * _2977.x) + _2915;
                        _2843 = (_3092 * _2977.y) + _2916;
                        _2844 = (_3092 * _2977.z) + _2917;
                        if (_2922 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2922;
                        }
                    }
                    frontier_phi_71_pred = _2847;
                    frontier_phi_71_pred_1 = _2846;
                    frontier_phi_71_pred_2 = _2845;
                    frontier_phi_71_pred_3 = _2844;
                    frontier_phi_71_pred_4 = _2843;
                    frontier_phi_71_pred_5 = _2842;
                }
                _2628 = frontier_phi_71_pred;
                _2626 = frontier_phi_71_pred_1;
                _2624 = frontier_phi_71_pred_2;
                _2622 = frontier_phi_71_pred_3;
                _2620 = frontier_phi_71_pred_4;
                _2618 = frontier_phi_71_pred_5;
                uint _2777 = _2776 + 1u;
                if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2770 = _2618;
                    _2771 = _2620;
                    _2772 = _2622;
                    _2773 = _2624;
                    _2774 = _2626;
                    _2775 = _2628;
                    _2776 = _2777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((4294967295u << _2634) & _2535) == 0u)
        {
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
        }
        else
        {
            float _2763 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
            float _2764 = _2763 * _1612;
            float _2765 = _2763 * _1613;
            float _2766 = _2763 * _1614;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2898 = _2617;
                float _2899 = _2619;
                float _2900 = _2621;
                float _2901 = _2623;
                float _2902 = _2625;
                float _2903 = _2627;
                uint _2904 = _2634;
                uint _2913;
                bool _2914;
                for (;;)
                {
                    _2913 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2904 << 2u)) >> 2u)).x;
                    _2914 = _2913 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2914)
                    {
                        frontier_phi_82_pred = _2903;
                        frontier_phi_82_pred_1 = _2902;
                        frontier_phi_82_pred_2 = _2901;
                        frontier_phi_82_pred_3 = _2900;
                        frontier_phi_82_pred_4 = _2899;
                        frontier_phi_82_pred_5 = _2898;
                    }
                    else
                    {
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3119 = _2898;
                        float _3120 = _2899;
                        float _3121 = _2900;
                        float _3122 = _2901;
                        float _3123 = _2902;
                        float _3124 = _2903;
                        uint _3125 = _2913;
                        uint _3126;
                        vec4 _3151;
                        float _3152;
                        vec4 _3167;
                        vec3 _3179;
                        vec4 _3195;
                        vec4 _3211;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3136 = ((_2904 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3125));
                            _3126 = (_3125 + 4294967295u) & _3125;
                            uint _3138 = _3136 * 40u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3152 = _3151.w;
                            uint _3154 = (_3136 * 40u) + 4u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3136 * 40u) + 8u;
                            _3179 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x));
                            uint _3182 = (_3136 * 40u) + 16u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3198 = (_3136 * 40u) + 20u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3214 = (_3136 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3136 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_1614, _3246.z, fma(_1613, _3246.y, _3246.x * _1612)) + _3246.w;
                            _3259 = !((fma(_1614, _3227.z, fma(_1613, _3227.y, _3227.x * _1612)) + _3227.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3151.x - _1612;
                                float _3287 = _3151.y - _1613;
                                float _3288 = _3151.z - _1614;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3152 * _3152));
                                float _4444 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3304 = sqrt(_3289) * _3167.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_460, _463, _466))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_1614, _3195.z, fma(_1613, _3195.y, _3195.x * _1612)) + _3195.w) / _3258;
                                float _3318 = (fma(_1614, _3211.z, fma(_1613, _3211.y, _3211.x * _1612)) + _3211.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4460 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _521;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2764;
                                float _3348 = _3294 - _2765;
                                float _3349 = _3295 - _2766;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_460, _463, _466), vec3((-0.0) - _2764, (-0.0) - _2765, (-0.0) - _2766));
                                float _4471 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3361 = dot(vec3(_460, _463, _466), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4482 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_460, _463, _466), vec3(_3293, _3294, _3295))) + _3370;
                                float _4493 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4504 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3324 * _3167.z;
                                frontier_phi_88_pred_1 = _3324 * _3167.y;
                                frontier_phi_88_pred_2 = _3324 * _3167.x;
                                frontier_phi_88_pred_3 = _3398 * _3179.z;
                                frontier_phi_88_pred_4 = _3398 * _3179.y;
                                frontier_phi_88_pred_5 = _3398 * _3179.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3407 = frontier_phi_88_pred;
                            _3406 = frontier_phi_88_pred_1;
                            _3405 = frontier_phi_88_pred_2;
                            _3404 = frontier_phi_88_pred_3;
                            _3403 = frontier_phi_88_pred_4;
                            _3402 = frontier_phi_88_pred_5;
                            _3109 = _3405 + _3122;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            _3108 = _3404 + _3121;
                            if (_3126 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3126;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3111;
                        frontier_phi_82_pred_1 = _3110;
                        frontier_phi_82_pred_2 = _3109;
                        frontier_phi_82_pred_3 = _3108;
                        frontier_phi_82_pred_4 = _3107;
                        frontier_phi_82_pred_5 = _3106;
                    }
                    _2749 = frontier_phi_82_pred;
                    _2747 = frontier_phi_82_pred_1;
                    _2745 = frontier_phi_82_pred_2;
                    _2743 = frontier_phi_82_pred_3;
                    _2741 = frontier_phi_82_pred_4;
                    _2739 = frontier_phi_82_pred_5;
                    uint _2905 = _2904 + 1u;
                    if (_2905 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2898 = _2739;
                        _2899 = _2741;
                        _2900 = _2743;
                        _2901 = _2745;
                        _2902 = _2747;
                        _2903 = _2749;
                        _2904 = _2905;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2745;
                frontier_phi_63_64_ladder_1 = _2749;
                frontier_phi_63_64_ladder_2 = _2747;
                frontier_phi_63_64_ladder_3 = _2743;
                frontier_phi_63_64_ladder_4 = _2741;
                frontier_phi_63_64_ladder_5 = _2739;
            }
            else
            {
                frontier_phi_63_64_ladder = _2623;
                frontier_phi_63_64_ladder_1 = _2627;
                frontier_phi_63_64_ladder_2 = _2625;
                frontier_phi_63_64_ladder_3 = _2621;
                frontier_phi_63_64_ladder_4 = _2619;
                frontier_phi_63_64_ladder_5 = _2617;
            }
            _2738 = frontier_phi_63_64_ladder_5;
            _2740 = frontier_phi_63_64_ladder_4;
            _2742 = frontier_phi_63_64_ladder_3;
            _2744 = frontier_phi_63_64_ladder;
            _2746 = frontier_phi_63_64_ladder_2;
            _2748 = frontier_phi_63_64_ladder_1;
        }
        float _2753 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
        _2548 = (_2753 * _2744) + _2079;
        _2550 = (_2753 * _2746) + _2081;
        _2552 = (_2753 * _2748) + _2083;
        _2554 = ((_2738 * 0.039999999105930328369140625) * _2753) + _2402;
        _2556 = ((_2740 * 0.039999999105930328369140625) * _2753) + _2404;
        _2558 = ((_2742 * 0.039999999105930328369140625) * _2753) + _2406;
    }
    else
    {
        _2548 = _2079;
        _2550 = _2081;
        _2552 = _2083;
        _2554 = _2402;
        _2556 = _2404;
        _2558 = _2406;
    }
    float _4520 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4531 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4542 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4553 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _2576 = ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2548 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _505))) + ((_2554 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    float _2577 = ((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2550 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _505))) + ((_2556 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    float _2578 = ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2552 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _505))) + ((_2558 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    float _2583 = cbInstanceData._m0[_479 + 6u].w * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)));
    float _2588 = _439 / cbSceneParam._m0[86u].x;
    float _2589 = _440 / cbSceneParam._m0[86u].y;
    vec4 _2603 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, (log2((isnan(cbSceneParam._m0[77u].w) ? _360 : (isnan(_360) ? cbSceneParam._m0[77u].w : min(_360, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2605 = _2603.x;
    float _2606 = _2603.y;
    float _2607 = _2603.z;
    float _2608 = _2603.w;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_360 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_360) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _360 : min(cbSceneParam._m0[80u].w, _360));
        float _2643 = _2642 / _360;
        float _2654 = _2643 * _411;
        float _2655 = _412 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2658 = _2643 * _413;
        float _2660 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2661 = _2660 + cbSceneParam._m0[79u].w;
        float _2662 = cbSceneParam._m0[79u].w - _2655;
        float _2668 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2658 * _2658));
        float _2671 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2668;
        float _2676 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2678 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2855;
        if (abs((_2656 - _2660) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2855 = ((((_2661 > 0.0) ? exp2(_2676 * _2661) : (2.0 - exp2(_2678 * _2661))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2671;
        }
        else
        {
            float _2799 = 1.0 / cbSceneParam._m0[80u].x;
            float _2800 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : max(_2661, _2662));
            float _2801 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : min(_2661, _2662));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            _2855 = ((abs(_2668 / _2656) * cbSceneParam._m0[80u].y) * ((((_2810 - _2811) * 2.0) - ((exp2(_2676 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)))) - exp2(_2676 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))))) * _2799)) - ((exp2(_2678 * _2810) - exp2(_2678 * _2811)) * _2799))) + (_2671 * cbSceneParam._m0[80u].z);
        }
        vec4 _2857 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, 1.0), 0.0);
        float _2866 = exp2((_2855 * (-1.44269502162933349609375)) * (1.0 - _2857.w));
        float _2867 = log2(_2866);
        float _2883 = log2(_2608);
        _2680 = (exp2(_2883 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].x)) * _2857.x) / cbSceneParam._m0[78u].x)) + _2605;
        _2682 = (exp2(_2883 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].y)) * _2857.y) / cbSceneParam._m0[78u].y)) + _2606;
        _2684 = (exp2(_2883 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].z)) * _2857.z) / cbSceneParam._m0[78u].z)) + _2607;
        _2686 = _2866 * _2608;
    }
    else
    {
        _2680 = _2605;
        _2682 = _2606;
        _2684 = _2607;
        _2686 = _2608;
    }
    bool _2893;
    vec4 _2696;
    vec4 _2718;
    float _2720;
    float _2724;
    float _2725;
    float _2726;
    float _2727;
    bool _2737;
    for (;;)
    {
        _2696 = cbMatDynParam._m0[0u];
        float _2698 = roundEven(_2696.y);
        bool _2699 = _2698 == 3.0;
        float _2700 = log2(_2686);
        float _2707 = exp2(_2700 * cbSceneParam._m0[78u].x) * _2576;
        float _2708 = exp2(_2700 * cbSceneParam._m0[78u].y) * _2577;
        float _2709 = exp2(_2700 * cbSceneParam._m0[78u].z) * _2578;
        float _2716 = _427 + (-0.5);
        _2718 = cbMtdParam._m0[1u];
        _2720 = _2718.y * _2716;
        float _2723 = (_2698 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2724 = _2723 * (_2699 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2680)));
        _2725 = _2723 * (_2699 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2682)));
        _2726 = _2723 * (_2699 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2684)));
        _2727 = _2716 * 0.999000012874603271484375;
        _2737 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2737)
        {
            if ((cbInstanceData._m0[_479 + 7u].x + _2727) < 0.5)
            {
                _2893 = true;
                break;
            }
        }
        uint _2834 = _481 + uint(_2696.w);
        if ((cbInstanceData._m0[_2834].w < 1.0) && ((cbInstanceData._m0[_2834].w + _2727) < 0.5))
        {
            _2893 = true;
            break;
        }
        if ((_2720 + _241) < _2718.x)
        {
            _2893 = true;
            break;
        }
        _2893 = false;
        break;
    }
    float _3097;
    if (_2893)
    {
        discard_state = true;
        _3097 = 0.0;
    }
    else
    {
        _3097 = _2583;
    }
    SV_Target.x = _2724;
    SV_Target.y = _2725;
    SV_Target.z = _2726;
    SV_Target.w = _3097;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2583;
    discard_exit();
}


