#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec2 TEXCOORD_1;
layout(location = 4) out vec4 TEXCOORD_1_1;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1_1.x = 0.0;
    TEXCOORD_1_1.y = 0.0;
    TEXCOORD_1_1.z = 0.0;
    TEXCOORD_1_1.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    float _184 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _198 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _208 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _210 = texelFetch(g_InstanceIndexBuffer, int(_208));
    uint _211 = _210.x;
    precise float _212 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _217 = isnan(_212) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _212 : max(0.001000000047497451305389404296875, _212));
    precise float _219 = BLENDWEIGHT.x / _217;
    precise float _220 = BLENDWEIGHT.y / _217;
    precise float _221 = BLENDWEIGHT.z / _217;
    precise float _222 = BLENDWEIGHT.w / _217;
    uvec4 _229 = floatBitsToUint(cbInstanceData._m0[(_211 * 13u) + 4u]);
    uint _230 = _229.x;
    uint _232 = (_230 + uint(float(BLENDINDICES.x))) * 3u;
    uint _239 = _232 + 1u;
    uint _246 = _232 + 2u;
    precise float _253 = _219 * cbObjMatrix._m0[_232].x;
    precise float _254 = _219 * cbObjMatrix._m0[_239].x;
    precise float _255 = _219 * cbObjMatrix._m0[_246].x;
    precise float _256 = _219 * cbObjMatrix._m0[_232].y;
    precise float _257 = _219 * cbObjMatrix._m0[_239].y;
    precise float _258 = _219 * cbObjMatrix._m0[_246].y;
    precise float _259 = _219 * cbObjMatrix._m0[_232].z;
    precise float _260 = _219 * cbObjMatrix._m0[_239].z;
    precise float _261 = _219 * cbObjMatrix._m0[_246].z;
    precise float _262 = _219 * cbObjMatrix._m0[_232].w;
    precise float _263 = _219 * cbObjMatrix._m0[_239].w;
    precise float _264 = _219 * cbObjMatrix._m0[_246].w;
    uint _267 = (_230 + uint(float(BLENDINDICES.y))) * 3u;
    uint _274 = _267 + 1u;
    uint _281 = _267 + 2u;
    precise float _288 = _220 * cbObjMatrix._m0[_267].x;
    precise float _289 = _220 * cbObjMatrix._m0[_274].x;
    precise float _290 = _220 * cbObjMatrix._m0[_281].x;
    precise float _291 = _220 * cbObjMatrix._m0[_267].y;
    precise float _292 = _220 * cbObjMatrix._m0[_274].y;
    precise float _293 = _220 * cbObjMatrix._m0[_281].y;
    precise float _294 = _220 * cbObjMatrix._m0[_267].z;
    precise float _295 = _220 * cbObjMatrix._m0[_274].z;
    precise float _296 = _220 * cbObjMatrix._m0[_281].z;
    precise float _297 = _220 * cbObjMatrix._m0[_267].w;
    precise float _298 = _220 * cbObjMatrix._m0[_274].w;
    precise float _299 = _220 * cbObjMatrix._m0[_281].w;
    precise float _300 = _253 + _288;
    precise float _301 = _254 + _289;
    precise float _302 = _255 + _290;
    precise float _303 = _256 + _291;
    precise float _304 = _257 + _292;
    precise float _305 = _258 + _293;
    precise float _306 = _259 + _294;
    precise float _307 = _260 + _295;
    precise float _308 = _261 + _296;
    precise float _309 = _262 + _297;
    precise float _310 = _263 + _298;
    precise float _311 = _264 + _299;
    uint _314 = (_230 + uint(float(BLENDINDICES.z))) * 3u;
    uint _321 = _314 + 1u;
    uint _328 = _314 + 2u;
    precise float _335 = _221 * cbObjMatrix._m0[_314].x;
    precise float _336 = _221 * cbObjMatrix._m0[_321].x;
    precise float _337 = _221 * cbObjMatrix._m0[_328].x;
    precise float _338 = _221 * cbObjMatrix._m0[_314].y;
    precise float _339 = _221 * cbObjMatrix._m0[_321].y;
    precise float _340 = _221 * cbObjMatrix._m0[_328].y;
    precise float _341 = _221 * cbObjMatrix._m0[_314].z;
    precise float _342 = _221 * cbObjMatrix._m0[_321].z;
    precise float _343 = _221 * cbObjMatrix._m0[_328].z;
    precise float _344 = _221 * cbObjMatrix._m0[_314].w;
    precise float _345 = _221 * cbObjMatrix._m0[_321].w;
    precise float _346 = _221 * cbObjMatrix._m0[_328].w;
    precise float _347 = _300 + _335;
    precise float _348 = _301 + _336;
    precise float _349 = _302 + _337;
    precise float _350 = _303 + _338;
    precise float _351 = _304 + _339;
    precise float _352 = _305 + _340;
    precise float _353 = _306 + _341;
    precise float _354 = _307 + _342;
    precise float _355 = _308 + _343;
    precise float _356 = _309 + _344;
    precise float _357 = _310 + _345;
    precise float _358 = _311 + _346;
    uint _361 = (_230 + uint(float(BLENDINDICES.w))) * 3u;
    uint _368 = _361 + 1u;
    uint _375 = _361 + 2u;
    precise float _382 = _222 * cbObjMatrix._m0[_361].x;
    precise float _383 = _222 * cbObjMatrix._m0[_368].x;
    precise float _384 = _222 * cbObjMatrix._m0[_375].x;
    precise float _385 = _222 * cbObjMatrix._m0[_361].y;
    precise float _386 = _222 * cbObjMatrix._m0[_368].y;
    precise float _387 = _222 * cbObjMatrix._m0[_375].y;
    precise float _388 = _222 * cbObjMatrix._m0[_361].z;
    precise float _389 = _222 * cbObjMatrix._m0[_368].z;
    precise float _390 = _222 * cbObjMatrix._m0[_375].z;
    precise float _391 = _222 * cbObjMatrix._m0[_361].w;
    precise float _392 = _222 * cbObjMatrix._m0[_368].w;
    precise float _393 = _222 * cbObjMatrix._m0[_375].w;
    precise float _394 = _347 + _382;
    precise float _395 = _348 + _383;
    precise float _396 = _349 + _384;
    precise float _397 = _350 + _385;
    precise float _398 = _351 + _386;
    precise float _399 = _352 + _387;
    precise float _400 = _353 + _388;
    precise float _401 = _354 + _389;
    precise float _402 = _355 + _390;
    precise float _403 = _356 + _391;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = POSITION.x * _394;
    precise float _407 = POSITION.y * _397;
    precise float _408 = _407 + _406;
    precise float _409 = POSITION.z * _400;
    precise float _410 = _409 + _408;
    precise float _411 = 1.0 * _403;
    precise float _412 = _411 + _410;
    precise float _413 = POSITION.x * _395;
    precise float _414 = POSITION.y * _398;
    precise float _415 = _414 + _413;
    precise float _416 = POSITION.z * _401;
    precise float _417 = _416 + _415;
    precise float _418 = 1.0 * _404;
    precise float _419 = _418 + _417;
    precise float _420 = POSITION.x * _396;
    precise float _421 = POSITION.y * _399;
    precise float _422 = _421 + _420;
    precise float _423 = POSITION.z * _402;
    precise float _424 = _423 + _422;
    precise float _425 = 1.0 * _405;
    precise float _426 = _425 + _424;
    float _432 = cbSceneParam._m0[3u].x - _412;
    float _433 = cbSceneParam._m0[3u].y - _419;
    float _434 = cbSceneParam._m0[3u].z - _426;
    precise float _460 = _412 - cbSceneParam._m0[3u].x;
    precise float _461 = _419 - cbSceneParam._m0[3u].y;
    precise float _462 = _426 - cbSceneParam._m0[3u].z;
    precise float _490 = _460 * cbSceneParam._m0[24u].x;
    precise float _491 = _461 * cbSceneParam._m0[24u].y;
    precise float _492 = _491 + _490;
    precise float _493 = _462 * cbSceneParam._m0[24u].z;
    precise float _494 = _493 + _492;
    precise float _495 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _496 = _495 + _494;
    precise float _497 = _460 * cbSceneParam._m0[25u].x;
    precise float _498 = _461 * cbSceneParam._m0[25u].y;
    precise float _499 = _498 + _497;
    precise float _500 = _462 * cbSceneParam._m0[25u].z;
    precise float _501 = _500 + _499;
    precise float _502 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _503 = _502 + _501;
    precise float _504 = _460 * cbSceneParam._m0[26u].x;
    precise float _505 = _461 * cbSceneParam._m0[26u].y;
    precise float _506 = _505 + _504;
    precise float _507 = _462 * cbSceneParam._m0[26u].z;
    precise float _508 = _507 + _506;
    precise float _509 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _510 = _509 + _508;
    precise float _511 = _460 * cbSceneParam._m0[27u].x;
    precise float _512 = _461 * cbSceneParam._m0[27u].y;
    precise float _513 = _512 + _511;
    precise float _514 = _462 * cbSceneParam._m0[27u].z;
    precise float _515 = _514 + _513;
    precise float _516 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _517 = _516 + _515;
    gl_Position.x = _496;
    gl_Position.y = _503;
    gl_Position.z = _510;
    gl_Position.w = _517;
    NORMAL_1.x = fma(_187, _400, fma(_186, _397, _394 * _184));
    NORMAL_1.y = fma(_187, _401, fma(_186, _398, _395 * _184));
    NORMAL_1.z = fma(_187, _402, fma(_186, _399, _396 * _184));
    NORMAL_1.w = float(_211);
    TANGENT_1.x = fma(_198, _400, fma(_197, _397, _394 * _196));
    TANGENT_1.y = fma(_198, _401, fma(_197, _398, _395 * _196));
    TANGENT_1.z = fma(_198, _402, fma(_197, _399, _396 * _196));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = COLOR_1.w;
    TEXCOORD_1.y = COLOR_1.x;
    TEXCOORD_1_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1_1.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_1_1.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_7.x = _510;
    TEXCOORD_7.y = _517;
    TEXCOORD_11 = sqrt(((_432 * _432) + (_433 * _433)) + (_434 * _434));
}


