#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _856;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    float _257 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[10u].x;
    float _258 = _230.w * TEXCOORD.x;
    float _269 = (_258 < 0.5) ? 0.0 : 1.0;
    float _279 = (((((_258 * 2.0) * (1.0 - _269)) * _257) + (-0.5)) + ((1.0 - (((1.0 - _258) * 2.0) * (1.0 - _257))) * _269)) * cbMtdParam._m0[10u].z;
    precise float _283 = _279 * ((_279 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _284 = cbMtdParam._m0[10u].y + _283;
    float _3198 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _290 = (_285 * _285) * (3.0 - (_285 * 2.0));
    vec4 _302 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _306 = _302.z;
    float _309 = (_302.x * 2.0) + (-1.0);
    float _311 = (_302.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3209 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _317 = sqrt(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))));
    float _320 = fma(_317, _200 * NORMAL.x, fma(_311, _207 * TANGENT.x, (_193 * _185) * _309));
    float _323 = fma(_317, _200 * NORMAL.y, fma(_311, _207 * TANGENT.y, (_193 * _186) * _309));
    float _326 = fma(_317, _200 * NORMAL.z, fma(_311, _207 * TANGENT.z, (_193 * _187) * _309));
    float _330 = inversesqrt(dot(vec3(_320, _323, _326), vec3(_320, _323, _326)));
    float _331 = _330 * _320;
    float _332 = _330 * _323;
    float _333 = _330 * _326;
    float _3220 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _334 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _335 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _3242 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3253 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3264 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _354 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _405 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _395);
    float _406 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _395);
    float _407 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _395);
    float _411 = inversesqrt(dot(vec3(_405, _406, _407), vec3(_405, _406, _407)));
    float _412 = _405 * _411;
    float _413 = _406 * _411;
    float _414 = _407 * _411;
    float _420 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _421 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_333, cbSceneParam._m0[5u].z, fma(_332, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _331));
    float _445 = fma(_333, cbSceneParam._m0[6u].z, fma(_332, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _331));
    float _448 = fma(_333, cbSceneParam._m0[7u].z, fma(_332, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _331));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = (_461 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3275 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _420, cbSceneParam._m0[86u].y * _421));
    float _487 = _484.x * TEXCOORD.y;
    float _488 = dot(vec3(_331, _332, _333), vec3(_412, _413, _414));
    float _491 = _488 * 2.0;
    float _495 = (_491 * _331) - _412;
    float _496 = (_491 * _332) - _413;
    float _497 = (_491 * _333) - _414;
    float _501 = abs(dot(vec3(_412, _413, _414), vec3(_331, _332, _333)));
    float _3308 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = sqrt(_335);
    float _515 = exp2((_503 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_503 * 3.0));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _855;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _586 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _590 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _613 = _547 + _331;
        float _614 = _551 + _332;
        float _615 = _555 + _333;
        float _625 = fma(_615, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) - _582;
        float _626 = fma(_615, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) - _586;
        float _627 = fma(_615, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) - _590;
        float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
        float _644 = ((_631 * _625) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_631 * _626) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_631 * _627) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        float _683 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_649.x + (-0.5));
        float _685 = _683 * (_649.y + (-0.5));
        float _686 = _683 * (_649.z + (-0.5));
        float _693 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_656.x + (-0.5));
        float _695 = _693 * (_656.y + (-0.5));
        float _696 = _693 * (_656.z + (-0.5));
        float _703 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_663.x + (-0.5));
        float _705 = _703 * (_663.y + (-0.5));
        float _706 = _703 * (_663.z + (-0.5));
        float _713 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_670.x + (-0.5));
        float _715 = _713 * (_670.y + (-0.5));
        float _716 = _713 * (_670.z + (-0.5));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = _684 * 0.5;
        float _721 = _694 * 0.5;
        float _722 = _704 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _737 = (dot(vec3(_331, _332, _333), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _747 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _749 = _748 * 2.0;
        float _753 = (1.0 - _748) / (_748 + 1.0);
        float _3356 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _763 = ((((1.0 - _754) * (_749 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_749 + 1.0))) + _754) * _717;
        float _764 = _685 * 0.5;
        float _765 = _695 * 0.5;
        float _766 = _705 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_331, _332, _333), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3389 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_791 + 1.0))) + _796) * _718;
        float _806 = _686 * 0.5;
        float _807 = _696 * 0.5;
        float _808 = _706 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_331, _332, _333), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3422 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_833 + 1.0))) + _838) * _719;
        _855 = _686;
        _857 = _685;
        _858 = _684;
        _859 = _696;
        _860 = _695;
        _861 = _694;
        _862 = _706;
        _863 = _705;
        _864 = _704;
        _865 = _719;
        _866 = _718;
        _867 = _717;
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
    }
    else
    {
        _855 = _856;
        _857 = _856;
        _858 = _856;
        _859 = _856;
        _860 = _856;
        _861 = _856;
        _862 = _856;
        _863 = _856;
        _864 = _856;
        _865 = _856;
        _866 = _856;
        _867 = _856;
        _868 = 0.0;
        _869 = 0.0;
        _870 = 0.0;
    }
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _896 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _900 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _904 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _927 = _547 + _331;
        float _928 = _551 + _332;
        float _929 = _555 + _333;
        float _939 = fma(_929, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927)) - _896;
        float _940 = fma(_929, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927)) - _900;
        float _941 = fma(_929, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927)) - _904;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_896 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_900 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[35u].z) + ((((((_904 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _995 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_962.x + (-0.5));
        float _997 = _995 * (_962.y + (-0.5));
        float _998 = _995 * (_962.z + (-0.5));
        float _1005 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_969.x + (-0.5));
        float _1007 = _1005 * (_969.y + (-0.5));
        float _1008 = _1005 * (_969.z + (-0.5));
        float _1015 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_976.x + (-0.5));
        float _1017 = _1015 * (_976.y + (-0.5));
        float _1018 = _1015 * (_976.z + (-0.5));
        float _1025 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_983.x + (-0.5));
        float _1027 = _1025 * (_983.y + (-0.5));
        float _1028 = _1025 * (_983.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_331, _332, _333), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3485 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1059 + 1.0))) + _1064) * _1029;
        float _1074 = _997 * 0.5;
        float _1075 = _1007 * 0.5;
        float _1076 = _1017 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_331, _332, _333), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3518 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1101 + 1.0))) + _1106) * _1030;
        float _1116 = _998 * 0.5;
        float _1117 = _1008 * 0.5;
        float _1118 = _1018 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_331, _332, _333), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3551 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1143 + 1.0))) + _1148) * _1031;
        _1165 = _998;
        _1166 = _997;
        _1167 = _996;
        _1168 = _1008;
        _1169 = _1007;
        _1170 = _1006;
        _1171 = _1018;
        _1172 = _1017;
        _1173 = _1016;
        _1174 = _1031;
        _1175 = _1030;
        _1176 = _1029;
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _856;
        _1166 = _856;
        _1167 = _856;
        _1168 = _856;
        _1169 = _856;
        _1170 = _856;
        _1171 = _856;
        _1172 = _856;
        _1173 = _856;
        _1174 = _856;
        _1175 = _856;
        _1176 = _856;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1212 = fma(_1191, cbSceneParam._m0[89u].z, fma(_1190, cbSceneParam._m0[89u].y, _1189 * cbSceneParam._m0[89u].x));
    float _1215 = fma(_1191, cbSceneParam._m0[90u].z, fma(_1190, cbSceneParam._m0[90u].y, _1189 * cbSceneParam._m0[90u].x));
    float _1218 = fma(_1191, cbSceneParam._m0[91u].z, fma(_1190, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1189));
    float _1233 = _495 * 0.5;
    float _1234 = _496 * 0.5;
    float _1235 = _497 * 0.5;
    float _1236 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1239 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1242 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1276;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1249 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_855, _859, _862, _865));
        float _1253 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_857, _860, _863, _866));
        float _1257 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_858, _861, _864, _867));
        float _1264 = dot(vec4(cbModelParam._m0[39u]), vec4(_1233, _1234, _1235, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1287;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1278 = dot(vec4(cbModelParam._m0[40u]), vec4(_1233, _1234, _1235, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1291 = (_1287 * cbModelParam._m0[1u].x) + (_1276 * (1.0 - cbModelParam._m0[1u].x));
    float _1301 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _335);
    float _1302 = isnan(_1301) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1301 : min(cbModelParam._m0[25u].z, _1301));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1365 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1368 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1396;
        if (_1362 > 0.0)
        {
            _1396 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1396 = frontier_phi_14_12_ladder;
        }
        float _1623;
        if (_1365 > 0.0)
        {
            _1623 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1623 = frontier_phi_23_19_ladder;
        }
        float _1869;
        if (_1368 > 0.0)
        {
            _1869 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1869 = frontier_phi_35_30_ladder;
        }
        float _1871 = isnan(_1623) ? _1396 : (isnan(_1396) ? _1623 : min(_1396, _1623));
        float _1872 = isnan(_1869) ? _1871 : (isnan(_1871) ? _1869 : min(_1871, _1869));
        float _1876 = (_1872 * _1362) + _1351;
        float _1877 = (_1872 * _1365) + _1355;
        float _1878 = (_1872 * _1368) + _1359;
        float _1879 = _1872 * 9.9999997473787516355514526367188e-05;
        float _1881 = (-1.0) - _1879;
        float _1883 = _1879 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1878 > _1883) || ((_1878 < _1881) || ((_1877 > _1883) || ((_1877 < _1881) || ((_1876 < _1881) || (_1876 > _1883))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1878, cbModelParam._m0[9u].z, fma(_1877, cbModelParam._m0[9u].y, _1876 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1878, cbModelParam._m0[10u].z, fma(_1877, cbModelParam._m0[10u].y, _1876 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1878, cbModelParam._m0[11u].z, fma(_1877, cbModelParam._m0[11u].y, _1876 * cbModelParam._m0[11u].x))), _1302);
            frontier_phi_13_35_ladder = _2002.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2002.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2002.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_13_35_ladder_2;
        _1386 = frontier_phi_13_35_ladder_1;
        _1388 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1302);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1392 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _335);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1392 : min(cbModelParam._m0[25u].w, _1392));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1464 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1467 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1628;
        if (_1461 > 0.0)
        {
            _1628 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1628 = frontier_phi_25_21_ladder;
        }
        float _1896;
        if (_1464 > 0.0)
        {
            _1896 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1896 = frontier_phi_37_32_ladder;
        }
        float _2101;
        if (_1467 > 0.0)
        {
            _2101 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2101 = frontier_phi_46_43_ladder;
        }
        float _2103 = isnan(_1896) ? _1628 : (isnan(_1628) ? _1896 : min(_1628, _1896));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1461) + _1450;
        float _2109 = (_2104 * _1464) + _1454;
        float _2110 = (_2104 * _1467) + _1458;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2111;
        float _2114 = _2111 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2110 > _2114) || ((_2110 < _2112) || ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 < _2112) || (_2108 > _2114))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2110, cbModelParam._m0[17u].z, fma(_2109, cbModelParam._m0[17u].y, _2108 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2110, cbModelParam._m0[18u].z, fma(_2109, cbModelParam._m0[18u].y, _2108 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2110, cbModelParam._m0[19u].z, fma(_2109, cbModelParam._m0[19u].y, _2108 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_22_46_ladder = _2311.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2311.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2311.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_22_46_ladder_2;
        _1488 = frontier_phi_22_46_ladder_1;
        _1490 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1393);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1502 = ((((1.0 - _515) * ((_503 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_515 * _503)) * _487;
    float _1503 = _1502 * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1504 = _1502 * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1505 = _1502 * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1508 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1503 * cbSceneParam._m0[91u].x));
    vec4 _1522 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_420, _421));
    float _1524 = _1522.w;
    float _1536 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1524);
    float _1537 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1524);
    float _1538 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1524);
    uvec4 _1542 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1544 = _1542.x * 14u;
    uint _1545 = _1544 + 13u;
    float _1552 = _487 + (-1.0);
    float _1557 = (cbLight._m0[_1545].x * _1552) + 1.0;
    float _1558 = (cbLight._m0[_1545].y * _1552) + 1.0;
    float _1559 = (cbLight._m0[_1545].z * _1552) + 1.0;
    float _1560 = (cbLight._m0[_1545].w * _1552) + 1.0;
    uint _1561 = _1544 + 5u;
    float _1567 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    uint _1571 = _1544 + 4u;
    float _1581 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
    uint _1585 = _1544 | 1u;
    float _1596 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_331, _332, _333));
    float _1599 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_331, _332, _333));
    float _3687 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _3698 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1604 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.3183098733425140380859375;
    float _1606 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.3183098733425140380859375;
    float _1613 = ((cbLight._m0[_1561].x * _1567) * _1606) + (((cbLight._m0[_1571].x * _1536) * _1581) * _1604);
    float _1614 = ((_1567 * cbLight._m0[_1561].y) * _1606) + (((cbLight._m0[_1571].y * _1537) * _1581) * _1604);
    float _1615 = ((_1567 * cbLight._m0[_1561].z) * _1606) + (((cbLight._m0[_1571].z * _1538) * _1581) * _1604);
    uvec4 _1620 = floatBitsToUint(cbLight._m0[_1544 + 12u]);
    bool _1622 = _1620.x == 0u;
    float _1633;
    float _1635;
    float _1637;
    if (_1622)
    {
        _1633 = _1613;
        _1635 = _1614;
        _1637 = _1615;
    }
    else
    {
        uint _1641 = _1544 + 6u;
        float _1657 = (dot(vec3(cbLight._m0[_1544 + 2u].xyz), vec3(_331, _332, _333)) * 0.5) + 0.5;
        float _1658 = _1657 * _1657;
        float _3709 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1660 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1633 = (((cbLight._m0[_1641].x * 0.3183098733425140380859375) * _1659) * _1660) + _1613;
        _1635 = (((cbLight._m0[_1641].y * 0.3183098733425140380859375) * _1659) * _1660) + _1614;
        _1637 = (((cbLight._m0[_1641].z * 0.3183098733425140380859375) * _1659) * _1660) + _1615;
    }
    bool _1640 = _1620.y == 0u;
    float _1678;
    float _1680;
    float _1682;
    if (_1640)
    {
        _1678 = _1633;
        _1680 = _1635;
        _1682 = _1637;
    }
    else
    {
        uint _1840 = _1544 + 7u;
        float _1856 = (dot(vec3(cbLight._m0[_1544 + 3u].xyz), vec3(_331, _332, _333)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3725 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1859 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1678 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1633;
        _1680 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1635;
        _1682 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1637;
    }
    uint _1685 = _1544 + 8u;
    float _1698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1544].w)) * _335) * 0.949999988079071044921875);
    float _1699 = _1698 * _1698;
    float _1700 = cbLight._m0[_1544].x + _412;
    float _1701 = cbLight._m0[_1544].y + _413;
    float _1702 = cbLight._m0[_1544].z + _414;
    float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
    float _1707 = _1706 * _1700;
    float _1708 = _1706 * _1701;
    float _1709 = _1706 * _1702;
    float _1710 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1544].xyz));
    float _3741 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1714 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1715 = dot(vec3(_331, _332, _333), vec3(_1707, _1708, _1709));
    float _3763 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1718 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1719 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_1707, _1708, _1709));
    float _3774 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1723 = _1699 * _1699;
    float _1727 = ((_1718 * _1718) * (_1723 + (-1.0))) + 1.0;
    float _1738 = (exp2(log2(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1739 = 1.0 - _1699;
    float _1750 = (0.5 / (((_1714 * ((_1713 * _1739) + _1699)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _1739) + _1699) * _1713))) * _1713;
    float _3785 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1752 = (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1723 / ((_1727 * _1727) * 3.141590118408203125));
    uint _1766 = _1544 + 9u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1585].w)) * _335) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1585].x + _412;
    float _1780 = cbLight._m0[_1585].y + _413;
    float _1781 = cbLight._m0[_1585].z + _414;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1585].xyz));
    float _3796 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1793 = dot(vec3(_331, _332, _333), vec3(_1786, _1787, _1788));
    float _3807 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_1786, _1787, _1788));
    float _3818 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1778 * _1778;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1814 = (exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1815 = 1.0 - _1778;
    float _1825 = (0.5 / (((_1714 * ((_1792 * _1815) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _1815) + _1778) * _1792))) * _1792;
    float _3829 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1827 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    float _1837 = (((_1814 * cbLight._m0[_1766].x) * _1827) * _1567) + ((((cbLight._m0[_1685].x * _1536) * _1738) * _1752) * _1581);
    float _1838 = (((_1814 * cbLight._m0[_1766].y) * _1827) * _1567) + ((((cbLight._m0[_1685].y * _1537) * _1738) * _1752) * _1581);
    float _1839 = (((_1814 * cbLight._m0[_1766].z) * _1827) * _1567) + ((((cbLight._m0[_1685].z * _1538) * _1738) * _1752) * _1581);
    float _1901;
    float _1903;
    float _1905;
    if (_1622)
    {
        _1901 = _1837;
        _1903 = _1838;
        _1905 = _1839;
    }
    else
    {
        uint _1907 = _1544 + 2u;
        uint _1911 = _1544 + 10u;
        float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _335) * 0.949999988079071044921875);
        float _1926 = _1925 * _1925;
        float _1927 = cbLight._m0[_1907].x + _412;
        float _1928 = cbLight._m0[_1907].y + _413;
        float _1929 = cbLight._m0[_1907].z + _414;
        float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
        float _1934 = _1933 * _1927;
        float _1935 = _1933 * _1928;
        float _1936 = _1933 * _1929;
        float _1937 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1907].xyz));
        float _3840 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1940 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1941 = dot(vec3(_331, _332, _333), vec3(_1934, _1935, _1936));
        float _3851 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1945 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_1934, _1935, _1936));
        float _3862 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1949 = _1926 * _1926;
        float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
        float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1963 = 1.0 - _1926;
        float _1973 = (0.5 / (((_1714 * ((_1940 * _1963) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _1963) + _1926) * _1940))) * _1940;
        float _3873 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1975 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
        float _1976 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1901 = (((_1962 * cbLight._m0[_1911].x) * _1975) * _1976) + _1837;
        _1903 = (((_1962 * cbLight._m0[_1911].y) * _1975) * _1976) + _1838;
        _1905 = (((_1962 * cbLight._m0[_1911].z) * _1975) * _1976) + _1839;
    }
    float _2011;
    float _2013;
    float _2015;
    if (_1640)
    {
        _2011 = _1901;
        _2013 = _1903;
        _2015 = _1905;
    }
    else
    {
        uint _2022 = _1544 + 3u;
        uint _2026 = _1544 + 11u;
        float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _335) * 0.949999988079071044921875);
        float _2041 = _2040 * _2040;
        float _2042 = cbLight._m0[_2022].x + _412;
        float _2043 = cbLight._m0[_2022].y + _413;
        float _2044 = cbLight._m0[_2022].z + _414;
        float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
        float _2049 = _2048 * _2042;
        float _2050 = _2048 * _2043;
        float _2051 = _2048 * _2044;
        float _2052 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_2022].xyz));
        float _3889 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _2056 = dot(vec3(_331, _332, _333), vec3(_2049, _2050, _2051));
        float _3900 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2060 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2049, _2050, _2051));
        float _3911 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2064 = _2041 * _2041;
        float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
        float _2077 = (exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2078 = 1.0 - _2041;
        float _2088 = (0.5 / (((_1714 * ((_2055 * _2078) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _2078) + _2041) * _2055))) * _2055;
        float _3922 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2090 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
        float _2091 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _2011 = (((_2077 * cbLight._m0[_2026].x) * _2090) * _2091) + _1901;
        _2013 = (((_2077 * cbLight._m0[_2026].y) * _2090) * _2091) + _1903;
        _2015 = (((_2077 * cbLight._m0[_2026].z) * _2090) * _2091) + _1905;
    }
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    if (_1542.y == 0u)
    {
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2166;
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2166;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2166;
        uvec4 _2181 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2182 = _2181.x;
        uint _2193 = uint((float(_2181.y) * floor(float(uint(cbSceneParam._m0[85u].y * _421) / _2182))) + floor(float(uint(cbSceneParam._m0[85u].x * _420) / _2182)));
        float _2203 = (log2(_2169 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2204 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        uint _2207 = uint(isnan(14.0) ? _2204 : (isnan(_2204) ? 14.0 : min(_2204, 14.0)));
        uvec4 _2212 = texelFetch(g_lightClusterGridBuffer, int(((_2207 << 2u) + (_2193 << 6u)) >> 2u));
        uint _2213 = _2212.x;
        uint _2214 = _2181.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2214 >> 4u) & 15u)) + 4294967295u) & _2213) == 0u) || ((_2214 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            uint _2467 = 0u;
            uint _2476;
            bool _2477;
            for (;;)
            {
                _2476 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2467 << 2u)) >> 2u)).x;
                _2477 = _2476 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2477)
                {
                    frontier_phi_61_pred = _2461;
                    frontier_phi_61_pred_1 = _2466;
                    frontier_phi_61_pred_2 = _2465;
                    frontier_phi_61_pred_3 = _2464;
                    frontier_phi_61_pred_4 = _2463;
                    frontier_phi_61_pred_5 = _2462;
                }
                else
                {
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    uint _2591;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2466;
                    _2591 = _2476;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    for (;;)
                    {
                        uint _2595 = uint(findLSB(_2591)) + (_2467 << 5u);
                        uint _2592 = (_2591 + 4294967295u) & _2591;
                        uint _2597 = _2595 * 48u;
                        vec4 _2611 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2597)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 3u)).x));
                        uint _2617 = (_2595 * 48u) + 4u;
                        vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 3u)).x));
                        uint _2636 = (_2595 * 48u) + 8u;
                        vec3 _2647 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x));
                        float _2651 = _2611.x - _2167;
                        float _2652 = _2611.y - _2168;
                        float _2653 = _2611.z - _2169;
                        float _2654 = dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653));
                        float _2657 = inversesqrt(_2654);
                        float _2658 = _2657 * _2651;
                        float _2659 = _2657 * _2652;
                        float _2660 = _2657 * _2653;
                        float _2661 = dot(vec3(_442, _445, _448), vec3(_2658, _2659, _2660));
                        float _2666 = 1.0 - (_2654 * _2611.w);
                        float _3948 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2667 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2668 = sqrt(_2654) * _2630.w;
                        float _2671 = 1.39999997615814208984375 / (_2668 + 1.39999997615814208984375);
                        float _2672 = _2671 * _2671;
                        float _2675 = ((1.0 - _2672) * _2661) + _2672;
                        float _2678 = _2668 * _2668;
                        float _2682 = ((isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0))) * _2667) / ((_2678 * 0.699999988079071044921875) + 1.0);
                        float _2686 = (-0.0) - _2167;
                        float _2687 = (-0.0) - _2168;
                        float _2688 = (-0.0) - _2169;
                        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
                        float _2693 = _2692 * _2686;
                        float _2694 = _2692 * _2687;
                        float _2695 = _2692 * _2688;
                        float _2703 = exp2(log2(1.0 / ((_2678 * 3.5) + 5.0)) * 0.25);
                        float _2704 = 1.0 - _503;
                        float _2711 = sqrt(1.0 - ((1.0 - (_2704 * _2704)) * (1.0 - (_2703 * _2703))));
                        float _2712 = _2711 * _2711;
                        float _2713 = _2712 * _2712;
                        float _2714 = _2693 + _2658;
                        float _2715 = _2694 + _2659;
                        float _2716 = _2695 + _2660;
                        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
                        float _2724 = dot(vec3(_442, _445, _448), vec3(_2693, _2694, _2695));
                        float _3964 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2728 = dot(vec3(_442, _445, _448), vec3(_2720 * _2714, _2720 * _2715, _2720 * _2716));
                        float _3975 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2731 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2735 = ((_2731 * _2731) * (_2713 + (-1.0))) + 1.0;
                        float _2736 = _2671 * _2712;
                        float _2737 = _2736 * _2736;
                        float _2740 = ((1.0 - _2737) * _2661) + _2737;
                        float _3986 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                        float _2741 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2742 = 1.0 - _2712;
                        float _2752 = (0.5 / (((_2741 * ((_2727 * _2742) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2741 * _2742) + _2712) * _2727))) * _2741;
                        float _3997 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2763 = (((_2713 * 3.1415927410125732421875) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) / ((_2735 * _2735) * ((_2678 * 2.1991131305694580078125) + 3.141590118408203125))) * _2667;
                        _2520 = (_2682 * _2630.x) + _2588;
                        _2521 = (_2682 * _2630.y) + _2589;
                        _2522 = (_2682 * _2630.z) + _2590;
                        _2517 = (_2763 * _2647.x) + _2585;
                        _2518 = (_2763 * _2647.y) + _2586;
                        _2519 = (_2763 * _2647.z) + _2587;
                        if (_2592 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2522;
                            _2591 = _2592;
                        }
                    }
                    frontier_phi_61_pred = _2517;
                    frontier_phi_61_pred_1 = _2522;
                    frontier_phi_61_pred_2 = _2521;
                    frontier_phi_61_pred_3 = _2520;
                    frontier_phi_61_pred_4 = _2519;
                    frontier_phi_61_pred_5 = _2518;
                }
                _2317 = frontier_phi_61_pred;
                _2327 = frontier_phi_61_pred_1;
                _2325 = frontier_phi_61_pred_2;
                _2323 = frontier_phi_61_pred_3;
                _2321 = frontier_phi_61_pred_4;
                _2319 = frontier_phi_61_pred_5;
                uint _2468 = _2467 + 1u;
                if (_2468 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2461 = _2317;
                    _2462 = _2319;
                    _2463 = _2321;
                    _2464 = _2323;
                    _2465 = _2325;
                    _2466 = _2327;
                    _2467 = _2468;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((4294967295u << _2333) & _2213) == 0u)
        {
            _2429 = _2316;
            _2431 = _2318;
            _2433 = _2320;
            _2435 = _2322;
            _2437 = _2324;
            _2439 = _2326;
        }
        else
        {
            float _2454 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
            float _2455 = _2454 * _2167;
            float _2456 = _2454 * _2168;
            float _2457 = _2454 * _2169;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2568 = _2316;
                float _2569 = _2318;
                float _2570 = _2320;
                float _2571 = _2322;
                float _2572 = _2324;
                float _2573 = _2326;
                uint _2574 = _2333;
                uint _2583;
                bool _2584;
                for (;;)
                {
                    _2583 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2574 << 2u)) >> 2u)).x;
                    _2584 = _2583 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2584)
                    {
                        frontier_phi_67_pred = _2571;
                        frontier_phi_67_pred_1 = _2572;
                        frontier_phi_67_pred_2 = _2573;
                        frontier_phi_67_pred_3 = _2570;
                        frontier_phi_67_pred_4 = _2569;
                        frontier_phi_67_pred_5 = _2568;
                    }
                    else
                    {
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        float _2786 = _2573;
                        uint _2787 = _2583;
                        uint _2788;
                        vec4 _2813;
                        float _2814;
                        vec4 _2829;
                        vec3 _2841;
                        vec4 _2857;
                        vec4 _2873;
                        float _2920;
                        bool _2921;
                        for (;;)
                        {
                            uint _2798 = ((_2574 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2787));
                            _2788 = (_2787 + 4294967295u) & _2787;
                            uint _2800 = _2798 * 40u;
                            _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            _2814 = _2813.w;
                            uint _2816 = (_2798 * 40u) + 4u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2831 = (_2798 * 40u) + 8u;
                            _2841 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x));
                            uint _2844 = (_2798 * 40u) + 16u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2860 = (_2798 * 40u) + 20u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2876 = (_2798 * 40u) + 24u;
                            vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2895 = (_2798 * 40u) + 28u;
                            vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            _2920 = fma(_2169, _2908.z, fma(_2168, _2908.y, _2908.x * _2167)) + _2908.w;
                            _2921 = !((fma(_2169, _2889.z, fma(_2168, _2889.y, _2889.x * _2167)) + _2889.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2921)
                            {
                                float _2948 = _2813.x - _2167;
                                float _2949 = _2813.y - _2168;
                                float _2950 = _2813.z - _2169;
                                float _2951 = dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950));
                                float _2954 = inversesqrt(_2951);
                                float _2955 = _2954 * _2948;
                                float _2956 = _2954 * _2949;
                                float _2957 = _2954 * _2950;
                                float _2961 = 1.0 - (_2951 / (_2814 * _2814));
                                float _4008 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                                float _2962 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _2966 = sqrt(_2951) * _2829.w;
                                float _2968 = 1.39999997615814208984375 / (_2966 + 1.39999997615814208984375);
                                float _2969 = _2968 * _2968;
                                float _2972 = ((1.0 - _2969) * dot(vec3(_2955, _2956, _2957), vec3(_442, _445, _448))) + _2969;
                                float _2975 = _2966 * _2966;
                                float _2979 = (fma(_2169, _2857.z, fma(_2168, _2857.y, _2857.x * _2167)) + _2857.w) / _2920;
                                float _2980 = (fma(_2169, _2873.z, fma(_2168, _2873.y, _2873.x * _2167)) + _2873.w) / _2920;
                                float _2984 = 1.0 - dot(vec2(_2979, _2980), vec2(_2979, _2980));
                                float _4024 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _2986 = _2985 * (((isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))) * _2962) / ((_2975 * 0.699999988079071044921875) + 1.0));
                                float _2998 = exp2(log2(1.0 / ((_2975 * 3.5) + 5.0)) * 0.25);
                                float _2999 = 1.0 - _503;
                                float _3006 = sqrt(1.0 - ((1.0 - (_2999 * _2999)) * (1.0 - (_2998 * _2998))));
                                float _3007 = _3006 * _3006;
                                float _3008 = _3007 * _3007;
                                float _3009 = _2955 - _2455;
                                float _3010 = _2956 - _2456;
                                float _3011 = _2957 - _2457;
                                float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
                                float _3019 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2455, (-0.0) - _2456, (-0.0) - _2457));
                                float _4035 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3022 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3023 = dot(vec3(_442, _445, _448), vec3(_3015 * _3009, _3015 * _3010, _3015 * _3011));
                                float _4046 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3026 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3030 = ((_3026 * _3026) * (_3008 + (-1.0))) + 1.0;
                                float _3031 = _2968 * _3007;
                                float _3032 = _3031 * _3031;
                                float _3038 = ((1.0 - _3032) * dot(vec3(_442, _445, _448), vec3(_2955, _2956, _2957))) + _3032;
                                float _4057 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3040 = 1.0 - _3007;
                                float _3050 = (0.5 / (((_3039 * ((_3022 * _3040) + _3007)) + 9.9999999392252902907785028219223e-09) + (((_3039 * _3040) + _3007) * _3022))) * _3039;
                                float _4068 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3060 = (_2985 * _2962) * (((_3008 * 3.1415927410125732421875) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) / ((_3030 * _3030) * ((_2975 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3060 * _2841.x;
                                frontier_phi_73_pred_1 = _3060 * _2841.y;
                                frontier_phi_73_pred_2 = _2986 * _2829.z;
                                frontier_phi_73_pred_3 = _2986 * _2829.y;
                                frontier_phi_73_pred_4 = _2986 * _2829.x;
                                frontier_phi_73_pred_5 = _3060 * _2841.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3064 = frontier_phi_73_pred;
                            _3065 = frontier_phi_73_pred_1;
                            _3069 = frontier_phi_73_pred_2;
                            _3068 = frontier_phi_73_pred_3;
                            _3067 = frontier_phi_73_pred_4;
                            _3066 = frontier_phi_73_pred_5;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            _2768 = _3064 + _2781;
                            _2769 = _3065 + _2782;
                            _2770 = _3066 + _2783;
                            if (_2788 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2788;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2771;
                        frontier_phi_67_pred_1 = _2772;
                        frontier_phi_67_pred_2 = _2773;
                        frontier_phi_67_pred_3 = _2770;
                        frontier_phi_67_pred_4 = _2769;
                        frontier_phi_67_pred_5 = _2768;
                    }
                    _2436 = frontier_phi_67_pred;
                    _2438 = frontier_phi_67_pred_1;
                    _2440 = frontier_phi_67_pred_2;
                    _2434 = frontier_phi_67_pred_3;
                    _2432 = frontier_phi_67_pred_4;
                    _2430 = frontier_phi_67_pred_5;
                    uint _2575 = _2574 + 1u;
                    if (_2575 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2568 = _2430;
                        _2569 = _2432;
                        _2570 = _2434;
                        _2571 = _2436;
                        _2572 = _2438;
                        _2573 = _2440;
                        _2574 = _2575;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2438;
                frontier_phi_55_56_ladder_1 = _2440;
                frontier_phi_55_56_ladder_2 = _2436;
                frontier_phi_55_56_ladder_3 = _2434;
                frontier_phi_55_56_ladder_4 = _2432;
                frontier_phi_55_56_ladder_5 = _2430;
            }
            else
            {
                frontier_phi_55_56_ladder = _2324;
                frontier_phi_55_56_ladder_1 = _2326;
                frontier_phi_55_56_ladder_2 = _2322;
                frontier_phi_55_56_ladder_3 = _2320;
                frontier_phi_55_56_ladder_4 = _2318;
                frontier_phi_55_56_ladder_5 = _2316;
            }
            _2429 = frontier_phi_55_56_ladder_5;
            _2431 = frontier_phi_55_56_ladder_4;
            _2433 = frontier_phi_55_56_ladder_3;
            _2435 = frontier_phi_55_56_ladder_2;
            _2437 = frontier_phi_55_56_ladder;
            _2439 = frontier_phi_55_56_ladder_1;
        }
        float _2444 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2226 = (_2444 * _2435) + _1678;
        _2228 = (_2444 * _2437) + _1680;
        _2230 = (_2444 * _2439) + _1682;
        _2232 = ((_2429 * 0.039999999105930328369140625) * _2444) + _2011;
        _2234 = ((_2431 * 0.039999999105930328369140625) * _2444) + _2013;
        _2236 = ((_2433 * 0.039999999105930328369140625) * _2444) + _2015;
    }
    else
    {
        _2226 = _1678;
        _2228 = _1680;
        _2230 = _1682;
        _2232 = _2011;
        _2234 = _2013;
        _2236 = _2015;
    }
    float _4084 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4095 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4106 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4117 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _2261 = cbInstanceData._m0[_461 + 6u].w * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)));
    float _2266 = _420 / cbSceneParam._m0[86u].x;
    float _2267 = _421 / cbSceneParam._m0[86u].y;
    vec4 _2281 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, (log2((isnan(cbSceneParam._m0[77u].w) ? _354 : (isnan(_354) ? cbSceneParam._m0[77u].w : min(_354, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2283 = _2281.x;
    float _2284 = _2281.y;
    float _2285 = _2281.z;
    float _2286 = _2281.w;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_354 > cbSceneParam._m0[78u].w)
    {
        float _2341 = isnan(_354) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _354 : min(cbSceneParam._m0[80u].w, _354));
        float _2342 = _2341 / _354;
        float _2353 = _2342 * _405;
        float _2354 = _406 * _2342;
        float _2355 = (-0.0) - _2354;
        float _2357 = _2342 * _407;
        float _2359 = (cbSceneParam._m0[77u].w * _2355) / _2341;
        float _2360 = _2359 + cbSceneParam._m0[79u].w;
        float _2361 = cbSceneParam._m0[79u].w - _2354;
        float _2367 = sqrt(((_2353 * _2353) + (_2354 * _2354)) + (_2357 * _2357));
        float _2370 = (1.0 - (cbSceneParam._m0[77u].w / _2341)) * _2367;
        float _2375 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2377 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2530;
        if (abs((_2355 - _2359) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2530 = ((((_2360 > 0.0) ? exp2(_2375 * _2360) : (2.0 - exp2(_2377 * _2360))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2370;
        }
        else
        {
            float _2490 = 1.0 / cbSceneParam._m0[80u].x;
            float _2491 = isnan(_2361) ? _2360 : (isnan(_2360) ? _2361 : max(_2360, _2361));
            float _2492 = isnan(_2361) ? _2360 : (isnan(_2360) ? _2361 : min(_2360, _2361));
            float _2501 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : min(_2491, 0.0));
            float _2502 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : min(_2492, 0.0));
            _2530 = ((abs(_2367 / _2355) * cbSceneParam._m0[80u].y) * ((((_2501 - _2502) * 2.0) - ((exp2(_2375 * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0)))) - exp2(_2375 * (isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0))))) * _2490)) - ((exp2(_2377 * _2501) - exp2(_2377 * _2502)) * _2490))) + (_2370 * cbSceneParam._m0[80u].z);
        }
        vec4 _2532 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, 1.0), 0.0);
        float _2541 = exp2((_2530 * (-1.44269502162933349609375)) * (1.0 - _2532.w));
        float _2542 = log2(_2541);
        float _2558 = log2(_2286);
        _2379 = (exp2(_2558 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].x)) * _2532.x) / cbSceneParam._m0[78u].x)) + _2283;
        _2381 = (exp2(_2558 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].y)) * _2532.y) / cbSceneParam._m0[78u].y)) + _2284;
        _2383 = (exp2(_2558 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].z)) * _2532.z) / cbSceneParam._m0[78u].z)) + _2285;
        _2385 = _2541 * _2286;
    }
    else
    {
        _2379 = _2283;
        _2381 = _2284;
        _2383 = _2285;
        _2385 = _2286;
    }
    float _2397 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2398 = _2397 == 3.0;
    float _2399 = log2(_2385);
    float _2406 = exp2(_2399 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2226 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _487))) + ((_2232 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2407 = exp2(_2399 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2228 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _487))) + ((_2234 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2408 = exp2(_2399 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2230 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _487))) + ((_2236 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2417 = (_2397 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2417 * (_2398 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.y = _2417 * (_2398 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.z = _2417 * (_2398 ? _2408 : (_2408 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.w = _2261;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2261;
}


