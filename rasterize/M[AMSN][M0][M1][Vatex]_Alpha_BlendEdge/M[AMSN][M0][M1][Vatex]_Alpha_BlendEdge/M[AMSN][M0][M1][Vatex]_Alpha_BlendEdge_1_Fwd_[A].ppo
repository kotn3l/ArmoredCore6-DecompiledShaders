#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _899;
float _3271;
float _3272;
float _3273;
float _3274;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _232.w;
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    float _259 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[10u].x;
    float _260 = _237 * TEXCOORD.x;
    float _271 = (_260 < 0.5) ? 0.0 : 1.0;
    float _281 = (((((_260 * 2.0) * (1.0 - _271)) * _259) + (-0.5)) + ((1.0 - (((1.0 - _260) * 2.0) * (1.0 - _259))) * _271)) * cbMtdParam._m0[10u].z;
    precise float _285 = _281 * ((_281 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _286 = cbMtdParam._m0[10u].y + _285;
    float _3283 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _287 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _292 = (_287 * _287) * (3.0 - (_287 * 2.0));
    vec4 _304 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _308 = _304.z;
    float _311 = (_304.x * 2.0) + (-1.0);
    float _313 = (_304.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3294 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _319 = sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))));
    float _322 = fma(_319, _202 * NORMAL.x, fma(_313, _209 * TANGENT.x, (_195 * _187) * _311));
    float _325 = fma(_319, _202 * NORMAL.y, fma(_313, _209 * TANGENT.y, (_195 * _188) * _311));
    float _328 = fma(_319, _202 * NORMAL.z, fma(_313, _209 * TANGENT.z, (_195 * _189) * _311));
    float _332 = inversesqrt(dot(vec3(_322, _325, _328), vec3(_322, _325, _328)));
    float _333 = _332 * _322;
    float _334 = _332 * _325;
    float _335 = _332 * _328;
    float _3305 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _336 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _337 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3338 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3349 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _356 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _407 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _397);
    float _408 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _397);
    float _409 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _397);
    float _413 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _414 = _407 * _413;
    float _415 = _408 * _413;
    float _416 = _409 * _413;
    vec4 _421 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _423 = _421.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _580 = sqrt(((_407 * _407) + (_408 * _408)) + (_409 * _409));
        float _586 = (cbMatDynParam._m0[5u].x * _580) + cbMatDynParam._m0[5u].y;
        float _3360 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _587 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _591 = (cbMatDynParam._m0[5u].z * _580) + cbMatDynParam._m0[5u].w;
        float _3371 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) - _587)) + _587) < ((_423 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _435 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _436 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _456 = fma(_335, cbSceneParam._m0[5u].z, fma(_334, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _333));
    float _459 = fma(_335, cbSceneParam._m0[6u].z, fma(_334, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _333));
    float _462 = fma(_335, cbSceneParam._m0[7u].z, fma(_334, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _333));
    uint _475 = uint(roundEven(NORMAL.w)) * 13u;
    uint _477 = _475 + 9u;
    uint _478 = _477 + uint(cbMatDynParam._m0[0u].w);
    float _484 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_478].x;
    float _485 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_478].y;
    float _486 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_478].z;
    float _3382 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    vec4 _498 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _435, cbSceneParam._m0[86u].y * _436));
    float _501 = _498.x * TEXCOORD.y;
    float _502 = dot(vec3(_333, _334, _335), vec3(_414, _415, _416));
    float _505 = _502 * 2.0;
    float _509 = (_505 * _333) - _414;
    float _510 = (_505 * _334) - _415;
    float _511 = (_505 * _335) - _416;
    float _515 = abs(dot(vec3(_414, _415, _416), vec3(_333, _334, _335)));
    float _3415 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _517 = sqrt(_337);
    float _529 = exp2((_517 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_517 * 3.0));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _898;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _625 = fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561));
        float _629 = fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561));
        float _633 = fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561));
        float _656 = _561 + _333;
        float _657 = _565 + _334;
        float _658 = _569 + _335;
        float _668 = fma(_658, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) - _625;
        float _669 = fma(_658, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) - _629;
        float _670 = fma(_658, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) - _633;
        float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
        float _687 = ((_674 * _668) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_625 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_674 * _669) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_629 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_674 * _670) / cbModelParam._m0[34u].z) + ((((((_633 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_692.x + (-0.5));
        float _728 = _726 * (_692.y + (-0.5));
        float _729 = _726 * (_692.z + (-0.5));
        float _736 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_699.x + (-0.5));
        float _738 = _736 * (_699.y + (-0.5));
        float _739 = _736 * (_699.z + (-0.5));
        float _746 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_706.x + (-0.5));
        float _748 = _746 * (_706.y + (-0.5));
        float _749 = _746 * (_706.z + (-0.5));
        float _756 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_713.x + (-0.5));
        float _758 = _756 * (_713.y + (-0.5));
        float _759 = _756 * (_713.z + (-0.5));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = _727 * 0.5;
        float _764 = _737 * 0.5;
        float _765 = _747 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _780 = (dot(vec3(_333, _334, _335), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _790 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3463 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_792 + 1.0))) + _797) * _760;
        float _807 = _728 * 0.5;
        float _808 = _738 * 0.5;
        float _809 = _748 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_333, _334, _335), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3496 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_834 + 1.0))) + _839) * _761;
        float _849 = _729 * 0.5;
        float _850 = _739 * 0.5;
        float _851 = _749 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_333, _334, _335), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3529 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_876 + 1.0))) + _881) * _762;
        _898 = _729;
        _900 = _728;
        _901 = _727;
        _902 = _739;
        _903 = _738;
        _904 = _737;
        _905 = _749;
        _906 = _748;
        _907 = _747;
        _908 = _762;
        _909 = _761;
        _910 = _760;
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
    }
    else
    {
        _898 = _899;
        _900 = _899;
        _901 = _899;
        _902 = _899;
        _903 = _899;
        _904 = _899;
        _905 = _899;
        _906 = _899;
        _907 = _899;
        _908 = _899;
        _909 = _899;
        _910 = _899;
        _911 = 0.0;
        _912 = 0.0;
        _913 = 0.0;
    }
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _942 = fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561));
        float _946 = fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561));
        float _950 = fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561));
        float _973 = _561 + _333;
        float _974 = _565 + _334;
        float _975 = _569 + _335;
        float _985 = fma(_975, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973)) - _942;
        float _986 = fma(_975, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973)) - _946;
        float _987 = fma(_975, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973)) - _950;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_942 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_946 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[35u].z) + ((((((_950 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1041 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1008.x + (-0.5));
        float _1043 = _1041 * (_1008.y + (-0.5));
        float _1044 = _1041 * (_1008.z + (-0.5));
        float _1051 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1015.x + (-0.5));
        float _1053 = _1051 * (_1015.y + (-0.5));
        float _1054 = _1051 * (_1015.z + (-0.5));
        float _1061 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1022.x + (-0.5));
        float _1063 = _1061 * (_1022.y + (-0.5));
        float _1064 = _1061 * (_1022.z + (-0.5));
        float _1071 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1029.x + (-0.5));
        float _1073 = _1071 * (_1029.y + (-0.5));
        float _1074 = _1071 * (_1029.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_333, _334, _335), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3592 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1105 + 1.0))) + _1110) * _1075;
        float _1120 = _1043 * 0.5;
        float _1121 = _1053 * 0.5;
        float _1122 = _1063 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_333, _334, _335), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3625 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1147 + 1.0))) + _1152) * _1076;
        float _1162 = _1044 * 0.5;
        float _1163 = _1054 * 0.5;
        float _1164 = _1064 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_333, _334, _335), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3658 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1189 + 1.0))) + _1194) * _1077;
        _1211 = _1044;
        _1212 = _1043;
        _1213 = _1042;
        _1214 = _1054;
        _1215 = _1053;
        _1216 = _1052;
        _1217 = _1064;
        _1218 = _1063;
        _1219 = _1062;
        _1220 = _1077;
        _1221 = _1076;
        _1222 = _1075;
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _899;
        _1212 = _899;
        _1213 = _899;
        _1214 = _899;
        _1215 = _899;
        _1216 = _899;
        _1217 = _899;
        _1218 = _899;
        _1219 = _899;
        _1220 = _899;
        _1221 = _899;
        _1222 = _899;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1258 = fma(_1237, cbSceneParam._m0[89u].z, fma(_1236, cbSceneParam._m0[89u].y, _1235 * cbSceneParam._m0[89u].x));
    float _1261 = fma(_1237, cbSceneParam._m0[90u].z, fma(_1236, cbSceneParam._m0[90u].y, _1235 * cbSceneParam._m0[90u].x));
    float _1264 = fma(_1237, cbSceneParam._m0[91u].z, fma(_1236, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1235));
    float _1279 = _509 * 0.5;
    float _1280 = _510 * 0.5;
    float _1281 = _511 * 0.5;
    float _1282 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1285 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1288 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1322;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1295 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_898, _902, _905, _908));
        float _1299 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_900, _903, _906, _909));
        float _1303 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_901, _904, _907, _910));
        float _1310 = dot(vec4(cbModelParam._m0[39u]), vec4(_1279, _1280, _1281, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1333;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1324 = dot(vec4(cbModelParam._m0[40u]), vec4(_1279, _1280, _1281, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1337 = (_1333 * cbModelParam._m0[1u].x) + (_1322 * (1.0 - cbModelParam._m0[1u].x));
    float _1347 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1347 : min(cbModelParam._m0[25u].z, _1347));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1397 = fma(_569, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561)) + cbModelParam._m0[13u].w;
        float _1401 = fma(_569, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561)) + cbModelParam._m0[14u].w;
        float _1405 = fma(_569, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561)) + cbModelParam._m0[15u].w;
        float _1408 = fma(_511, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509));
        float _1411 = fma(_511, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509));
        float _1414 = fma(_511, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509));
        float _1442;
        if (_1408 > 0.0)
        {
            _1442 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1442 = frontier_phi_17_15_ladder;
        }
        float _1648;
        if (_1411 > 0.0)
        {
            _1648 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1648 = frontier_phi_26_22_ladder;
        }
        float _1891;
        if (_1414 > 0.0)
        {
            _1891 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1891 = frontier_phi_38_33_ladder;
        }
        float _1893 = isnan(_1648) ? _1442 : (isnan(_1442) ? _1648 : min(_1442, _1648));
        float _1894 = isnan(_1891) ? _1893 : (isnan(_1893) ? _1891 : min(_1893, _1891));
        float _1898 = (_1894 * _1408) + _1397;
        float _1899 = (_1894 * _1411) + _1401;
        float _1900 = (_1894 * _1414) + _1405;
        float _1901 = _1894 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1901;
        float _1905 = _1901 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 > _1905) || ((_1899 < _1903) || ((_1898 < _1903) || (_1898 > _1905))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1900, cbModelParam._m0[9u].z, fma(_1899, cbModelParam._m0[9u].y, _1898 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1900, cbModelParam._m0[10u].z, fma(_1899, cbModelParam._m0[10u].y, _1898 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1900, cbModelParam._m0[11u].z, fma(_1899, cbModelParam._m0[11u].y, _1898 * cbModelParam._m0[11u].x))), _1348);
            frontier_phi_16_38_ladder = _2024.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2024.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2024.x * cbModelParam._m0[1u].y;
        }
        _1430 = frontier_phi_16_38_ladder_2;
        _1432 = frontier_phi_16_38_ladder_1;
        _1434 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_509, _510, _511), _1348);
        _1430 = _1418.x * cbModelParam._m0[1u].y;
        _1432 = _1418.y * cbModelParam._m0[1u].y;
        _1434 = _1418.z * cbModelParam._m0[1u].y;
    }
    float _1438 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1439 = isnan(_1438) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1438 : min(cbModelParam._m0[25u].w, _1438));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1496 = fma(_569, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561)) + cbModelParam._m0[21u].w;
        float _1500 = fma(_569, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561)) + cbModelParam._m0[22u].w;
        float _1504 = fma(_569, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561)) + cbModelParam._m0[23u].w;
        float _1507 = fma(_511, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509));
        float _1510 = fma(_511, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509));
        float _1513 = fma(_511, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509));
        float _1653;
        if (_1507 > 0.0)
        {
            _1653 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1653 = frontier_phi_28_24_ladder;
        }
        float _1918;
        if (_1510 > 0.0)
        {
            _1918 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1918 = frontier_phi_40_35_ladder;
        }
        float _2123;
        if (_1513 > 0.0)
        {
            _2123 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2123 = frontier_phi_49_46_ladder;
        }
        float _2125 = isnan(_1918) ? _1653 : (isnan(_1653) ? _1918 : min(_1653, _1918));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1507) + _1496;
        float _2131 = (_2126 * _1510) + _1500;
        float _2132 = (_2126 * _1513) + _1504;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2133;
        float _2136 = _2133 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2132 > _2136) || ((_2132 < _2134) || ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 < _2134) || (_2130 > _2136))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2132, cbModelParam._m0[17u].z, fma(_2131, cbModelParam._m0[17u].y, _2130 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2132, cbModelParam._m0[18u].z, fma(_2131, cbModelParam._m0[18u].y, _2130 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2132, cbModelParam._m0[19u].z, fma(_2131, cbModelParam._m0[19u].y, _2130 * cbModelParam._m0[19u].x))), _1439);
            frontier_phi_25_49_ladder = _2333.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2333.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2333.x * cbModelParam._m0[1u].z;
        }
        _1532 = frontier_phi_25_49_ladder_2;
        _1534 = frontier_phi_25_49_ladder_1;
        _1536 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_509, _510, _511), _1439);
        _1532 = _1516.x * cbModelParam._m0[1u].z;
        _1534 = _1516.y * cbModelParam._m0[1u].z;
        _1536 = _1516.z * cbModelParam._m0[1u].z;
    }
    float _1548 = ((((1.0 - _529) * ((_517 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_529 * _517)) * _501;
    float _1549 = _1548 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1550 = _1548 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1551 = _1548 * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1554 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, _1549 * cbSceneParam._m0[91u].x));
    uvec4 _1570 = floatBitsToUint(cbInstanceData._m0[_475 + 5u]);
    uint _1572 = _1570.x * 14u;
    uint _1573 = _1572 + 13u;
    float _1580 = _501 + (-1.0);
    float _1585 = (cbLight._m0[_1573].x * _1580) + 1.0;
    float _1586 = (cbLight._m0[_1573].y * _1580) + 1.0;
    float _1587 = (cbLight._m0[_1573].z * _1580) + 1.0;
    float _1588 = (cbLight._m0[_1573].w * _1580) + 1.0;
    uint _1589 = _1572 + 5u;
    float _1595 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
    uint _1599 = _1572 + 4u;
    float _1606 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1610 = _1572 | 1u;
    float _1621 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_333, _334, _335));
    float _1624 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_333, _334, _335));
    float _3794 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _3805 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1629 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1631 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1638 = ((cbLight._m0[_1589].x * _1595) * _1631) + ((cbLight._m0[_1599].x * _1606) * _1629);
    float _1639 = ((_1595 * cbLight._m0[_1589].y) * _1631) + ((_1606 * cbLight._m0[_1599].y) * _1629);
    float _1640 = ((_1595 * cbLight._m0[_1589].z) * _1631) + ((_1606 * cbLight._m0[_1599].z) * _1629);
    uvec4 _1645 = floatBitsToUint(cbLight._m0[_1572 + 12u]);
    bool _1647 = _1645.x == 0u;
    float _1658;
    float _1660;
    float _1662;
    if (_1647)
    {
        _1658 = _1638;
        _1660 = _1639;
        _1662 = _1640;
    }
    else
    {
        uint _1666 = _1572 + 6u;
        float _1682 = (dot(vec3(cbLight._m0[_1572 + 2u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _1683 = _1682 * _1682;
        float _3816 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1685 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1658 = (((cbLight._m0[_1666].x * 0.3183098733425140380859375) * _1684) * _1685) + _1638;
        _1660 = (((cbLight._m0[_1666].y * 0.3183098733425140380859375) * _1684) * _1685) + _1639;
        _1662 = (((cbLight._m0[_1666].z * 0.3183098733425140380859375) * _1684) * _1685) + _1640;
    }
    bool _1665 = _1645.y == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1665)
    {
        _1703 = _1658;
        _1705 = _1660;
        _1707 = _1662;
    }
    else
    {
        uint _1862 = _1572 + 7u;
        float _1878 = (dot(vec3(cbLight._m0[_1572 + 3u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _3832 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1881 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _1703 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1658;
        _1705 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1660;
        _1707 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1662;
    }
    uint _1710 = _1572 + 8u;
    float _1723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1572].w)) * _337) * 0.949999988079071044921875);
    float _1724 = _1723 * _1723;
    float _1725 = cbLight._m0[_1572].x + _414;
    float _1726 = cbLight._m0[_1572].y + _415;
    float _1727 = cbLight._m0[_1572].z + _416;
    float _1731 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
    float _1732 = _1731 * _1725;
    float _1733 = _1731 * _1726;
    float _1734 = _1731 * _1727;
    float _1735 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1572].xyz));
    float _3848 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _1739 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1740 = dot(vec3(_333, _334, _335), vec3(_1732, _1733, _1734));
    float _3870 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1744 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_1732, _1733, _1734));
    float _3881 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1748 = _1724 * _1724;
    float _1752 = ((_1743 * _1743) * (_1748 + (-1.0))) + 1.0;
    float _1763 = (exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1764 = 1.0 - _1724;
    float _1775 = (0.5 / (((_1739 * ((_1738 * _1764) + _1724)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1764) + _1724) * _1738))) * _1738;
    float _3892 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1777 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1748 / ((_1752 * _1752) * 3.141590118408203125));
    uint _1788 = _1572 + 9u;
    float _1799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1610].w)) * _337) * 0.949999988079071044921875);
    float _1800 = _1799 * _1799;
    float _1801 = cbLight._m0[_1610].x + _414;
    float _1802 = cbLight._m0[_1610].y + _415;
    float _1803 = cbLight._m0[_1610].z + _416;
    float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
    float _1808 = _1807 * _1801;
    float _1809 = _1807 * _1802;
    float _1810 = _1807 * _1803;
    float _1811 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1610].xyz));
    float _3903 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1815 = dot(vec3(_333, _334, _335), vec3(_1808, _1809, _1810));
    float _3914 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1819 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_1808, _1809, _1810));
    float _3925 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1823 = _1800 * _1800;
    float _1827 = ((_1818 * _1818) * (_1823 + (-1.0))) + 1.0;
    float _1836 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1837 = 1.0 - _1800;
    float _1847 = (0.5 / (((_1739 * ((_1814 * _1837) + _1800)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1837) + _1800) * _1814))) * _1814;
    float _3936 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1823 / ((_1827 * _1827) * 3.141590118408203125));
    float _1859 = (((_1836 * cbLight._m0[_1788].x) * _1849) * _1595) + (((_1763 * cbLight._m0[_1710].x) * _1777) * _1606);
    float _1860 = (((_1836 * cbLight._m0[_1788].y) * _1849) * _1595) + (((_1763 * cbLight._m0[_1710].y) * _1777) * _1606);
    float _1861 = (((_1836 * cbLight._m0[_1788].z) * _1849) * _1595) + (((_1763 * cbLight._m0[_1710].z) * _1777) * _1606);
    float _1923;
    float _1925;
    float _1927;
    if (_1647)
    {
        _1923 = _1859;
        _1925 = _1860;
        _1927 = _1861;
    }
    else
    {
        uint _1929 = _1572 + 2u;
        uint _1933 = _1572 + 10u;
        float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _337) * 0.949999988079071044921875);
        float _1948 = _1947 * _1947;
        float _1949 = cbLight._m0[_1929].x + _414;
        float _1950 = cbLight._m0[_1929].y + _415;
        float _1951 = cbLight._m0[_1929].z + _416;
        float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
        float _1956 = _1955 * _1949;
        float _1957 = _1955 * _1950;
        float _1958 = _1955 * _1951;
        float _1959 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1929].xyz));
        float _3947 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1963 = dot(vec3(_333, _334, _335), vec3(_1956, _1957, _1958));
        float _3958 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1967 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1956, _1957, _1958));
        float _3969 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = _1948 * _1948;
        float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
        float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1985 = 1.0 - _1948;
        float _1995 = (0.5 / (((_1739 * ((_1962 * _1985) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1985) + _1948) * _1962))) * _1962;
        float _3980 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1997 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
        float _1998 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1923 = (((_1984 * cbLight._m0[_1933].x) * _1997) * _1998) + _1859;
        _1925 = (((_1984 * cbLight._m0[_1933].y) * _1997) * _1998) + _1860;
        _1927 = (((_1984 * cbLight._m0[_1933].z) * _1997) * _1998) + _1861;
    }
    float _2033;
    float _2035;
    float _2037;
    if (_1665)
    {
        _2033 = _1923;
        _2035 = _1925;
        _2037 = _1927;
    }
    else
    {
        uint _2044 = _1572 + 3u;
        uint _2048 = _1572 + 11u;
        float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _337) * 0.949999988079071044921875);
        float _2063 = _2062 * _2062;
        float _2064 = cbLight._m0[_2044].x + _414;
        float _2065 = cbLight._m0[_2044].y + _415;
        float _2066 = cbLight._m0[_2044].z + _416;
        float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
        float _2071 = _2070 * _2064;
        float _2072 = _2070 * _2065;
        float _2073 = _2070 * _2066;
        float _2074 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_2044].xyz));
        float _3996 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2078 = dot(vec3(_333, _334, _335), vec3(_2071, _2072, _2073));
        float _4007 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2082 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2071, _2072, _2073));
        float _4018 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2086 = _2063 * _2063;
        float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
        float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2100 = 1.0 - _2063;
        float _2110 = (0.5 / (((_1739 * ((_2077 * _2100) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _2100) + _2063) * _2077))) * _2077;
        float _4029 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _2033 = (((_2099 * cbLight._m0[_2048].x) * _2112) * _2113) + _1923;
        _2035 = (((_2099 * cbLight._m0[_2048].y) * _2112) * _2113) + _1925;
        _2037 = (((_2099 * cbLight._m0[_2048].z) * _2112) * _2113) + _1927;
    }
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_1570.y == 0u)
    {
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2188;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2188;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2188;
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.x;
        uint _2215 = uint((float(_2203.y) * floor(float(uint(cbSceneParam._m0[85u].y * _436) / _2204))) + floor(float(uint(cbSceneParam._m0[85u].x * _435) / _2204)));
        float _2225 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2226 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        uint _2229 = uint(isnan(14.0) ? _2226 : (isnan(_2226) ? 14.0 : min(_2226, 14.0)));
        uvec4 _2234 = texelFetch(g_lightClusterGridBuffer, int(((_2229 << 2u) + (_2215 << 6u)) >> 2u));
        uint _2235 = _2234.x;
        uint _2236 = _2203.z;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((((1u << ((_2236 >> 4u) & 15u)) + 4294967295u) & _2235) == 0u) || ((_2236 & 240u) == 0u))
        {
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
        }
        else
        {
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            uint _2497 = 0u;
            uint _2506;
            bool _2507;
            for (;;)
            {
                _2506 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2497 << 2u)) >> 2u)).x;
                _2507 = _2506 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2507)
                {
                    frontier_phi_66_pred = _2491;
                    frontier_phi_66_pred_1 = _2496;
                    frontier_phi_66_pred_2 = _2495;
                    frontier_phi_66_pred_3 = _2494;
                    frontier_phi_66_pred_4 = _2493;
                    frontier_phi_66_pred_5 = _2492;
                }
                else
                {
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    uint _2642;
                    _2636 = _2491;
                    _2637 = _2492;
                    _2638 = _2493;
                    _2639 = _2494;
                    _2640 = _2495;
                    _2641 = _2496;
                    _2642 = _2506;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    for (;;)
                    {
                        uint _2646 = uint(findLSB(_2642)) + (_2497 << 5u);
                        uint _2643 = (_2642 + 4294967295u) & _2642;
                        uint _2648 = _2646 * 48u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 3u)).x));
                        uint _2668 = (_2646 * 48u) + 4u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2687 = (_2646 * 48u) + 8u;
                        vec3 _2698 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x));
                        float _2702 = _2662.x - _2189;
                        float _2703 = _2662.y - _2190;
                        float _2704 = _2662.z - _2191;
                        float _2705 = dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704));
                        float _2708 = inversesqrt(_2705);
                        float _2709 = _2708 * _2702;
                        float _2710 = _2708 * _2703;
                        float _2711 = _2708 * _2704;
                        float _2712 = dot(vec3(_456, _459, _462), vec3(_2709, _2710, _2711));
                        float _2717 = 1.0 - (_2705 * _2662.w);
                        float _4055 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2718 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2719 = sqrt(_2705) * _2681.w;
                        float _2722 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                        float _2723 = _2722 * _2722;
                        float _2726 = ((1.0 - _2723) * _2712) + _2723;
                        float _2729 = _2719 * _2719;
                        float _2733 = ((isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0))) * _2718) / ((_2729 * 0.699999988079071044921875) + 1.0);
                        float _2737 = (-0.0) - _2189;
                        float _2738 = (-0.0) - _2190;
                        float _2739 = (-0.0) - _2191;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2744 = _2743 * _2737;
                        float _2745 = _2743 * _2738;
                        float _2746 = _2743 * _2739;
                        float _2754 = exp2(log2(1.0 / ((_2729 * 3.5) + 5.0)) * 0.25);
                        float _2755 = 1.0 - _517;
                        float _2762 = sqrt(1.0 - ((1.0 - (_2755 * _2755)) * (1.0 - (_2754 * _2754))));
                        float _2763 = _2762 * _2762;
                        float _2764 = _2763 * _2763;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
                        float _2775 = dot(vec3(_456, _459, _462), vec3(_2744, _2745, _2746));
                        float _4071 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2778 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2779 = dot(vec3(_456, _459, _462), vec3(_2771 * _2765, _2771 * _2766, _2771 * _2767));
                        float _4082 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2782 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2786 = ((_2782 * _2782) * (_2764 + (-1.0))) + 1.0;
                        float _2787 = _2722 * _2763;
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * _2712) + _2788;
                        float _4093 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2792 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2793 = 1.0 - _2763;
                        float _2803 = (0.5 / (((_2792 * ((_2778 * _2793) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2792 * _2793) + _2763) * _2778))) * _2792;
                        float _4104 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2814 = (((_2764 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_2786 * _2786) * ((_2729 * 2.1991131305694580078125) + 3.141590118408203125))) * _2718;
                        _2566 = (_2733 * _2681.x) + _2639;
                        _2567 = (_2733 * _2681.y) + _2640;
                        _2568 = (_2733 * _2681.z) + _2641;
                        _2563 = (_2814 * _2698.x) + _2636;
                        _2564 = (_2814 * _2698.y) + _2637;
                        _2565 = (_2814 * _2698.z) + _2638;
                        if (_2643 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2636 = _2563;
                            _2637 = _2564;
                            _2638 = _2565;
                            _2639 = _2566;
                            _2640 = _2567;
                            _2641 = _2568;
                            _2642 = _2643;
                        }
                    }
                    frontier_phi_66_pred = _2563;
                    frontier_phi_66_pred_1 = _2568;
                    frontier_phi_66_pred_2 = _2567;
                    frontier_phi_66_pred_3 = _2566;
                    frontier_phi_66_pred_4 = _2565;
                    frontier_phi_66_pred_5 = _2564;
                }
                _2339 = frontier_phi_66_pred;
                _2349 = frontier_phi_66_pred_1;
                _2347 = frontier_phi_66_pred_2;
                _2345 = frontier_phi_66_pred_3;
                _2343 = frontier_phi_66_pred_4;
                _2341 = frontier_phi_66_pred_5;
                uint _2498 = _2497 + 1u;
                if (_2498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2491 = _2339;
                    _2492 = _2341;
                    _2493 = _2343;
                    _2494 = _2345;
                    _2495 = _2347;
                    _2496 = _2349;
                    _2497 = _2498;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
        }
        uvec4 _2352 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2353 = _2352.z;
        uint _2355 = (_2353 >> 8u) & 15u;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        if (((4294967295u << _2355) & _2235) == 0u)
        {
            _2459 = _2338;
            _2461 = _2340;
            _2463 = _2342;
            _2465 = _2344;
            _2467 = _2346;
            _2469 = _2348;
        }
        else
        {
            float _2484 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _2485 = _2484 * _2189;
            float _2486 = _2484 * _2190;
            float _2487 = _2484 * _2191;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2355 < ((_2353 >> 12u) & 15u))
            {
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2619 = _2338;
                float _2620 = _2340;
                float _2621 = _2342;
                float _2622 = _2344;
                float _2623 = _2346;
                float _2624 = _2348;
                uint _2625 = _2355;
                uint _2634;
                bool _2635;
                for (;;)
                {
                    _2634 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2625 << 2u)) >> 2u)).x;
                    _2635 = _2634 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2635)
                    {
                        frontier_phi_77_pred = _2624;
                        frontier_phi_77_pred_1 = _2623;
                        frontier_phi_77_pred_2 = _2622;
                        frontier_phi_77_pred_3 = _2621;
                        frontier_phi_77_pred_4 = _2620;
                        frontier_phi_77_pred_5 = _2619;
                    }
                    else
                    {
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _2841 = _2619;
                        float _2842 = _2620;
                        float _2843 = _2621;
                        float _2844 = _2622;
                        float _2845 = _2623;
                        float _2846 = _2624;
                        uint _2847 = _2634;
                        uint _2848;
                        vec4 _2873;
                        float _2874;
                        vec4 _2889;
                        vec3 _2901;
                        vec4 _2917;
                        vec4 _2933;
                        float _2980;
                        bool _2981;
                        for (;;)
                        {
                            uint _2858 = ((_2625 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2847));
                            _2848 = (_2847 + 4294967295u) & _2847;
                            uint _2860 = _2858 * 40u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            _2874 = _2873.w;
                            uint _2876 = (_2858 * 40u) + 4u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2891 = (_2858 * 40u) + 8u;
                            _2901 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x));
                            uint _2904 = (_2858 * 40u) + 16u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2920 = (_2858 * 40u) + 20u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2936 = (_2858 * 40u) + 24u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2955 = (_2858 * 40u) + 28u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2980 = fma(_2191, _2968.z, fma(_2190, _2968.y, _2968.x * _2189)) + _2968.w;
                            _2981 = !((fma(_2191, _2949.z, fma(_2190, _2949.y, _2949.x * _2189)) + _2949.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2981)
                            {
                                float _3008 = _2873.x - _2189;
                                float _3009 = _2873.y - _2190;
                                float _3010 = _2873.z - _2191;
                                float _3011 = dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010));
                                float _3014 = inversesqrt(_3011);
                                float _3015 = _3014 * _3008;
                                float _3016 = _3014 * _3009;
                                float _3017 = _3014 * _3010;
                                float _3021 = 1.0 - (_3011 / (_2874 * _2874));
                                float _4115 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3026 = sqrt(_3011) * _2889.w;
                                float _3028 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                                float _3029 = _3028 * _3028;
                                float _3032 = ((1.0 - _3029) * dot(vec3(_3015, _3016, _3017), vec3(_456, _459, _462))) + _3029;
                                float _3035 = _3026 * _3026;
                                float _3039 = (fma(_2191, _2917.z, fma(_2190, _2917.y, _2917.x * _2189)) + _2917.w) / _2980;
                                float _3040 = (fma(_2191, _2933.z, fma(_2190, _2933.y, _2933.x * _2189)) + _2933.w) / _2980;
                                float _3044 = 1.0 - dot(vec2(_3039, _3040), vec2(_3039, _3040));
                                float _4131 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3046 = _3045 * (((isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))) * _3022) / ((_3035 * 0.699999988079071044921875) + 1.0));
                                float _3058 = exp2(log2(1.0 / ((_3035 * 3.5) + 5.0)) * 0.25);
                                float _3059 = 1.0 - _517;
                                float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                                float _3067 = _3066 * _3066;
                                float _3068 = _3067 * _3067;
                                float _3069 = _3015 - _2485;
                                float _3070 = _3016 - _2486;
                                float _3071 = _3017 - _2487;
                                float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                                float _3079 = dot(vec3(_456, _459, _462), vec3((-0.0) - _2485, (-0.0) - _2486, (-0.0) - _2487));
                                float _4142 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3083 = dot(vec3(_456, _459, _462), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                                float _4153 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                                float _3091 = _3028 * _3067;
                                float _3092 = _3091 * _3091;
                                float _3098 = ((1.0 - _3092) * dot(vec3(_456, _459, _462), vec3(_3015, _3016, _3017))) + _3092;
                                float _4164 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3100 = 1.0 - _3067;
                                float _3110 = (0.5 / (((_3099 * ((_3082 * _3100) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3067) * _3082))) * _3099;
                                float _4175 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3120 = (_3045 * _3022) * (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_3090 * _3090) * ((_3035 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3046 * _2889.y;
                                frontier_phi_83_pred_1 = _3046 * _2889.x;
                                frontier_phi_83_pred_2 = _3120 * _2901.z;
                                frontier_phi_83_pred_3 = _3120 * _2901.y;
                                frontier_phi_83_pred_4 = _3120 * _2901.x;
                                frontier_phi_83_pred_5 = _3046 * _2889.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3128 = frontier_phi_83_pred;
                            _3127 = frontier_phi_83_pred_1;
                            _3126 = frontier_phi_83_pred_2;
                            _3125 = frontier_phi_83_pred_3;
                            _3124 = frontier_phi_83_pred_4;
                            _3129 = frontier_phi_83_pred_5;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            if (_2848 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2848;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2833;
                        frontier_phi_77_pred_1 = _2832;
                        frontier_phi_77_pred_2 = _2831;
                        frontier_phi_77_pred_3 = _2830;
                        frontier_phi_77_pred_4 = _2829;
                        frontier_phi_77_pred_5 = _2828;
                    }
                    _2470 = frontier_phi_77_pred;
                    _2468 = frontier_phi_77_pred_1;
                    _2466 = frontier_phi_77_pred_2;
                    _2464 = frontier_phi_77_pred_3;
                    _2462 = frontier_phi_77_pred_4;
                    _2460 = frontier_phi_77_pred_5;
                    uint _2626 = _2625 + 1u;
                    if (_2626 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2619 = _2460;
                        _2620 = _2462;
                        _2621 = _2464;
                        _2622 = _2466;
                        _2623 = _2468;
                        _2624 = _2470;
                        _2625 = _2626;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2464;
                frontier_phi_58_59_ladder_1 = _2470;
                frontier_phi_58_59_ladder_2 = _2468;
                frontier_phi_58_59_ladder_3 = _2466;
                frontier_phi_58_59_ladder_4 = _2462;
                frontier_phi_58_59_ladder_5 = _2460;
            }
            else
            {
                frontier_phi_58_59_ladder = _2342;
                frontier_phi_58_59_ladder_1 = _2348;
                frontier_phi_58_59_ladder_2 = _2346;
                frontier_phi_58_59_ladder_3 = _2344;
                frontier_phi_58_59_ladder_4 = _2340;
                frontier_phi_58_59_ladder_5 = _2338;
            }
            _2459 = frontier_phi_58_59_ladder_5;
            _2461 = frontier_phi_58_59_ladder_4;
            _2463 = frontier_phi_58_59_ladder;
            _2465 = frontier_phi_58_59_ladder_3;
            _2467 = frontier_phi_58_59_ladder_2;
            _2469 = frontier_phi_58_59_ladder_1;
        }
        float _2474 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
        _2248 = (_2474 * _2465) + _1703;
        _2250 = (_2474 * _2467) + _1705;
        _2252 = (_2474 * _2469) + _1707;
        _2254 = ((_2459 * 0.039999999105930328369140625) * _2474) + _2033;
        _2256 = ((_2461 * 0.039999999105930328369140625) * _2474) + _2035;
        _2258 = ((_2463 * 0.039999999105930328369140625) * _2474) + _2037;
    }
    else
    {
        _2248 = _1703;
        _2250 = _1705;
        _2252 = _1707;
        _2254 = _2033;
        _2256 = _2035;
        _2258 = _2037;
    }
    float _4191 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _4202 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4213 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4224 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _2276 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2248 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _501))) + ((_2254 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2277 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2250 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _501))) + ((_2256 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2278 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2252 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _501))) + ((_2258 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2283 = cbInstanceData._m0[_475 + 6u].w * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)));
    float _2288 = _435 / cbSceneParam._m0[86u].x;
    float _2289 = _436 / cbSceneParam._m0[86u].y;
    vec4 _2303 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, (log2((isnan(cbSceneParam._m0[77u].w) ? _356 : (isnan(_356) ? cbSceneParam._m0[77u].w : min(_356, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2305 = _2303.x;
    float _2306 = _2303.y;
    float _2307 = _2303.z;
    float _2308 = _2303.w;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_356 > cbSceneParam._m0[78u].w)
    {
        float _2363 = isnan(_356) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _356 : min(cbSceneParam._m0[80u].w, _356));
        float _2364 = _2363 / _356;
        float _2375 = _2364 * _407;
        float _2376 = _408 * _2364;
        float _2377 = (-0.0) - _2376;
        float _2379 = _2364 * _409;
        float _2381 = (cbSceneParam._m0[77u].w * _2377) / _2363;
        float _2382 = _2381 + cbSceneParam._m0[79u].w;
        float _2383 = cbSceneParam._m0[79u].w - _2376;
        float _2389 = sqrt(((_2375 * _2375) + (_2376 * _2376)) + (_2379 * _2379));
        float _2392 = (1.0 - (cbSceneParam._m0[77u].w / _2363)) * _2389;
        float _2397 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2399 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2576;
        if (abs((_2377 - _2381) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2576 = ((((_2382 > 0.0) ? exp2(_2397 * _2382) : (2.0 - exp2(_2399 * _2382))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2392;
        }
        else
        {
            float _2520 = 1.0 / cbSceneParam._m0[80u].x;
            float _2521 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : max(_2382, _2383));
            float _2522 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : min(_2382, _2383));
            float _2531 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : min(_2521, 0.0));
            float _2532 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : min(_2522, 0.0));
            _2576 = ((abs(_2389 / _2377) * cbSceneParam._m0[80u].y) * ((((_2531 - _2532) * 2.0) - ((exp2(_2397 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)))) - exp2(_2397 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0))))) * _2520)) - ((exp2(_2399 * _2531) - exp2(_2399 * _2532)) * _2520))) + (_2392 * cbSceneParam._m0[80u].z);
        }
        vec4 _2578 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, 1.0), 0.0);
        float _2587 = exp2((_2576 * (-1.44269502162933349609375)) * (1.0 - _2578.w));
        float _2588 = log2(_2587);
        float _2604 = log2(_2308);
        _2401 = (exp2(_2604 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2588 * cbSceneParam._m0[78u].x)) * _2578.x) / cbSceneParam._m0[78u].x)) + _2305;
        _2403 = (exp2(_2604 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2588 * cbSceneParam._m0[78u].y)) * _2578.y) / cbSceneParam._m0[78u].y)) + _2306;
        _2405 = (exp2(_2604 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2588 * cbSceneParam._m0[78u].z)) * _2578.z) / cbSceneParam._m0[78u].z)) + _2307;
        _2407 = _2587 * _2308;
    }
    else
    {
        _2401 = _2305;
        _2403 = _2306;
        _2405 = _2307;
        _2407 = _2308;
    }
    bool _2614;
    vec4 _2417;
    vec4 _2439;
    float _2441;
    float _2445;
    float _2446;
    float _2447;
    float _2448;
    bool _2458;
    for (;;)
    {
        _2417 = cbMatDynParam._m0[0u];
        float _2419 = roundEven(_2417.y);
        bool _2420 = _2419 == 3.0;
        float _2421 = log2(_2407);
        float _2428 = exp2(_2421 * cbSceneParam._m0[78u].x) * _2276;
        float _2429 = exp2(_2421 * cbSceneParam._m0[78u].y) * _2277;
        float _2430 = exp2(_2421 * cbSceneParam._m0[78u].z) * _2278;
        float _2437 = _423 + (-0.5);
        _2439 = cbMtdParam._m0[1u];
        _2441 = _2439.y * _2437;
        float _2444 = (_2419 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2445 = _2444 * (_2420 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2401)));
        _2446 = _2444 * (_2420 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2403)));
        _2447 = _2444 * (_2420 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2405)));
        _2448 = _2437 * 0.999000012874603271484375;
        _2458 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2458)
        {
            if ((cbInstanceData._m0[_475 + 7u].x + _2448) < 0.5)
            {
                _2614 = true;
                break;
            }
        }
        uint _2555 = _477 + uint(_2417.w);
        if ((cbInstanceData._m0[_2555].w < 1.0) && ((cbInstanceData._m0[_2555].w + _2448) < 0.5))
        {
            _2614 = true;
            break;
        }
        if ((_2441 + _237) < _2439.x)
        {
            _2614 = true;
            break;
        }
        _2614 = false;
        break;
    }
    float _2819;
    if (_2614)
    {
        discard_state = true;
        _2819 = 0.0;
    }
    else
    {
        _2819 = _2283;
    }
    SV_Target.x = _2445;
    SV_Target.y = _2446;
    SV_Target.z = _2447;
    SV_Target.w = _2819;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2283;
    discard_exit();
}


