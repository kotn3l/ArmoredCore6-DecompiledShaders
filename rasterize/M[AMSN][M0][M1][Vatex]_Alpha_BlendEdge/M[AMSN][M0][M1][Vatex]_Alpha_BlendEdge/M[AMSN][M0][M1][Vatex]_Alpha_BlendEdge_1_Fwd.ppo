#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _854;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    float _255 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[10u].x;
    float _256 = _228.w * TEXCOORD.x;
    float _267 = (_256 < 0.5) ? 0.0 : 1.0;
    float _277 = (((((_256 * 2.0) * (1.0 - _267)) * _255) + (-0.5)) + ((1.0 - (((1.0 - _256) * 2.0) * (1.0 - _255))) * _267)) * cbMtdParam._m0[10u].z;
    precise float _281 = _277 * ((_277 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _282 = cbMtdParam._m0[10u].y + _281;
    float _3172 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _288 = (_283 * _283) * (3.0 - (_283 * 2.0));
    vec4 _300 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _304 = _300.z;
    float _307 = (_300.x * 2.0) + (-1.0);
    float _309 = (_300.y * 2.0) + (-1.0);
    float _310 = dot(vec2(_307, _309), vec2(_307, _309));
    float _3183 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _315 = sqrt(1.0 - (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))));
    float _318 = fma(_315, _198 * NORMAL.x, fma(_309, _205 * TANGENT.x, (_191 * _183) * _307));
    float _321 = fma(_315, _198 * NORMAL.y, fma(_309, _205 * TANGENT.y, (_191 * _184) * _307));
    float _324 = fma(_315, _198 * NORMAL.z, fma(_309, _205 * TANGENT.z, (_191 * _185) * _307));
    float _328 = inversesqrt(dot(vec3(_318, _321, _324), vec3(_318, _321, _324)));
    float _329 = _328 * _318;
    float _330 = _328 * _321;
    float _331 = _328 * _324;
    float _3194 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _332 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _333 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _3216 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3227 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3238 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _352 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _403 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _393);
    float _404 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _393);
    float _405 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _393);
    float _409 = inversesqrt(dot(vec3(_403, _404, _405), vec3(_403, _404, _405)));
    float _410 = _403 * _409;
    float _411 = _404 * _409;
    float _412 = _405 * _409;
    float _418 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _419 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _440 = fma(_331, cbSceneParam._m0[5u].z, fma(_330, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _329));
    float _443 = fma(_331, cbSceneParam._m0[6u].z, fma(_330, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _329));
    float _446 = fma(_331, cbSceneParam._m0[7u].z, fma(_330, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _329));
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = (_459 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3249 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    vec4 _482 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _418, cbSceneParam._m0[86u].y * _419));
    float _485 = _482.x * TEXCOORD.y;
    float _486 = dot(vec3(_329, _330, _331), vec3(_410, _411, _412));
    float _489 = _486 * 2.0;
    float _493 = (_489 * _329) - _410;
    float _494 = (_489 * _330) - _411;
    float _495 = (_489 * _331) - _412;
    float _499 = abs(dot(vec3(_410, _411, _412), vec3(_329, _330, _331)));
    float _3282 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = sqrt(_333);
    float _513 = exp2((_501 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_501 * 3.0));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _580 = fma(_553, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _545));
        float _584 = fma(_553, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _545));
        float _588 = fma(_553, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _545));
        float _611 = _545 + _329;
        float _612 = _549 + _330;
        float _613 = _553 + _331;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _580;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _584;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _588;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_580 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_584 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_588 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_647.x + (-0.5));
        float _683 = _681 * (_647.y + (-0.5));
        float _684 = _681 * (_647.z + (-0.5));
        float _691 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_654.x + (-0.5));
        float _693 = _691 * (_654.y + (-0.5));
        float _694 = _691 * (_654.z + (-0.5));
        float _701 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_661.x + (-0.5));
        float _703 = _701 * (_661.y + (-0.5));
        float _704 = _701 * (_661.z + (-0.5));
        float _711 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_668.x + (-0.5));
        float _713 = _711 * (_668.y + (-0.5));
        float _714 = _711 * (_668.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = _682 * 0.5;
        float _719 = _692 * 0.5;
        float _720 = _702 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _735 = (dot(vec3(_329, _330, _331), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3308 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _745 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3319 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3330 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * (_747 + 1.0))) + _752) * _715;
        float _762 = _683 * 0.5;
        float _763 = _693 * 0.5;
        float _764 = _703 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_329, _330, _331), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3363 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_789 + 1.0))) + _794) * _716;
        float _804 = _684 * 0.5;
        float _805 = _694 * 0.5;
        float _806 = _704 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_329, _330, _331), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3396 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_831 + 1.0))) + _836) * _717;
        _853 = _684;
        _855 = _683;
        _856 = _682;
        _857 = _694;
        _858 = _693;
        _859 = _692;
        _860 = _704;
        _861 = _703;
        _862 = _702;
        _863 = _717;
        _864 = _716;
        _865 = _715;
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = _854;
        _855 = _854;
        _856 = _854;
        _857 = _854;
        _858 = _854;
        _859 = _854;
        _860 = _854;
        _861 = _854;
        _862 = _854;
        _863 = _854;
        _864 = _854;
        _865 = _854;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
    }
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _894 = fma(_553, cbModelParam._m0[30u].z, fma(_549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _545));
        float _898 = fma(_553, cbModelParam._m0[31u].z, fma(_549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _545));
        float _902 = fma(_553, cbModelParam._m0[32u].z, fma(_549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _545));
        float _925 = _545 + _329;
        float _926 = _549 + _330;
        float _927 = _553 + _331;
        float _937 = fma(_927, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925)) - _894;
        float _938 = fma(_927, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925)) - _898;
        float _939 = fma(_927, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925)) - _902;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_894 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_898 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[35u].z) + ((((((_902 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _993 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_960.x + (-0.5));
        float _995 = _993 * (_960.y + (-0.5));
        float _996 = _993 * (_960.z + (-0.5));
        float _1003 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_967.x + (-0.5));
        float _1005 = _1003 * (_967.y + (-0.5));
        float _1006 = _1003 * (_967.z + (-0.5));
        float _1013 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_974.x + (-0.5));
        float _1015 = _1013 * (_974.y + (-0.5));
        float _1016 = _1013 * (_974.z + (-0.5));
        float _1023 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_981.x + (-0.5));
        float _1025 = _1023 * (_981.y + (-0.5));
        float _1026 = _1023 * (_981.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_329, _330, _331), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3459 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_1057 + 1.0))) + _1062) * _1027;
        float _1072 = _995 * 0.5;
        float _1073 = _1005 * 0.5;
        float _1074 = _1015 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_329, _330, _331), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3492 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1099 + 1.0))) + _1104) * _1028;
        float _1114 = _996 * 0.5;
        float _1115 = _1006 * 0.5;
        float _1116 = _1016 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_329, _330, _331), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3525 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1141 + 1.0))) + _1146) * _1029;
        _1163 = _996;
        _1164 = _995;
        _1165 = _994;
        _1166 = _1006;
        _1167 = _1005;
        _1168 = _1004;
        _1169 = _1016;
        _1170 = _1015;
        _1171 = _1014;
        _1172 = _1029;
        _1173 = _1028;
        _1174 = _1027;
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _854;
        _1164 = _854;
        _1165 = _854;
        _1166 = _854;
        _1167 = _854;
        _1168 = _854;
        _1169 = _854;
        _1170 = _854;
        _1171 = _854;
        _1172 = _854;
        _1173 = _854;
        _1174 = _854;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1210 = fma(_1189, cbSceneParam._m0[89u].z, fma(_1188, cbSceneParam._m0[89u].y, _1187 * cbSceneParam._m0[89u].x));
    float _1213 = fma(_1189, cbSceneParam._m0[90u].z, fma(_1188, cbSceneParam._m0[90u].y, _1187 * cbSceneParam._m0[90u].x));
    float _1216 = fma(_1189, cbSceneParam._m0[91u].z, fma(_1188, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1187));
    float _1231 = _493 * 0.5;
    float _1232 = _494 * 0.5;
    float _1233 = _495 * 0.5;
    float _1234 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1237 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1240 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1274;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1247 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_853, _857, _860, _863));
        float _1251 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_855, _858, _861, _864));
        float _1255 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_856, _859, _862, _865));
        float _1262 = dot(vec4(cbModelParam._m0[39u]), vec4(_1231, _1232, _1233, 1.0));
        _1274 = dot(vec3(isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1274 = 1.0;
    }
    float _1285;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1276 = dot(vec4(cbModelParam._m0[40u]), vec4(_1231, _1232, _1233, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1289 = (_1285 * cbModelParam._m0[1u].x) + (_1274 * (1.0 - cbModelParam._m0[1u].x));
    float _1299 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _333);
    float _1300 = isnan(_1299) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1299 : min(cbModelParam._m0[25u].z, _1299));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1349 = fma(_553, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545)) + cbModelParam._m0[13u].w;
        float _1353 = fma(_553, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545)) + cbModelParam._m0[14u].w;
        float _1357 = fma(_553, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545)) + cbModelParam._m0[15u].w;
        float _1360 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1363 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1366 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1394;
        if (_1360 > 0.0)
        {
            _1394 = abs((1.0 - _1349) / _1360);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1349 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1394 = frontier_phi_14_12_ladder;
        }
        float _1600;
        if (_1363 > 0.0)
        {
            _1600 = abs((1.0 - _1353) / _1363);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1353 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1600 = frontier_phi_23_19_ladder;
        }
        float _1843;
        if (_1366 > 0.0)
        {
            _1843 = abs((1.0 - _1357) / _1366);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1357 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1843 = frontier_phi_35_30_ladder;
        }
        float _1845 = isnan(_1600) ? _1394 : (isnan(_1394) ? _1600 : min(_1394, _1600));
        float _1846 = isnan(_1843) ? _1845 : (isnan(_1845) ? _1843 : min(_1845, _1843));
        float _1850 = (_1846 * _1360) + _1349;
        float _1851 = (_1846 * _1363) + _1353;
        float _1852 = (_1846 * _1366) + _1357;
        float _1853 = _1846 * 9.9999997473787516355514526367188e-05;
        float _1855 = (-1.0) - _1853;
        float _1857 = _1853 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1852 > _1857) || ((_1852 < _1855) || ((_1851 > _1857) || ((_1851 < _1855) || ((_1850 < _1855) || (_1850 > _1857))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1852, cbModelParam._m0[9u].z, fma(_1851, cbModelParam._m0[9u].y, _1850 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1852, cbModelParam._m0[10u].z, fma(_1851, cbModelParam._m0[10u].y, _1850 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1852, cbModelParam._m0[11u].z, fma(_1851, cbModelParam._m0[11u].y, _1850 * cbModelParam._m0[11u].x))), _1300);
            frontier_phi_13_35_ladder = _1976.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1976.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1976.x * cbModelParam._m0[1u].y;
        }
        _1382 = frontier_phi_13_35_ladder_2;
        _1384 = frontier_phi_13_35_ladder_1;
        _1386 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1300);
        _1382 = _1370.x * cbModelParam._m0[1u].y;
        _1384 = _1370.y * cbModelParam._m0[1u].y;
        _1386 = _1370.z * cbModelParam._m0[1u].y;
    }
    float _1390 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _333);
    float _1391 = isnan(_1390) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1390 : min(cbModelParam._m0[25u].w, _1390));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1448 = fma(_553, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545)) + cbModelParam._m0[21u].w;
        float _1452 = fma(_553, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545)) + cbModelParam._m0[22u].w;
        float _1456 = fma(_553, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545)) + cbModelParam._m0[23u].w;
        float _1459 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1462 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1465 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1605;
        if (_1459 > 0.0)
        {
            _1605 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1605 = frontier_phi_25_21_ladder;
        }
        float _1870;
        if (_1462 > 0.0)
        {
            _1870 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1870 = frontier_phi_37_32_ladder;
        }
        float _2075;
        if (_1465 > 0.0)
        {
            _2075 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2075 = frontier_phi_46_43_ladder;
        }
        float _2077 = isnan(_1870) ? _1605 : (isnan(_1605) ? _1870 : min(_1605, _1870));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1459) + _1448;
        float _2083 = (_2078 * _1462) + _1452;
        float _2084 = (_2078 * _1465) + _1456;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2085;
        float _2088 = _2085 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2084 > _2088) || ((_2084 < _2086) || ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 < _2086) || (_2082 > _2088))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2084, cbModelParam._m0[17u].z, fma(_2083, cbModelParam._m0[17u].y, _2082 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2084, cbModelParam._m0[18u].z, fma(_2083, cbModelParam._m0[18u].y, _2082 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2084, cbModelParam._m0[19u].z, fma(_2083, cbModelParam._m0[19u].y, _2082 * cbModelParam._m0[19u].x))), _1391);
            frontier_phi_22_46_ladder = _2285.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2285.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2285.x * cbModelParam._m0[1u].z;
        }
        _1484 = frontier_phi_22_46_ladder_2;
        _1486 = frontier_phi_22_46_ladder_1;
        _1488 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1391);
        _1484 = _1468.x * cbModelParam._m0[1u].z;
        _1486 = _1468.y * cbModelParam._m0[1u].z;
        _1488 = _1468.z * cbModelParam._m0[1u].z;
    }
    float _1500 = ((((1.0 - _513) * ((_501 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_513 * _501)) * _485;
    float _1501 = _1500 * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1502 = _1500 * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1503 = _1500 * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1506 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, _1501 * cbSceneParam._m0[91u].x));
    uvec4 _1522 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1524 = _1522.x * 14u;
    uint _1525 = _1524 + 13u;
    float _1532 = _485 + (-1.0);
    float _1537 = (cbLight._m0[_1525].x * _1532) + 1.0;
    float _1538 = (cbLight._m0[_1525].y * _1532) + 1.0;
    float _1539 = (cbLight._m0[_1525].z * _1532) + 1.0;
    float _1540 = (cbLight._m0[_1525].w * _1532) + 1.0;
    uint _1541 = _1524 + 5u;
    float _1547 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
    uint _1551 = _1524 + 4u;
    float _1558 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
    uint _1562 = _1524 | 1u;
    float _1573 = dot(vec3(cbLight._m0[_1524].xyz), vec3(_329, _330, _331));
    float _1576 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_329, _330, _331));
    float _3661 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _3672 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1581 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.3183098733425140380859375;
    float _1583 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.3183098733425140380859375;
    float _1590 = ((cbLight._m0[_1541].x * _1547) * _1583) + ((cbLight._m0[_1551].x * _1558) * _1581);
    float _1591 = ((_1547 * cbLight._m0[_1541].y) * _1583) + ((_1558 * cbLight._m0[_1551].y) * _1581);
    float _1592 = ((_1547 * cbLight._m0[_1541].z) * _1583) + ((_1558 * cbLight._m0[_1551].z) * _1581);
    uvec4 _1597 = floatBitsToUint(cbLight._m0[_1524 + 12u]);
    bool _1599 = _1597.x == 0u;
    float _1610;
    float _1612;
    float _1614;
    if (_1599)
    {
        _1610 = _1590;
        _1612 = _1591;
        _1614 = _1592;
    }
    else
    {
        uint _1618 = _1524 + 6u;
        float _1634 = (dot(vec3(cbLight._m0[_1524 + 2u].xyz), vec3(_329, _330, _331)) * 0.5) + 0.5;
        float _1635 = _1634 * _1634;
        float _3683 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1637 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _1610 = (((cbLight._m0[_1618].x * 0.3183098733425140380859375) * _1636) * _1637) + _1590;
        _1612 = (((cbLight._m0[_1618].y * 0.3183098733425140380859375) * _1636) * _1637) + _1591;
        _1614 = (((cbLight._m0[_1618].z * 0.3183098733425140380859375) * _1636) * _1637) + _1592;
    }
    bool _1617 = _1597.y == 0u;
    float _1655;
    float _1657;
    float _1659;
    if (_1617)
    {
        _1655 = _1610;
        _1657 = _1612;
        _1659 = _1614;
    }
    else
    {
        uint _1814 = _1524 + 7u;
        float _1830 = (dot(vec3(cbLight._m0[_1524 + 3u].xyz), vec3(_329, _330, _331)) * 0.5) + 0.5;
        float _1831 = _1830 * _1830;
        float _3699 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1833 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1655 = (((cbLight._m0[_1814].x * 0.3183098733425140380859375) * _1832) * _1833) + _1610;
        _1657 = (((cbLight._m0[_1814].y * 0.3183098733425140380859375) * _1832) * _1833) + _1612;
        _1659 = (((cbLight._m0[_1814].z * 0.3183098733425140380859375) * _1832) * _1833) + _1614;
    }
    uint _1662 = _1524 + 8u;
    float _1675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1524].w)) * _333) * 0.949999988079071044921875);
    float _1676 = _1675 * _1675;
    float _1677 = cbLight._m0[_1524].x + _410;
    float _1678 = cbLight._m0[_1524].y + _411;
    float _1679 = cbLight._m0[_1524].z + _412;
    float _1683 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
    float _1684 = _1683 * _1677;
    float _1685 = _1683 * _1678;
    float _1686 = _1683 * _1679;
    float _1687 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1524].xyz));
    float _3715 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _1691 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1692 = dot(vec3(_329, _330, _331), vec3(_1684, _1685, _1686));
    float _3737 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1696 = dot(vec3(cbLight._m0[_1524].xyz), vec3(_1684, _1685, _1686));
    float _3748 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1700 = _1676 * _1676;
    float _1704 = ((_1695 * _1695) * (_1700 + (-1.0))) + 1.0;
    float _1715 = (exp2(log2(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1716 = 1.0 - _1676;
    float _1727 = (0.5 / (((_1691 * ((_1690 * _1716) + _1676)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _1716) + _1676) * _1690))) * _1690;
    float _3759 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1729 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1700 / ((_1704 * _1704) * 3.141590118408203125));
    uint _1740 = _1524 + 9u;
    float _1751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _333) * 0.949999988079071044921875);
    float _1752 = _1751 * _1751;
    float _1753 = cbLight._m0[_1562].x + _410;
    float _1754 = cbLight._m0[_1562].y + _411;
    float _1755 = cbLight._m0[_1562].z + _412;
    float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
    float _1760 = _1759 * _1753;
    float _1761 = _1759 * _1754;
    float _1762 = _1759 * _1755;
    float _1763 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1562].xyz));
    float _3770 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1767 = dot(vec3(_329, _330, _331), vec3(_1760, _1761, _1762));
    float _3781 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1760, _1761, _1762));
    float _3792 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1752 * _1752;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1788 = (exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1789 = 1.0 - _1752;
    float _1799 = (0.5 / (((_1691 * ((_1766 * _1789) + _1752)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _1789) + _1752) * _1766))) * _1766;
    float _3803 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1801 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    float _1811 = (((_1788 * cbLight._m0[_1740].x) * _1801) * _1547) + (((_1715 * cbLight._m0[_1662].x) * _1729) * _1558);
    float _1812 = (((_1788 * cbLight._m0[_1740].y) * _1801) * _1547) + (((_1715 * cbLight._m0[_1662].y) * _1729) * _1558);
    float _1813 = (((_1788 * cbLight._m0[_1740].z) * _1801) * _1547) + (((_1715 * cbLight._m0[_1662].z) * _1729) * _1558);
    float _1875;
    float _1877;
    float _1879;
    if (_1599)
    {
        _1875 = _1811;
        _1877 = _1812;
        _1879 = _1813;
    }
    else
    {
        uint _1881 = _1524 + 2u;
        uint _1885 = _1524 + 10u;
        float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _333) * 0.949999988079071044921875);
        float _1900 = _1899 * _1899;
        float _1901 = cbLight._m0[_1881].x + _410;
        float _1902 = cbLight._m0[_1881].y + _411;
        float _1903 = cbLight._m0[_1881].z + _412;
        float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
        float _1908 = _1907 * _1901;
        float _1909 = _1907 * _1902;
        float _1910 = _1907 * _1903;
        float _1911 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1881].xyz));
        float _3814 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1914 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1915 = dot(vec3(_329, _330, _331), vec3(_1908, _1909, _1910));
        float _3825 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1918 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1919 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_1908, _1909, _1910));
        float _3836 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1923 = _1900 * _1900;
        float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
        float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1937 = 1.0 - _1900;
        float _1947 = (0.5 / (((_1691 * ((_1914 * _1937) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _1937) + _1900) * _1914))) * _1914;
        float _3847 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1949 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
        float _1950 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _1875 = (((_1936 * cbLight._m0[_1885].x) * _1949) * _1950) + _1811;
        _1877 = (((_1936 * cbLight._m0[_1885].y) * _1949) * _1950) + _1812;
        _1879 = (((_1936 * cbLight._m0[_1885].z) * _1949) * _1950) + _1813;
    }
    float _1985;
    float _1987;
    float _1989;
    if (_1617)
    {
        _1985 = _1875;
        _1987 = _1877;
        _1989 = _1879;
    }
    else
    {
        uint _1996 = _1524 + 3u;
        uint _2000 = _1524 + 11u;
        float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _333) * 0.949999988079071044921875);
        float _2015 = _2014 * _2014;
        float _2016 = cbLight._m0[_1996].x + _410;
        float _2017 = cbLight._m0[_1996].y + _411;
        float _2018 = cbLight._m0[_1996].z + _412;
        float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
        float _2023 = _2022 * _2016;
        float _2024 = _2022 * _2017;
        float _2025 = _2022 * _2018;
        float _2026 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1996].xyz));
        float _3863 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2029 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _2030 = dot(vec3(_329, _330, _331), vec3(_2023, _2024, _2025));
        float _3874 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2033 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _2034 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2023, _2024, _2025));
        float _3885 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2038 = _2015 * _2015;
        float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
        float _2051 = (exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2052 = 1.0 - _2015;
        float _2062 = (0.5 / (((_1691 * ((_2029 * _2052) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _2052) + _2015) * _2029))) * _2029;
        float _3896 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2064 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
        float _2065 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1985 = (((_2051 * cbLight._m0[_2000].x) * _2064) * _2065) + _1875;
        _1987 = (((_2051 * cbLight._m0[_2000].y) * _2064) * _2065) + _1877;
        _1989 = (((_2051 * cbLight._m0[_2000].z) * _2064) * _2065) + _1879;
    }
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    if (_1522.y == 0u)
    {
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2140;
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2140;
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2140;
        uvec4 _2155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2156 = _2155.x;
        uint _2167 = uint((float(_2155.y) * floor(float(uint(cbSceneParam._m0[85u].y * _419) / _2156))) + floor(float(uint(cbSceneParam._m0[85u].x * _418) / _2156)));
        float _2177 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2178 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        uint _2181 = uint(isnan(14.0) ? _2178 : (isnan(_2178) ? 14.0 : min(_2178, 14.0)));
        uvec4 _2186 = texelFetch(g_lightClusterGridBuffer, int(((_2181 << 2u) + (_2167 << 6u)) >> 2u));
        uint _2187 = _2186.x;
        uint _2188 = _2155.z;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((((1u << ((_2188 >> 4u) & 15u)) + 4294967295u) & _2187) == 0u) || ((_2188 & 240u) == 0u))
        {
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
        }
        else
        {
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            uint _2441 = 0u;
            uint _2450;
            bool _2451;
            for (;;)
            {
                _2450 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2441 << 2u)) >> 2u)).x;
                _2451 = _2450 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2451)
                {
                    frontier_phi_61_pred = _2435;
                    frontier_phi_61_pred_1 = _2440;
                    frontier_phi_61_pred_2 = _2439;
                    frontier_phi_61_pred_3 = _2438;
                    frontier_phi_61_pred_4 = _2437;
                    frontier_phi_61_pred_5 = _2436;
                }
                else
                {
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    uint _2565;
                    _2559 = _2435;
                    _2560 = _2436;
                    _2561 = _2437;
                    _2562 = _2438;
                    _2563 = _2439;
                    _2564 = _2440;
                    _2565 = _2450;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    for (;;)
                    {
                        uint _2569 = uint(findLSB(_2565)) + (_2441 << 5u);
                        uint _2566 = (_2565 + 4294967295u) & _2565;
                        uint _2571 = _2569 * 48u;
                        vec4 _2585 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2571)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 3u)).x));
                        uint _2591 = (_2569 * 48u) + 4u;
                        vec4 _2604 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2591)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 3u)).x));
                        uint _2610 = (_2569 * 48u) + 8u;
                        vec3 _2621 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x));
                        float _2625 = _2585.x - _2141;
                        float _2626 = _2585.y - _2142;
                        float _2627 = _2585.z - _2143;
                        float _2628 = dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627));
                        float _2631 = inversesqrt(_2628);
                        float _2632 = _2631 * _2625;
                        float _2633 = _2631 * _2626;
                        float _2634 = _2631 * _2627;
                        float _2635 = dot(vec3(_440, _443, _446), vec3(_2632, _2633, _2634));
                        float _2640 = 1.0 - (_2628 * _2585.w);
                        float _3922 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                        float _2641 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2642 = sqrt(_2628) * _2604.w;
                        float _2645 = 1.39999997615814208984375 / (_2642 + 1.39999997615814208984375);
                        float _2646 = _2645 * _2645;
                        float _2649 = ((1.0 - _2646) * _2635) + _2646;
                        float _2652 = _2642 * _2642;
                        float _2656 = ((isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0))) * _2641) / ((_2652 * 0.699999988079071044921875) + 1.0);
                        float _2660 = (-0.0) - _2141;
                        float _2661 = (-0.0) - _2142;
                        float _2662 = (-0.0) - _2143;
                        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
                        float _2667 = _2666 * _2660;
                        float _2668 = _2666 * _2661;
                        float _2669 = _2666 * _2662;
                        float _2677 = exp2(log2(1.0 / ((_2652 * 3.5) + 5.0)) * 0.25);
                        float _2678 = 1.0 - _501;
                        float _2685 = sqrt(1.0 - ((1.0 - (_2678 * _2678)) * (1.0 - (_2677 * _2677))));
                        float _2686 = _2685 * _2685;
                        float _2687 = _2686 * _2686;
                        float _2688 = _2667 + _2632;
                        float _2689 = _2668 + _2633;
                        float _2690 = _2669 + _2634;
                        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
                        float _2698 = dot(vec3(_440, _443, _446), vec3(_2667, _2668, _2669));
                        float _3938 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2701 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2702 = dot(vec3(_440, _443, _446), vec3(_2694 * _2688, _2694 * _2689, _2694 * _2690));
                        float _3949 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2705 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2709 = ((_2705 * _2705) * (_2687 + (-1.0))) + 1.0;
                        float _2710 = _2645 * _2686;
                        float _2711 = _2710 * _2710;
                        float _2714 = ((1.0 - _2711) * _2635) + _2711;
                        float _3960 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2715 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2716 = 1.0 - _2686;
                        float _2726 = (0.5 / (((_2715 * ((_2701 * _2716) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2715 * _2716) + _2686) * _2701))) * _2715;
                        float _3971 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2737 = (((_2687 * 3.1415927410125732421875) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) / ((_2709 * _2709) * ((_2652 * 2.1991131305694580078125) + 3.141590118408203125))) * _2641;
                        _2494 = (_2656 * _2604.x) + _2562;
                        _2495 = (_2656 * _2604.y) + _2563;
                        _2496 = (_2656 * _2604.z) + _2564;
                        _2491 = (_2737 * _2621.x) + _2559;
                        _2492 = (_2737 * _2621.y) + _2560;
                        _2493 = (_2737 * _2621.z) + _2561;
                        if (_2566 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2559 = _2491;
                            _2560 = _2492;
                            _2561 = _2493;
                            _2562 = _2494;
                            _2563 = _2495;
                            _2564 = _2496;
                            _2565 = _2566;
                        }
                    }
                    frontier_phi_61_pred = _2491;
                    frontier_phi_61_pred_1 = _2496;
                    frontier_phi_61_pred_2 = _2495;
                    frontier_phi_61_pred_3 = _2494;
                    frontier_phi_61_pred_4 = _2493;
                    frontier_phi_61_pred_5 = _2492;
                }
                _2291 = frontier_phi_61_pred;
                _2301 = frontier_phi_61_pred_1;
                _2299 = frontier_phi_61_pred_2;
                _2297 = frontier_phi_61_pred_3;
                _2295 = frontier_phi_61_pred_4;
                _2293 = frontier_phi_61_pred_5;
                uint _2442 = _2441 + 1u;
                if (_2442 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2435 = _2291;
                    _2436 = _2293;
                    _2437 = _2295;
                    _2438 = _2297;
                    _2439 = _2299;
                    _2440 = _2301;
                    _2441 = _2442;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
        }
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.z;
        uint _2307 = (_2305 >> 8u) & 15u;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        if (((4294967295u << _2307) & _2187) == 0u)
        {
            _2403 = _2290;
            _2405 = _2292;
            _2407 = _2294;
            _2409 = _2296;
            _2411 = _2298;
            _2413 = _2300;
        }
        else
        {
            float _2428 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _2429 = _2428 * _2141;
            float _2430 = _2428 * _2142;
            float _2431 = _2428 * _2143;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2307 < ((_2305 >> 12u) & 15u))
            {
                float _2404;
                float _2406;
                float _2408;
                float _2410;
                float _2412;
                float _2414;
                float _2542 = _2290;
                float _2543 = _2292;
                float _2544 = _2294;
                float _2545 = _2296;
                float _2546 = _2298;
                float _2547 = _2300;
                uint _2548 = _2307;
                uint _2557;
                bool _2558;
                for (;;)
                {
                    _2557 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2548 << 2u)) >> 2u)).x;
                    _2558 = _2557 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2558)
                    {
                        frontier_phi_67_pred = _2545;
                        frontier_phi_67_pred_1 = _2546;
                        frontier_phi_67_pred_2 = _2547;
                        frontier_phi_67_pred_3 = _2544;
                        frontier_phi_67_pred_4 = _2543;
                        frontier_phi_67_pred_5 = _2542;
                    }
                    else
                    {
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _2755 = _2542;
                        float _2756 = _2543;
                        float _2757 = _2544;
                        float _2758 = _2545;
                        float _2759 = _2546;
                        float _2760 = _2547;
                        uint _2761 = _2557;
                        uint _2762;
                        vec4 _2787;
                        float _2788;
                        vec4 _2803;
                        vec3 _2815;
                        vec4 _2831;
                        vec4 _2847;
                        float _2894;
                        bool _2895;
                        for (;;)
                        {
                            uint _2772 = ((_2548 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2761));
                            _2762 = (_2761 + 4294967295u) & _2761;
                            uint _2774 = _2772 * 40u;
                            _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            _2788 = _2787.w;
                            uint _2790 = (_2772 * 40u) + 4u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2805 = (_2772 * 40u) + 8u;
                            _2815 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x));
                            uint _2818 = (_2772 * 40u) + 16u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2834 = (_2772 * 40u) + 20u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2850 = (_2772 * 40u) + 24u;
                            vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2869 = (_2772 * 40u) + 28u;
                            vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            _2894 = fma(_2143, _2882.z, fma(_2142, _2882.y, _2882.x * _2141)) + _2882.w;
                            _2895 = !((fma(_2143, _2863.z, fma(_2142, _2863.y, _2863.x * _2141)) + _2863.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2895)
                            {
                                float _2922 = _2787.x - _2141;
                                float _2923 = _2787.y - _2142;
                                float _2924 = _2787.z - _2143;
                                float _2925 = dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924));
                                float _2928 = inversesqrt(_2925);
                                float _2929 = _2928 * _2922;
                                float _2930 = _2928 * _2923;
                                float _2931 = _2928 * _2924;
                                float _2935 = 1.0 - (_2925 / (_2788 * _2788));
                                float _3982 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2936 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _2940 = sqrt(_2925) * _2803.w;
                                float _2942 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                                float _2943 = _2942 * _2942;
                                float _2946 = ((1.0 - _2943) * dot(vec3(_2929, _2930, _2931), vec3(_440, _443, _446))) + _2943;
                                float _2949 = _2940 * _2940;
                                float _2953 = (fma(_2143, _2831.z, fma(_2142, _2831.y, _2831.x * _2141)) + _2831.w) / _2894;
                                float _2954 = (fma(_2143, _2847.z, fma(_2142, _2847.y, _2847.x * _2141)) + _2847.w) / _2894;
                                float _2958 = 1.0 - dot(vec2(_2953, _2954), vec2(_2953, _2954));
                                float _3998 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                                float _2959 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _2960 = _2959 * (((isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))) * _2936) / ((_2949 * 0.699999988079071044921875) + 1.0));
                                float _2972 = exp2(log2(1.0 / ((_2949 * 3.5) + 5.0)) * 0.25);
                                float _2973 = 1.0 - _501;
                                float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                                float _2981 = _2980 * _2980;
                                float _2982 = _2981 * _2981;
                                float _2983 = _2929 - _2429;
                                float _2984 = _2930 - _2430;
                                float _2985 = _2931 - _2431;
                                float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                                float _2993 = dot(vec3(_440, _443, _446), vec3((-0.0) - _2429, (-0.0) - _2430, (-0.0) - _2431));
                                float _4009 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2996 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _2997 = dot(vec3(_440, _443, _446), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                                float _4020 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _3000 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                                float _3005 = _2942 * _2981;
                                float _3006 = _3005 * _3005;
                                float _3012 = ((1.0 - _3006) * dot(vec3(_440, _443, _446), vec3(_2929, _2930, _2931))) + _3006;
                                float _4031 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3014 = 1.0 - _2981;
                                float _3024 = (0.5 / (((_3013 * ((_2996 * _3014) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2981) * _2996))) * _3013;
                                float _4042 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3034 = (_2959 * _2936) * (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) / ((_3004 * _3004) * ((_2949 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3034 * _2815.x;
                                frontier_phi_73_pred_1 = _3034 * _2815.y;
                                frontier_phi_73_pred_2 = _2960 * _2803.z;
                                frontier_phi_73_pred_3 = _2960 * _2803.y;
                                frontier_phi_73_pred_4 = _2960 * _2803.x;
                                frontier_phi_73_pred_5 = _3034 * _2815.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3038 = frontier_phi_73_pred;
                            _3039 = frontier_phi_73_pred_1;
                            _3043 = frontier_phi_73_pred_2;
                            _3042 = frontier_phi_73_pred_3;
                            _3041 = frontier_phi_73_pred_4;
                            _3040 = frontier_phi_73_pred_5;
                            _2745 = _3041 + _2758;
                            _2746 = _3042 + _2759;
                            _2747 = _3043 + _2760;
                            _2742 = _3038 + _2755;
                            _2743 = _3039 + _2756;
                            _2744 = _3040 + _2757;
                            if (_2762 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2762;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2745;
                        frontier_phi_67_pred_1 = _2746;
                        frontier_phi_67_pred_2 = _2747;
                        frontier_phi_67_pred_3 = _2744;
                        frontier_phi_67_pred_4 = _2743;
                        frontier_phi_67_pred_5 = _2742;
                    }
                    _2410 = frontier_phi_67_pred;
                    _2412 = frontier_phi_67_pred_1;
                    _2414 = frontier_phi_67_pred_2;
                    _2408 = frontier_phi_67_pred_3;
                    _2406 = frontier_phi_67_pred_4;
                    _2404 = frontier_phi_67_pred_5;
                    uint _2549 = _2548 + 1u;
                    if (_2549 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2542 = _2404;
                        _2543 = _2406;
                        _2544 = _2408;
                        _2545 = _2410;
                        _2546 = _2412;
                        _2547 = _2414;
                        _2548 = _2549;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2412;
                frontier_phi_55_56_ladder_1 = _2414;
                frontier_phi_55_56_ladder_2 = _2410;
                frontier_phi_55_56_ladder_3 = _2408;
                frontier_phi_55_56_ladder_4 = _2406;
                frontier_phi_55_56_ladder_5 = _2404;
            }
            else
            {
                frontier_phi_55_56_ladder = _2298;
                frontier_phi_55_56_ladder_1 = _2300;
                frontier_phi_55_56_ladder_2 = _2296;
                frontier_phi_55_56_ladder_3 = _2294;
                frontier_phi_55_56_ladder_4 = _2292;
                frontier_phi_55_56_ladder_5 = _2290;
            }
            _2403 = frontier_phi_55_56_ladder_5;
            _2405 = frontier_phi_55_56_ladder_4;
            _2407 = frontier_phi_55_56_ladder_3;
            _2409 = frontier_phi_55_56_ladder_2;
            _2411 = frontier_phi_55_56_ladder;
            _2413 = frontier_phi_55_56_ladder_1;
        }
        float _2418 = isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0));
        _2200 = (_2418 * _2409) + _1655;
        _2202 = (_2418 * _2411) + _1657;
        _2204 = (_2418 * _2413) + _1659;
        _2206 = ((_2403 * 0.039999999105930328369140625) * _2418) + _1985;
        _2208 = ((_2405 * 0.039999999105930328369140625) * _2418) + _1987;
        _2210 = ((_2407 * 0.039999999105930328369140625) * _2418) + _1989;
    }
    else
    {
        _2200 = _1655;
        _2202 = _1657;
        _2204 = _1659;
        _2206 = _1985;
        _2208 = _1987;
        _2210 = _1989;
    }
    float _4058 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4069 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4080 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4091 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _2235 = cbInstanceData._m0[_459 + 6u].w * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)));
    float _2240 = _418 / cbSceneParam._m0[86u].x;
    float _2241 = _419 / cbSceneParam._m0[86u].y;
    vec4 _2255 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, (log2((isnan(cbSceneParam._m0[77u].w) ? _352 : (isnan(_352) ? cbSceneParam._m0[77u].w : min(_352, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2257 = _2255.x;
    float _2258 = _2255.y;
    float _2259 = _2255.z;
    float _2260 = _2255.w;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_352 > cbSceneParam._m0[78u].w)
    {
        float _2315 = isnan(_352) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _352 : min(cbSceneParam._m0[80u].w, _352));
        float _2316 = _2315 / _352;
        float _2327 = _2316 * _403;
        float _2328 = _404 * _2316;
        float _2329 = (-0.0) - _2328;
        float _2331 = _2316 * _405;
        float _2333 = (cbSceneParam._m0[77u].w * _2329) / _2315;
        float _2334 = _2333 + cbSceneParam._m0[79u].w;
        float _2335 = cbSceneParam._m0[79u].w - _2328;
        float _2341 = sqrt(((_2327 * _2327) + (_2328 * _2328)) + (_2331 * _2331));
        float _2344 = (1.0 - (cbSceneParam._m0[77u].w / _2315)) * _2341;
        float _2349 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2351 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2504;
        if (abs((_2329 - _2333) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2504 = ((((_2334 > 0.0) ? exp2(_2349 * _2334) : (2.0 - exp2(_2351 * _2334))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2344;
        }
        else
        {
            float _2464 = 1.0 / cbSceneParam._m0[80u].x;
            float _2465 = isnan(_2335) ? _2334 : (isnan(_2334) ? _2335 : max(_2334, _2335));
            float _2466 = isnan(_2335) ? _2334 : (isnan(_2334) ? _2335 : min(_2334, _2335));
            float _2475 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : min(_2465, 0.0));
            float _2476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : min(_2466, 0.0));
            _2504 = ((abs(_2341 / _2329) * cbSceneParam._m0[80u].y) * ((((_2475 - _2476) * 2.0) - ((exp2(_2349 * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0)))) - exp2(_2349 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0))))) * _2464)) - ((exp2(_2351 * _2475) - exp2(_2351 * _2476)) * _2464))) + (_2344 * cbSceneParam._m0[80u].z);
        }
        vec4 _2506 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, 1.0), 0.0);
        float _2515 = exp2((_2504 * (-1.44269502162933349609375)) * (1.0 - _2506.w));
        float _2516 = log2(_2515);
        float _2532 = log2(_2260);
        _2353 = (exp2(_2532 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2516 * cbSceneParam._m0[78u].x)) * _2506.x) / cbSceneParam._m0[78u].x)) + _2257;
        _2355 = (exp2(_2532 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2516 * cbSceneParam._m0[78u].y)) * _2506.y) / cbSceneParam._m0[78u].y)) + _2258;
        _2357 = (exp2(_2532 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2516 * cbSceneParam._m0[78u].z)) * _2506.z) / cbSceneParam._m0[78u].z)) + _2259;
        _2359 = _2515 * _2260;
    }
    else
    {
        _2353 = _2257;
        _2355 = _2258;
        _2357 = _2259;
        _2359 = _2260;
    }
    float _2371 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2372 = _2371 == 3.0;
    float _2373 = log2(_2359);
    float _2380 = exp2(_2373 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2200 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _485))) + ((_2206 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2381 = exp2(_2373 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2202 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _485))) + ((_2208 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2382 = exp2(_2373 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2204 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _485))) + ((_2210 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2391 = (_2371 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2391 * (_2372 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2353)));
    SV_Target.y = _2391 * (_2372 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2355)));
    SV_Target.z = _2391 * (_2372 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2357)));
    SV_Target.w = _2235;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2235;
}


