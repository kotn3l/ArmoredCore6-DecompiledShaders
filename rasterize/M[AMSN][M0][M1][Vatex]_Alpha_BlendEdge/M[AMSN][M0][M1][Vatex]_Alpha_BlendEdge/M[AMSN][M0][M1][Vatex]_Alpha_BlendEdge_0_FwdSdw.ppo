#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _893;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    float _261 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[10u].x;
    float _262 = _234.w * TEXCOORD.x;
    float _273 = (_262 < 0.5) ? 0.0 : 1.0;
    float _283 = (((((_262 * 2.0) * (1.0 - _273)) * _261) + (-0.5)) + ((1.0 - (((1.0 - _262) * 2.0) * (1.0 - _261))) * _273)) * cbMtdParam._m0[10u].z;
    precise float _287 = _283 * ((_283 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _288 = cbMtdParam._m0[10u].y + _287;
    float _3515 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _289 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _294 = (_289 * _289) * (3.0 - (_289 * 2.0));
    vec4 _306 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _308 = _306.x;
    vec4 _320 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Alpha_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = _320.z;
    float _327 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3526 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    float _338 = fma(_335, _204 * NORMAL.x, fma(_329, _211 * TANGENT.x, (_197 * _189) * _327));
    float _341 = fma(_335, _204 * NORMAL.y, fma(_329, _211 * TANGENT.y, (_197 * _190) * _327));
    float _344 = fma(_335, _204 * NORMAL.z, fma(_329, _211 * TANGENT.z, (_197 * _191) * _327));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _349 = _348 * _338;
    float _350 = _348 * _341;
    float _351 = _348 * _344;
    float _3537 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _352 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _353 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3570 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3581 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3592 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _357 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _373 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _424 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _414);
    float _425 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _414);
    float _426 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _414);
    float _430 = inversesqrt(dot(vec3(_424, _425, _426), vec3(_424, _425, _426)));
    float _431 = _424 * _430;
    float _432 = _425 * _430;
    float _433 = _426 * _430;
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_351, cbSceneParam._m0[5u].z, fma(_350, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _349));
    float _464 = fma(_351, cbSceneParam._m0[6u].z, fma(_350, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _349));
    float _467 = fma(_351, cbSceneParam._m0[7u].z, fma(_350, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _349));
    uint _480 = uint(roundEven(NORMAL.w)) * 13u;
    uint _483 = (_480 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_483].x;
    float _490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_483].y;
    float _491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_483].z;
    float _3603 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _495 = 1.0 - _357;
    float _496 = _492 * _495;
    float _497 = _493 * _495;
    float _498 = _494 * _495;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _357;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _357;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _357;
    float _506 = _503 + 0.039999999105930328369140625;
    float _508 = _504 + 0.039999999105930328369140625;
    float _509 = _505 + 0.039999999105930328369140625;
    vec4 _518 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _439, cbSceneParam._m0[86u].y * _440));
    float _521 = _518.x * TEXCOORD.y;
    float _522 = dot(vec3(_349, _350, _351), vec3(_431, _432, _433));
    float _525 = _522 * 2.0;
    float _529 = (_525 * _349) - _431;
    float _530 = (_525 * _350) - _432;
    float _531 = (_525 * _351) - _433;
    float _535 = abs(dot(vec3(_431, _432, _433), vec3(_349, _350, _351)));
    float _3636 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _537 = sqrt(_353);
    float _549 = exp2((_537 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_537 * 3.0));
    float _555 = (1.0 - _549) * ((_537 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _556 = _549 * _537;
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _619 = fma(_592, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584));
        float _623 = fma(_592, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584));
        float _627 = fma(_592, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584));
        float _650 = _584 + _349;
        float _651 = _588 + _350;
        float _652 = _592 + _351;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _619;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _623;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _627;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_619 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_623 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_627 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_349, _350, _351), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3684 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_349, _350, _351), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3717 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_349, _350, _351), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3750 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _933 = fma(_592, cbModelParam._m0[30u].z, fma(_588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _584));
        float _937 = fma(_592, cbModelParam._m0[31u].z, fma(_588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _584));
        float _941 = fma(_592, cbModelParam._m0[32u].z, fma(_588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _584));
        float _964 = _584 + _349;
        float _965 = _588 + _350;
        float _966 = _592 + _351;
        float _976 = fma(_966, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964)) - _933;
        float _977 = fma(_966, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964)) - _937;
        float _978 = fma(_966, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964)) - _941;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_933 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_937 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[35u].z) + ((((((_941 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1032 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_999.x + (-0.5));
        float _1034 = _1032 * (_999.y + (-0.5));
        float _1035 = _1032 * (_999.z + (-0.5));
        float _1042 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1006.x + (-0.5));
        float _1044 = _1042 * (_1006.y + (-0.5));
        float _1045 = _1042 * (_1006.z + (-0.5));
        float _1052 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1013.x + (-0.5));
        float _1054 = _1052 * (_1013.y + (-0.5));
        float _1055 = _1052 * (_1013.z + (-0.5));
        float _1062 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1020.x + (-0.5));
        float _1064 = _1062 * (_1020.y + (-0.5));
        float _1065 = _1062 * (_1020.z + (-0.5));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = _1033 * 0.5;
        float _1070 = _1043 * 0.5;
        float _1071 = _1053 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_349, _350, _351), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3813 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1096 + 1.0))) + _1101) * _1066;
        float _1111 = _1034 * 0.5;
        float _1112 = _1044 * 0.5;
        float _1113 = _1054 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_349, _350, _351), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3846 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1138 + 1.0))) + _1143) * _1067;
        float _1153 = _1035 * 0.5;
        float _1154 = _1045 * 0.5;
        float _1155 = _1055 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_349, _350, _351), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3879 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1180 + 1.0))) + _1185) * _1068;
        _1202 = _1035;
        _1203 = _1034;
        _1204 = _1033;
        _1205 = _1045;
        _1206 = _1044;
        _1207 = _1043;
        _1208 = _1055;
        _1209 = _1054;
        _1210 = _1053;
        _1211 = _1068;
        _1212 = _1067;
        _1213 = _1066;
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _893;
        _1203 = _893;
        _1204 = _893;
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = 0.0;
        _1215 = 0.0;
        _1216 = 0.0;
    }
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _907)) + _907;
    float _1249 = fma(_1228, cbSceneParam._m0[89u].z, fma(_1227, cbSceneParam._m0[89u].y, _1226 * cbSceneParam._m0[89u].x));
    float _1252 = fma(_1228, cbSceneParam._m0[90u].z, fma(_1227, cbSceneParam._m0[90u].y, _1226 * cbSceneParam._m0[90u].x));
    float _1255 = fma(_1228, cbSceneParam._m0[91u].z, fma(_1227, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1226));
    float _1270 = _529 * 0.5;
    float _1271 = _530 * 0.5;
    float _1272 = _531 * 0.5;
    float _1273 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1276 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1279 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1313;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1286 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_892, _896, _899, _902));
        float _1290 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_894, _897, _900, _903));
        float _1294 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_895, _898, _901, _904));
        float _1301 = dot(vec4(cbModelParam._m0[39u]), vec4(_1270, _1271, _1272, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1324;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1315 = dot(vec4(cbModelParam._m0[40u]), vec4(_1270, _1271, _1272, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1328 = (_1324 * cbModelParam._m0[1u].x) + (_1313 * (1.0 - cbModelParam._m0[1u].x));
    float _1338 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1339 = isnan(_1338) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1338 : min(cbModelParam._m0[25u].z, _1338));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1388 = fma(_592, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584)) + cbModelParam._m0[13u].w;
        float _1392 = fma(_592, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584)) + cbModelParam._m0[14u].w;
        float _1396 = fma(_592, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584)) + cbModelParam._m0[15u].w;
        float _1399 = fma(_531, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529));
        float _1402 = fma(_531, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529));
        float _1405 = fma(_531, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529));
        float _1433;
        if (_1399 > 0.0)
        {
            _1433 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1433 = frontier_phi_14_12_ladder;
        }
        float _1609;
        if (_1402 > 0.0)
        {
            _1609 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1609 = frontier_phi_23_19_ladder;
        }
        float _1905;
        if (_1405 > 0.0)
        {
            _1905 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1905 = frontier_phi_35_30_ladder;
        }
        float _1907 = isnan(_1609) ? _1433 : (isnan(_1433) ? _1609 : min(_1433, _1609));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1399) + _1388;
        float _1913 = (_1908 * _1402) + _1392;
        float _1914 = (_1908 * _1405) + _1396;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1339);
            frontier_phi_13_35_ladder = _2059.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2059.x * cbModelParam._m0[1u].y;
        }
        _1421 = frontier_phi_13_35_ladder_2;
        _1423 = frontier_phi_13_35_ladder_1;
        _1425 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_529, _530, _531), _1339);
        _1421 = _1409.x * cbModelParam._m0[1u].y;
        _1423 = _1409.y * cbModelParam._m0[1u].y;
        _1425 = _1409.z * cbModelParam._m0[1u].y;
    }
    float _1429 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1429 : min(cbModelParam._m0[25u].w, _1429));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1487 = fma(_592, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584)) + cbModelParam._m0[21u].w;
        float _1491 = fma(_592, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584)) + cbModelParam._m0[22u].w;
        float _1495 = fma(_592, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584)) + cbModelParam._m0[23u].w;
        float _1498 = fma(_531, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529));
        float _1501 = fma(_531, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529));
        float _1504 = fma(_531, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529));
        float _1614;
        if (_1498 > 0.0)
        {
            _1614 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1614 = frontier_phi_25_21_ladder;
        }
        float _1932;
        if (_1501 > 0.0)
        {
            _1932 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1932 = frontier_phi_37_32_ladder;
        }
        float _2270;
        if (_1504 > 0.0)
        {
            _2270 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2270 = frontier_phi_47_44_ladder;
        }
        float _2272 = isnan(_1932) ? _1614 : (isnan(_1614) ? _1932 : min(_1614, _1932));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1498) + _1487;
        float _2278 = (_2273 * _1501) + _1491;
        float _2279 = (_2273 * _1504) + _1495;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1430);
            frontier_phi_22_47_ladder = _2401.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2401.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2401.x * cbModelParam._m0[1u].z;
        }
        _1523 = frontier_phi_22_47_ladder_2;
        _1525 = frontier_phi_22_47_ladder_1;
        _1527 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_529, _530, _531), _1430);
        _1523 = _1507.x * cbModelParam._m0[1u].z;
        _1525 = _1507.y * cbModelParam._m0[1u].z;
        _1527 = _1507.z * cbModelParam._m0[1u].z;
    }
    float _1540 = (((_555 * _506) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1542 = (((_555 * _508) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1544 = (((_555 * _509) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1527 - _1425)) + _1425);
    float _1547 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1550 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1553 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1540 * cbSceneParam._m0[91u].x));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1600 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1601 = _1588 / _1600;
    float _1602 = _1592 / _1600;
    float _1603 = _1596 / _1600;
    float _1750;
    float _1751;
    float _1752;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1630 = ((uint(_1603 > cbSceneParam._m0[59u].y) + uint(_1603 > cbSceneParam._m0[59u].x)) + uint(_1603 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1631 = _1630 + 43u;
        uint _1639 = _1630 + 44u;
        uint _1647 = _1630 + 45u;
        uint _1655 = _1630 + 46u;
        float _1666 = fma(_1600, cbSceneParam._m0[_1631].w, fma(_1596, cbSceneParam._m0[_1631].z, fma(_1592, cbSceneParam._m0[_1631].y, _1588 * cbSceneParam._m0[_1631].x)));
        float _1670 = fma(_1600, cbSceneParam._m0[_1639].w, fma(_1596, cbSceneParam._m0[_1639].z, fma(_1592, cbSceneParam._m0[_1639].y, _1588 * cbSceneParam._m0[_1639].x)));
        float _1678 = fma(_1600, cbSceneParam._m0[_1655].w, fma(_1596, cbSceneParam._m0[_1655].z, fma(_1592, cbSceneParam._m0[_1655].y, _1588 * cbSceneParam._m0[_1655].x)));
        float _1683 = cbSceneParam._m0[33u].z * _1678;
        float _1685 = cbSceneParam._m0[33u].w * _1678;
        float _1688 = fma(_1600, cbSceneParam._m0[_1647].w, fma(_1596, cbSceneParam._m0[_1647].z, fma(_1592, cbSceneParam._m0[_1647].y, _1588 * cbSceneParam._m0[_1647].x))) / _1678;
        float _1736 = (cbSceneParam._m0[33u].x - sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603))) * cbSceneParam._m0[33u].y;
        float _4005 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1743 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 + _1666) / _1678, (_1685 + _1670) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 + _1666) / _1678, (_1670 - _1683) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 - _1683) / _1678, (_1670 - _1685) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 - _1685) / _1678, (_1683 + _1670) / _1678), _1688), 0.0)).x), vec4(0.25)));
        _1750 = 1.0 - (_1743 * cbSceneParam._m0[34u].x);
        _1751 = 1.0 - (_1743 * cbSceneParam._m0[34u].y);
        _1752 = 1.0 - (_1743 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1750 = 1.0;
        _1751 = 1.0;
        _1752 = 1.0;
    }
    float _1816;
    float _1818;
    float _1820;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1804 = fma(_1600, cbSceneParam._m0[63u].w, fma(_1596, cbSceneParam._m0[63u].z, fma(_1592, cbSceneParam._m0[63u].y, _1588 * cbSceneParam._m0[63u].x)));
        float _1805 = fma(_1600, cbSceneParam._m0[60u].w, fma(_1596, cbSceneParam._m0[60u].z, fma(_1592, cbSceneParam._m0[60u].y, _1588 * cbSceneParam._m0[60u].x))) / _1804;
        float _1806 = fma(_1600, cbSceneParam._m0[61u].w, fma(_1596, cbSceneParam._m0[61u].z, fma(_1592, cbSceneParam._m0[61u].y, _1588 * cbSceneParam._m0[61u].x))) / _1804;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1805 >= cbSceneParam._m0[64u].x) && (_1806 >= cbSceneParam._m0[64u].y)) && (_1805 <= cbSceneParam._m0[64u].z)) && (_1806 <= cbSceneParam._m0[64u].w))
        {
            float _1945 = fma(_1600, cbSceneParam._m0[62u].w, fma(_1596, cbSceneParam._m0[62u].z, fma(_1592, cbSceneParam._m0[62u].y, _1588 * cbSceneParam._m0[62u].x))) / _1804;
            float _1949 = isnan(cbSceneParam._m0[41u].w) ? _1945 : (isnan(_1945) ? cbSceneParam._m0[41u].w : max(_1945, cbSceneParam._m0[41u].w));
            float _1992 = (cbSceneParam._m0[33u].x - sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603))) * cbSceneParam._m0[33u].y;
            float _4021 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
            float _1999 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1805, cbSceneParam._m0[33u].w + _1806), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1805, _1806 - cbSceneParam._m0[33u].z), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1805 - cbSceneParam._m0[33u].z, _1806 - cbSceneParam._m0[33u].w), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1805 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1806), _1949), 0.0)).x), vec4(0.25)));
            float _2003 = 1.0 - (_1999 * cbSceneParam._m0[34u].x);
            float _2004 = 1.0 - (_1999 * cbSceneParam._m0[34u].y);
            float _2005 = 1.0 - (_1999 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2005) ? _1752 : (isnan(_1752) ? _2005 : min(_1752, _2005));
            frontier_phi_34_33_ladder_1 = isnan(_2004) ? _1751 : (isnan(_1751) ? _2004 : min(_1751, _2004));
            frontier_phi_34_33_ladder_2 = isnan(_2003) ? _1750 : (isnan(_1750) ? _2003 : min(_1750, _2003));
        }
        else
        {
            frontier_phi_34_33_ladder = _1752;
            frontier_phi_34_33_ladder_1 = _1751;
            frontier_phi_34_33_ladder_2 = _1750;
        }
        _1816 = frontier_phi_34_33_ladder_2;
        _1818 = frontier_phi_34_33_ladder_1;
        _1820 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1816 = _1750;
        _1818 = _1751;
        _1820 = _1752;
    }
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_480 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1835 = _521 + (-1.0);
    float _1840 = (cbLight._m0[_1828].x * _1835) + 1.0;
    float _1841 = (cbLight._m0[_1828].y * _1835) + 1.0;
    float _1842 = (cbLight._m0[_1828].z * _1835) + 1.0;
    float _1843 = (cbLight._m0[_1828].w * _1835) + 1.0;
    uint _1844 = _1827 + 5u;
    float _1850 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1854 = _1827 + 4u;
    float _1864 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1868 = _1827 | 1u;
    float _1879 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_349, _350, _351));
    float _1882 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_349, _350, _351));
    float _4057 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _4068 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1887 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1889 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1896 = ((cbLight._m0[_1844].x * _1850) * _1889) + (((cbLight._m0[_1854].x * _1816) * _1864) * _1887);
    float _1897 = ((_1850 * cbLight._m0[_1844].y) * _1889) + (((cbLight._m0[_1854].y * _1818) * _1864) * _1887);
    float _1898 = ((_1850 * cbLight._m0[_1844].z) * _1889) + (((cbLight._m0[_1854].z * _1820) * _1864) * _1887);
    uvec4 _1902 = floatBitsToUint(cbLight._m0[_1827 + 12u]);
    bool _1904 = _1902.x == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1904)
    {
        _2006 = _1896;
        _2008 = _1897;
        _2010 = _1898;
    }
    else
    {
        uint _2014 = _1827 + 6u;
        float _2030 = (dot(vec3(cbLight._m0[_1827 + 2u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _4079 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2033 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2006 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1896;
        _2008 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1897;
        _2010 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1898;
    }
    bool _2013 = _1902.y == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2013)
    {
        _2068 = _2006;
        _2070 = _2008;
        _2072 = _2010;
    }
    else
    {
        uint _2241 = _1827 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1827 + 3u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4095 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2260 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2068 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2006;
        _2070 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2008;
        _2072 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2010;
    }
    uint _2075 = _1827 + 8u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _353) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1827].x + _431;
    float _2091 = cbLight._m0[_1827].y + _432;
    float _2092 = cbLight._m0[_1827].z + _433;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1827].xyz));
    float _4111 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2104 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2105 = dot(vec3(_349, _350, _351), vec3(_2097, _2098, _2099));
    float _4133 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_2097, _2098, _2099));
    float _4144 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2089 * _2089;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
    float _2126 = 0.959999978542327880859375 - _503;
    float _2128 = 0.959999978542327880859375 - _504;
    float _2129 = 0.959999978542327880859375 - _505;
    float _2136 = 1.0 - _2089;
    float _2147 = (0.5 / (((_2104 * ((_2103 * _2136) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2136) + _2089) * _2103))) * _2103;
    float _4155 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    uint _2163 = _1827 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _353) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1868].x + _431;
    float _2177 = cbLight._m0[_1868].y + _432;
    float _2178 = cbLight._m0[_1868].z + _433;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1868].xyz));
    float _4166 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2190 = dot(vec3(_349, _350, _351), vec3(_2183, _2184, _2185));
    float _4177 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2183, _2184, _2185));
    float _4188 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0);
    float _2216 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2104 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2216) + _2175) * _2189))) * _2189;
    float _4199 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2238 = (((((_2209 * _2126) + _506) * cbLight._m0[_2163].x) * _2228) * _1850) + ((((cbLight._m0[_2075].x * _1816) * ((_2125 * _2126) + _506)) * _2149) * _1864);
    float _2239 = (((((_2209 * _2128) + _508) * cbLight._m0[_2163].y) * _2228) * _1850) + ((((cbLight._m0[_2075].y * _1818) * ((_2125 * _2128) + _508)) * _2149) * _1864);
    float _2240 = (((((_2209 * _2129) + _509) * cbLight._m0[_2163].z) * _2228) * _1850) + ((((cbLight._m0[_2075].z * _1820) * ((_2125 * _2129) + _509)) * _2149) * _1864);
    float _2296;
    float _2298;
    float _2300;
    if (_1904)
    {
        _2296 = _2238;
        _2298 = _2239;
        _2300 = _2240;
    }
    else
    {
        uint _2302 = _1827 + 2u;
        uint _2306 = _1827 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _353) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _431;
        float _2323 = cbLight._m0[_2302].y + _432;
        float _2324 = cbLight._m0[_2302].z + _433;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2302].xyz));
        float _4210 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2336 = dot(vec3(_349, _350, _351), vec3(_2329, _2330, _2331));
        float _4221 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4232 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0);
        float _2362 = 1.0 - _2321;
        float _2372 = (0.5 / (((_2104 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2362) + _2321) * _2335))) * _2335;
        float _4243 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2296 = (((((_2355 * _2126) + _506) * cbLight._m0[_2306].x) * _2374) * _2375) + _2238;
        _2298 = (((((_2355 * _2128) + _508) * cbLight._m0[_2306].y) * _2374) * _2375) + _2239;
        _2300 = (((((_2355 * _2129) + _509) * cbLight._m0[_2306].z) * _2374) * _2375) + _2240;
    }
    float _2406;
    float _2408;
    float _2410;
    if (_2013)
    {
        _2406 = _2296;
        _2408 = _2298;
        _2410 = _2300;
    }
    else
    {
        uint _2417 = _1827 + 3u;
        uint _2421 = _1827 + 11u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _353) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _431;
        float _2438 = cbLight._m0[_2417].y + _432;
        float _2439 = cbLight._m0[_2417].z + _433;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2417].xyz));
        float _4259 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2451 = dot(vec3(_349, _350, _351), vec3(_2444, _2445, _2446));
        float _4270 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4281 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2104 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2477) + _2436) * _2450))) * _2450;
        float _4292 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2406 = (((((_2470 * _2126) + _506) * cbLight._m0[_2421].x) * _2489) * _2490) + _2296;
        _2408 = (((((_2470 * _2128) + _508) * cbLight._m0[_2421].y) * _2489) * _2490) + _2298;
        _2410 = (((((_2470 * _2129) + _509) * cbLight._m0[_2421].z) * _2489) * _2490) + _2300;
    }
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_1825.y == 0u)
    {
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _2512)));
        float _2533 = (log2(_1603 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            uint _2776 = 0u;
            uint _2785;
            bool _2786;
            for (;;)
            {
                _2785 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                _2786 = _2785 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2786)
                {
                    frontier_phi_66_pred = _2775;
                    frontier_phi_66_pred_1 = _2774;
                    frontier_phi_66_pred_2 = _2773;
                    frontier_phi_66_pred_3 = _2772;
                    frontier_phi_66_pred_4 = _2771;
                    frontier_phi_66_pred_5 = _2770;
                }
                else
                {
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    uint _2900;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2785;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2904 = uint(findLSB(_2900)) + (_2776 << 5u);
                        uint _2901 = (_2900 + 4294967295u) & _2900;
                        uint _2906 = _2904 * 48u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2926 = (_2904 * 48u) + 4u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2945 = (_2904 * 48u) + 8u;
                        vec3 _2956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x));
                        float _2960 = _2920.x - _1601;
                        float _2961 = _2920.y - _1602;
                        float _2962 = _2920.z - _1603;
                        float _2963 = dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962));
                        float _2966 = inversesqrt(_2963);
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2970 = dot(vec3(_461, _464, _467), vec3(_2967, _2968, _2969));
                        float _2975 = 1.0 - (_2963 * _2920.w);
                        float _4318 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2977 = sqrt(_2963) * _2939.w;
                        float _2980 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2970) + _2981;
                        float _2987 = _2977 * _2977;
                        float _2991 = ((isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))) * _2976) / ((_2987 * 0.699999988079071044921875) + 1.0);
                        float _2995 = (-0.0) - _1601;
                        float _2996 = (-0.0) - _1602;
                        float _2997 = (-0.0) - _1603;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3011 = exp2(log2(1.0 / ((_2987 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _537;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3002 + _2967;
                        float _3023 = _3003 + _2968;
                        float _3024 = _3004 + _2969;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_461, _464, _467), vec3(_3002, _3003, _3004));
                        float _4334 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3036 = dot(vec3(_461, _464, _467), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4345 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2980 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2970) + _3045;
                        float _4356 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4367 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3043 * _3043) * ((_2987 * 2.1991131305694580078125) + 3.141590118408203125))) * _2976;
                        _2829 = (_2991 * _2939.x) + _2897;
                        _2830 = (_2991 * _2939.y) + _2898;
                        _2831 = (_2991 * _2939.z) + _2899;
                        _2826 = (_3071 * _2956.x) + _2894;
                        _2827 = (_3071 * _2956.y) + _2895;
                        _2828 = (_3071 * _2956.z) + _2896;
                        if (_2901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2901;
                        }
                    }
                    frontier_phi_66_pred = _2831;
                    frontier_phi_66_pred_1 = _2830;
                    frontier_phi_66_pred_2 = _2829;
                    frontier_phi_66_pred_3 = _2828;
                    frontier_phi_66_pred_4 = _2827;
                    frontier_phi_66_pred_5 = _2826;
                }
                _2636 = frontier_phi_66_pred;
                _2634 = frontier_phi_66_pred_1;
                _2632 = frontier_phi_66_pred_2;
                _2630 = frontier_phi_66_pred_3;
                _2628 = frontier_phi_66_pred_4;
                _2626 = frontier_phi_66_pred_5;
                uint _2777 = _2776 + 1u;
                if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2770 = _2626;
                    _2771 = _2628;
                    _2772 = _2630;
                    _2773 = _2632;
                    _2774 = _2634;
                    _2775 = _2636;
                    _2776 = _2777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((4294967295u << _2642) & _2543) == 0u)
        {
            _2738 = _2625;
            _2740 = _2627;
            _2742 = _2629;
            _2744 = _2631;
            _2746 = _2633;
            _2748 = _2635;
        }
        else
        {
            float _2763 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
            float _2764 = _2763 * _1601;
            float _2765 = _2763 * _1602;
            float _2766 = _2763 * _1603;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2877 = _2625;
                float _2878 = _2627;
                float _2879 = _2629;
                float _2880 = _2631;
                float _2881 = _2633;
                float _2882 = _2635;
                uint _2883 = _2642;
                uint _2892;
                bool _2893;
                for (;;)
                {
                    _2892 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                    _2893 = _2892 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2893)
                    {
                        frontier_phi_72_pred = _2882;
                        frontier_phi_72_pred_1 = _2881;
                        frontier_phi_72_pred_2 = _2880;
                        frontier_phi_72_pred_3 = _2879;
                        frontier_phi_72_pred_4 = _2878;
                        frontier_phi_72_pred_5 = _2877;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3089 = _2877;
                        float _3090 = _2878;
                        float _3091 = _2879;
                        float _3092 = _2880;
                        float _3093 = _2881;
                        float _3094 = _2882;
                        uint _3095 = _2892;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3106 = ((_2883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3106 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3106 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_1603, _3216.z, fma(_1602, _3216.y, _3216.x * _1601)) + _3216.w;
                            _3229 = !((fma(_1603, _3197.z, fma(_1602, _3197.y, _3197.x * _1601)) + _3197.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3121.x - _1601;
                                float _3257 = _3121.y - _1602;
                                float _3258 = _3121.z - _1603;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3122 * _3122));
                                float _4378 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3274 = sqrt(_3259) * _3137.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_461, _464, _467))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_1603, _3165.z, fma(_1602, _3165.y, _3165.x * _1601)) + _3165.w) / _3228;
                                float _3288 = (fma(_1603, _3181.z, fma(_1602, _3181.y, _3181.x * _1601)) + _3181.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4394 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _537;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2764;
                                float _3318 = _3264 - _2765;
                                float _3319 = _3265 - _2766;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2764, (-0.0) - _2765, (-0.0) - _2766));
                                float _4405 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3331 = dot(vec3(_461, _464, _467), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4416 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_461, _464, _467), vec3(_3263, _3264, _3265))) + _3340;
                                float _4427 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4438 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3294 * _3137.y;
                                frontier_phi_78_pred_1 = _3294 * _3137.x;
                                frontier_phi_78_pred_2 = _3368 * _3149.z;
                                frontier_phi_78_pred_3 = _3368 * _3149.y;
                                frontier_phi_78_pred_4 = _3368 * _3149.x;
                                frontier_phi_78_pred_5 = _3294 * _3137.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_78_pred;
                            _3375 = frontier_phi_78_pred_1;
                            _3374 = frontier_phi_78_pred_2;
                            _3373 = frontier_phi_78_pred_3;
                            _3372 = frontier_phi_78_pred_4;
                            _3377 = frontier_phi_78_pred_5;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3081;
                        frontier_phi_72_pred_1 = _3080;
                        frontier_phi_72_pred_2 = _3079;
                        frontier_phi_72_pred_3 = _3078;
                        frontier_phi_72_pred_4 = _3077;
                        frontier_phi_72_pred_5 = _3076;
                    }
                    _2749 = frontier_phi_72_pred;
                    _2747 = frontier_phi_72_pred_1;
                    _2745 = frontier_phi_72_pred_2;
                    _2743 = frontier_phi_72_pred_3;
                    _2741 = frontier_phi_72_pred_4;
                    _2739 = frontier_phi_72_pred_5;
                    uint _2884 = _2883 + 1u;
                    if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2877 = _2739;
                        _2878 = _2741;
                        _2879 = _2743;
                        _2880 = _2745;
                        _2881 = _2747;
                        _2882 = _2749;
                        _2883 = _2884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2749;
                frontier_phi_60_61_ladder_1 = _2747;
                frontier_phi_60_61_ladder_2 = _2743;
                frontier_phi_60_61_ladder_3 = _2741;
                frontier_phi_60_61_ladder_4 = _2739;
                frontier_phi_60_61_ladder_5 = _2745;
            }
            else
            {
                frontier_phi_60_61_ladder = _2635;
                frontier_phi_60_61_ladder_1 = _2633;
                frontier_phi_60_61_ladder_2 = _2629;
                frontier_phi_60_61_ladder_3 = _2627;
                frontier_phi_60_61_ladder_4 = _2625;
                frontier_phi_60_61_ladder_5 = _2631;
            }
            _2738 = frontier_phi_60_61_ladder_4;
            _2740 = frontier_phi_60_61_ladder_3;
            _2742 = frontier_phi_60_61_ladder_2;
            _2744 = frontier_phi_60_61_ladder_5;
            _2746 = frontier_phi_60_61_ladder_1;
            _2748 = frontier_phi_60_61_ladder;
        }
        float _2753 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
        _2556 = (_2753 * _2744) + _2068;
        _2558 = (_2753 * _2746) + _2070;
        _2560 = (_2753 * _2748) + _2072;
        _2562 = ((_2738 * _506) * _2753) + _2406;
        _2564 = ((_2740 * _508) * _2753) + _2408;
        _2566 = ((_2742 * _509) * _2753) + _2410;
    }
    else
    {
        _2556 = _2068;
        _2558 = _2070;
        _2560 = _2072;
        _2562 = _2406;
        _2564 = _2408;
        _2566 = _2410;
    }
    float _4454 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4465 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4476 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4487 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2591 = cbInstanceData._m0[_480 + 6u].w * (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)));
    float _2596 = _439 / cbSceneParam._m0[86u].x;
    float _2597 = _440 / cbSceneParam._m0[86u].y;
    vec4 _2611 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, (log2((isnan(cbSceneParam._m0[77u].w) ? _373 : (isnan(_373) ? cbSceneParam._m0[77u].w : min(_373, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2613 = _2611.x;
    float _2614 = _2611.y;
    float _2615 = _2611.z;
    float _2616 = _2611.w;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_373 > cbSceneParam._m0[78u].w)
    {
        float _2650 = isnan(_373) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _373 : min(cbSceneParam._m0[80u].w, _373));
        float _2651 = _2650 / _373;
        float _2662 = _2651 * _424;
        float _2663 = _425 * _2651;
        float _2664 = (-0.0) - _2663;
        float _2666 = _2651 * _426;
        float _2668 = (cbSceneParam._m0[77u].w * _2664) / _2650;
        float _2669 = _2668 + cbSceneParam._m0[79u].w;
        float _2670 = cbSceneParam._m0[79u].w - _2663;
        float _2676 = sqrt(((_2662 * _2662) + (_2663 * _2663)) + (_2666 * _2666));
        float _2679 = (1.0 - (cbSceneParam._m0[77u].w / _2650)) * _2676;
        float _2684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2664 - _2668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2669 > 0.0) ? exp2(_2684 * _2669) : (2.0 - exp2(_2686 * _2669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2679;
        }
        else
        {
            float _2799 = 1.0 / cbSceneParam._m0[80u].x;
            float _2800 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : max(_2669, _2670));
            float _2801 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : min(_2669, _2670));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            _2839 = ((abs(_2676 / _2664) * cbSceneParam._m0[80u].y) * ((((_2810 - _2811) * 2.0) - ((exp2(_2684 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)))) - exp2(_2684 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))))) * _2799)) - ((exp2(_2686 * _2810) - exp2(_2686 * _2811)) * _2799))) + (_2679 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2616);
        _2688 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2613;
        _2690 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2614;
        _2692 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2615;
        _2694 = _2850 * _2616;
    }
    else
    {
        _2688 = _2613;
        _2690 = _2614;
        _2692 = _2615;
        _2694 = _2616;
    }
    float _2706 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2707 = _2706 == 3.0;
    float _2708 = log2(_2694);
    float _2715 = exp2(_2708 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2556 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _521))) + ((_2562 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1328)) * cbPerFrame._m0[3u].x));
    float _2716 = exp2(_2708 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2558 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _521))) + ((_2564 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1328)) * cbPerFrame._m0[3u].x));
    float _2717 = exp2(_2708 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2560 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _521))) + ((_2566 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1328)) * cbPerFrame._m0[3u].x));
    float _2726 = (_2706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2726 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.y = _2726 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.z = _2726 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.w = _2591;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2591;
}


