#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _906;
float _3335;
float _3336;
float _3337;
float _3338;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _231.x;
    float _235 = _231.y;
    float _236 = _231.z;
    vec4 _252 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _252.x + cbMtdParam._m0[9u].x;
    vec4 _267 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3347 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))));
    vec4 _297 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _307 = fma(_284, _215, fma(_277, _207 * TANGENT.x, (_193 * _186) * _275));
    float _310 = fma(_284, _216, fma(_277, _207 * TANGENT.y, (_193 * _187) * _275));
    float _313 = fma(_284, _217, fma(_277, _207 * TANGENT.z, (_193 * _188) * _275));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3358 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _321 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3380 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3391 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3402 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _325 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    vec4 _407 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _409 = _407.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _585 = sqrt(((_393 * _393) + (_394 * _394)) + (_395 * _395));
        float _591 = (cbMatDynParam._m0[5u].x * _585) + cbMatDynParam._m0[5u].y;
        float _3413 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _592 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _596 = (cbMatDynParam._m0[5u].z * _585) + cbMatDynParam._m0[5u].w;
        float _3424 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) - _592)) + _592) < ((_409 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _445 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _448 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3435 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _476 = 1.0 - _325;
    float _477 = _473 * _476;
    float _478 = _474 * _476;
    float _479 = _475 * _476;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _325;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _325;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _325;
    float _487 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_318, _319, _320), vec3(_400, _401, _402));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _318) - _400;
    float _511 = (_506 * _319) - _401;
    float _512 = (_506 * _320) - _402;
    float _516 = abs(dot(vec3(_400, _401, _402), vec3(_318, _319, _320)));
    float _3468 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_321);
    float _531 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _537 = (1.0 - _531) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _538 = _531 * _518;
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _905;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _630 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _634 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _638 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _663 = _566 + _318;
        float _664 = _570 + _319;
        float _665 = _574 + _320;
        float _675 = fma(_665, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663)) - _630;
        float _676 = fma(_665, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663)) - _634;
        float _677 = fma(_665, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663)) - _638;
        float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
        float _694 = ((_681 * _675) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_630 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_681 * _676) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_634 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_681 * _677) / cbModelParam._m0[34u].z) + ((((((_638 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        float _733 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_699.x + (-0.5));
        float _735 = _733 * (_699.y + (-0.5));
        float _736 = _733 * (_699.z + (-0.5));
        float _743 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_706.x + (-0.5));
        float _745 = _743 * (_706.y + (-0.5));
        float _746 = _743 * (_706.z + (-0.5));
        float _753 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_713.x + (-0.5));
        float _755 = _753 * (_713.y + (-0.5));
        float _756 = _753 * (_713.z + (-0.5));
        float _763 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_720.x + (-0.5));
        float _765 = _763 * (_720.y + (-0.5));
        float _766 = _763 * (_720.z + (-0.5));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = _734 * 0.5;
        float _771 = _744 * 0.5;
        float _772 = _754 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _787 = (dot(vec3(_318, _319, _320), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _797 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3516 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_799 + 1.0))) + _804) * _767;
        float _814 = _735 * 0.5;
        float _815 = _745 * 0.5;
        float _816 = _755 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_318, _319, _320), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3549 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_841 + 1.0))) + _846) * _768;
        float _856 = _736 * 0.5;
        float _857 = _746 * 0.5;
        float _858 = _756 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_318, _319, _320), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3582 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_883 + 1.0))) + _888) * _769;
        _905 = _736;
        _907 = _735;
        _908 = _734;
        _909 = _746;
        _910 = _745;
        _911 = _744;
        _912 = _756;
        _913 = _755;
        _914 = _754;
        _915 = _769;
        _916 = _768;
        _917 = _767;
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
    }
    else
    {
        _905 = _906;
        _907 = _906;
        _908 = _906;
        _909 = _906;
        _910 = _906;
        _911 = _906;
        _912 = _906;
        _913 = _906;
        _914 = _906;
        _915 = _906;
        _916 = _906;
        _917 = _906;
        _918 = 0.0;
        _919 = 0.0;
        _920 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _953 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _957 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _980 = _566 + _318;
        float _981 = _570 + _319;
        float _982 = _574 + _320;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_318, _319, _320), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3645 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_318, _319, _320), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3678 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_318, _319, _320), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3711 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _906;
        _1219 = _906;
        _1220 = _906;
        _1221 = _906;
        _1222 = _906;
        _1223 = _906;
        _1224 = _906;
        _1225 = _906;
        _1226 = _906;
        _1227 = _906;
        _1228 = _906;
        _1229 = _906;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _510 * 0.5;
    float _1287 = _511 * 0.5;
    float _1288 = _512 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_905, _909, _912, _915));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_907, _910, _913, _916));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _911, _914, _917));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1418 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1421 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1449 = frontier_phi_19_17_ladder;
        }
        float _1657;
        if (_1418 > 0.0)
        {
            _1657 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1657 = frontier_phi_28_24_ladder;
        }
        float _1911;
        if (_1421 > 0.0)
        {
            _1911 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1911 = frontier_phi_40_35_ladder;
        }
        float _1913 = isnan(_1657) ? _1449 : (isnan(_1449) ? _1657 : min(_1449, _1657));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1415) + _1404;
        float _1919 = (_1914 * _1418) + _1408;
        float _1920 = (_1914 * _1421) + _1412;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1923 = (-1.0) - _1921;
        float _1925 = _1921 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1920 > _1925) || ((_1920 < _1923) || ((_1919 > _1925) || ((_1919 < _1923) || ((_1918 < _1923) || (_1918 > _1925))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2048 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1920, cbModelParam._m0[9u].z, fma(_1919, cbModelParam._m0[9u].y, _1918 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1920, cbModelParam._m0[10u].z, fma(_1919, cbModelParam._m0[10u].y, _1918 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1920, cbModelParam._m0[11u].z, fma(_1919, cbModelParam._m0[11u].y, _1918 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_18_40_ladder = _2048.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2048.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2048.x * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_18_40_ladder_2;
        _1439 = frontier_phi_18_40_ladder_1;
        _1441 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1355);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1517 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1520 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1662;
        if (_1514 > 0.0)
        {
            _1662 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1662 = frontier_phi_30_26_ladder;
        }
        float _1938;
        if (_1517 > 0.0)
        {
            _1938 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1938 = frontier_phi_42_37_ladder;
        }
        float _2151;
        if (_1520 > 0.0)
        {
            _2151 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2151 = frontier_phi_51_48_ladder;
        }
        float _2153 = isnan(_1938) ? _1662 : (isnan(_1662) ? _1938 : min(_1662, _1938));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1514) + _1503;
        float _2159 = (_2154 * _1517) + _1507;
        float _2160 = (_2154 * _1520) + _1511;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2161;
        float _2164 = _2161 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2160 > _2164) || ((_2160 < _2162) || ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 < _2162) || (_2158 > _2164))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2160, cbModelParam._m0[17u].z, fma(_2159, cbModelParam._m0[17u].y, _2158 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2160, cbModelParam._m0[18u].z, fma(_2159, cbModelParam._m0[18u].y, _2158 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2160, cbModelParam._m0[19u].z, fma(_2159, cbModelParam._m0[19u].y, _2158 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_27_51_ladder = _2387.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2387.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2387.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_27_51_ladder_2;
        _1541 = frontier_phi_27_51_ladder_1;
        _1543 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1446);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1556 = (((_537 * _487) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_537 * _489) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_537 * _490) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    uvec4 _1579 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1581 = _1579.x * 14u;
    uint _1582 = _1581 + 13u;
    float _1589 = _502 + (-1.0);
    float _1594 = (cbLight._m0[_1582].x * _1589) + 1.0;
    float _1595 = (cbLight._m0[_1582].y * _1589) + 1.0;
    float _1596 = (cbLight._m0[_1582].z * _1589) + 1.0;
    float _1597 = (cbLight._m0[_1582].w * _1589) + 1.0;
    uint _1598 = _1581 + 5u;
    float _1604 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1608 = _1581 + 4u;
    float _1615 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1619 = _1581 | 1u;
    float _1630 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_318, _319, _320));
    float _1633 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_318, _319, _320));
    float _3847 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _3858 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1638 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1640 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
    float _1647 = ((cbLight._m0[_1598].x * _1604) * _1640) + ((cbLight._m0[_1608].x * _1615) * _1638);
    float _1648 = ((_1604 * cbLight._m0[_1598].y) * _1640) + ((_1615 * cbLight._m0[_1608].y) * _1638);
    float _1649 = ((_1604 * cbLight._m0[_1598].z) * _1640) + ((_1615 * cbLight._m0[_1608].z) * _1638);
    uvec4 _1654 = floatBitsToUint(cbLight._m0[_1581 + 12u]);
    bool _1656 = _1654.x == 0u;
    float _1667;
    float _1669;
    float _1671;
    if (_1656)
    {
        _1667 = _1647;
        _1669 = _1648;
        _1671 = _1649;
    }
    else
    {
        uint _1675 = _1581 + 6u;
        float _1691 = (dot(vec3(cbLight._m0[_1581 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1692 = _1691 * _1691;
        float _3869 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1694 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1667 = (((cbLight._m0[_1675].x * 0.3183098733425140380859375) * _1693) * _1694) + _1647;
        _1669 = (((cbLight._m0[_1675].y * 0.3183098733425140380859375) * _1693) * _1694) + _1648;
        _1671 = (((cbLight._m0[_1675].z * 0.3183098733425140380859375) * _1693) * _1694) + _1649;
    }
    bool _1674 = _1654.y == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1674)
    {
        _1712 = _1667;
        _1714 = _1669;
        _1716 = _1671;
    }
    else
    {
        uint _1882 = _1581 + 7u;
        float _1898 = (dot(vec3(cbLight._m0[_1581 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1899 = _1898 * _1898;
        float _3885 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1901 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1712 = (((cbLight._m0[_1882].x * 0.3183098733425140380859375) * _1900) * _1901) + _1667;
        _1714 = (((cbLight._m0[_1882].y * 0.3183098733425140380859375) * _1900) * _1901) + _1669;
        _1716 = (((cbLight._m0[_1882].z * 0.3183098733425140380859375) * _1900) * _1901) + _1671;
    }
    uint _1719 = _1581 + 8u;
    float _1732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _321) * 0.949999988079071044921875);
    float _1733 = _1732 * _1732;
    float _1734 = cbLight._m0[_1581].x + _400;
    float _1735 = cbLight._m0[_1581].y + _401;
    float _1736 = cbLight._m0[_1581].z + _402;
    float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
    float _1741 = _1740 * _1734;
    float _1742 = _1740 * _1735;
    float _1743 = _1740 * _1736;
    float _1744 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1581].xyz));
    float _3901 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _1748 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1749 = dot(vec3(_318, _319, _320), vec3(_1741, _1742, _1743));
    float _3923 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1753 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1741, _1742, _1743));
    float _3934 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1757 = _1733 * _1733;
    float _1761 = ((_1752 * _1752) * (_1757 + (-1.0))) + 1.0;
    float _1769 = exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0);
    float _1770 = 0.959999978542327880859375 - _484;
    float _1772 = 0.959999978542327880859375 - _485;
    float _1773 = 0.959999978542327880859375 - _486;
    float _1780 = 1.0 - _1733;
    float _1791 = (0.5 / (((_1748 * ((_1747 * _1780) + _1733)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1780) + _1733) * _1747))) * _1747;
    float _3945 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1757 / ((_1761 * _1761) * 3.141590118408203125));
    uint _1804 = _1581 + 9u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _321) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1619].x + _400;
    float _1818 = cbLight._m0[_1619].y + _401;
    float _1819 = cbLight._m0[_1619].z + _402;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1619].xyz));
    float _3956 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1831 = dot(vec3(_318, _319, _320), vec3(_1824, _1825, _1826));
    float _3967 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1824, _1825, _1826));
    float _3978 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1816 * _1816;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1850 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
    float _1857 = 1.0 - _1816;
    float _1867 = (0.5 / (((_1748 * ((_1830 * _1857) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1857) + _1816) * _1830))) * _1830;
    float _3989 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1869 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    float _1879 = (((((_1850 * _1770) + _487) * cbLight._m0[_1804].x) * _1869) * _1604) + (((((_1769 * _1770) + _487) * cbLight._m0[_1719].x) * _1793) * _1615);
    float _1880 = (((((_1850 * _1772) + _489) * cbLight._m0[_1804].y) * _1869) * _1604) + (((((_1769 * _1772) + _489) * cbLight._m0[_1719].y) * _1793) * _1615);
    float _1881 = (((((_1850 * _1773) + _490) * cbLight._m0[_1804].z) * _1869) * _1604) + (((((_1769 * _1773) + _490) * cbLight._m0[_1719].z) * _1793) * _1615);
    float _1943;
    float _1945;
    float _1947;
    if (_1656)
    {
        _1943 = _1879;
        _1945 = _1880;
        _1947 = _1881;
    }
    else
    {
        uint _1949 = _1581 + 2u;
        uint _1953 = _1581 + 10u;
        float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _321) * 0.949999988079071044921875);
        float _1968 = _1967 * _1967;
        float _1969 = cbLight._m0[_1949].x + _400;
        float _1970 = cbLight._m0[_1949].y + _401;
        float _1971 = cbLight._m0[_1949].z + _402;
        float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
        float _1976 = _1975 * _1969;
        float _1977 = _1975 * _1970;
        float _1978 = _1975 * _1971;
        float _1979 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1949].xyz));
        float _4000 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1982 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1983 = dot(vec3(_318, _319, _320), vec3(_1976, _1977, _1978));
        float _4011 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1986 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1987 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_1976, _1977, _1978));
        float _4022 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1991 = _1968 * _1968;
        float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
        float _2002 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
        float _2009 = 1.0 - _1968;
        float _2019 = (0.5 / (((_1748 * ((_1982 * _2009) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _2009) + _1968) * _1982))) * _1982;
        float _4033 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2021 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
        float _2022 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1943 = (((((_2002 * _1770) + _487) * cbLight._m0[_1953].x) * _2021) * _2022) + _1879;
        _1945 = (((((_2002 * _1772) + _489) * cbLight._m0[_1953].y) * _2021) * _2022) + _1880;
        _1947 = (((((_2002 * _1773) + _490) * cbLight._m0[_1953].z) * _2021) * _2022) + _1881;
    }
    float _2057;
    float _2059;
    float _2061;
    if (_1674)
    {
        _2057 = _1943;
        _2059 = _1945;
        _2061 = _1947;
    }
    else
    {
        uint _2068 = _1581 + 3u;
        uint _2072 = _1581 + 11u;
        float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _321) * 0.949999988079071044921875);
        float _2087 = _2086 * _2086;
        float _2088 = cbLight._m0[_2068].x + _400;
        float _2089 = cbLight._m0[_2068].y + _401;
        float _2090 = cbLight._m0[_2068].z + _402;
        float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
        float _2095 = _2094 * _2088;
        float _2096 = _2094 * _2089;
        float _2097 = _2094 * _2090;
        float _2098 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2068].xyz));
        float _4049 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2102 = dot(vec3(_318, _319, _320), vec3(_2095, _2096, _2097));
        float _4060 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2106 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2095, _2096, _2097));
        float _4071 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2110 = _2087 * _2087;
        float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
        float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0);
        float _2128 = 1.0 - _2087;
        float _2138 = (0.5 / (((_1748 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _2128) + _2087) * _2101))) * _2101;
        float _4082 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _2057 = (((((_2121 * _1770) + _487) * cbLight._m0[_2072].x) * _2140) * _2141) + _1943;
        _2059 = (((((_2121 * _1772) + _489) * cbLight._m0[_2072].y) * _2140) * _2141) + _1945;
        _2061 = (((((_2121 * _1773) + _490) * cbLight._m0[_2072].z) * _2140) * _2141) + _1947;
    }
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1579.y == 0u)
    {
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2216;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2216;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2216;
        uvec4 _2231 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2232 = _2231.x;
        uint _2243 = uint((float(_2231.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2232))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2232)));
        float _2253 = (log2(_2219 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2254 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        uint _2257 = uint(isnan(14.0) ? _2254 : (isnan(_2254) ? 14.0 : min(_2254, 14.0)));
        uvec4 _2262 = texelFetch(g_lightClusterGridBuffer, int(((_2257 << 2u) + (_2243 << 6u)) >> 2u));
        uint _2263 = _2262.x;
        uint _2264 = _2231.z;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        if (((((1u << ((_2264 >> 4u) & 15u)) + 4294967295u) & _2263) == 0u) || ((_2264 & 240u) == 0u))
        {
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
        }
        else
        {
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            uint _2559 = 0u;
            uint _2568;
            bool _2569;
            for (;;)
            {
                _2568 = texelFetch(g_lightClassification, int((((_2257 << 5u) + (_2243 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                _2569 = _2568 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2569)
                {
                    frontier_phi_68_pred = _2555;
                    frontier_phi_68_pred_1 = _2558;
                    frontier_phi_68_pred_2 = _2557;
                    frontier_phi_68_pred_3 = _2556;
                    frontier_phi_68_pred_4 = _2554;
                    frontier_phi_68_pred_5 = _2553;
                }
                else
                {
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    uint _2704;
                    _2698 = _2553;
                    _2699 = _2554;
                    _2700 = _2555;
                    _2701 = _2556;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2568;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    for (;;)
                    {
                        uint _2708 = uint(findLSB(_2704)) + (_2559 << 5u);
                        uint _2705 = (_2704 + 4294967295u) & _2704;
                        uint _2710 = _2708 * 48u;
                        vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2730 = (_2708 * 48u) + 4u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 3u)).x));
                        uint _2749 = (_2708 * 48u) + 8u;
                        vec3 _2760 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x));
                        float _2764 = _2724.x - _2217;
                        float _2765 = _2724.y - _2218;
                        float _2766 = _2724.z - _2219;
                        float _2767 = dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766));
                        float _2770 = inversesqrt(_2767);
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2774 = dot(vec3(_442, _445, _448), vec3(_2771, _2772, _2773));
                        float _2779 = 1.0 - (_2767 * _2724.w);
                        float _4108 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2780 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2781 = sqrt(_2767) * _2743.w;
                        float _2784 = 1.39999997615814208984375 / (_2781 + 1.39999997615814208984375);
                        float _2785 = _2784 * _2784;
                        float _2788 = ((1.0 - _2785) * _2774) + _2785;
                        float _2791 = _2781 * _2781;
                        float _2795 = ((isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))) * _2780) / ((_2791 * 0.699999988079071044921875) + 1.0);
                        float _2799 = (-0.0) - _2217;
                        float _2800 = (-0.0) - _2218;
                        float _2801 = (-0.0) - _2219;
                        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2816 = exp2(log2(1.0 / ((_2791 * 3.5) + 5.0)) * 0.25);
                        float _2817 = 1.0 - _518;
                        float _2824 = sqrt(1.0 - ((1.0 - (_2817 * _2817)) * (1.0 - (_2816 * _2816))));
                        float _2825 = _2824 * _2824;
                        float _2826 = _2825 * _2825;
                        float _2827 = _2806 + _2771;
                        float _2828 = _2807 + _2772;
                        float _2829 = _2808 + _2773;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2837 = dot(vec3(_442, _445, _448), vec3(_2806, _2807, _2808));
                        float _4124 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2841 = dot(vec3(_442, _445, _448), vec3(_2833 * _2827, _2833 * _2828, _2833 * _2829));
                        float _4135 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2848 = ((_2844 * _2844) * (_2826 + (-1.0))) + 1.0;
                        float _2849 = _2784 * _2825;
                        float _2850 = _2849 * _2849;
                        float _2853 = ((1.0 - _2850) * _2774) + _2850;
                        float _4146 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2854 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2855 = 1.0 - _2825;
                        float _2865 = (0.5 / (((_2854 * ((_2840 * _2855) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2854 * _2855) + _2825) * _2840))) * _2854;
                        float _4157 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2876 = (((_2826 * 3.1415927410125732421875) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) / ((_2848 * _2848) * ((_2791 * 2.1991131305694580078125) + 3.141590118408203125))) * _2780;
                        _2628 = (_2795 * _2743.x) + _2701;
                        _2629 = (_2795 * _2743.y) + _2702;
                        _2630 = (_2795 * _2743.z) + _2703;
                        _2625 = (_2876 * _2760.x) + _2698;
                        _2626 = (_2876 * _2760.y) + _2699;
                        _2627 = (_2876 * _2760.z) + _2700;
                        if (_2705 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2698 = _2625;
                            _2699 = _2626;
                            _2700 = _2627;
                            _2701 = _2628;
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2705;
                        }
                    }
                    frontier_phi_68_pred = _2627;
                    frontier_phi_68_pred_1 = _2630;
                    frontier_phi_68_pred_2 = _2629;
                    frontier_phi_68_pred_3 = _2628;
                    frontier_phi_68_pred_4 = _2626;
                    frontier_phi_68_pred_5 = _2625;
                }
                _2397 = frontier_phi_68_pred;
                _2403 = frontier_phi_68_pred_1;
                _2401 = frontier_phi_68_pred_2;
                _2399 = frontier_phi_68_pred_3;
                _2395 = frontier_phi_68_pred_4;
                _2393 = frontier_phi_68_pred_5;
                uint _2560 = _2559 + 1u;
                if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2553 = _2393;
                    _2554 = _2395;
                    _2555 = _2397;
                    _2556 = _2399;
                    _2557 = _2401;
                    _2558 = _2403;
                    _2559 = _2560;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
        }
        uvec4 _2406 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2407 = _2406.z;
        uint _2409 = (_2407 >> 8u) & 15u;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((4294967295u << _2409) & _2263) == 0u)
        {
            _2521 = _2392;
            _2523 = _2394;
            _2525 = _2396;
            _2527 = _2398;
            _2529 = _2400;
            _2531 = _2402;
        }
        else
        {
            float _2546 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
            float _2547 = _2546 * _2217;
            float _2548 = _2546 * _2218;
            float _2549 = _2546 * _2219;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2409 < ((_2407 >> 12u) & 15u))
            {
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2681 = _2392;
                float _2682 = _2394;
                float _2683 = _2396;
                float _2684 = _2398;
                float _2685 = _2400;
                float _2686 = _2402;
                uint _2687 = _2409;
                uint _2696;
                bool _2697;
                for (;;)
                {
                    _2696 = texelFetch(g_lightClassification, int((((_2257 << 5u) + (_2243 << 9u)) + (_2687 << 2u)) >> 2u)).x;
                    _2697 = _2696 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2697)
                    {
                        frontier_phi_79_pred = _2686;
                        frontier_phi_79_pred_1 = _2685;
                        frontier_phi_79_pred_2 = _2684;
                        frontier_phi_79_pred_3 = _2683;
                        frontier_phi_79_pred_4 = _2682;
                        frontier_phi_79_pred_5 = _2681;
                    }
                    else
                    {
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _2903 = _2681;
                        float _2904 = _2682;
                        float _2905 = _2683;
                        float _2906 = _2684;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        uint _2909 = _2696;
                        uint _2910;
                        vec4 _2935;
                        float _2936;
                        vec4 _2951;
                        vec3 _2963;
                        vec4 _2979;
                        vec4 _2995;
                        float _3042;
                        bool _3043;
                        for (;;)
                        {
                            uint _2920 = ((_2687 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2909));
                            _2910 = (_2909 + 4294967295u) & _2909;
                            uint _2922 = _2920 * 40u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2936 = _2935.w;
                            uint _2938 = (_2920 * 40u) + 4u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2953 = (_2920 * 40u) + 8u;
                            _2963 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x));
                            uint _2966 = (_2920 * 40u) + 16u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2982 = (_2920 * 40u) + 20u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2920 * 40u) + 24u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3017 = (_2920 * 40u) + 28u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3042 = fma(_2219, _3030.z, fma(_2218, _3030.y, _3030.x * _2217)) + _3030.w;
                            _3043 = !((fma(_2219, _3011.z, fma(_2218, _3011.y, _3011.x * _2217)) + _3011.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3043)
                            {
                                float _3070 = _2935.x - _2217;
                                float _3071 = _2935.y - _2218;
                                float _3072 = _2935.z - _2219;
                                float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                                float _3076 = inversesqrt(_3073);
                                float _3077 = _3076 * _3070;
                                float _3078 = _3076 * _3071;
                                float _3079 = _3076 * _3072;
                                float _3083 = 1.0 - (_3073 / (_2936 * _2936));
                                float _4168 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3088 = sqrt(_3073) * _2951.w;
                                float _3090 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                                float _3091 = _3090 * _3090;
                                float _3094 = ((1.0 - _3091) * dot(vec3(_3077, _3078, _3079), vec3(_442, _445, _448))) + _3091;
                                float _3097 = _3088 * _3088;
                                float _3101 = (fma(_2219, _2979.z, fma(_2218, _2979.y, _2979.x * _2217)) + _2979.w) / _3042;
                                float _3102 = (fma(_2219, _2995.z, fma(_2218, _2995.y, _2995.x * _2217)) + _2995.w) / _3042;
                                float _3106 = 1.0 - dot(vec2(_3101, _3102), vec2(_3101, _3102));
                                float _4184 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3108 = _3107 * (((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3084) / ((_3097 * 0.699999988079071044921875) + 1.0));
                                float _3120 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                                float _3121 = 1.0 - _518;
                                float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                                float _3129 = _3128 * _3128;
                                float _3130 = _3129 * _3129;
                                float _3131 = _3077 - _2547;
                                float _3132 = _3078 - _2548;
                                float _3133 = _3079 - _2549;
                                float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                                float _3141 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2547, (-0.0) - _2548, (-0.0) - _2549));
                                float _4195 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3145 = dot(vec3(_442, _445, _448), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                                float _4206 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                                float _3153 = _3090 * _3129;
                                float _3154 = _3153 * _3153;
                                float _3160 = ((1.0 - _3154) * dot(vec3(_442, _445, _448), vec3(_3077, _3078, _3079))) + _3154;
                                float _4217 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3162 = 1.0 - _3129;
                                float _3172 = (0.5 / (((_3161 * ((_3144 * _3162) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3129) * _3144))) * _3161;
                                float _4228 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3182 = (_3107 * _3084) * (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_3152 * _3152) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3108 * _2951.z;
                                frontier_phi_85_pred_1 = _3108 * _2951.y;
                                frontier_phi_85_pred_2 = _3108 * _2951.x;
                                frontier_phi_85_pred_3 = _3182 * _2963.z;
                                frontier_phi_85_pred_4 = _3182 * _2963.y;
                                frontier_phi_85_pred_5 = _3182 * _2963.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3191 = frontier_phi_85_pred;
                            _3190 = frontier_phi_85_pred_1;
                            _3189 = frontier_phi_85_pred_2;
                            _3188 = frontier_phi_85_pred_3;
                            _3187 = frontier_phi_85_pred_4;
                            _3186 = frontier_phi_85_pred_5;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            _2892 = _3188 + _2905;
                            if (_2910 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2910;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2895;
                        frontier_phi_79_pred_1 = _2894;
                        frontier_phi_79_pred_2 = _2893;
                        frontier_phi_79_pred_3 = _2892;
                        frontier_phi_79_pred_4 = _2891;
                        frontier_phi_79_pred_5 = _2890;
                    }
                    _2532 = frontier_phi_79_pred;
                    _2530 = frontier_phi_79_pred_1;
                    _2528 = frontier_phi_79_pred_2;
                    _2526 = frontier_phi_79_pred_3;
                    _2524 = frontier_phi_79_pred_4;
                    _2522 = frontier_phi_79_pred_5;
                    uint _2688 = _2687 + 1u;
                    if (_2688 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2681 = _2522;
                        _2682 = _2524;
                        _2683 = _2526;
                        _2684 = _2528;
                        _2685 = _2530;
                        _2686 = _2532;
                        _2687 = _2688;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2528;
                frontier_phi_60_61_ladder_1 = _2532;
                frontier_phi_60_61_ladder_2 = _2530;
                frontier_phi_60_61_ladder_3 = _2526;
                frontier_phi_60_61_ladder_4 = _2524;
                frontier_phi_60_61_ladder_5 = _2522;
            }
            else
            {
                frontier_phi_60_61_ladder = _2398;
                frontier_phi_60_61_ladder_1 = _2402;
                frontier_phi_60_61_ladder_2 = _2400;
                frontier_phi_60_61_ladder_3 = _2396;
                frontier_phi_60_61_ladder_4 = _2394;
                frontier_phi_60_61_ladder_5 = _2392;
            }
            _2521 = frontier_phi_60_61_ladder_5;
            _2523 = frontier_phi_60_61_ladder_4;
            _2525 = frontier_phi_60_61_ladder_3;
            _2527 = frontier_phi_60_61_ladder;
            _2529 = frontier_phi_60_61_ladder_2;
            _2531 = frontier_phi_60_61_ladder_1;
        }
        float _2536 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2275 = (_2536 * _2527) + _1712;
        _2277 = (_2536 * _2529) + _1714;
        _2279 = (_2536 * _2531) + _1716;
        _2281 = ((_2521 * _487) * _2536) + _2057;
        _2283 = ((_2523 * _489) * _2536) + _2059;
        _2285 = ((_2525 * _490) * _2536) + _2061;
    }
    else
    {
        _2275 = _1712;
        _2277 = _1714;
        _2279 = _1716;
        _2281 = _2057;
        _2283 = _2059;
        _2285 = _2061;
    }
    uint _2291 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _2297 = (_297.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2291].x;
    float _2298 = (_297.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2291].y;
    float _2299 = (_297.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2291].z;
    float _4244 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4255 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4266 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2316 = (((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2275 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _502))) + ((_2281 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + _2297;
    float _2318 = (_2298 + ((_2283 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2277 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _502)));
    float _2320 = (_2299 + ((_2285 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2279 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _502)));
    float _2321 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2322 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2323 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2329 = cbMtdParam._m0[2u].x * _2297;
    float _2330 = cbMtdParam._m0[2u].y * _2298;
    float _2331 = cbMtdParam._m0[2u].z * _2299;
    float _4292 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2333 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    uint _2334 = _461 + 6u;
    float _2342 = _421 / cbSceneParam._m0[86u].x;
    float _2343 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2357 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2359 = _2357.x;
    float _2360 = _2357.y;
    float _2361 = _2357.z;
    float _2362 = _2357.w;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2417 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2418 = _2417 / _341;
        float _2429 = _2418 * _393;
        float _2430 = _394 * _2418;
        float _2431 = (-0.0) - _2430;
        float _2432 = _2418 * _395;
        float _2434 = (cbSceneParam._m0[77u].w * _2431) / _2417;
        float _2435 = _2434 + cbSceneParam._m0[79u].w;
        float _2436 = cbSceneParam._m0[79u].w - _2430;
        float _2442 = sqrt(((_2429 * _2429) + (_2430 * _2430)) + (_2432 * _2432));
        float _2445 = (1.0 - (cbSceneParam._m0[77u].w / _2417)) * _2442;
        float _2450 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2452 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2638;
        if (abs((_2431 - _2434) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2638 = ((((_2435 > 0.0) ? exp2(_2450 * _2435) : (2.0 - exp2(_2452 * _2435))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2445;
        }
        else
        {
            float _2582 = 1.0 / cbSceneParam._m0[80u].x;
            float _2583 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : max(_2435, _2436));
            float _2584 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : min(_2435, _2436));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            float _2594 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : min(_2584, 0.0));
            _2638 = ((abs(_2442 / _2431) * cbSceneParam._m0[80u].y) * ((((_2593 - _2594) * 2.0) - ((exp2(_2450 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)))) - exp2(_2450 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))))) * _2582)) - ((exp2(_2452 * _2593) - exp2(_2452 * _2594)) * _2582))) + (_2445 * cbSceneParam._m0[80u].z);
        }
        vec4 _2640 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, 1.0), 0.0);
        float _2649 = exp2((_2638 * (-1.44269502162933349609375)) * (1.0 - _2640.w));
        float _2650 = log2(_2649);
        float _2666 = log2(_2362);
        _2454 = (exp2(_2666 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].x)) * _2640.x) / cbSceneParam._m0[78u].x)) + _2359;
        _2456 = (exp2(_2666 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].y)) * _2640.y) / cbSceneParam._m0[78u].y)) + _2360;
        _2458 = (exp2(_2666 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].z)) * _2640.z) / cbSceneParam._m0[78u].z)) + _2361;
        _2460 = _2649 * _2362;
    }
    else
    {
        _2454 = _2359;
        _2456 = _2360;
        _2458 = _2361;
        _2460 = _2362;
    }
    bool _2676;
    vec4 _2470;
    vec4 _2492;
    float _2494;
    float _2498;
    float _2499;
    float _2500;
    float _2503;
    float _2506;
    float _2509;
    float _2510;
    bool _2520;
    for (;;)
    {
        _2470 = cbMatDynParam._m0[0u];
        float _2472 = roundEven(_2470.y);
        bool _2473 = _2472 == 3.0;
        float _2474 = log2(_2460);
        float _2478 = exp2(_2474 * cbSceneParam._m0[78u].x);
        float _2479 = exp2(_2474 * cbSceneParam._m0[78u].y);
        float _2480 = exp2(_2474 * cbSceneParam._m0[78u].z);
        float _2481 = _2478 * _2321;
        float _2482 = _2479 * _2322;
        float _2483 = _2480 * _2323;
        float _2490 = _409 + (-0.5);
        _2492 = cbMtdParam._m0[1u];
        _2494 = _2492.y * _2490;
        float _2497 = (_2472 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2498 = _2497 * (_2473 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2454)));
        _2499 = _2497 * (_2473 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2456)));
        _2500 = _2497 * (_2473 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2458)));
        _2503 = ((_2329 * _2333) * _2478) * _2497;
        _2506 = ((_2330 * _2333) * _2479) * _2497;
        _2509 = ((_2331 * _2333) * _2480) * _2497;
        _2510 = _2490 * 0.999000012874603271484375;
        _2520 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2520)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2510) < 0.5)
            {
                _2676 = true;
                break;
            }
        }
        uint _2617 = _463 + uint(_2470.w);
        if ((cbInstanceData._m0[_2617].w < 1.0) && ((cbInstanceData._m0[_2617].w + _2510) < 0.5))
        {
            _2676 = true;
            break;
        }
        if ((_2494 + 1.0) < _2492.x)
        {
            _2676 = true;
            break;
        }
        _2676 = false;
        break;
    }
    float _2881;
    if (_2676)
    {
        discard_state = true;
        _2881 = 0.0;
    }
    else
    {
        _2881 = cbInstanceData._m0[_2334].w;
    }
    SV_Target.x = _2498;
    SV_Target.y = _2499;
    SV_Target.z = _2500;
    SV_Target.w = _2881;
    SV_Target_1.x = _2503;
    SV_Target_1.y = _2506;
    SV_Target_1.z = _2509;
    SV_Target_1.w = cbInstanceData._m0[_2334].w;
    discard_exit();
}


