#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _908;
float _3361;
float _3362;
float _3363;
float _3364;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _233 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _233.x;
    float _237 = _233.y;
    float _238 = _233.z;
    vec4 _254 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _254.x + cbMtdParam._m0[9u].x;
    vec4 _269 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3373 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))));
    vec4 _299 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _309 = fma(_286, _217, fma(_279, _209 * TANGENT.x, (_195 * _188) * _277));
    float _312 = fma(_286, _218, fma(_279, _209 * TANGENT.y, (_195 * _189) * _277));
    float _315 = fma(_286, _219, fma(_279, _209 * TANGENT.z, (_195 * _190) * _277));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3384 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _323 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3406 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3417 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3428 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _327 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _343 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    vec4 _409 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _411 = _409.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _587 = sqrt(((_395 * _395) + (_396 * _396)) + (_397 * _397));
        float _593 = (cbMatDynParam._m0[5u].x * _587) + cbMatDynParam._m0[5u].y;
        float _3439 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _598 = (cbMatDynParam._m0[5u].z * _587) + cbMatDynParam._m0[5u].w;
        float _3450 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) - _594)) + _594) < ((_411 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _447 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _450 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3461 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _478 = 1.0 - _327;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _327;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _327;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _327;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _504 = _501.x * TEXCOORD.z;
    float _505 = dot(vec3(_320, _321, _322), vec3(_402, _403, _404));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _320) - _402;
    float _513 = (_508 * _321) - _403;
    float _514 = (_508 * _322) - _404;
    float _518 = abs(dot(vec3(_402, _403, _404), vec3(_320, _321, _322)));
    float _3494 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_323);
    float _533 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _539 = (1.0 - _533) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _540 = _533 * _520;
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _907;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _632 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _636 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _640 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _665 = _568 + _320;
        float _666 = _572 + _321;
        float _667 = _576 + _322;
        float _677 = fma(_667, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665)) - _632;
        float _678 = fma(_667, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665)) - _636;
        float _679 = fma(_667, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665)) - _640;
        float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
        float _696 = ((_683 * _677) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_632 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_683 * _678) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_636 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_683 * _679) / cbModelParam._m0[34u].z) + ((((((_640 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        float _735 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_701.x + (-0.5));
        float _737 = _735 * (_701.y + (-0.5));
        float _738 = _735 * (_701.z + (-0.5));
        float _745 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_708.x + (-0.5));
        float _747 = _745 * (_708.y + (-0.5));
        float _748 = _745 * (_708.z + (-0.5));
        float _755 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_715.x + (-0.5));
        float _757 = _755 * (_715.y + (-0.5));
        float _758 = _755 * (_715.z + (-0.5));
        float _765 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_722.x + (-0.5));
        float _767 = _765 * (_722.y + (-0.5));
        float _768 = _765 * (_722.z + (-0.5));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = _736 * 0.5;
        float _773 = _746 * 0.5;
        float _774 = _756 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _789 = (dot(vec3(_320, _321, _322), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _799 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3542 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_801 + 1.0))) + _806) * _769;
        float _816 = _737 * 0.5;
        float _817 = _747 * 0.5;
        float _818 = _757 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_320, _321, _322), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3575 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_843 + 1.0))) + _848) * _770;
        float _858 = _738 * 0.5;
        float _859 = _748 * 0.5;
        float _860 = _758 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_320, _321, _322), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3608 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_885 + 1.0))) + _890) * _771;
        _907 = _738;
        _909 = _737;
        _910 = _736;
        _911 = _748;
        _912 = _747;
        _913 = _746;
        _914 = _758;
        _915 = _757;
        _916 = _756;
        _917 = _771;
        _918 = _770;
        _919 = _769;
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
    }
    else
    {
        _907 = _908;
        _909 = _908;
        _910 = _908;
        _911 = _908;
        _912 = _908;
        _913 = _908;
        _914 = _908;
        _915 = _908;
        _916 = _908;
        _917 = _908;
        _918 = _908;
        _919 = _908;
        _920 = 0.0;
        _921 = 0.0;
        _922 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _955 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _959 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _982 = _568 + _320;
        float _983 = _572 + _321;
        float _984 = _576 + _322;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_320, _321, _322), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3671 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_320, _321, _322), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3704 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_320, _321, _322), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3737 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _908;
        _1221 = _908;
        _1222 = _908;
        _1223 = _908;
        _1224 = _908;
        _1225 = _908;
        _1226 = _908;
        _1227 = _908;
        _1228 = _908;
        _1229 = _908;
        _1230 = _908;
        _1231 = _908;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _921)) + _921;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _512 * 0.5;
    float _1289 = _513 * 0.5;
    float _1290 = _514 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_907, _911, _914, _917));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_909, _912, _915, _918));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _913, _916, _919));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1420 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1423 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1451 = frontier_phi_19_17_ladder;
        }
        float _1680;
        if (_1420 > 0.0)
        {
            _1680 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1680 = frontier_phi_28_24_ladder;
        }
        float _1937;
        if (_1423 > 0.0)
        {
            _1937 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1937 = frontier_phi_40_35_ladder;
        }
        float _1939 = isnan(_1680) ? _1451 : (isnan(_1451) ? _1680 : min(_1451, _1680));
        float _1940 = isnan(_1937) ? _1939 : (isnan(_1939) ? _1937 : min(_1939, _1937));
        float _1944 = (_1940 * _1417) + _1406;
        float _1945 = (_1940 * _1420) + _1410;
        float _1946 = (_1940 * _1423) + _1414;
        float _1947 = _1940 * 9.9999997473787516355514526367188e-05;
        float _1949 = (-1.0) - _1947;
        float _1951 = _1947 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1946 > _1951) || ((_1946 < _1949) || ((_1945 > _1951) || ((_1945 < _1949) || ((_1944 < _1949) || (_1944 > _1951))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1946, cbModelParam._m0[9u].z, fma(_1945, cbModelParam._m0[9u].y, _1944 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1946, cbModelParam._m0[10u].z, fma(_1945, cbModelParam._m0[10u].y, _1944 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1946, cbModelParam._m0[11u].z, fma(_1945, cbModelParam._m0[11u].y, _1944 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_18_40_ladder = _2074.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2074.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2074.x * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_18_40_ladder_2;
        _1441 = frontier_phi_18_40_ladder_1;
        _1443 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1519 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1522 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1685;
        if (_1516 > 0.0)
        {
            _1685 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1685 = frontier_phi_30_26_ladder;
        }
        float _1964;
        if (_1519 > 0.0)
        {
            _1964 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1964 = frontier_phi_42_37_ladder;
        }
        float _2177;
        if (_1522 > 0.0)
        {
            _2177 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2177 = frontier_phi_51_48_ladder;
        }
        float _2179 = isnan(_1964) ? _1685 : (isnan(_1685) ? _1964 : min(_1685, _1964));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1516) + _1505;
        float _2185 = (_2180 * _1519) + _1509;
        float _2186 = (_2180 * _1522) + _1513;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2186, cbModelParam._m0[17u].z, fma(_2185, cbModelParam._m0[17u].y, _2184 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2186, cbModelParam._m0[18u].z, fma(_2185, cbModelParam._m0[18u].y, _2184 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2186, cbModelParam._m0[19u].z, fma(_2185, cbModelParam._m0[19u].y, _2184 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_27_51_ladder = _2413.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2413.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2413.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_27_51_ladder_2;
        _1543 = frontier_phi_27_51_ladder_1;
        _1545 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1558 = (((_539 * _489) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_539 * _491) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_539 * _492) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    vec4 _1579 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_423, _424));
    float _1581 = _1579.w;
    float _1593 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1581);
    float _1594 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1581);
    float _1595 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1581);
    uvec4 _1599 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1601 = _1599.x * 14u;
    uint _1602 = _1601 + 13u;
    float _1609 = _504 + (-1.0);
    float _1614 = (cbLight._m0[_1602].x * _1609) + 1.0;
    float _1615 = (cbLight._m0[_1602].y * _1609) + 1.0;
    float _1616 = (cbLight._m0[_1602].z * _1609) + 1.0;
    float _1617 = (cbLight._m0[_1602].w * _1609) + 1.0;
    uint _1618 = _1601 + 5u;
    float _1624 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
    uint _1628 = _1601 + 4u;
    float _1638 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1642 = _1601 | 1u;
    float _1653 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_320, _321, _322));
    float _1656 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_320, _321, _322));
    float _3873 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _3884 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1661 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1663 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1670 = ((cbLight._m0[_1618].x * _1624) * _1663) + (((cbLight._m0[_1628].x * _1593) * _1638) * _1661);
    float _1671 = ((_1624 * cbLight._m0[_1618].y) * _1663) + (((cbLight._m0[_1628].y * _1594) * _1638) * _1661);
    float _1672 = ((_1624 * cbLight._m0[_1618].z) * _1663) + (((cbLight._m0[_1628].z * _1595) * _1638) * _1661);
    uvec4 _1677 = floatBitsToUint(cbLight._m0[_1601 + 12u]);
    bool _1679 = _1677.x == 0u;
    float _1690;
    float _1692;
    float _1694;
    if (_1679)
    {
        _1690 = _1670;
        _1692 = _1671;
        _1694 = _1672;
    }
    else
    {
        uint _1698 = _1601 + 6u;
        float _1714 = (dot(vec3(cbLight._m0[_1601 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1715 = _1714 * _1714;
        float _3895 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1717 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1690 = (((cbLight._m0[_1698].x * 0.3183098733425140380859375) * _1716) * _1717) + _1670;
        _1692 = (((cbLight._m0[_1698].y * 0.3183098733425140380859375) * _1716) * _1717) + _1671;
        _1694 = (((cbLight._m0[_1698].z * 0.3183098733425140380859375) * _1716) * _1717) + _1672;
    }
    bool _1697 = _1677.y == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1697)
    {
        _1735 = _1690;
        _1737 = _1692;
        _1739 = _1694;
    }
    else
    {
        uint _1908 = _1601 + 7u;
        float _1924 = (dot(vec3(cbLight._m0[_1601 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _3911 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1927 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1735 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1690;
        _1737 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1692;
        _1739 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1694;
    }
    uint _1742 = _1601 + 8u;
    float _1755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1601].w)) * _323) * 0.949999988079071044921875);
    float _1756 = _1755 * _1755;
    float _1757 = cbLight._m0[_1601].x + _402;
    float _1758 = cbLight._m0[_1601].y + _403;
    float _1759 = cbLight._m0[_1601].z + _404;
    float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
    float _1764 = _1763 * _1757;
    float _1765 = _1763 * _1758;
    float _1766 = _1763 * _1759;
    float _1767 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1601].xyz));
    float _3927 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1771 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1772 = dot(vec3(_320, _321, _322), vec3(_1764, _1765, _1766));
    float _3949 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_1764, _1765, _1766));
    float _3960 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1780 = _1756 * _1756;
    float _1784 = ((_1775 * _1775) * (_1780 + (-1.0))) + 1.0;
    float _1792 = exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0);
    float _1793 = 0.959999978542327880859375 - _486;
    float _1795 = 0.959999978542327880859375 - _487;
    float _1796 = 0.959999978542327880859375 - _488;
    float _1803 = 1.0 - _1756;
    float _1814 = (0.5 / (((_1771 * ((_1770 * _1803) + _1756)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1803) + _1756) * _1770))) * _1770;
    float _3971 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1780 / ((_1784 * _1784) * 3.141590118408203125));
    uint _1830 = _1601 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _323) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1642].x + _402;
    float _1844 = cbLight._m0[_1642].y + _403;
    float _1845 = cbLight._m0[_1642].z + _404;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1642].xyz));
    float _3982 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1857 = dot(vec3(_320, _321, _322), vec3(_1850, _1851, _1852));
    float _3993 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1850, _1851, _1852));
    float _4004 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1876 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
    float _1883 = 1.0 - _1842;
    float _1893 = (0.5 / (((_1771 * ((_1856 * _1883) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1883) + _1842) * _1856))) * _1856;
    float _4015 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1895 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1905 = (((((_1876 * _1793) + _489) * cbLight._m0[_1830].x) * _1895) * _1624) + ((((cbLight._m0[_1742].x * _1593) * ((_1792 * _1793) + _489)) * _1816) * _1638);
    float _1906 = (((((_1876 * _1795) + _491) * cbLight._m0[_1830].y) * _1895) * _1624) + ((((cbLight._m0[_1742].y * _1594) * ((_1792 * _1795) + _491)) * _1816) * _1638);
    float _1907 = (((((_1876 * _1796) + _492) * cbLight._m0[_1830].z) * _1895) * _1624) + ((((cbLight._m0[_1742].z * _1595) * ((_1792 * _1796) + _492)) * _1816) * _1638);
    float _1969;
    float _1971;
    float _1973;
    if (_1679)
    {
        _1969 = _1905;
        _1971 = _1906;
        _1973 = _1907;
    }
    else
    {
        uint _1975 = _1601 + 2u;
        uint _1979 = _1601 + 10u;
        float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _323) * 0.949999988079071044921875);
        float _1994 = _1993 * _1993;
        float _1995 = cbLight._m0[_1975].x + _402;
        float _1996 = cbLight._m0[_1975].y + _403;
        float _1997 = cbLight._m0[_1975].z + _404;
        float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
        float _2002 = _2001 * _1995;
        float _2003 = _2001 * _1996;
        float _2004 = _2001 * _1997;
        float _2005 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1975].xyz));
        float _4026 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2009 = dot(vec3(_320, _321, _322), vec3(_2002, _2003, _2004));
        float _4037 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2012 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2013 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2002, _2003, _2004));
        float _4048 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2017 = _1994 * _1994;
        float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
        float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0);
        float _2035 = 1.0 - _1994;
        float _2045 = (0.5 / (((_1771 * ((_2008 * _2035) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2035) + _1994) * _2008))) * _2008;
        float _4059 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2047 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
        float _2048 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1969 = (((((_2028 * _1793) + _489) * cbLight._m0[_1979].x) * _2047) * _2048) + _1905;
        _1971 = (((((_2028 * _1795) + _491) * cbLight._m0[_1979].y) * _2047) * _2048) + _1906;
        _1973 = (((((_2028 * _1796) + _492) * cbLight._m0[_1979].z) * _2047) * _2048) + _1907;
    }
    float _2083;
    float _2085;
    float _2087;
    if (_1697)
    {
        _2083 = _1969;
        _2085 = _1971;
        _2087 = _1973;
    }
    else
    {
        uint _2094 = _1601 + 3u;
        uint _2098 = _1601 + 11u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _323) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _402;
        float _2115 = cbLight._m0[_2094].y + _403;
        float _2116 = cbLight._m0[_2094].z + _404;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2094].xyz));
        float _4075 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2128 = dot(vec3(_320, _321, _322), vec3(_2121, _2122, _2123));
        float _4086 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _4097 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
        float _2154 = 1.0 - _2113;
        float _2164 = (0.5 / (((_1771 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2154) + _2113) * _2127))) * _2127;
        float _4108 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _2083 = (((((_2147 * _1793) + _489) * cbLight._m0[_2098].x) * _2166) * _2167) + _1969;
        _2085 = (((((_2147 * _1795) + _491) * cbLight._m0[_2098].y) * _2166) * _2167) + _1971;
        _2087 = (((((_2147 * _1796) + _492) * cbLight._m0[_2098].z) * _2166) * _2167) + _1973;
    }
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1599.y == 0u)
    {
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2242;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2242;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2242;
        uvec4 _2257 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2258 = _2257.x;
        uint _2269 = uint((float(_2257.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2258))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2258)));
        float _2279 = (log2(_2245 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2280 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        uint _2283 = uint(isnan(14.0) ? _2280 : (isnan(_2280) ? 14.0 : min(_2280, 14.0)));
        uvec4 _2288 = texelFetch(g_lightClusterGridBuffer, int(((_2283 << 2u) + (_2269 << 6u)) >> 2u));
        uint _2289 = _2288.x;
        uint _2290 = _2257.z;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        if (((((1u << ((_2290 >> 4u) & 15u)) + 4294967295u) & _2289) == 0u) || ((_2290 & 240u) == 0u))
        {
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
        }
        else
        {
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            uint _2585 = 0u;
            uint _2594;
            bool _2595;
            for (;;)
            {
                _2594 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                _2595 = _2594 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2595)
                {
                    frontier_phi_68_pred = _2581;
                    frontier_phi_68_pred_1 = _2584;
                    frontier_phi_68_pred_2 = _2583;
                    frontier_phi_68_pred_3 = _2582;
                    frontier_phi_68_pred_4 = _2580;
                    frontier_phi_68_pred_5 = _2579;
                }
                else
                {
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    uint _2730;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2594;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    for (;;)
                    {
                        uint _2734 = uint(findLSB(_2730)) + (_2585 << 5u);
                        uint _2731 = (_2730 + 4294967295u) & _2730;
                        uint _2736 = _2734 * 48u;
                        vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 3u)).x));
                        uint _2756 = (_2734 * 48u) + 4u;
                        vec4 _2769 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 3u)).x));
                        uint _2775 = (_2734 * 48u) + 8u;
                        vec3 _2786 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2775)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 2u)).x));
                        float _2790 = _2750.x - _2243;
                        float _2791 = _2750.y - _2244;
                        float _2792 = _2750.z - _2245;
                        float _2793 = dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792));
                        float _2796 = inversesqrt(_2793);
                        float _2797 = _2796 * _2790;
                        float _2798 = _2796 * _2791;
                        float _2799 = _2796 * _2792;
                        float _2800 = dot(vec3(_444, _447, _450), vec3(_2797, _2798, _2799));
                        float _2805 = 1.0 - (_2793 * _2750.w);
                        float _4134 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2806 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2807 = sqrt(_2793) * _2769.w;
                        float _2810 = 1.39999997615814208984375 / (_2807 + 1.39999997615814208984375);
                        float _2811 = _2810 * _2810;
                        float _2814 = ((1.0 - _2811) * _2800) + _2811;
                        float _2817 = _2807 * _2807;
                        float _2821 = ((isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * _2806) / ((_2817 * 0.699999988079071044921875) + 1.0);
                        float _2825 = (-0.0) - _2243;
                        float _2826 = (-0.0) - _2244;
                        float _2827 = (-0.0) - _2245;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2832 = _2831 * _2825;
                        float _2833 = _2831 * _2826;
                        float _2834 = _2831 * _2827;
                        float _2842 = exp2(log2(1.0 / ((_2817 * 3.5) + 5.0)) * 0.25);
                        float _2843 = 1.0 - _520;
                        float _2850 = sqrt(1.0 - ((1.0 - (_2843 * _2843)) * (1.0 - (_2842 * _2842))));
                        float _2851 = _2850 * _2850;
                        float _2852 = _2851 * _2851;
                        float _2853 = _2832 + _2797;
                        float _2854 = _2833 + _2798;
                        float _2855 = _2834 + _2799;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2863 = dot(vec3(_444, _447, _450), vec3(_2832, _2833, _2834));
                        float _4150 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2867 = dot(vec3(_444, _447, _450), vec3(_2859 * _2853, _2859 * _2854, _2859 * _2855));
                        float _4161 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2874 = ((_2870 * _2870) * (_2852 + (-1.0))) + 1.0;
                        float _2875 = _2810 * _2851;
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2800) + _2876;
                        float _4172 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2881 = 1.0 - _2851;
                        float _2891 = (0.5 / (((_2880 * ((_2866 * _2881) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2881) + _2851) * _2866))) * _2880;
                        float _4183 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2902 = (((_2852 * 3.1415927410125732421875) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) / ((_2874 * _2874) * ((_2817 * 2.1991131305694580078125) + 3.141590118408203125))) * _2806;
                        _2654 = (_2821 * _2769.x) + _2727;
                        _2655 = (_2821 * _2769.y) + _2728;
                        _2656 = (_2821 * _2769.z) + _2729;
                        _2651 = (_2902 * _2786.x) + _2724;
                        _2652 = (_2902 * _2786.y) + _2725;
                        _2653 = (_2902 * _2786.z) + _2726;
                        if (_2731 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2731;
                        }
                    }
                    frontier_phi_68_pred = _2653;
                    frontier_phi_68_pred_1 = _2656;
                    frontier_phi_68_pred_2 = _2655;
                    frontier_phi_68_pred_3 = _2654;
                    frontier_phi_68_pred_4 = _2652;
                    frontier_phi_68_pred_5 = _2651;
                }
                _2423 = frontier_phi_68_pred;
                _2429 = frontier_phi_68_pred_1;
                _2427 = frontier_phi_68_pred_2;
                _2425 = frontier_phi_68_pred_3;
                _2421 = frontier_phi_68_pred_4;
                _2419 = frontier_phi_68_pred_5;
                uint _2586 = _2585 + 1u;
                if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2579 = _2419;
                    _2580 = _2421;
                    _2581 = _2423;
                    _2582 = _2425;
                    _2583 = _2427;
                    _2584 = _2429;
                    _2585 = _2586;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
        }
        uvec4 _2432 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2433 = _2432.z;
        uint _2435 = (_2433 >> 8u) & 15u;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((4294967295u << _2435) & _2289) == 0u)
        {
            _2547 = _2418;
            _2549 = _2420;
            _2551 = _2422;
            _2553 = _2424;
            _2555 = _2426;
            _2557 = _2428;
        }
        else
        {
            float _2572 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
            float _2573 = _2572 * _2243;
            float _2574 = _2572 * _2244;
            float _2575 = _2572 * _2245;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2435 < ((_2433 >> 12u) & 15u))
            {
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2707 = _2418;
                float _2708 = _2420;
                float _2709 = _2422;
                float _2710 = _2424;
                float _2711 = _2426;
                float _2712 = _2428;
                uint _2713 = _2435;
                uint _2722;
                bool _2723;
                for (;;)
                {
                    _2722 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                    _2723 = _2722 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2723)
                    {
                        frontier_phi_79_pred = _2712;
                        frontier_phi_79_pred_1 = _2711;
                        frontier_phi_79_pred_2 = _2710;
                        frontier_phi_79_pred_3 = _2709;
                        frontier_phi_79_pred_4 = _2708;
                        frontier_phi_79_pred_5 = _2707;
                    }
                    else
                    {
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        uint _2935 = _2722;
                        uint _2936;
                        vec4 _2961;
                        float _2962;
                        vec4 _2977;
                        vec3 _2989;
                        vec4 _3005;
                        vec4 _3021;
                        float _3068;
                        bool _3069;
                        for (;;)
                        {
                            uint _2946 = ((_2713 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2935));
                            _2936 = (_2935 + 4294967295u) & _2935;
                            uint _2948 = _2946 * 40u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2962 = _2961.w;
                            uint _2964 = (_2946 * 40u) + 4u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2979 = (_2946 * 40u) + 8u;
                            _2989 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x));
                            uint _2992 = (_2946 * 40u) + 16u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3008 = (_2946 * 40u) + 20u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3024 = (_2946 * 40u) + 24u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3043 = (_2946 * 40u) + 28u;
                            vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3068 = fma(_2245, _3056.z, fma(_2244, _3056.y, _3056.x * _2243)) + _3056.w;
                            _3069 = !((fma(_2245, _3037.z, fma(_2244, _3037.y, _3037.x * _2243)) + _3037.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3069)
                            {
                                float _3096 = _2961.x - _2243;
                                float _3097 = _2961.y - _2244;
                                float _3098 = _2961.z - _2245;
                                float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                                float _3102 = inversesqrt(_3099);
                                float _3103 = _3102 * _3096;
                                float _3104 = _3102 * _3097;
                                float _3105 = _3102 * _3098;
                                float _3109 = 1.0 - (_3099 / (_2962 * _2962));
                                float _4194 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3114 = sqrt(_3099) * _2977.w;
                                float _3116 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                                float _3117 = _3116 * _3116;
                                float _3120 = ((1.0 - _3117) * dot(vec3(_3103, _3104, _3105), vec3(_444, _447, _450))) + _3117;
                                float _3123 = _3114 * _3114;
                                float _3127 = (fma(_2245, _3005.z, fma(_2244, _3005.y, _3005.x * _2243)) + _3005.w) / _3068;
                                float _3128 = (fma(_2245, _3021.z, fma(_2244, _3021.y, _3021.x * _2243)) + _3021.w) / _3068;
                                float _3132 = 1.0 - dot(vec2(_3127, _3128), vec2(_3127, _3128));
                                float _4210 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3134 = _3133 * (((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3110) / ((_3123 * 0.699999988079071044921875) + 1.0));
                                float _3146 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                                float _3147 = 1.0 - _520;
                                float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                                float _3155 = _3154 * _3154;
                                float _3156 = _3155 * _3155;
                                float _3157 = _3103 - _2573;
                                float _3158 = _3104 - _2574;
                                float _3159 = _3105 - _2575;
                                float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                                float _3167 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2573, (-0.0) - _2574, (-0.0) - _2575));
                                float _4221 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3171 = dot(vec3(_444, _447, _450), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                                float _4232 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                                float _3179 = _3116 * _3155;
                                float _3180 = _3179 * _3179;
                                float _3186 = ((1.0 - _3180) * dot(vec3(_444, _447, _450), vec3(_3103, _3104, _3105))) + _3180;
                                float _4243 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3188 = 1.0 - _3155;
                                float _3198 = (0.5 / (((_3187 * ((_3170 * _3188) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3187 * _3188) + _3155) * _3170))) * _3187;
                                float _4254 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3208 = (_3133 * _3110) * (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) / ((_3178 * _3178) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3134 * _2977.z;
                                frontier_phi_85_pred_1 = _3134 * _2977.y;
                                frontier_phi_85_pred_2 = _3134 * _2977.x;
                                frontier_phi_85_pred_3 = _3208 * _2989.z;
                                frontier_phi_85_pred_4 = _3208 * _2989.y;
                                frontier_phi_85_pred_5 = _3208 * _2989.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3217 = frontier_phi_85_pred;
                            _3216 = frontier_phi_85_pred_1;
                            _3215 = frontier_phi_85_pred_2;
                            _3214 = frontier_phi_85_pred_3;
                            _3213 = frontier_phi_85_pred_4;
                            _3212 = frontier_phi_85_pred_5;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2916 = _3212 + _2929;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            if (_2936 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2936;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2921;
                        frontier_phi_79_pred_1 = _2920;
                        frontier_phi_79_pred_2 = _2919;
                        frontier_phi_79_pred_3 = _2918;
                        frontier_phi_79_pred_4 = _2917;
                        frontier_phi_79_pred_5 = _2916;
                    }
                    _2558 = frontier_phi_79_pred;
                    _2556 = frontier_phi_79_pred_1;
                    _2554 = frontier_phi_79_pred_2;
                    _2552 = frontier_phi_79_pred_3;
                    _2550 = frontier_phi_79_pred_4;
                    _2548 = frontier_phi_79_pred_5;
                    uint _2714 = _2713 + 1u;
                    if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2707 = _2548;
                        _2708 = _2550;
                        _2709 = _2552;
                        _2710 = _2554;
                        _2711 = _2556;
                        _2712 = _2558;
                        _2713 = _2714;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2554;
                frontier_phi_60_61_ladder_1 = _2558;
                frontier_phi_60_61_ladder_2 = _2556;
                frontier_phi_60_61_ladder_3 = _2552;
                frontier_phi_60_61_ladder_4 = _2550;
                frontier_phi_60_61_ladder_5 = _2548;
            }
            else
            {
                frontier_phi_60_61_ladder = _2424;
                frontier_phi_60_61_ladder_1 = _2428;
                frontier_phi_60_61_ladder_2 = _2426;
                frontier_phi_60_61_ladder_3 = _2422;
                frontier_phi_60_61_ladder_4 = _2420;
                frontier_phi_60_61_ladder_5 = _2418;
            }
            _2547 = frontier_phi_60_61_ladder_5;
            _2549 = frontier_phi_60_61_ladder_4;
            _2551 = frontier_phi_60_61_ladder_3;
            _2553 = frontier_phi_60_61_ladder;
            _2555 = frontier_phi_60_61_ladder_2;
            _2557 = frontier_phi_60_61_ladder_1;
        }
        float _2562 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2301 = (_2562 * _2553) + _1735;
        _2303 = (_2562 * _2555) + _1737;
        _2305 = (_2562 * _2557) + _1739;
        _2307 = ((_2547 * _489) * _2562) + _2083;
        _2309 = ((_2549 * _491) * _2562) + _2085;
        _2311 = ((_2551 * _492) * _2562) + _2087;
    }
    else
    {
        _2301 = _1735;
        _2303 = _1737;
        _2305 = _1739;
        _2307 = _2083;
        _2309 = _2085;
        _2311 = _2087;
    }
    uint _2317 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _2323 = (_299.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2317].x;
    float _2324 = (_299.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2317].y;
    float _2325 = (_299.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2317].z;
    float _4270 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4281 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4292 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _2342 = (((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2301 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _504))) + ((_2307 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + _2323;
    float _2344 = (_2324 + ((_2309 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2303 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _504)));
    float _2346 = (_2325 + ((_2311 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2305 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _504)));
    float _2347 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2348 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2349 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2355 = cbMtdParam._m0[2u].x * _2323;
    float _2356 = cbMtdParam._m0[2u].y * _2324;
    float _2357 = cbMtdParam._m0[2u].z * _2325;
    float _4318 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2359 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    uint _2360 = _463 + 6u;
    float _2368 = _423 / cbSceneParam._m0[86u].x;
    float _2369 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2383 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2368, _2369, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2385 = _2383.x;
    float _2386 = _2383.y;
    float _2387 = _2383.z;
    float _2388 = _2383.w;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2443 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2444 = _2443 / _343;
        float _2455 = _2444 * _395;
        float _2456 = _396 * _2444;
        float _2457 = (-0.0) - _2456;
        float _2458 = _2444 * _397;
        float _2460 = (cbSceneParam._m0[77u].w * _2457) / _2443;
        float _2461 = _2460 + cbSceneParam._m0[79u].w;
        float _2462 = cbSceneParam._m0[79u].w - _2456;
        float _2468 = sqrt(((_2455 * _2455) + (_2456 * _2456)) + (_2458 * _2458));
        float _2471 = (1.0 - (cbSceneParam._m0[77u].w / _2443)) * _2468;
        float _2476 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2478 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2664;
        if (abs((_2457 - _2460) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2664 = ((((_2461 > 0.0) ? exp2(_2476 * _2461) : (2.0 - exp2(_2478 * _2461))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2471;
        }
        else
        {
            float _2608 = 1.0 / cbSceneParam._m0[80u].x;
            float _2609 = isnan(_2462) ? _2461 : (isnan(_2461) ? _2462 : max(_2461, _2462));
            float _2610 = isnan(_2462) ? _2461 : (isnan(_2461) ? _2462 : min(_2461, _2462));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            _2664 = ((abs(_2468 / _2457) * cbSceneParam._m0[80u].y) * ((((_2619 - _2620) * 2.0) - ((exp2(_2476 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)))) - exp2(_2476 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0))))) * _2608)) - ((exp2(_2478 * _2619) - exp2(_2478 * _2620)) * _2608))) + (_2471 * cbSceneParam._m0[80u].z);
        }
        vec4 _2666 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2368, _2369, 1.0), 0.0);
        float _2675 = exp2((_2664 * (-1.44269502162933349609375)) * (1.0 - _2666.w));
        float _2676 = log2(_2675);
        float _2692 = log2(_2388);
        _2480 = (exp2(_2692 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].x)) * _2666.x) / cbSceneParam._m0[78u].x)) + _2385;
        _2482 = (exp2(_2692 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].y)) * _2666.y) / cbSceneParam._m0[78u].y)) + _2386;
        _2484 = (exp2(_2692 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].z)) * _2666.z) / cbSceneParam._m0[78u].z)) + _2387;
        _2486 = _2675 * _2388;
    }
    else
    {
        _2480 = _2385;
        _2482 = _2386;
        _2484 = _2387;
        _2486 = _2388;
    }
    bool _2702;
    vec4 _2496;
    vec4 _2518;
    float _2520;
    float _2524;
    float _2525;
    float _2526;
    float _2529;
    float _2532;
    float _2535;
    float _2536;
    bool _2546;
    for (;;)
    {
        _2496 = cbMatDynParam._m0[0u];
        float _2498 = roundEven(_2496.y);
        bool _2499 = _2498 == 3.0;
        float _2500 = log2(_2486);
        float _2504 = exp2(_2500 * cbSceneParam._m0[78u].x);
        float _2505 = exp2(_2500 * cbSceneParam._m0[78u].y);
        float _2506 = exp2(_2500 * cbSceneParam._m0[78u].z);
        float _2507 = _2504 * _2347;
        float _2508 = _2505 * _2348;
        float _2509 = _2506 * _2349;
        float _2516 = _411 + (-0.5);
        _2518 = cbMtdParam._m0[1u];
        _2520 = _2518.y * _2516;
        float _2523 = (_2498 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2524 = _2523 * (_2499 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2480)));
        _2525 = _2523 * (_2499 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2482)));
        _2526 = _2523 * (_2499 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2484)));
        _2529 = ((_2355 * _2359) * _2504) * _2523;
        _2532 = ((_2356 * _2359) * _2505) * _2523;
        _2535 = ((_2357 * _2359) * _2506) * _2523;
        _2536 = _2516 * 0.999000012874603271484375;
        _2546 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2546)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2536) < 0.5)
            {
                _2702 = true;
                break;
            }
        }
        uint _2643 = _465 + uint(_2496.w);
        if ((cbInstanceData._m0[_2643].w < 1.0) && ((cbInstanceData._m0[_2643].w + _2536) < 0.5))
        {
            _2702 = true;
            break;
        }
        if ((_2520 + 1.0) < _2518.x)
        {
            _2702 = true;
            break;
        }
        _2702 = false;
        break;
    }
    float _2907;
    if (_2702)
    {
        discard_state = true;
        _2907 = 0.0;
    }
    else
    {
        _2907 = cbInstanceData._m0[_2360].w;
    }
    SV_Target.x = _2524;
    SV_Target.y = _2525;
    SV_Target.z = _2526;
    SV_Target.w = _2907;
    SV_Target_1.x = _2529;
    SV_Target_1.y = _2532;
    SV_Target_1.z = _2535;
    SV_Target_1.w = cbInstanceData._m0[_2360].w;
    discard_exit();
}


