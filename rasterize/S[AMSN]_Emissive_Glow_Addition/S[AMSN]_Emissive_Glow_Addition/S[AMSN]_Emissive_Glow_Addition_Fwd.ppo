#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _861;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _227 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _227.x;
    float _231 = _227.y;
    float _232 = _227.z;
    vec4 _248 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x + cbMtdParam._m0[9u].x;
    vec4 _263 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3236 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))));
    vec4 _293 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _303 = fma(_280, _211, fma(_273, _203 * TANGENT.x, (_189 * _182) * _271));
    float _306 = fma(_280, _212, fma(_273, _203 * TANGENT.y, (_189 * _183) * _271));
    float _309 = fma(_280, _213, fma(_273, _203 * TANGENT.z, (_189 * _184) * _271));
    float _313 = inversesqrt(dot(vec3(_303, _306, _309), vec3(_303, _306, _309)));
    float _314 = _313 * _303;
    float _315 = _313 * _306;
    float _316 = _313 * _309;
    float _3247 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _317 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _3258 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3269 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3280 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3291 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _321 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _429 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _432 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = _445 + 9u;
    uint _448 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3302 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _460 = 1.0 - _321;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _321;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _321;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _321;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_314, _315, _316), vec3(_396, _397, _398));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _314) - _396;
    float _495 = (_490 * _315) - _397;
    float _496 = (_490 * _316) - _398;
    float _500 = abs(dot(vec3(_396, _397, _398), vec3(_314, _315, _316)));
    float _3335 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_317);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _860;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _585 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _589 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _593 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _618 = _550 + _314;
        float _619 = _554 + _315;
        float _620 = _558 + _316;
        float _630 = fma(_620, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618)) - _585;
        float _631 = fma(_620, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618)) - _589;
        float _632 = fma(_620, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618)) - _593;
        float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
        float _649 = ((_636 * _630) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_636 * _631) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_636 * _632) / cbModelParam._m0[34u].z) + ((((((_593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_654.x + (-0.5));
        float _690 = _688 * (_654.y + (-0.5));
        float _691 = _688 * (_654.z + (-0.5));
        float _698 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_661.x + (-0.5));
        float _700 = _698 * (_661.y + (-0.5));
        float _701 = _698 * (_661.z + (-0.5));
        float _708 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_668.x + (-0.5));
        float _710 = _708 * (_668.y + (-0.5));
        float _711 = _708 * (_668.z + (-0.5));
        float _718 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_675.x + (-0.5));
        float _720 = _718 * (_675.y + (-0.5));
        float _721 = _718 * (_675.z + (-0.5));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = _689 * 0.5;
        float _726 = _699 * 0.5;
        float _727 = _709 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _742 = (dot(vec3(_314, _315, _316), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3361 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _752 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3372 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3383 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * (_754 + 1.0))) + _759) * _722;
        float _769 = _690 * 0.5;
        float _770 = _700 * 0.5;
        float _771 = _710 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_314, _315, _316), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3416 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_796 + 1.0))) + _801) * _723;
        float _811 = _691 * 0.5;
        float _812 = _701 * 0.5;
        float _813 = _711 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_314, _315, _316), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3449 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_838 + 1.0))) + _843) * _724;
        _860 = _691;
        _862 = _690;
        _863 = _689;
        _864 = _701;
        _865 = _700;
        _866 = _699;
        _867 = _711;
        _868 = _710;
        _869 = _709;
        _870 = _724;
        _871 = _723;
        _872 = _722;
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
    }
    else
    {
        _860 = _861;
        _862 = _861;
        _863 = _861;
        _864 = _861;
        _865 = _861;
        _866 = _861;
        _867 = _861;
        _868 = _861;
        _869 = _861;
        _870 = _861;
        _871 = _861;
        _872 = _861;
        _873 = 0.0;
        _874 = 0.0;
        _875 = 0.0;
    }
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _905 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _909 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _932 = _550 + _314;
        float _933 = _554 + _315;
        float _934 = _558 + _316;
        float _944 = fma(_934, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_901 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_905 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[35u].z) + ((((((_909 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1000 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_967.x + (-0.5));
        float _1002 = _1000 * (_967.y + (-0.5));
        float _1003 = _1000 * (_967.z + (-0.5));
        float _1010 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_974.x + (-0.5));
        float _1012 = _1010 * (_974.y + (-0.5));
        float _1013 = _1010 * (_974.z + (-0.5));
        float _1020 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_981.x + (-0.5));
        float _1022 = _1020 * (_981.y + (-0.5));
        float _1023 = _1020 * (_981.z + (-0.5));
        float _1030 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_988.x + (-0.5));
        float _1032 = _1030 * (_988.y + (-0.5));
        float _1033 = _1030 * (_988.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_314, _315, _316), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3512 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1064 + 1.0))) + _1069) * _1034;
        float _1079 = _1002 * 0.5;
        float _1080 = _1012 * 0.5;
        float _1081 = _1022 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_314, _315, _316), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3545 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1106 + 1.0))) + _1111) * _1035;
        float _1121 = _1003 * 0.5;
        float _1122 = _1013 * 0.5;
        float _1123 = _1023 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_314, _315, _316), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3578 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1148 + 1.0))) + _1153) * _1036;
        _1170 = _1003;
        _1171 = _1002;
        _1172 = _1001;
        _1173 = _1013;
        _1174 = _1012;
        _1175 = _1011;
        _1176 = _1023;
        _1177 = _1022;
        _1178 = _1021;
        _1179 = _1036;
        _1180 = _1035;
        _1181 = _1034;
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _861;
        _1171 = _861;
        _1172 = _861;
        _1173 = _861;
        _1174 = _861;
        _1175 = _861;
        _1176 = _861;
        _1177 = _861;
        _1178 = _861;
        _1179 = _861;
        _1180 = _861;
        _1181 = _861;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1194));
    float _1238 = _494 * 0.5;
    float _1239 = _495 * 0.5;
    float _1240 = _496 * 0.5;
    float _1241 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1244 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1247 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1281;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1254 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_860, _864, _867, _870));
        float _1258 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_862, _865, _868, _871));
        float _1262 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_863, _866, _869, _872));
        float _1269 = dot(vec4(cbModelParam._m0[39u]), vec4(_1238, _1239, _1240, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1292;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1283 = dot(vec4(cbModelParam._m0[40u]), vec4(_1238, _1239, _1240, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1296 = (_1292 * cbModelParam._m0[1u].x) + (_1281 * (1.0 - cbModelParam._m0[1u].x));
    float _1306 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _317);
    float _1307 = isnan(_1306) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1306 : min(cbModelParam._m0[25u].z, _1306));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1356 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1360 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1364 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1367 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1370 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1373 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1401;
        if (_1367 > 0.0)
        {
            _1401 = abs((1.0 - _1356) / _1367);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1356 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1401 = frontier_phi_16_14_ladder;
        }
        float _1609;
        if (_1370 > 0.0)
        {
            _1609 = abs((1.0 - _1360) / _1370);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1360 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1609 = frontier_phi_25_21_ladder;
        }
        float _1863;
        if (_1373 > 0.0)
        {
            _1863 = abs((1.0 - _1364) / _1373);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1364 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1863 = frontier_phi_37_32_ladder;
        }
        float _1865 = isnan(_1609) ? _1401 : (isnan(_1401) ? _1609 : min(_1401, _1609));
        float _1866 = isnan(_1863) ? _1865 : (isnan(_1865) ? _1863 : min(_1865, _1863));
        float _1870 = (_1866 * _1367) + _1356;
        float _1871 = (_1866 * _1370) + _1360;
        float _1872 = (_1866 * _1373) + _1364;
        float _1873 = _1866 * 9.9999997473787516355514526367188e-05;
        float _1875 = (-1.0) - _1873;
        float _1877 = _1873 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1872 > _1877) || ((_1872 < _1875) || ((_1871 > _1877) || ((_1871 < _1875) || ((_1870 < _1875) || (_1870 > _1877))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1872, cbModelParam._m0[9u].z, fma(_1871, cbModelParam._m0[9u].y, _1870 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1872, cbModelParam._m0[10u].z, fma(_1871, cbModelParam._m0[10u].y, _1870 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1872, cbModelParam._m0[11u].z, fma(_1871, cbModelParam._m0[11u].y, _1870 * cbModelParam._m0[11u].x))), _1307);
            frontier_phi_15_37_ladder = _2000.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2000.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2000.x * cbModelParam._m0[1u].y;
        }
        _1389 = frontier_phi_15_37_ladder_2;
        _1391 = frontier_phi_15_37_ladder_1;
        _1393 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1307);
        _1389 = _1377.x * cbModelParam._m0[1u].y;
        _1391 = _1377.y * cbModelParam._m0[1u].y;
        _1393 = _1377.z * cbModelParam._m0[1u].y;
    }
    float _1397 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _317);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1397 : min(cbModelParam._m0[25u].w, _1397));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1455 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1459 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1463 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1466 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1469 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1472 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1614;
        if (_1466 > 0.0)
        {
            _1614 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1614 = frontier_phi_27_23_ladder;
        }
        float _1890;
        if (_1469 > 0.0)
        {
            _1890 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1890 = frontier_phi_39_34_ladder;
        }
        float _2103;
        if (_1472 > 0.0)
        {
            _2103 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2103 = frontier_phi_48_45_ladder;
        }
        float _2105 = isnan(_1890) ? _1614 : (isnan(_1614) ? _1890 : min(_1614, _1890));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1466) + _1455;
        float _2111 = (_2106 * _1469) + _1459;
        float _2112 = (_2106 * _1472) + _1463;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2113;
        float _2116 = _2113 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2112 > _2116) || ((_2112 < _2114) || ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 < _2114) || (_2110 > _2116))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2112, cbModelParam._m0[17u].z, fma(_2111, cbModelParam._m0[17u].y, _2110 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2112, cbModelParam._m0[18u].z, fma(_2111, cbModelParam._m0[18u].y, _2110 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2112, cbModelParam._m0[19u].z, fma(_2111, cbModelParam._m0[19u].y, _2110 * cbModelParam._m0[19u].x))), _1398);
            frontier_phi_24_48_ladder = _2339.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2339.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2339.x * cbModelParam._m0[1u].z;
        }
        _1491 = frontier_phi_24_48_ladder_2;
        _1493 = frontier_phi_24_48_ladder_1;
        _1495 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1398);
        _1491 = _1475.x * cbModelParam._m0[1u].z;
        _1493 = _1475.y * cbModelParam._m0[1u].z;
        _1495 = _1475.z * cbModelParam._m0[1u].z;
    }
    float _1508 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1515 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, _1508 * cbSceneParam._m0[91u].x));
    uvec4 _1531 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1533 = _1531.x * 14u;
    uint _1534 = _1533 + 13u;
    float _1541 = _486 + (-1.0);
    float _1546 = (cbLight._m0[_1534].x * _1541) + 1.0;
    float _1547 = (cbLight._m0[_1534].y * _1541) + 1.0;
    float _1548 = (cbLight._m0[_1534].z * _1541) + 1.0;
    float _1549 = (cbLight._m0[_1534].w * _1541) + 1.0;
    uint _1550 = _1533 + 5u;
    float _1556 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
    uint _1560 = _1533 + 4u;
    float _1567 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
    uint _1571 = _1533 | 1u;
    float _1582 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_314, _315, _316));
    float _1585 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_314, _315, _316));
    float _3714 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _3725 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1590 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1592 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1599 = ((cbLight._m0[_1550].x * _1556) * _1592) + ((cbLight._m0[_1560].x * _1567) * _1590);
    float _1600 = ((_1556 * cbLight._m0[_1550].y) * _1592) + ((_1567 * cbLight._m0[_1560].y) * _1590);
    float _1601 = ((_1556 * cbLight._m0[_1550].z) * _1592) + ((_1567 * cbLight._m0[_1560].z) * _1590);
    uvec4 _1606 = floatBitsToUint(cbLight._m0[_1533 + 12u]);
    bool _1608 = _1606.x == 0u;
    float _1619;
    float _1621;
    float _1623;
    if (_1608)
    {
        _1619 = _1599;
        _1621 = _1600;
        _1623 = _1601;
    }
    else
    {
        uint _1627 = _1533 + 6u;
        float _1643 = (dot(vec3(cbLight._m0[_1533 + 2u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1644 = _1643 * _1643;
        float _3736 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1646 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1619 = (((cbLight._m0[_1627].x * 0.3183098733425140380859375) * _1645) * _1646) + _1599;
        _1621 = (((cbLight._m0[_1627].y * 0.3183098733425140380859375) * _1645) * _1646) + _1600;
        _1623 = (((cbLight._m0[_1627].z * 0.3183098733425140380859375) * _1645) * _1646) + _1601;
    }
    bool _1626 = _1606.y == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1626)
    {
        _1664 = _1619;
        _1666 = _1621;
        _1668 = _1623;
    }
    else
    {
        uint _1834 = _1533 + 7u;
        float _1850 = (dot(vec3(cbLight._m0[_1533 + 3u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1851 = _1850 * _1850;
        float _3752 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1853 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1664 = (((cbLight._m0[_1834].x * 0.3183098733425140380859375) * _1852) * _1853) + _1619;
        _1666 = (((cbLight._m0[_1834].y * 0.3183098733425140380859375) * _1852) * _1853) + _1621;
        _1668 = (((cbLight._m0[_1834].z * 0.3183098733425140380859375) * _1852) * _1853) + _1623;
    }
    uint _1671 = _1533 + 8u;
    float _1684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1533].w)) * _317) * 0.949999988079071044921875);
    float _1685 = _1684 * _1684;
    float _1686 = cbLight._m0[_1533].x + _396;
    float _1687 = cbLight._m0[_1533].y + _397;
    float _1688 = cbLight._m0[_1533].z + _398;
    float _1692 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
    float _1693 = _1692 * _1686;
    float _1694 = _1692 * _1687;
    float _1695 = _1692 * _1688;
    float _1696 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1533].xyz));
    float _3768 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1699 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1700 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1701 = dot(vec3(_314, _315, _316), vec3(_1693, _1694, _1695));
    float _3790 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1705 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1693, _1694, _1695));
    float _3801 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1709 = _1685 * _1685;
    float _1713 = ((_1704 * _1704) * (_1709 + (-1.0))) + 1.0;
    float _1721 = exp2(log2(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * 5.0);
    float _1722 = 0.959999978542327880859375 - _468;
    float _1724 = 0.959999978542327880859375 - _469;
    float _1725 = 0.959999978542327880859375 - _470;
    float _1732 = 1.0 - _1685;
    float _1743 = (0.5 / (((_1700 * ((_1699 * _1732) + _1685)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _1732) + _1685) * _1699))) * _1699;
    float _3812 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1709 / ((_1713 * _1713) * 3.141590118408203125));
    uint _1756 = _1533 + 9u;
    float _1767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _317) * 0.949999988079071044921875);
    float _1768 = _1767 * _1767;
    float _1769 = cbLight._m0[_1571].x + _396;
    float _1770 = cbLight._m0[_1571].y + _397;
    float _1771 = cbLight._m0[_1571].z + _398;
    float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
    float _1776 = _1775 * _1769;
    float _1777 = _1775 * _1770;
    float _1778 = _1775 * _1771;
    float _1779 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1571].xyz));
    float _3823 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1783 = dot(vec3(_314, _315, _316), vec3(_1776, _1777, _1778));
    float _3834 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1787 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1776, _1777, _1778));
    float _3845 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1791 = _1768 * _1768;
    float _1795 = ((_1786 * _1786) * (_1791 + (-1.0))) + 1.0;
    float _1802 = exp2(log2(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * 5.0);
    float _1809 = 1.0 - _1768;
    float _1819 = (0.5 / (((_1700 * ((_1782 * _1809) + _1768)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _1809) + _1768) * _1782))) * _1782;
    float _3856 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1821 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1791 / ((_1795 * _1795) * 3.141590118408203125));
    float _1831 = (((((_1802 * _1722) + _471) * cbLight._m0[_1756].x) * _1821) * _1556) + (((((_1721 * _1722) + _471) * cbLight._m0[_1671].x) * _1745) * _1567);
    float _1832 = (((((_1802 * _1724) + _473) * cbLight._m0[_1756].y) * _1821) * _1556) + (((((_1721 * _1724) + _473) * cbLight._m0[_1671].y) * _1745) * _1567);
    float _1833 = (((((_1802 * _1725) + _474) * cbLight._m0[_1756].z) * _1821) * _1556) + (((((_1721 * _1725) + _474) * cbLight._m0[_1671].z) * _1745) * _1567);
    float _1895;
    float _1897;
    float _1899;
    if (_1608)
    {
        _1895 = _1831;
        _1897 = _1832;
        _1899 = _1833;
    }
    else
    {
        uint _1901 = _1533 + 2u;
        uint _1905 = _1533 + 10u;
        float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _317) * 0.949999988079071044921875);
        float _1920 = _1919 * _1919;
        float _1921 = cbLight._m0[_1901].x + _396;
        float _1922 = cbLight._m0[_1901].y + _397;
        float _1923 = cbLight._m0[_1901].z + _398;
        float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
        float _1928 = _1927 * _1921;
        float _1929 = _1927 * _1922;
        float _1930 = _1927 * _1923;
        float _1931 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1901].xyz));
        float _3867 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1934 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1935 = dot(vec3(_314, _315, _316), vec3(_1928, _1929, _1930));
        float _3878 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1938 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1939 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_1928, _1929, _1930));
        float _3889 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1943 = _1920 * _1920;
        float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
        float _1954 = exp2(log2(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * 5.0);
        float _1961 = 1.0 - _1920;
        float _1971 = (0.5 / (((_1700 * ((_1934 * _1961) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _1961) + _1920) * _1934))) * _1934;
        float _3900 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1973 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
        float _1974 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1895 = (((((_1954 * _1722) + _471) * cbLight._m0[_1905].x) * _1973) * _1974) + _1831;
        _1897 = (((((_1954 * _1724) + _473) * cbLight._m0[_1905].y) * _1973) * _1974) + _1832;
        _1899 = (((((_1954 * _1725) + _474) * cbLight._m0[_1905].z) * _1973) * _1974) + _1833;
    }
    float _2009;
    float _2011;
    float _2013;
    if (_1626)
    {
        _2009 = _1895;
        _2011 = _1897;
        _2013 = _1899;
    }
    else
    {
        uint _2020 = _1533 + 3u;
        uint _2024 = _1533 + 11u;
        float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _317) * 0.949999988079071044921875);
        float _2039 = _2038 * _2038;
        float _2040 = cbLight._m0[_2020].x + _396;
        float _2041 = cbLight._m0[_2020].y + _397;
        float _2042 = cbLight._m0[_2020].z + _398;
        float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
        float _2047 = _2046 * _2040;
        float _2048 = _2046 * _2041;
        float _2049 = _2046 * _2042;
        float _2050 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2020].xyz));
        float _3916 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2054 = dot(vec3(_314, _315, _316), vec3(_2047, _2048, _2049));
        float _3927 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2058 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2047, _2048, _2049));
        float _3938 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2062 = _2039 * _2039;
        float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
        float _2073 = exp2(log2(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * 5.0);
        float _2080 = 1.0 - _2039;
        float _2090 = (0.5 / (((_1700 * ((_2053 * _2080) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _2080) + _2039) * _2053))) * _2053;
        float _3949 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2092 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
        float _2093 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _2009 = (((((_2073 * _1722) + _471) * cbLight._m0[_2024].x) * _2092) * _2093) + _1895;
        _2011 = (((((_2073 * _1724) + _473) * cbLight._m0[_2024].y) * _2092) * _2093) + _1897;
        _2013 = (((((_2073 * _1725) + _474) * cbLight._m0[_2024].z) * _2092) * _2093) + _1899;
    }
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    if (_1531.y == 0u)
    {
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2168;
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2168;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2168;
        uvec4 _2183 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2184 = _2183.x;
        uint _2195 = uint((float(_2183.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2184))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2184)));
        float _2205 = (log2(_2171 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2206 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        uint _2209 = uint(isnan(14.0) ? _2206 : (isnan(_2206) ? 14.0 : min(_2206, 14.0)));
        uvec4 _2214 = texelFetch(g_lightClusterGridBuffer, int(((_2209 << 2u) + (_2195 << 6u)) >> 2u));
        uint _2215 = _2214.x;
        uint _2216 = _2183.z;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        if (((((1u << ((_2216 >> 4u) & 15u)) + 4294967295u) & _2215) == 0u) || ((_2216 & 240u) == 0u))
        {
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
        }
        else
        {
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            uint _2503 = 0u;
            uint _2512;
            bool _2513;
            for (;;)
            {
                _2512 = texelFetch(g_lightClassification, int((((_2209 << 5u) + (_2195 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                _2513 = _2512 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2513)
                {
                    frontier_phi_63_pred = _2502;
                    frontier_phi_63_pred_1 = _2501;
                    frontier_phi_63_pred_2 = _2500;
                    frontier_phi_63_pred_3 = _2499;
                    frontier_phi_63_pred_4 = _2498;
                    frontier_phi_63_pred_5 = _2497;
                }
                else
                {
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    uint _2627;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2512;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    for (;;)
                    {
                        uint _2631 = uint(findLSB(_2627)) + (_2503 << 5u);
                        uint _2628 = (_2627 + 4294967295u) & _2627;
                        uint _2633 = _2631 * 48u;
                        vec4 _2647 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2633)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 3u)).x));
                        uint _2653 = (_2631 * 48u) + 4u;
                        vec4 _2666 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2672 = (_2631 * 48u) + 8u;
                        vec3 _2683 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x));
                        float _2687 = _2647.x - _2169;
                        float _2688 = _2647.y - _2170;
                        float _2689 = _2647.z - _2171;
                        float _2690 = dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689));
                        float _2693 = inversesqrt(_2690);
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2697 = dot(vec3(_426, _429, _432), vec3(_2694, _2695, _2696));
                        float _2702 = 1.0 - (_2690 * _2647.w);
                        float _3975 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2703 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2704 = sqrt(_2690) * _2666.w;
                        float _2707 = 1.39999997615814208984375 / (_2704 + 1.39999997615814208984375);
                        float _2708 = _2707 * _2707;
                        float _2711 = ((1.0 - _2708) * _2697) + _2708;
                        float _2714 = _2704 * _2704;
                        float _2718 = ((isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0))) * _2703) / ((_2714 * 0.699999988079071044921875) + 1.0);
                        float _2722 = (-0.0) - _2169;
                        float _2723 = (-0.0) - _2170;
                        float _2724 = (-0.0) - _2171;
                        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2739 = exp2(log2(1.0 / ((_2714 * 3.5) + 5.0)) * 0.25);
                        float _2740 = 1.0 - _502;
                        float _2747 = sqrt(1.0 - ((1.0 - (_2740 * _2740)) * (1.0 - (_2739 * _2739))));
                        float _2748 = _2747 * _2747;
                        float _2749 = _2748 * _2748;
                        float _2750 = _2729 + _2694;
                        float _2751 = _2730 + _2695;
                        float _2752 = _2731 + _2696;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2760 = dot(vec3(_426, _429, _432), vec3(_2729, _2730, _2731));
                        float _3991 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2763 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2764 = dot(vec3(_426, _429, _432), vec3(_2756 * _2750, _2756 * _2751, _2756 * _2752));
                        float _4002 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2771 = ((_2767 * _2767) * (_2749 + (-1.0))) + 1.0;
                        float _2772 = _2707 * _2748;
                        float _2773 = _2772 * _2772;
                        float _2776 = ((1.0 - _2773) * _2697) + _2773;
                        float _4013 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2777 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2778 = 1.0 - _2748;
                        float _2788 = (0.5 / (((_2777 * ((_2763 * _2778) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2777 * _2778) + _2748) * _2763))) * _2777;
                        float _4024 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2799 = (((_2749 * 3.1415927410125732421875) * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) / ((_2771 * _2771) * ((_2714 * 2.1991131305694580078125) + 3.141590118408203125))) * _2703;
                        _2556 = (_2718 * _2666.x) + _2624;
                        _2557 = (_2718 * _2666.y) + _2625;
                        _2558 = (_2718 * _2666.z) + _2626;
                        _2553 = (_2799 * _2683.x) + _2621;
                        _2554 = (_2799 * _2683.y) + _2622;
                        _2555 = (_2799 * _2683.z) + _2623;
                        if (_2628 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2628;
                        }
                    }
                    frontier_phi_63_pred = _2558;
                    frontier_phi_63_pred_1 = _2557;
                    frontier_phi_63_pred_2 = _2556;
                    frontier_phi_63_pred_3 = _2555;
                    frontier_phi_63_pred_4 = _2554;
                    frontier_phi_63_pred_5 = _2553;
                }
                _2355 = frontier_phi_63_pred;
                _2353 = frontier_phi_63_pred_1;
                _2351 = frontier_phi_63_pred_2;
                _2349 = frontier_phi_63_pred_3;
                _2347 = frontier_phi_63_pred_4;
                _2345 = frontier_phi_63_pred_5;
                uint _2504 = _2503 + 1u;
                if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2497 = _2345;
                    _2498 = _2347;
                    _2499 = _2349;
                    _2500 = _2351;
                    _2501 = _2353;
                    _2502 = _2355;
                    _2503 = _2504;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
        }
        uvec4 _2358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2359 = _2358.z;
        uint _2361 = (_2359 >> 8u) & 15u;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((4294967295u << _2361) & _2215) == 0u)
        {
            _2465 = _2344;
            _2467 = _2346;
            _2469 = _2348;
            _2471 = _2350;
            _2473 = _2352;
            _2475 = _2354;
        }
        else
        {
            float _2490 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
            float _2491 = _2490 * _2169;
            float _2492 = _2490 * _2170;
            float _2493 = _2490 * _2171;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2361 < ((_2359 >> 12u) & 15u))
            {
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2604 = _2344;
                float _2605 = _2346;
                float _2606 = _2348;
                float _2607 = _2350;
                float _2608 = _2352;
                float _2609 = _2354;
                uint _2610 = _2361;
                uint _2619;
                bool _2620;
                for (;;)
                {
                    _2619 = texelFetch(g_lightClassification, int((((_2209 << 5u) + (_2195 << 9u)) + (_2610 << 2u)) >> 2u)).x;
                    _2620 = _2619 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2620)
                    {
                        frontier_phi_69_pred = _2609;
                        frontier_phi_69_pred_1 = _2608;
                        frontier_phi_69_pred_2 = _2607;
                        frontier_phi_69_pred_3 = _2606;
                        frontier_phi_69_pred_4 = _2605;
                        frontier_phi_69_pred_5 = _2604;
                    }
                    else
                    {
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        uint _2823 = _2619;
                        uint _2824;
                        vec4 _2849;
                        float _2850;
                        vec4 _2865;
                        vec3 _2877;
                        vec4 _2893;
                        vec4 _2909;
                        float _2956;
                        bool _2957;
                        for (;;)
                        {
                            uint _2834 = ((_2610 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2823));
                            _2824 = (_2823 + 4294967295u) & _2823;
                            uint _2836 = _2834 * 40u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            _2850 = _2849.w;
                            uint _2852 = (_2834 * 40u) + 4u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2867 = (_2834 * 40u) + 8u;
                            _2877 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x));
                            uint _2880 = (_2834 * 40u) + 16u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2896 = (_2834 * 40u) + 20u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2912 = (_2834 * 40u) + 24u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2931 = (_2834 * 40u) + 28u;
                            vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2956 = fma(_2171, _2944.z, fma(_2170, _2944.y, _2944.x * _2169)) + _2944.w;
                            _2957 = !((fma(_2171, _2925.z, fma(_2170, _2925.y, _2925.x * _2169)) + _2925.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2957)
                            {
                                float _2984 = _2849.x - _2169;
                                float _2985 = _2849.y - _2170;
                                float _2986 = _2849.z - _2171;
                                float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                                float _2990 = inversesqrt(_2987);
                                float _2991 = _2990 * _2984;
                                float _2992 = _2990 * _2985;
                                float _2993 = _2990 * _2986;
                                float _2997 = 1.0 - (_2987 / (_2850 * _2850));
                                float _4035 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3002 = sqrt(_2987) * _2865.w;
                                float _3004 = 1.39999997615814208984375 / (_3002 + 1.39999997615814208984375);
                                float _3005 = _3004 * _3004;
                                float _3008 = ((1.0 - _3005) * dot(vec3(_2991, _2992, _2993), vec3(_426, _429, _432))) + _3005;
                                float _3011 = _3002 * _3002;
                                float _3015 = (fma(_2171, _2893.z, fma(_2170, _2893.y, _2893.x * _2169)) + _2893.w) / _2956;
                                float _3016 = (fma(_2171, _2909.z, fma(_2170, _2909.y, _2909.x * _2169)) + _2909.w) / _2956;
                                float _3020 = 1.0 - dot(vec2(_3015, _3016), vec2(_3015, _3016));
                                float _4051 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3022 = _3021 * (((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _2998) / ((_3011 * 0.699999988079071044921875) + 1.0));
                                float _3034 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                                float _3035 = 1.0 - _502;
                                float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                                float _3043 = _3042 * _3042;
                                float _3044 = _3043 * _3043;
                                float _3045 = _2991 - _2491;
                                float _3046 = _2992 - _2492;
                                float _3047 = _2993 - _2493;
                                float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                                float _3055 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2491, (-0.0) - _2492, (-0.0) - _2493));
                                float _4062 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3058 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3059 = dot(vec3(_426, _429, _432), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                                float _4073 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                                float _3067 = _3004 * _3043;
                                float _3068 = _3067 * _3067;
                                float _3074 = ((1.0 - _3068) * dot(vec3(_426, _429, _432), vec3(_2991, _2992, _2993))) + _3068;
                                float _4084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3076 = 1.0 - _3043;
                                float _3086 = (0.5 / (((_3075 * ((_3058 * _3076) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3075 * _3076) + _3043) * _3058))) * _3075;
                                float _4095 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3096 = (_3021 * _2998) * (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) / ((_3066 * _3066) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3022 * _2865.z;
                                frontier_phi_75_pred_1 = _3022 * _2865.y;
                                frontier_phi_75_pred_2 = _3022 * _2865.x;
                                frontier_phi_75_pred_3 = _3096 * _2877.z;
                                frontier_phi_75_pred_4 = _3096 * _2877.y;
                                frontier_phi_75_pred_5 = _3096 * _2877.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3105 = frontier_phi_75_pred;
                            _3104 = frontier_phi_75_pred_1;
                            _3103 = frontier_phi_75_pred_2;
                            _3102 = frontier_phi_75_pred_3;
                            _3101 = frontier_phi_75_pred_4;
                            _3100 = frontier_phi_75_pred_5;
                            _2807 = _3103 + _2820;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            if (_2824 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2824;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2809;
                        frontier_phi_69_pred_1 = _2808;
                        frontier_phi_69_pred_2 = _2807;
                        frontier_phi_69_pred_3 = _2806;
                        frontier_phi_69_pred_4 = _2805;
                        frontier_phi_69_pred_5 = _2804;
                    }
                    _2476 = frontier_phi_69_pred;
                    _2474 = frontier_phi_69_pred_1;
                    _2472 = frontier_phi_69_pred_2;
                    _2470 = frontier_phi_69_pred_3;
                    _2468 = frontier_phi_69_pred_4;
                    _2466 = frontier_phi_69_pred_5;
                    uint _2611 = _2610 + 1u;
                    if (_2611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2604 = _2466;
                        _2605 = _2468;
                        _2606 = _2470;
                        _2607 = _2472;
                        _2608 = _2474;
                        _2609 = _2476;
                        _2610 = _2611;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2476;
                frontier_phi_57_58_ladder_1 = _2474;
                frontier_phi_57_58_ladder_2 = _2472;
                frontier_phi_57_58_ladder_3 = _2470;
                frontier_phi_57_58_ladder_4 = _2468;
                frontier_phi_57_58_ladder_5 = _2466;
            }
            else
            {
                frontier_phi_57_58_ladder = _2354;
                frontier_phi_57_58_ladder_1 = _2352;
                frontier_phi_57_58_ladder_2 = _2350;
                frontier_phi_57_58_ladder_3 = _2348;
                frontier_phi_57_58_ladder_4 = _2346;
                frontier_phi_57_58_ladder_5 = _2344;
            }
            _2465 = frontier_phi_57_58_ladder_5;
            _2467 = frontier_phi_57_58_ladder_4;
            _2469 = frontier_phi_57_58_ladder_3;
            _2471 = frontier_phi_57_58_ladder_2;
            _2473 = frontier_phi_57_58_ladder_1;
            _2475 = frontier_phi_57_58_ladder;
        }
        float _2480 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2227 = (_2480 * _2471) + _1664;
        _2229 = (_2480 * _2473) + _1666;
        _2231 = (_2480 * _2475) + _1668;
        _2233 = ((_2465 * _471) * _2480) + _2009;
        _2235 = ((_2467 * _473) * _2480) + _2011;
        _2237 = ((_2469 * _474) * _2480) + _2013;
    }
    else
    {
        _2227 = _1664;
        _2229 = _1666;
        _2231 = _1668;
        _2233 = _2009;
        _2235 = _2011;
        _2237 = _2013;
    }
    uint _2243 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _2249 = (_293.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2243].x;
    float _2250 = (_293.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2243].y;
    float _2251 = (_293.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2243].z;
    float _4111 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4122 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4133 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2268 = (((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2227 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _486))) + ((_2233 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + _2249;
    float _2270 = (_2250 + ((_2235 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2229 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _486)));
    float _2272 = (_2251 + ((_2237 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2231 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _486)));
    float _4159 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2285 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    uint _2286 = _445 + 6u;
    float _2294 = _404 / cbSceneParam._m0[86u].x;
    float _2295 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2309 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2294, _2295, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2311 = _2309.x;
    float _2312 = _2309.y;
    float _2313 = _2309.z;
    float _2314 = _2309.w;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2369 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2370 = _2369 / _337;
        float _2381 = _2370 * _389;
        float _2382 = _390 * _2370;
        float _2383 = (-0.0) - _2382;
        float _2384 = _2370 * _391;
        float _2386 = (cbSceneParam._m0[77u].w * _2383) / _2369;
        float _2387 = _2386 + cbSceneParam._m0[79u].w;
        float _2388 = cbSceneParam._m0[79u].w - _2382;
        float _2394 = sqrt(((_2381 * _2381) + (_2382 * _2382)) + (_2384 * _2384));
        float _2397 = (1.0 - (cbSceneParam._m0[77u].w / _2369)) * _2394;
        float _2402 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2404 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2566;
        if (abs((_2383 - _2386) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2566 = ((((_2387 > 0.0) ? exp2(_2402 * _2387) : (2.0 - exp2(_2404 * _2387))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2397;
        }
        else
        {
            float _2526 = 1.0 / cbSceneParam._m0[80u].x;
            float _2527 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : max(_2387, _2388));
            float _2528 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : min(_2387, _2388));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            _2566 = ((abs(_2394 / _2383) * cbSceneParam._m0[80u].y) * ((((_2537 - _2538) * 2.0) - ((exp2(_2402 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)))) - exp2(_2402 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))))) * _2526)) - ((exp2(_2404 * _2537) - exp2(_2404 * _2538)) * _2526))) + (_2397 * cbSceneParam._m0[80u].z);
        }
        vec4 _2568 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2294, _2295, 1.0), 0.0);
        float _2577 = exp2((_2566 * (-1.44269502162933349609375)) * (1.0 - _2568.w));
        float _2578 = log2(_2577);
        float _2594 = log2(_2314);
        _2406 = (exp2(_2594 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2578 * cbSceneParam._m0[78u].x)) * _2568.x) / cbSceneParam._m0[78u].x)) + _2311;
        _2408 = (exp2(_2594 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2578 * cbSceneParam._m0[78u].y)) * _2568.y) / cbSceneParam._m0[78u].y)) + _2312;
        _2410 = (exp2(_2594 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2578 * cbSceneParam._m0[78u].z)) * _2568.z) / cbSceneParam._m0[78u].z)) + _2313;
        _2412 = _2577 * _2314;
    }
    else
    {
        _2406 = _2311;
        _2408 = _2312;
        _2410 = _2313;
        _2412 = _2314;
    }
    float _2424 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2425 = _2424 == 3.0;
    float _2426 = log2(_2412);
    float _2430 = exp2(_2426 * cbSceneParam._m0[78u].x);
    float _2431 = exp2(_2426 * cbSceneParam._m0[78u].y);
    float _2432 = exp2(_2426 * cbSceneParam._m0[78u].z);
    float _2433 = _2430 * (isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0)));
    float _2434 = _2431 * (isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0)));
    float _2435 = _2432 * (isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0)));
    float _2444 = (_2424 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2444 * (_2425 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.y = _2444 * (_2425 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.z = _2444 * (_2425 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.w = cbInstanceData._m0[_2286].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2249) * _2285) * _2430) * _2444;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2250) * _2285) * _2431) * _2444;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2251) * _2285) * _2432) * _2444;
    SV_Target_1.w = cbInstanceData._m0[_2286].w;
}


