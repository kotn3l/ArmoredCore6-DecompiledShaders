#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _865;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _231.x;
    float _235 = _231.y;
    float _236 = _231.z;
    vec4 _252 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _252.x + cbMtdParam._m0[9u].x;
    vec4 _267 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3523 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    vec4 _297 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _307 = fma(_284, _215, fma(_277, _207 * TANGENT.x, (_193 * _186) * _275));
    float _310 = fma(_284, _216, fma(_277, _207 * TANGENT.y, (_193 * _187) * _275));
    float _313 = fma(_284, _217, fma(_277, _207 * TANGENT.z, (_193 * _188) * _275));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3534 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _321 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3556 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3567 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3578 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _325 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _433 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _436 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3589 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _464 = 1.0 - _325;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _325;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _325;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _325;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = _487.x * TEXCOORD.z;
    float _491 = dot(vec3(_318, _319, _320), vec3(_400, _401, _402));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _318) - _400;
    float _499 = (_494 * _319) - _401;
    float _500 = (_494 * _320) - _402;
    float _504 = abs(dot(vec3(_400, _401, _402), vec3(_318, _319, _320)));
    float _3622 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_321);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _593 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _597 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _622 = _554 + _318;
        float _623 = _558 + _319;
        float _624 = _562 + _320;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_318, _319, _320), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3670 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_318, _319, _320), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3703 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_318, _319, _320), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3736 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _909 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _913 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _936 = _554 + _318;
        float _937 = _558 + _319;
        float _938 = _562 + _320;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_318, _319, _320), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3799 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_318, _319, _320), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3832 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_318, _319, _320), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3865 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _865;
        _1175 = _865;
        _1176 = _865;
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _498 * 0.5;
    float _1243 = _499 * 0.5;
    float _1244 = _500 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _868, _871, _874));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_866, _869, _872, _875));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_867, _870, _873, _876));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1374 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1377 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1405 = frontier_phi_16_14_ladder;
        }
        float _1581;
        if (_1374 > 0.0)
        {
            _1581 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1581 = frontier_phi_25_21_ladder;
        }
        float _1877;
        if (_1377 > 0.0)
        {
            _1877 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1877 = frontier_phi_37_32_ladder;
        }
        float _1879 = isnan(_1581) ? _1405 : (isnan(_1405) ? _1581 : min(_1405, _1581));
        float _1880 = isnan(_1877) ? _1879 : (isnan(_1879) ? _1877 : min(_1879, _1877));
        float _1884 = (_1880 * _1371) + _1360;
        float _1885 = (_1880 * _1374) + _1364;
        float _1886 = (_1880 * _1377) + _1368;
        float _1887 = _1880 * 9.9999997473787516355514526367188e-05;
        float _1889 = (-1.0) - _1887;
        float _1891 = _1887 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1886 > _1891) || ((_1886 < _1889) || ((_1885 > _1891) || ((_1885 < _1889) || ((_1884 < _1889) || (_1884 > _1891))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1886, cbModelParam._m0[9u].z, fma(_1885, cbModelParam._m0[9u].y, _1884 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1886, cbModelParam._m0[10u].z, fma(_1885, cbModelParam._m0[10u].y, _1884 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1886, cbModelParam._m0[11u].z, fma(_1885, cbModelParam._m0[11u].y, _1884 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_15_37_ladder = _2031.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2031.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2031.z * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_15_37_ladder_1;
        _1395 = frontier_phi_15_37_ladder;
        _1397 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1473 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1476 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1586;
        if (_1470 > 0.0)
        {
            _1586 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1586 = frontier_phi_27_23_ladder;
        }
        float _1904;
        if (_1473 > 0.0)
        {
            _1904 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1904 = frontier_phi_39_34_ladder;
        }
        float _2242;
        if (_1476 > 0.0)
        {
            _2242 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2242 = frontier_phi_49_46_ladder;
        }
        float _2244 = isnan(_1904) ? _1586 : (isnan(_1586) ? _1904 : min(_1586, _1904));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1470) + _1459;
        float _2250 = (_2245 * _1473) + _1463;
        float _2251 = (_2245 * _1476) + _1467;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2252;
        float _2255 = _2252 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2251 > _2255) || ((_2251 < _2253) || ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 < _2253) || (_2249 > _2255))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2251, cbModelParam._m0[17u].z, fma(_2250, cbModelParam._m0[17u].y, _2249 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2251, cbModelParam._m0[18u].z, fma(_2250, cbModelParam._m0[18u].y, _2249 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2251, cbModelParam._m0[19u].z, fma(_2250, cbModelParam._m0[19u].y, _2249 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_24_49_ladder = _2373.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2373.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2373.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_24_49_ladder_2;
        _1497 = frontier_phi_24_49_ladder_1;
        _1499 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1512 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    float _1560 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1573 = _1560 / _1572;
    float _1574 = _1564 / _1572;
    float _1575 = _1568 / _1572;
    float _1722;
    float _1723;
    float _1724;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1602 = ((uint(_1575 > cbSceneParam._m0[59u].y) + uint(_1575 > cbSceneParam._m0[59u].x)) + uint(_1575 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1603 = _1602 + 43u;
        uint _1611 = _1602 + 44u;
        uint _1619 = _1602 + 45u;
        uint _1627 = _1602 + 46u;
        float _1638 = fma(_1572, cbSceneParam._m0[_1603].w, fma(_1568, cbSceneParam._m0[_1603].z, fma(_1564, cbSceneParam._m0[_1603].y, _1560 * cbSceneParam._m0[_1603].x)));
        float _1642 = fma(_1572, cbSceneParam._m0[_1611].w, fma(_1568, cbSceneParam._m0[_1611].z, fma(_1564, cbSceneParam._m0[_1611].y, _1560 * cbSceneParam._m0[_1611].x)));
        float _1650 = fma(_1572, cbSceneParam._m0[_1627].w, fma(_1568, cbSceneParam._m0[_1627].z, fma(_1564, cbSceneParam._m0[_1627].y, _1560 * cbSceneParam._m0[_1627].x)));
        float _1655 = cbSceneParam._m0[33u].z * _1650;
        float _1657 = cbSceneParam._m0[33u].w * _1650;
        float _1660 = fma(_1572, cbSceneParam._m0[_1619].w, fma(_1568, cbSceneParam._m0[_1619].z, fma(_1564, cbSceneParam._m0[_1619].y, _1560 * cbSceneParam._m0[_1619].x))) / _1650;
        float _1708 = (cbSceneParam._m0[33u].x - sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575))) * cbSceneParam._m0[33u].y;
        float _3991 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1715 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1655 + _1638) / _1650, (_1657 + _1642) / _1650), _1660), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1657 + _1638) / _1650, (_1642 - _1655) / _1650), _1660), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1638 - _1655) / _1650, (_1642 - _1657) / _1650), _1660), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1638 - _1657) / _1650, (_1655 + _1642) / _1650), _1660), 0.0)).x), vec4(0.25)));
        _1722 = 1.0 - (_1715 * cbSceneParam._m0[34u].x);
        _1723 = 1.0 - (_1715 * cbSceneParam._m0[34u].y);
        _1724 = 1.0 - (_1715 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1722 = 1.0;
        _1723 = 1.0;
        _1724 = 1.0;
    }
    float _1788;
    float _1790;
    float _1792;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1776 = fma(_1572, cbSceneParam._m0[63u].w, fma(_1568, cbSceneParam._m0[63u].z, fma(_1564, cbSceneParam._m0[63u].y, _1560 * cbSceneParam._m0[63u].x)));
        float _1777 = fma(_1572, cbSceneParam._m0[60u].w, fma(_1568, cbSceneParam._m0[60u].z, fma(_1564, cbSceneParam._m0[60u].y, _1560 * cbSceneParam._m0[60u].x))) / _1776;
        float _1778 = fma(_1572, cbSceneParam._m0[61u].w, fma(_1568, cbSceneParam._m0[61u].z, fma(_1564, cbSceneParam._m0[61u].y, _1560 * cbSceneParam._m0[61u].x))) / _1776;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1777 >= cbSceneParam._m0[64u].x) && (_1778 >= cbSceneParam._m0[64u].y)) && (_1777 <= cbSceneParam._m0[64u].z)) && (_1778 <= cbSceneParam._m0[64u].w))
        {
            float _1917 = fma(_1572, cbSceneParam._m0[62u].w, fma(_1568, cbSceneParam._m0[62u].z, fma(_1564, cbSceneParam._m0[62u].y, _1560 * cbSceneParam._m0[62u].x))) / _1776;
            float _1921 = isnan(cbSceneParam._m0[41u].w) ? _1917 : (isnan(_1917) ? cbSceneParam._m0[41u].w : max(_1917, cbSceneParam._m0[41u].w));
            float _1964 = (cbSceneParam._m0[33u].x - sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575))) * cbSceneParam._m0[33u].y;
            float _4007 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
            float _1971 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1777, cbSceneParam._m0[33u].w + _1778), _1921), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1777, _1778 - cbSceneParam._m0[33u].z), _1921), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1777 - cbSceneParam._m0[33u].z, _1778 - cbSceneParam._m0[33u].w), _1921), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1777 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1778), _1921), 0.0)).x), vec4(0.25)));
            float _1975 = 1.0 - (_1971 * cbSceneParam._m0[34u].x);
            float _1976 = 1.0 - (_1971 * cbSceneParam._m0[34u].y);
            float _1977 = 1.0 - (_1971 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1976) ? _1723 : (isnan(_1723) ? _1976 : min(_1723, _1976));
            frontier_phi_36_35_ladder_1 = isnan(_1977) ? _1724 : (isnan(_1724) ? _1977 : min(_1724, _1977));
            frontier_phi_36_35_ladder_2 = isnan(_1975) ? _1722 : (isnan(_1722) ? _1975 : min(_1722, _1975));
        }
        else
        {
            frontier_phi_36_35_ladder = _1723;
            frontier_phi_36_35_ladder_1 = _1724;
            frontier_phi_36_35_ladder_2 = _1722;
        }
        _1788 = frontier_phi_36_35_ladder_2;
        _1790 = frontier_phi_36_35_ladder;
        _1792 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1788 = _1722;
        _1790 = _1723;
        _1792 = _1724;
    }
    uvec4 _1797 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1799 = _1797.x * 14u;
    uint _1800 = _1799 + 13u;
    float _1807 = _490 + (-1.0);
    float _1812 = (cbLight._m0[_1800].x * _1807) + 1.0;
    float _1813 = (cbLight._m0[_1800].y * _1807) + 1.0;
    float _1814 = (cbLight._m0[_1800].z * _1807) + 1.0;
    float _1815 = (cbLight._m0[_1800].w * _1807) + 1.0;
    uint _1816 = _1799 + 5u;
    float _1822 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
    uint _1826 = _1799 + 4u;
    float _1836 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1840 = _1799 | 1u;
    float _1851 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_318, _319, _320));
    float _1854 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_318, _319, _320));
    float _4043 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _4054 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1859 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1861 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1868 = ((cbLight._m0[_1816].x * _1822) * _1861) + (((cbLight._m0[_1826].x * _1788) * _1836) * _1859);
    float _1869 = ((_1822 * cbLight._m0[_1816].y) * _1861) + (((cbLight._m0[_1826].y * _1790) * _1836) * _1859);
    float _1870 = ((_1822 * cbLight._m0[_1816].z) * _1861) + (((cbLight._m0[_1826].z * _1792) * _1836) * _1859);
    uvec4 _1874 = floatBitsToUint(cbLight._m0[_1799 + 12u]);
    bool _1876 = _1874.x == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1876)
    {
        _1978 = _1868;
        _1980 = _1869;
        _1982 = _1870;
    }
    else
    {
        uint _1986 = _1799 + 6u;
        float _2002 = (dot(vec3(cbLight._m0[_1799 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _4065 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2005 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1978 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1868;
        _1980 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1869;
        _1982 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1870;
    }
    bool _1985 = _1874.y == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_1985)
    {
        _2040 = _1978;
        _2042 = _1980;
        _2044 = _1982;
    }
    else
    {
        uint _2213 = _1799 + 7u;
        float _2229 = (dot(vec3(cbLight._m0[_1799 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _2230 = _2229 * _2229;
        float _4081 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2232 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _2040 = (((cbLight._m0[_2213].x * 0.3183098733425140380859375) * _2231) * _2232) + _1978;
        _2042 = (((cbLight._m0[_2213].y * 0.3183098733425140380859375) * _2231) * _2232) + _1980;
        _2044 = (((cbLight._m0[_2213].z * 0.3183098733425140380859375) * _2231) * _2232) + _1982;
    }
    uint _2047 = _1799 + 8u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _321) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1799].x + _400;
    float _2063 = cbLight._m0[_1799].y + _401;
    float _2064 = cbLight._m0[_1799].z + _402;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1799].xyz));
    float _4097 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2076 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2077 = dot(vec3(_318, _319, _320), vec3(_2069, _2070, _2071));
    float _4119 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_2069, _2070, _2071));
    float _4130 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2061 * _2061;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2097 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
    float _2098 = 0.959999978542327880859375 - _472;
    float _2100 = 0.959999978542327880859375 - _473;
    float _2101 = 0.959999978542327880859375 - _474;
    float _2108 = 1.0 - _2061;
    float _2119 = (0.5 / (((_2076 * ((_2075 * _2108) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2108) + _2061) * _2075))) * _2075;
    float _4141 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2121 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    uint _2135 = _1799 + 9u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _321) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1840].x + _400;
    float _2149 = cbLight._m0[_1840].y + _401;
    float _2150 = cbLight._m0[_1840].z + _402;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1840].xyz));
    float _4152 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2162 = dot(vec3(_318, _319, _320), vec3(_2155, _2156, _2157));
    float _4163 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2155, _2156, _2157));
    float _4174 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2147 * _2147;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _2188 = 1.0 - _2147;
    float _2198 = (0.5 / (((_2076 * ((_2161 * _2188) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2188) + _2147) * _2161))) * _2161;
    float _4185 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2200 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    float _2210 = (((((_2181 * _2098) + _475) * cbLight._m0[_2135].x) * _2200) * _1822) + ((((cbLight._m0[_2047].x * _1788) * ((_2097 * _2098) + _475)) * _2121) * _1836);
    float _2211 = (((((_2181 * _2100) + _477) * cbLight._m0[_2135].y) * _2200) * _1822) + ((((cbLight._m0[_2047].y * _1790) * ((_2097 * _2100) + _477)) * _2121) * _1836);
    float _2212 = (((((_2181 * _2101) + _478) * cbLight._m0[_2135].z) * _2200) * _1822) + ((((cbLight._m0[_2047].z * _1792) * ((_2097 * _2101) + _478)) * _2121) * _1836);
    float _2268;
    float _2270;
    float _2272;
    if (_1876)
    {
        _2268 = _2210;
        _2270 = _2211;
        _2272 = _2212;
    }
    else
    {
        uint _2274 = _1799 + 2u;
        uint _2278 = _1799 + 10u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _321) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _400;
        float _2295 = cbLight._m0[_2274].y + _401;
        float _2296 = cbLight._m0[_2274].z + _402;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2274].xyz));
        float _4196 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2308 = dot(vec3(_318, _319, _320), vec3(_2301, _2302, _2303));
        float _4207 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4218 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
        float _2334 = 1.0 - _2293;
        float _2344 = (0.5 / (((_2076 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2334) + _2293) * _2307))) * _2307;
        float _4229 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2268 = (((((_2327 * _2098) + _475) * cbLight._m0[_2278].x) * _2346) * _2347) + _2210;
        _2270 = (((((_2327 * _2100) + _477) * cbLight._m0[_2278].y) * _2346) * _2347) + _2211;
        _2272 = (((((_2327 * _2101) + _478) * cbLight._m0[_2278].z) * _2346) * _2347) + _2212;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_1985)
    {
        _2378 = _2268;
        _2380 = _2270;
        _2382 = _2272;
    }
    else
    {
        uint _2389 = _1799 + 3u;
        uint _2393 = _1799 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _321) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _400;
        float _2410 = cbLight._m0[_2389].y + _401;
        float _2411 = cbLight._m0[_2389].z + _402;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2389].xyz));
        float _4245 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2423 = dot(vec3(_318, _319, _320), vec3(_2416, _2417, _2418));
        float _4256 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4267 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2076 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2449) + _2408) * _2422))) * _2422;
        float _4278 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _2378 = (((((_2442 * _2098) + _475) * cbLight._m0[_2393].x) * _2461) * _2462) + _2268;
        _2380 = (((((_2442 * _2100) + _477) * cbLight._m0[_2393].y) * _2461) * _2462) + _2270;
        _2382 = (((((_2442 * _2101) + _478) * cbLight._m0[_2393].z) * _2461) * _2462) + _2272;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1797.y == 0u)
    {
        uvec4 _2483 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2484 = _2483.x;
        uint _2495 = uint((float(_2483.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2484))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2484)));
        float _2505 = (log2(_1575 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2506 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        uint _2509 = uint(isnan(14.0) ? _2506 : (isnan(_2506) ? 14.0 : min(_2506, 14.0)));
        uvec4 _2514 = texelFetch(g_lightClusterGridBuffer, int(((_2509 << 2u) + (_2495 << 6u)) >> 2u));
        uint _2515 = _2514.x;
        uint _2516 = _2483.z;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((((1u << ((_2516 >> 4u) & 15u)) + 4294967295u) & _2515) == 0u) || ((_2516 & 240u) == 0u))
        {
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
        }
        else
        {
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            uint _2782 = 0u;
            uint _2791;
            bool _2792;
            for (;;)
            {
                _2791 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                _2792 = _2791 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2792)
                {
                    frontier_phi_68_pred = _2781;
                    frontier_phi_68_pred_1 = _2780;
                    frontier_phi_68_pred_2 = _2779;
                    frontier_phi_68_pred_3 = _2777;
                    frontier_phi_68_pred_4 = _2776;
                    frontier_phi_68_pred_5 = _2778;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2791;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2782 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _1573;
                        float _2967 = _2926.y - _1574;
                        float _2968 = _2926.z - _1575;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_430, _433, _436), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4304 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _1573;
                        float _3002 = (-0.0) - _1574;
                        float _3003 = (-0.0) - _1575;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3017 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3018 = 1.0 - _506;
                        float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                        float _3026 = _3025 * _3025;
                        float _3027 = _3026 * _3026;
                        float _3028 = _3008 + _2973;
                        float _3029 = _3009 + _2974;
                        float _3030 = _3010 + _2975;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3038 = dot(vec3(_430, _433, _436), vec3(_3008, _3009, _3010));
                        float _4320 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3042 = dot(vec3(_430, _433, _436), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                        float _4331 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                        float _3050 = _2986 * _3026;
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _2976) + _3051;
                        float _4342 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3056 = 1.0 - _3026;
                        float _3066 = (0.5 / (((_3055 * ((_3041 * _3056) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3026) * _3041))) * _3055;
                        float _4353 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3077 = (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3049 * _3049) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2835 = (_2997 * _2945.x) + _2903;
                        _2836 = (_2997 * _2945.y) + _2904;
                        _2837 = (_2997 * _2945.z) + _2905;
                        _2832 = (_3077 * _2962.x) + _2900;
                        _2833 = (_3077 * _2962.y) + _2901;
                        _2834 = (_3077 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_68_pred = _2837;
                    frontier_phi_68_pred_1 = _2836;
                    frontier_phi_68_pred_2 = _2835;
                    frontier_phi_68_pred_3 = _2833;
                    frontier_phi_68_pred_4 = _2832;
                    frontier_phi_68_pred_5 = _2834;
                }
                _2634 = frontier_phi_68_pred;
                _2632 = frontier_phi_68_pred_1;
                _2630 = frontier_phi_68_pred_2;
                _2626 = frontier_phi_68_pred_3;
                _2624 = frontier_phi_68_pred_4;
                _2628 = frontier_phi_68_pred_5;
                uint _2783 = _2782 + 1u;
                if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2776 = _2624;
                    _2777 = _2626;
                    _2778 = _2628;
                    _2779 = _2630;
                    _2780 = _2632;
                    _2781 = _2634;
                    _2782 = _2783;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
        }
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.z;
        uint _2640 = (_2638 >> 8u) & 15u;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((4294967295u << _2640) & _2515) == 0u)
        {
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
            _2752 = _2631;
            _2754 = _2633;
        }
        else
        {
            float _2769 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
            float _2770 = _2769 * _1573;
            float _2771 = _2769 * _1574;
            float _2772 = _2769 * _1575;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2640 < ((_2638 >> 12u) & 15u))
            {
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2883 = _2623;
                float _2884 = _2625;
                float _2885 = _2627;
                float _2886 = _2629;
                float _2887 = _2631;
                float _2888 = _2633;
                uint _2889 = _2640;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2899)
                    {
                        frontier_phi_74_pred = _2885;
                        frontier_phi_74_pred_1 = _2884;
                        frontier_phi_74_pred_2 = _2883;
                        frontier_phi_74_pred_3 = _2888;
                        frontier_phi_74_pred_4 = _2887;
                        frontier_phi_74_pred_5 = _2886;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3095 = _2883;
                        float _3096 = _2884;
                        float _3097 = _2885;
                        float _3098 = _2886;
                        float _3099 = _2887;
                        float _3100 = _2888;
                        uint _3101 = _2898;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3171;
                        vec4 _3187;
                        float _3234;
                        bool _3235;
                        for (;;)
                        {
                            uint _3112 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3158 = (_3112 * 40u) + 16u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3174 = (_3112 * 40u) + 20u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3112 * 40u) + 24u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3209 = (_3112 * 40u) + 28u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3234 = fma(_1575, _3222.z, fma(_1574, _3222.y, _3222.x * _1573)) + _3222.w;
                            _3235 = !((fma(_1575, _3203.z, fma(_1574, _3203.y, _3203.x * _1573)) + _3203.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3235)
                            {
                                float _3262 = _3127.x - _1573;
                                float _3263 = _3127.y - _1574;
                                float _3264 = _3127.z - _1575;
                                float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                                float _3268 = inversesqrt(_3265);
                                float _3269 = _3268 * _3262;
                                float _3270 = _3268 * _3263;
                                float _3271 = _3268 * _3264;
                                float _3275 = 1.0 - (_3265 / (_3128 * _3128));
                                float _4364 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3280 = sqrt(_3265) * _3143.w;
                                float _3282 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                                float _3283 = _3282 * _3282;
                                float _3286 = ((1.0 - _3283) * dot(vec3(_3269, _3270, _3271), vec3(_430, _433, _436))) + _3283;
                                float _3289 = _3280 * _3280;
                                float _3293 = (fma(_1575, _3171.z, fma(_1574, _3171.y, _3171.x * _1573)) + _3171.w) / _3234;
                                float _3294 = (fma(_1575, _3187.z, fma(_1574, _3187.y, _3187.x * _1573)) + _3187.w) / _3234;
                                float _3298 = 1.0 - dot(vec2(_3293, _3294), vec2(_3293, _3294));
                                float _4380 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3300 = _3299 * (((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3276) / ((_3289 * 0.699999988079071044921875) + 1.0));
                                float _3312 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                                float _3313 = 1.0 - _506;
                                float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                                float _3321 = _3320 * _3320;
                                float _3322 = _3321 * _3321;
                                float _3323 = _3269 - _2770;
                                float _3324 = _3270 - _2771;
                                float _3325 = _3271 - _2772;
                                float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                                float _3333 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2770, (-0.0) - _2771, (-0.0) - _2772));
                                float _4391 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3337 = dot(vec3(_430, _433, _436), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                                float _4402 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                                float _3345 = _3282 * _3321;
                                float _3346 = _3345 * _3345;
                                float _3352 = ((1.0 - _3346) * dot(vec3(_430, _433, _436), vec3(_3269, _3270, _3271))) + _3346;
                                float _4413 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3354 = 1.0 - _3321;
                                float _3364 = (0.5 / (((_3353 * ((_3336 * _3354) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3321) * _3336))) * _3353;
                                float _4424 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3374 = (_3299 * _3276) * (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3344 * _3344) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3374 * _3155.z;
                                frontier_phi_80_pred_1 = _3374 * _3155.y;
                                frontier_phi_80_pred_2 = _3374 * _3155.x;
                                frontier_phi_80_pred_3 = _3300 * _3143.z;
                                frontier_phi_80_pred_4 = _3300 * _3143.y;
                                frontier_phi_80_pred_5 = _3300 * _3143.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3380 = frontier_phi_80_pred;
                            _3379 = frontier_phi_80_pred_1;
                            _3378 = frontier_phi_80_pred_2;
                            _3383 = frontier_phi_80_pred_3;
                            _3382 = frontier_phi_80_pred_4;
                            _3381 = frontier_phi_80_pred_5;
                            _3085 = _3381 + _3098;
                            _3086 = _3382 + _3099;
                            _3087 = _3383 + _3100;
                            _3082 = _3378 + _3095;
                            _3083 = _3379 + _3096;
                            _3084 = _3380 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3084;
                        frontier_phi_74_pred_1 = _3083;
                        frontier_phi_74_pred_2 = _3082;
                        frontier_phi_74_pred_3 = _3087;
                        frontier_phi_74_pred_4 = _3086;
                        frontier_phi_74_pred_5 = _3085;
                    }
                    _2749 = frontier_phi_74_pred;
                    _2747 = frontier_phi_74_pred_1;
                    _2745 = frontier_phi_74_pred_2;
                    _2755 = frontier_phi_74_pred_3;
                    _2753 = frontier_phi_74_pred_4;
                    _2751 = frontier_phi_74_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2745;
                        _2884 = _2747;
                        _2885 = _2749;
                        _2886 = _2751;
                        _2887 = _2753;
                        _2888 = _2755;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2753;
                frontier_phi_62_63_ladder_1 = _2751;
                frontier_phi_62_63_ladder_2 = _2749;
                frontier_phi_62_63_ladder_3 = _2755;
                frontier_phi_62_63_ladder_4 = _2747;
                frontier_phi_62_63_ladder_5 = _2745;
            }
            else
            {
                frontier_phi_62_63_ladder = _2631;
                frontier_phi_62_63_ladder_1 = _2629;
                frontier_phi_62_63_ladder_2 = _2627;
                frontier_phi_62_63_ladder_3 = _2633;
                frontier_phi_62_63_ladder_4 = _2625;
                frontier_phi_62_63_ladder_5 = _2623;
            }
            _2744 = frontier_phi_62_63_ladder_5;
            _2746 = frontier_phi_62_63_ladder_4;
            _2748 = frontier_phi_62_63_ladder_2;
            _2750 = frontier_phi_62_63_ladder_1;
            _2752 = frontier_phi_62_63_ladder;
            _2754 = frontier_phi_62_63_ladder_3;
        }
        float _2759 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2527 = (_2759 * _2750) + _2040;
        _2529 = (_2759 * _2752) + _2042;
        _2531 = (_2759 * _2754) + _2044;
        _2533 = ((_2744 * _475) * _2759) + _2378;
        _2535 = ((_2746 * _477) * _2759) + _2380;
        _2537 = ((_2748 * _478) * _2759) + _2382;
    }
    else
    {
        _2527 = _2040;
        _2529 = _2042;
        _2531 = _2044;
        _2533 = _2378;
        _2535 = _2380;
        _2537 = _2382;
    }
    uint _2543 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _2549 = (_297.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2543].x;
    float _2550 = (_297.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2543].y;
    float _2551 = (_297.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2543].z;
    float _4440 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4451 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4462 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2568 = (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2527 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _490))) + ((_2533 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + _2549;
    float _2570 = (_2550 + ((_2535 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2529 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _490)));
    float _2572 = (_2551 + ((_2537 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2531 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _490)));
    float _4488 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2585 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    uint _2586 = _449 + 6u;
    float _2594 = _408 / cbSceneParam._m0[86u].x;
    float _2595 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2609 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2611 = _2609.x;
    float _2612 = _2609.y;
    float _2613 = _2609.z;
    float _2614 = _2609.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2648 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2649 = _2648 / _341;
        float _2660 = _2649 * _393;
        float _2661 = _394 * _2649;
        float _2662 = (-0.0) - _2661;
        float _2663 = _2649 * _395;
        float _2665 = (cbSceneParam._m0[77u].w * _2662) / _2648;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2661;
        float _2673 = sqrt(((_2660 * _2660) + (_2661 * _2661)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2648)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2845;
        if (abs((_2662 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2845 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2805 = 1.0 / cbSceneParam._m0[80u].x;
            float _2806 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2807 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            _2845 = ((abs(_2673 / _2662) * cbSceneParam._m0[80u].y) * ((((_2816 - _2817) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))))) * _2805)) - ((exp2(_2683 * _2816) - exp2(_2683 * _2817)) * _2805))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2847 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, 1.0), 0.0);
        float _2856 = exp2((_2845 * (-1.44269502162933349609375)) * (1.0 - _2847.w));
        float _2857 = log2(_2856);
        float _2873 = log2(_2614);
        _2685 = (exp2(_2873 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].x)) * _2847.x) / cbSceneParam._m0[78u].x)) + _2611;
        _2687 = (exp2(_2873 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].y)) * _2847.y) / cbSceneParam._m0[78u].y)) + _2612;
        _2689 = (exp2(_2873 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].z)) * _2847.z) / cbSceneParam._m0[78u].z)) + _2613;
        _2691 = _2856 * _2614;
    }
    else
    {
        _2685 = _2611;
        _2687 = _2612;
        _2689 = _2613;
        _2691 = _2614;
    }
    float _2703 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2704 = _2703 == 3.0;
    float _2705 = log2(_2691);
    float _2709 = exp2(_2705 * cbSceneParam._m0[78u].x);
    float _2710 = exp2(_2705 * cbSceneParam._m0[78u].y);
    float _2711 = exp2(_2705 * cbSceneParam._m0[78u].z);
    float _2712 = _2709 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)));
    float _2713 = _2710 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0)));
    float _2714 = _2711 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)));
    float _2723 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2723 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.y = _2723 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.z = _2723 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.w = cbInstanceData._m0[_2586].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2549) * _2585) * _2709) * _2723;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2550) * _2585) * _2710) * _2723;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2551) * _2585) * _2711) * _2723;
    SV_Target_1.w = cbInstanceData._m0[_2586].w;
}


