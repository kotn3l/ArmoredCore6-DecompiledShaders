#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _863;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _229 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _229.x;
    float _233 = _229.y;
    float _234 = _229.z;
    vec4 _250 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _250.x + cbMtdParam._m0[9u].x;
    vec4 _265 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3262 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))));
    vec4 _295 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _305 = fma(_282, _213, fma(_275, _205 * TANGENT.x, (_191 * _184) * _273));
    float _308 = fma(_282, _214, fma(_275, _205 * TANGENT.y, (_191 * _185) * _273));
    float _311 = fma(_282, _215, fma(_275, _205 * TANGENT.z, (_191 * _186) * _273));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    float _316 = _315 * _305;
    float _317 = _315 * _308;
    float _318 = _315 * _311;
    float _3273 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _319 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3295 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3306 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3317 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _323 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _339 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _431 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _434 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = _447 + 9u;
    uint _450 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3328 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _462 = 1.0 - _323;
    float _463 = _459 * _462;
    float _464 = _460 * _462;
    float _465 = _461 * _462;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _323;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _323;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _323;
    float _473 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_316, _317, _318), vec3(_398, _399, _400));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _316) - _398;
    float _497 = (_492 * _317) - _399;
    float _498 = (_492 * _318) - _400;
    float _502 = abs(dot(vec3(_398, _399, _400), vec3(_316, _317, _318)));
    float _3361 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_319);
    float _517 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _523 = (1.0 - _517) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _524 = _517 * _504;
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _587 = fma(_560, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552));
        float _591 = fma(_560, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552));
        float _595 = fma(_560, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552));
        float _620 = _552 + _316;
        float _621 = _556 + _317;
        float _622 = _560 + _318;
        float _632 = fma(_622, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) - _587;
        float _633 = fma(_622, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) - _591;
        float _634 = fma(_622, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) - _595;
        float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
        float _651 = ((_638 * _632) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_638 * _633) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_638 * _634) / cbModelParam._m0[34u].z) + ((((((_595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_656.x + (-0.5));
        float _692 = _690 * (_656.y + (-0.5));
        float _693 = _690 * (_656.z + (-0.5));
        float _700 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_663.x + (-0.5));
        float _702 = _700 * (_663.y + (-0.5));
        float _703 = _700 * (_663.z + (-0.5));
        float _710 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_670.x + (-0.5));
        float _712 = _710 * (_670.y + (-0.5));
        float _713 = _710 * (_670.z + (-0.5));
        float _720 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_677.x + (-0.5));
        float _722 = _720 * (_677.y + (-0.5));
        float _723 = _720 * (_677.z + (-0.5));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = _691 * 0.5;
        float _728 = _701 * 0.5;
        float _729 = _711 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _744 = (dot(vec3(_316, _317, _318), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _754 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3409 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_756 + 1.0))) + _761) * _724;
        float _771 = _692 * 0.5;
        float _772 = _702 * 0.5;
        float _773 = _712 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_316, _317, _318), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3442 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_798 + 1.0))) + _803) * _725;
        float _813 = _693 * 0.5;
        float _814 = _703 * 0.5;
        float _815 = _713 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_316, _317, _318), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3475 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_840 + 1.0))) + _845) * _726;
        _862 = _693;
        _864 = _692;
        _865 = _691;
        _866 = _703;
        _867 = _702;
        _868 = _701;
        _869 = _713;
        _870 = _712;
        _871 = _711;
        _872 = _726;
        _873 = _725;
        _874 = _724;
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
    }
    else
    {
        _862 = _863;
        _864 = _863;
        _865 = _863;
        _866 = _863;
        _867 = _863;
        _868 = _863;
        _869 = _863;
        _870 = _863;
        _871 = _863;
        _872 = _863;
        _873 = _863;
        _874 = _863;
        _875 = 0.0;
        _876 = 0.0;
        _877 = 0.0;
    }
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = fma(_560, cbModelParam._m0[30u].z, fma(_556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _552));
        float _907 = fma(_560, cbModelParam._m0[31u].z, fma(_556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _552));
        float _911 = fma(_560, cbModelParam._m0[32u].z, fma(_556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _552));
        float _934 = _552 + _316;
        float _935 = _556 + _317;
        float _936 = _560 + _318;
        float _946 = fma(_936, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934)) - _903;
        float _947 = fma(_936, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934)) - _907;
        float _948 = fma(_936, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934)) - _911;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_903 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_907 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[35u].z) + ((((((_911 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_969.x + (-0.5));
        float _1004 = _1002 * (_969.y + (-0.5));
        float _1005 = _1002 * (_969.z + (-0.5));
        float _1012 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_976.x + (-0.5));
        float _1014 = _1012 * (_976.y + (-0.5));
        float _1015 = _1012 * (_976.z + (-0.5));
        float _1022 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_983.x + (-0.5));
        float _1024 = _1022 * (_983.y + (-0.5));
        float _1025 = _1022 * (_983.z + (-0.5));
        float _1032 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_990.x + (-0.5));
        float _1034 = _1032 * (_990.y + (-0.5));
        float _1035 = _1032 * (_990.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_316, _317, _318), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3538 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1066 + 1.0))) + _1071) * _1036;
        float _1081 = _1004 * 0.5;
        float _1082 = _1014 * 0.5;
        float _1083 = _1024 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_316, _317, _318), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3571 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1108 + 1.0))) + _1113) * _1037;
        float _1123 = _1005 * 0.5;
        float _1124 = _1015 * 0.5;
        float _1125 = _1025 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_316, _317, _318), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3604 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1150 + 1.0))) + _1155) * _1038;
        _1172 = _1005;
        _1173 = _1004;
        _1174 = _1003;
        _1175 = _1015;
        _1176 = _1014;
        _1177 = _1013;
        _1178 = _1025;
        _1179 = _1024;
        _1180 = _1023;
        _1181 = _1038;
        _1182 = _1037;
        _1183 = _1036;
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _863;
        _1173 = _863;
        _1174 = _863;
        _1175 = _863;
        _1176 = _863;
        _1177 = _863;
        _1178 = _863;
        _1179 = _863;
        _1180 = _863;
        _1181 = _863;
        _1182 = _863;
        _1183 = _863;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1219 = fma(_1198, cbSceneParam._m0[89u].z, fma(_1197, cbSceneParam._m0[89u].y, _1196 * cbSceneParam._m0[89u].x));
    float _1222 = fma(_1198, cbSceneParam._m0[90u].z, fma(_1197, cbSceneParam._m0[90u].y, _1196 * cbSceneParam._m0[90u].x));
    float _1225 = fma(_1198, cbSceneParam._m0[91u].z, fma(_1197, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1196));
    float _1240 = _496 * 0.5;
    float _1241 = _497 * 0.5;
    float _1242 = _498 * 0.5;
    float _1243 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1246 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1249 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1283;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1256 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_862, _866, _869, _872));
        float _1260 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_864, _867, _870, _873));
        float _1264 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_865, _868, _871, _874));
        float _1271 = dot(vec4(cbModelParam._m0[39u]), vec4(_1240, _1241, _1242, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1294;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1285 = dot(vec4(cbModelParam._m0[40u]), vec4(_1240, _1241, _1242, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1298 = (_1294 * cbModelParam._m0[1u].x) + (_1283 * (1.0 - cbModelParam._m0[1u].x));
    float _1308 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _319);
    float _1309 = isnan(_1308) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1308 : min(cbModelParam._m0[25u].z, _1308));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1358 = fma(_560, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552)) + cbModelParam._m0[13u].w;
        float _1362 = fma(_560, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552)) + cbModelParam._m0[14u].w;
        float _1366 = fma(_560, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552)) + cbModelParam._m0[15u].w;
        float _1369 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1372 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1375 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1403;
        if (_1369 > 0.0)
        {
            _1403 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1403 = frontier_phi_16_14_ladder;
        }
        float _1632;
        if (_1372 > 0.0)
        {
            _1632 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1632 = frontier_phi_25_21_ladder;
        }
        float _1889;
        if (_1375 > 0.0)
        {
            _1889 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1889 = frontier_phi_37_32_ladder;
        }
        float _1891 = isnan(_1632) ? _1403 : (isnan(_1403) ? _1632 : min(_1403, _1632));
        float _1892 = isnan(_1889) ? _1891 : (isnan(_1891) ? _1889 : min(_1891, _1889));
        float _1896 = (_1892 * _1369) + _1358;
        float _1897 = (_1892 * _1372) + _1362;
        float _1898 = (_1892 * _1375) + _1366;
        float _1899 = _1892 * 9.9999997473787516355514526367188e-05;
        float _1901 = (-1.0) - _1899;
        float _1903 = _1899 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1898 > _1903) || ((_1898 < _1901) || ((_1897 > _1903) || ((_1897 < _1901) || ((_1896 < _1901) || (_1896 > _1903))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1898, cbModelParam._m0[9u].z, fma(_1897, cbModelParam._m0[9u].y, _1896 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1898, cbModelParam._m0[10u].z, fma(_1897, cbModelParam._m0[10u].y, _1896 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1898, cbModelParam._m0[11u].z, fma(_1897, cbModelParam._m0[11u].y, _1896 * cbModelParam._m0[11u].x))), _1309);
            frontier_phi_15_37_ladder = _2026.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2026.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2026.x * cbModelParam._m0[1u].y;
        }
        _1391 = frontier_phi_15_37_ladder_2;
        _1393 = frontier_phi_15_37_ladder_1;
        _1395 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1309);
        _1391 = _1379.x * cbModelParam._m0[1u].y;
        _1393 = _1379.y * cbModelParam._m0[1u].y;
        _1395 = _1379.z * cbModelParam._m0[1u].y;
    }
    float _1399 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _319);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1399 : min(cbModelParam._m0[25u].w, _1399));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_560, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_560, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_560, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1471 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1474 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1637;
        if (_1468 > 0.0)
        {
            _1637 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1637 = frontier_phi_27_23_ladder;
        }
        float _1916;
        if (_1471 > 0.0)
        {
            _1916 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1916 = frontier_phi_39_34_ladder;
        }
        float _2129;
        if (_1474 > 0.0)
        {
            _2129 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2129 = frontier_phi_48_45_ladder;
        }
        float _2131 = isnan(_1916) ? _1637 : (isnan(_1637) ? _1916 : min(_1637, _1916));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1468) + _1457;
        float _2137 = (_2132 * _1471) + _1461;
        float _2138 = (_2132 * _1474) + _1465;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2139;
        float _2142 = _2139 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2138 > _2142) || ((_2138 < _2140) || ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 < _2140) || (_2136 > _2142))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2138, cbModelParam._m0[17u].z, fma(_2137, cbModelParam._m0[17u].y, _2136 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2138, cbModelParam._m0[18u].z, fma(_2137, cbModelParam._m0[18u].y, _2136 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2138, cbModelParam._m0[19u].z, fma(_2137, cbModelParam._m0[19u].y, _2136 * cbModelParam._m0[19u].x))), _1400);
            frontier_phi_24_48_ladder = _2365.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2365.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2365.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_24_48_ladder_2;
        _1495 = frontier_phi_24_48_ladder_1;
        _1497 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1400);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1510 = (((_523 * _473) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_523 * _475) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_523 * _476) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1517 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    vec4 _1531 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1533 = _1531.w;
    float _1545 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1533);
    float _1546 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1533);
    float _1547 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1533);
    uvec4 _1551 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1553 = _1551.x * 14u;
    uint _1554 = _1553 + 13u;
    float _1561 = _488 + (-1.0);
    float _1566 = (cbLight._m0[_1554].x * _1561) + 1.0;
    float _1567 = (cbLight._m0[_1554].y * _1561) + 1.0;
    float _1568 = (cbLight._m0[_1554].z * _1561) + 1.0;
    float _1569 = (cbLight._m0[_1554].w * _1561) + 1.0;
    uint _1570 = _1553 + 5u;
    float _1576 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1580 = _1553 + 4u;
    float _1590 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1594 = _1553 | 1u;
    float _1605 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_316, _317, _318));
    float _1608 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_316, _317, _318));
    float _3740 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _3751 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1613 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1615 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1622 = ((cbLight._m0[_1570].x * _1576) * _1615) + (((cbLight._m0[_1580].x * _1545) * _1590) * _1613);
    float _1623 = ((_1576 * cbLight._m0[_1570].y) * _1615) + (((cbLight._m0[_1580].y * _1546) * _1590) * _1613);
    float _1624 = ((_1576 * cbLight._m0[_1570].z) * _1615) + (((cbLight._m0[_1580].z * _1547) * _1590) * _1613);
    uvec4 _1629 = floatBitsToUint(cbLight._m0[_1553 + 12u]);
    bool _1631 = _1629.x == 0u;
    float _1642;
    float _1644;
    float _1646;
    if (_1631)
    {
        _1642 = _1622;
        _1644 = _1623;
        _1646 = _1624;
    }
    else
    {
        uint _1650 = _1553 + 6u;
        float _1666 = (dot(vec3(cbLight._m0[_1553 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1667 = _1666 * _1666;
        float _3762 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1669 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1642 = (((cbLight._m0[_1650].x * 0.3183098733425140380859375) * _1668) * _1669) + _1622;
        _1644 = (((cbLight._m0[_1650].y * 0.3183098733425140380859375) * _1668) * _1669) + _1623;
        _1646 = (((cbLight._m0[_1650].z * 0.3183098733425140380859375) * _1668) * _1669) + _1624;
    }
    bool _1649 = _1629.y == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1649)
    {
        _1687 = _1642;
        _1689 = _1644;
        _1691 = _1646;
    }
    else
    {
        uint _1860 = _1553 + 7u;
        float _1876 = (dot(vec3(cbLight._m0[_1553 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1877 = _1876 * _1876;
        float _3778 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1879 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1687 = (((cbLight._m0[_1860].x * 0.3183098733425140380859375) * _1878) * _1879) + _1642;
        _1689 = (((cbLight._m0[_1860].y * 0.3183098733425140380859375) * _1878) * _1879) + _1644;
        _1691 = (((cbLight._m0[_1860].z * 0.3183098733425140380859375) * _1878) * _1879) + _1646;
    }
    uint _1694 = _1553 + 8u;
    float _1707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _319) * 0.949999988079071044921875);
    float _1708 = _1707 * _1707;
    float _1709 = cbLight._m0[_1553].x + _398;
    float _1710 = cbLight._m0[_1553].y + _399;
    float _1711 = cbLight._m0[_1553].z + _400;
    float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
    float _1716 = _1715 * _1709;
    float _1717 = _1715 * _1710;
    float _1718 = _1715 * _1711;
    float _1719 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1553].xyz));
    float _3794 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1723 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1724 = dot(vec3(_316, _317, _318), vec3(_1716, _1717, _1718));
    float _3816 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1728 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1716, _1717, _1718));
    float _3827 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1732 = _1708 * _1708;
    float _1736 = ((_1727 * _1727) * (_1732 + (-1.0))) + 1.0;
    float _1744 = exp2(log2(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * 5.0);
    float _1745 = 0.959999978542327880859375 - _470;
    float _1747 = 0.959999978542327880859375 - _471;
    float _1748 = 0.959999978542327880859375 - _472;
    float _1755 = 1.0 - _1708;
    float _1766 = (0.5 / (((_1723 * ((_1722 * _1755) + _1708)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1755) + _1708) * _1722))) * _1722;
    float _3838 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1768 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1732 / ((_1736 * _1736) * 3.141590118408203125));
    uint _1782 = _1553 + 9u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _319) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1594].x + _398;
    float _1796 = cbLight._m0[_1594].y + _399;
    float _1797 = cbLight._m0[_1594].z + _400;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1594].xyz));
    float _3849 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1809 = dot(vec3(_316, _317, _318), vec3(_1802, _1803, _1804));
    float _3860 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1802, _1803, _1804));
    float _3871 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1794 * _1794;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1828 = exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * 5.0);
    float _1835 = 1.0 - _1794;
    float _1845 = (0.5 / (((_1723 * ((_1808 * _1835) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1835) + _1794) * _1808))) * _1808;
    float _3882 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1847 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    float _1857 = (((((_1828 * _1745) + _473) * cbLight._m0[_1782].x) * _1847) * _1576) + ((((cbLight._m0[_1694].x * _1545) * ((_1744 * _1745) + _473)) * _1768) * _1590);
    float _1858 = (((((_1828 * _1747) + _475) * cbLight._m0[_1782].y) * _1847) * _1576) + ((((cbLight._m0[_1694].y * _1546) * ((_1744 * _1747) + _475)) * _1768) * _1590);
    float _1859 = (((((_1828 * _1748) + _476) * cbLight._m0[_1782].z) * _1847) * _1576) + ((((cbLight._m0[_1694].z * _1547) * ((_1744 * _1748) + _476)) * _1768) * _1590);
    float _1921;
    float _1923;
    float _1925;
    if (_1631)
    {
        _1921 = _1857;
        _1923 = _1858;
        _1925 = _1859;
    }
    else
    {
        uint _1927 = _1553 + 2u;
        uint _1931 = _1553 + 10u;
        float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _319) * 0.949999988079071044921875);
        float _1946 = _1945 * _1945;
        float _1947 = cbLight._m0[_1927].x + _398;
        float _1948 = cbLight._m0[_1927].y + _399;
        float _1949 = cbLight._m0[_1927].z + _400;
        float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
        float _1954 = _1953 * _1947;
        float _1955 = _1953 * _1948;
        float _1956 = _1953 * _1949;
        float _1957 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1927].xyz));
        float _3893 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1960 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1961 = dot(vec3(_316, _317, _318), vec3(_1954, _1955, _1956));
        float _3904 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1964 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1965 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_1954, _1955, _1956));
        float _3915 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1969 = _1946 * _1946;
        float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
        float _1980 = exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0);
        float _1987 = 1.0 - _1946;
        float _1997 = (0.5 / (((_1723 * ((_1960 * _1987) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1987) + _1946) * _1960))) * _1960;
        float _3926 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1999 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
        float _2000 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1921 = (((((_1980 * _1745) + _473) * cbLight._m0[_1931].x) * _1999) * _2000) + _1857;
        _1923 = (((((_1980 * _1747) + _475) * cbLight._m0[_1931].y) * _1999) * _2000) + _1858;
        _1925 = (((((_1980 * _1748) + _476) * cbLight._m0[_1931].z) * _1999) * _2000) + _1859;
    }
    float _2035;
    float _2037;
    float _2039;
    if (_1649)
    {
        _2035 = _1921;
        _2037 = _1923;
        _2039 = _1925;
    }
    else
    {
        uint _2046 = _1553 + 3u;
        uint _2050 = _1553 + 11u;
        float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _319) * 0.949999988079071044921875);
        float _2065 = _2064 * _2064;
        float _2066 = cbLight._m0[_2046].x + _398;
        float _2067 = cbLight._m0[_2046].y + _399;
        float _2068 = cbLight._m0[_2046].z + _400;
        float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
        float _2073 = _2072 * _2066;
        float _2074 = _2072 * _2067;
        float _2075 = _2072 * _2068;
        float _2076 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2046].xyz));
        float _3942 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2080 = dot(vec3(_316, _317, _318), vec3(_2073, _2074, _2075));
        float _3953 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2084 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2073, _2074, _2075));
        float _3964 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2065 * _2065;
        float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
        float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0);
        float _2106 = 1.0 - _2065;
        float _2116 = (0.5 / (((_1723 * ((_2079 * _2106) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _2106) + _2065) * _2079))) * _2079;
        float _3975 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
        float _2119 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _2035 = (((((_2099 * _1745) + _473) * cbLight._m0[_2050].x) * _2118) * _2119) + _1921;
        _2037 = (((((_2099 * _1747) + _475) * cbLight._m0[_2050].y) * _2118) * _2119) + _1923;
        _2039 = (((((_2099 * _1748) + _476) * cbLight._m0[_2050].z) * _2118) * _2119) + _1925;
    }
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_1551.y == 0u)
    {
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2194;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2194;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2194;
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.x;
        uint _2221 = uint((float(_2209.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2210))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2210)));
        float _2231 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2232 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        uint _2235 = uint(isnan(14.0) ? _2232 : (isnan(_2232) ? 14.0 : min(_2232, 14.0)));
        uvec4 _2240 = texelFetch(g_lightClusterGridBuffer, int(((_2235 << 2u) + (_2221 << 6u)) >> 2u));
        uint _2241 = _2240.x;
        uint _2242 = _2209.z;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        if (((((1u << ((_2242 >> 4u) & 15u)) + 4294967295u) & _2241) == 0u) || ((_2242 & 240u) == 0u))
        {
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
        }
        else
        {
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            uint _2529 = 0u;
            uint _2538;
            bool _2539;
            for (;;)
            {
                _2538 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                _2539 = _2538 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2539)
                {
                    frontier_phi_63_pred = _2528;
                    frontier_phi_63_pred_1 = _2527;
                    frontier_phi_63_pred_2 = _2526;
                    frontier_phi_63_pred_3 = _2525;
                    frontier_phi_63_pred_4 = _2524;
                    frontier_phi_63_pred_5 = _2523;
                }
                else
                {
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    uint _2653;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2538;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    for (;;)
                    {
                        uint _2657 = uint(findLSB(_2653)) + (_2529 << 5u);
                        uint _2654 = (_2653 + 4294967295u) & _2653;
                        uint _2659 = _2657 * 48u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2679 = (_2657 * 48u) + 4u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2698 = (_2657 * 48u) + 8u;
                        vec3 _2709 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x));
                        float _2713 = _2673.x - _2195;
                        float _2714 = _2673.y - _2196;
                        float _2715 = _2673.z - _2197;
                        float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                        float _2719 = inversesqrt(_2716);
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2723 = dot(vec3(_428, _431, _434), vec3(_2720, _2721, _2722));
                        float _2728 = 1.0 - (_2716 * _2673.w);
                        float _4001 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2729 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2730 = sqrt(_2716) * _2692.w;
                        float _2733 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                        float _2734 = _2733 * _2733;
                        float _2737 = ((1.0 - _2734) * _2723) + _2734;
                        float _2740 = _2730 * _2730;
                        float _2744 = ((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2729) / ((_2740 * 0.699999988079071044921875) + 1.0);
                        float _2748 = (-0.0) - _2195;
                        float _2749 = (-0.0) - _2196;
                        float _2750 = (-0.0) - _2197;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2765 = exp2(log2(1.0 / ((_2740 * 3.5) + 5.0)) * 0.25);
                        float _2766 = 1.0 - _504;
                        float _2773 = sqrt(1.0 - ((1.0 - (_2766 * _2766)) * (1.0 - (_2765 * _2765))));
                        float _2774 = _2773 * _2773;
                        float _2775 = _2774 * _2774;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2778 = _2757 + _2722;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2786 = dot(vec3(_428, _431, _434), vec3(_2755, _2756, _2757));
                        float _4017 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2790 = dot(vec3(_428, _431, _434), vec3(_2782 * _2776, _2782 * _2777, _2782 * _2778));
                        float _4028 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2797 = ((_2793 * _2793) * (_2775 + (-1.0))) + 1.0;
                        float _2798 = _2733 * _2774;
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2723) + _2799;
                        float _4039 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2804 = 1.0 - _2774;
                        float _2814 = (0.5 / (((_2803 * ((_2789 * _2804) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2803 * _2804) + _2774) * _2789))) * _2803;
                        float _4050 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2825 = (((_2775 * 3.1415927410125732421875) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) / ((_2797 * _2797) * ((_2740 * 2.1991131305694580078125) + 3.141590118408203125))) * _2729;
                        _2582 = (_2744 * _2692.x) + _2650;
                        _2583 = (_2744 * _2692.y) + _2651;
                        _2584 = (_2744 * _2692.z) + _2652;
                        _2579 = (_2825 * _2709.x) + _2647;
                        _2580 = (_2825 * _2709.y) + _2648;
                        _2581 = (_2825 * _2709.z) + _2649;
                        if (_2654 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2654;
                        }
                    }
                    frontier_phi_63_pred = _2584;
                    frontier_phi_63_pred_1 = _2583;
                    frontier_phi_63_pred_2 = _2582;
                    frontier_phi_63_pred_3 = _2581;
                    frontier_phi_63_pred_4 = _2580;
                    frontier_phi_63_pred_5 = _2579;
                }
                _2381 = frontier_phi_63_pred;
                _2379 = frontier_phi_63_pred_1;
                _2377 = frontier_phi_63_pred_2;
                _2375 = frontier_phi_63_pred_3;
                _2373 = frontier_phi_63_pred_4;
                _2371 = frontier_phi_63_pred_5;
                uint _2530 = _2529 + 1u;
                if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2523 = _2371;
                    _2524 = _2373;
                    _2525 = _2375;
                    _2526 = _2377;
                    _2527 = _2379;
                    _2528 = _2381;
                    _2529 = _2530;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
        }
        uvec4 _2384 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2385 = _2384.z;
        uint _2387 = (_2385 >> 8u) & 15u;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((4294967295u << _2387) & _2241) == 0u)
        {
            _2491 = _2370;
            _2493 = _2372;
            _2495 = _2374;
            _2497 = _2376;
            _2499 = _2378;
            _2501 = _2380;
        }
        else
        {
            float _2516 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _2517 = _2516 * _2195;
            float _2518 = _2516 * _2196;
            float _2519 = _2516 * _2197;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2387 < ((_2385 >> 12u) & 15u))
            {
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2630 = _2370;
                float _2631 = _2372;
                float _2632 = _2374;
                float _2633 = _2376;
                float _2634 = _2378;
                float _2635 = _2380;
                uint _2636 = _2387;
                uint _2645;
                bool _2646;
                for (;;)
                {
                    _2645 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                    _2646 = _2645 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2646)
                    {
                        frontier_phi_69_pred = _2635;
                        frontier_phi_69_pred_1 = _2634;
                        frontier_phi_69_pred_2 = _2633;
                        frontier_phi_69_pred_3 = _2632;
                        frontier_phi_69_pred_4 = _2631;
                        frontier_phi_69_pred_5 = _2630;
                    }
                    else
                    {
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        uint _2849 = _2645;
                        uint _2850;
                        vec4 _2875;
                        float _2876;
                        vec4 _2891;
                        vec3 _2903;
                        vec4 _2919;
                        vec4 _2935;
                        float _2982;
                        bool _2983;
                        for (;;)
                        {
                            uint _2860 = ((_2636 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2849));
                            _2850 = (_2849 + 4294967295u) & _2849;
                            uint _2862 = _2860 * 40u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            _2876 = _2875.w;
                            uint _2878 = (_2860 * 40u) + 4u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2893 = (_2860 * 40u) + 8u;
                            _2903 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x));
                            uint _2906 = (_2860 * 40u) + 16u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2922 = (_2860 * 40u) + 20u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2938 = (_2860 * 40u) + 24u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2957 = (_2860 * 40u) + 28u;
                            vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2982 = fma(_2197, _2970.z, fma(_2196, _2970.y, _2970.x * _2195)) + _2970.w;
                            _2983 = !((fma(_2197, _2951.z, fma(_2196, _2951.y, _2951.x * _2195)) + _2951.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2983)
                            {
                                float _3010 = _2875.x - _2195;
                                float _3011 = _2875.y - _2196;
                                float _3012 = _2875.z - _2197;
                                float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                                float _3016 = inversesqrt(_3013);
                                float _3017 = _3016 * _3010;
                                float _3018 = _3016 * _3011;
                                float _3019 = _3016 * _3012;
                                float _3023 = 1.0 - (_3013 / (_2876 * _2876));
                                float _4061 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3028 = sqrt(_3013) * _2891.w;
                                float _3030 = 1.39999997615814208984375 / (_3028 + 1.39999997615814208984375);
                                float _3031 = _3030 * _3030;
                                float _3034 = ((1.0 - _3031) * dot(vec3(_3017, _3018, _3019), vec3(_428, _431, _434))) + _3031;
                                float _3037 = _3028 * _3028;
                                float _3041 = (fma(_2197, _2919.z, fma(_2196, _2919.y, _2919.x * _2195)) + _2919.w) / _2982;
                                float _3042 = (fma(_2197, _2935.z, fma(_2196, _2935.y, _2935.x * _2195)) + _2935.w) / _2982;
                                float _3046 = 1.0 - dot(vec2(_3041, _3042), vec2(_3041, _3042));
                                float _4077 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3048 = _3047 * (((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3024) / ((_3037 * 0.699999988079071044921875) + 1.0));
                                float _3060 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                                float _3061 = 1.0 - _504;
                                float _3068 = sqrt(1.0 - ((1.0 - (_3061 * _3061)) * (1.0 - (_3060 * _3060))));
                                float _3069 = _3068 * _3068;
                                float _3070 = _3069 * _3069;
                                float _3071 = _3017 - _2517;
                                float _3072 = _3018 - _2518;
                                float _3073 = _3019 - _2519;
                                float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                                float _3081 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2517, (-0.0) - _2518, (-0.0) - _2519));
                                float _4088 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3085 = dot(vec3(_428, _431, _434), vec3(_3077 * _3071, _3077 * _3072, _3077 * _3073));
                                float _4099 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3092 = ((_3088 * _3088) * (_3070 + (-1.0))) + 1.0;
                                float _3093 = _3030 * _3069;
                                float _3094 = _3093 * _3093;
                                float _3100 = ((1.0 - _3094) * dot(vec3(_428, _431, _434), vec3(_3017, _3018, _3019))) + _3094;
                                float _4110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3102 = 1.0 - _3069;
                                float _3112 = (0.5 / (((_3101 * ((_3084 * _3102) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_3101 * _3102) + _3069) * _3084))) * _3101;
                                float _4121 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3122 = (_3047 * _3024) * (((_3070 * 3.1415927410125732421875) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) / ((_3092 * _3092) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3048 * _2891.z;
                                frontier_phi_75_pred_1 = _3048 * _2891.y;
                                frontier_phi_75_pred_2 = _3048 * _2891.x;
                                frontier_phi_75_pred_3 = _3122 * _2903.z;
                                frontier_phi_75_pred_4 = _3122 * _2903.y;
                                frontier_phi_75_pred_5 = _3122 * _2903.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3131 = frontier_phi_75_pred;
                            _3130 = frontier_phi_75_pred_1;
                            _3129 = frontier_phi_75_pred_2;
                            _3128 = frontier_phi_75_pred_3;
                            _3127 = frontier_phi_75_pred_4;
                            _3126 = frontier_phi_75_pred_5;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            if (_2850 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2850;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2835;
                        frontier_phi_69_pred_1 = _2834;
                        frontier_phi_69_pred_2 = _2833;
                        frontier_phi_69_pred_3 = _2832;
                        frontier_phi_69_pred_4 = _2831;
                        frontier_phi_69_pred_5 = _2830;
                    }
                    _2502 = frontier_phi_69_pred;
                    _2500 = frontier_phi_69_pred_1;
                    _2498 = frontier_phi_69_pred_2;
                    _2496 = frontier_phi_69_pred_3;
                    _2494 = frontier_phi_69_pred_4;
                    _2492 = frontier_phi_69_pred_5;
                    uint _2637 = _2636 + 1u;
                    if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2630 = _2492;
                        _2631 = _2494;
                        _2632 = _2496;
                        _2633 = _2498;
                        _2634 = _2500;
                        _2635 = _2502;
                        _2636 = _2637;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2502;
                frontier_phi_57_58_ladder_1 = _2500;
                frontier_phi_57_58_ladder_2 = _2498;
                frontier_phi_57_58_ladder_3 = _2496;
                frontier_phi_57_58_ladder_4 = _2494;
                frontier_phi_57_58_ladder_5 = _2492;
            }
            else
            {
                frontier_phi_57_58_ladder = _2380;
                frontier_phi_57_58_ladder_1 = _2378;
                frontier_phi_57_58_ladder_2 = _2376;
                frontier_phi_57_58_ladder_3 = _2374;
                frontier_phi_57_58_ladder_4 = _2372;
                frontier_phi_57_58_ladder_5 = _2370;
            }
            _2491 = frontier_phi_57_58_ladder_5;
            _2493 = frontier_phi_57_58_ladder_4;
            _2495 = frontier_phi_57_58_ladder_3;
            _2497 = frontier_phi_57_58_ladder_2;
            _2499 = frontier_phi_57_58_ladder_1;
            _2501 = frontier_phi_57_58_ladder;
        }
        float _2506 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2253 = (_2506 * _2497) + _1687;
        _2255 = (_2506 * _2499) + _1689;
        _2257 = (_2506 * _2501) + _1691;
        _2259 = ((_2491 * _473) * _2506) + _2035;
        _2261 = ((_2493 * _475) * _2506) + _2037;
        _2263 = ((_2495 * _476) * _2506) + _2039;
    }
    else
    {
        _2253 = _1687;
        _2255 = _1689;
        _2257 = _1691;
        _2259 = _2035;
        _2261 = _2037;
        _2263 = _2039;
    }
    uint _2269 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _2275 = (_295.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2269].x;
    float _2276 = (_295.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2269].y;
    float _2277 = (_295.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2269].z;
    float _4137 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4148 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4159 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2294 = (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2253 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _488))) + ((_2259 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + _2275;
    float _2296 = (_2276 + ((_2261 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2255 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _488)));
    float _2298 = (_2277 + ((_2263 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2257 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _488)));
    float _4185 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2311 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    uint _2312 = _447 + 6u;
    float _2320 = _406 / cbSceneParam._m0[86u].x;
    float _2321 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2335 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2320, _2321, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2337 = _2335.x;
    float _2338 = _2335.y;
    float _2339 = _2335.z;
    float _2340 = _2335.w;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2395 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2396 = _2395 / _339;
        float _2407 = _2396 * _391;
        float _2408 = _392 * _2396;
        float _2409 = (-0.0) - _2408;
        float _2410 = _2396 * _393;
        float _2412 = (cbSceneParam._m0[77u].w * _2409) / _2395;
        float _2413 = _2412 + cbSceneParam._m0[79u].w;
        float _2414 = cbSceneParam._m0[79u].w - _2408;
        float _2420 = sqrt(((_2407 * _2407) + (_2408 * _2408)) + (_2410 * _2410));
        float _2423 = (1.0 - (cbSceneParam._m0[77u].w / _2395)) * _2420;
        float _2428 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2430 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2592;
        if (abs((_2409 - _2412) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2592 = ((((_2413 > 0.0) ? exp2(_2428 * _2413) : (2.0 - exp2(_2430 * _2413))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2423;
        }
        else
        {
            float _2552 = 1.0 / cbSceneParam._m0[80u].x;
            float _2553 = isnan(_2414) ? _2413 : (isnan(_2413) ? _2414 : max(_2413, _2414));
            float _2554 = isnan(_2414) ? _2413 : (isnan(_2413) ? _2414 : min(_2413, _2414));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            _2592 = ((abs(_2420 / _2409) * cbSceneParam._m0[80u].y) * ((((_2563 - _2564) * 2.0) - ((exp2(_2428 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)))) - exp2(_2428 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0))))) * _2552)) - ((exp2(_2430 * _2563) - exp2(_2430 * _2564)) * _2552))) + (_2423 * cbSceneParam._m0[80u].z);
        }
        vec4 _2594 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2320, _2321, 1.0), 0.0);
        float _2603 = exp2((_2592 * (-1.44269502162933349609375)) * (1.0 - _2594.w));
        float _2604 = log2(_2603);
        float _2620 = log2(_2340);
        _2432 = (exp2(_2620 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].x)) * _2594.x) / cbSceneParam._m0[78u].x)) + _2337;
        _2434 = (exp2(_2620 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].y)) * _2594.y) / cbSceneParam._m0[78u].y)) + _2338;
        _2436 = (exp2(_2620 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].z)) * _2594.z) / cbSceneParam._m0[78u].z)) + _2339;
        _2438 = _2603 * _2340;
    }
    else
    {
        _2432 = _2337;
        _2434 = _2338;
        _2436 = _2339;
        _2438 = _2340;
    }
    float _2450 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2451 = _2450 == 3.0;
    float _2452 = log2(_2438);
    float _2456 = exp2(_2452 * cbSceneParam._m0[78u].x);
    float _2457 = exp2(_2452 * cbSceneParam._m0[78u].y);
    float _2458 = exp2(_2452 * cbSceneParam._m0[78u].z);
    float _2459 = _2456 * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)));
    float _2460 = _2457 * (isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0)));
    float _2461 = _2458 * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)));
    float _2470 = (_2450 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2470 * (_2451 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.y = _2470 * (_2451 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.z = _2470 * (_2451 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.w = cbInstanceData._m0[_2312].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2275) * _2311) * _2456) * _2470;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2276) * _2311) * _2457) * _2470;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2277) * _2311) * _2458) * _2470;
    SV_Target_1.w = cbInstanceData._m0[_2312].w;
}


