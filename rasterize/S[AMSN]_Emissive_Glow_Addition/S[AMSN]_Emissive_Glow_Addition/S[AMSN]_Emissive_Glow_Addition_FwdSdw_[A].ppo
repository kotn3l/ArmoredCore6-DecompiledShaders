#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _910;
float _3622;
float _3623;
float _3624;
float _3625;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _235 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _235.x;
    float _239 = _235.y;
    float _240 = _235.z;
    vec4 _256 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _256.x + cbMtdParam._m0[9u].x;
    vec4 _271 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3634 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))));
    vec4 _301 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _311 = fma(_288, _219, fma(_281, _211 * TANGENT.x, (_197 * _190) * _279));
    float _314 = fma(_288, _220, fma(_281, _211 * TANGENT.y, (_197 * _191) * _279));
    float _317 = fma(_288, _221, fma(_281, _211 * TANGENT.z, (_197 * _192) * _279));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _3645 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _325 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3667 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3678 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3689 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _329 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _345 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _589 = sqrt(((_397 * _397) + (_398 * _398)) + (_399 * _399));
        float _595 = (cbMatDynParam._m0[5u].x * _589) + cbMatDynParam._m0[5u].y;
        float _3700 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _600 = (cbMatDynParam._m0[5u].z * _589) + cbMatDynParam._m0[5u].w;
        float _3711 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) - _596)) + _596) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _449 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _452 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3722 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _480 = 1.0 - _329;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _329;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _329;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _329;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD.z;
    float _507 = dot(vec3(_322, _323, _324), vec3(_404, _405, _406));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _322) - _404;
    float _515 = (_510 * _323) - _405;
    float _516 = (_510 * _324) - _406;
    float _520 = abs(dot(vec3(_404, _405, _406), vec3(_322, _323, _324)));
    float _3755 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_325);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _909;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _634 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _638 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _642 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _667 = _570 + _322;
        float _668 = _574 + _323;
        float _669 = _578 + _324;
        float _679 = fma(_669, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667)) - _634;
        float _680 = fma(_669, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667)) - _638;
        float _681 = fma(_669, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667)) - _642;
        float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
        float _698 = ((_685 * _679) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_634 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_685 * _680) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_638 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_685 * _681) / cbModelParam._m0[34u].z) + ((((((_642 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        float _737 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_703.x + (-0.5));
        float _739 = _737 * (_703.y + (-0.5));
        float _740 = _737 * (_703.z + (-0.5));
        float _747 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_710.x + (-0.5));
        float _749 = _747 * (_710.y + (-0.5));
        float _750 = _747 * (_710.z + (-0.5));
        float _757 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_717.x + (-0.5));
        float _759 = _757 * (_717.y + (-0.5));
        float _760 = _757 * (_717.z + (-0.5));
        float _767 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_724.x + (-0.5));
        float _769 = _767 * (_724.y + (-0.5));
        float _770 = _767 * (_724.z + (-0.5));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = _738 * 0.5;
        float _775 = _748 * 0.5;
        float _776 = _758 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _791 = (dot(vec3(_322, _323, _324), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _801 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3803 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_803 + 1.0))) + _808) * _771;
        float _818 = _739 * 0.5;
        float _819 = _749 * 0.5;
        float _820 = _759 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_322, _323, _324), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3836 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_845 + 1.0))) + _850) * _772;
        float _860 = _740 * 0.5;
        float _861 = _750 * 0.5;
        float _862 = _760 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_322, _323, _324), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3869 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_887 + 1.0))) + _892) * _773;
        _909 = _740;
        _911 = _739;
        _912 = _738;
        _913 = _750;
        _914 = _749;
        _915 = _748;
        _916 = _760;
        _917 = _759;
        _918 = _758;
        _919 = _773;
        _920 = _772;
        _921 = _771;
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
    }
    else
    {
        _909 = _910;
        _911 = _910;
        _912 = _910;
        _913 = _910;
        _914 = _910;
        _915 = _910;
        _916 = _910;
        _917 = _910;
        _918 = _910;
        _919 = _910;
        _920 = _910;
        _921 = _910;
        _922 = 0.0;
        _923 = 0.0;
        _924 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _957 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _961 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _984 = _570 + _322;
        float _985 = _574 + _323;
        float _986 = _578 + _324;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_322, _323, _324), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3932 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_322, _323, _324), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3965 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_322, _323, _324), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3998 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _910;
        _1223 = _910;
        _1224 = _910;
        _1225 = _910;
        _1226 = _910;
        _1227 = _910;
        _1228 = _910;
        _1229 = _910;
        _1230 = _910;
        _1231 = _910;
        _1232 = _910;
        _1233 = _910;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _923)) + _923;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _514 * 0.5;
    float _1291 = _515 * 0.5;
    float _1292 = _516 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_909, _913, _916, _919));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_911, _914, _917, _920));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _915, _918, _921));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1422 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1425 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1453 = frontier_phi_19_17_ladder;
        }
        float _1629;
        if (_1422 > 0.0)
        {
            _1629 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1629 = frontier_phi_28_24_ladder;
        }
        float _1925;
        if (_1425 > 0.0)
        {
            _1925 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1925 = frontier_phi_40_35_ladder;
        }
        float _1927 = isnan(_1629) ? _1453 : (isnan(_1453) ? _1629 : min(_1453, _1629));
        float _1928 = isnan(_1925) ? _1927 : (isnan(_1927) ? _1925 : min(_1927, _1925));
        float _1932 = (_1928 * _1419) + _1408;
        float _1933 = (_1928 * _1422) + _1412;
        float _1934 = (_1928 * _1425) + _1416;
        float _1935 = _1928 * 9.9999997473787516355514526367188e-05;
        float _1937 = (-1.0) - _1935;
        float _1939 = _1935 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1934 > _1939) || ((_1934 < _1937) || ((_1933 > _1939) || ((_1933 < _1937) || ((_1932 < _1937) || (_1932 > _1939))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1934, cbModelParam._m0[9u].z, fma(_1933, cbModelParam._m0[9u].y, _1932 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1934, cbModelParam._m0[10u].z, fma(_1933, cbModelParam._m0[10u].y, _1932 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1934, cbModelParam._m0[11u].z, fma(_1933, cbModelParam._m0[11u].y, _1932 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_18_40_ladder = _2079.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2079.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2079.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_18_40_ladder_2;
        _1443 = frontier_phi_18_40_ladder_1;
        _1445 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1521 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1524 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1634;
        if (_1518 > 0.0)
        {
            _1634 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1634 = frontier_phi_30_26_ladder;
        }
        float _1952;
        if (_1521 > 0.0)
        {
            _1952 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1952 = frontier_phi_42_37_ladder;
        }
        float _2290;
        if (_1524 > 0.0)
        {
            _2290 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2290 = frontier_phi_52_49_ladder;
        }
        float _2292 = isnan(_1952) ? _1634 : (isnan(_1634) ? _1952 : min(_1634, _1952));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1518) + _1507;
        float _2298 = (_2293 * _1521) + _1511;
        float _2299 = (_2293 * _1524) + _1515;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2300;
        float _2303 = _2300 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2299 > _2303) || ((_2299 < _2301) || ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 < _2301) || (_2297 > _2303))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2299, cbModelParam._m0[17u].z, fma(_2298, cbModelParam._m0[17u].y, _2297 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2299, cbModelParam._m0[18u].z, fma(_2298, cbModelParam._m0[18u].y, _2297 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2299, cbModelParam._m0[19u].z, fma(_2298, cbModelParam._m0[19u].y, _2297 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_27_52_ladder = _2421.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2421.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2421.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_27_52_ladder_2;
        _1545 = frontier_phi_27_52_ladder_1;
        _1547 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    float _1608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1612 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1621 = _1608 / _1620;
    float _1622 = _1612 / _1620;
    float _1623 = _1616 / _1620;
    float _1770;
    float _1771;
    float _1772;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1650 = ((uint(_1623 > cbSceneParam._m0[59u].y) + uint(_1623 > cbSceneParam._m0[59u].x)) + uint(_1623 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1651 = _1650 + 43u;
        uint _1659 = _1650 + 44u;
        uint _1667 = _1650 + 45u;
        uint _1675 = _1650 + 46u;
        float _1686 = fma(_1620, cbSceneParam._m0[_1651].w, fma(_1616, cbSceneParam._m0[_1651].z, fma(_1612, cbSceneParam._m0[_1651].y, _1608 * cbSceneParam._m0[_1651].x)));
        float _1690 = fma(_1620, cbSceneParam._m0[_1659].w, fma(_1616, cbSceneParam._m0[_1659].z, fma(_1612, cbSceneParam._m0[_1659].y, _1608 * cbSceneParam._m0[_1659].x)));
        float _1698 = fma(_1620, cbSceneParam._m0[_1675].w, fma(_1616, cbSceneParam._m0[_1675].z, fma(_1612, cbSceneParam._m0[_1675].y, _1608 * cbSceneParam._m0[_1675].x)));
        float _1703 = cbSceneParam._m0[33u].z * _1698;
        float _1705 = cbSceneParam._m0[33u].w * _1698;
        float _1708 = fma(_1620, cbSceneParam._m0[_1667].w, fma(_1616, cbSceneParam._m0[_1667].z, fma(_1612, cbSceneParam._m0[_1667].y, _1608 * cbSceneParam._m0[_1667].x))) / _1698;
        float _1756 = (cbSceneParam._m0[33u].x - sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623))) * cbSceneParam._m0[33u].y;
        float _4124 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1763 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 + _1686) / _1698, (_1705 + _1690) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1705 + _1686) / _1698, (_1690 - _1703) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 - _1703) / _1698, (_1690 - _1705) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 - _1705) / _1698, (_1703 + _1690) / _1698), _1708), 0.0)).x), vec4(0.25)));
        _1770 = 1.0 - (_1763 * cbSceneParam._m0[34u].x);
        _1771 = 1.0 - (_1763 * cbSceneParam._m0[34u].y);
        _1772 = 1.0 - (_1763 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1770 = 1.0;
        _1771 = 1.0;
        _1772 = 1.0;
    }
    float _1836;
    float _1838;
    float _1840;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1824 = fma(_1620, cbSceneParam._m0[63u].w, fma(_1616, cbSceneParam._m0[63u].z, fma(_1612, cbSceneParam._m0[63u].y, _1608 * cbSceneParam._m0[63u].x)));
        float _1825 = fma(_1620, cbSceneParam._m0[60u].w, fma(_1616, cbSceneParam._m0[60u].z, fma(_1612, cbSceneParam._m0[60u].y, _1608 * cbSceneParam._m0[60u].x))) / _1824;
        float _1826 = fma(_1620, cbSceneParam._m0[61u].w, fma(_1616, cbSceneParam._m0[61u].z, fma(_1612, cbSceneParam._m0[61u].y, _1608 * cbSceneParam._m0[61u].x))) / _1824;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1825 >= cbSceneParam._m0[64u].x) && (_1826 >= cbSceneParam._m0[64u].y)) && (_1825 <= cbSceneParam._m0[64u].z)) && (_1826 <= cbSceneParam._m0[64u].w))
        {
            float _1965 = fma(_1620, cbSceneParam._m0[62u].w, fma(_1616, cbSceneParam._m0[62u].z, fma(_1612, cbSceneParam._m0[62u].y, _1608 * cbSceneParam._m0[62u].x))) / _1824;
            float _1969 = isnan(cbSceneParam._m0[41u].w) ? _1965 : (isnan(_1965) ? cbSceneParam._m0[41u].w : max(_1965, cbSceneParam._m0[41u].w));
            float _2012 = (cbSceneParam._m0[33u].x - sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623))) * cbSceneParam._m0[33u].y;
            float _4140 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
            float _2019 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1825, cbSceneParam._m0[33u].w + _1826), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1825, _1826 - cbSceneParam._m0[33u].z), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1825 - cbSceneParam._m0[33u].z, _1826 - cbSceneParam._m0[33u].w), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1825 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1826), _1969), 0.0)).x), vec4(0.25)));
            float _2023 = 1.0 - (_2019 * cbSceneParam._m0[34u].x);
            float _2024 = 1.0 - (_2019 * cbSceneParam._m0[34u].y);
            float _2025 = 1.0 - (_2019 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2024) ? _1771 : (isnan(_1771) ? _2024 : min(_1771, _2024));
            frontier_phi_39_38_ladder_1 = isnan(_2023) ? _1770 : (isnan(_1770) ? _2023 : min(_1770, _2023));
            frontier_phi_39_38_ladder_2 = isnan(_2025) ? _1772 : (isnan(_1772) ? _2025 : min(_1772, _2025));
        }
        else
        {
            frontier_phi_39_38_ladder = _1771;
            frontier_phi_39_38_ladder_1 = _1770;
            frontier_phi_39_38_ladder_2 = _1772;
        }
        _1836 = frontier_phi_39_38_ladder_1;
        _1838 = frontier_phi_39_38_ladder;
        _1840 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1836 = _1770;
        _1838 = _1771;
        _1840 = _1772;
    }
    uvec4 _1845 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1847 = _1845.x * 14u;
    uint _1848 = _1847 + 13u;
    float _1855 = _506 + (-1.0);
    float _1860 = (cbLight._m0[_1848].x * _1855) + 1.0;
    float _1861 = (cbLight._m0[_1848].y * _1855) + 1.0;
    float _1862 = (cbLight._m0[_1848].z * _1855) + 1.0;
    float _1863 = (cbLight._m0[_1848].w * _1855) + 1.0;
    uint _1864 = _1847 + 5u;
    float _1870 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1874 = _1847 + 4u;
    float _1884 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1888 = _1847 | 1u;
    float _1899 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_322, _323, _324));
    float _1902 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_322, _323, _324));
    float _4176 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _4187 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1907 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1909 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1916 = ((cbLight._m0[_1864].x * _1870) * _1909) + (((cbLight._m0[_1874].x * _1836) * _1884) * _1907);
    float _1917 = ((_1870 * cbLight._m0[_1864].y) * _1909) + (((cbLight._m0[_1874].y * _1838) * _1884) * _1907);
    float _1918 = ((_1870 * cbLight._m0[_1864].z) * _1909) + (((cbLight._m0[_1874].z * _1840) * _1884) * _1907);
    uvec4 _1922 = floatBitsToUint(cbLight._m0[_1847 + 12u]);
    bool _1924 = _1922.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1924)
    {
        _2026 = _1916;
        _2028 = _1917;
        _2030 = _1918;
    }
    else
    {
        uint _2034 = _1847 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1847 + 2u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4198 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2053 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _1916;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _1917;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _1918;
    }
    bool _2033 = _1922.y == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2033)
    {
        _2088 = _2026;
        _2090 = _2028;
        _2092 = _2030;
    }
    else
    {
        uint _2261 = _1847 + 7u;
        float _2277 = (dot(vec3(cbLight._m0[_1847 + 3u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4214 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2280 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2088 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2026;
        _2090 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2028;
        _2092 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2030;
    }
    uint _2095 = _1847 + 8u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _325) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1847].x + _404;
    float _2111 = cbLight._m0[_1847].y + _405;
    float _2112 = cbLight._m0[_1847].z + _406;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1847].xyz));
    float _4230 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2124 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2125 = dot(vec3(_322, _323, _324), vec3(_2117, _2118, _2119));
    float _4252 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2117, _2118, _2119));
    float _4263 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2109 * _2109;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
    float _2146 = 0.959999978542327880859375 - _488;
    float _2148 = 0.959999978542327880859375 - _489;
    float _2149 = 0.959999978542327880859375 - _490;
    float _2156 = 1.0 - _2109;
    float _2167 = (0.5 / (((_2124 * ((_2123 * _2156) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2156) + _2109) * _2123))) * _2123;
    float _4274 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    uint _2183 = _1847 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _325) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_1888].x + _404;
    float _2197 = cbLight._m0[_1888].y + _405;
    float _2198 = cbLight._m0[_1888].z + _406;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1888].xyz));
    float _4285 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2210 = dot(vec3(_322, _323, _324), vec3(_2203, _2204, _2205));
    float _4296 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2203, _2204, _2205));
    float _4307 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
    float _2236 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2124 * ((_2209 * _2236) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2236) + _2195) * _2209))) * _2209;
    float _4318 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2258 = (((((_2229 * _2146) + _491) * cbLight._m0[_2183].x) * _2248) * _1870) + ((((cbLight._m0[_2095].x * _1836) * ((_2145 * _2146) + _491)) * _2169) * _1884);
    float _2259 = (((((_2229 * _2148) + _493) * cbLight._m0[_2183].y) * _2248) * _1870) + ((((cbLight._m0[_2095].y * _1838) * ((_2145 * _2148) + _493)) * _2169) * _1884);
    float _2260 = (((((_2229 * _2149) + _494) * cbLight._m0[_2183].z) * _2248) * _1870) + ((((cbLight._m0[_2095].z * _1840) * ((_2145 * _2149) + _494)) * _2169) * _1884);
    float _2316;
    float _2318;
    float _2320;
    if (_1924)
    {
        _2316 = _2258;
        _2318 = _2259;
        _2320 = _2260;
    }
    else
    {
        uint _2322 = _1847 + 2u;
        uint _2326 = _1847 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _325) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _404;
        float _2343 = cbLight._m0[_2322].y + _405;
        float _2344 = cbLight._m0[_2322].z + _406;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2322].xyz));
        float _4329 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2356 = dot(vec3(_322, _323, _324), vec3(_2349, _2350, _2351));
        float _4340 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4351 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_2124 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2382) + _2341) * _2355))) * _2355;
        float _4362 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2316 = (((((_2375 * _2146) + _491) * cbLight._m0[_2326].x) * _2394) * _2395) + _2258;
        _2318 = (((((_2375 * _2148) + _493) * cbLight._m0[_2326].y) * _2394) * _2395) + _2259;
        _2320 = (((((_2375 * _2149) + _494) * cbLight._m0[_2326].z) * _2394) * _2395) + _2260;
    }
    float _2426;
    float _2428;
    float _2430;
    if (_2033)
    {
        _2426 = _2316;
        _2428 = _2318;
        _2430 = _2320;
    }
    else
    {
        uint _2437 = _1847 + 3u;
        uint _2441 = _1847 + 11u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _325) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _404;
        float _2458 = cbLight._m0[_2437].y + _405;
        float _2459 = cbLight._m0[_2437].z + _406;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2437].xyz));
        float _4378 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2471 = dot(vec3(_322, _323, _324), vec3(_2464, _2465, _2466));
        float _4389 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4400 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
        float _2497 = 1.0 - _2456;
        float _2507 = (0.5 / (((_2124 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2497) + _2456) * _2470))) * _2470;
        float _4411 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2509 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2510 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2426 = (((((_2490 * _2146) + _491) * cbLight._m0[_2441].x) * _2509) * _2510) + _2316;
        _2428 = (((((_2490 * _2148) + _493) * cbLight._m0[_2441].y) * _2509) * _2510) + _2318;
        _2430 = (((((_2490 * _2149) + _494) * cbLight._m0[_2441].z) * _2509) * _2510) + _2320;
    }
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_1845.y == 0u)
    {
        uvec4 _2531 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2532 = _2531.x;
        uint _2543 = uint((float(_2531.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2532))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2532)));
        float _2553 = (log2(_1623 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2554 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        uint _2557 = uint(isnan(14.0) ? _2554 : (isnan(_2554) ? 14.0 : min(_2554, 14.0)));
        uvec4 _2562 = texelFetch(g_lightClusterGridBuffer, int(((_2557 << 2u) + (_2543 << 6u)) >> 2u));
        uint _2563 = _2562.x;
        uint _2564 = _2531.z;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((((1u << ((_2564 >> 4u) & 15u)) + 4294967295u) & _2563) == 0u) || ((_2564 & 240u) == 0u))
        {
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
        }
        else
        {
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            uint _2838 = 0u;
            uint _2847;
            bool _2848;
            for (;;)
            {
                _2847 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                _2848 = _2847 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2848)
                {
                    frontier_phi_73_pred = _2837;
                    frontier_phi_73_pred_1 = _2836;
                    frontier_phi_73_pred_2 = _2835;
                    frontier_phi_73_pred_3 = _2834;
                    frontier_phi_73_pred_4 = _2833;
                    frontier_phi_73_pred_5 = _2832;
                }
                else
                {
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    uint _2983;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2847;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    for (;;)
                    {
                        uint _2987 = uint(findLSB(_2983)) + (_2838 << 5u);
                        uint _2984 = (_2983 + 4294967295u) & _2983;
                        uint _2989 = _2987 * 48u;
                        vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 3u)).x));
                        uint _3009 = (_2987 * 48u) + 4u;
                        vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3028 = (_2987 * 48u) + 8u;
                        vec3 _3039 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x));
                        float _3043 = _3003.x - _1621;
                        float _3044 = _3003.y - _1622;
                        float _3045 = _3003.z - _1623;
                        float _3046 = dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045));
                        float _3049 = inversesqrt(_3046);
                        float _3050 = _3049 * _3043;
                        float _3051 = _3049 * _3044;
                        float _3052 = _3049 * _3045;
                        float _3053 = dot(vec3(_446, _449, _452), vec3(_3050, _3051, _3052));
                        float _3058 = 1.0 - (_3046 * _3003.w);
                        float _4437 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3060 = sqrt(_3046) * _3022.w;
                        float _3063 = 1.39999997615814208984375 / (_3060 + 1.39999997615814208984375);
                        float _3064 = _3063 * _3063;
                        float _3067 = ((1.0 - _3064) * _3053) + _3064;
                        float _3070 = _3060 * _3060;
                        float _3074 = ((isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))) * _3059) / ((_3070 * 0.699999988079071044921875) + 1.0);
                        float _3078 = (-0.0) - _1621;
                        float _3079 = (-0.0) - _1622;
                        float _3080 = (-0.0) - _1623;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3094 = exp2(log2(1.0 / ((_3070 * 3.5) + 5.0)) * 0.25);
                        float _3095 = 1.0 - _522;
                        float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                        float _3103 = _3102 * _3102;
                        float _3104 = _3103 * _3103;
                        float _3105 = _3085 + _3050;
                        float _3106 = _3086 + _3051;
                        float _3107 = _3087 + _3052;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3115 = dot(vec3(_446, _449, _452), vec3(_3085, _3086, _3087));
                        float _4453 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3119 = dot(vec3(_446, _449, _452), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                        float _4464 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                        float _3127 = _3063 * _3103;
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3053) + _3128;
                        float _4475 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3133 = 1.0 - _3103;
                        float _3143 = (0.5 / (((_3132 * ((_3118 * _3133) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3132 * _3133) + _3103) * _3118))) * _3132;
                        float _4486 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3154 = (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3126 * _3126) * ((_3070 * 2.1991131305694580078125) + 3.141590118408203125))) * _3059;
                        _2907 = (_3074 * _3022.x) + _2980;
                        _2908 = (_3074 * _3022.y) + _2981;
                        _2909 = (_3074 * _3022.z) + _2982;
                        _2904 = (_3154 * _3039.x) + _2977;
                        _2905 = (_3154 * _3039.y) + _2978;
                        _2906 = (_3154 * _3039.z) + _2979;
                        if (_2984 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2984;
                        }
                    }
                    frontier_phi_73_pred = _2909;
                    frontier_phi_73_pred_1 = _2908;
                    frontier_phi_73_pred_2 = _2907;
                    frontier_phi_73_pred_3 = _2906;
                    frontier_phi_73_pred_4 = _2905;
                    frontier_phi_73_pred_5 = _2904;
                }
                _2682 = frontier_phi_73_pred;
                _2680 = frontier_phi_73_pred_1;
                _2678 = frontier_phi_73_pred_2;
                _2676 = frontier_phi_73_pred_3;
                _2674 = frontier_phi_73_pred_4;
                _2672 = frontier_phi_73_pred_5;
                uint _2839 = _2838 + 1u;
                if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2832 = _2672;
                    _2833 = _2674;
                    _2834 = _2676;
                    _2835 = _2678;
                    _2836 = _2680;
                    _2837 = _2682;
                    _2838 = _2839;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
        }
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.z;
        uint _2688 = (_2686 >> 8u) & 15u;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((4294967295u << _2688) & _2563) == 0u)
        {
            _2800 = _2671;
            _2802 = _2673;
            _2804 = _2675;
            _2806 = _2677;
            _2808 = _2679;
            _2810 = _2681;
        }
        else
        {
            float _2825 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
            float _2826 = _2825 * _1621;
            float _2827 = _2825 * _1622;
            float _2828 = _2825 * _1623;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2688 < ((_2686 >> 12u) & 15u))
            {
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2960 = _2671;
                float _2961 = _2673;
                float _2962 = _2675;
                float _2963 = _2677;
                float _2964 = _2679;
                float _2965 = _2681;
                uint _2966 = _2688;
                uint _2975;
                bool _2976;
                for (;;)
                {
                    _2975 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2966 << 2u)) >> 2u)).x;
                    _2976 = _2975 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2976)
                    {
                        frontier_phi_84_pred = _2964;
                        frontier_phi_84_pred_1 = _2963;
                        frontier_phi_84_pred_2 = _2962;
                        frontier_phi_84_pred_3 = _2961;
                        frontier_phi_84_pred_4 = _2960;
                        frontier_phi_84_pred_5 = _2965;
                    }
                    else
                    {
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3181 = _2960;
                        float _3182 = _2961;
                        float _3183 = _2962;
                        float _3184 = _2963;
                        float _3185 = _2964;
                        float _3186 = _2965;
                        uint _3187 = _2975;
                        uint _3188;
                        vec4 _3213;
                        float _3214;
                        vec4 _3229;
                        vec3 _3241;
                        vec4 _3257;
                        vec4 _3273;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3198 = ((_2966 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3187));
                            _3188 = (_3187 + 4294967295u) & _3187;
                            uint _3200 = _3198 * 40u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3214 = _3213.w;
                            uint _3216 = (_3198 * 40u) + 4u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3198 * 40u) + 8u;
                            _3241 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x));
                            uint _3244 = (_3198 * 40u) + 16u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3260 = (_3198 * 40u) + 20u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3276 = (_3198 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3198 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_1623, _3308.z, fma(_1622, _3308.y, _3308.x * _1621)) + _3308.w;
                            _3321 = !((fma(_1623, _3289.z, fma(_1622, _3289.y, _3289.x * _1621)) + _3289.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3213.x - _1621;
                                float _3349 = _3213.y - _1622;
                                float _3350 = _3213.z - _1623;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3214 * _3214));
                                float _4497 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3366 = sqrt(_3351) * _3229.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_446, _449, _452))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_1623, _3257.z, fma(_1622, _3257.y, _3257.x * _1621)) + _3257.w) / _3320;
                                float _3380 = (fma(_1623, _3273.z, fma(_1622, _3273.y, _3273.x * _1621)) + _3273.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4513 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _522;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2826;
                                float _3410 = _3356 - _2827;
                                float _3411 = _3357 - _2828;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2826, (-0.0) - _2827, (-0.0) - _2828));
                                float _4524 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3423 = dot(vec3(_446, _449, _452), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4535 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_446, _449, _452), vec3(_3355, _3356, _3357))) + _3432;
                                float _4546 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4557 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3386 * _3229.y;
                                frontier_phi_90_pred_1 = _3386 * _3229.x;
                                frontier_phi_90_pred_2 = _3460 * _3241.z;
                                frontier_phi_90_pred_3 = _3460 * _3241.y;
                                frontier_phi_90_pred_4 = _3460 * _3241.x;
                                frontier_phi_90_pred_5 = _3386 * _3229.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3468 = frontier_phi_90_pred;
                            _3467 = frontier_phi_90_pred_1;
                            _3466 = frontier_phi_90_pred_2;
                            _3465 = frontier_phi_90_pred_3;
                            _3464 = frontier_phi_90_pred_4;
                            _3469 = frontier_phi_90_pred_5;
                            _3171 = _3467 + _3184;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            _3168 = _3464 + _3181;
                            _3169 = _3465 + _3182;
                            _3170 = _3466 + _3183;
                            if (_3188 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3188;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3172;
                        frontier_phi_84_pred_1 = _3171;
                        frontier_phi_84_pred_2 = _3170;
                        frontier_phi_84_pred_3 = _3169;
                        frontier_phi_84_pred_4 = _3168;
                        frontier_phi_84_pred_5 = _3173;
                    }
                    _2809 = frontier_phi_84_pred;
                    _2807 = frontier_phi_84_pred_1;
                    _2805 = frontier_phi_84_pred_2;
                    _2803 = frontier_phi_84_pred_3;
                    _2801 = frontier_phi_84_pred_4;
                    _2811 = frontier_phi_84_pred_5;
                    uint _2967 = _2966 + 1u;
                    if (_2967 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2960 = _2801;
                        _2961 = _2803;
                        _2962 = _2805;
                        _2963 = _2807;
                        _2964 = _2809;
                        _2965 = _2811;
                        _2966 = _2967;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2811;
                frontier_phi_65_66_ladder_1 = _2807;
                frontier_phi_65_66_ladder_2 = _2809;
                frontier_phi_65_66_ladder_3 = _2803;
                frontier_phi_65_66_ladder_4 = _2801;
                frontier_phi_65_66_ladder_5 = _2805;
            }
            else
            {
                frontier_phi_65_66_ladder = _2681;
                frontier_phi_65_66_ladder_1 = _2677;
                frontier_phi_65_66_ladder_2 = _2679;
                frontier_phi_65_66_ladder_3 = _2673;
                frontier_phi_65_66_ladder_4 = _2671;
                frontier_phi_65_66_ladder_5 = _2675;
            }
            _2800 = frontier_phi_65_66_ladder_4;
            _2802 = frontier_phi_65_66_ladder_3;
            _2804 = frontier_phi_65_66_ladder_5;
            _2806 = frontier_phi_65_66_ladder_1;
            _2808 = frontier_phi_65_66_ladder_2;
            _2810 = frontier_phi_65_66_ladder;
        }
        float _2815 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2575 = (_2815 * _2806) + _2088;
        _2577 = (_2815 * _2808) + _2090;
        _2579 = (_2815 * _2810) + _2092;
        _2581 = ((_2800 * _491) * _2815) + _2426;
        _2583 = ((_2802 * _493) * _2815) + _2428;
        _2585 = ((_2804 * _494) * _2815) + _2430;
    }
    else
    {
        _2575 = _2088;
        _2577 = _2090;
        _2579 = _2092;
        _2581 = _2426;
        _2583 = _2428;
        _2585 = _2430;
    }
    uint _2591 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _2597 = (_301.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2591].x;
    float _2598 = (_301.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2591].y;
    float _2599 = (_301.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2591].z;
    float _4573 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4584 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4595 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _2616 = (((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2575 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _506))) + ((_2581 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + _2597;
    float _2618 = (_2598 + ((_2583 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2577 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _506)));
    float _2620 = (_2599 + ((_2585 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2579 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _506)));
    float _2621 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2622 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2623 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2629 = cbMtdParam._m0[2u].x * _2597;
    float _2630 = cbMtdParam._m0[2u].y * _2598;
    float _2631 = cbMtdParam._m0[2u].z * _2599;
    float _4621 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2633 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    uint _2634 = _465 + 6u;
    float _2642 = _425 / cbSceneParam._m0[86u].x;
    float _2643 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2657 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2659 = _2657.x;
    float _2660 = _2657.y;
    float _2661 = _2657.z;
    float _2662 = _2657.w;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2696 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2697 = _2696 / _345;
        float _2708 = _2697 * _397;
        float _2709 = _398 * _2697;
        float _2710 = (-0.0) - _2709;
        float _2711 = _2697 * _399;
        float _2713 = (cbSceneParam._m0[77u].w * _2710) / _2696;
        float _2714 = _2713 + cbSceneParam._m0[79u].w;
        float _2715 = cbSceneParam._m0[79u].w - _2709;
        float _2721 = sqrt(((_2708 * _2708) + (_2709 * _2709)) + (_2711 * _2711));
        float _2724 = (1.0 - (cbSceneParam._m0[77u].w / _2696)) * _2721;
        float _2729 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2731 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2917;
        if (abs((_2710 - _2713) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2917 = ((((_2714 > 0.0) ? exp2(_2729 * _2714) : (2.0 - exp2(_2731 * _2714))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2724;
        }
        else
        {
            float _2861 = 1.0 / cbSceneParam._m0[80u].x;
            float _2862 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : max(_2714, _2715));
            float _2863 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : min(_2714, _2715));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            _2917 = ((abs(_2721 / _2710) * cbSceneParam._m0[80u].y) * ((((_2872 - _2873) * 2.0) - ((exp2(_2729 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0)))) - exp2(_2729 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))))) * _2861)) - ((exp2(_2731 * _2872) - exp2(_2731 * _2873)) * _2861))) + (_2724 * cbSceneParam._m0[80u].z);
        }
        vec4 _2919 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, 1.0), 0.0);
        float _2928 = exp2((_2917 * (-1.44269502162933349609375)) * (1.0 - _2919.w));
        float _2929 = log2(_2928);
        float _2945 = log2(_2662);
        _2733 = (exp2(_2945 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].x)) * _2919.x) / cbSceneParam._m0[78u].x)) + _2659;
        _2735 = (exp2(_2945 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].y)) * _2919.y) / cbSceneParam._m0[78u].y)) + _2660;
        _2737 = (exp2(_2945 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].z)) * _2919.z) / cbSceneParam._m0[78u].z)) + _2661;
        _2739 = _2928 * _2662;
    }
    else
    {
        _2733 = _2659;
        _2735 = _2660;
        _2737 = _2661;
        _2739 = _2662;
    }
    bool _2955;
    vec4 _2749;
    vec4 _2771;
    float _2773;
    float _2777;
    float _2778;
    float _2779;
    float _2782;
    float _2785;
    float _2788;
    float _2789;
    bool _2799;
    for (;;)
    {
        _2749 = cbMatDynParam._m0[0u];
        float _2751 = roundEven(_2749.y);
        bool _2752 = _2751 == 3.0;
        float _2753 = log2(_2739);
        float _2757 = exp2(_2753 * cbSceneParam._m0[78u].x);
        float _2758 = exp2(_2753 * cbSceneParam._m0[78u].y);
        float _2759 = exp2(_2753 * cbSceneParam._m0[78u].z);
        float _2760 = _2757 * _2621;
        float _2761 = _2758 * _2622;
        float _2762 = _2759 * _2623;
        float _2769 = _413 + (-0.5);
        _2771 = cbMtdParam._m0[1u];
        _2773 = _2771.y * _2769;
        float _2776 = (_2751 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2777 = _2776 * (_2752 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2733)));
        _2778 = _2776 * (_2752 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2735)));
        _2779 = _2776 * (_2752 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2737)));
        _2782 = ((_2629 * _2633) * _2757) * _2776;
        _2785 = ((_2630 * _2633) * _2758) * _2776;
        _2788 = ((_2631 * _2633) * _2759) * _2776;
        _2789 = _2769 * 0.999000012874603271484375;
        _2799 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2799)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2789) < 0.5)
            {
                _2955 = true;
                break;
            }
        }
        uint _2896 = _467 + uint(_2749.w);
        if ((cbInstanceData._m0[_2896].w < 1.0) && ((cbInstanceData._m0[_2896].w + _2789) < 0.5))
        {
            _2955 = true;
            break;
        }
        if ((_2773 + 1.0) < _2771.x)
        {
            _2955 = true;
            break;
        }
        _2955 = false;
        break;
    }
    float _3159;
    if (_2955)
    {
        discard_state = true;
        _3159 = 0.0;
    }
    else
    {
        _3159 = cbInstanceData._m0[_2634].w;
    }
    SV_Target.x = _2777;
    SV_Target.y = _2778;
    SV_Target.z = _2779;
    SV_Target.w = _3159;
    SV_Target_1.x = _2782;
    SV_Target_1.y = _2785;
    SV_Target_1.z = _2788;
    SV_Target_1.w = cbInstanceData._m0[_2634].w;
    discard_exit();
}


