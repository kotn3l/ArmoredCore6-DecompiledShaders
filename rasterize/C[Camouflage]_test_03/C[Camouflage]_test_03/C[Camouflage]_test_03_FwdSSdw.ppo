#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1043;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    vec4 _306 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _306.w;
    float _313 = _306.x * cbMtdParam._m0[9u].x;
    float _314 = _306.y * cbMtdParam._m0[9u].y;
    float _315 = _306.z * cbMtdParam._m0[9u].z;
    vec4 _331 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _334 = _331.x + cbMtdParam._m0[12u].w;
    vec4 _350 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _358 = (_350.x * 2.0) + (-1.0);
    float _360 = (_350.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3456 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _367 = sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))));
    float _370 = fma(_367, _229, fma(_360, _221 * TANGENT.x, (_207 * _199) * _358));
    float _373 = fma(_367, _230, fma(_360, _221 * TANGENT.y, (_207 * _200) * _358));
    float _376 = fma(_367, _231, fma(_360, _221 * TANGENT.z, (_207 * _201) * _358));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    float _381 = _380 * _370;
    float _382 = _380 * _373;
    float _383 = _380 * _376;
    float _384 = _350.z + cbMtdParam._m0[13u].x;
    float _395 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _396 = _395 * _286;
    float _397 = _395 * _287;
    float _398 = _395 * _288;
    float _402 = dot(vec4(_396, _397, _398, 0.0), vec4(_381, _382, _383, 0.0)) - cbMtdParam._m0[13u].y;
    float _3467 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _409 = exp2(log2(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _436 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _455 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _456 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _464 = (_455 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _381);
    float _465 = (_456 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _382);
    float _472 = isnan(cbInstanceData._m0[8u].x) ? _464 : (isnan(_464) ? cbInstanceData._m0[8u].x : max(_464, cbInstanceData._m0[8u].x));
    float _473 = isnan(cbInstanceData._m0[8u].y) ? _465 : (isnan(_465) ? cbInstanceData._m0[8u].y : max(_465, cbInstanceData._m0[8u].y));
    vec4 _477 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _472 : (isnan(_472) ? cbInstanceData._m0[8u].z : min(_472, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _473 : (isnan(_473) ? cbInstanceData._m0[8u].w : min(_473, cbInstanceData._m0[8u].w))));
    vec4 _502 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _505 = _502.x + cbMtdParam._m0[12u].x;
    float _506 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _507 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
    float _511 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _512 = _511 * _381;
    float _513 = _511 * _382;
    float _514 = _511 * _383;
    float _3513 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _515 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _516 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3546 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3557 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3568 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _520 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _536 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _538 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _540 = _538.w;
    float _561 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _564 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _567 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    vec4 _569 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _580 = (((_569.y - _516) + (_569.w * _516)) * cbMtdParam._m0[3u].x) + _516;
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = _593 + 9u;
    uint _595 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3579 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    vec4 _607 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _612 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _623 = (((_612.x - _520) + (_612.w * _520)) * cbMtdParam._m0[3u].x) + _520;
    float _636 = (cbMtdParam._m0[3u].x * (((_604 * _540) - _604) + _607.x)) + _604;
    float _637 = (cbMtdParam._m0[3u].x * (((_605 * _540) - _605) + _607.y)) + _605;
    float _638 = (cbMtdParam._m0[3u].x * (((_606 * _540) - _606) + _607.z)) + _606;
    float _639 = 1.0 - _623;
    float _640 = _639 * _636;
    float _641 = _639 * _637;
    float _642 = _639 * _638;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _623;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _623;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _623;
    float _650 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _455, cbSceneParam._m0[86u].y * _456));
    float _664 = _661.x * TEXCOORD_8;
    float _665 = dot(vec3(_512, _513, _514), vec3(_396, _397, _398));
    float _668 = _665 * 2.0;
    float _672 = (_668 * _512) - _396;
    float _673 = (_668 * _513) - _397;
    float _674 = (_668 * _514) - _398;
    float _678 = abs(dot(vec3(_396, _397, _398), vec3(_512, _513, _514)));
    float _3612 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _685 = sqrt(_580);
    float _697 = exp2((_685 * 5.0) * log2(1.0 - (_679 * 0.999000012874603271484375))) / (4.0 - (_685 * 3.0));
    float _703 = (1.0 - _697) * ((_685 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _704 = _697 * _685;
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_740, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732));
        float _771 = fma(_740, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732));
        float _775 = fma(_740, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732));
        float _800 = _732 + _512;
        float _801 = _736 + _513;
        float _802 = _740 + _514;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_512, _513, _514), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3660 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_512, _513, _514), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3693 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_512, _513, _514), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3726 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_740, cbModelParam._m0[30u].z, fma(_736, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _732));
        float _1087 = fma(_740, cbModelParam._m0[31u].z, fma(_736, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _732));
        float _1091 = fma(_740, cbModelParam._m0[32u].z, fma(_736, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _732));
        float _1114 = _732 + _512;
        float _1115 = _736 + _513;
        float _1116 = _740 + _514;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_512, _513, _514), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3789 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_512, _513, _514), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3822 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_512, _513, _514), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3855 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1043;
        _1353 = _1043;
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _672 * 0.5;
    float _1421 = _673 * 0.5;
    float _1422 = _674 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1537 = fma(_740, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732)) + cbModelParam._m0[13u].w;
        float _1541 = fma(_740, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732)) + cbModelParam._m0[14u].w;
        float _1545 = fma(_740, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732)) + cbModelParam._m0[15u].w;
        float _1548 = fma(_674, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _672));
        float _1551 = fma(_674, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _672));
        float _1554 = fma(_674, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _672));
        float _1582;
        if (_1548 > 0.0)
        {
            _1582 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1582 = frontier_phi_16_14_ladder;
        }
        float _1809;
        if (_1551 > 0.0)
        {
            _1809 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1809 = frontier_phi_25_21_ladder;
        }
        float _2066;
        if (_1554 > 0.0)
        {
            _2066 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2066 = frontier_phi_37_32_ladder;
        }
        float _2068 = isnan(_1809) ? _1582 : (isnan(_1582) ? _1809 : min(_1582, _1809));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1548) + _1537;
        float _2074 = (_2069 * _1551) + _1541;
        float _2075 = (_2069 * _1554) + _1545;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2076;
        float _2080 = _2076 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 > _2080) || ((_2074 < _2078) || ((_2073 < _2078) || (_2073 > _2080))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2203 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2075, cbModelParam._m0[9u].z, fma(_2074, cbModelParam._m0[9u].y, _2073 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2075, cbModelParam._m0[10u].z, fma(_2074, cbModelParam._m0[10u].y, _2073 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2075, cbModelParam._m0[11u].z, fma(_2074, cbModelParam._m0[11u].y, _2073 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_15_37_ladder = _2203.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2203.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2203.x * cbModelParam._m0[1u].y;
        }
        _1570 = frontier_phi_15_37_ladder_2;
        _1572 = frontier_phi_15_37_ladder_1;
        _1574 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_672, _673, _674), _1489);
        _1570 = _1558.x * cbModelParam._m0[1u].y;
        _1572 = _1558.y * cbModelParam._m0[1u].y;
        _1574 = _1558.z * cbModelParam._m0[1u].y;
    }
    float _1578 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1578 : min(cbModelParam._m0[25u].w, _1578));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_740, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_740, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_740, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_674, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _672));
        float _1650 = fma(_674, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _672));
        float _1653 = fma(_674, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _672));
        float _1814;
        if (_1647 > 0.0)
        {
            _1814 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1814 = frontier_phi_27_23_ladder;
        }
        float _2093;
        if (_1650 > 0.0)
        {
            _2093 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2093 = frontier_phi_39_34_ladder;
        }
        float _2306;
        if (_1653 > 0.0)
        {
            _2306 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2306 = frontier_phi_48_45_ladder;
        }
        float _2308 = isnan(_2093) ? _1814 : (isnan(_1814) ? _2093 : min(_1814, _2093));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1647) + _1636;
        float _2314 = (_2309 * _1650) + _1640;
        float _2315 = (_2309 * _1653) + _1644;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1579);
            frontier_phi_24_48_ladder = _2560.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2560.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_24_48_ladder_2;
        _1674 = frontier_phi_24_48_ladder_1;
        _1676 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_672, _673, _674), _1579);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1689 = (((_703 * _650) + _704) * _664) * ((cbModelParam._m0[1u].w * (_1672 - _1570)) + _1570);
    float _1691 = (((_703 * _652) + _704) * _664) * ((cbModelParam._m0[1u].w * (_1674 - _1572)) + _1572);
    float _1693 = (((_703 * _653) + _704) * _664) * ((cbModelParam._m0[1u].w * (_1676 - _1574)) + _1574);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    vec4 _1710 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_455, _456));
    float _1712 = _1710.w;
    float _1724 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1712);
    float _1725 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1712);
    float _1726 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1712);
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1740 = _664 + (-1.0);
    float _1745 = (cbLight._m0[_1733].x * _1740) + 1.0;
    float _1746 = (cbLight._m0[_1733].y * _1740) + 1.0;
    float _1747 = (cbLight._m0[_1733].z * _1740) + 1.0;
    float _1748 = (cbLight._m0[_1733].w * _1740) + 1.0;
    uint _1749 = _1732 + 5u;
    float _1755 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1759 = _1732 + 4u;
    float _1768 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1772 = _1732 | 1u;
    float _1783 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_512, _513, _514));
    float _1786 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_512, _513, _514));
    float _3991 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _4002 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1791 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1793 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.3183098733425140380859375;
    float _1800 = ((cbLight._m0[_1749].x * _1755) * _1793) + (((cbLight._m0[_1759].x * _1724) * _1768) * _1791);
    float _1801 = ((_1755 * cbLight._m0[_1749].y) * _1793) + (((cbLight._m0[_1759].y * _1725) * _1768) * _1791);
    float _1802 = ((_1755 * cbLight._m0[_1749].z) * _1793) + (((cbLight._m0[_1759].z * _1726) * _1768) * _1791);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1732 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1800;
        _1821 = _1801;
        _1823 = _1802;
    }
    else
    {
        uint _1827 = _1732 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1732 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _4013 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1846 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1802;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2037 = _1732 + 7u;
        float _2053 = (dot(vec3(cbLight._m0[_1732 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _4029 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2056 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1864 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _1819;
        _1866 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _1821;
        _1868 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _1823;
    }
    uint _1871 = _1732 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _580) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1732].x + _396;
    float _1887 = cbLight._m0[_1732].y + _397;
    float _1888 = cbLight._m0[_1732].z + _398;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1732].xyz));
    float _4045 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _1900 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1901 = dot(vec3(_512, _513, _514), vec3(_1893, _1894, _1895));
    float _4067 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1893, _1894, _1895));
    float _4078 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1921 = exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0);
    float _1922 = 0.959999978542327880859375 - _647;
    float _1924 = 0.959999978542327880859375 - _648;
    float _1925 = 0.959999978542327880859375 - _649;
    float _1932 = 1.0 - _1885;
    float _1943 = (0.5 / (((_1900 * ((_1899 * _1932) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1932) + _1885) * _1899))) * _1899;
    float _4089 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1959 = _1732 + 9u;
    float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _580) * 0.949999988079071044921875);
    float _1971 = _1970 * _1970;
    float _1972 = cbLight._m0[_1772].x + _396;
    float _1973 = cbLight._m0[_1772].y + _397;
    float _1974 = cbLight._m0[_1772].z + _398;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1979 = _1978 * _1972;
    float _1980 = _1978 * _1973;
    float _1981 = _1978 * _1974;
    float _1982 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1772].xyz));
    float _4100 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _1986 = dot(vec3(_512, _513, _514), vec3(_1979, _1980, _1981));
    float _4111 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1979, _1980, _1981));
    float _4122 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1971 * _1971;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
    float _2012 = 1.0 - _1971;
    float _2022 = (0.5 / (((_1900 * ((_1985 * _2012) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2012) + _1971) * _1985))) * _1985;
    float _4133 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2024 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    float _2034 = (((((_2005 * _1922) + _650) * cbLight._m0[_1959].x) * _2024) * _1755) + ((((cbLight._m0[_1871].x * _1724) * ((_1921 * _1922) + _650)) * _1945) * _1768);
    float _2035 = (((((_2005 * _1924) + _652) * cbLight._m0[_1959].y) * _2024) * _1755) + ((((cbLight._m0[_1871].y * _1725) * ((_1921 * _1924) + _652)) * _1945) * _1768);
    float _2036 = (((((_2005 * _1925) + _653) * cbLight._m0[_1959].z) * _2024) * _1755) + ((((cbLight._m0[_1871].z * _1726) * ((_1921 * _1925) + _653)) * _1945) * _1768);
    float _2098;
    float _2100;
    float _2102;
    if (_1808)
    {
        _2098 = _2034;
        _2100 = _2035;
        _2102 = _2036;
    }
    else
    {
        uint _2104 = _1732 + 2u;
        uint _2108 = _1732 + 10u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _580) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _396;
        float _2125 = cbLight._m0[_2104].y + _397;
        float _2126 = cbLight._m0[_2104].z + _398;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2104].xyz));
        float _4144 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2138 = dot(vec3(_512, _513, _514), vec3(_2131, _2132, _2133));
        float _4155 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4166 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2164 = 1.0 - _2123;
        float _2174 = (0.5 / (((_1900 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2164) + _2123) * _2137))) * _2137;
        float _4177 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2098 = (((((_2157 * _1922) + _650) * cbLight._m0[_2108].x) * _2176) * _2177) + _2034;
        _2100 = (((((_2157 * _1924) + _652) * cbLight._m0[_2108].y) * _2176) * _2177) + _2035;
        _2102 = (((((_2157 * _1925) + _653) * cbLight._m0[_2108].z) * _2176) * _2177) + _2036;
    }
    float _2212;
    float _2214;
    float _2216;
    if (_1826)
    {
        _2212 = _2098;
        _2214 = _2100;
        _2216 = _2102;
    }
    else
    {
        uint _2223 = _1732 + 3u;
        uint _2227 = _1732 + 11u;
        float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _580) * 0.949999988079071044921875);
        float _2242 = _2241 * _2241;
        float _2243 = cbLight._m0[_2223].x + _396;
        float _2244 = cbLight._m0[_2223].y + _397;
        float _2245 = cbLight._m0[_2223].z + _398;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2250 = _2249 * _2243;
        float _2251 = _2249 * _2244;
        float _2252 = _2249 * _2245;
        float _2253 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2223].xyz));
        float _4193 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2257 = dot(vec3(_512, _513, _514), vec3(_2250, _2251, _2252));
        float _4204 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2261 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2250, _2251, _2252));
        float _4215 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2265 = _2242 * _2242;
        float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
        float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2283 = 1.0 - _2242;
        float _2293 = (0.5 / (((_1900 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2283) + _2242) * _2256))) * _2256;
        float _4226 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2212 = (((((_2276 * _1922) + _650) * cbLight._m0[_2227].x) * _2295) * _2296) + _2098;
        _2214 = (((((_2276 * _1924) + _652) * cbLight._m0[_2227].y) * _2295) * _2296) + _2100;
        _2216 = (((((_2276 * _1925) + _653) * cbLight._m0[_2227].z) * _2295) * _2296) + _2102;
    }
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_1730.y == 0u)
    {
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2371;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2371;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2371;
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.x;
        uint _2398 = uint((float(_2386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _456) / _2387))) + floor(float(uint(cbSceneParam._m0[85u].x * _455) / _2387)));
        float _2408 = (log2(_2374 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2409 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        uint _2412 = uint(isnan(14.0) ? _2409 : (isnan(_2409) ? 14.0 : min(_2409, 14.0)));
        uvec4 _2417 = texelFetch(g_lightClusterGridBuffer, int(((_2412 << 2u) + (_2398 << 6u)) >> 2u));
        uint _2418 = _2417.x;
        uint _2419 = _2386.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2419 >> 4u) & 15u)) + 4294967295u) & _2418) == 0u) || ((_2419 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2733)
                {
                    frontier_phi_63_pred = _2722;
                    frontier_phi_63_pred_1 = _2721;
                    frontier_phi_63_pred_2 = _2720;
                    frontier_phi_63_pred_3 = _2719;
                    frontier_phi_63_pred_4 = _2718;
                    frontier_phi_63_pred_5 = _2717;
                }
                else
                {
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    uint _2847;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2732;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    for (;;)
                    {
                        uint _2851 = uint(findLSB(_2847)) + (_2723 << 5u);
                        uint _2848 = (_2847 + 4294967295u) & _2847;
                        uint _2853 = _2851 * 48u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 3u)).x));
                        uint _2873 = (_2851 * 48u) + 4u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 3u)).x));
                        uint _2892 = (_2851 * 48u) + 8u;
                        vec3 _2903 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x));
                        float _2907 = _2867.x - _2372;
                        float _2908 = _2867.y - _2373;
                        float _2909 = _2867.z - _2374;
                        float _2910 = dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909));
                        float _2913 = inversesqrt(_2910);
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2917 = dot(vec3(_561, _564, _567), vec3(_2914, _2915, _2916));
                        float _2922 = 1.0 - (_2910 * _2867.w);
                        float _4252 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2924 = sqrt(_2910) * _2886.w;
                        float _2927 = 1.39999997615814208984375 / (_2924 + 1.39999997615814208984375);
                        float _2928 = _2927 * _2927;
                        float _2931 = ((1.0 - _2928) * _2917) + _2928;
                        float _2934 = _2924 * _2924;
                        float _2938 = ((isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))) * _2923) / ((_2934 * 0.699999988079071044921875) + 1.0);
                        float _2942 = (-0.0) - _2372;
                        float _2943 = (-0.0) - _2373;
                        float _2944 = (-0.0) - _2374;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2959 = exp2(log2(1.0 / ((_2934 * 3.5) + 5.0)) * 0.25);
                        float _2960 = 1.0 - _685;
                        float _2967 = sqrt(1.0 - ((1.0 - (_2960 * _2960)) * (1.0 - (_2959 * _2959))));
                        float _2968 = _2967 * _2967;
                        float _2969 = _2968 * _2968;
                        float _2970 = _2949 + _2914;
                        float _2971 = _2950 + _2915;
                        float _2972 = _2951 + _2916;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2980 = dot(vec3(_561, _564, _567), vec3(_2949, _2950, _2951));
                        float _4268 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2984 = dot(vec3(_561, _564, _567), vec3(_2976 * _2970, _2976 * _2971, _2976 * _2972));
                        float _4279 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2987 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2991 = ((_2987 * _2987) * (_2969 + (-1.0))) + 1.0;
                        float _2992 = _2927 * _2968;
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2917) + _2993;
                        float _4290 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2997 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2998 = 1.0 - _2968;
                        float _3008 = (0.5 / (((_2997 * ((_2983 * _2998) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2997 * _2998) + _2968) * _2983))) * _2997;
                        float _4301 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3019 = (((_2969 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_2991 * _2991) * ((_2934 * 2.1991131305694580078125) + 3.141590118408203125))) * _2923;
                        _2776 = (_2938 * _2886.x) + _2844;
                        _2777 = (_2938 * _2886.y) + _2845;
                        _2778 = (_2938 * _2886.z) + _2846;
                        _2773 = (_3019 * _2903.x) + _2841;
                        _2774 = (_3019 * _2903.y) + _2842;
                        _2775 = (_3019 * _2903.z) + _2843;
                        if (_2848 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2848;
                        }
                    }
                    frontier_phi_63_pred = _2778;
                    frontier_phi_63_pred_1 = _2777;
                    frontier_phi_63_pred_2 = _2776;
                    frontier_phi_63_pred_3 = _2775;
                    frontier_phi_63_pred_4 = _2774;
                    frontier_phi_63_pred_5 = _2773;
                }
                _2576 = frontier_phi_63_pred;
                _2574 = frontier_phi_63_pred_1;
                _2572 = frontier_phi_63_pred_2;
                _2570 = frontier_phi_63_pred_3;
                _2568 = frontier_phi_63_pred_4;
                _2566 = frontier_phi_63_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2566;
                    _2718 = _2568;
                    _2719 = _2570;
                    _2720 = _2572;
                    _2721 = _2574;
                    _2722 = _2576;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2582) & _2418) == 0u)
        {
            _2685 = _2565;
            _2687 = _2567;
            _2689 = _2569;
            _2691 = _2571;
            _2693 = _2573;
            _2695 = _2575;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
            float _2711 = _2710 * _2372;
            float _2712 = _2710 * _2373;
            float _2713 = _2710 * _2374;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2824 = _2565;
                float _2825 = _2567;
                float _2826 = _2569;
                float _2827 = _2571;
                float _2828 = _2573;
                float _2829 = _2575;
                uint _2830 = _2582;
                uint _2839;
                bool _2840;
                for (;;)
                {
                    _2839 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                    _2840 = _2839 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2840)
                    {
                        frontier_phi_69_pred = _2829;
                        frontier_phi_69_pred_1 = _2828;
                        frontier_phi_69_pred_2 = _2827;
                        frontier_phi_69_pred_3 = _2826;
                        frontier_phi_69_pred_4 = _2825;
                        frontier_phi_69_pred_5 = _2824;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        uint _3043 = _2839;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3113;
                        vec4 _3129;
                        float _3176;
                        bool _3177;
                        for (;;)
                        {
                            uint _3054 = ((_2830 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3100 = (_3054 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3054 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3054 * 40u) + 24u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3151 = (_3054 * 40u) + 28u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3176 = fma(_2374, _3164.z, fma(_2373, _3164.y, _3164.x * _2372)) + _3164.w;
                            _3177 = !((fma(_2374, _3145.z, fma(_2373, _3145.y, _3145.x * _2372)) + _3145.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3177)
                            {
                                float _3204 = _3069.x - _2372;
                                float _3205 = _3069.y - _2373;
                                float _3206 = _3069.z - _2374;
                                float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                                float _3210 = inversesqrt(_3207);
                                float _3211 = _3210 * _3204;
                                float _3212 = _3210 * _3205;
                                float _3213 = _3210 * _3206;
                                float _3217 = 1.0 - (_3207 / (_3070 * _3070));
                                float _4312 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3222 = sqrt(_3207) * _3085.w;
                                float _3224 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                                float _3225 = _3224 * _3224;
                                float _3228 = ((1.0 - _3225) * dot(vec3(_3211, _3212, _3213), vec3(_561, _564, _567))) + _3225;
                                float _3231 = _3222 * _3222;
                                float _3235 = (fma(_2374, _3113.z, fma(_2373, _3113.y, _3113.x * _2372)) + _3113.w) / _3176;
                                float _3236 = (fma(_2374, _3129.z, fma(_2373, _3129.y, _3129.x * _2372)) + _3129.w) / _3176;
                                float _3240 = 1.0 - dot(vec2(_3235, _3236), vec2(_3235, _3236));
                                float _4328 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3242 = _3241 * (((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3218) / ((_3231 * 0.699999988079071044921875) + 1.0));
                                float _3254 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                                float _3255 = 1.0 - _685;
                                float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                                float _3263 = _3262 * _3262;
                                float _3264 = _3263 * _3263;
                                float _3265 = _3211 - _2711;
                                float _3266 = _3212 - _2712;
                                float _3267 = _3213 - _2713;
                                float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                                float _3275 = dot(vec3(_561, _564, _567), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4339 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3279 = dot(vec3(_561, _564, _567), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                                float _4350 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                                float _3287 = _3224 * _3263;
                                float _3288 = _3287 * _3287;
                                float _3294 = ((1.0 - _3288) * dot(vec3(_561, _564, _567), vec3(_3211, _3212, _3213))) + _3288;
                                float _4361 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3296 = 1.0 - _3263;
                                float _3306 = (0.5 / (((_3295 * ((_3278 * _3296) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3263) * _3278))) * _3295;
                                float _4372 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3316 = (_3241 * _3218) * (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3286 * _3286) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3242 * _3085.z;
                                frontier_phi_75_pred_1 = _3242 * _3085.y;
                                frontier_phi_75_pred_2 = _3242 * _3085.x;
                                frontier_phi_75_pred_3 = _3316 * _3097.z;
                                frontier_phi_75_pred_4 = _3316 * _3097.y;
                                frontier_phi_75_pred_5 = _3316 * _3097.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3325 = frontier_phi_75_pred;
                            _3324 = frontier_phi_75_pred_1;
                            _3323 = frontier_phi_75_pred_2;
                            _3322 = frontier_phi_75_pred_3;
                            _3321 = frontier_phi_75_pred_4;
                            _3320 = frontier_phi_75_pred_5;
                            _3027 = _3323 + _3040;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            _3026 = _3322 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3029;
                        frontier_phi_69_pred_1 = _3028;
                        frontier_phi_69_pred_2 = _3027;
                        frontier_phi_69_pred_3 = _3026;
                        frontier_phi_69_pred_4 = _3025;
                        frontier_phi_69_pred_5 = _3024;
                    }
                    _2696 = frontier_phi_69_pred;
                    _2694 = frontier_phi_69_pred_1;
                    _2692 = frontier_phi_69_pred_2;
                    _2690 = frontier_phi_69_pred_3;
                    _2688 = frontier_phi_69_pred_4;
                    _2686 = frontier_phi_69_pred_5;
                    uint _2831 = _2830 + 1u;
                    if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2824 = _2686;
                        _2825 = _2688;
                        _2826 = _2690;
                        _2827 = _2692;
                        _2828 = _2694;
                        _2829 = _2696;
                        _2830 = _2831;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2696;
                frontier_phi_57_58_ladder_1 = _2694;
                frontier_phi_57_58_ladder_2 = _2692;
                frontier_phi_57_58_ladder_3 = _2690;
                frontier_phi_57_58_ladder_4 = _2688;
                frontier_phi_57_58_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_57_58_ladder = _2575;
                frontier_phi_57_58_ladder_1 = _2573;
                frontier_phi_57_58_ladder_2 = _2571;
                frontier_phi_57_58_ladder_3 = _2569;
                frontier_phi_57_58_ladder_4 = _2567;
                frontier_phi_57_58_ladder_5 = _2565;
            }
            _2685 = frontier_phi_57_58_ladder_5;
            _2687 = frontier_phi_57_58_ladder_4;
            _2689 = frontier_phi_57_58_ladder_3;
            _2691 = frontier_phi_57_58_ladder_2;
            _2693 = frontier_phi_57_58_ladder_1;
            _2695 = frontier_phi_57_58_ladder;
        }
        float _2700 = isnan(1.0) ? _664 : (isnan(_664) ? 1.0 : min(_664, 1.0));
        _2430 = (_2700 * _2691) + _1864;
        _2432 = (_2700 * _2693) + _1866;
        _2434 = (_2700 * _2695) + _1868;
        _2436 = ((_2685 * _650) * _2700) + _2212;
        _2438 = ((_2687 * _652) * _2700) + _2214;
        _2440 = ((_2689 * _653) * _2700) + _2216;
    }
    else
    {
        _2430 = _1864;
        _2432 = _1866;
        _2434 = _1868;
        _2436 = _2212;
        _2438 = _2214;
        _2440 = _2216;
    }
    uint _2446 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _2452 = cbInstanceData._m0[_2446].x * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].x) * _436.x) + ((cbMtdParam._m0[10u].x * TEXCOORD.w) * _409));
    float _2453 = cbInstanceData._m0[_2446].y * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].y) * _436.y) + ((cbMtdParam._m0[10u].y * TEXCOORD.w) * _409));
    float _2454 = cbInstanceData._m0[_2446].z * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].z) * _436.z) + ((cbMtdParam._m0[10u].z * TEXCOORD.w) * _409));
    float _4388 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4399 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4410 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4421 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2460 = 0.959999978542327880859375 - (_623 * 0.959999978542327880859375);
    float _2468 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2430 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _664));
    float _2469 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2432 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _664));
    float _2470 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2434 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _664));
    float _2474 = _2460 - (exp2(log2(1.0 - _679) * 5.0) * _2460);
    float _2486 = ((_2468 + ((_2436 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + _2452) + ((((cbSceneParam._m0[72u].w * _477.x) * _2474) - _2468) * _507);
    float _2489 = ((_2453 + ((_2438 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + _2469) + ((((cbSceneParam._m0[72u].w * _477.y) * _2474) - _2469) * _507);
    float _2492 = ((_2454 + ((_2440 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + _2470) + ((((cbSceneParam._m0[72u].w * _477.z) * _2474) - _2470) * _507);
    float _4447 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2505 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2510 = cbInstanceData._m0[_593 + 6u].w * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)));
    float _2515 = _455 / cbSceneParam._m0[86u].x;
    float _2516 = _456 / cbSceneParam._m0[86u].y;
    vec4 _2530 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2532 = _2530.x;
    float _2533 = _2530.y;
    float _2534 = _2530.z;
    float _2535 = _2530.w;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _2591 = _2590 / _536;
        float _2602 = _2591 * _286;
        float _2603 = _287 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2605 = _2591 * _288;
        float _2607 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2608 = _2607 + cbSceneParam._m0[79u].w;
        float _2609 = cbSceneParam._m0[79u].w - _2603;
        float _2615 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2605 * _2605));
        float _2618 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2615;
        float _2623 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2625 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2786;
        if (abs((_2604 - _2607) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2786 = ((((_2608 > 0.0) ? exp2(_2623 * _2608) : (2.0 - exp2(_2625 * _2608))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2618;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : max(_2608, _2609));
            float _2748 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : min(_2608, _2609));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2786 = ((abs(_2615 / _2604) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2623 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2623 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2625 * _2757) - exp2(_2625 * _2758)) * _2746))) + (_2618 * cbSceneParam._m0[80u].z);
        }
        vec4 _2788 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, 1.0), 0.0);
        float _2797 = exp2((_2786 * (-1.44269502162933349609375)) * (1.0 - _2788.w));
        float _2798 = log2(_2797);
        float _2814 = log2(_2535);
        _2627 = (exp2(_2814 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].x)) * _2788.x) / cbSceneParam._m0[78u].x)) + _2532;
        _2629 = (exp2(_2814 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].y)) * _2788.y) / cbSceneParam._m0[78u].y)) + _2533;
        _2631 = (exp2(_2814 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].z)) * _2788.z) / cbSceneParam._m0[78u].z)) + _2534;
        _2633 = _2797 * _2535;
    }
    else
    {
        _2627 = _2532;
        _2629 = _2533;
        _2631 = _2534;
        _2633 = _2535;
    }
    float _2644 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2645 = _2644 == 3.0;
    float _2646 = log2(_2633);
    float _2650 = exp2(_2646 * cbSceneParam._m0[78u].x);
    float _2651 = exp2(_2646 * cbSceneParam._m0[78u].y);
    float _2652 = exp2(_2646 * cbSceneParam._m0[78u].z);
    float _2653 = _2650 * (isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0)));
    float _2654 = _2651 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)));
    float _2655 = _2652 * (isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0)));
    float _2664 = (_2644 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2664 * (_2645 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.y = _2664 * (_2645 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.z = _2664 * (_2645 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.w = _2510;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2452) * _2505) * _2650) * _2664;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2453) * _2505) * _2651) * _2664;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2454) * _2505) * _2652) * _2664;
    SV_Target_1.w = _2510;
}


