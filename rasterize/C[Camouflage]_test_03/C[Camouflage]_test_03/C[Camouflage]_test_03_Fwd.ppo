#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1041;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _304 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _310 = _304.w;
    float _311 = _304.x * cbMtdParam._m0[9u].x;
    float _312 = _304.y * cbMtdParam._m0[9u].y;
    float _313 = _304.z * cbMtdParam._m0[9u].z;
    vec4 _329 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _332 = _329.x + cbMtdParam._m0[12u].w;
    vec4 _348 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _356 = (_348.x * 2.0) + (-1.0);
    float _358 = (_348.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3430 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _365 = sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))));
    float _368 = fma(_365, _227, fma(_358, _219 * TANGENT.x, (_205 * _197) * _356));
    float _371 = fma(_365, _228, fma(_358, _219 * TANGENT.y, (_205 * _198) * _356));
    float _374 = fma(_365, _229, fma(_358, _219 * TANGENT.z, (_205 * _199) * _356));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    float _379 = _378 * _368;
    float _380 = _378 * _371;
    float _381 = _378 * _374;
    float _382 = _348.z + cbMtdParam._m0[13u].x;
    float _393 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _394 = _393 * _284;
    float _395 = _393 * _285;
    float _396 = _393 * _286;
    float _400 = dot(vec4(_394, _395, _396, 0.0), vec4(_379, _380, _381, 0.0)) - cbMtdParam._m0[13u].y;
    float _3441 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _407 = exp2(log2(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _434 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _453 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _454 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _462 = (_453 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _379);
    float _463 = (_454 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _380);
    float _470 = isnan(cbInstanceData._m0[8u].x) ? _462 : (isnan(_462) ? cbInstanceData._m0[8u].x : max(_462, cbInstanceData._m0[8u].x));
    float _471 = isnan(cbInstanceData._m0[8u].y) ? _463 : (isnan(_463) ? cbInstanceData._m0[8u].y : max(_463, cbInstanceData._m0[8u].y));
    vec4 _475 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _470 : (isnan(_470) ? cbInstanceData._m0[8u].z : min(_470, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _471 : (isnan(_471) ? cbInstanceData._m0[8u].w : min(_471, cbInstanceData._m0[8u].w))));
    vec4 _500 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _503 = _500.x + cbMtdParam._m0[12u].x;
    float _504 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
    float _509 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _510 = _509 * _379;
    float _511 = _509 * _380;
    float _512 = _509 * _381;
    float _3487 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _513 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _514 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3520 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3531 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3542 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _518 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _534 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _536 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _538 = _536.w;
    float _559 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _562 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _565 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    vec4 _567 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _578 = (((_567.y - _514) + (_567.w * _514)) * cbMtdParam._m0[3u].x) + _514;
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _592 = _591 + 9u;
    uint _593 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _599 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_593].x;
    float _600 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_593].y;
    float _601 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_593].z;
    float _3553 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    vec4 _605 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _610 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _621 = (((_610.x - _518) + (_610.w * _518)) * cbMtdParam._m0[3u].x) + _518;
    float _634 = (cbMtdParam._m0[3u].x * (((_602 * _538) - _602) + _605.x)) + _602;
    float _635 = (cbMtdParam._m0[3u].x * (((_603 * _538) - _603) + _605.y)) + _603;
    float _636 = (cbMtdParam._m0[3u].x * (((_604 * _538) - _604) + _605.z)) + _604;
    float _637 = 1.0 - _621;
    float _638 = _637 * _634;
    float _639 = _637 * _635;
    float _640 = _637 * _636;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _621;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _621;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _621;
    float _648 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _453, cbSceneParam._m0[86u].y * _454));
    float _662 = _659.x * TEXCOORD_8;
    float _663 = dot(vec3(_510, _511, _512), vec3(_394, _395, _396));
    float _666 = _663 * 2.0;
    float _670 = (_666 * _510) - _394;
    float _671 = (_666 * _511) - _395;
    float _672 = (_666 * _512) - _396;
    float _676 = abs(dot(vec3(_394, _395, _396), vec3(_510, _511, _512)));
    float _3586 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _683 = sqrt(_578);
    float _695 = exp2((_683 * 5.0) * log2(1.0 - (_677 * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _701 = (1.0 - _695) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _702 = _695 * _683;
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_738, cbModelParam._m0[26u].z, fma(_734, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730));
        float _769 = fma(_738, cbModelParam._m0[27u].z, fma(_734, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730));
        float _773 = fma(_738, cbModelParam._m0[28u].z, fma(_734, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730));
        float _798 = _730 + _510;
        float _799 = _734 + _511;
        float _800 = _738 + _512;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _765;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _769;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _773;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_510, _511, _512), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3634 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_510, _511, _512), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3667 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_510, _511, _512), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3700 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1081 = fma(_738, cbModelParam._m0[30u].z, fma(_734, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _730));
        float _1085 = fma(_738, cbModelParam._m0[31u].z, fma(_734, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _730));
        float _1089 = fma(_738, cbModelParam._m0[32u].z, fma(_734, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _730));
        float _1112 = _730 + _510;
        float _1113 = _734 + _511;
        float _1114 = _738 + _512;
        float _1124 = fma(_1114, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1112)) - _1081;
        float _1125 = fma(_1114, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1112)) - _1085;
        float _1126 = fma(_1114, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1112)) - _1089;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1081 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1085 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[35u].z) + ((((((_1089 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1180 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1147.x + (-0.5));
        float _1182 = _1180 * (_1147.y + (-0.5));
        float _1183 = _1180 * (_1147.z + (-0.5));
        float _1190 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1154.x + (-0.5));
        float _1192 = _1190 * (_1154.y + (-0.5));
        float _1193 = _1190 * (_1154.z + (-0.5));
        float _1200 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1161.x + (-0.5));
        float _1202 = _1200 * (_1161.y + (-0.5));
        float _1203 = _1200 * (_1161.z + (-0.5));
        float _1210 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1168.x + (-0.5));
        float _1212 = _1210 * (_1168.y + (-0.5));
        float _1213 = _1210 * (_1168.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_510, _511, _512), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3763 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1244 + 1.0))) + _1249) * _1214;
        float _1259 = _1182 * 0.5;
        float _1260 = _1192 * 0.5;
        float _1261 = _1202 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_510, _511, _512), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3796 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1286 + 1.0))) + _1291) * _1215;
        float _1301 = _1183 * 0.5;
        float _1302 = _1193 * 0.5;
        float _1303 = _1203 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_510, _511, _512), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3829 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1328 + 1.0))) + _1333) * _1216;
        _1350 = _1183;
        _1351 = _1182;
        _1352 = _1181;
        _1353 = _1193;
        _1354 = _1192;
        _1355 = _1191;
        _1356 = _1203;
        _1357 = _1202;
        _1358 = _1201;
        _1359 = _1216;
        _1360 = _1215;
        _1361 = _1214;
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1041;
        _1351 = _1041;
        _1352 = _1041;
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = _1041;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1053)) + _1053;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1054)) + _1054;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1397 = fma(_1376, cbSceneParam._m0[89u].z, fma(_1375, cbSceneParam._m0[89u].y, _1374 * cbSceneParam._m0[89u].x));
    float _1400 = fma(_1376, cbSceneParam._m0[90u].z, fma(_1375, cbSceneParam._m0[90u].y, _1374 * cbSceneParam._m0[90u].x));
    float _1403 = fma(_1376, cbSceneParam._m0[91u].z, fma(_1375, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1374));
    float _1418 = _670 * 0.5;
    float _1419 = _671 * 0.5;
    float _1420 = _672 * 0.5;
    float _1421 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1424 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1427 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1461;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1434 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1438 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1442 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1449 = dot(vec4(cbModelParam._m0[39u]), vec4(_1418, _1419, _1420, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1472;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1463 = dot(vec4(cbModelParam._m0[40u]), vec4(_1418, _1419, _1420, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1476 = (_1472 * cbModelParam._m0[1u].x) + (_1461 * (1.0 - cbModelParam._m0[1u].x));
    float _1486 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1486 : min(cbModelParam._m0[25u].z, _1486));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1535 = fma(_738, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730)) + cbModelParam._m0[13u].w;
        float _1539 = fma(_738, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730)) + cbModelParam._m0[14u].w;
        float _1543 = fma(_738, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730)) + cbModelParam._m0[15u].w;
        float _1546 = fma(_672, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670));
        float _1549 = fma(_672, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670));
        float _1552 = fma(_672, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670));
        float _1580;
        if (_1546 > 0.0)
        {
            _1580 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1580 = frontier_phi_16_14_ladder;
        }
        float _1786;
        if (_1549 > 0.0)
        {
            _1786 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1786 = frontier_phi_25_21_ladder;
        }
        float _2040;
        if (_1552 > 0.0)
        {
            _2040 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2040 = frontier_phi_37_32_ladder;
        }
        float _2042 = isnan(_1786) ? _1580 : (isnan(_1580) ? _1786 : min(_1580, _1786));
        float _2043 = isnan(_2040) ? _2042 : (isnan(_2042) ? _2040 : min(_2042, _2040));
        float _2047 = (_2043 * _1546) + _1535;
        float _2048 = (_2043 * _1549) + _1539;
        float _2049 = (_2043 * _1552) + _1543;
        float _2050 = _2043 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2050;
        float _2054 = _2050 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 > _2054) || ((_2048 < _2052) || ((_2047 < _2052) || (_2047 > _2054))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2049, cbModelParam._m0[9u].z, fma(_2048, cbModelParam._m0[9u].y, _2047 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2049, cbModelParam._m0[10u].z, fma(_2048, cbModelParam._m0[10u].y, _2047 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2049, cbModelParam._m0[11u].z, fma(_2048, cbModelParam._m0[11u].y, _2047 * cbModelParam._m0[11u].x))), _1487);
            frontier_phi_15_37_ladder = _2177.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2177.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2177.x * cbModelParam._m0[1u].y;
        }
        _1568 = frontier_phi_15_37_ladder_2;
        _1570 = frontier_phi_15_37_ladder_1;
        _1572 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_670, _671, _672), _1487);
        _1568 = _1556.x * cbModelParam._m0[1u].y;
        _1570 = _1556.y * cbModelParam._m0[1u].y;
        _1572 = _1556.z * cbModelParam._m0[1u].y;
    }
    float _1576 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1576 : min(cbModelParam._m0[25u].w, _1576));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_738, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_738, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_738, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_672, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670));
        float _1648 = fma(_672, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670));
        float _1651 = fma(_672, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670));
        float _1791;
        if (_1645 > 0.0)
        {
            _1791 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1791 = frontier_phi_27_23_ladder;
        }
        float _2067;
        if (_1648 > 0.0)
        {
            _2067 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2067 = frontier_phi_39_34_ladder;
        }
        float _2280;
        if (_1651 > 0.0)
        {
            _2280 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2280 = frontier_phi_48_45_ladder;
        }
        float _2282 = isnan(_2067) ? _1791 : (isnan(_1791) ? _2067 : min(_1791, _2067));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1645) + _1634;
        float _2288 = (_2283 * _1648) + _1638;
        float _2289 = (_2283 * _1651) + _1642;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1577);
            frontier_phi_24_48_ladder = _2534.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2534.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2534.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_24_48_ladder_2;
        _1672 = frontier_phi_24_48_ladder_1;
        _1674 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_670, _671, _672), _1577);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1687 = (((_701 * _648) + _702) * _662) * ((cbModelParam._m0[1u].w * (_1670 - _1568)) + _1568);
    float _1689 = (((_701 * _650) + _702) * _662) * ((cbModelParam._m0[1u].w * (_1672 - _1570)) + _1570);
    float _1691 = (((_701 * _651) + _702) * _662) * ((cbModelParam._m0[1u].w * (_1674 - _1572)) + _1572);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    uvec4 _1710 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1712 = _1710.x * 14u;
    uint _1713 = _1712 + 13u;
    float _1720 = _662 + (-1.0);
    float _1725 = (cbLight._m0[_1713].x * _1720) + 1.0;
    float _1726 = (cbLight._m0[_1713].y * _1720) + 1.0;
    float _1727 = (cbLight._m0[_1713].z * _1720) + 1.0;
    float _1728 = (cbLight._m0[_1713].w * _1720) + 1.0;
    uint _1729 = _1712 + 5u;
    float _1735 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1739 = _1712 + 4u;
    float _1745 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1749 = _1712 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_510, _511, _512));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_510, _511, _512));
    float _3965 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _3976 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1729].x * _1735) * _1770) + ((cbLight._m0[_1739].x * _1745) * _1768);
    float _1778 = ((_1735 * cbLight._m0[_1729].y) * _1770) + ((_1745 * cbLight._m0[_1739].y) * _1768);
    float _1779 = ((_1735 * cbLight._m0[_1729].z) * _1770) + ((_1745 * cbLight._m0[_1739].z) * _1768);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1712 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1785)
    {
        _1796 = _1777;
        _1798 = _1778;
        _1800 = _1779;
    }
    else
    {
        uint _1804 = _1712 + 6u;
        float _1820 = (dot(vec3(cbLight._m0[_1712 + 2u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3987 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1823 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1796 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1777;
        _1798 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1778;
        _1800 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1779;
    }
    bool _1803 = _1783.y == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1803)
    {
        _1841 = _1796;
        _1843 = _1798;
        _1845 = _1800;
    }
    else
    {
        uint _2011 = _1712 + 7u;
        float _2027 = (dot(vec3(cbLight._m0[_1712 + 3u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _4003 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2030 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1841 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1796;
        _1843 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1798;
        _1845 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1800;
    }
    uint _1848 = _1712 + 8u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1712].w)) * _578) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1712].x + _394;
    float _1864 = cbLight._m0[_1712].y + _395;
    float _1865 = cbLight._m0[_1712].z + _396;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1712].xyz));
    float _4019 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _1877 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1878 = dot(vec3(_510, _511, _512), vec3(_1870, _1871, _1872));
    float _4041 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1870, _1871, _1872));
    float _4052 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1862 * _1862;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0);
    float _1899 = 0.959999978542327880859375 - _645;
    float _1901 = 0.959999978542327880859375 - _646;
    float _1902 = 0.959999978542327880859375 - _647;
    float _1909 = 1.0 - _1862;
    float _1920 = (0.5 / (((_1877 * ((_1876 * _1909) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1909) + _1862) * _1876))) * _1876;
    float _4063 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    uint _1933 = _1712 + 9u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _578) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1749].x + _394;
    float _1947 = cbLight._m0[_1749].y + _395;
    float _1948 = cbLight._m0[_1749].z + _396;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1749].xyz));
    float _4074 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _1960 = dot(vec3(_510, _511, _512), vec3(_1953, _1954, _1955));
    float _4085 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1964 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1953, _1954, _1955));
    float _4096 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1968 = _1945 * _1945;
    float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
    float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0);
    float _1986 = 1.0 - _1945;
    float _1996 = (0.5 / (((_1877 * ((_1959 * _1986) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1986) + _1945) * _1959))) * _1959;
    float _4107 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
    float _2008 = (((((_1979 * _1899) + _648) * cbLight._m0[_1933].x) * _1998) * _1735) + (((((_1898 * _1899) + _648) * cbLight._m0[_1848].x) * _1922) * _1745);
    float _2009 = (((((_1979 * _1901) + _650) * cbLight._m0[_1933].y) * _1998) * _1735) + (((((_1898 * _1901) + _650) * cbLight._m0[_1848].y) * _1922) * _1745);
    float _2010 = (((((_1979 * _1902) + _651) * cbLight._m0[_1933].z) * _1998) * _1735) + (((((_1898 * _1902) + _651) * cbLight._m0[_1848].z) * _1922) * _1745);
    float _2072;
    float _2074;
    float _2076;
    if (_1785)
    {
        _2072 = _2008;
        _2074 = _2009;
        _2076 = _2010;
    }
    else
    {
        uint _2078 = _1712 + 2u;
        uint _2082 = _1712 + 10u;
        float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _578) * 0.949999988079071044921875);
        float _2097 = _2096 * _2096;
        float _2098 = cbLight._m0[_2078].x + _394;
        float _2099 = cbLight._m0[_2078].y + _395;
        float _2100 = cbLight._m0[_2078].z + _396;
        float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
        float _2105 = _2104 * _2098;
        float _2106 = _2104 * _2099;
        float _2107 = _2104 * _2100;
        float _2108 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2078].xyz));
        float _4118 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2112 = dot(vec3(_510, _511, _512), vec3(_2105, _2106, _2107));
        float _4129 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2116 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2105, _2106, _2107));
        float _4140 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2120 = _2097 * _2097;
        float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
        float _2131 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
        float _2138 = 1.0 - _2097;
        float _2148 = (0.5 / (((_1877 * ((_2111 * _2138) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2138) + _2097) * _2111))) * _2111;
        float _4151 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2072 = (((((_2131 * _1899) + _648) * cbLight._m0[_2082].x) * _2150) * _2151) + _2008;
        _2074 = (((((_2131 * _1901) + _650) * cbLight._m0[_2082].y) * _2150) * _2151) + _2009;
        _2076 = (((((_2131 * _1902) + _651) * cbLight._m0[_2082].z) * _2150) * _2151) + _2010;
    }
    float _2186;
    float _2188;
    float _2190;
    if (_1803)
    {
        _2186 = _2072;
        _2188 = _2074;
        _2190 = _2076;
    }
    else
    {
        uint _2197 = _1712 + 3u;
        uint _2201 = _1712 + 11u;
        float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _578) * 0.949999988079071044921875);
        float _2216 = _2215 * _2215;
        float _2217 = cbLight._m0[_2197].x + _394;
        float _2218 = cbLight._m0[_2197].y + _395;
        float _2219 = cbLight._m0[_2197].z + _396;
        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
        float _2224 = _2223 * _2217;
        float _2225 = _2223 * _2218;
        float _2226 = _2223 * _2219;
        float _2227 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2197].xyz));
        float _4167 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2231 = dot(vec3(_510, _511, _512), vec3(_2224, _2225, _2226));
        float _4178 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2235 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2224, _2225, _2226));
        float _4189 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2239 = _2216 * _2216;
        float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
        float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0);
        float _2257 = 1.0 - _2216;
        float _2267 = (0.5 / (((_1877 * ((_2230 * _2257) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2257) + _2216) * _2230))) * _2230;
        float _4200 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2269 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
        float _2270 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2186 = (((((_2250 * _1899) + _648) * cbLight._m0[_2201].x) * _2269) * _2270) + _2072;
        _2188 = (((((_2250 * _1901) + _650) * cbLight._m0[_2201].y) * _2269) * _2270) + _2074;
        _2190 = (((((_2250 * _1902) + _651) * cbLight._m0[_2201].z) * _2269) * _2270) + _2076;
    }
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_1710.y == 0u)
    {
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2345;
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2345;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2345;
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.x;
        uint _2372 = uint((float(_2360.y) * floor(float(uint(cbSceneParam._m0[85u].y * _454) / _2361))) + floor(float(uint(cbSceneParam._m0[85u].x * _453) / _2361)));
        float _2382 = (log2(_2348 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2383 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        uint _2386 = uint(isnan(14.0) ? _2383 : (isnan(_2383) ? 14.0 : min(_2383, 14.0)));
        uvec4 _2391 = texelFetch(g_lightClusterGridBuffer, int(((_2386 << 2u) + (_2372 << 6u)) >> 2u));
        uint _2392 = _2391.x;
        uint _2393 = _2360.z;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((((1u << ((_2393 >> 4u) & 15u)) + 4294967295u) & _2392) == 0u) || ((_2393 & 240u) == 0u))
        {
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
        }
        else
        {
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            uint _2697 = 0u;
            uint _2706;
            bool _2707;
            for (;;)
            {
                _2706 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2697 << 2u)) >> 2u)).x;
                _2707 = _2706 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2707)
                {
                    frontier_phi_63_pred = _2696;
                    frontier_phi_63_pred_1 = _2695;
                    frontier_phi_63_pred_2 = _2694;
                    frontier_phi_63_pred_3 = _2693;
                    frontier_phi_63_pred_4 = _2692;
                    frontier_phi_63_pred_5 = _2691;
                }
                else
                {
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    uint _2821;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2706;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    for (;;)
                    {
                        uint _2825 = uint(findLSB(_2821)) + (_2697 << 5u);
                        uint _2822 = (_2821 + 4294967295u) & _2821;
                        uint _2827 = _2825 * 48u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2847 = (_2825 * 48u) + 4u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2866 = (_2825 * 48u) + 8u;
                        vec3 _2877 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x));
                        float _2881 = _2841.x - _2346;
                        float _2882 = _2841.y - _2347;
                        float _2883 = _2841.z - _2348;
                        float _2884 = dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883));
                        float _2887 = inversesqrt(_2884);
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2891 = dot(vec3(_559, _562, _565), vec3(_2888, _2889, _2890));
                        float _2896 = 1.0 - (_2884 * _2841.w);
                        float _4226 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2898 = sqrt(_2884) * _2860.w;
                        float _2901 = 1.39999997615814208984375 / (_2898 + 1.39999997615814208984375);
                        float _2902 = _2901 * _2901;
                        float _2905 = ((1.0 - _2902) * _2891) + _2902;
                        float _2908 = _2898 * _2898;
                        float _2912 = ((isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))) * _2897) / ((_2908 * 0.699999988079071044921875) + 1.0);
                        float _2916 = (-0.0) - _2346;
                        float _2917 = (-0.0) - _2347;
                        float _2918 = (-0.0) - _2348;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2933 = exp2(log2(1.0 / ((_2908 * 3.5) + 5.0)) * 0.25);
                        float _2934 = 1.0 - _683;
                        float _2941 = sqrt(1.0 - ((1.0 - (_2934 * _2934)) * (1.0 - (_2933 * _2933))));
                        float _2942 = _2941 * _2941;
                        float _2943 = _2942 * _2942;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2954 = dot(vec3(_559, _562, _565), vec3(_2923, _2924, _2925));
                        float _4242 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2958 = dot(vec3(_559, _562, _565), vec3(_2950 * _2944, _2950 * _2945, _2950 * _2946));
                        float _4253 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2965 = ((_2961 * _2961) * (_2943 + (-1.0))) + 1.0;
                        float _2966 = _2901 * _2942;
                        float _2967 = _2966 * _2966;
                        float _2970 = ((1.0 - _2967) * _2891) + _2967;
                        float _4264 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2972 = 1.0 - _2942;
                        float _2982 = (0.5 / (((_2971 * ((_2957 * _2972) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2971 * _2972) + _2942) * _2957))) * _2971;
                        float _4275 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2993 = (((_2943 * 3.1415927410125732421875) * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) / ((_2965 * _2965) * ((_2908 * 2.1991131305694580078125) + 3.141590118408203125))) * _2897;
                        _2750 = (_2912 * _2860.x) + _2818;
                        _2751 = (_2912 * _2860.y) + _2819;
                        _2752 = (_2912 * _2860.z) + _2820;
                        _2747 = (_2993 * _2877.x) + _2815;
                        _2748 = (_2993 * _2877.y) + _2816;
                        _2749 = (_2993 * _2877.z) + _2817;
                        if (_2822 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2822;
                        }
                    }
                    frontier_phi_63_pred = _2752;
                    frontier_phi_63_pred_1 = _2751;
                    frontier_phi_63_pred_2 = _2750;
                    frontier_phi_63_pred_3 = _2749;
                    frontier_phi_63_pred_4 = _2748;
                    frontier_phi_63_pred_5 = _2747;
                }
                _2550 = frontier_phi_63_pred;
                _2548 = frontier_phi_63_pred_1;
                _2546 = frontier_phi_63_pred_2;
                _2544 = frontier_phi_63_pred_3;
                _2542 = frontier_phi_63_pred_4;
                _2540 = frontier_phi_63_pred_5;
                uint _2698 = _2697 + 1u;
                if (_2698 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2691 = _2540;
                    _2692 = _2542;
                    _2693 = _2544;
                    _2694 = _2546;
                    _2695 = _2548;
                    _2696 = _2550;
                    _2697 = _2698;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
        }
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.z;
        uint _2556 = (_2554 >> 8u) & 15u;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((4294967295u << _2556) & _2392) == 0u)
        {
            _2659 = _2539;
            _2661 = _2541;
            _2663 = _2543;
            _2665 = _2545;
            _2667 = _2547;
            _2669 = _2549;
        }
        else
        {
            float _2684 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
            float _2685 = _2684 * _2346;
            float _2686 = _2684 * _2347;
            float _2687 = _2684 * _2348;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2556 < ((_2554 >> 12u) & 15u))
            {
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2798 = _2539;
                float _2799 = _2541;
                float _2800 = _2543;
                float _2801 = _2545;
                float _2802 = _2547;
                float _2803 = _2549;
                uint _2804 = _2556;
                uint _2813;
                bool _2814;
                for (;;)
                {
                    _2813 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                    _2814 = _2813 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2814)
                    {
                        frontier_phi_69_pred = _2803;
                        frontier_phi_69_pred_1 = _2802;
                        frontier_phi_69_pred_2 = _2801;
                        frontier_phi_69_pred_3 = _2800;
                        frontier_phi_69_pred_4 = _2799;
                        frontier_phi_69_pred_5 = _2798;
                    }
                    else
                    {
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        uint _3017 = _2813;
                        uint _3018;
                        vec4 _3043;
                        float _3044;
                        vec4 _3059;
                        vec3 _3071;
                        vec4 _3087;
                        vec4 _3103;
                        float _3150;
                        bool _3151;
                        for (;;)
                        {
                            uint _3028 = ((_2804 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3017));
                            _3018 = (_3017 + 4294967295u) & _3017;
                            uint _3030 = _3028 * 40u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            _3044 = _3043.w;
                            uint _3046 = (_3028 * 40u) + 4u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3061 = (_3028 * 40u) + 8u;
                            _3071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x));
                            uint _3074 = (_3028 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3028 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3106 = (_3028 * 40u) + 24u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3125 = (_3028 * 40u) + 28u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3150 = fma(_2348, _3138.z, fma(_2347, _3138.y, _3138.x * _2346)) + _3138.w;
                            _3151 = !((fma(_2348, _3119.z, fma(_2347, _3119.y, _3119.x * _2346)) + _3119.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3151)
                            {
                                float _3178 = _3043.x - _2346;
                                float _3179 = _3043.y - _2347;
                                float _3180 = _3043.z - _2348;
                                float _3181 = dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180));
                                float _3184 = inversesqrt(_3181);
                                float _3185 = _3184 * _3178;
                                float _3186 = _3184 * _3179;
                                float _3187 = _3184 * _3180;
                                float _3191 = 1.0 - (_3181 / (_3044 * _3044));
                                float _4286 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3196 = sqrt(_3181) * _3059.w;
                                float _3198 = 1.39999997615814208984375 / (_3196 + 1.39999997615814208984375);
                                float _3199 = _3198 * _3198;
                                float _3202 = ((1.0 - _3199) * dot(vec3(_3185, _3186, _3187), vec3(_559, _562, _565))) + _3199;
                                float _3205 = _3196 * _3196;
                                float _3209 = (fma(_2348, _3087.z, fma(_2347, _3087.y, _3087.x * _2346)) + _3087.w) / _3150;
                                float _3210 = (fma(_2348, _3103.z, fma(_2347, _3103.y, _3103.x * _2346)) + _3103.w) / _3150;
                                float _3214 = 1.0 - dot(vec2(_3209, _3210), vec2(_3209, _3210));
                                float _4302 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3216 = _3215 * (((isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))) * _3192) / ((_3205 * 0.699999988079071044921875) + 1.0));
                                float _3228 = exp2(log2(1.0 / ((_3205 * 3.5) + 5.0)) * 0.25);
                                float _3229 = 1.0 - _683;
                                float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                                float _3237 = _3236 * _3236;
                                float _3238 = _3237 * _3237;
                                float _3239 = _3185 - _2685;
                                float _3240 = _3186 - _2686;
                                float _3241 = _3187 - _2687;
                                float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                                float _3249 = dot(vec3(_559, _562, _565), vec3((-0.0) - _2685, (-0.0) - _2686, (-0.0) - _2687));
                                float _4313 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3253 = dot(vec3(_559, _562, _565), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                                float _4324 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                                float _3261 = _3198 * _3237;
                                float _3262 = _3261 * _3261;
                                float _3268 = ((1.0 - _3262) * dot(vec3(_559, _562, _565), vec3(_3185, _3186, _3187))) + _3262;
                                float _4335 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3270 = 1.0 - _3237;
                                float _3280 = (0.5 / (((_3269 * ((_3252 * _3270) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3269 * _3270) + _3237) * _3252))) * _3269;
                                float _4346 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3290 = (_3215 * _3192) * (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) / ((_3260 * _3260) * ((_3205 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3216 * _3059.z;
                                frontier_phi_75_pred_1 = _3216 * _3059.y;
                                frontier_phi_75_pred_2 = _3216 * _3059.x;
                                frontier_phi_75_pred_3 = _3290 * _3071.z;
                                frontier_phi_75_pred_4 = _3290 * _3071.y;
                                frontier_phi_75_pred_5 = _3290 * _3071.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3299 = frontier_phi_75_pred;
                            _3298 = frontier_phi_75_pred_1;
                            _3297 = frontier_phi_75_pred_2;
                            _3296 = frontier_phi_75_pred_3;
                            _3295 = frontier_phi_75_pred_4;
                            _3294 = frontier_phi_75_pred_5;
                            _3001 = _3297 + _3014;
                            _3002 = _3298 + _3015;
                            _3003 = _3299 + _3016;
                            _2998 = _3294 + _3011;
                            _2999 = _3295 + _3012;
                            _3000 = _3296 + _3013;
                            if (_3018 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3018;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3003;
                        frontier_phi_69_pred_1 = _3002;
                        frontier_phi_69_pred_2 = _3001;
                        frontier_phi_69_pred_3 = _3000;
                        frontier_phi_69_pred_4 = _2999;
                        frontier_phi_69_pred_5 = _2998;
                    }
                    _2670 = frontier_phi_69_pred;
                    _2668 = frontier_phi_69_pred_1;
                    _2666 = frontier_phi_69_pred_2;
                    _2664 = frontier_phi_69_pred_3;
                    _2662 = frontier_phi_69_pred_4;
                    _2660 = frontier_phi_69_pred_5;
                    uint _2805 = _2804 + 1u;
                    if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2798 = _2660;
                        _2799 = _2662;
                        _2800 = _2664;
                        _2801 = _2666;
                        _2802 = _2668;
                        _2803 = _2670;
                        _2804 = _2805;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2670;
                frontier_phi_57_58_ladder_1 = _2668;
                frontier_phi_57_58_ladder_2 = _2666;
                frontier_phi_57_58_ladder_3 = _2664;
                frontier_phi_57_58_ladder_4 = _2662;
                frontier_phi_57_58_ladder_5 = _2660;
            }
            else
            {
                frontier_phi_57_58_ladder = _2549;
                frontier_phi_57_58_ladder_1 = _2547;
                frontier_phi_57_58_ladder_2 = _2545;
                frontier_phi_57_58_ladder_3 = _2543;
                frontier_phi_57_58_ladder_4 = _2541;
                frontier_phi_57_58_ladder_5 = _2539;
            }
            _2659 = frontier_phi_57_58_ladder_5;
            _2661 = frontier_phi_57_58_ladder_4;
            _2663 = frontier_phi_57_58_ladder_3;
            _2665 = frontier_phi_57_58_ladder_2;
            _2667 = frontier_phi_57_58_ladder_1;
            _2669 = frontier_phi_57_58_ladder;
        }
        float _2674 = isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0));
        _2404 = (_2674 * _2665) + _1841;
        _2406 = (_2674 * _2667) + _1843;
        _2408 = (_2674 * _2669) + _1845;
        _2410 = ((_2659 * _648) * _2674) + _2186;
        _2412 = ((_2661 * _650) * _2674) + _2188;
        _2414 = ((_2663 * _651) * _2674) + _2190;
    }
    else
    {
        _2404 = _1841;
        _2406 = _1843;
        _2408 = _1845;
        _2410 = _2186;
        _2412 = _2188;
        _2414 = _2190;
    }
    uint _2420 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _2426 = cbInstanceData._m0[_2420].x * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].x) * _434.x) + ((cbMtdParam._m0[10u].x * TEXCOORD.w) * _407));
    float _2427 = cbInstanceData._m0[_2420].y * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].y) * _434.y) + ((cbMtdParam._m0[10u].y * TEXCOORD.w) * _407));
    float _2428 = cbInstanceData._m0[_2420].z * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].z) * _434.z) + ((cbMtdParam._m0[10u].z * TEXCOORD.w) * _407));
    float _4362 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4373 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4384 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4395 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _2434 = 0.959999978542327880859375 - (_621 * 0.959999978542327880859375);
    float _2442 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2404 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _662));
    float _2443 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2406 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _662));
    float _2444 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2408 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _662));
    float _2448 = _2434 - (exp2(log2(1.0 - _677) * 5.0) * _2434);
    float _2460 = ((_2442 + ((_2410 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + _2426) + ((((cbSceneParam._m0[72u].w * _475.x) * _2448) - _2442) * _505);
    float _2463 = ((_2427 + ((_2412 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + _2443) + ((((cbSceneParam._m0[72u].w * _475.y) * _2448) - _2443) * _505);
    float _2466 = ((_2428 + ((_2414 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + _2444) + ((((cbSceneParam._m0[72u].w * _475.z) * _2448) - _2444) * _505);
    float _4421 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2479 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2484 = cbInstanceData._m0[_591 + 6u].w * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)));
    float _2489 = _453 / cbSceneParam._m0[86u].x;
    float _2490 = _454 / cbSceneParam._m0[86u].y;
    vec4 _2504 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, (log2((isnan(cbSceneParam._m0[77u].w) ? _534 : (isnan(_534) ? cbSceneParam._m0[77u].w : min(_534, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2506 = _2504.x;
    float _2507 = _2504.y;
    float _2508 = _2504.z;
    float _2509 = _2504.w;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_534 > cbSceneParam._m0[78u].w)
    {
        float _2564 = isnan(_534) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _534 : min(cbSceneParam._m0[80u].w, _534));
        float _2565 = _2564 / _534;
        float _2576 = _2565 * _284;
        float _2577 = _285 * _2565;
        float _2578 = (-0.0) - _2577;
        float _2579 = _2565 * _286;
        float _2581 = (cbSceneParam._m0[77u].w * _2578) / _2564;
        float _2582 = _2581 + cbSceneParam._m0[79u].w;
        float _2583 = cbSceneParam._m0[79u].w - _2577;
        float _2589 = sqrt(((_2576 * _2576) + (_2577 * _2577)) + (_2579 * _2579));
        float _2592 = (1.0 - (cbSceneParam._m0[77u].w / _2564)) * _2589;
        float _2597 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2599 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2760;
        if (abs((_2578 - _2581) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2760 = ((((_2582 > 0.0) ? exp2(_2597 * _2582) : (2.0 - exp2(_2599 * _2582))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2592;
        }
        else
        {
            float _2720 = 1.0 / cbSceneParam._m0[80u].x;
            float _2721 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : max(_2582, _2583));
            float _2722 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : min(_2582, _2583));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            _2760 = ((abs(_2589 / _2578) * cbSceneParam._m0[80u].y) * ((((_2731 - _2732) * 2.0) - ((exp2(_2597 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0)))) - exp2(_2597 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))))) * _2720)) - ((exp2(_2599 * _2731) - exp2(_2599 * _2732)) * _2720))) + (_2592 * cbSceneParam._m0[80u].z);
        }
        vec4 _2762 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, 1.0), 0.0);
        float _2771 = exp2((_2760 * (-1.44269502162933349609375)) * (1.0 - _2762.w));
        float _2772 = log2(_2771);
        float _2788 = log2(_2509);
        _2601 = (exp2(_2788 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].x)) * _2762.x) / cbSceneParam._m0[78u].x)) + _2506;
        _2603 = (exp2(_2788 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].y)) * _2762.y) / cbSceneParam._m0[78u].y)) + _2507;
        _2605 = (exp2(_2788 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].z)) * _2762.z) / cbSceneParam._m0[78u].z)) + _2508;
        _2607 = _2771 * _2509;
    }
    else
    {
        _2601 = _2506;
        _2603 = _2507;
        _2605 = _2508;
        _2607 = _2509;
    }
    float _2618 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2619 = _2618 == 3.0;
    float _2620 = log2(_2607);
    float _2624 = exp2(_2620 * cbSceneParam._m0[78u].x);
    float _2625 = exp2(_2620 * cbSceneParam._m0[78u].y);
    float _2626 = exp2(_2620 * cbSceneParam._m0[78u].z);
    float _2627 = _2624 * (isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0)));
    float _2628 = _2625 * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)));
    float _2629 = _2626 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)));
    float _2638 = (_2618 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2638 * (_2619 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.y = _2638 * (_2619 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
    SV_Target.z = _2638 * (_2619 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.w = _2484;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2426) * _2479) * _2624) * _2638;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2427) * _2479) * _2625) * _2638;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2428) * _2479) * _2626) * _2638;
    SV_Target_1.w = _2484;
}


