#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1096;
float _3822;
float _3823;
float _3824;
float _3825;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    vec4 _312 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _312.w;
    float _319 = _312.x * cbMtdParam._m0[9u].x;
    float _320 = _312.y * cbMtdParam._m0[9u].y;
    float _321 = _312.z * cbMtdParam._m0[9u].z;
    vec4 _337 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _340 = _337.x + cbMtdParam._m0[12u].w;
    vec4 _356 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _364 = (_356.x * 2.0) + (-1.0);
    float _366 = (_356.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_364, _366), vec2(_364, _366));
    float _3834 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))));
    float _376 = fma(_373, _235, fma(_366, _227 * TANGENT.x, (_213 * _205) * _364));
    float _379 = fma(_373, _236, fma(_366, _227 * TANGENT.y, (_213 * _206) * _364));
    float _382 = fma(_373, _237, fma(_366, _227 * TANGENT.z, (_213 * _207) * _364));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _390 = _356.z + cbMtdParam._m0[13u].x;
    float _401 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _402 = _401 * _292;
    float _403 = _401 * _293;
    float _404 = _401 * _294;
    float _408 = dot(vec4(_402, _403, _404, 0.0), vec4(_387, _388, _389, 0.0)) - cbMtdParam._m0[13u].y;
    float _3845 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _415 = exp2(log2(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _442 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _470 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _387);
    float _471 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _388);
    float _478 = isnan(cbInstanceData._m0[8u].x) ? _470 : (isnan(_470) ? cbInstanceData._m0[8u].x : max(_470, cbInstanceData._m0[8u].x));
    float _479 = isnan(cbInstanceData._m0[8u].y) ? _471 : (isnan(_471) ? cbInstanceData._m0[8u].y : max(_471, cbInstanceData._m0[8u].y));
    vec4 _483 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _478 : (isnan(_478) ? cbInstanceData._m0[8u].z : min(_478, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _479 : (isnan(_479) ? cbInstanceData._m0[8u].w : min(_479, cbInstanceData._m0[8u].w))));
    vec4 _508 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _511 = _508.x + cbMtdParam._m0[12u].x;
    float _512 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _513 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
    float _517 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _518 = _517 * _387;
    float _519 = _517 * _388;
    float _520 = _517 * _389;
    float _3891 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _521 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _522 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3924 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3935 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3946 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _526 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _547 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _549 = _547.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _775 = sqrt(((_292 * _292) + (_293 * _293)) + (_294 * _294));
        float _781 = (cbMatDynParam._m0[5u].x * _775) + cbMatDynParam._m0[5u].y;
        float _3957 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _786 = (cbMatDynParam._m0[5u].z * _775) + cbMatDynParam._m0[5u].w;
        float _3968 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) - _782)) + _782) < ((_549 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _563 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _565 = _563.w;
    float _585 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _588 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _591 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    vec4 _593 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _604 = (((_593.y - _522) + (_593.w * _522)) * cbMtdParam._m0[3u].x) + _522;
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _617 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3979 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    vec4 _631 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _636 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _647 = (((_636.x - _526) + (_636.w * _526)) * cbMtdParam._m0[3u].x) + _526;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _565) - _628) + _631.x)) + _628;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _565) - _629) + _631.y)) + _629;
    float _662 = (cbMtdParam._m0[3u].x * (((_630 * _565) - _630) + _631.z)) + _630;
    float _663 = 1.0 - _647;
    float _664 = _663 * _660;
    float _665 = _663 * _661;
    float _666 = _663 * _662;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _647;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _647;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _647;
    float _674 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _688 = _685.x * TEXCOORD_8;
    float _689 = dot(vec3(_518, _519, _520), vec3(_402, _403, _404));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _518) - _402;
    float _697 = (_692 * _519) - _403;
    float _698 = (_692 * _520) - _404;
    float _702 = abs(dot(vec3(_402, _403, _404), vec3(_518, _519, _520)));
    float _4012 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _709 = sqrt(_604);
    float _721 = exp2((_709 * 5.0) * log2(1.0 - (_703 * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _727 = (1.0 - _721) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _728 = _721 * _709;
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756));
        float _824 = fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756));
        float _828 = fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756));
        float _853 = _756 + _518;
        float _854 = _760 + _519;
        float _855 = _764 + _520;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_518, _519, _520), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _4060 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_518, _519, _520), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _4093 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_518, _519, _520), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _4126 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1139 = fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756));
        float _1143 = fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756));
        float _1147 = fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756));
        float _1170 = _756 + _518;
        float _1171 = _760 + _519;
        float _1172 = _764 + _520;
        float _1182 = fma(_1172, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170)) - _1139;
        float _1183 = fma(_1172, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170)) - _1143;
        float _1184 = fma(_1172, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170)) - _1147;
        float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
        float _1201 = ((_1188 * _1182) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1139 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1188 * _1183) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1143 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1188 * _1184) / cbModelParam._m0[35u].z) + ((((((_1147 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        float _1238 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1205.x + (-0.5));
        float _1240 = _1238 * (_1205.y + (-0.5));
        float _1241 = _1238 * (_1205.z + (-0.5));
        float _1248 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1212.x + (-0.5));
        float _1250 = _1248 * (_1212.y + (-0.5));
        float _1251 = _1248 * (_1212.z + (-0.5));
        float _1258 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1219.x + (-0.5));
        float _1260 = _1258 * (_1219.y + (-0.5));
        float _1261 = _1258 * (_1219.z + (-0.5));
        float _1268 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1226.x + (-0.5));
        float _1270 = _1268 * (_1226.y + (-0.5));
        float _1271 = _1268 * (_1226.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_518, _519, _520), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4189 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1302 + 1.0))) + _1307) * _1272;
        float _1317 = _1240 * 0.5;
        float _1318 = _1250 * 0.5;
        float _1319 = _1260 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_518, _519, _520), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4222 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1344 + 1.0))) + _1349) * _1273;
        float _1359 = _1241 * 0.5;
        float _1360 = _1251 * 0.5;
        float _1361 = _1261 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_518, _519, _520), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4255 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1386 + 1.0))) + _1391) * _1274;
        _1408 = _1241;
        _1409 = _1240;
        _1410 = _1239;
        _1411 = _1251;
        _1412 = _1250;
        _1413 = _1249;
        _1414 = _1261;
        _1415 = _1260;
        _1416 = _1259;
        _1417 = _1274;
        _1418 = _1273;
        _1419 = _1272;
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
    }
    else
    {
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = _1096;
        _1416 = _1096;
        _1417 = _1096;
        _1418 = _1096;
        _1419 = _1096;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1455 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1458 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1461 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1432));
    float _1476 = _696 * 0.5;
    float _1477 = _697 * 0.5;
    float _1478 = _698 * 0.5;
    float _1479 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1482 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1485 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1519;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1492 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1496 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1500 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1507 = dot(vec4(cbModelParam._m0[39u]), vec4(_1476, _1477, _1478, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1530;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1521 = dot(vec4(cbModelParam._m0[40u]), vec4(_1476, _1477, _1478, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1534 = (_1530 * cbModelParam._m0[1u].x) + (_1519 * (1.0 - cbModelParam._m0[1u].x));
    float _1544 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1544 : min(cbModelParam._m0[25u].z, _1544));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1593 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1597 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1601 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1604 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1607 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1610 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1638;
        if (_1604 > 0.0)
        {
            _1638 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1638 = frontier_phi_19_17_ladder;
        }
        float _1813;
        if (_1607 > 0.0)
        {
            _1813 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1813 = frontier_phi_28_24_ladder;
        }
        float _2108;
        if (_1610 > 0.0)
        {
            _2108 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2108 = frontier_phi_40_35_ladder;
        }
        float _2110 = isnan(_1813) ? _1638 : (isnan(_1638) ? _1813 : min(_1638, _1813));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1604) + _1593;
        float _2116 = (_2111 * _1607) + _1597;
        float _2117 = (_2111 * _1610) + _1601;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1545);
            frontier_phi_18_40_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1626 = frontier_phi_18_40_ladder_2;
        _1628 = frontier_phi_18_40_ladder_1;
        _1630 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1545);
        _1626 = _1614.x * cbModelParam._m0[1u].y;
        _1628 = _1614.y * cbModelParam._m0[1u].y;
        _1630 = _1614.z * cbModelParam._m0[1u].y;
    }
    float _1634 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1634 : min(cbModelParam._m0[25u].w, _1634));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1692 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1696 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1700 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1703 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1706 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1709 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1818;
        if (_1703 > 0.0)
        {
            _1818 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1818 = frontier_phi_30_26_ladder;
        }
        float _2135;
        if (_1706 > 0.0)
        {
            _2135 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2135 = frontier_phi_42_37_ladder;
        }
        float _2473;
        if (_1709 > 0.0)
        {
            _2473 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2473 = frontier_phi_52_49_ladder;
        }
        float _2475 = isnan(_2135) ? _1818 : (isnan(_1818) ? _2135 : min(_1818, _2135));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1703) + _1692;
        float _2481 = (_2476 * _1706) + _1696;
        float _2482 = (_2476 * _1709) + _1700;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1635);
            frontier_phi_27_52_ladder = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2604.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2604.x * cbModelParam._m0[1u].z;
        }
        _1728 = frontier_phi_27_52_ladder_2;
        _1730 = frontier_phi_27_52_ladder_1;
        _1732 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1635);
        _1728 = _1712.x * cbModelParam._m0[1u].z;
        _1730 = _1712.y * cbModelParam._m0[1u].z;
        _1732 = _1712.z * cbModelParam._m0[1u].z;
    }
    float _1745 = (((_727 * _674) + _728) * _688) * ((cbModelParam._m0[1u].w * (_1728 - _1626)) + _1626);
    float _1747 = (((_727 * _676) + _728) * _688) * ((cbModelParam._m0[1u].w * (_1730 - _1628)) + _1628);
    float _1749 = (((_727 * _677) + _728) * _688) * ((cbModelParam._m0[1u].w * (_1732 - _1630)) + _1630);
    float _1752 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, _1745 * cbSceneParam._m0[91u].x));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1805 = _1792 / _1804;
    float _1806 = _1796 / _1804;
    float _1807 = _1800 / _1804;
    float _1954;
    float _1955;
    float _1956;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1834 = ((uint(_1807 > cbSceneParam._m0[59u].y) + uint(_1807 > cbSceneParam._m0[59u].x)) + uint(_1807 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1835 = _1834 + 43u;
        uint _1843 = _1834 + 44u;
        uint _1851 = _1834 + 45u;
        uint _1859 = _1834 + 46u;
        float _1870 = fma(_1804, cbSceneParam._m0[_1835].w, fma(_1800, cbSceneParam._m0[_1835].z, fma(_1796, cbSceneParam._m0[_1835].y, _1792 * cbSceneParam._m0[_1835].x)));
        float _1874 = fma(_1804, cbSceneParam._m0[_1843].w, fma(_1800, cbSceneParam._m0[_1843].z, fma(_1796, cbSceneParam._m0[_1843].y, _1792 * cbSceneParam._m0[_1843].x)));
        float _1882 = fma(_1804, cbSceneParam._m0[_1859].w, fma(_1800, cbSceneParam._m0[_1859].z, fma(_1796, cbSceneParam._m0[_1859].y, _1792 * cbSceneParam._m0[_1859].x)));
        float _1887 = cbSceneParam._m0[33u].z * _1882;
        float _1889 = cbSceneParam._m0[33u].w * _1882;
        float _1892 = fma(_1804, cbSceneParam._m0[_1851].w, fma(_1800, cbSceneParam._m0[_1851].z, fma(_1796, cbSceneParam._m0[_1851].y, _1792 * cbSceneParam._m0[_1851].x))) / _1882;
        float _1940 = (cbSceneParam._m0[33u].x - sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807))) * cbSceneParam._m0[33u].y;
        float _4381 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1947 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1887 + _1870) / _1882, (_1889 + _1874) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1889 + _1870) / _1882, (_1874 - _1887) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 - _1887) / _1882, (_1874 - _1889) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 - _1889) / _1882, (_1887 + _1874) / _1882), _1892), 0.0)).x), vec4(0.25)));
        _1954 = 1.0 - (_1947 * cbSceneParam._m0[34u].x);
        _1955 = 1.0 - (_1947 * cbSceneParam._m0[34u].y);
        _1956 = 1.0 - (_1947 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1954 = 1.0;
        _1955 = 1.0;
        _1956 = 1.0;
    }
    float _2020;
    float _2022;
    float _2024;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2008 = fma(_1804, cbSceneParam._m0[63u].w, fma(_1800, cbSceneParam._m0[63u].z, fma(_1796, cbSceneParam._m0[63u].y, _1792 * cbSceneParam._m0[63u].x)));
        float _2009 = fma(_1804, cbSceneParam._m0[60u].w, fma(_1800, cbSceneParam._m0[60u].z, fma(_1796, cbSceneParam._m0[60u].y, _1792 * cbSceneParam._m0[60u].x))) / _2008;
        float _2010 = fma(_1804, cbSceneParam._m0[61u].w, fma(_1800, cbSceneParam._m0[61u].z, fma(_1796, cbSceneParam._m0[61u].y, _1792 * cbSceneParam._m0[61u].x))) / _2008;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2009 >= cbSceneParam._m0[64u].x) && (_2010 >= cbSceneParam._m0[64u].y)) && (_2009 <= cbSceneParam._m0[64u].z)) && (_2010 <= cbSceneParam._m0[64u].w))
        {
            float _2148 = fma(_1804, cbSceneParam._m0[62u].w, fma(_1800, cbSceneParam._m0[62u].z, fma(_1796, cbSceneParam._m0[62u].y, _1792 * cbSceneParam._m0[62u].x))) / _2008;
            float _2152 = isnan(cbSceneParam._m0[41u].w) ? _2148 : (isnan(_2148) ? cbSceneParam._m0[41u].w : max(_2148, cbSceneParam._m0[41u].w));
            float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807))) * cbSceneParam._m0[33u].y;
            float _4397 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
            float _2202 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2009, cbSceneParam._m0[33u].w + _2010), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2009, _2010 - cbSceneParam._m0[33u].z), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2009 - cbSceneParam._m0[33u].z, _2010 - cbSceneParam._m0[33u].w), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2009 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2010), _2152), 0.0)).x), vec4(0.25)));
            float _2206 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
            float _2207 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
            float _2208 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2207) ? _1955 : (isnan(_1955) ? _2207 : min(_1955, _2207));
            frontier_phi_39_38_ladder_1 = isnan(_2206) ? _1954 : (isnan(_1954) ? _2206 : min(_1954, _2206));
            frontier_phi_39_38_ladder_2 = isnan(_2208) ? _1956 : (isnan(_1956) ? _2208 : min(_1956, _2208));
        }
        else
        {
            frontier_phi_39_38_ladder = _1955;
            frontier_phi_39_38_ladder_1 = _1954;
            frontier_phi_39_38_ladder_2 = _1956;
        }
        _2020 = frontier_phi_39_38_ladder_1;
        _2022 = frontier_phi_39_38_ladder;
        _2024 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2020 = _1954;
        _2022 = _1955;
        _2024 = _1956;
    }
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _688 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2067 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2071 = _2031 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_518, _519, _520));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_518, _519, _520));
    float _4433 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4444 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2048].x * _2054) * _2092) + (((cbLight._m0[_2058].x * _2020) * _2067) * _2090);
    float _2100 = ((_2054 * cbLight._m0[_2048].y) * _2092) + (((cbLight._m0[_2058].y * _2022) * _2067) * _2090);
    float _2101 = ((_2054 * cbLight._m0[_2048].z) * _2092) + (((cbLight._m0[_2058].z * _2024) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2107)
    {
        _2209 = _2099;
        _2211 = _2100;
        _2213 = _2101;
    }
    else
    {
        uint _2217 = _2031 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4455 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2236 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2099;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2100;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2101;
    }
    bool _2216 = _2105.y == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2216)
    {
        _2271 = _2209;
        _2273 = _2211;
        _2275 = _2213;
    }
    else
    {
        uint _2444 = _2031 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4471 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2463 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2271 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2209;
        _2273 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2211;
        _2275 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2213;
    }
    uint _2278 = _2031 + 8u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _604) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2031].x + _402;
    float _2294 = cbLight._m0[_2031].y + _403;
    float _2295 = cbLight._m0[_2031].z + _404;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2031].xyz));
    float _4487 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _2307 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2308 = dot(vec3(_518, _519, _520), vec3(_2300, _2301, _2302));
    float _4509 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2300, _2301, _2302));
    float _4520 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2292 * _2292;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2329 = 0.959999978542327880859375 - _671;
    float _2331 = 0.959999978542327880859375 - _672;
    float _2332 = 0.959999978542327880859375 - _673;
    float _2339 = 1.0 - _2292;
    float _2350 = (0.5 / (((_2307 * ((_2306 * _2339) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2339) + _2292) * _2306))) * _2306;
    float _4531 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    uint _2366 = _2031 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _604) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2071].x + _402;
    float _2380 = cbLight._m0[_2071].y + _403;
    float _2381 = cbLight._m0[_2071].z + _404;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2071].xyz));
    float _4542 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2393 = dot(vec3(_518, _519, _520), vec3(_2386, _2387, _2388));
    float _4553 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2386, _2387, _2388));
    float _4564 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2419 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2307 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2419) + _2378) * _2392))) * _2392;
    float _4575 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2441 = (((((_2412 * _2329) + _674) * cbLight._m0[_2366].x) * _2431) * _2054) + ((((cbLight._m0[_2278].x * _2020) * ((_2328 * _2329) + _674)) * _2352) * _2067);
    float _2442 = (((((_2412 * _2331) + _676) * cbLight._m0[_2366].y) * _2431) * _2054) + ((((cbLight._m0[_2278].y * _2022) * ((_2328 * _2331) + _676)) * _2352) * _2067);
    float _2443 = (((((_2412 * _2332) + _677) * cbLight._m0[_2366].z) * _2431) * _2054) + ((((cbLight._m0[_2278].z * _2024) * ((_2328 * _2332) + _677)) * _2352) * _2067);
    float _2499;
    float _2501;
    float _2503;
    if (_2107)
    {
        _2499 = _2441;
        _2501 = _2442;
        _2503 = _2443;
    }
    else
    {
        uint _2505 = _2031 + 2u;
        uint _2509 = _2031 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _604) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _402;
        float _2526 = cbLight._m0[_2505].y + _403;
        float _2527 = cbLight._m0[_2505].z + _404;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2505].xyz));
        float _4586 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2539 = dot(vec3(_518, _519, _520), vec3(_2532, _2533, _2534));
        float _4597 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4608 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2307 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2565) + _2524) * _2538))) * _2538;
        float _4619 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2499 = (((((_2558 * _2329) + _674) * cbLight._m0[_2509].x) * _2577) * _2578) + _2441;
        _2501 = (((((_2558 * _2331) + _676) * cbLight._m0[_2509].y) * _2577) * _2578) + _2442;
        _2503 = (((((_2558 * _2332) + _677) * cbLight._m0[_2509].z) * _2577) * _2578) + _2443;
    }
    float _2609;
    float _2611;
    float _2613;
    if (_2216)
    {
        _2609 = _2499;
        _2611 = _2501;
        _2613 = _2503;
    }
    else
    {
        uint _2620 = _2031 + 3u;
        uint _2624 = _2031 + 11u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _604) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _402;
        float _2641 = cbLight._m0[_2620].y + _403;
        float _2642 = cbLight._m0[_2620].z + _404;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2620].xyz));
        float _4635 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2654 = dot(vec3(_518, _519, _520), vec3(_2647, _2648, _2649));
        float _4646 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4657 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2307 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2680) + _2639) * _2653))) * _2653;
        float _4668 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2609 = (((((_2673 * _2329) + _674) * cbLight._m0[_2624].x) * _2692) * _2693) + _2499;
        _2611 = (((((_2673 * _2331) + _676) * cbLight._m0[_2624].y) * _2692) * _2693) + _2501;
        _2613 = (((((_2673 * _2332) + _677) * cbLight._m0[_2624].z) * _2692) * _2693) + _2503;
    }
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_2029.y == 0u)
    {
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2715)));
        float _2736 = (log2(_1807 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
        }
        else
        {
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            uint _3038 = 0u;
            uint _3047;
            bool _3048;
            for (;;)
            {
                _3047 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                _3048 = _3047 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3048)
                {
                    frontier_phi_73_pred = _3037;
                    frontier_phi_73_pred_1 = _3036;
                    frontier_phi_73_pred_2 = _3035;
                    frontier_phi_73_pred_3 = _3034;
                    frontier_phi_73_pred_4 = _3033;
                    frontier_phi_73_pred_5 = _3032;
                }
                else
                {
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    uint _3183;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3047;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3187 = uint(findLSB(_3183)) + (_3038 << 5u);
                        uint _3184 = (_3183 + 4294967295u) & _3183;
                        uint _3189 = _3187 * 48u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3209 = (_3187 * 48u) + 4u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3228 = (_3187 * 48u) + 8u;
                        vec3 _3239 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x));
                        float _3243 = _3203.x - _1805;
                        float _3244 = _3203.y - _1806;
                        float _3245 = _3203.z - _1807;
                        float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                        float _3249 = inversesqrt(_3246);
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3253 = dot(vec3(_585, _588, _591), vec3(_3250, _3251, _3252));
                        float _3258 = 1.0 - (_3246 * _3203.w);
                        float _4694 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3260 = sqrt(_3246) * _3222.w;
                        float _3263 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3253) + _3264;
                        float _3270 = _3260 * _3260;
                        float _3274 = ((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3259) / ((_3270 * 0.699999988079071044921875) + 1.0);
                        float _3278 = (-0.0) - _1805;
                        float _3279 = (-0.0) - _1806;
                        float _3280 = (-0.0) - _1807;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3294 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                        float _3295 = 1.0 - _709;
                        float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                        float _3303 = _3302 * _3302;
                        float _3304 = _3303 * _3303;
                        float _3305 = _3285 + _3250;
                        float _3306 = _3286 + _3251;
                        float _3307 = _3287 + _3252;
                        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                        float _3315 = dot(vec3(_585, _588, _591), vec3(_3285, _3286, _3287));
                        float _4710 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3319 = dot(vec3(_585, _588, _591), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                        float _4721 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                        float _3327 = _3263 * _3303;
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3253) + _3328;
                        float _4732 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3333 = 1.0 - _3303;
                        float _3343 = (0.5 / (((_3332 * ((_3318 * _3333) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3303) * _3318))) * _3332;
                        float _4743 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3354 = (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3326 * _3326) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125))) * _3259;
                        _3107 = (_3274 * _3222.x) + _3180;
                        _3108 = (_3274 * _3222.y) + _3181;
                        _3109 = (_3274 * _3222.z) + _3182;
                        _3104 = (_3354 * _3239.x) + _3177;
                        _3105 = (_3354 * _3239.y) + _3178;
                        _3106 = (_3354 * _3239.z) + _3179;
                        if (_3184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3184;
                        }
                    }
                    frontier_phi_73_pred = _3109;
                    frontier_phi_73_pred_1 = _3108;
                    frontier_phi_73_pred_2 = _3107;
                    frontier_phi_73_pred_3 = _3106;
                    frontier_phi_73_pred_4 = _3105;
                    frontier_phi_73_pred_5 = _3104;
                }
                _2883 = frontier_phi_73_pred;
                _2881 = frontier_phi_73_pred_1;
                _2879 = frontier_phi_73_pred_2;
                _2877 = frontier_phi_73_pred_3;
                _2875 = frontier_phi_73_pred_4;
                _2873 = frontier_phi_73_pred_5;
                uint _3039 = _3038 + 1u;
                if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3032 = _2873;
                    _3033 = _2875;
                    _3034 = _2877;
                    _3035 = _2879;
                    _3036 = _2881;
                    _3037 = _2883;
                    _3038 = _3039;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
        }
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.z;
        uint _2889 = (_2887 >> 8u) & 15u;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((4294967295u << _2889) & _2746) == 0u)
        {
            _3000 = _2872;
            _3002 = _2874;
            _3004 = _2876;
            _3006 = _2878;
            _3008 = _2880;
            _3010 = _2882;
        }
        else
        {
            float _3025 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
            float _3026 = _3025 * _1805;
            float _3027 = _3025 * _1806;
            float _3028 = _3025 * _1807;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2889 < ((_2887 >> 12u) & 15u))
            {
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3160 = _2872;
                float _3161 = _2874;
                float _3162 = _2876;
                float _3163 = _2878;
                float _3164 = _2880;
                float _3165 = _2882;
                uint _3166 = _2889;
                uint _3175;
                bool _3176;
                for (;;)
                {
                    _3175 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                    _3176 = _3175 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3176)
                    {
                        frontier_phi_84_pred = _3164;
                        frontier_phi_84_pred_1 = _3163;
                        frontier_phi_84_pred_2 = _3162;
                        frontier_phi_84_pred_3 = _3161;
                        frontier_phi_84_pred_4 = _3160;
                        frontier_phi_84_pred_5 = _3165;
                    }
                    else
                    {
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3381 = _3160;
                        float _3382 = _3161;
                        float _3383 = _3162;
                        float _3384 = _3163;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        uint _3387 = _3175;
                        uint _3388;
                        vec4 _3413;
                        float _3414;
                        vec4 _3429;
                        vec3 _3441;
                        vec4 _3457;
                        vec4 _3473;
                        float _3520;
                        bool _3521;
                        for (;;)
                        {
                            uint _3398 = ((_3166 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3387));
                            _3388 = (_3387 + 4294967295u) & _3387;
                            uint _3400 = _3398 * 40u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3414 = _3413.w;
                            uint _3416 = (_3398 * 40u) + 4u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3398 * 40u) + 8u;
                            _3441 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x));
                            uint _3444 = (_3398 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3460 = (_3398 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3476 = (_3398 * 40u) + 24u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3495 = (_3398 * 40u) + 28u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3520 = fma(_1807, _3508.z, fma(_1806, _3508.y, _3508.x * _1805)) + _3508.w;
                            _3521 = !((fma(_1807, _3489.z, fma(_1806, _3489.y, _3489.x * _1805)) + _3489.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3521)
                            {
                                float _3548 = _3413.x - _1805;
                                float _3549 = _3413.y - _1806;
                                float _3550 = _3413.z - _1807;
                                float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                                float _3554 = inversesqrt(_3551);
                                float _3555 = _3554 * _3548;
                                float _3556 = _3554 * _3549;
                                float _3557 = _3554 * _3550;
                                float _3561 = 1.0 - (_3551 / (_3414 * _3414));
                                float _4754 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3566 = sqrt(_3551) * _3429.w;
                                float _3568 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                                float _3569 = _3568 * _3568;
                                float _3572 = ((1.0 - _3569) * dot(vec3(_3555, _3556, _3557), vec3(_585, _588, _591))) + _3569;
                                float _3575 = _3566 * _3566;
                                float _3579 = (fma(_1807, _3457.z, fma(_1806, _3457.y, _3457.x * _1805)) + _3457.w) / _3520;
                                float _3580 = (fma(_1807, _3473.z, fma(_1806, _3473.y, _3473.x * _1805)) + _3473.w) / _3520;
                                float _3584 = 1.0 - dot(vec2(_3579, _3580), vec2(_3579, _3580));
                                float _4770 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3586 = _3585 * (((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3562) / ((_3575 * 0.699999988079071044921875) + 1.0));
                                float _3598 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                                float _3599 = 1.0 - _709;
                                float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                                float _3607 = _3606 * _3606;
                                float _3608 = _3607 * _3607;
                                float _3609 = _3555 - _3026;
                                float _3610 = _3556 - _3027;
                                float _3611 = _3557 - _3028;
                                float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                                float _3619 = dot(vec3(_585, _588, _591), vec3((-0.0) - _3026, (-0.0) - _3027, (-0.0) - _3028));
                                float _4781 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3623 = dot(vec3(_585, _588, _591), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                                float _4792 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                                float _3631 = _3568 * _3607;
                                float _3632 = _3631 * _3631;
                                float _3638 = ((1.0 - _3632) * dot(vec3(_585, _588, _591), vec3(_3555, _3556, _3557))) + _3632;
                                float _4803 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3640 = 1.0 - _3607;
                                float _3650 = (0.5 / (((_3639 * ((_3622 * _3640) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3607) * _3622))) * _3639;
                                float _4814 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3660 = (_3585 * _3562) * (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3630 * _3630) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3586 * _3429.y;
                                frontier_phi_90_pred_1 = _3586 * _3429.x;
                                frontier_phi_90_pred_2 = _3660 * _3441.z;
                                frontier_phi_90_pred_3 = _3660 * _3441.y;
                                frontier_phi_90_pred_4 = _3660 * _3441.x;
                                frontier_phi_90_pred_5 = _3586 * _3429.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3668 = frontier_phi_90_pred;
                            _3667 = frontier_phi_90_pred_1;
                            _3666 = frontier_phi_90_pred_2;
                            _3665 = frontier_phi_90_pred_3;
                            _3664 = frontier_phi_90_pred_4;
                            _3669 = frontier_phi_90_pred_5;
                            _3371 = _3667 + _3384;
                            _3372 = _3668 + _3385;
                            _3373 = _3669 + _3386;
                            _3368 = _3664 + _3381;
                            _3369 = _3665 + _3382;
                            _3370 = _3666 + _3383;
                            if (_3388 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3388;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3372;
                        frontier_phi_84_pred_1 = _3371;
                        frontier_phi_84_pred_2 = _3370;
                        frontier_phi_84_pred_3 = _3369;
                        frontier_phi_84_pred_4 = _3368;
                        frontier_phi_84_pred_5 = _3373;
                    }
                    _3009 = frontier_phi_84_pred;
                    _3007 = frontier_phi_84_pred_1;
                    _3005 = frontier_phi_84_pred_2;
                    _3003 = frontier_phi_84_pred_3;
                    _3001 = frontier_phi_84_pred_4;
                    _3011 = frontier_phi_84_pred_5;
                    uint _3167 = _3166 + 1u;
                    if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3160 = _3001;
                        _3161 = _3003;
                        _3162 = _3005;
                        _3163 = _3007;
                        _3164 = _3009;
                        _3165 = _3011;
                        _3166 = _3167;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3011;
                frontier_phi_65_66_ladder_1 = _3007;
                frontier_phi_65_66_ladder_2 = _3009;
                frontier_phi_65_66_ladder_3 = _3003;
                frontier_phi_65_66_ladder_4 = _3001;
                frontier_phi_65_66_ladder_5 = _3005;
            }
            else
            {
                frontier_phi_65_66_ladder = _2882;
                frontier_phi_65_66_ladder_1 = _2878;
                frontier_phi_65_66_ladder_2 = _2880;
                frontier_phi_65_66_ladder_3 = _2874;
                frontier_phi_65_66_ladder_4 = _2872;
                frontier_phi_65_66_ladder_5 = _2876;
            }
            _3000 = frontier_phi_65_66_ladder_4;
            _3002 = frontier_phi_65_66_ladder_3;
            _3004 = frontier_phi_65_66_ladder_5;
            _3006 = frontier_phi_65_66_ladder_1;
            _3008 = frontier_phi_65_66_ladder_2;
            _3010 = frontier_phi_65_66_ladder;
        }
        float _3015 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2758 = (_3015 * _3006) + _2271;
        _2760 = (_3015 * _3008) + _2273;
        _2762 = (_3015 * _3010) + _2275;
        _2764 = ((_3000 * _674) * _3015) + _2609;
        _2766 = ((_3002 * _676) * _3015) + _2611;
        _2768 = ((_3004 * _677) * _3015) + _2613;
    }
    else
    {
        _2758 = _2271;
        _2760 = _2273;
        _2762 = _2275;
        _2764 = _2609;
        _2766 = _2611;
        _2768 = _2613;
    }
    uint _2774 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _2780 = cbInstanceData._m0[_2774].x * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].x) * _442.x) + ((cbMtdParam._m0[10u].x * TEXCOORD.w) * _415));
    float _2781 = cbInstanceData._m0[_2774].y * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].y) * _442.y) + ((cbMtdParam._m0[10u].y * TEXCOORD.w) * _415));
    float _2782 = cbInstanceData._m0[_2774].z * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].z) * _442.z) + ((cbMtdParam._m0[10u].z * TEXCOORD.w) * _415));
    float _4830 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4841 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4852 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4863 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _2788 = 0.959999978542327880859375 - (_647 * 0.959999978542327880859375);
    float _2796 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2758 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _688));
    float _2797 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2760 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _688));
    float _2798 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2762 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _688));
    float _2802 = _2788 - (exp2(log2(1.0 - _703) * 5.0) * _2788);
    float _2814 = ((_2796 + ((_2764 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2780) + ((((cbSceneParam._m0[72u].w * _483.x) * _2802) - _2796) * _513);
    float _2817 = ((_2781 + ((_2766 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2797) + ((((cbSceneParam._m0[72u].w * _483.y) * _2802) - _2797) * _513);
    float _2820 = ((_2782 + ((_2768 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2798) + ((((cbSceneParam._m0[72u].w * _483.z) * _2802) - _2798) * _513);
    float _2821 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2822 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2823 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2829 = cbMtdParam._m0[2u].x * _2780;
    float _2830 = cbMtdParam._m0[2u].y * _2781;
    float _2831 = cbMtdParam._m0[2u].z * _2782;
    float _4889 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2833 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _2838 = cbInstanceData._m0[_617 + 6u].w * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)));
    float _2843 = _560 / cbSceneParam._m0[86u].x;
    float _2844 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2858 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2860 = _2858.x;
    float _2861 = _2858.y;
    float _2862 = _2858.z;
    float _2863 = _2858.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2897 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2898 = _2897 / _542;
        float _2909 = _2898 * _292;
        float _2910 = _293 * _2898;
        float _2911 = (-0.0) - _2910;
        float _2912 = _2898 * _294;
        float _2914 = (cbSceneParam._m0[77u].w * _2911) / _2897;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2910;
        float _2922 = sqrt(((_2909 * _2909) + (_2910 * _2910)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2897)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2911 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3061 = 1.0 / cbSceneParam._m0[80u].x;
            float _3062 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3063 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            _3117 = ((abs(_2922 / _2911) * cbSceneParam._m0[80u].y) * ((((_3072 - _3073) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))))) * _3061)) - ((exp2(_2932 * _3072) - exp2(_2932 * _3073)) * _3061))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2863);
        _2934 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2860;
        _2936 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2861;
        _2938 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2862;
        _2940 = _3128 * _2863;
    }
    else
    {
        _2934 = _2860;
        _2936 = _2861;
        _2938 = _2862;
        _2940 = _2863;
    }
    bool _3155;
    vec4 _2949;
    vec4 _2971;
    float _2973;
    float _2977;
    float _2978;
    float _2979;
    float _2982;
    float _2985;
    float _2988;
    float _2989;
    bool _2999;
    for (;;)
    {
        _2949 = cbMatDynParam._m0[0u];
        float _2951 = roundEven(_2949.y);
        bool _2952 = _2951 == 3.0;
        float _2953 = log2(_2940);
        float _2957 = exp2(_2953 * cbSceneParam._m0[78u].x);
        float _2958 = exp2(_2953 * cbSceneParam._m0[78u].y);
        float _2959 = exp2(_2953 * cbSceneParam._m0[78u].z);
        float _2960 = _2957 * _2821;
        float _2961 = _2958 * _2822;
        float _2962 = _2959 * _2823;
        float _2969 = _549 + (-0.5);
        _2971 = cbMtdParam._m0[1u];
        _2973 = _2971.y * _2969;
        float _2976 = (_2951 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2977 = _2976 * (_2952 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2934)));
        _2978 = _2976 * (_2952 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2936)));
        _2979 = _2976 * (_2952 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2938)));
        _2982 = ((_2829 * _2833) * _2957) * _2976;
        _2985 = ((_2830 * _2833) * _2958) * _2976;
        _2988 = ((_2831 * _2833) * _2959) * _2976;
        _2989 = _2969 * 0.999000012874603271484375;
        _2999 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2999)
        {
            if ((cbInstanceData._m0[_617 + 7u].x + _2989) < 0.5)
            {
                _3155 = true;
                break;
            }
        }
        uint _3096 = _618 + uint(_2949.w);
        if ((cbInstanceData._m0[_3096].w < 1.0) && ((cbInstanceData._m0[_3096].w + _2989) < 0.5))
        {
            _3155 = true;
            break;
        }
        if ((_2973 + _318) < _2971.x)
        {
            _3155 = true;
            break;
        }
        _3155 = false;
        break;
    }
    float _3359;
    if (_3155)
    {
        discard_state = true;
        _3359 = 0.0;
    }
    else
    {
        _3359 = _2838;
    }
    SV_Target.x = _2977;
    SV_Target.y = _2978;
    SV_Target.z = _2979;
    SV_Target.w = _3359;
    SV_Target_1.x = _2982;
    SV_Target_1.y = _2985;
    SV_Target_1.z = _2988;
    SV_Target_1.w = _2838;
    discard_exit();
}


