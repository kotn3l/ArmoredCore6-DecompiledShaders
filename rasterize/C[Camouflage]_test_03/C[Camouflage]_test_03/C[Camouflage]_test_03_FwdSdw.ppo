#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    vec4 _308 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _308.w;
    float _315 = _308.x * cbMtdParam._m0[9u].x;
    float _316 = _308.y * cbMtdParam._m0[9u].y;
    float _317 = _308.z * cbMtdParam._m0[9u].z;
    vec4 _333 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _336 = _333.x + cbMtdParam._m0[12u].w;
    vec4 _352 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _360 = (_352.x * 2.0) + (-1.0);
    float _362 = (_352.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_360, _362), vec2(_360, _362));
    float _3717 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    float _372 = fma(_369, _231, fma(_362, _223 * TANGENT.x, (_209 * _201) * _360));
    float _375 = fma(_369, _232, fma(_362, _223 * TANGENT.y, (_209 * _202) * _360));
    float _378 = fma(_369, _233, fma(_362, _223 * TANGENT.z, (_209 * _203) * _360));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _386 = _352.z + cbMtdParam._m0[13u].x;
    float _397 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _398 = _397 * _288;
    float _399 = _397 * _289;
    float _400 = _397 * _290;
    float _404 = dot(vec4(_398, _399, _400, 0.0), vec4(_383, _384, _385, 0.0)) - cbMtdParam._m0[13u].y;
    float _3728 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _411 = exp2(log2(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _438 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _466 = (_457 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _383);
    float _467 = (_458 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _384);
    float _474 = isnan(cbInstanceData._m0[8u].x) ? _466 : (isnan(_466) ? cbInstanceData._m0[8u].x : max(_466, cbInstanceData._m0[8u].x));
    float _475 = isnan(cbInstanceData._m0[8u].y) ? _467 : (isnan(_467) ? cbInstanceData._m0[8u].y : max(_467, cbInstanceData._m0[8u].y));
    vec4 _479 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _474 : (isnan(_474) ? cbInstanceData._m0[8u].z : min(_474, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _475 : (isnan(_475) ? cbInstanceData._m0[8u].w : min(_475, cbInstanceData._m0[8u].w))));
    vec4 _504 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _507 = _504.x + cbMtdParam._m0[12u].x;
    float _508 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
    float _513 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _514 = _513 * _383;
    float _515 = _513 * _384;
    float _516 = _513 * _385;
    float _3774 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _517 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _518 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3807 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3818 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3829 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _522 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _540 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _542 = _540.w;
    float _563 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _566 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _569 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    vec4 _571 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _582 = (((_571.y - _518) + (_571.w * _518)) * cbMtdParam._m0[3u].x) + _518;
    uint _595 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _595 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3840 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    vec4 _609 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _614 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _625 = (((_614.x - _522) + (_614.w * _522)) * cbMtdParam._m0[3u].x) + _522;
    float _638 = (cbMtdParam._m0[3u].x * (((_606 * _542) - _606) + _609.x)) + _606;
    float _639 = (cbMtdParam._m0[3u].x * (((_607 * _542) - _607) + _609.y)) + _607;
    float _640 = (cbMtdParam._m0[3u].x * (((_608 * _542) - _608) + _609.z)) + _608;
    float _641 = 1.0 - _625;
    float _642 = _641 * _638;
    float _643 = _641 * _639;
    float _644 = _641 * _640;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _625;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _625;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _625;
    float _652 = _649 + 0.039999999105930328369140625;
    float _654 = _650 + 0.039999999105930328369140625;
    float _655 = _651 + 0.039999999105930328369140625;
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _666 = _663.x * TEXCOORD_8;
    float _667 = dot(vec3(_514, _515, _516), vec3(_398, _399, _400));
    float _670 = _667 * 2.0;
    float _674 = (_670 * _514) - _398;
    float _675 = (_670 * _515) - _399;
    float _676 = (_670 * _516) - _400;
    float _680 = abs(dot(vec3(_398, _399, _400), vec3(_514, _515, _516)));
    float _3873 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _687 = sqrt(_582);
    float _699 = exp2((_687 * 5.0) * log2(1.0 - (_681 * 0.999000012874603271484375))) / (4.0 - (_687 * 3.0));
    float _705 = (1.0 - _699) * ((_687 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _706 = _699 * _687;
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _773 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _777 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _802 = _734 + _514;
        float _803 = _738 + _515;
        float _804 = _742 + _516;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_514, _515, _516), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3921 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_514, _515, _516), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3954 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_514, _515, _516), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3987 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1089 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1093 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1116 = _734 + _514;
        float _1117 = _738 + _515;
        float _1118 = _742 + _516;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_514, _515, _516), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4050 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_514, _515, _516), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4083 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_514, _515, _516), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4116 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _674 * 0.5;
    float _1423 = _675 * 0.5;
    float _1424 = _676 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1539 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1543 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1547 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1550 = fma(_676, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674));
        float _1553 = fma(_676, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674));
        float _1556 = fma(_676, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674));
        float _1584;
        if (_1550 > 0.0)
        {
            _1584 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1584 = frontier_phi_16_14_ladder;
        }
        float _1759;
        if (_1553 > 0.0)
        {
            _1759 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1759 = frontier_phi_25_21_ladder;
        }
        float _2054;
        if (_1556 > 0.0)
        {
            _2054 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2054 = frontier_phi_37_32_ladder;
        }
        float _2056 = isnan(_1759) ? _1584 : (isnan(_1584) ? _1759 : min(_1584, _1759));
        float _2057 = isnan(_2054) ? _2056 : (isnan(_2056) ? _2054 : min(_2056, _2054));
        float _2061 = (_2057 * _1550) + _1539;
        float _2062 = (_2057 * _1553) + _1543;
        float _2063 = (_2057 * _1556) + _1547;
        float _2064 = _2057 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2064;
        float _2068 = _2064 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 > _2068) || ((_2062 < _2066) || ((_2061 < _2066) || (_2061 > _2068))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2063, cbModelParam._m0[9u].z, fma(_2062, cbModelParam._m0[9u].y, _2061 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2063, cbModelParam._m0[10u].z, fma(_2062, cbModelParam._m0[10u].y, _2061 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2063, cbModelParam._m0[11u].z, fma(_2062, cbModelParam._m0[11u].y, _2061 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_15_37_ladder = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2208.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2208.z * cbModelParam._m0[1u].y;
        }
        _1572 = frontier_phi_15_37_ladder_1;
        _1574 = frontier_phi_15_37_ladder;
        _1576 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_674, _675, _676), _1491);
        _1572 = _1560.x * cbModelParam._m0[1u].y;
        _1574 = _1560.y * cbModelParam._m0[1u].y;
        _1576 = _1560.z * cbModelParam._m0[1u].y;
    }
    float _1580 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1580 : min(cbModelParam._m0[25u].w, _1580));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_676, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674));
        float _1652 = fma(_676, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674));
        float _1655 = fma(_676, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674));
        float _1764;
        if (_1649 > 0.0)
        {
            _1764 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1764 = frontier_phi_27_23_ladder;
        }
        float _2081;
        if (_1652 > 0.0)
        {
            _2081 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2081 = frontier_phi_39_34_ladder;
        }
        float _2419;
        if (_1655 > 0.0)
        {
            _2419 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2419 = frontier_phi_49_46_ladder;
        }
        float _2421 = isnan(_2081) ? _1764 : (isnan(_1764) ? _2081 : min(_1764, _2081));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1649) + _1638;
        float _2427 = (_2422 * _1652) + _1642;
        float _2428 = (_2422 * _1655) + _1646;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1581);
            frontier_phi_24_49_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_24_49_ladder_2;
        _1676 = frontier_phi_24_49_ladder_1;
        _1678 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_674, _675, _676), _1581);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1691 = (((_705 * _652) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1674 - _1572)) + _1572);
    float _1693 = (((_705 * _654) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1676 - _1574)) + _1574);
    float _1695 = (((_705 * _655) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1678 - _1576)) + _1576);
    float _1698 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1746 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1751 = _1738 / _1750;
    float _1752 = _1742 / _1750;
    float _1753 = _1746 / _1750;
    float _1900;
    float _1901;
    float _1902;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1780 = ((uint(_1753 > cbSceneParam._m0[59u].y) + uint(_1753 > cbSceneParam._m0[59u].x)) + uint(_1753 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1781 = _1780 + 43u;
        uint _1789 = _1780 + 44u;
        uint _1797 = _1780 + 45u;
        uint _1805 = _1780 + 46u;
        float _1816 = fma(_1750, cbSceneParam._m0[_1781].w, fma(_1746, cbSceneParam._m0[_1781].z, fma(_1742, cbSceneParam._m0[_1781].y, _1738 * cbSceneParam._m0[_1781].x)));
        float _1820 = fma(_1750, cbSceneParam._m0[_1789].w, fma(_1746, cbSceneParam._m0[_1789].z, fma(_1742, cbSceneParam._m0[_1789].y, _1738 * cbSceneParam._m0[_1789].x)));
        float _1828 = fma(_1750, cbSceneParam._m0[_1805].w, fma(_1746, cbSceneParam._m0[_1805].z, fma(_1742, cbSceneParam._m0[_1805].y, _1738 * cbSceneParam._m0[_1805].x)));
        float _1833 = cbSceneParam._m0[33u].z * _1828;
        float _1835 = cbSceneParam._m0[33u].w * _1828;
        float _1838 = fma(_1750, cbSceneParam._m0[_1797].w, fma(_1746, cbSceneParam._m0[_1797].z, fma(_1742, cbSceneParam._m0[_1797].y, _1738 * cbSceneParam._m0[_1797].x))) / _1828;
        float _1886 = (cbSceneParam._m0[33u].x - sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753))) * cbSceneParam._m0[33u].y;
        float _4242 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1893 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 + _1816) / _1828, (_1835 + _1820) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 + _1816) / _1828, (_1820 - _1833) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 - _1833) / _1828, (_1820 - _1835) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 - _1835) / _1828, (_1833 + _1820) / _1828), _1838), 0.0)).x), vec4(0.25)));
        _1900 = 1.0 - (_1893 * cbSceneParam._m0[34u].x);
        _1901 = 1.0 - (_1893 * cbSceneParam._m0[34u].y);
        _1902 = 1.0 - (_1893 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1900 = 1.0;
        _1901 = 1.0;
        _1902 = 1.0;
    }
    float _1966;
    float _1968;
    float _1970;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1954 = fma(_1750, cbSceneParam._m0[63u].w, fma(_1746, cbSceneParam._m0[63u].z, fma(_1742, cbSceneParam._m0[63u].y, _1738 * cbSceneParam._m0[63u].x)));
        float _1955 = fma(_1750, cbSceneParam._m0[60u].w, fma(_1746, cbSceneParam._m0[60u].z, fma(_1742, cbSceneParam._m0[60u].y, _1738 * cbSceneParam._m0[60u].x))) / _1954;
        float _1956 = fma(_1750, cbSceneParam._m0[61u].w, fma(_1746, cbSceneParam._m0[61u].z, fma(_1742, cbSceneParam._m0[61u].y, _1738 * cbSceneParam._m0[61u].x))) / _1954;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1955 >= cbSceneParam._m0[64u].x) && (_1956 >= cbSceneParam._m0[64u].y)) && (_1955 <= cbSceneParam._m0[64u].z)) && (_1956 <= cbSceneParam._m0[64u].w))
        {
            float _2094 = fma(_1750, cbSceneParam._m0[62u].w, fma(_1746, cbSceneParam._m0[62u].z, fma(_1742, cbSceneParam._m0[62u].y, _1738 * cbSceneParam._m0[62u].x))) / _1954;
            float _2098 = isnan(cbSceneParam._m0[41u].w) ? _2094 : (isnan(_2094) ? cbSceneParam._m0[41u].w : max(_2094, cbSceneParam._m0[41u].w));
            float _2141 = (cbSceneParam._m0[33u].x - sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753))) * cbSceneParam._m0[33u].y;
            float _4258 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
            float _2148 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1955, cbSceneParam._m0[33u].w + _1956), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1955, _1956 - cbSceneParam._m0[33u].z), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1955 - cbSceneParam._m0[33u].z, _1956 - cbSceneParam._m0[33u].w), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1955 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1956), _2098), 0.0)).x), vec4(0.25)));
            float _2152 = 1.0 - (_2148 * cbSceneParam._m0[34u].x);
            float _2153 = 1.0 - (_2148 * cbSceneParam._m0[34u].y);
            float _2154 = 1.0 - (_2148 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2153) ? _1901 : (isnan(_1901) ? _2153 : min(_1901, _2153));
            frontier_phi_36_35_ladder_1 = isnan(_2154) ? _1902 : (isnan(_1902) ? _2154 : min(_1902, _2154));
            frontier_phi_36_35_ladder_2 = isnan(_2152) ? _1900 : (isnan(_1900) ? _2152 : min(_1900, _2152));
        }
        else
        {
            frontier_phi_36_35_ladder = _1901;
            frontier_phi_36_35_ladder_1 = _1902;
            frontier_phi_36_35_ladder_2 = _1900;
        }
        _1966 = frontier_phi_36_35_ladder_2;
        _1968 = frontier_phi_36_35_ladder;
        _1970 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1966 = _1900;
        _1968 = _1901;
        _1970 = _1902;
    }
    uvec4 _1975 = floatBitsToUint(cbInstanceData._m0[_595 + 5u]);
    uint _1977 = _1975.x * 14u;
    uint _1978 = _1977 + 13u;
    float _1985 = _666 + (-1.0);
    float _1990 = (cbLight._m0[_1978].x * _1985) + 1.0;
    float _1991 = (cbLight._m0[_1978].y * _1985) + 1.0;
    float _1992 = (cbLight._m0[_1978].z * _1985) + 1.0;
    float _1993 = (cbLight._m0[_1978].w * _1985) + 1.0;
    uint _1994 = _1977 + 5u;
    float _2000 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2004 = _1977 + 4u;
    float _2013 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2017 = _1977 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_514, _515, _516));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_514, _515, _516));
    float _4294 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4305 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1994].x * _2000) * _2038) + (((cbLight._m0[_2004].x * _1966) * _2013) * _2036);
    float _2046 = ((_2000 * cbLight._m0[_1994].y) * _2038) + (((cbLight._m0[_2004].y * _1968) * _2013) * _2036);
    float _2047 = ((_2000 * cbLight._m0[_1994].z) * _2038) + (((cbLight._m0[_2004].z * _1970) * _2013) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1977 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2053)
    {
        _2155 = _2045;
        _2157 = _2046;
        _2159 = _2047;
    }
    else
    {
        uint _2163 = _1977 + 6u;
        float _2179 = (dot(vec3(cbLight._m0[_1977 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4316 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2182 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2155 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _2045;
        _2157 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _2046;
        _2159 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _2047;
    }
    bool _2162 = _2051.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2162)
    {
        _2217 = _2155;
        _2219 = _2157;
        _2221 = _2159;
    }
    else
    {
        uint _2390 = _1977 + 7u;
        float _2406 = (dot(vec3(cbLight._m0[_1977 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4332 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2409 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2217 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2155;
        _2219 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2157;
        _2221 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2159;
    }
    uint _2224 = _1977 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _582) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_1977].x + _398;
    float _2240 = cbLight._m0[_1977].y + _399;
    float _2241 = cbLight._m0[_1977].z + _400;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1977].xyz));
    float _4348 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _2253 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2254 = dot(vec3(_514, _515, _516), vec3(_2246, _2247, _2248));
    float _4370 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2246, _2247, _2248));
    float _4381 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
    float _2275 = 0.959999978542327880859375 - _649;
    float _2277 = 0.959999978542327880859375 - _650;
    float _2278 = 0.959999978542327880859375 - _651;
    float _2285 = 1.0 - _2238;
    float _2296 = (0.5 / (((_2253 * ((_2252 * _2285) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2285) + _2238) * _2252))) * _2252;
    float _4392 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2312 = _1977 + 9u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _582) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2017].x + _398;
    float _2326 = cbLight._m0[_2017].y + _399;
    float _2327 = cbLight._m0[_2017].z + _400;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2017].xyz));
    float _4403 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2339 = dot(vec3(_514, _515, _516), vec3(_2332, _2333, _2334));
    float _4414 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2332, _2333, _2334));
    float _4425 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2324 * _2324;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
    float _2365 = 1.0 - _2324;
    float _2375 = (0.5 / (((_2253 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2365) + _2324) * _2338))) * _2338;
    float _4436 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    float _2387 = (((((_2358 * _2275) + _652) * cbLight._m0[_2312].x) * _2377) * _2000) + ((((cbLight._m0[_2224].x * _1966) * ((_2274 * _2275) + _652)) * _2298) * _2013);
    float _2388 = (((((_2358 * _2277) + _654) * cbLight._m0[_2312].y) * _2377) * _2000) + ((((cbLight._m0[_2224].y * _1968) * ((_2274 * _2277) + _654)) * _2298) * _2013);
    float _2389 = (((((_2358 * _2278) + _655) * cbLight._m0[_2312].z) * _2377) * _2000) + ((((cbLight._m0[_2224].z * _1970) * ((_2274 * _2278) + _655)) * _2298) * _2013);
    float _2445;
    float _2447;
    float _2449;
    if (_2053)
    {
        _2445 = _2387;
        _2447 = _2388;
        _2449 = _2389;
    }
    else
    {
        uint _2451 = _1977 + 2u;
        uint _2455 = _1977 + 10u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _582) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _398;
        float _2472 = cbLight._m0[_2451].y + _399;
        float _2473 = cbLight._m0[_2451].z + _400;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2451].xyz));
        float _4447 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2485 = dot(vec3(_514, _515, _516), vec3(_2478, _2479, _2480));
        float _4458 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4469 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2253 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2511) + _2470) * _2484))) * _2484;
        float _4480 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2445 = (((((_2504 * _2275) + _652) * cbLight._m0[_2455].x) * _2523) * _2524) + _2387;
        _2447 = (((((_2504 * _2277) + _654) * cbLight._m0[_2455].y) * _2523) * _2524) + _2388;
        _2449 = (((((_2504 * _2278) + _655) * cbLight._m0[_2455].z) * _2523) * _2524) + _2389;
    }
    float _2555;
    float _2557;
    float _2559;
    if (_2162)
    {
        _2555 = _2445;
        _2557 = _2447;
        _2559 = _2449;
    }
    else
    {
        uint _2566 = _1977 + 3u;
        uint _2570 = _1977 + 11u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _582) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _398;
        float _2587 = cbLight._m0[_2566].y + _399;
        float _2588 = cbLight._m0[_2566].z + _400;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2566].xyz));
        float _4496 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2600 = dot(vec3(_514, _515, _516), vec3(_2593, _2594, _2595));
        float _4507 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4518 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
        float _2626 = 1.0 - _2585;
        float _2636 = (0.5 / (((_2253 * ((_2599 * _2626) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2626) + _2585) * _2599))) * _2599;
        float _4529 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2555 = (((((_2619 * _2275) + _652) * cbLight._m0[_2570].x) * _2638) * _2639) + _2445;
        _2557 = (((((_2619 * _2277) + _654) * cbLight._m0[_2570].y) * _2638) * _2639) + _2447;
        _2559 = (((((_2619 * _2278) + _655) * cbLight._m0[_2570].z) * _2638) * _2639) + _2449;
    }
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_1975.y == 0u)
    {
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.x;
        uint _2672 = uint((float(_2660.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _2661))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _2661)));
        float _2682 = (log2(_1753 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2683 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        uint _2686 = uint(isnan(14.0) ? _2683 : (isnan(_2683) ? 14.0 : min(_2683, 14.0)));
        uvec4 _2691 = texelFetch(g_lightClusterGridBuffer, int(((_2686 << 2u) + (_2672 << 6u)) >> 2u));
        uint _2692 = _2691.x;
        uint _2693 = _2660.z;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((((1u << ((_2693 >> 4u) & 15u)) + 4294967295u) & _2692) == 0u) || ((_2693 & 240u) == 0u))
        {
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
        }
        else
        {
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            uint _2976 = 0u;
            uint _2985;
            bool _2986;
            for (;;)
            {
                _2985 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                _2986 = _2985 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2986)
                {
                    frontier_phi_68_pred = _2975;
                    frontier_phi_68_pred_1 = _2974;
                    frontier_phi_68_pred_2 = _2973;
                    frontier_phi_68_pred_3 = _2971;
                    frontier_phi_68_pred_4 = _2970;
                    frontier_phi_68_pred_5 = _2972;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2985;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2976 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _1751;
                        float _3161 = _3120.y - _1752;
                        float _3162 = _3120.z - _1753;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_563, _566, _569), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4555 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _1751;
                        float _3196 = (-0.0) - _1752;
                        float _3197 = (-0.0) - _1753;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3211 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3212 = 1.0 - _687;
                        float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                        float _3220 = _3219 * _3219;
                        float _3221 = _3220 * _3220;
                        float _3222 = _3202 + _3167;
                        float _3223 = _3203 + _3168;
                        float _3224 = _3204 + _3169;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3232 = dot(vec3(_563, _566, _569), vec3(_3202, _3203, _3204));
                        float _4571 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3236 = dot(vec3(_563, _566, _569), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                        float _4582 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                        float _3244 = _3180 * _3220;
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3170) + _3245;
                        float _4593 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3250 = 1.0 - _3220;
                        float _3260 = (0.5 / (((_3249 * ((_3235 * _3250) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3220) * _3235))) * _3249;
                        float _4604 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3271 = (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) / ((_3243 * _3243) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3029 = (_3191 * _3139.x) + _3097;
                        _3030 = (_3191 * _3139.y) + _3098;
                        _3031 = (_3191 * _3139.z) + _3099;
                        _3026 = (_3271 * _3156.x) + _3094;
                        _3027 = (_3271 * _3156.y) + _3095;
                        _3028 = (_3271 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_68_pred = _3031;
                    frontier_phi_68_pred_1 = _3030;
                    frontier_phi_68_pred_2 = _3029;
                    frontier_phi_68_pred_3 = _3027;
                    frontier_phi_68_pred_4 = _3026;
                    frontier_phi_68_pred_5 = _3028;
                }
                _2829 = frontier_phi_68_pred;
                _2827 = frontier_phi_68_pred_1;
                _2825 = frontier_phi_68_pred_2;
                _2821 = frontier_phi_68_pred_3;
                _2819 = frontier_phi_68_pred_4;
                _2823 = frontier_phi_68_pred_5;
                uint _2977 = _2976 + 1u;
                if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2970 = _2819;
                    _2971 = _2821;
                    _2972 = _2823;
                    _2973 = _2825;
                    _2974 = _2827;
                    _2975 = _2829;
                    _2976 = _2977;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
        }
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.z;
        uint _2835 = (_2833 >> 8u) & 15u;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((4294967295u << _2835) & _2692) == 0u)
        {
            _2938 = _2818;
            _2940 = _2820;
            _2942 = _2822;
            _2944 = _2824;
            _2946 = _2826;
            _2948 = _2828;
        }
        else
        {
            float _2963 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
            float _2964 = _2963 * _1751;
            float _2965 = _2963 * _1752;
            float _2966 = _2963 * _1753;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2835 < ((_2833 >> 12u) & 15u))
            {
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _3077 = _2818;
                float _3078 = _2820;
                float _3079 = _2822;
                float _3080 = _2824;
                float _3081 = _2826;
                float _3082 = _2828;
                uint _3083 = _2835;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3093)
                    {
                        frontier_phi_74_pred = _3079;
                        frontier_phi_74_pred_1 = _3078;
                        frontier_phi_74_pred_2 = _3077;
                        frontier_phi_74_pred_3 = _3082;
                        frontier_phi_74_pred_4 = _3081;
                        frontier_phi_74_pred_5 = _3080;
                    }
                    else
                    {
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3289 = _3077;
                        float _3290 = _3078;
                        float _3291 = _3079;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        float _3294 = _3082;
                        uint _3295 = _3092;
                        uint _3296;
                        vec4 _3321;
                        float _3322;
                        vec4 _3337;
                        vec3 _3349;
                        vec4 _3365;
                        vec4 _3381;
                        float _3428;
                        bool _3429;
                        for (;;)
                        {
                            uint _3306 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3295));
                            _3296 = (_3295 + 4294967295u) & _3295;
                            uint _3308 = _3306 * 40u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3322 = _3321.w;
                            uint _3324 = (_3306 * 40u) + 4u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3306 * 40u) + 8u;
                            _3349 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x));
                            uint _3352 = (_3306 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3368 = (_3306 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3384 = (_3306 * 40u) + 24u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3403 = (_3306 * 40u) + 28u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3428 = fma(_1753, _3416.z, fma(_1752, _3416.y, _3416.x * _1751)) + _3416.w;
                            _3429 = !((fma(_1753, _3397.z, fma(_1752, _3397.y, _3397.x * _1751)) + _3397.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3429)
                            {
                                float _3456 = _3321.x - _1751;
                                float _3457 = _3321.y - _1752;
                                float _3458 = _3321.z - _1753;
                                float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                                float _3462 = inversesqrt(_3459);
                                float _3463 = _3462 * _3456;
                                float _3464 = _3462 * _3457;
                                float _3465 = _3462 * _3458;
                                float _3469 = 1.0 - (_3459 / (_3322 * _3322));
                                float _4615 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3474 = sqrt(_3459) * _3337.w;
                                float _3476 = 1.39999997615814208984375 / (_3474 + 1.39999997615814208984375);
                                float _3477 = _3476 * _3476;
                                float _3480 = ((1.0 - _3477) * dot(vec3(_3463, _3464, _3465), vec3(_563, _566, _569))) + _3477;
                                float _3483 = _3474 * _3474;
                                float _3487 = (fma(_1753, _3365.z, fma(_1752, _3365.y, _3365.x * _1751)) + _3365.w) / _3428;
                                float _3488 = (fma(_1753, _3381.z, fma(_1752, _3381.y, _3381.x * _1751)) + _3381.w) / _3428;
                                float _3492 = 1.0 - dot(vec2(_3487, _3488), vec2(_3487, _3488));
                                float _4631 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3494 = _3493 * (((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3470) / ((_3483 * 0.699999988079071044921875) + 1.0));
                                float _3506 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                                float _3507 = 1.0 - _687;
                                float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                                float _3515 = _3514 * _3514;
                                float _3516 = _3515 * _3515;
                                float _3517 = _3463 - _2964;
                                float _3518 = _3464 - _2965;
                                float _3519 = _3465 - _2966;
                                float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                                float _3527 = dot(vec3(_563, _566, _569), vec3((-0.0) - _2964, (-0.0) - _2965, (-0.0) - _2966));
                                float _4642 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3531 = dot(vec3(_563, _566, _569), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                                float _4653 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                                float _3539 = _3476 * _3515;
                                float _3540 = _3539 * _3539;
                                float _3546 = ((1.0 - _3540) * dot(vec3(_563, _566, _569), vec3(_3463, _3464, _3465))) + _3540;
                                float _4664 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3548 = 1.0 - _3515;
                                float _3558 = (0.5 / (((_3547 * ((_3530 * _3548) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3547 * _3548) + _3515) * _3530))) * _3547;
                                float _4675 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3568 = (_3493 * _3470) * (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) / ((_3538 * _3538) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3568 * _3349.z;
                                frontier_phi_80_pred_1 = _3568 * _3349.y;
                                frontier_phi_80_pred_2 = _3568 * _3349.x;
                                frontier_phi_80_pred_3 = _3494 * _3337.z;
                                frontier_phi_80_pred_4 = _3494 * _3337.y;
                                frontier_phi_80_pred_5 = _3494 * _3337.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3574 = frontier_phi_80_pred;
                            _3573 = frontier_phi_80_pred_1;
                            _3572 = frontier_phi_80_pred_2;
                            _3577 = frontier_phi_80_pred_3;
                            _3576 = frontier_phi_80_pred_4;
                            _3575 = frontier_phi_80_pred_5;
                            _3279 = _3575 + _3292;
                            _3280 = _3576 + _3293;
                            _3281 = _3577 + _3294;
                            _3276 = _3572 + _3289;
                            _3277 = _3573 + _3290;
                            _3278 = _3574 + _3291;
                            if (_3296 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3296;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3278;
                        frontier_phi_74_pred_1 = _3277;
                        frontier_phi_74_pred_2 = _3276;
                        frontier_phi_74_pred_3 = _3281;
                        frontier_phi_74_pred_4 = _3280;
                        frontier_phi_74_pred_5 = _3279;
                    }
                    _2943 = frontier_phi_74_pred;
                    _2941 = frontier_phi_74_pred_1;
                    _2939 = frontier_phi_74_pred_2;
                    _2949 = frontier_phi_74_pred_3;
                    _2947 = frontier_phi_74_pred_4;
                    _2945 = frontier_phi_74_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2939;
                        _3078 = _2941;
                        _3079 = _2943;
                        _3080 = _2945;
                        _3081 = _2947;
                        _3082 = _2949;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2947;
                frontier_phi_62_63_ladder_1 = _2945;
                frontier_phi_62_63_ladder_2 = _2943;
                frontier_phi_62_63_ladder_3 = _2949;
                frontier_phi_62_63_ladder_4 = _2941;
                frontier_phi_62_63_ladder_5 = _2939;
            }
            else
            {
                frontier_phi_62_63_ladder = _2826;
                frontier_phi_62_63_ladder_1 = _2824;
                frontier_phi_62_63_ladder_2 = _2822;
                frontier_phi_62_63_ladder_3 = _2828;
                frontier_phi_62_63_ladder_4 = _2820;
                frontier_phi_62_63_ladder_5 = _2818;
            }
            _2938 = frontier_phi_62_63_ladder_5;
            _2940 = frontier_phi_62_63_ladder_4;
            _2942 = frontier_phi_62_63_ladder_2;
            _2944 = frontier_phi_62_63_ladder_1;
            _2946 = frontier_phi_62_63_ladder;
            _2948 = frontier_phi_62_63_ladder_3;
        }
        float _2953 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
        _2704 = (_2953 * _2944) + _2217;
        _2706 = (_2953 * _2946) + _2219;
        _2708 = (_2953 * _2948) + _2221;
        _2710 = ((_2938 * _652) * _2953) + _2555;
        _2712 = ((_2940 * _654) * _2953) + _2557;
        _2714 = ((_2942 * _655) * _2953) + _2559;
    }
    else
    {
        _2704 = _2217;
        _2706 = _2219;
        _2708 = _2221;
        _2710 = _2555;
        _2712 = _2557;
        _2714 = _2559;
    }
    uint _2720 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _2726 = cbInstanceData._m0[_2720].x * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].x) * _438.x) + ((cbMtdParam._m0[10u].x * TEXCOORD.w) * _411));
    float _2727 = cbInstanceData._m0[_2720].y * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].y) * _438.y) + ((cbMtdParam._m0[10u].y * TEXCOORD.w) * _411));
    float _2728 = cbInstanceData._m0[_2720].z * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].z) * _438.z) + ((cbMtdParam._m0[10u].z * TEXCOORD.w) * _411));
    float _4691 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4702 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4713 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4724 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2734 = 0.959999978542327880859375 - (_625 * 0.959999978542327880859375);
    float _2742 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2704 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _666));
    float _2743 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2706 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _666));
    float _2744 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2708 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _666));
    float _2748 = _2734 - (exp2(log2(1.0 - _681) * 5.0) * _2734);
    float _2760 = ((_2742 + ((_2710 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + _2726) + ((((cbSceneParam._m0[72u].w * _479.x) * _2748) - _2742) * _509);
    float _2763 = ((_2727 + ((_2712 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + _2743) + ((((cbSceneParam._m0[72u].w * _479.y) * _2748) - _2743) * _509);
    float _2766 = ((_2728 + ((_2714 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + _2744) + ((((cbSceneParam._m0[72u].w * _479.z) * _2748) - _2744) * _509);
    float _4750 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2779 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2784 = cbInstanceData._m0[_595 + 6u].w * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)));
    float _2789 = _457 / cbSceneParam._m0[86u].x;
    float _2790 = _458 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _2843 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _2844 = _2843 / _538;
        float _2855 = _2844 * _288;
        float _2856 = _289 * _2844;
        float _2857 = (-0.0) - _2856;
        float _2858 = _2844 * _290;
        float _2860 = (cbSceneParam._m0[77u].w * _2857) / _2843;
        float _2861 = _2860 + cbSceneParam._m0[79u].w;
        float _2862 = cbSceneParam._m0[79u].w - _2856;
        float _2868 = sqrt(((_2855 * _2855) + (_2856 * _2856)) + (_2858 * _2858));
        float _2871 = (1.0 - (cbSceneParam._m0[77u].w / _2843)) * _2868;
        float _2876 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2878 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3039;
        if (abs((_2857 - _2860) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3039 = ((((_2861 > 0.0) ? exp2(_2876 * _2861) : (2.0 - exp2(_2878 * _2861))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2871;
        }
        else
        {
            float _2999 = 1.0 / cbSceneParam._m0[80u].x;
            float _3000 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : max(_2861, _2862));
            float _3001 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : min(_2861, _2862));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            _3039 = ((abs(_2868 / _2857) * cbSceneParam._m0[80u].y) * ((((_3010 - _3011) * 2.0) - ((exp2(_2876 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0)))) - exp2(_2876 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))))) * _2999)) - ((exp2(_2878 * _3010) - exp2(_2878 * _3011)) * _2999))) + (_2871 * cbSceneParam._m0[80u].z);
        }
        vec4 _3041 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3050 = exp2((_3039 * (-1.44269502162933349609375)) * (1.0 - _3041.w));
        float _3051 = log2(_3050);
        float _3067 = log2(_2809);
        _2880 = (exp2(_3067 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].x)) * _3041.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2882 = (exp2(_3067 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].y)) * _3041.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2884 = (exp2(_3067 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].z)) * _3041.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2886 = _3050 * _2809;
    }
    else
    {
        _2880 = _2806;
        _2882 = _2807;
        _2884 = _2808;
        _2886 = _2809;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2886);
    float _2903 = exp2(_2899 * cbSceneParam._m0[78u].x);
    float _2904 = exp2(_2899 * cbSceneParam._m0[78u].y);
    float _2905 = exp2(_2899 * cbSceneParam._m0[78u].z);
    float _2906 = _2903 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0)));
    float _2907 = _2904 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)));
    float _2908 = _2905 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0)));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2882)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2884)));
    SV_Target.w = _2784;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2726) * _2779) * _2903) * _2917;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2727) * _2779) * _2904) * _2917;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2728) * _2779) * _2905) * _2917;
    SV_Target_1.w = _2784;
}


