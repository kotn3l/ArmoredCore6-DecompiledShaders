#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_03_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1094;
float _3561;
float _3562;
float _3563;
float _3564;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    vec4 _310 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _310.w;
    float _317 = _310.x * cbMtdParam._m0[9u].x;
    float _318 = _310.y * cbMtdParam._m0[9u].y;
    float _319 = _310.z * cbMtdParam._m0[9u].z;
    vec4 _335 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _338 = _335.x + cbMtdParam._m0[12u].w;
    vec4 _354 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _362 = (_354.x * 2.0) + (-1.0);
    float _364 = (_354.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_362, _364), vec2(_362, _364));
    float _3573 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))));
    float _374 = fma(_371, _233, fma(_364, _225 * TANGENT.x, (_211 * _203) * _362));
    float _377 = fma(_371, _234, fma(_364, _225 * TANGENT.y, (_211 * _204) * _362));
    float _380 = fma(_371, _235, fma(_364, _225 * TANGENT.z, (_211 * _205) * _362));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _388 = _354.z + cbMtdParam._m0[13u].x;
    float _399 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _400 = _399 * _290;
    float _401 = _399 * _291;
    float _402 = _399 * _292;
    float _406 = dot(vec4(_400, _401, _402, 0.0), vec4(_385, _386, _387, 0.0)) - cbMtdParam._m0[13u].y;
    float _3584 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _413 = exp2(log2(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _440 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _468 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _385);
    float _469 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _386);
    float _476 = isnan(cbInstanceData._m0[8u].x) ? _468 : (isnan(_468) ? cbInstanceData._m0[8u].x : max(_468, cbInstanceData._m0[8u].x));
    float _477 = isnan(cbInstanceData._m0[8u].y) ? _469 : (isnan(_469) ? cbInstanceData._m0[8u].y : max(_469, cbInstanceData._m0[8u].y));
    vec4 _481 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _476 : (isnan(_476) ? cbInstanceData._m0[8u].z : min(_476, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _477 : (isnan(_477) ? cbInstanceData._m0[8u].w : min(_477, cbInstanceData._m0[8u].w))));
    vec4 _506 = texture(sampler2D(C_Camouflage_test_03_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _509 = _506.x + cbMtdParam._m0[12u].x;
    float _510 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _511 = isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0));
    float _515 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _516 = _515 * _385;
    float _517 = _515 * _386;
    float _518 = _515 * _387;
    float _3630 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _519 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _520 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3663 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3674 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3685 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _524 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _545 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _547 = _545.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _773 = sqrt(((_290 * _290) + (_291 * _291)) + (_292 * _292));
        float _779 = (cbMatDynParam._m0[5u].x * _773) + cbMatDynParam._m0[5u].y;
        float _3696 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _784 = (cbMatDynParam._m0[5u].z * _773) + cbMatDynParam._m0[5u].w;
        float _3707 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) - _780)) + _780) < ((_547 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _561 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _563 = _561.w;
    float _583 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _586 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _589 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    vec4 _591 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _602 = (((_591.y - _520) + (_591.w * _520)) * cbMtdParam._m0[3u].x) + _520;
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = _615 + 9u;
    uint _617 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _623 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_617].x;
    float _624 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_617].y;
    float _625 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_617].z;
    float _3718 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    vec4 _629 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _634 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _645 = (((_634.x - _524) + (_634.w * _524)) * cbMtdParam._m0[3u].x) + _524;
    float _658 = (cbMtdParam._m0[3u].x * (((_626 * _563) - _626) + _629.x)) + _626;
    float _659 = (cbMtdParam._m0[3u].x * (((_627 * _563) - _627) + _629.y)) + _627;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _563) - _628) + _629.z)) + _628;
    float _661 = 1.0 - _645;
    float _662 = _661 * _658;
    float _663 = _661 * _659;
    float _664 = _661 * _660;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _645;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _645;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _645;
    float _672 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _686 = _683.x * TEXCOORD_8;
    float _687 = dot(vec3(_516, _517, _518), vec3(_400, _401, _402));
    float _690 = _687 * 2.0;
    float _694 = (_690 * _516) - _400;
    float _695 = (_690 * _517) - _401;
    float _696 = (_690 * _518) - _402;
    float _700 = abs(dot(vec3(_400, _401, _402), vec3(_516, _517, _518)));
    float _3751 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _707 = sqrt(_602);
    float _719 = exp2((_707 * 5.0) * log2(1.0 - (_701 * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _725 = (1.0 - _719) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _726 = _719 * _707;
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _822 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _826 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _851 = _754 + _516;
        float _852 = _758 + _517;
        float _853 = _762 + _518;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_516, _517, _518), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3799 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_516, _517, _518), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3832 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_516, _517, _518), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3865 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1137 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1141 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1145 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1168 = _754 + _516;
        float _1169 = _758 + _517;
        float _1170 = _762 + _518;
        float _1180 = fma(_1170, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168)) - _1137;
        float _1181 = fma(_1170, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168)) - _1141;
        float _1182 = fma(_1170, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168)) - _1145;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1137 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1141 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[35u].z) + ((((((_1145 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1236 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1203.x + (-0.5));
        float _1238 = _1236 * (_1203.y + (-0.5));
        float _1239 = _1236 * (_1203.z + (-0.5));
        float _1246 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1210.x + (-0.5));
        float _1248 = _1246 * (_1210.y + (-0.5));
        float _1249 = _1246 * (_1210.z + (-0.5));
        float _1256 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1217.x + (-0.5));
        float _1258 = _1256 * (_1217.y + (-0.5));
        float _1259 = _1256 * (_1217.z + (-0.5));
        float _1266 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1224.x + (-0.5));
        float _1268 = _1266 * (_1224.y + (-0.5));
        float _1269 = _1266 * (_1224.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_516, _517, _518), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3928 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1300 + 1.0))) + _1305) * _1270;
        float _1315 = _1238 * 0.5;
        float _1316 = _1248 * 0.5;
        float _1317 = _1258 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_516, _517, _518), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3961 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1342 + 1.0))) + _1347) * _1271;
        float _1357 = _1239 * 0.5;
        float _1358 = _1249 * 0.5;
        float _1359 = _1259 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_516, _517, _518), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3994 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1384 + 1.0))) + _1389) * _1272;
        _1406 = _1239;
        _1407 = _1238;
        _1408 = _1237;
        _1409 = _1249;
        _1410 = _1248;
        _1411 = _1247;
        _1412 = _1259;
        _1413 = _1258;
        _1414 = _1257;
        _1415 = _1272;
        _1416 = _1271;
        _1417 = _1270;
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = _1094;
        _1415 = _1094;
        _1416 = _1094;
        _1417 = _1094;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1453 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1430));
    float _1474 = _694 * 0.5;
    float _1475 = _695 * 0.5;
    float _1476 = _696 * 0.5;
    float _1477 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1480 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1483 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1490 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1494 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1498 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1505 = dot(vec4(cbModelParam._m0[39u]), vec4(_1474, _1475, _1476, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1474, _1475, _1476, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1591 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1595 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1599 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1602 = fma(_696, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694));
        float _1605 = fma(_696, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694));
        float _1608 = fma(_696, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694));
        float _1636;
        if (_1602 > 0.0)
        {
            _1636 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1636 = frontier_phi_19_17_ladder;
        }
        float _1863;
        if (_1605 > 0.0)
        {
            _1863 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1863 = frontier_phi_28_24_ladder;
        }
        float _2120;
        if (_1608 > 0.0)
        {
            _2120 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2120 = frontier_phi_40_35_ladder;
        }
        float _2122 = isnan(_1863) ? _1636 : (isnan(_1636) ? _1863 : min(_1636, _1863));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1602) + _1591;
        float _2128 = (_2123 * _1605) + _1595;
        float _2129 = (_2123 * _1608) + _1599;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_18_40_ladder = _2257.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2257.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2257.x * cbModelParam._m0[1u].y;
        }
        _1624 = frontier_phi_18_40_ladder_2;
        _1626 = frontier_phi_18_40_ladder_1;
        _1628 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_694, _695, _696), _1543);
        _1624 = _1612.x * cbModelParam._m0[1u].y;
        _1626 = _1612.y * cbModelParam._m0[1u].y;
        _1628 = _1612.z * cbModelParam._m0[1u].y;
    }
    float _1632 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1632 : min(cbModelParam._m0[25u].w, _1632));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1690 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1694 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1698 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1701 = fma(_696, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694));
        float _1704 = fma(_696, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694));
        float _1707 = fma(_696, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694));
        float _1868;
        if (_1701 > 0.0)
        {
            _1868 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1868 = frontier_phi_30_26_ladder;
        }
        float _2147;
        if (_1704 > 0.0)
        {
            _2147 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2147 = frontier_phi_42_37_ladder;
        }
        float _2360;
        if (_1707 > 0.0)
        {
            _2360 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2360 = frontier_phi_51_48_ladder;
        }
        float _2362 = isnan(_2147) ? _1868 : (isnan(_1868) ? _2147 : min(_1868, _2147));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1701) + _1690;
        float _2368 = (_2363 * _1704) + _1694;
        float _2369 = (_2363 * _1707) + _1698;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2370;
        float _2373 = _2370 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2369 > _2373) || ((_2369 < _2371) || ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 < _2371) || (_2367 > _2373))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2369, cbModelParam._m0[17u].z, fma(_2368, cbModelParam._m0[17u].y, _2367 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2369, cbModelParam._m0[18u].z, fma(_2368, cbModelParam._m0[18u].y, _2367 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2369, cbModelParam._m0[19u].z, fma(_2368, cbModelParam._m0[19u].y, _2367 * cbModelParam._m0[19u].x))), _1633);
            frontier_phi_27_51_ladder = _2614.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2614.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2614.x * cbModelParam._m0[1u].z;
        }
        _1726 = frontier_phi_27_51_ladder_2;
        _1728 = frontier_phi_27_51_ladder_1;
        _1730 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_694, _695, _696), _1633);
        _1726 = _1710.x * cbModelParam._m0[1u].z;
        _1728 = _1710.y * cbModelParam._m0[1u].z;
        _1730 = _1710.z * cbModelParam._m0[1u].z;
    }
    float _1743 = (((_725 * _672) + _726) * _686) * ((cbModelParam._m0[1u].w * (_1726 - _1624)) + _1624);
    float _1745 = (((_725 * _674) + _726) * _686) * ((cbModelParam._m0[1u].w * (_1728 - _1626)) + _1626);
    float _1747 = (((_725 * _675) + _726) * _686) * ((cbModelParam._m0[1u].w * (_1730 - _1628)) + _1628);
    float _1750 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, _1743 * cbSceneParam._m0[91u].x));
    vec4 _1764 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_558, _559));
    float _1766 = _1764.w;
    float _1778 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1766);
    float _1779 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1766);
    float _1780 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1766);
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _686 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1822 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1826 = _1786 | 1u;
    float _1837 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_516, _517, _518));
    float _1840 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_516, _517, _518));
    float _4130 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _4141 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1845 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _1847 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _1854 = ((cbLight._m0[_1803].x * _1809) * _1847) + (((cbLight._m0[_1813].x * _1778) * _1822) * _1845);
    float _1855 = ((_1809 * cbLight._m0[_1803].y) * _1847) + (((cbLight._m0[_1813].y * _1779) * _1822) * _1845);
    float _1856 = ((_1809 * cbLight._m0[_1803].z) * _1847) + (((cbLight._m0[_1813].z * _1780) * _1822) * _1845);
    uvec4 _1860 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1862 = _1860.x == 0u;
    float _1873;
    float _1875;
    float _1877;
    if (_1862)
    {
        _1873 = _1854;
        _1875 = _1855;
        _1877 = _1856;
    }
    else
    {
        uint _1881 = _1786 + 6u;
        float _1897 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _4152 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1900 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1873 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1854;
        _1875 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1855;
        _1877 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1856;
    }
    bool _1880 = _1860.y == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1880)
    {
        _1918 = _1873;
        _1920 = _1875;
        _1922 = _1877;
    }
    else
    {
        uint _2091 = _1786 + 7u;
        float _2107 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4168 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2110 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1918 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _1873;
        _1920 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _1875;
        _1922 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _1877;
    }
    uint _1925 = _1786 + 8u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _602) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1786].x + _400;
    float _1941 = cbLight._m0[_1786].y + _401;
    float _1942 = cbLight._m0[_1786].z + _402;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1786].xyz));
    float _4184 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _1954 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _1955 = dot(vec3(_516, _517, _518), vec3(_1947, _1948, _1949));
    float _4206 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1947, _1948, _1949));
    float _4217 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1939 * _1939;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1975 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
    float _1976 = 0.959999978542327880859375 - _669;
    float _1978 = 0.959999978542327880859375 - _670;
    float _1979 = 0.959999978542327880859375 - _671;
    float _1986 = 1.0 - _1939;
    float _1997 = (0.5 / (((_1954 * ((_1953 * _1986) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _1986) + _1939) * _1953))) * _1953;
    float _4228 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    uint _2013 = _1786 + 9u;
    float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _602) * 0.949999988079071044921875);
    float _2025 = _2024 * _2024;
    float _2026 = cbLight._m0[_1826].x + _400;
    float _2027 = cbLight._m0[_1826].y + _401;
    float _2028 = cbLight._m0[_1826].z + _402;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2033 = _2032 * _2026;
    float _2034 = _2032 * _2027;
    float _2035 = _2032 * _2028;
    float _2036 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1826].xyz));
    float _4239 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2040 = dot(vec3(_516, _517, _518), vec3(_2033, _2034, _2035));
    float _4250 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_2033, _2034, _2035));
    float _4261 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2025 * _2025;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
    float _2066 = 1.0 - _2025;
    float _2076 = (0.5 / (((_1954 * ((_2039 * _2066) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2066) + _2025) * _2039))) * _2039;
    float _4272 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2078 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    float _2088 = (((((_2059 * _1976) + _672) * cbLight._m0[_2013].x) * _2078) * _1809) + ((((cbLight._m0[_1925].x * _1778) * ((_1975 * _1976) + _672)) * _1999) * _1822);
    float _2089 = (((((_2059 * _1978) + _674) * cbLight._m0[_2013].y) * _2078) * _1809) + ((((cbLight._m0[_1925].y * _1779) * ((_1975 * _1978) + _674)) * _1999) * _1822);
    float _2090 = (((((_2059 * _1979) + _675) * cbLight._m0[_2013].z) * _2078) * _1809) + ((((cbLight._m0[_1925].z * _1780) * ((_1975 * _1979) + _675)) * _1999) * _1822);
    float _2152;
    float _2154;
    float _2156;
    if (_1862)
    {
        _2152 = _2088;
        _2154 = _2089;
        _2156 = _2090;
    }
    else
    {
        uint _2158 = _1786 + 2u;
        uint _2162 = _1786 + 10u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _602) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _400;
        float _2179 = cbLight._m0[_2158].y + _401;
        float _2180 = cbLight._m0[_2158].z + _402;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2158].xyz));
        float _4283 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2192 = dot(vec3(_516, _517, _518), vec3(_2185, _2186, _2187));
        float _4294 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4305 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
        float _2218 = 1.0 - _2177;
        float _2228 = (0.5 / (((_1954 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2218) + _2177) * _2191))) * _2191;
        float _4316 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2152 = (((((_2211 * _1976) + _672) * cbLight._m0[_2162].x) * _2230) * _2231) + _2088;
        _2154 = (((((_2211 * _1978) + _674) * cbLight._m0[_2162].y) * _2230) * _2231) + _2089;
        _2156 = (((((_2211 * _1979) + _675) * cbLight._m0[_2162].z) * _2230) * _2231) + _2090;
    }
    float _2266;
    float _2268;
    float _2270;
    if (_1880)
    {
        _2266 = _2152;
        _2268 = _2154;
        _2270 = _2156;
    }
    else
    {
        uint _2277 = _1786 + 3u;
        uint _2281 = _1786 + 11u;
        float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _602) * 0.949999988079071044921875);
        float _2296 = _2295 * _2295;
        float _2297 = cbLight._m0[_2277].x + _400;
        float _2298 = cbLight._m0[_2277].y + _401;
        float _2299 = cbLight._m0[_2277].z + _402;
        float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
        float _2304 = _2303 * _2297;
        float _2305 = _2303 * _2298;
        float _2306 = _2303 * _2299;
        float _2307 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2277].xyz));
        float _4332 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2311 = dot(vec3(_516, _517, _518), vec3(_2304, _2305, _2306));
        float _4343 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2315 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2304, _2305, _2306));
        float _4354 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2319 = _2296 * _2296;
        float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
        float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
        float _2337 = 1.0 - _2296;
        float _2347 = (0.5 / (((_1954 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2337) + _2296) * _2310))) * _2310;
        float _4365 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2266 = (((((_2330 * _1976) + _672) * cbLight._m0[_2281].x) * _2349) * _2350) + _2152;
        _2268 = (((((_2330 * _1978) + _674) * cbLight._m0[_2281].y) * _2349) * _2350) + _2154;
        _2270 = (((((_2330 * _1979) + _675) * cbLight._m0[_2281].z) * _2349) * _2350) + _2156;
    }
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_1784.y == 0u)
    {
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2425;
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2425;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2425;
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.x;
        uint _2452 = uint((float(_2440.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2441))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2441)));
        float _2462 = (log2(_2428 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2463 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        uint _2466 = uint(isnan(14.0) ? _2463 : (isnan(_2463) ? 14.0 : min(_2463, 14.0)));
        uvec4 _2471 = texelFetch(g_lightClusterGridBuffer, int(((_2466 << 2u) + (_2452 << 6u)) >> 2u));
        uint _2472 = _2471.x;
        uint _2473 = _2440.z;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((((1u << ((_2473 >> 4u) & 15u)) + 4294967295u) & _2472) == 0u) || ((_2473 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            uint _2785 = 0u;
            uint _2794;
            bool _2795;
            for (;;)
            {
                _2794 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                _2795 = _2794 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2795)
                {
                    frontier_phi_68_pred = _2781;
                    frontier_phi_68_pred_1 = _2784;
                    frontier_phi_68_pred_2 = _2783;
                    frontier_phi_68_pred_3 = _2782;
                    frontier_phi_68_pred_4 = _2780;
                    frontier_phi_68_pred_5 = _2779;
                }
                else
                {
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    uint _2930;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2794;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    for (;;)
                    {
                        uint _2934 = uint(findLSB(_2930)) + (_2785 << 5u);
                        uint _2931 = (_2930 + 4294967295u) & _2930;
                        uint _2936 = _2934 * 48u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2956 = (_2934 * 48u) + 4u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2975 = (_2934 * 48u) + 8u;
                        vec3 _2986 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x));
                        float _2990 = _2950.x - _2426;
                        float _2991 = _2950.y - _2427;
                        float _2992 = _2950.z - _2428;
                        float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                        float _2996 = inversesqrt(_2993);
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3000 = dot(vec3(_583, _586, _589), vec3(_2997, _2998, _2999));
                        float _3005 = 1.0 - (_2993 * _2950.w);
                        float _4391 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3007 = sqrt(_2993) * _2969.w;
                        float _3010 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _3000) + _3011;
                        float _3017 = _3007 * _3007;
                        float _3021 = ((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3006) / ((_3017 * 0.699999988079071044921875) + 1.0);
                        float _3025 = (-0.0) - _2426;
                        float _3026 = (-0.0) - _2427;
                        float _3027 = (-0.0) - _2428;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3042 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                        float _3043 = 1.0 - _707;
                        float _3050 = sqrt(1.0 - ((1.0 - (_3043 * _3043)) * (1.0 - (_3042 * _3042))));
                        float _3051 = _3050 * _3050;
                        float _3052 = _3051 * _3051;
                        float _3053 = _3032 + _2997;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3063 = dot(vec3(_583, _586, _589), vec3(_3032, _3033, _3034));
                        float _4407 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3067 = dot(vec3(_583, _586, _589), vec3(_3059 * _3053, _3059 * _3054, _3059 * _3055));
                        float _4418 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3074 = ((_3070 * _3070) * (_3052 + (-1.0))) + 1.0;
                        float _3075 = _3010 * _3051;
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3000) + _3076;
                        float _4429 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3081 = 1.0 - _3051;
                        float _3091 = (0.5 / (((_3080 * ((_3066 * _3081) + _3051)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3051) * _3066))) * _3080;
                        float _4440 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3102 = (((_3052 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3074 * _3074) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125))) * _3006;
                        _2854 = (_3021 * _2969.x) + _2927;
                        _2855 = (_3021 * _2969.y) + _2928;
                        _2856 = (_3021 * _2969.z) + _2929;
                        _2851 = (_3102 * _2986.x) + _2924;
                        _2852 = (_3102 * _2986.y) + _2925;
                        _2853 = (_3102 * _2986.z) + _2926;
                        if (_2931 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2931;
                        }
                    }
                    frontier_phi_68_pred = _2853;
                    frontier_phi_68_pred_1 = _2856;
                    frontier_phi_68_pred_2 = _2855;
                    frontier_phi_68_pred_3 = _2854;
                    frontier_phi_68_pred_4 = _2852;
                    frontier_phi_68_pred_5 = _2851;
                }
                _2624 = frontier_phi_68_pred;
                _2630 = frontier_phi_68_pred_1;
                _2628 = frontier_phi_68_pred_2;
                _2626 = frontier_phi_68_pred_3;
                _2622 = frontier_phi_68_pred_4;
                _2620 = frontier_phi_68_pred_5;
                uint _2786 = _2785 + 1u;
                if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2779 = _2620;
                    _2780 = _2622;
                    _2781 = _2624;
                    _2782 = _2626;
                    _2783 = _2628;
                    _2784 = _2630;
                    _2785 = _2786;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
        }
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.z;
        uint _2636 = (_2634 >> 8u) & 15u;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((4294967295u << _2636) & _2472) == 0u)
        {
            _2747 = _2619;
            _2749 = _2621;
            _2751 = _2623;
            _2753 = _2625;
            _2755 = _2627;
            _2757 = _2629;
        }
        else
        {
            float _2772 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
            float _2773 = _2772 * _2426;
            float _2774 = _2772 * _2427;
            float _2775 = _2772 * _2428;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2636 < ((_2634 >> 12u) & 15u))
            {
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2907 = _2619;
                float _2908 = _2621;
                float _2909 = _2623;
                float _2910 = _2625;
                float _2911 = _2627;
                float _2912 = _2629;
                uint _2913 = _2636;
                uint _2922;
                bool _2923;
                for (;;)
                {
                    _2922 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                    _2923 = _2922 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2923)
                    {
                        frontier_phi_79_pred = _2912;
                        frontier_phi_79_pred_1 = _2911;
                        frontier_phi_79_pred_2 = _2910;
                        frontier_phi_79_pred_3 = _2909;
                        frontier_phi_79_pred_4 = _2908;
                        frontier_phi_79_pred_5 = _2907;
                    }
                    else
                    {
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3129 = _2907;
                        float _3130 = _2908;
                        float _3131 = _2909;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        uint _3135 = _2922;
                        uint _3136;
                        vec4 _3161;
                        float _3162;
                        vec4 _3177;
                        vec3 _3189;
                        vec4 _3205;
                        vec4 _3221;
                        float _3268;
                        bool _3269;
                        for (;;)
                        {
                            uint _3146 = ((_2913 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3135));
                            _3136 = (_3135 + 4294967295u) & _3135;
                            uint _3148 = _3146 * 40u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3162 = _3161.w;
                            uint _3164 = (_3146 * 40u) + 4u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3146 * 40u) + 8u;
                            _3189 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x));
                            uint _3192 = (_3146 * 40u) + 16u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3208 = (_3146 * 40u) + 20u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3224 = (_3146 * 40u) + 24u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3243 = (_3146 * 40u) + 28u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3268 = fma(_2428, _3256.z, fma(_2427, _3256.y, _3256.x * _2426)) + _3256.w;
                            _3269 = !((fma(_2428, _3237.z, fma(_2427, _3237.y, _3237.x * _2426)) + _3237.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3269)
                            {
                                float _3296 = _3161.x - _2426;
                                float _3297 = _3161.y - _2427;
                                float _3298 = _3161.z - _2428;
                                float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                                float _3302 = inversesqrt(_3299);
                                float _3303 = _3302 * _3296;
                                float _3304 = _3302 * _3297;
                                float _3305 = _3302 * _3298;
                                float _3309 = 1.0 - (_3299 / (_3162 * _3162));
                                float _4451 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3314 = sqrt(_3299) * _3177.w;
                                float _3316 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                                float _3317 = _3316 * _3316;
                                float _3320 = ((1.0 - _3317) * dot(vec3(_3303, _3304, _3305), vec3(_583, _586, _589))) + _3317;
                                float _3323 = _3314 * _3314;
                                float _3327 = (fma(_2428, _3205.z, fma(_2427, _3205.y, _3205.x * _2426)) + _3205.w) / _3268;
                                float _3328 = (fma(_2428, _3221.z, fma(_2427, _3221.y, _3221.x * _2426)) + _3221.w) / _3268;
                                float _3332 = 1.0 - dot(vec2(_3327, _3328), vec2(_3327, _3328));
                                float _4467 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3334 = _3333 * (((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3310) / ((_3323 * 0.699999988079071044921875) + 1.0));
                                float _3346 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                                float _3347 = 1.0 - _707;
                                float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                                float _3355 = _3354 * _3354;
                                float _3356 = _3355 * _3355;
                                float _3357 = _3303 - _2773;
                                float _3358 = _3304 - _2774;
                                float _3359 = _3305 - _2775;
                                float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                                float _3367 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2773, (-0.0) - _2774, (-0.0) - _2775));
                                float _4478 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3371 = dot(vec3(_583, _586, _589), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                                float _4489 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                                float _3379 = _3316 * _3355;
                                float _3380 = _3379 * _3379;
                                float _3386 = ((1.0 - _3380) * dot(vec3(_583, _586, _589), vec3(_3303, _3304, _3305))) + _3380;
                                float _4500 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3388 = 1.0 - _3355;
                                float _3398 = (0.5 / (((_3387 * ((_3370 * _3388) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3355) * _3370))) * _3387;
                                float _4511 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3408 = (_3333 * _3310) * (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) / ((_3378 * _3378) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3334 * _3177.z;
                                frontier_phi_85_pred_1 = _3334 * _3177.y;
                                frontier_phi_85_pred_2 = _3334 * _3177.x;
                                frontier_phi_85_pred_3 = _3408 * _3189.z;
                                frontier_phi_85_pred_4 = _3408 * _3189.y;
                                frontier_phi_85_pred_5 = _3408 * _3189.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_85_pred;
                            _3416 = frontier_phi_85_pred_1;
                            _3415 = frontier_phi_85_pred_2;
                            _3414 = frontier_phi_85_pred_3;
                            _3413 = frontier_phi_85_pred_4;
                            _3412 = frontier_phi_85_pred_5;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            _3116 = _3412 + _3129;
                            _3117 = _3413 + _3130;
                            _3118 = _3414 + _3131;
                            if (_3136 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3136;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3121;
                        frontier_phi_79_pred_1 = _3120;
                        frontier_phi_79_pred_2 = _3119;
                        frontier_phi_79_pred_3 = _3118;
                        frontier_phi_79_pred_4 = _3117;
                        frontier_phi_79_pred_5 = _3116;
                    }
                    _2758 = frontier_phi_79_pred;
                    _2756 = frontier_phi_79_pred_1;
                    _2754 = frontier_phi_79_pred_2;
                    _2752 = frontier_phi_79_pred_3;
                    _2750 = frontier_phi_79_pred_4;
                    _2748 = frontier_phi_79_pred_5;
                    uint _2914 = _2913 + 1u;
                    if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2907 = _2748;
                        _2908 = _2750;
                        _2909 = _2752;
                        _2910 = _2754;
                        _2911 = _2756;
                        _2912 = _2758;
                        _2913 = _2914;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2754;
                frontier_phi_60_61_ladder_1 = _2758;
                frontier_phi_60_61_ladder_2 = _2756;
                frontier_phi_60_61_ladder_3 = _2752;
                frontier_phi_60_61_ladder_4 = _2750;
                frontier_phi_60_61_ladder_5 = _2748;
            }
            else
            {
                frontier_phi_60_61_ladder = _2625;
                frontier_phi_60_61_ladder_1 = _2629;
                frontier_phi_60_61_ladder_2 = _2627;
                frontier_phi_60_61_ladder_3 = _2623;
                frontier_phi_60_61_ladder_4 = _2621;
                frontier_phi_60_61_ladder_5 = _2619;
            }
            _2747 = frontier_phi_60_61_ladder_5;
            _2749 = frontier_phi_60_61_ladder_4;
            _2751 = frontier_phi_60_61_ladder_3;
            _2753 = frontier_phi_60_61_ladder;
            _2755 = frontier_phi_60_61_ladder_2;
            _2757 = frontier_phi_60_61_ladder_1;
        }
        float _2762 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _2484 = (_2762 * _2753) + _1918;
        _2486 = (_2762 * _2755) + _1920;
        _2488 = (_2762 * _2757) + _1922;
        _2490 = ((_2747 * _672) * _2762) + _2266;
        _2492 = ((_2749 * _674) * _2762) + _2268;
        _2494 = ((_2751 * _675) * _2762) + _2270;
    }
    else
    {
        _2484 = _1918;
        _2486 = _1920;
        _2488 = _1922;
        _2490 = _2266;
        _2492 = _2268;
        _2494 = _2270;
    }
    uint _2500 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _2506 = cbInstanceData._m0[_2500].x * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].x) * _440.x) + ((cbMtdParam._m0[10u].x * TEXCOORD.w) * _413));
    float _2507 = cbInstanceData._m0[_2500].y * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].y) * _440.y) + ((cbMtdParam._m0[10u].y * TEXCOORD.w) * _413));
    float _2508 = cbInstanceData._m0[_2500].z * (((cbMtdParam._m0[13u].z * cbMtdParam._m0[11u].z) * _440.z) + ((cbMtdParam._m0[10u].z * TEXCOORD.w) * _413));
    float _4527 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4538 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4549 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4560 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _2514 = 0.959999978542327880859375 - (_645 * 0.959999978542327880859375);
    float _2522 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2484 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _686));
    float _2523 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2486 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _686));
    float _2524 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2488 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _686));
    float _2528 = _2514 - (exp2(log2(1.0 - _701) * 5.0) * _2514);
    float _2540 = ((_2522 + ((_2490 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + _2506) + ((((cbSceneParam._m0[72u].w * _481.x) * _2528) - _2522) * _511);
    float _2543 = ((_2507 + ((_2492 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + _2523) + ((((cbSceneParam._m0[72u].w * _481.y) * _2528) - _2523) * _511);
    float _2546 = ((_2508 + ((_2494 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + _2524) + ((((cbSceneParam._m0[72u].w * _481.z) * _2528) - _2524) * _511);
    float _2547 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2548 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2549 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2555 = cbMtdParam._m0[2u].x * _2506;
    float _2556 = cbMtdParam._m0[2u].y * _2507;
    float _2557 = cbMtdParam._m0[2u].z * _2508;
    float _4586 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2559 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2564 = cbInstanceData._m0[_615 + 6u].w * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)));
    float _2569 = _558 / cbSceneParam._m0[86u].x;
    float _2570 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2584 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2586 = _2584.x;
    float _2587 = _2584.y;
    float _2588 = _2584.z;
    float _2589 = _2584.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2644 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2645 = _2644 / _540;
        float _2656 = _2645 * _290;
        float _2657 = _291 * _2645;
        float _2658 = (-0.0) - _2657;
        float _2659 = _2645 * _292;
        float _2661 = (cbSceneParam._m0[77u].w * _2658) / _2644;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2657;
        float _2669 = sqrt(((_2656 * _2656) + (_2657 * _2657)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2644)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2864;
        if (abs((_2658 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2864 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2808 = 1.0 / cbSceneParam._m0[80u].x;
            float _2809 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2810 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            _2864 = ((abs(_2669 / _2658) * cbSceneParam._m0[80u].y) * ((((_2819 - _2820) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))))) * _2808)) - ((exp2(_2679 * _2819) - exp2(_2679 * _2820)) * _2808))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2866 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, 1.0), 0.0);
        float _2875 = exp2((_2864 * (-1.44269502162933349609375)) * (1.0 - _2866.w));
        float _2876 = log2(_2875);
        float _2892 = log2(_2589);
        _2681 = (exp2(_2892 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].x)) * _2866.x) / cbSceneParam._m0[78u].x)) + _2586;
        _2683 = (exp2(_2892 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].y)) * _2866.y) / cbSceneParam._m0[78u].y)) + _2587;
        _2685 = (exp2(_2892 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].z)) * _2866.z) / cbSceneParam._m0[78u].z)) + _2588;
        _2687 = _2875 * _2589;
    }
    else
    {
        _2681 = _2586;
        _2683 = _2587;
        _2685 = _2588;
        _2687 = _2589;
    }
    bool _2902;
    vec4 _2696;
    vec4 _2718;
    float _2720;
    float _2724;
    float _2725;
    float _2726;
    float _2729;
    float _2732;
    float _2735;
    float _2736;
    bool _2746;
    for (;;)
    {
        _2696 = cbMatDynParam._m0[0u];
        float _2698 = roundEven(_2696.y);
        bool _2699 = _2698 == 3.0;
        float _2700 = log2(_2687);
        float _2704 = exp2(_2700 * cbSceneParam._m0[78u].x);
        float _2705 = exp2(_2700 * cbSceneParam._m0[78u].y);
        float _2706 = exp2(_2700 * cbSceneParam._m0[78u].z);
        float _2707 = _2704 * _2547;
        float _2708 = _2705 * _2548;
        float _2709 = _2706 * _2549;
        float _2716 = _547 + (-0.5);
        _2718 = cbMtdParam._m0[1u];
        _2720 = _2718.y * _2716;
        float _2723 = (_2698 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2724 = _2723 * (_2699 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
        _2725 = _2723 * (_2699 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
        _2726 = _2723 * (_2699 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2685)));
        _2729 = ((_2555 * _2559) * _2704) * _2723;
        _2732 = ((_2556 * _2559) * _2705) * _2723;
        _2735 = ((_2557 * _2559) * _2706) * _2723;
        _2736 = _2716 * 0.999000012874603271484375;
        _2746 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2746)
        {
            if ((cbInstanceData._m0[_615 + 7u].x + _2736) < 0.5)
            {
                _2902 = true;
                break;
            }
        }
        uint _2843 = _616 + uint(_2696.w);
        if ((cbInstanceData._m0[_2843].w < 1.0) && ((cbInstanceData._m0[_2843].w + _2736) < 0.5))
        {
            _2902 = true;
            break;
        }
        if ((_2720 + _316) < _2718.x)
        {
            _2902 = true;
            break;
        }
        _2902 = false;
        break;
    }
    float _3107;
    if (_2902)
    {
        discard_state = true;
        _3107 = 0.0;
    }
    else
    {
        _3107 = _2564;
    }
    SV_Target.x = _2724;
    SV_Target.y = _2725;
    SV_Target.z = _2726;
    SV_Target.w = _3107;
    SV_Target_1.x = _2729;
    SV_Target_1.y = _2732;
    SV_Target_1.z = _2735;
    SV_Target_1.w = _2564;
    discard_exit();
}


