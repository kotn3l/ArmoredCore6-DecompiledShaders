#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1036;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[10u].x;
    float _254 = _247.y * cbMtdParam._m0[10u].y;
    float _255 = _247.z * cbMtdParam._m0[10u].z;
    float _260 = 1.0 - cbMtdParam._m0[13u].z;
    float _3652 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _288 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _280.x;
    float _291 = ((_254 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _280.y;
    float _294 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _280.z;
    float _301 = ((_253 - _288) * _262) + _288;
    float _302 = ((_254 - _291) * _262) + _291;
    float _303 = ((_255 - _294) * _262) + _294;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _351 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3663 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _359 = (_352 * ((_321.x * cbMtdParam._m0[11u].x) - _301)) + _301;
    float _360 = (_352 * ((_321.y * cbMtdParam._m0[11u].y) - _302)) + _302;
    float _361 = (_352 * ((_321.z * cbMtdParam._m0[11u].z) - _303)) + _303;
    vec4 _374 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _376 = _374.x;
    float _378 = _376 - (_376 * TEXCOORD_5.x);
    vec4 _392 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _396 = _392.z;
    vec4 _409 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = cbMtdParam._m0[13u].w * _396;
    float _426 = (((((_396 * 2.0) * _409.z) * cbMtdParam._m0[14u].x) - _423) * cbMtdParam._m0[13u].y) + _423;
    vec4 _439 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _454 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_439.z * cbMtdParam._m0[14u].y) - _426)) + _426;
    float _461 = (_392.x * 2.0) + (-1.0);
    float _462 = (_392.y * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3674 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))));
    float _479 = ((cbMtdParam._m0[13u].x * ((_409.x * 2.0) + (-1.0))) + _461) + ((((_439.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _480 = ((cbMtdParam._m0[13u].x * ((_409.y * 2.0) + (-1.0))) + _462) + ((((_439.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _483 = fma(_468, _212 * NORMAL.x, fma(_480, _219 * TANGENT.x, (_205 * _197) * _479));
    float _486 = fma(_468, _212 * NORMAL.y, fma(_480, _219 * TANGENT.y, (_205 * _198) * _479));
    float _489 = fma(_468, _212 * NORMAL.z, fma(_480, _219 * TANGENT.z, (_205 * _199) * _479));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    float _494 = _493 * _483;
    float _495 = _493 * _486;
    float _496 = _493 * _489;
    float _3685 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _497 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3707 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3718 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3729 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _501 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _517 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _568 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _558);
    float _569 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _558);
    float _570 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _558);
    float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
    float _575 = _568 * _574;
    float _576 = _569 * _574;
    float _577 = _570 * _574;
    float _583 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _584 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_496, cbSceneParam._m0[5u].z, fma(_495, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _494));
    float _605 = fma(_496, cbSceneParam._m0[6u].z, fma(_495, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _494));
    float _608 = fma(_496, cbSceneParam._m0[7u].z, fma(_495, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _494));
    uint _621 = uint(roundEven(NORMAL.w)) * 13u;
    uint _623 = (_621 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3740 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _635 = 1.0 - _501;
    float _636 = _632 * _635;
    float _637 = _633 * _635;
    float _638 = _634 * _635;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _501;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _501;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _501;
    float _646 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _583, cbSceneParam._m0[86u].y * _584));
    float _661 = _658.x * TEXCOORD_5.w;
    float _662 = dot(vec3(_494, _495, _496), vec3(_575, _576, _577));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _494) - _575;
    float _670 = (_665 * _495) - _576;
    float _671 = (_665 * _496) - _577;
    float _675 = abs(dot(vec3(_575, _576, _577), vec3(_494, _495, _496)));
    float _3773 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_497);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _696 = (1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _697 = _690 * _677;
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _760 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _764 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _768 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _793 = _725 + _494;
        float _794 = _729 + _495;
        float _795 = _733 + _496;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _760;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _764;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _768;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_760 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_764 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_768 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_494, _495, _496), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3821 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_494, _495, _496), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3854 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_494, _495, _496), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3887 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1037 = _865;
        _1038 = _864;
        _1039 = _876;
        _1040 = _875;
        _1041 = _874;
        _1042 = _886;
        _1043 = _885;
        _1044 = _884;
        _1045 = _899;
        _1046 = _898;
        _1047 = _897;
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _1036;
        _1037 = _1036;
        _1038 = _1036;
        _1039 = _1036;
        _1040 = _1036;
        _1041 = _1036;
        _1042 = _1036;
        _1043 = _1036;
        _1044 = _1036;
        _1045 = _1036;
        _1046 = _1036;
        _1047 = _1036;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1080 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1084 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1107 = _725 + _494;
        float _1108 = _729 + _495;
        float _1109 = _733 + _496;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_494, _495, _496), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3950 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_494, _495, _496), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3983 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_494, _495, _496), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4016 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1036;
        _1346 = _1036;
        _1347 = _1036;
        _1348 = _1036;
        _1349 = _1036;
        _1350 = _1036;
        _1351 = _1036;
        _1352 = _1036;
        _1353 = _1036;
        _1354 = _1036;
        _1355 = _1036;
        _1356 = _1036;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _669 * 0.5;
    float _1414 = _670 * 0.5;
    float _1415 = _671 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1039, _1042, _1045));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _497);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1543 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1546 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1574 = frontier_phi_14_12_ladder;
        }
        float _1749;
        if (_1543 > 0.0)
        {
            _1749 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1749 = frontier_phi_23_19_ladder;
        }
        float _2044;
        if (_1546 > 0.0)
        {
            _2044 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2044 = frontier_phi_35_30_ladder;
        }
        float _2046 = isnan(_1749) ? _1574 : (isnan(_1574) ? _1749 : min(_1574, _1749));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1540) + _1529;
        float _2052 = (_2047 * _1543) + _1533;
        float _2053 = (_2047 * _1546) + _1537;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2054;
        float _2058 = _2054 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 > _2058) || ((_2052 < _2056) || ((_2051 < _2056) || (_2051 > _2058))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2053, cbModelParam._m0[9u].z, fma(_2052, cbModelParam._m0[9u].y, _2051 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2053, cbModelParam._m0[10u].z, fma(_2052, cbModelParam._m0[10u].y, _2051 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2053, cbModelParam._m0[11u].z, fma(_2052, cbModelParam._m0[11u].y, _2051 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_13_35_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_13_35_ladder_2;
        _1564 = frontier_phi_13_35_ladder_1;
        _1566 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1482);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _497);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1642 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1645 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1754;
        if (_1639 > 0.0)
        {
            _1754 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1754 = frontier_phi_25_21_ladder;
        }
        float _2071;
        if (_1642 > 0.0)
        {
            _2071 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2071 = frontier_phi_37_32_ladder;
        }
        float _2409;
        if (_1645 > 0.0)
        {
            _2409 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2409 = frontier_phi_47_44_ladder;
        }
        float _2411 = isnan(_2071) ? _1754 : (isnan(_1754) ? _2071 : min(_1754, _2071));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1639) + _1628;
        float _2417 = (_2412 * _1642) + _1632;
        float _2418 = (_2412 * _1645) + _1636;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_22_47_ladder = _2540.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2540.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2540.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_22_47_ladder_2;
        _1666 = frontier_phi_22_47_ladder_1;
        _1668 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1571);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1681 = (((_696 * _646) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1683 = (((_696 * _648) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1685 = (((_696 * _649) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1741 = _1728 / _1740;
    float _1742 = _1732 / _1740;
    float _1743 = _1736 / _1740;
    float _1890;
    float _1891;
    float _1892;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1770 = ((uint(_1743 > cbSceneParam._m0[59u].y) + uint(_1743 > cbSceneParam._m0[59u].x)) + uint(_1743 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1771 = _1770 + 43u;
        uint _1779 = _1770 + 44u;
        uint _1787 = _1770 + 45u;
        uint _1795 = _1770 + 46u;
        float _1806 = fma(_1740, cbSceneParam._m0[_1771].w, fma(_1736, cbSceneParam._m0[_1771].z, fma(_1732, cbSceneParam._m0[_1771].y, _1728 * cbSceneParam._m0[_1771].x)));
        float _1810 = fma(_1740, cbSceneParam._m0[_1779].w, fma(_1736, cbSceneParam._m0[_1779].z, fma(_1732, cbSceneParam._m0[_1779].y, _1728 * cbSceneParam._m0[_1779].x)));
        float _1818 = fma(_1740, cbSceneParam._m0[_1795].w, fma(_1736, cbSceneParam._m0[_1795].z, fma(_1732, cbSceneParam._m0[_1795].y, _1728 * cbSceneParam._m0[_1795].x)));
        float _1823 = cbSceneParam._m0[33u].z * _1818;
        float _1825 = cbSceneParam._m0[33u].w * _1818;
        float _1828 = fma(_1740, cbSceneParam._m0[_1787].w, fma(_1736, cbSceneParam._m0[_1787].z, fma(_1732, cbSceneParam._m0[_1787].y, _1728 * cbSceneParam._m0[_1787].x))) / _1818;
        float _1876 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
        float _4142 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1883 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1823 + _1806) / _1818, (_1825 + _1810) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1806) / _1818, (_1810 - _1823) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1823) / _1818, (_1810 - _1825) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1825) / _1818, (_1823 + _1810) / _1818), _1828), 0.0)).x), vec4(0.25)));
        _1890 = 1.0 - (_1883 * cbSceneParam._m0[34u].x);
        _1891 = 1.0 - (_1883 * cbSceneParam._m0[34u].y);
        _1892 = 1.0 - (_1883 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1890 = 1.0;
        _1891 = 1.0;
        _1892 = 1.0;
    }
    float _1956;
    float _1958;
    float _1960;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1944 = fma(_1740, cbSceneParam._m0[63u].w, fma(_1736, cbSceneParam._m0[63u].z, fma(_1732, cbSceneParam._m0[63u].y, _1728 * cbSceneParam._m0[63u].x)));
        float _1945 = fma(_1740, cbSceneParam._m0[60u].w, fma(_1736, cbSceneParam._m0[60u].z, fma(_1732, cbSceneParam._m0[60u].y, _1728 * cbSceneParam._m0[60u].x))) / _1944;
        float _1946 = fma(_1740, cbSceneParam._m0[61u].w, fma(_1736, cbSceneParam._m0[61u].z, fma(_1732, cbSceneParam._m0[61u].y, _1728 * cbSceneParam._m0[61u].x))) / _1944;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1945 >= cbSceneParam._m0[64u].x) && (_1946 >= cbSceneParam._m0[64u].y)) && (_1945 <= cbSceneParam._m0[64u].z)) && (_1946 <= cbSceneParam._m0[64u].w))
        {
            float _2084 = fma(_1740, cbSceneParam._m0[62u].w, fma(_1736, cbSceneParam._m0[62u].z, fma(_1732, cbSceneParam._m0[62u].y, _1728 * cbSceneParam._m0[62u].x))) / _1944;
            float _2088 = isnan(cbSceneParam._m0[41u].w) ? _2084 : (isnan(_2084) ? cbSceneParam._m0[41u].w : max(_2084, cbSceneParam._m0[41u].w));
            float _2131 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
            float _4158 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
            float _2138 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1945, cbSceneParam._m0[33u].w + _1946), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1945, _1946 - cbSceneParam._m0[33u].z), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].z, _1946 - cbSceneParam._m0[33u].w), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1946), _2088), 0.0)).x), vec4(0.25)));
            float _2142 = 1.0 - (_2138 * cbSceneParam._m0[34u].x);
            float _2143 = 1.0 - (_2138 * cbSceneParam._m0[34u].y);
            float _2144 = 1.0 - (_2138 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2144) ? _1892 : (isnan(_1892) ? _2144 : min(_1892, _2144));
            frontier_phi_34_33_ladder_1 = isnan(_2143) ? _1891 : (isnan(_1891) ? _2143 : min(_1891, _2143));
            frontier_phi_34_33_ladder_2 = isnan(_2142) ? _1890 : (isnan(_1890) ? _2142 : min(_1890, _2142));
        }
        else
        {
            frontier_phi_34_33_ladder = _1892;
            frontier_phi_34_33_ladder_1 = _1891;
            frontier_phi_34_33_ladder_2 = _1890;
        }
        _1956 = frontier_phi_34_33_ladder_2;
        _1958 = frontier_phi_34_33_ladder_1;
        _1960 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1956 = _1890;
        _1958 = _1891;
        _1960 = _1892;
    }
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_621 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1975 = _661 + (-1.0);
    float _1980 = (cbLight._m0[_1968].x * _1975) + 1.0;
    float _1981 = (cbLight._m0[_1968].y * _1975) + 1.0;
    float _1982 = (cbLight._m0[_1968].z * _1975) + 1.0;
    float _1983 = (cbLight._m0[_1968].w * _1975) + 1.0;
    uint _1984 = _1967 + 5u;
    float _1990 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _1994 = _1967 + 4u;
    float _2003 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _2007 = _1967 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_494, _495, _496));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_494, _495, _496));
    float _4194 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4205 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1984].x * _1990) * _2028) + (((cbLight._m0[_1994].x * _1956) * _2003) * _2026);
    float _2036 = ((_1990 * cbLight._m0[_1984].y) * _2028) + (((cbLight._m0[_1994].y * _1958) * _2003) * _2026);
    float _2037 = ((_1990 * cbLight._m0[_1984].z) * _2028) + (((cbLight._m0[_1994].z * _1960) * _2003) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1967 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2043)
    {
        _2145 = _2035;
        _2147 = _2036;
        _2149 = _2037;
    }
    else
    {
        uint _2153 = _1967 + 6u;
        float _2169 = (dot(vec3(cbLight._m0[_1967 + 2u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4216 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2172 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2145 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _2035;
        _2147 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _2036;
        _2149 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _2037;
    }
    bool _2152 = _2041.y == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2152)
    {
        _2207 = _2145;
        _2209 = _2147;
        _2211 = _2149;
    }
    else
    {
        uint _2380 = _1967 + 7u;
        float _2396 = (dot(vec3(cbLight._m0[_1967 + 3u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4232 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2399 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2207 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2145;
        _2209 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2147;
        _2211 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2149;
    }
    uint _2214 = _1967 + 8u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _497) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_1967].x + _575;
    float _2230 = cbLight._m0[_1967].y + _576;
    float _2231 = cbLight._m0[_1967].z + _577;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1967].xyz));
    float _4248 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2243 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2244 = dot(vec3(_494, _495, _496), vec3(_2236, _2237, _2238));
    float _4270 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2236, _2237, _2238));
    float _4281 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2228 * _2228;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
    float _2265 = 0.959999978542327880859375 - _643;
    float _2267 = 0.959999978542327880859375 - _644;
    float _2268 = 0.959999978542327880859375 - _645;
    float _2275 = 1.0 - _2228;
    float _2286 = (0.5 / (((_2243 * ((_2242 * _2275) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2275) + _2228) * _2242))) * _2242;
    float _4292 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    uint _2302 = _1967 + 9u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _497) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2007].x + _575;
    float _2316 = cbLight._m0[_2007].y + _576;
    float _2317 = cbLight._m0[_2007].z + _577;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2007].xyz));
    float _4303 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2329 = dot(vec3(_494, _495, _496), vec3(_2322, _2323, _2324));
    float _4314 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2322, _2323, _2324));
    float _4325 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2314 * _2314;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0);
    float _2355 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2243 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2355) + _2314) * _2328))) * _2328;
    float _4336 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    float _2377 = (((((_2348 * _2265) + _646) * cbLight._m0[_2302].x) * _2367) * _1990) + ((((cbLight._m0[_2214].x * _1956) * ((_2264 * _2265) + _646)) * _2288) * _2003);
    float _2378 = (((((_2348 * _2267) + _648) * cbLight._m0[_2302].y) * _2367) * _1990) + ((((cbLight._m0[_2214].y * _1958) * ((_2264 * _2267) + _648)) * _2288) * _2003);
    float _2379 = (((((_2348 * _2268) + _649) * cbLight._m0[_2302].z) * _2367) * _1990) + ((((cbLight._m0[_2214].z * _1960) * ((_2264 * _2268) + _649)) * _2288) * _2003);
    float _2435;
    float _2437;
    float _2439;
    if (_2043)
    {
        _2435 = _2377;
        _2437 = _2378;
        _2439 = _2379;
    }
    else
    {
        uint _2441 = _1967 + 2u;
        uint _2445 = _1967 + 10u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _497) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _575;
        float _2462 = cbLight._m0[_2441].y + _576;
        float _2463 = cbLight._m0[_2441].z + _577;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2441].xyz));
        float _4347 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2475 = dot(vec3(_494, _495, _496), vec3(_2468, _2469, _2470));
        float _4358 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4369 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0);
        float _2501 = 1.0 - _2460;
        float _2511 = (0.5 / (((_2243 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2501) + _2460) * _2474))) * _2474;
        float _4380 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2435 = (((((_2494 * _2265) + _646) * cbLight._m0[_2445].x) * _2513) * _2514) + _2377;
        _2437 = (((((_2494 * _2267) + _648) * cbLight._m0[_2445].y) * _2513) * _2514) + _2378;
        _2439 = (((((_2494 * _2268) + _649) * cbLight._m0[_2445].z) * _2513) * _2514) + _2379;
    }
    float _2545;
    float _2547;
    float _2549;
    if (_2152)
    {
        _2545 = _2435;
        _2547 = _2437;
        _2549 = _2439;
    }
    else
    {
        uint _2556 = _1967 + 3u;
        uint _2560 = _1967 + 11u;
        float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _497) * 0.949999988079071044921875);
        float _2575 = _2574 * _2574;
        float _2576 = cbLight._m0[_2556].x + _575;
        float _2577 = cbLight._m0[_2556].y + _576;
        float _2578 = cbLight._m0[_2556].z + _577;
        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
        float _2583 = _2582 * _2576;
        float _2584 = _2582 * _2577;
        float _2585 = _2582 * _2578;
        float _2586 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2556].xyz));
        float _4396 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2590 = dot(vec3(_494, _495, _496), vec3(_2583, _2584, _2585));
        float _4407 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2594 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2583, _2584, _2585));
        float _4418 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2598 = _2575 * _2575;
        float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
        float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
        float _2616 = 1.0 - _2575;
        float _2626 = (0.5 / (((_2243 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2616) + _2575) * _2589))) * _2589;
        float _4429 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2628 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
        float _2629 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2545 = (((((_2609 * _2265) + _646) * cbLight._m0[_2560].x) * _2628) * _2629) + _2435;
        _2547 = (((((_2609 * _2267) + _648) * cbLight._m0[_2560].y) * _2628) * _2629) + _2437;
        _2549 = (((((_2609 * _2268) + _649) * cbLight._m0[_2560].z) * _2628) * _2629) + _2439;
    }
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_1965.y == 0u)
    {
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.x;
        uint _2662 = uint((float(_2650.y) * floor(float(uint(cbSceneParam._m0[85u].y * _584) / _2651))) + floor(float(uint(cbSceneParam._m0[85u].x * _583) / _2651)));
        float _2672 = (log2(_1743 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2673 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        uint _2676 = uint(isnan(14.0) ? _2673 : (isnan(_2673) ? 14.0 : min(_2673, 14.0)));
        uvec4 _2681 = texelFetch(g_lightClusterGridBuffer, int(((_2676 << 2u) + (_2662 << 6u)) >> 2u));
        uint _2682 = _2681.x;
        uint _2683 = _2650.z;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        if (((((1u << ((_2683 >> 4u) & 15u)) + 4294967295u) & _2682) == 0u) || ((_2683 & 240u) == 0u))
        {
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
        }
        else
        {
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            uint _2913 = 0u;
            uint _2922;
            bool _2923;
            for (;;)
            {
                _2922 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                _2923 = _2922 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2923)
                {
                    frontier_phi_66_pred = _2912;
                    frontier_phi_66_pred_1 = _2911;
                    frontier_phi_66_pred_2 = _2910;
                    frontier_phi_66_pred_3 = _2909;
                    frontier_phi_66_pred_4 = _2908;
                    frontier_phi_66_pred_5 = _2907;
                }
                else
                {
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    uint _3037;
                    _3031 = _2907;
                    _3032 = _2908;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2922;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    for (;;)
                    {
                        uint _3041 = uint(findLSB(_3037)) + (_2913 << 5u);
                        uint _3038 = (_3037 + 4294967295u) & _3037;
                        uint _3043 = _3041 * 48u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3063 = (_3041 * 48u) + 4u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3082 = (_3041 * 48u) + 8u;
                        vec3 _3093 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x));
                        float _3097 = _3057.x - _1741;
                        float _3098 = _3057.y - _1742;
                        float _3099 = _3057.z - _1743;
                        float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                        float _3103 = inversesqrt(_3100);
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3107 = dot(vec3(_602, _605, _608), vec3(_3104, _3105, _3106));
                        float _3112 = 1.0 - (_3100 * _3057.w);
                        float _4455 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3114 = sqrt(_3100) * _3076.w;
                        float _3117 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3107) + _3118;
                        float _3124 = _3114 * _3114;
                        float _3128 = ((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3113) / ((_3124 * 0.699999988079071044921875) + 1.0);
                        float _3132 = (-0.0) - _1741;
                        float _3133 = (-0.0) - _1742;
                        float _3134 = (-0.0) - _1743;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3148 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                        float _3149 = 1.0 - _677;
                        float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                        float _3157 = _3156 * _3156;
                        float _3158 = _3157 * _3157;
                        float _3159 = _3139 + _3104;
                        float _3160 = _3140 + _3105;
                        float _3161 = _3141 + _3106;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3169 = dot(vec3(_602, _605, _608), vec3(_3139, _3140, _3141));
                        float _4471 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3173 = dot(vec3(_602, _605, _608), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                        float _4482 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                        float _3181 = _3117 * _3157;
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3107) + _3182;
                        float _4493 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3187 = 1.0 - _3157;
                        float _3197 = (0.5 / (((_3186 * ((_3172 * _3187) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3157) * _3172))) * _3186;
                        float _4504 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3208 = (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3180 * _3180) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125))) * _3113;
                        _2966 = (_3128 * _3076.x) + _3034;
                        _2967 = (_3128 * _3076.y) + _3035;
                        _2968 = (_3128 * _3076.z) + _3036;
                        _2963 = (_3208 * _3093.x) + _3031;
                        _2964 = (_3208 * _3093.y) + _3032;
                        _2965 = (_3208 * _3093.z) + _3033;
                        if (_3038 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _3038;
                        }
                    }
                    frontier_phi_66_pred = _2968;
                    frontier_phi_66_pred_1 = _2967;
                    frontier_phi_66_pred_2 = _2966;
                    frontier_phi_66_pred_3 = _2965;
                    frontier_phi_66_pred_4 = _2964;
                    frontier_phi_66_pred_5 = _2963;
                }
                _2773 = frontier_phi_66_pred;
                _2771 = frontier_phi_66_pred_1;
                _2769 = frontier_phi_66_pred_2;
                _2767 = frontier_phi_66_pred_3;
                _2765 = frontier_phi_66_pred_4;
                _2763 = frontier_phi_66_pred_5;
                uint _2914 = _2913 + 1u;
                if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2907 = _2763;
                    _2908 = _2765;
                    _2909 = _2767;
                    _2910 = _2769;
                    _2911 = _2771;
                    _2912 = _2773;
                    _2913 = _2914;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
        }
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.z;
        uint _2779 = (_2777 >> 8u) & 15u;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((4294967295u << _2779) & _2682) == 0u)
        {
            _2875 = _2762;
            _2877 = _2764;
            _2879 = _2766;
            _2881 = _2768;
            _2883 = _2770;
            _2885 = _2772;
        }
        else
        {
            float _2900 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
            float _2901 = _2900 * _1741;
            float _2902 = _2900 * _1742;
            float _2903 = _2900 * _1743;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2779 < ((_2777 >> 12u) & 15u))
            {
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _3014 = _2762;
                float _3015 = _2764;
                float _3016 = _2766;
                float _3017 = _2768;
                float _3018 = _2770;
                float _3019 = _2772;
                uint _3020 = _2779;
                uint _3029;
                bool _3030;
                for (;;)
                {
                    _3029 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_3020 << 2u)) >> 2u)).x;
                    _3030 = _3029 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3030)
                    {
                        frontier_phi_72_pred = _3019;
                        frontier_phi_72_pred_1 = _3018;
                        frontier_phi_72_pred_2 = _3017;
                        frontier_phi_72_pred_3 = _3016;
                        frontier_phi_72_pred_4 = _3015;
                        frontier_phi_72_pred_5 = _3014;
                    }
                    else
                    {
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3226 = _3014;
                        float _3227 = _3015;
                        float _3228 = _3016;
                        float _3229 = _3017;
                        float _3230 = _3018;
                        float _3231 = _3019;
                        uint _3232 = _3029;
                        uint _3233;
                        vec4 _3258;
                        float _3259;
                        vec4 _3274;
                        vec3 _3286;
                        vec4 _3302;
                        vec4 _3318;
                        float _3365;
                        bool _3366;
                        for (;;)
                        {
                            uint _3243 = ((_3020 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3232));
                            _3233 = (_3232 + 4294967295u) & _3232;
                            uint _3245 = _3243 * 40u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3259 = _3258.w;
                            uint _3261 = (_3243 * 40u) + 4u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3243 * 40u) + 8u;
                            _3286 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x));
                            uint _3289 = (_3243 * 40u) + 16u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3305 = (_3243 * 40u) + 20u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3321 = (_3243 * 40u) + 24u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3340 = (_3243 * 40u) + 28u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3365 = fma(_1743, _3353.z, fma(_1742, _3353.y, _3353.x * _1741)) + _3353.w;
                            _3366 = !((fma(_1743, _3334.z, fma(_1742, _3334.y, _3334.x * _1741)) + _3334.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3366)
                            {
                                float _3393 = _3258.x - _1741;
                                float _3394 = _3258.y - _1742;
                                float _3395 = _3258.z - _1743;
                                float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                                float _3399 = inversesqrt(_3396);
                                float _3400 = _3399 * _3393;
                                float _3401 = _3399 * _3394;
                                float _3402 = _3399 * _3395;
                                float _3406 = 1.0 - (_3396 / (_3259 * _3259));
                                float _4515 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3411 = sqrt(_3396) * _3274.w;
                                float _3413 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                                float _3414 = _3413 * _3413;
                                float _3417 = ((1.0 - _3414) * dot(vec3(_3400, _3401, _3402), vec3(_602, _605, _608))) + _3414;
                                float _3420 = _3411 * _3411;
                                float _3424 = (fma(_1743, _3302.z, fma(_1742, _3302.y, _3302.x * _1741)) + _3302.w) / _3365;
                                float _3425 = (fma(_1743, _3318.z, fma(_1742, _3318.y, _3318.x * _1741)) + _3318.w) / _3365;
                                float _3429 = 1.0 - dot(vec2(_3424, _3425), vec2(_3424, _3425));
                                float _4531 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3431 = _3430 * (((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3407) / ((_3420 * 0.699999988079071044921875) + 1.0));
                                float _3443 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                                float _3444 = 1.0 - _677;
                                float _3451 = sqrt(1.0 - ((1.0 - (_3444 * _3444)) * (1.0 - (_3443 * _3443))));
                                float _3452 = _3451 * _3451;
                                float _3453 = _3452 * _3452;
                                float _3454 = _3400 - _2901;
                                float _3455 = _3401 - _2902;
                                float _3456 = _3402 - _2903;
                                float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                                float _3464 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2901, (-0.0) - _2902, (-0.0) - _2903));
                                float _4542 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3468 = dot(vec3(_602, _605, _608), vec3(_3460 * _3454, _3460 * _3455, _3460 * _3456));
                                float _4553 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3471 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3475 = ((_3471 * _3471) * (_3453 + (-1.0))) + 1.0;
                                float _3476 = _3413 * _3452;
                                float _3477 = _3476 * _3476;
                                float _3483 = ((1.0 - _3477) * dot(vec3(_602, _605, _608), vec3(_3400, _3401, _3402))) + _3477;
                                float _4564 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3485 = 1.0 - _3452;
                                float _3495 = (0.5 / (((_3484 * ((_3467 * _3485) + _3452)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3452) * _3467))) * _3484;
                                float _4575 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3505 = (_3430 * _3407) * (((_3453 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3475 * _3475) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3431 * _3274.y;
                                frontier_phi_78_pred_1 = _3431 * _3274.x;
                                frontier_phi_78_pred_2 = _3505 * _3286.z;
                                frontier_phi_78_pred_3 = _3505 * _3286.y;
                                frontier_phi_78_pred_4 = _3505 * _3286.x;
                                frontier_phi_78_pred_5 = _3431 * _3274.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3513 = frontier_phi_78_pred;
                            _3512 = frontier_phi_78_pred_1;
                            _3511 = frontier_phi_78_pred_2;
                            _3510 = frontier_phi_78_pred_3;
                            _3509 = frontier_phi_78_pred_4;
                            _3514 = frontier_phi_78_pred_5;
                            _3216 = _3512 + _3229;
                            _3217 = _3513 + _3230;
                            _3218 = _3514 + _3231;
                            _3213 = _3509 + _3226;
                            _3214 = _3510 + _3227;
                            _3215 = _3511 + _3228;
                            if (_3233 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3233;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3218;
                        frontier_phi_72_pred_1 = _3217;
                        frontier_phi_72_pred_2 = _3216;
                        frontier_phi_72_pred_3 = _3215;
                        frontier_phi_72_pred_4 = _3214;
                        frontier_phi_72_pred_5 = _3213;
                    }
                    _2886 = frontier_phi_72_pred;
                    _2884 = frontier_phi_72_pred_1;
                    _2882 = frontier_phi_72_pred_2;
                    _2880 = frontier_phi_72_pred_3;
                    _2878 = frontier_phi_72_pred_4;
                    _2876 = frontier_phi_72_pred_5;
                    uint _3021 = _3020 + 1u;
                    if (_3021 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3014 = _2876;
                        _3015 = _2878;
                        _3016 = _2880;
                        _3017 = _2882;
                        _3018 = _2884;
                        _3019 = _2886;
                        _3020 = _3021;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2886;
                frontier_phi_60_61_ladder_1 = _2884;
                frontier_phi_60_61_ladder_2 = _2880;
                frontier_phi_60_61_ladder_3 = _2878;
                frontier_phi_60_61_ladder_4 = _2876;
                frontier_phi_60_61_ladder_5 = _2882;
            }
            else
            {
                frontier_phi_60_61_ladder = _2772;
                frontier_phi_60_61_ladder_1 = _2770;
                frontier_phi_60_61_ladder_2 = _2766;
                frontier_phi_60_61_ladder_3 = _2764;
                frontier_phi_60_61_ladder_4 = _2762;
                frontier_phi_60_61_ladder_5 = _2768;
            }
            _2875 = frontier_phi_60_61_ladder_4;
            _2877 = frontier_phi_60_61_ladder_3;
            _2879 = frontier_phi_60_61_ladder_2;
            _2881 = frontier_phi_60_61_ladder_5;
            _2883 = frontier_phi_60_61_ladder_1;
            _2885 = frontier_phi_60_61_ladder;
        }
        float _2890 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2695 = (_2890 * _2881) + _2207;
        _2697 = (_2890 * _2883) + _2209;
        _2699 = (_2890 * _2885) + _2211;
        _2701 = ((_2875 * _646) * _2890) + _2545;
        _2703 = ((_2877 * _648) * _2890) + _2547;
        _2705 = ((_2879 * _649) * _2890) + _2549;
    }
    else
    {
        _2695 = _2207;
        _2697 = _2209;
        _2699 = _2211;
        _2701 = _2545;
        _2703 = _2547;
        _2705 = _2549;
    }
    float _4591 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4602 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4613 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    uint _2725 = _621 + 6u;
    float _2733 = _583 / cbSceneParam._m0[86u].x;
    float _2734 = _584 / cbSceneParam._m0[86u].y;
    vec4 _2748 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2750 = _2748.x;
    float _2751 = _2748.y;
    float _2752 = _2748.z;
    float _2753 = _2748.w;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2787 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2788 = _2787 / _517;
        float _2799 = _2788 * _568;
        float _2800 = _569 * _2788;
        float _2801 = (-0.0) - _2800;
        float _2803 = _2788 * _570;
        float _2805 = (cbSceneParam._m0[77u].w * _2801) / _2787;
        float _2806 = _2805 + cbSceneParam._m0[79u].w;
        float _2807 = cbSceneParam._m0[79u].w - _2800;
        float _2813 = sqrt(((_2799 * _2799) + (_2800 * _2800)) + (_2803 * _2803));
        float _2816 = (1.0 - (cbSceneParam._m0[77u].w / _2787)) * _2813;
        float _2821 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2823 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2976;
        if (abs((_2801 - _2805) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2976 = ((((_2806 > 0.0) ? exp2(_2821 * _2806) : (2.0 - exp2(_2823 * _2806))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2816;
        }
        else
        {
            float _2936 = 1.0 / cbSceneParam._m0[80u].x;
            float _2937 = isnan(_2807) ? _2806 : (isnan(_2806) ? _2807 : max(_2806, _2807));
            float _2938 = isnan(_2807) ? _2806 : (isnan(_2806) ? _2807 : min(_2806, _2807));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            _2976 = ((abs(_2813 / _2801) * cbSceneParam._m0[80u].y) * ((((_2947 - _2948) * 2.0) - ((exp2(_2821 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0)))) - exp2(_2821 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))))) * _2936)) - ((exp2(_2823 * _2947) - exp2(_2823 * _2948)) * _2936))) + (_2816 * cbSceneParam._m0[80u].z);
        }
        vec4 _2978 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, 1.0), 0.0);
        float _2987 = exp2((_2976 * (-1.44269502162933349609375)) * (1.0 - _2978.w));
        float _2988 = log2(_2987);
        float _3004 = log2(_2753);
        _2825 = (exp2(_3004 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].x)) * _2978.x) / cbSceneParam._m0[78u].x)) + _2750;
        _2827 = (exp2(_3004 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].y)) * _2978.y) / cbSceneParam._m0[78u].y)) + _2751;
        _2829 = (exp2(_3004 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].z)) * _2978.z) / cbSceneParam._m0[78u].z)) + _2752;
        _2831 = _2987 * _2753;
    }
    else
    {
        _2825 = _2750;
        _2827 = _2751;
        _2829 = _2752;
        _2831 = _2753;
    }
    float _2843 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2844 = _2843 == 3.0;
    float _2845 = log2(_2831);
    float _2852 = exp2(_2845 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2695 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _661))) + ((_2701 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2853 = exp2(_2845 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2697 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _661))) + ((_2703 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2854 = exp2(_2845 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2699 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _661))) + ((_2705 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2863 = (_2843 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2863 * (_2844 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2825)));
    SV_Target.y = _2863 * (_2844 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2827)));
    SV_Target.z = _2863 * (_2844 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.w = cbInstanceData._m0[_2725].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2725].w;
}


