#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _911;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _226.x) * cbMtdParam._m0[9u].x) * _249.x;
    float _262 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _226.y) * cbMtdParam._m0[9u].y) * _249.y;
    float _266 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _226.z) * cbMtdParam._m0[9u].z) * _249.z;
    vec4 _279 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _281 = _279.x;
    vec4 _298 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _302 = _298.z;
    vec4 _315 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _329 = cbMtdParam._m0[13u].w * _302;
    float _332 = (((((_302 * 2.0) * _315.z) * cbMtdParam._m0[14u].x) - _329) * cbMtdParam._m0[13u].y) + _329;
    float _336 = (_298.x * 2.0) + (-1.0);
    float _338 = (_298.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3269 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))));
    float _352 = (cbMtdParam._m0[13u].x * ((_315.x * 2.0) + (-1.0))) + _336;
    float _353 = (cbMtdParam._m0[13u].x * ((_315.y * 2.0) + (-1.0))) + _338;
    float _356 = fma(_345, _196 * NORMAL.x, fma(_353, _203 * TANGENT.x, (_189 * _181) * _352));
    float _359 = fma(_345, _196 * NORMAL.y, fma(_353, _203 * TANGENT.y, (_189 * _182) * _352));
    float _362 = fma(_345, _196 * NORMAL.z, fma(_353, _203 * TANGENT.z, (_189 * _183) * _352));
    float _366 = inversesqrt(dot(vec3(_356, _359, _362), vec3(_356, _359, _362)));
    float _367 = _366 * _356;
    float _368 = _366 * _359;
    float _369 = _366 * _362;
    float _3280 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _370 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3302 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3313 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3324 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _374 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _390 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _442 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _432);
    float _443 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _432);
    float _444 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _432);
    float _448 = inversesqrt(dot(vec3(_442, _443, _444), vec3(_442, _443, _444)));
    float _449 = _442 * _448;
    float _450 = _443 * _448;
    float _451 = _444 * _448;
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _477 = fma(_369, cbSceneParam._m0[5u].z, fma(_368, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _367));
    float _480 = fma(_369, cbSceneParam._m0[6u].z, fma(_368, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _367));
    float _483 = fma(_369, cbSceneParam._m0[7u].z, fma(_368, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _367));
    uint _496 = uint(roundEven(NORMAL.w)) * 13u;
    uint _498 = (_496 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _504 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_498].x;
    float _505 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_498].y;
    float _506 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_498].z;
    float _3335 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _510 = 1.0 - _374;
    float _511 = _507 * _510;
    float _512 = _508 * _510;
    float _513 = _509 * _510;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _374;
    float _519 = (_508 + (-0.039999999105930328369140625)) * _374;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _374;
    float _521 = _518 + 0.039999999105930328369140625;
    float _523 = _519 + 0.039999999105930328369140625;
    float _524 = _520 + 0.039999999105930328369140625;
    vec4 _533 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _536 = _533.x * TEXCOORD_5.w;
    float _537 = dot(vec3(_367, _368, _369), vec3(_449, _450, _451));
    float _540 = _537 * 2.0;
    float _544 = (_540 * _367) - _449;
    float _545 = (_540 * _368) - _450;
    float _546 = (_540 * _369) - _451;
    float _550 = abs(dot(vec3(_449, _450, _451), vec3(_367, _368, _369)));
    float _3368 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _552 = sqrt(_370);
    float _565 = exp2((_552 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_552 * 3.0));
    float _571 = (1.0 - _565) * ((_552 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _572 = _565 * _552;
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _639 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _643 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _668 = _600 + _367;
        float _669 = _604 + _368;
        float _670 = _608 + _369;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _635;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _639;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _643;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_635 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_639 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_643 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_367, _368, _369), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3416 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_367, _368, _369), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3449 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_367, _368, _369), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3482 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _955 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _959 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _982 = _600 + _367;
        float _983 = _604 + _368;
        float _984 = _608 + _369;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_367, _368, _369), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3545 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_367, _368, _369), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3578 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_367, _368, _369), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3611 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = _911;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _544 * 0.5;
    float _1289 = _545 * 0.5;
    float _1290 = _546 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _914, _917, _920));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_912, _915, _918, _921));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_913, _916, _919, _922));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _370);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_546, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544));
        float _1418 = fma(_546, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544));
        float _1421 = fma(_546, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1449 = frontier_phi_14_12_ladder;
        }
        float _1677;
        if (_1418 > 0.0)
        {
            _1677 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1677 = frontier_phi_23_19_ladder;
        }
        float _1934;
        if (_1421 > 0.0)
        {
            _1934 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1934 = frontier_phi_35_30_ladder;
        }
        float _1936 = isnan(_1677) ? _1449 : (isnan(_1449) ? _1677 : min(_1449, _1677));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1415) + _1404;
        float _1942 = (_1937 * _1418) + _1408;
        float _1943 = (_1937 * _1421) + _1412;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_13_35_ladder = _2071.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2071.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2071.x * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_13_35_ladder_2;
        _1439 = frontier_phi_13_35_ladder_1;
        _1441 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_544, _545, _546), _1357);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _370);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_546, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544));
        float _1517 = fma(_546, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544));
        float _1520 = fma(_546, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544));
        float _1682;
        if (_1514 > 0.0)
        {
            _1682 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1682 = frontier_phi_25_21_ladder;
        }
        float _1961;
        if (_1517 > 0.0)
        {
            _1961 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1961 = frontier_phi_37_32_ladder;
        }
        float _2174;
        if (_1520 > 0.0)
        {
            _2174 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2174 = frontier_phi_46_43_ladder;
        }
        float _2176 = isnan(_1961) ? _1682 : (isnan(_1682) ? _1961 : min(_1682, _1961));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1514) + _1503;
        float _2182 = (_2177 * _1517) + _1507;
        float _2183 = (_2177 * _1520) + _1511;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2184;
        float _2187 = _2184 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2183 > _2187) || ((_2183 < _2185) || ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 < _2185) || (_2181 > _2187))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2183, cbModelParam._m0[17u].z, fma(_2182, cbModelParam._m0[17u].y, _2181 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2183, cbModelParam._m0[18u].z, fma(_2182, cbModelParam._m0[18u].y, _2181 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2183, cbModelParam._m0[19u].z, fma(_2182, cbModelParam._m0[19u].y, _2181 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_22_46_ladder = _2382.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2382.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2382.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_22_46_ladder_2;
        _1541 = frontier_phi_22_46_ladder_1;
        _1543 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_544, _545, _546), _1446);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1556 = (((_571 * _521) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_571 * _523) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_571 * _524) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    vec4 _1577 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_457, _458));
    float _1579 = _1577.w;
    float _1591 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1579);
    float _1592 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1579);
    float _1593 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1579);
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_496 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _536 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1635 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1639 = _1599 | 1u;
    float _1650 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_367, _368, _369));
    float _1653 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_367, _368, _369));
    float _3747 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _3758 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1658 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1660 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1667 = ((cbLight._m0[_1616].x * _1622) * _1660) + (((cbLight._m0[_1626].x * _1591) * _1635) * _1658);
    float _1668 = ((_1622 * cbLight._m0[_1616].y) * _1660) + (((cbLight._m0[_1626].y * _1592) * _1635) * _1658);
    float _1669 = ((_1622 * cbLight._m0[_1616].z) * _1660) + (((cbLight._m0[_1626].z * _1593) * _1635) * _1658);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1667;
        _1689 = _1668;
        _1691 = _1669;
    }
    else
    {
        uint _1695 = _1599 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_367, _368, _369)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3769 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1714 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1667;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1905 = _1599 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_367, _368, _369)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3785 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1924 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1732 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1687;
        _1734 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1689;
        _1736 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1691;
    }
    uint _1739 = _1599 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _370) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1599].x + _449;
    float _1755 = cbLight._m0[_1599].y + _450;
    float _1756 = cbLight._m0[_1599].z + _451;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1599].xyz));
    float _3801 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _1768 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1769 = dot(vec3(_367, _368, _369), vec3(_1761, _1762, _1763));
    float _3823 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1761, _1762, _1763));
    float _3834 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0);
    float _1790 = 0.959999978542327880859375 - _518;
    float _1792 = 0.959999978542327880859375 - _519;
    float _1793 = 0.959999978542327880859375 - _520;
    float _1800 = 1.0 - _1753;
    float _1811 = (0.5 / (((_1768 * ((_1767 * _1800) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1800) + _1753) * _1767))) * _1767;
    float _3845 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1813 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1827 = _1599 + 9u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _370) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1639].x + _449;
    float _1841 = cbLight._m0[_1639].y + _450;
    float _1842 = cbLight._m0[_1639].z + _451;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1639].xyz));
    float _3856 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1854 = dot(vec3(_367, _368, _369), vec3(_1847, _1848, _1849));
    float _3867 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1847, _1848, _1849));
    float _3878 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1839 * _1839;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0);
    float _1880 = 1.0 - _1839;
    float _1890 = (0.5 / (((_1768 * ((_1853 * _1880) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1880) + _1839) * _1853))) * _1853;
    float _3889 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    float _1902 = (((((_1873 * _1790) + _521) * cbLight._m0[_1827].x) * _1892) * _1622) + ((((cbLight._m0[_1739].x * _1591) * ((_1789 * _1790) + _521)) * _1813) * _1635);
    float _1903 = (((((_1873 * _1792) + _523) * cbLight._m0[_1827].y) * _1892) * _1622) + ((((cbLight._m0[_1739].y * _1592) * ((_1789 * _1792) + _523)) * _1813) * _1635);
    float _1904 = (((((_1873 * _1793) + _524) * cbLight._m0[_1827].z) * _1892) * _1622) + ((((cbLight._m0[_1739].z * _1593) * ((_1789 * _1793) + _524)) * _1813) * _1635);
    float _1966;
    float _1968;
    float _1970;
    if (_1676)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1599 + 2u;
        uint _1976 = _1599 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _370) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _449;
        float _1993 = cbLight._m0[_1972].y + _450;
        float _1994 = cbLight._m0[_1972].z + _451;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1972].xyz));
        float _3900 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2006 = dot(vec3(_367, _368, _369), vec3(_1999, _2000, _2001));
        float _3911 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _3922 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0);
        float _2032 = 1.0 - _1991;
        float _2042 = (0.5 / (((_1768 * ((_2005 * _2032) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2032) + _1991) * _2005))) * _2005;
        float _3933 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2044 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2045 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1966 = (((((_2025 * _1790) + _521) * cbLight._m0[_1976].x) * _2044) * _2045) + _1902;
        _1968 = (((((_2025 * _1792) + _523) * cbLight._m0[_1976].y) * _2044) * _2045) + _1903;
        _1970 = (((((_2025 * _1793) + _524) * cbLight._m0[_1976].z) * _2044) * _2045) + _1904;
    }
    float _2080;
    float _2082;
    float _2084;
    if (_1694)
    {
        _2080 = _1966;
        _2082 = _1968;
        _2084 = _1970;
    }
    else
    {
        uint _2091 = _1599 + 3u;
        uint _2095 = _1599 + 11u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _370) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _449;
        float _2112 = cbLight._m0[_2091].y + _450;
        float _2113 = cbLight._m0[_2091].z + _451;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_2091].xyz));
        float _3949 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2125 = dot(vec3(_367, _368, _369), vec3(_2118, _2119, _2120));
        float _3960 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _3971 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0);
        float _2151 = 1.0 - _2110;
        float _2161 = (0.5 / (((_1768 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2151) + _2110) * _2124))) * _2124;
        float _3982 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2080 = (((((_2144 * _1790) + _521) * cbLight._m0[_2095].x) * _2163) * _2164) + _1966;
        _2082 = (((((_2144 * _1792) + _523) * cbLight._m0[_2095].y) * _2163) * _2164) + _1968;
        _2084 = (((((_2144 * _1793) + _524) * cbLight._m0[_2095].z) * _2163) * _2164) + _1970;
    }
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1597.y == 0u)
    {
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2239;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2239;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2239;
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.x;
        uint _2266 = uint((float(_2254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _2255))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _2255)));
        float _2276 = (log2(_2242 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2277 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        uint _2280 = uint(isnan(14.0) ? _2277 : (isnan(_2277) ? 14.0 : min(_2277, 14.0)));
        uvec4 _2285 = texelFetch(g_lightClusterGridBuffer, int(((_2280 << 2u) + (_2266 << 6u)) >> 2u));
        uint _2286 = _2285.x;
        uint _2287 = _2254.z;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        if (((((1u << ((_2287 >> 4u) & 15u)) + 4294967295u) & _2286) == 0u) || ((_2287 & 240u) == 0u))
        {
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
        }
        else
        {
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            uint _2538 = 0u;
            uint _2547;
            bool _2548;
            for (;;)
            {
                _2547 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2538 << 2u)) >> 2u)).x;
                _2548 = _2547 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2548)
                {
                    frontier_phi_61_pred = _2532;
                    frontier_phi_61_pred_1 = _2537;
                    frontier_phi_61_pred_2 = _2536;
                    frontier_phi_61_pred_3 = _2535;
                    frontier_phi_61_pred_4 = _2534;
                    frontier_phi_61_pred_5 = _2533;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2547;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2538 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        float _2722 = _2682.x - _2240;
                        float _2723 = _2682.y - _2241;
                        float _2724 = _2682.z - _2242;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2732 = dot(vec3(_477, _480, _483), vec3(_2729, _2730, _2731));
                        float _2737 = 1.0 - (_2725 * _2682.w);
                        float _4008 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2739 = sqrt(_2725) * _2701.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2732) + _2743;
                        float _2749 = _2739 * _2739;
                        float _2753 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2738) / ((_2749 * 0.699999988079071044921875) + 1.0);
                        float _2757 = (-0.0) - _2240;
                        float _2758 = (-0.0) - _2241;
                        float _2759 = (-0.0) - _2242;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2774 = exp2(log2(1.0 / ((_2749 * 3.5) + 5.0)) * 0.25);
                        float _2775 = 1.0 - _552;
                        float _2782 = sqrt(1.0 - ((1.0 - (_2775 * _2775)) * (1.0 - (_2774 * _2774))));
                        float _2783 = _2782 * _2782;
                        float _2784 = _2783 * _2783;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2795 = dot(vec3(_477, _480, _483), vec3(_2764, _2765, _2766));
                        float _4024 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2799 = dot(vec3(_477, _480, _483), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787));
                        float _4035 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2806 = ((_2802 * _2802) * (_2784 + (-1.0))) + 1.0;
                        float _2807 = _2742 * _2783;
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * _2732) + _2808;
                        float _4046 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2813 = 1.0 - _2783;
                        float _2823 = (0.5 / (((_2812 * ((_2798 * _2813) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2813) + _2783) * _2798))) * _2812;
                        float _4057 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2834 = (((_2784 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_2806 * _2806) * ((_2749 * 2.1991131305694580078125) + 3.141590118408203125))) * _2738;
                        _2591 = (_2753 * _2701.x) + _2659;
                        _2592 = (_2753 * _2701.y) + _2660;
                        _2593 = (_2753 * _2701.z) + _2661;
                        _2588 = (_2834 * _2718.x) + _2656;
                        _2589 = (_2834 * _2718.y) + _2657;
                        _2590 = (_2834 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_61_pred = _2588;
                    frontier_phi_61_pred_1 = _2593;
                    frontier_phi_61_pred_2 = _2592;
                    frontier_phi_61_pred_3 = _2591;
                    frontier_phi_61_pred_4 = _2590;
                    frontier_phi_61_pred_5 = _2589;
                }
                _2388 = frontier_phi_61_pred;
                _2398 = frontier_phi_61_pred_1;
                _2396 = frontier_phi_61_pred_2;
                _2394 = frontier_phi_61_pred_3;
                _2392 = frontier_phi_61_pred_4;
                _2390 = frontier_phi_61_pred_5;
                uint _2539 = _2538 + 1u;
                if (_2539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2532 = _2388;
                    _2533 = _2390;
                    _2534 = _2392;
                    _2535 = _2394;
                    _2536 = _2396;
                    _2537 = _2398;
                    _2538 = _2539;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
        }
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.z;
        uint _2404 = (_2402 >> 8u) & 15u;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((4294967295u << _2404) & _2286) == 0u)
        {
            _2500 = _2387;
            _2502 = _2389;
            _2504 = _2391;
            _2506 = _2393;
            _2508 = _2395;
            _2510 = _2397;
        }
        else
        {
            float _2525 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
            float _2526 = _2525 * _2240;
            float _2527 = _2525 * _2241;
            float _2528 = _2525 * _2242;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2404 < ((_2402 >> 12u) & 15u))
            {
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2639 = _2387;
                float _2640 = _2389;
                float _2641 = _2391;
                float _2642 = _2393;
                float _2643 = _2395;
                float _2644 = _2397;
                uint _2645 = _2404;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2655)
                    {
                        frontier_phi_67_pred = _2642;
                        frontier_phi_67_pred_1 = _2643;
                        frontier_phi_67_pred_2 = _2644;
                        frontier_phi_67_pred_3 = _2641;
                        frontier_phi_67_pred_4 = _2640;
                        frontier_phi_67_pred_5 = _2639;
                    }
                    else
                    {
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        float _2855 = _2642;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        uint _2858 = _2654;
                        uint _2859;
                        vec4 _2884;
                        float _2885;
                        vec4 _2900;
                        vec3 _2912;
                        vec4 _2928;
                        vec4 _2944;
                        float _2991;
                        bool _2992;
                        for (;;)
                        {
                            uint _2869 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2858));
                            _2859 = (_2858 + 4294967295u) & _2858;
                            uint _2871 = _2869 * 40u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            _2885 = _2884.w;
                            uint _2887 = (_2869 * 40u) + 4u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2902 = (_2869 * 40u) + 8u;
                            _2912 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x));
                            uint _2915 = (_2869 * 40u) + 16u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2931 = (_2869 * 40u) + 20u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2869 * 40u) + 24u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2966 = (_2869 * 40u) + 28u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            _2991 = fma(_2242, _2979.z, fma(_2241, _2979.y, _2979.x * _2240)) + _2979.w;
                            _2992 = !((fma(_2242, _2960.z, fma(_2241, _2960.y, _2960.x * _2240)) + _2960.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2992)
                            {
                                float _3019 = _2884.x - _2240;
                                float _3020 = _2884.y - _2241;
                                float _3021 = _2884.z - _2242;
                                float _3022 = dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021));
                                float _3025 = inversesqrt(_3022);
                                float _3026 = _3025 * _3019;
                                float _3027 = _3025 * _3020;
                                float _3028 = _3025 * _3021;
                                float _3032 = 1.0 - (_3022 / (_2885 * _2885));
                                float _4068 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3037 = sqrt(_3022) * _2900.w;
                                float _3039 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                                float _3040 = _3039 * _3039;
                                float _3043 = ((1.0 - _3040) * dot(vec3(_3026, _3027, _3028), vec3(_477, _480, _483))) + _3040;
                                float _3046 = _3037 * _3037;
                                float _3050 = (fma(_2242, _2928.z, fma(_2241, _2928.y, _2928.x * _2240)) + _2928.w) / _2991;
                                float _3051 = (fma(_2242, _2944.z, fma(_2241, _2944.y, _2944.x * _2240)) + _2944.w) / _2991;
                                float _3055 = 1.0 - dot(vec2(_3050, _3051), vec2(_3050, _3051));
                                float _4084 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3057 = _3056 * (((isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))) * _3033) / ((_3046 * 0.699999988079071044921875) + 1.0));
                                float _3069 = exp2(log2(1.0 / ((_3046 * 3.5) + 5.0)) * 0.25);
                                float _3070 = 1.0 - _552;
                                float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                                float _3078 = _3077 * _3077;
                                float _3079 = _3078 * _3078;
                                float _3080 = _3026 - _2526;
                                float _3081 = _3027 - _2527;
                                float _3082 = _3028 - _2528;
                                float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                                float _3090 = dot(vec3(_477, _480, _483), vec3((-0.0) - _2526, (-0.0) - _2527, (-0.0) - _2528));
                                float _4095 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3094 = dot(vec3(_477, _480, _483), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                                float _4106 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3097 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                                float _3102 = _3039 * _3078;
                                float _3103 = _3102 * _3102;
                                float _3109 = ((1.0 - _3103) * dot(vec3(_477, _480, _483), vec3(_3026, _3027, _3028))) + _3103;
                                float _4117 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3111 = 1.0 - _3078;
                                float _3121 = (0.5 / (((_3110 * ((_3093 * _3111) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3078) * _3093))) * _3110;
                                float _4128 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3131 = (_3056 * _3033) * (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_3101 * _3101) * ((_3046 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3131 * _2912.x;
                                frontier_phi_73_pred_1 = _3131 * _2912.y;
                                frontier_phi_73_pred_2 = _3057 * _2900.z;
                                frontier_phi_73_pred_3 = _3057 * _2900.y;
                                frontier_phi_73_pred_4 = _3057 * _2900.x;
                                frontier_phi_73_pred_5 = _3131 * _2912.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3135 = frontier_phi_73_pred;
                            _3136 = frontier_phi_73_pred_1;
                            _3140 = frontier_phi_73_pred_2;
                            _3139 = frontier_phi_73_pred_3;
                            _3138 = frontier_phi_73_pred_4;
                            _3137 = frontier_phi_73_pred_5;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            if (_2859 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2859;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2842;
                        frontier_phi_67_pred_1 = _2843;
                        frontier_phi_67_pred_2 = _2844;
                        frontier_phi_67_pred_3 = _2841;
                        frontier_phi_67_pred_4 = _2840;
                        frontier_phi_67_pred_5 = _2839;
                    }
                    _2507 = frontier_phi_67_pred;
                    _2509 = frontier_phi_67_pred_1;
                    _2511 = frontier_phi_67_pred_2;
                    _2505 = frontier_phi_67_pred_3;
                    _2503 = frontier_phi_67_pred_4;
                    _2501 = frontier_phi_67_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2501;
                        _2640 = _2503;
                        _2641 = _2505;
                        _2642 = _2507;
                        _2643 = _2509;
                        _2644 = _2511;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2509;
                frontier_phi_55_56_ladder_1 = _2511;
                frontier_phi_55_56_ladder_2 = _2507;
                frontier_phi_55_56_ladder_3 = _2505;
                frontier_phi_55_56_ladder_4 = _2503;
                frontier_phi_55_56_ladder_5 = _2501;
            }
            else
            {
                frontier_phi_55_56_ladder = _2395;
                frontier_phi_55_56_ladder_1 = _2397;
                frontier_phi_55_56_ladder_2 = _2393;
                frontier_phi_55_56_ladder_3 = _2391;
                frontier_phi_55_56_ladder_4 = _2389;
                frontier_phi_55_56_ladder_5 = _2387;
            }
            _2500 = frontier_phi_55_56_ladder_5;
            _2502 = frontier_phi_55_56_ladder_4;
            _2504 = frontier_phi_55_56_ladder_3;
            _2506 = frontier_phi_55_56_ladder_2;
            _2508 = frontier_phi_55_56_ladder;
            _2510 = frontier_phi_55_56_ladder_1;
        }
        float _2515 = isnan(1.0) ? _536 : (isnan(_536) ? 1.0 : min(_536, 1.0));
        _2299 = (_2515 * _2506) + _1732;
        _2301 = (_2515 * _2508) + _1734;
        _2303 = (_2515 * _2510) + _1736;
        _2305 = ((_2500 * _521) * _2515) + _2080;
        _2307 = ((_2502 * _523) * _2515) + _2082;
        _2309 = ((_2504 * _524) * _2515) + _2084;
    }
    else
    {
        _2299 = _1732;
        _2301 = _1734;
        _2303 = _1736;
        _2305 = _2080;
        _2307 = _2082;
        _2309 = _2084;
    }
    float _4144 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4155 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4166 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    uint _2329 = _496 + 6u;
    float _2337 = _457 / cbSceneParam._m0[86u].x;
    float _2338 = _458 / cbSceneParam._m0[86u].y;
    vec4 _2352 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, (log2((isnan(cbSceneParam._m0[77u].w) ? _390 : (isnan(_390) ? cbSceneParam._m0[77u].w : min(_390, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2354 = _2352.x;
    float _2355 = _2352.y;
    float _2356 = _2352.z;
    float _2357 = _2352.w;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_390 > cbSceneParam._m0[78u].w)
    {
        float _2412 = isnan(_390) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _390 : min(cbSceneParam._m0[80u].w, _390));
        float _2413 = _2412 / _390;
        float _2424 = _2413 * _442;
        float _2425 = _443 * _2413;
        float _2426 = (-0.0) - _2425;
        float _2428 = _2413 * _444;
        float _2430 = (cbSceneParam._m0[77u].w * _2426) / _2412;
        float _2431 = _2430 + cbSceneParam._m0[79u].w;
        float _2432 = cbSceneParam._m0[79u].w - _2425;
        float _2438 = sqrt(((_2424 * _2424) + (_2425 * _2425)) + (_2428 * _2428));
        float _2441 = (1.0 - (cbSceneParam._m0[77u].w / _2412)) * _2438;
        float _2446 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2448 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2601;
        if (abs((_2426 - _2430) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2601 = ((((_2431 > 0.0) ? exp2(_2446 * _2431) : (2.0 - exp2(_2448 * _2431))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2441;
        }
        else
        {
            float _2561 = 1.0 / cbSceneParam._m0[80u].x;
            float _2562 = isnan(_2432) ? _2431 : (isnan(_2431) ? _2432 : max(_2431, _2432));
            float _2563 = isnan(_2432) ? _2431 : (isnan(_2431) ? _2432 : min(_2431, _2432));
            float _2572 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : min(_2562, 0.0));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            _2601 = ((abs(_2438 / _2426) * cbSceneParam._m0[80u].y) * ((((_2572 - _2573) * 2.0) - ((exp2(_2446 * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0)))) - exp2(_2446 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))))) * _2561)) - ((exp2(_2448 * _2572) - exp2(_2448 * _2573)) * _2561))) + (_2441 * cbSceneParam._m0[80u].z);
        }
        vec4 _2603 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, 1.0), 0.0);
        float _2612 = exp2((_2601 * (-1.44269502162933349609375)) * (1.0 - _2603.w));
        float _2613 = log2(_2612);
        float _2629 = log2(_2357);
        _2450 = (exp2(_2629 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].x)) * _2603.x) / cbSceneParam._m0[78u].x)) + _2354;
        _2452 = (exp2(_2629 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].y)) * _2603.y) / cbSceneParam._m0[78u].y)) + _2355;
        _2454 = (exp2(_2629 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].z)) * _2603.z) / cbSceneParam._m0[78u].z)) + _2356;
        _2456 = _2612 * _2357;
    }
    else
    {
        _2450 = _2354;
        _2452 = _2355;
        _2454 = _2356;
        _2456 = _2357;
    }
    float _2468 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2469 = _2468 == 3.0;
    float _2470 = log2(_2456);
    float _2477 = exp2(_2470 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2299 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _536))) + ((_2305 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2478 = exp2(_2470 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2301 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _536))) + ((_2307 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2479 = exp2(_2470 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2303 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _536))) + ((_2309 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2488 = (_2468 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2488 * (_2469 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2450)));
    SV_Target.y = _2488 * (_2469 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2452)));
    SV_Target.z = _2488 * (_2469 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.w = cbInstanceData._m0[_2329].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2329].w;
}


