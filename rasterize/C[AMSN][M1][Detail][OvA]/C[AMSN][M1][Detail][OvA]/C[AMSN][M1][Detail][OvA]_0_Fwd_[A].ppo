#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1076;
float _3463;
float _3464;
float _3465;
float _3466;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[10u].x;
    float _254 = _247.y * cbMtdParam._m0[10u].y;
    float _255 = _247.z * cbMtdParam._m0[10u].z;
    float _260 = 1.0 - cbMtdParam._m0[13u].z;
    float _3475 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _288 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _280.x;
    float _291 = ((_254 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _280.y;
    float _294 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _280.z;
    float _301 = ((_253 - _288) * _262) + _288;
    float _302 = ((_254 - _291) * _262) + _291;
    float _303 = ((_255 - _294) * _262) + _294;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _351 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3486 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _359 = (_352 * ((_321.x * cbMtdParam._m0[11u].x) - _301)) + _301;
    float _360 = (_352 * ((_321.y * cbMtdParam._m0[11u].y) - _302)) + _302;
    float _361 = (_352 * ((_321.z * cbMtdParam._m0[11u].z) - _303)) + _303;
    vec4 _374 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _376 = _374.x;
    float _378 = _376 - (_376 * TEXCOORD_5.x);
    vec4 _392 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _396 = _392.z;
    vec4 _409 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = cbMtdParam._m0[13u].w * _396;
    float _426 = (((((_396 * 2.0) * _409.z) * cbMtdParam._m0[14u].x) - _423) * cbMtdParam._m0[13u].y) + _423;
    vec4 _439 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _454 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_439.z * cbMtdParam._m0[14u].y) - _426)) + _426;
    float _461 = (_392.x * 2.0) + (-1.0);
    float _462 = (_392.y * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3497 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))));
    float _479 = ((cbMtdParam._m0[13u].x * ((_409.x * 2.0) + (-1.0))) + _461) + ((((_439.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _480 = ((cbMtdParam._m0[13u].x * ((_409.y * 2.0) + (-1.0))) + _462) + ((((_439.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _483 = fma(_468, _212 * NORMAL.x, fma(_480, _219 * TANGENT.x, (_205 * _197) * _479));
    float _486 = fma(_468, _212 * NORMAL.y, fma(_480, _219 * TANGENT.y, (_205 * _198) * _479));
    float _489 = fma(_468, _212 * NORMAL.z, fma(_480, _219 * TANGENT.z, (_205 * _199) * _479));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    float _494 = _493 * _483;
    float _495 = _493 * _486;
    float _496 = _493 * _489;
    float _3508 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _497 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3530 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3541 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3552 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _501 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _517 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _568 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _558);
    float _569 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _558);
    float _570 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _558);
    float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
    float _575 = _568 * _574;
    float _576 = _569 * _574;
    float _577 = _570 * _574;
    vec4 _582 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _584 = _582.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _756 = sqrt(((_568 * _568) + (_569 * _569)) + (_570 * _570));
        float _762 = (cbMatDynParam._m0[5u].x * _756) + cbMatDynParam._m0[5u].y;
        float _3563 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _767 = (cbMatDynParam._m0[5u].z * _756) + cbMatDynParam._m0[5u].w;
        float _3574 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) - _763)) + _763) < ((_584 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _614 = fma(_496, cbSceneParam._m0[5u].z, fma(_495, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _494));
    float _617 = fma(_496, cbSceneParam._m0[6u].z, fma(_495, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _494));
    float _620 = fma(_496, cbSceneParam._m0[7u].z, fma(_495, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _494));
    uint _633 = uint(roundEven(NORMAL.w)) * 13u;
    uint _634 = _633 + 9u;
    uint _635 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _641 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_635].x;
    float _642 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_635].y;
    float _643 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_635].z;
    float _3585 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _647 = 1.0 - _501;
    float _648 = _644 * _647;
    float _649 = _645 * _647;
    float _650 = _646 * _647;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _501;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _501;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _501;
    float _658 = _655 + 0.039999999105930328369140625;
    float _660 = _656 + 0.039999999105930328369140625;
    float _661 = _657 + 0.039999999105930328369140625;
    vec4 _670 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _673 = _670.x * TEXCOORD_5.w;
    float _674 = dot(vec3(_494, _495, _496), vec3(_575, _576, _577));
    float _677 = _674 * 2.0;
    float _681 = (_677 * _494) - _575;
    float _682 = (_677 * _495) - _576;
    float _683 = (_677 * _496) - _577;
    float _687 = abs(dot(vec3(_575, _576, _577), vec3(_494, _495, _496)));
    float _3618 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _689 = sqrt(_497);
    float _702 = exp2((_689 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _708 = (1.0 - _702) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _709 = _702 * _689;
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_745, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737));
        float _804 = fma(_745, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737));
        float _808 = fma(_745, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737));
        float _833 = _737 + _494;
        float _834 = _741 + _495;
        float _835 = _745 + _496;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _800;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _804;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _808;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_494, _495, _496), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3666 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_494, _495, _496), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3699 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_494, _495, _496), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3732 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1077 = _905;
        _1078 = _904;
        _1079 = _916;
        _1080 = _915;
        _1081 = _914;
        _1082 = _926;
        _1083 = _925;
        _1084 = _924;
        _1085 = _939;
        _1086 = _938;
        _1087 = _937;
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _1076;
        _1077 = _1076;
        _1078 = _1076;
        _1079 = _1076;
        _1080 = _1076;
        _1081 = _1076;
        _1082 = _1076;
        _1083 = _1076;
        _1084 = _1076;
        _1085 = _1076;
        _1086 = _1076;
        _1087 = _1076;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1119 = fma(_745, cbModelParam._m0[30u].z, fma(_741, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _737));
        float _1123 = fma(_745, cbModelParam._m0[31u].z, fma(_741, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _737));
        float _1127 = fma(_745, cbModelParam._m0[32u].z, fma(_741, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _737));
        float _1150 = _737 + _494;
        float _1151 = _741 + _495;
        float _1152 = _745 + _496;
        float _1162 = fma(_1152, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150)) - _1119;
        float _1163 = fma(_1152, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150)) - _1123;
        float _1164 = fma(_1152, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150)) - _1127;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1119 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1123 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[35u].z) + ((((((_1127 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1218 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1185.x + (-0.5));
        float _1220 = _1218 * (_1185.y + (-0.5));
        float _1221 = _1218 * (_1185.z + (-0.5));
        float _1228 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1192.x + (-0.5));
        float _1230 = _1228 * (_1192.y + (-0.5));
        float _1231 = _1228 * (_1192.z + (-0.5));
        float _1238 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1199.x + (-0.5));
        float _1240 = _1238 * (_1199.y + (-0.5));
        float _1241 = _1238 * (_1199.z + (-0.5));
        float _1248 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1206.x + (-0.5));
        float _1250 = _1248 * (_1206.y + (-0.5));
        float _1251 = _1248 * (_1206.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_494, _495, _496), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3795 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1282 + 1.0))) + _1287) * _1252;
        float _1297 = _1220 * 0.5;
        float _1298 = _1230 * 0.5;
        float _1299 = _1240 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_494, _495, _496), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3828 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1324 + 1.0))) + _1329) * _1253;
        float _1339 = _1221 * 0.5;
        float _1340 = _1231 * 0.5;
        float _1341 = _1241 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_494, _495, _496), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3861 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1366 + 1.0))) + _1371) * _1254;
        _1388 = _1221;
        _1389 = _1220;
        _1390 = _1219;
        _1391 = _1231;
        _1392 = _1230;
        _1393 = _1229;
        _1394 = _1241;
        _1395 = _1240;
        _1396 = _1239;
        _1397 = _1254;
        _1398 = _1253;
        _1399 = _1252;
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1076;
        _1389 = _1076;
        _1390 = _1076;
        _1391 = _1076;
        _1392 = _1076;
        _1393 = _1076;
        _1394 = _1076;
        _1395 = _1076;
        _1396 = _1076;
        _1397 = _1076;
        _1398 = _1076;
        _1399 = _1076;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1088)) + _1088;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1089)) + _1089;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1090)) + _1090;
    float _1435 = fma(_1414, cbSceneParam._m0[89u].z, fma(_1413, cbSceneParam._m0[89u].y, _1412 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1414, cbSceneParam._m0[90u].z, fma(_1413, cbSceneParam._m0[90u].y, _1412 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1414, cbSceneParam._m0[91u].z, fma(_1413, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1412));
    float _1456 = _681 * 0.5;
    float _1457 = _682 * 0.5;
    float _1458 = _683 * 0.5;
    float _1459 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1462 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1465 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1499;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1472 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1075, _1079, _1082, _1085));
        float _1476 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1480 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1487 = dot(vec4(cbModelParam._m0[39u]), vec4(_1456, _1457, _1458, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1510;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1501 = dot(vec4(cbModelParam._m0[40u]), vec4(_1456, _1457, _1458, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1514 = (_1510 * cbModelParam._m0[1u].x) + (_1499 * (1.0 - cbModelParam._m0[1u].x));
    float _1524 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _497);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1524 : min(cbModelParam._m0[25u].z, _1524));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1572 = fma(_745, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737)) + cbModelParam._m0[13u].w;
        float _1576 = fma(_745, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737)) + cbModelParam._m0[14u].w;
        float _1580 = fma(_745, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737)) + cbModelParam._m0[15u].w;
        float _1583 = fma(_683, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681));
        float _1586 = fma(_683, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681));
        float _1589 = fma(_683, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681));
        float _1617;
        if (_1583 > 0.0)
        {
            _1617 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1617 = frontier_phi_17_15_ladder;
        }
        float _1823;
        if (_1586 > 0.0)
        {
            _1823 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1823 = frontier_phi_26_22_ladder;
        }
        float _2077;
        if (_1589 > 0.0)
        {
            _2077 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2077 = frontier_phi_38_33_ladder;
        }
        float _2079 = isnan(_1823) ? _1617 : (isnan(_1617) ? _1823 : min(_1617, _1823));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1583) + _1572;
        float _2085 = (_2080 * _1586) + _1576;
        float _2086 = (_2080 * _1589) + _1580;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1525);
            frontier_phi_16_38_ladder = _2214.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2214.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2214.x * cbModelParam._m0[1u].y;
        }
        _1605 = frontier_phi_16_38_ladder_2;
        _1607 = frontier_phi_16_38_ladder_1;
        _1609 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_681, _682, _683), _1525);
        _1605 = _1593.x * cbModelParam._m0[1u].y;
        _1607 = _1593.y * cbModelParam._m0[1u].y;
        _1609 = _1593.z * cbModelParam._m0[1u].y;
    }
    float _1613 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _497);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1613 : min(cbModelParam._m0[25u].w, _1613));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1671 = fma(_745, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737)) + cbModelParam._m0[21u].w;
        float _1675 = fma(_745, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737)) + cbModelParam._m0[22u].w;
        float _1679 = fma(_745, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737)) + cbModelParam._m0[23u].w;
        float _1682 = fma(_683, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681));
        float _1685 = fma(_683, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681));
        float _1688 = fma(_683, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681));
        float _1828;
        if (_1682 > 0.0)
        {
            _1828 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1828 = frontier_phi_28_24_ladder;
        }
        float _2104;
        if (_1685 > 0.0)
        {
            _2104 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2104 = frontier_phi_40_35_ladder;
        }
        float _2317;
        if (_1688 > 0.0)
        {
            _2317 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2317 = frontier_phi_49_46_ladder;
        }
        float _2319 = isnan(_2104) ? _1828 : (isnan(_1828) ? _2104 : min(_1828, _2104));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1682) + _1671;
        float _2325 = (_2320 * _1685) + _1675;
        float _2326 = (_2320 * _1688) + _1679;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2327;
        float _2330 = _2327 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2326 > _2330) || ((_2326 < _2328) || ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 < _2328) || (_2324 > _2330))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2326, cbModelParam._m0[17u].z, fma(_2325, cbModelParam._m0[17u].y, _2324 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2326, cbModelParam._m0[18u].z, fma(_2325, cbModelParam._m0[18u].y, _2324 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2326, cbModelParam._m0[19u].z, fma(_2325, cbModelParam._m0[19u].y, _2324 * cbModelParam._m0[19u].x))), _1614);
            frontier_phi_25_49_ladder = _2525.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2525.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2525.x * cbModelParam._m0[1u].z;
        }
        _1707 = frontier_phi_25_49_ladder_2;
        _1709 = frontier_phi_25_49_ladder_1;
        _1711 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_681, _682, _683), _1614);
        _1707 = _1691.x * cbModelParam._m0[1u].z;
        _1709 = _1691.y * cbModelParam._m0[1u].z;
        _1711 = _1691.z * cbModelParam._m0[1u].z;
    }
    float _1724 = (((_708 * _658) + _709) * _673) * ((cbModelParam._m0[1u].w * (_1707 - _1605)) + _1605);
    float _1726 = (((_708 * _660) + _709) * _673) * ((cbModelParam._m0[1u].w * (_1709 - _1607)) + _1607);
    float _1728 = (((_708 * _661) + _709) * _673) * ((cbModelParam._m0[1u].w * (_1711 - _1609)) + _1609);
    float _1731 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1726, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1726, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1726, cbSceneParam._m0[91u].y, _1724 * cbSceneParam._m0[91u].x));
    uvec4 _1747 = floatBitsToUint(cbInstanceData._m0[_633 + 5u]);
    uint _1749 = _1747.x * 14u;
    uint _1750 = _1749 + 13u;
    float _1757 = _673 + (-1.0);
    float _1762 = (cbLight._m0[_1750].x * _1757) + 1.0;
    float _1763 = (cbLight._m0[_1750].y * _1757) + 1.0;
    float _1764 = (cbLight._m0[_1750].z * _1757) + 1.0;
    float _1765 = (cbLight._m0[_1750].w * _1757) + 1.0;
    uint _1766 = _1749 + 5u;
    float _1772 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
    uint _1776 = _1749 + 4u;
    float _1782 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    uint _1786 = _1749 | 1u;
    float _1797 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_494, _495, _496));
    float _1800 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_494, _495, _496));
    float _3997 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _4008 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1805 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1807 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.3183098733425140380859375;
    float _1814 = ((cbLight._m0[_1766].x * _1772) * _1807) + ((cbLight._m0[_1776].x * _1782) * _1805);
    float _1815 = ((_1772 * cbLight._m0[_1766].y) * _1807) + ((_1782 * cbLight._m0[_1776].y) * _1805);
    float _1816 = ((_1772 * cbLight._m0[_1766].z) * _1807) + ((_1782 * cbLight._m0[_1776].z) * _1805);
    uvec4 _1820 = floatBitsToUint(cbLight._m0[_1749 + 12u]);
    bool _1822 = _1820.x == 0u;
    float _1833;
    float _1835;
    float _1837;
    if (_1822)
    {
        _1833 = _1814;
        _1835 = _1815;
        _1837 = _1816;
    }
    else
    {
        uint _1841 = _1749 + 6u;
        float _1857 = (dot(vec3(cbLight._m0[_1749 + 2u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _1858 = _1857 * _1857;
        float _4019 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1860 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _1833 = (((cbLight._m0[_1841].x * 0.3183098733425140380859375) * _1859) * _1860) + _1814;
        _1835 = (((cbLight._m0[_1841].y * 0.3183098733425140380859375) * _1859) * _1860) + _1815;
        _1837 = (((cbLight._m0[_1841].z * 0.3183098733425140380859375) * _1859) * _1860) + _1816;
    }
    bool _1840 = _1820.y == 0u;
    float _1878;
    float _1880;
    float _1882;
    if (_1840)
    {
        _1878 = _1833;
        _1880 = _1835;
        _1882 = _1837;
    }
    else
    {
        uint _2048 = _1749 + 7u;
        float _2064 = (dot(vec3(cbLight._m0[_1749 + 3u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4035 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2067 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1878 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _1833;
        _1880 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _1835;
        _1882 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _1837;
    }
    uint _1885 = _1749 + 8u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _497) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1749].x + _575;
    float _1901 = cbLight._m0[_1749].y + _576;
    float _1902 = cbLight._m0[_1749].z + _577;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1749].xyz));
    float _4051 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _1914 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1915 = dot(vec3(_494, _495, _496), vec3(_1907, _1908, _1909));
    float _4073 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1907, _1908, _1909));
    float _4084 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1923 = _1899 * _1899;
    float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
    float _1935 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
    float _1936 = 0.959999978542327880859375 - _655;
    float _1938 = 0.959999978542327880859375 - _656;
    float _1939 = 0.959999978542327880859375 - _657;
    float _1946 = 1.0 - _1899;
    float _1957 = (0.5 / (((_1914 * ((_1913 * _1946) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _1946) + _1899) * _1913))) * _1913;
    float _4095 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
    uint _1970 = _1749 + 9u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _497) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1786].x + _575;
    float _1984 = cbLight._m0[_1786].y + _576;
    float _1985 = cbLight._m0[_1786].z + _577;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1786].xyz));
    float _4106 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1997 = dot(vec3(_494, _495, _496), vec3(_1990, _1991, _1992));
    float _4117 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1990, _1991, _1992));
    float _4128 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2005 = _1982 * _1982;
    float _2009 = ((_2000 * _2000) * (_2005 + (-1.0))) + 1.0;
    float _2016 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
    float _2023 = 1.0 - _1982;
    float _2033 = (0.5 / (((_1914 * ((_1996 * _2023) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2023) + _1982) * _1996))) * _1996;
    float _4139 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2005 / ((_2009 * _2009) * 3.141590118408203125));
    float _2045 = (((((_2016 * _1936) + _658) * cbLight._m0[_1970].x) * _2035) * _1772) + (((((_1935 * _1936) + _658) * cbLight._m0[_1885].x) * _1959) * _1782);
    float _2046 = (((((_2016 * _1938) + _660) * cbLight._m0[_1970].y) * _2035) * _1772) + (((((_1935 * _1938) + _660) * cbLight._m0[_1885].y) * _1959) * _1782);
    float _2047 = (((((_2016 * _1939) + _661) * cbLight._m0[_1970].z) * _2035) * _1772) + (((((_1935 * _1939) + _661) * cbLight._m0[_1885].z) * _1959) * _1782);
    float _2109;
    float _2111;
    float _2113;
    if (_1822)
    {
        _2109 = _2045;
        _2111 = _2046;
        _2113 = _2047;
    }
    else
    {
        uint _2115 = _1749 + 2u;
        uint _2119 = _1749 + 10u;
        float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _497) * 0.949999988079071044921875);
        float _2134 = _2133 * _2133;
        float _2135 = cbLight._m0[_2115].x + _575;
        float _2136 = cbLight._m0[_2115].y + _576;
        float _2137 = cbLight._m0[_2115].z + _577;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2142 = _2141 * _2135;
        float _2143 = _2141 * _2136;
        float _2144 = _2141 * _2137;
        float _2145 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2115].xyz));
        float _4150 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2149 = dot(vec3(_494, _495, _496), vec3(_2142, _2143, _2144));
        float _4161 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2142, _2143, _2144));
        float _4172 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2157 = _2134 * _2134;
        float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
        float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
        float _2175 = 1.0 - _2134;
        float _2185 = (0.5 / (((_1914 * ((_2148 * _2175) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2175) + _2134) * _2148))) * _2148;
        float _4183 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2187 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
        float _2188 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _2109 = (((((_2168 * _1936) + _658) * cbLight._m0[_2119].x) * _2187) * _2188) + _2045;
        _2111 = (((((_2168 * _1938) + _660) * cbLight._m0[_2119].y) * _2187) * _2188) + _2046;
        _2113 = (((((_2168 * _1939) + _661) * cbLight._m0[_2119].z) * _2187) * _2188) + _2047;
    }
    float _2223;
    float _2225;
    float _2227;
    if (_1840)
    {
        _2223 = _2109;
        _2225 = _2111;
        _2227 = _2113;
    }
    else
    {
        uint _2234 = _1749 + 3u;
        uint _2238 = _1749 + 11u;
        float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _497) * 0.949999988079071044921875);
        float _2253 = _2252 * _2252;
        float _2254 = cbLight._m0[_2234].x + _575;
        float _2255 = cbLight._m0[_2234].y + _576;
        float _2256 = cbLight._m0[_2234].z + _577;
        float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
        float _2261 = _2260 * _2254;
        float _2262 = _2260 * _2255;
        float _2263 = _2260 * _2256;
        float _2264 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2234].xyz));
        float _4199 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2268 = dot(vec3(_494, _495, _496), vec3(_2261, _2262, _2263));
        float _4210 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2272 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2261, _2262, _2263));
        float _4221 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2276 = _2253 * _2253;
        float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
        float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
        float _2294 = 1.0 - _2253;
        float _2304 = (0.5 / (((_1914 * ((_2267 * _2294) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2294) + _2253) * _2267))) * _2267;
        float _4232 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2306 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
        float _2307 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _2223 = (((((_2287 * _1936) + _658) * cbLight._m0[_2238].x) * _2306) * _2307) + _2109;
        _2225 = (((((_2287 * _1938) + _660) * cbLight._m0[_2238].y) * _2306) * _2307) + _2111;
        _2227 = (((((_2287 * _1939) + _661) * cbLight._m0[_2238].z) * _2306) * _2307) + _2113;
    }
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    if (_1747.y == 0u)
    {
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2382;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2382;
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2382;
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.x;
        uint _2409 = uint((float(_2397.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2398))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2398)));
        float _2419 = (log2(_2385 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2420 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        uint _2423 = uint(isnan(14.0) ? _2420 : (isnan(_2420) ? 14.0 : min(_2420, 14.0)));
        uvec4 _2428 = texelFetch(g_lightClusterGridBuffer, int(((_2423 << 2u) + (_2409 << 6u)) >> 2u));
        uint _2429 = _2428.x;
        uint _2430 = _2397.z;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        if (((((1u << ((_2430 >> 4u) & 15u)) + 4294967295u) & _2429) == 0u) || ((_2430 & 240u) == 0u))
        {
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
        }
        else
        {
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            uint _2689 = 0u;
            uint _2698;
            bool _2699;
            for (;;)
            {
                _2698 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2689 << 2u)) >> 2u)).x;
                _2699 = _2698 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2699)
                {
                    frontier_phi_66_pred = _2683;
                    frontier_phi_66_pred_1 = _2688;
                    frontier_phi_66_pred_2 = _2687;
                    frontier_phi_66_pred_3 = _2686;
                    frontier_phi_66_pred_4 = _2685;
                    frontier_phi_66_pred_5 = _2684;
                }
                else
                {
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    uint _2834;
                    _2828 = _2683;
                    _2829 = _2684;
                    _2830 = _2685;
                    _2831 = _2686;
                    _2832 = _2687;
                    _2833 = _2688;
                    _2834 = _2698;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    for (;;)
                    {
                        uint _2838 = uint(findLSB(_2834)) + (_2689 << 5u);
                        uint _2835 = (_2834 + 4294967295u) & _2834;
                        uint _2840 = _2838 * 48u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2860 = (_2838 * 48u) + 4u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2879 = (_2838 * 48u) + 8u;
                        vec3 _2890 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x));
                        float _2894 = _2854.x - _2383;
                        float _2895 = _2854.y - _2384;
                        float _2896 = _2854.z - _2385;
                        float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                        float _2900 = inversesqrt(_2897);
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2904 = dot(vec3(_614, _617, _620), vec3(_2901, _2902, _2903));
                        float _2909 = 1.0 - (_2897 * _2854.w);
                        float _4258 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _2911 = sqrt(_2897) * _2873.w;
                        float _2914 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2904) + _2915;
                        float _2921 = _2911 * _2911;
                        float _2925 = ((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2910) / ((_2921 * 0.699999988079071044921875) + 1.0);
                        float _2929 = (-0.0) - _2383;
                        float _2930 = (-0.0) - _2384;
                        float _2931 = (-0.0) - _2385;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2946 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                        float _2947 = 1.0 - _689;
                        float _2954 = sqrt(1.0 - ((1.0 - (_2947 * _2947)) * (1.0 - (_2946 * _2946))));
                        float _2955 = _2954 * _2954;
                        float _2956 = _2955 * _2955;
                        float _2957 = _2936 + _2901;
                        float _2958 = _2937 + _2902;
                        float _2959 = _2938 + _2903;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2967 = dot(vec3(_614, _617, _620), vec3(_2936, _2937, _2938));
                        float _4274 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2971 = dot(vec3(_614, _617, _620), vec3(_2963 * _2957, _2963 * _2958, _2963 * _2959));
                        float _4285 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _2978 = ((_2974 * _2974) * (_2956 + (-1.0))) + 1.0;
                        float _2979 = _2914 * _2955;
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2904) + _2980;
                        float _4296 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _2985 = 1.0 - _2955;
                        float _2995 = (0.5 / (((_2984 * ((_2970 * _2985) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2955) * _2970))) * _2984;
                        float _4307 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _3006 = (((_2956 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_2978 * _2978) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125))) * _2910;
                        _2758 = (_2925 * _2873.x) + _2831;
                        _2759 = (_2925 * _2873.y) + _2832;
                        _2760 = (_2925 * _2873.z) + _2833;
                        _2755 = (_3006 * _2890.x) + _2828;
                        _2756 = (_3006 * _2890.y) + _2829;
                        _2757 = (_3006 * _2890.z) + _2830;
                        if (_2835 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2828 = _2755;
                            _2829 = _2756;
                            _2830 = _2757;
                            _2831 = _2758;
                            _2832 = _2759;
                            _2833 = _2760;
                            _2834 = _2835;
                        }
                    }
                    frontier_phi_66_pred = _2755;
                    frontier_phi_66_pred_1 = _2760;
                    frontier_phi_66_pred_2 = _2759;
                    frontier_phi_66_pred_3 = _2758;
                    frontier_phi_66_pred_4 = _2757;
                    frontier_phi_66_pred_5 = _2756;
                }
                _2531 = frontier_phi_66_pred;
                _2541 = frontier_phi_66_pred_1;
                _2539 = frontier_phi_66_pred_2;
                _2537 = frontier_phi_66_pred_3;
                _2535 = frontier_phi_66_pred_4;
                _2533 = frontier_phi_66_pred_5;
                uint _2690 = _2689 + 1u;
                if (_2690 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2683 = _2531;
                    _2684 = _2533;
                    _2685 = _2535;
                    _2686 = _2537;
                    _2687 = _2539;
                    _2688 = _2541;
                    _2689 = _2690;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
        }
        uvec4 _2544 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2545 = _2544.z;
        uint _2547 = (_2545 >> 8u) & 15u;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((4294967295u << _2547) & _2429) == 0u)
        {
            _2651 = _2530;
            _2653 = _2532;
            _2655 = _2534;
            _2657 = _2536;
            _2659 = _2538;
            _2661 = _2540;
        }
        else
        {
            float _2676 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
            float _2677 = _2676 * _2383;
            float _2678 = _2676 * _2384;
            float _2679 = _2676 * _2385;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2547 < ((_2545 >> 12u) & 15u))
            {
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2811 = _2530;
                float _2812 = _2532;
                float _2813 = _2534;
                float _2814 = _2536;
                float _2815 = _2538;
                float _2816 = _2540;
                uint _2817 = _2547;
                uint _2826;
                bool _2827;
                for (;;)
                {
                    _2826 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                    _2827 = _2826 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2827)
                    {
                        frontier_phi_77_pred = _2816;
                        frontier_phi_77_pred_1 = _2815;
                        frontier_phi_77_pred_2 = _2814;
                        frontier_phi_77_pred_3 = _2813;
                        frontier_phi_77_pred_4 = _2812;
                        frontier_phi_77_pred_5 = _2811;
                    }
                    else
                    {
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3033 = _2811;
                        float _3034 = _2812;
                        float _3035 = _2813;
                        float _3036 = _2814;
                        float _3037 = _2815;
                        float _3038 = _2816;
                        uint _3039 = _2826;
                        uint _3040;
                        vec4 _3065;
                        float _3066;
                        vec4 _3081;
                        vec3 _3093;
                        vec4 _3109;
                        vec4 _3125;
                        float _3172;
                        bool _3173;
                        for (;;)
                        {
                            uint _3050 = ((_2817 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3039));
                            _3040 = (_3039 + 4294967295u) & _3039;
                            uint _3052 = _3050 * 40u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3066 = _3065.w;
                            uint _3068 = (_3050 * 40u) + 4u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3050 * 40u) + 8u;
                            _3093 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x));
                            uint _3096 = (_3050 * 40u) + 16u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3112 = (_3050 * 40u) + 20u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3128 = (_3050 * 40u) + 24u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3147 = (_3050 * 40u) + 28u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3172 = fma(_2385, _3160.z, fma(_2384, _3160.y, _3160.x * _2383)) + _3160.w;
                            _3173 = !((fma(_2385, _3141.z, fma(_2384, _3141.y, _3141.x * _2383)) + _3141.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3173)
                            {
                                float _3200 = _3065.x - _2383;
                                float _3201 = _3065.y - _2384;
                                float _3202 = _3065.z - _2385;
                                float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                                float _3206 = inversesqrt(_3203);
                                float _3207 = _3206 * _3200;
                                float _3208 = _3206 * _3201;
                                float _3209 = _3206 * _3202;
                                float _3213 = 1.0 - (_3203 / (_3066 * _3066));
                                float _4318 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3218 = sqrt(_3203) * _3081.w;
                                float _3220 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                                float _3221 = _3220 * _3220;
                                float _3224 = ((1.0 - _3221) * dot(vec3(_3207, _3208, _3209), vec3(_614, _617, _620))) + _3221;
                                float _3227 = _3218 * _3218;
                                float _3231 = (fma(_2385, _3109.z, fma(_2384, _3109.y, _3109.x * _2383)) + _3109.w) / _3172;
                                float _3232 = (fma(_2385, _3125.z, fma(_2384, _3125.y, _3125.x * _2383)) + _3125.w) / _3172;
                                float _3236 = 1.0 - dot(vec2(_3231, _3232), vec2(_3231, _3232));
                                float _4334 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3238 = _3237 * (((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3214) / ((_3227 * 0.699999988079071044921875) + 1.0));
                                float _3250 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                                float _3251 = 1.0 - _689;
                                float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                                float _3259 = _3258 * _3258;
                                float _3260 = _3259 * _3259;
                                float _3261 = _3207 - _2677;
                                float _3262 = _3208 - _2678;
                                float _3263 = _3209 - _2679;
                                float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                                float _3271 = dot(vec3(_614, _617, _620), vec3((-0.0) - _2677, (-0.0) - _2678, (-0.0) - _2679));
                                float _4345 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3275 = dot(vec3(_614, _617, _620), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                                float _4356 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                                float _3283 = _3220 * _3259;
                                float _3284 = _3283 * _3283;
                                float _3290 = ((1.0 - _3284) * dot(vec3(_614, _617, _620), vec3(_3207, _3208, _3209))) + _3284;
                                float _4367 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3292 = 1.0 - _3259;
                                float _3302 = (0.5 / (((_3291 * ((_3274 * _3292) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3259) * _3274))) * _3291;
                                float _4378 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3312 = (_3237 * _3214) * (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) / ((_3282 * _3282) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3238 * _3081.y;
                                frontier_phi_83_pred_1 = _3238 * _3081.x;
                                frontier_phi_83_pred_2 = _3312 * _3093.z;
                                frontier_phi_83_pred_3 = _3312 * _3093.y;
                                frontier_phi_83_pred_4 = _3312 * _3093.x;
                                frontier_phi_83_pred_5 = _3238 * _3081.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3320 = frontier_phi_83_pred;
                            _3319 = frontier_phi_83_pred_1;
                            _3318 = frontier_phi_83_pred_2;
                            _3317 = frontier_phi_83_pred_3;
                            _3316 = frontier_phi_83_pred_4;
                            _3321 = frontier_phi_83_pred_5;
                            _3023 = _3319 + _3036;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            _3020 = _3316 + _3033;
                            _3021 = _3317 + _3034;
                            _3022 = _3318 + _3035;
                            if (_3040 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3040;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3025;
                        frontier_phi_77_pred_1 = _3024;
                        frontier_phi_77_pred_2 = _3023;
                        frontier_phi_77_pred_3 = _3022;
                        frontier_phi_77_pred_4 = _3021;
                        frontier_phi_77_pred_5 = _3020;
                    }
                    _2662 = frontier_phi_77_pred;
                    _2660 = frontier_phi_77_pred_1;
                    _2658 = frontier_phi_77_pred_2;
                    _2656 = frontier_phi_77_pred_3;
                    _2654 = frontier_phi_77_pred_4;
                    _2652 = frontier_phi_77_pred_5;
                    uint _2818 = _2817 + 1u;
                    if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2811 = _2652;
                        _2812 = _2654;
                        _2813 = _2656;
                        _2814 = _2658;
                        _2815 = _2660;
                        _2816 = _2662;
                        _2817 = _2818;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2656;
                frontier_phi_58_59_ladder_1 = _2662;
                frontier_phi_58_59_ladder_2 = _2660;
                frontier_phi_58_59_ladder_3 = _2658;
                frontier_phi_58_59_ladder_4 = _2654;
                frontier_phi_58_59_ladder_5 = _2652;
            }
            else
            {
                frontier_phi_58_59_ladder = _2534;
                frontier_phi_58_59_ladder_1 = _2540;
                frontier_phi_58_59_ladder_2 = _2538;
                frontier_phi_58_59_ladder_3 = _2536;
                frontier_phi_58_59_ladder_4 = _2532;
                frontier_phi_58_59_ladder_5 = _2530;
            }
            _2651 = frontier_phi_58_59_ladder_5;
            _2653 = frontier_phi_58_59_ladder_4;
            _2655 = frontier_phi_58_59_ladder;
            _2657 = frontier_phi_58_59_ladder_3;
            _2659 = frontier_phi_58_59_ladder_2;
            _2661 = frontier_phi_58_59_ladder_1;
        }
        float _2666 = isnan(1.0) ? _673 : (isnan(_673) ? 1.0 : min(_673, 1.0));
        _2442 = (_2666 * _2657) + _1878;
        _2444 = (_2666 * _2659) + _1880;
        _2446 = (_2666 * _2661) + _1882;
        _2448 = ((_2651 * _658) * _2666) + _2223;
        _2450 = ((_2653 * _660) * _2666) + _2225;
        _2452 = ((_2655 * _661) * _2666) + _2227;
    }
    else
    {
        _2442 = _1878;
        _2444 = _1880;
        _2446 = _1882;
        _2448 = _2223;
        _2450 = _2225;
        _2452 = _2227;
    }
    float _4394 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4405 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4416 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2469 = ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2442 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _673))) + ((_2448 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    float _2470 = ((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2444 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _673))) + ((_2450 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    float _2471 = ((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2446 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _673))) + ((_2452 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    uint _2472 = _633 + 6u;
    float _2480 = _595 / cbSceneParam._m0[86u].x;
    float _2481 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2495 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2480, _2481, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2497 = _2495.x;
    float _2498 = _2495.y;
    float _2499 = _2495.z;
    float _2500 = _2495.w;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2555 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2556 = _2555 / _517;
        float _2567 = _2556 * _568;
        float _2568 = _569 * _2556;
        float _2569 = (-0.0) - _2568;
        float _2571 = _2556 * _570;
        float _2573 = (cbSceneParam._m0[77u].w * _2569) / _2555;
        float _2574 = _2573 + cbSceneParam._m0[79u].w;
        float _2575 = cbSceneParam._m0[79u].w - _2568;
        float _2581 = sqrt(((_2567 * _2567) + (_2568 * _2568)) + (_2571 * _2571));
        float _2584 = (1.0 - (cbSceneParam._m0[77u].w / _2555)) * _2581;
        float _2589 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2591 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2768;
        if (abs((_2569 - _2573) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2768 = ((((_2574 > 0.0) ? exp2(_2589 * _2574) : (2.0 - exp2(_2591 * _2574))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2584;
        }
        else
        {
            float _2712 = 1.0 / cbSceneParam._m0[80u].x;
            float _2713 = isnan(_2575) ? _2574 : (isnan(_2574) ? _2575 : max(_2574, _2575));
            float _2714 = isnan(_2575) ? _2574 : (isnan(_2574) ? _2575 : min(_2574, _2575));
            float _2723 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : min(_2713, 0.0));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            _2768 = ((abs(_2581 / _2569) * cbSceneParam._m0[80u].y) * ((((_2723 - _2724) * 2.0) - ((exp2(_2589 * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0)))) - exp2(_2589 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0))))) * _2712)) - ((exp2(_2591 * _2723) - exp2(_2591 * _2724)) * _2712))) + (_2584 * cbSceneParam._m0[80u].z);
        }
        vec4 _2770 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2480, _2481, 1.0), 0.0);
        float _2779 = exp2((_2768 * (-1.44269502162933349609375)) * (1.0 - _2770.w));
        float _2780 = log2(_2779);
        float _2796 = log2(_2500);
        _2593 = (exp2(_2796 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].x)) * _2770.x) / cbSceneParam._m0[78u].x)) + _2497;
        _2595 = (exp2(_2796 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].y)) * _2770.y) / cbSceneParam._m0[78u].y)) + _2498;
        _2597 = (exp2(_2796 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].z)) * _2770.z) / cbSceneParam._m0[78u].z)) + _2499;
        _2599 = _2779 * _2500;
    }
    else
    {
        _2593 = _2497;
        _2595 = _2498;
        _2597 = _2499;
        _2599 = _2500;
    }
    bool _2806;
    vec4 _2609;
    vec4 _2631;
    float _2633;
    float _2637;
    float _2638;
    float _2639;
    float _2640;
    bool _2650;
    for (;;)
    {
        _2609 = cbMatDynParam._m0[0u];
        float _2611 = roundEven(_2609.y);
        bool _2612 = _2611 == 3.0;
        float _2613 = log2(_2599);
        float _2620 = exp2(_2613 * cbSceneParam._m0[78u].x) * _2469;
        float _2621 = exp2(_2613 * cbSceneParam._m0[78u].y) * _2470;
        float _2622 = exp2(_2613 * cbSceneParam._m0[78u].z) * _2471;
        float _2629 = _584 + (-0.5);
        _2631 = cbMtdParam._m0[1u];
        _2633 = _2631.y * _2629;
        float _2636 = (_2611 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2637 = _2636 * (_2612 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2593)));
        _2638 = _2636 * (_2612 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2595)));
        _2639 = _2636 * (_2612 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2597)));
        _2640 = _2629 * 0.999000012874603271484375;
        _2650 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2650)
        {
            if ((cbInstanceData._m0[_633 + 7u].x + _2640) < 0.5)
            {
                _2806 = true;
                break;
            }
        }
        uint _2747 = _634 + uint(_2609.w);
        if ((cbInstanceData._m0[_2747].w < 1.0) && ((cbInstanceData._m0[_2747].w + _2640) < 0.5))
        {
            _2806 = true;
            break;
        }
        if ((_2633 + 1.0) < _2631.x)
        {
            _2806 = true;
            break;
        }
        _2806 = false;
        break;
    }
    float _3011;
    if (_2806)
    {
        discard_state = true;
        _3011 = 0.0;
    }
    else
    {
        _3011 = cbInstanceData._m0[_2472].w;
    }
    SV_Target.x = _2637;
    SV_Target.y = _2638;
    SV_Target.z = _2639;
    SV_Target.w = _3011;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2472].w;
    discard_exit();
}


