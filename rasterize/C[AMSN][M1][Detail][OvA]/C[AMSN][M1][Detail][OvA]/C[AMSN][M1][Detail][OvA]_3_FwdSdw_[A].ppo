#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _922;
float _3573;
float _3574;
float _3575;
float _3576;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _253 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _230.x) * cbMtdParam._m0[9u].x) * _253.x;
    float _266 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _230.y) * cbMtdParam._m0[9u].y) * _253.y;
    float _270 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _230.z) * cbMtdParam._m0[9u].z) * _253.z;
    vec4 _287 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _291 = _287.z;
    vec4 _304 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _318 = cbMtdParam._m0[13u].w * _291;
    float _321 = (((((_291 * 2.0) * _304.z) * cbMtdParam._m0[14u].x) - _318) * cbMtdParam._m0[13u].y) + _318;
    float _325 = (_287.x * 2.0) + (-1.0);
    float _327 = (_287.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3585 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    float _341 = (cbMtdParam._m0[13u].x * ((_304.x * 2.0) + (-1.0))) + _325;
    float _342 = (cbMtdParam._m0[13u].x * ((_304.y * 2.0) + (-1.0))) + _327;
    float _345 = fma(_334, _200 * NORMAL.x, fma(_342, _207 * TANGENT.x, (_193 * _185) * _341));
    float _348 = fma(_334, _200 * NORMAL.y, fma(_342, _207 * TANGENT.y, (_193 * _186) * _341));
    float _351 = fma(_334, _200 * NORMAL.z, fma(_342, _207 * TANGENT.z, (_193 * _187) * _341));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    float _356 = _355 * _345;
    float _357 = _355 * _348;
    float _358 = _355 * _351;
    float _3596 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _359 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3618 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3629 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _378 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _420);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _420);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _420);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    vec4 _444 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _446 = _444.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _601 = sqrt(((_430 * _430) + (_431 * _431)) + (_432 * _432));
        float _607 = (cbMatDynParam._m0[5u].x * _601) + cbMatDynParam._m0[5u].y;
        float _3640 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _608 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _612 = (cbMatDynParam._m0[5u].z * _601) + cbMatDynParam._m0[5u].w;
        float _3651 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) - _608)) + _608) < ((_446 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _477 = fma(_358, cbSceneParam._m0[5u].z, fma(_357, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _356));
    float _480 = fma(_358, cbSceneParam._m0[6u].z, fma(_357, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _356));
    float _483 = fma(_358, cbSceneParam._m0[7u].z, fma(_357, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _356));
    uint _496 = uint(roundEven(NORMAL.w)) * 13u;
    uint _497 = _496 + 9u;
    uint _498 = _497 + uint(cbMatDynParam._m0[0u].w);
    float _504 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_498].x;
    float _505 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_498].y;
    float _506 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_498].z;
    float _3662 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    vec4 _518 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _521 = _518.x * TEXCOORD_5.w;
    float _522 = dot(vec3(_356, _357, _358), vec3(_437, _438, _439));
    float _525 = _522 * 2.0;
    float _529 = (_525 * _356) - _437;
    float _530 = (_525 * _357) - _438;
    float _531 = (_525 * _358) - _439;
    float _535 = abs(dot(vec3(_437, _438, _439), vec3(_356, _357, _358)));
    float _3695 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _537 = sqrt(_359);
    float _550 = exp2((_537 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_537 * 3.0));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _921;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _646 = fma(_590, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582));
        float _650 = fma(_590, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582));
        float _654 = fma(_590, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582));
        float _679 = _582 + _356;
        float _680 = _586 + _357;
        float _681 = _590 + _358;
        float _691 = fma(_681, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679)) - _646;
        float _692 = fma(_681, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679)) - _650;
        float _693 = fma(_681, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679)) - _654;
        float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
        float _710 = ((_697 * _691) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_646 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_697 * _692) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_650 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_697 * _693) / cbModelParam._m0[34u].z) + ((((((_654 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_715.x + (-0.5));
        float _751 = _749 * (_715.y + (-0.5));
        float _752 = _749 * (_715.z + (-0.5));
        float _759 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_722.x + (-0.5));
        float _761 = _759 * (_722.y + (-0.5));
        float _762 = _759 * (_722.z + (-0.5));
        float _769 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_729.x + (-0.5));
        float _771 = _769 * (_729.y + (-0.5));
        float _772 = _769 * (_729.z + (-0.5));
        float _779 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_736.x + (-0.5));
        float _781 = _779 * (_736.y + (-0.5));
        float _782 = _779 * (_736.z + (-0.5));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = _750 * 0.5;
        float _787 = _760 * 0.5;
        float _788 = _770 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _803 = (dot(vec3(_356, _357, _358), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _813 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3743 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_815 + 1.0))) + _820) * _783;
        float _830 = _751 * 0.5;
        float _831 = _761 * 0.5;
        float _832 = _771 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_356, _357, _358), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3776 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_857 + 1.0))) + _862) * _784;
        float _872 = _752 * 0.5;
        float _873 = _762 * 0.5;
        float _874 = _772 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_356, _357, _358), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3809 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_899 + 1.0))) + _904) * _785;
        _921 = _752;
        _923 = _751;
        _924 = _750;
        _925 = _762;
        _926 = _761;
        _927 = _760;
        _928 = _772;
        _929 = _771;
        _930 = _770;
        _931 = _785;
        _932 = _784;
        _933 = _783;
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
    }
    else
    {
        _921 = _922;
        _923 = _922;
        _924 = _922;
        _925 = _922;
        _926 = _922;
        _927 = _922;
        _928 = _922;
        _929 = _922;
        _930 = _922;
        _931 = _922;
        _932 = _922;
        _933 = _922;
        _934 = 0.0;
        _935 = 0.0;
        _936 = 0.0;
    }
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _965 = fma(_590, cbModelParam._m0[30u].z, fma(_586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _582));
        float _969 = fma(_590, cbModelParam._m0[31u].z, fma(_586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _582));
        float _973 = fma(_590, cbModelParam._m0[32u].z, fma(_586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _582));
        float _996 = _582 + _356;
        float _997 = _586 + _357;
        float _998 = _590 + _358;
        float _1008 = fma(_998, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996)) - _965;
        float _1009 = fma(_998, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996)) - _969;
        float _1010 = fma(_998, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996)) - _973;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_965 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_969 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[35u].z) + ((((((_973 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1064 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1031.x + (-0.5));
        float _1066 = _1064 * (_1031.y + (-0.5));
        float _1067 = _1064 * (_1031.z + (-0.5));
        float _1074 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1038.x + (-0.5));
        float _1076 = _1074 * (_1038.y + (-0.5));
        float _1077 = _1074 * (_1038.z + (-0.5));
        float _1084 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1045.x + (-0.5));
        float _1086 = _1084 * (_1045.y + (-0.5));
        float _1087 = _1084 * (_1045.z + (-0.5));
        float _1094 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1052.x + (-0.5));
        float _1096 = _1094 * (_1052.y + (-0.5));
        float _1097 = _1094 * (_1052.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_356, _357, _358), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3872 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1128 + 1.0))) + _1133) * _1098;
        float _1143 = _1066 * 0.5;
        float _1144 = _1076 * 0.5;
        float _1145 = _1086 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_356, _357, _358), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3905 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1170 + 1.0))) + _1175) * _1099;
        float _1185 = _1067 * 0.5;
        float _1186 = _1077 * 0.5;
        float _1187 = _1087 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_356, _357, _358), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3938 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1212 + 1.0))) + _1217) * _1100;
        _1234 = _1067;
        _1235 = _1066;
        _1236 = _1065;
        _1237 = _1077;
        _1238 = _1076;
        _1239 = _1075;
        _1240 = _1087;
        _1241 = _1086;
        _1242 = _1085;
        _1243 = _1100;
        _1244 = _1099;
        _1245 = _1098;
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _922;
        _1235 = _922;
        _1236 = _922;
        _1237 = _922;
        _1238 = _922;
        _1239 = _922;
        _1240 = _922;
        _1241 = _922;
        _1242 = _922;
        _1243 = _922;
        _1244 = _922;
        _1245 = _922;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _934)) + _934;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _935)) + _935;
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _936)) + _936;
    float _1281 = fma(_1260, cbSceneParam._m0[89u].z, fma(_1259, cbSceneParam._m0[89u].y, _1258 * cbSceneParam._m0[89u].x));
    float _1284 = fma(_1260, cbSceneParam._m0[90u].z, fma(_1259, cbSceneParam._m0[90u].y, _1258 * cbSceneParam._m0[90u].x));
    float _1287 = fma(_1260, cbSceneParam._m0[91u].z, fma(_1259, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1258));
    float _1302 = _529 * 0.5;
    float _1303 = _530 * 0.5;
    float _1304 = _531 * 0.5;
    float _1305 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1308 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1311 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1345;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1318 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_921, _925, _928, _931));
        float _1322 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_923, _926, _929, _932));
        float _1326 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_924, _927, _930, _933));
        float _1333 = dot(vec4(cbModelParam._m0[39u]), vec4(_1302, _1303, _1304, 1.0));
        _1345 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1345 = 1.0;
    }
    float _1356;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1347 = dot(vec4(cbModelParam._m0[40u]), vec4(_1302, _1303, _1304, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1360 = (_1356 * cbModelParam._m0[1u].x) + (_1345 * (1.0 - cbModelParam._m0[1u].x));
    float _1370 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _359);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1370 : min(cbModelParam._m0[25u].z, _1370));
    float _1451;
    float _1453;
    float _1455;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1418 = fma(_590, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _582)) + cbModelParam._m0[13u].w;
        float _1422 = fma(_590, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _582)) + cbModelParam._m0[14u].w;
        float _1426 = fma(_590, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _582)) + cbModelParam._m0[15u].w;
        float _1429 = fma(_531, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529));
        float _1432 = fma(_531, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529));
        float _1435 = fma(_531, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529));
        float _1463;
        if (_1429 > 0.0)
        {
            _1463 = abs((1.0 - _1418) / _1429);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1418 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1463 = frontier_phi_17_15_ladder;
        }
        float _1637;
        if (_1432 > 0.0)
        {
            _1637 = abs((1.0 - _1422) / _1432);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1422 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1637 = frontier_phi_26_22_ladder;
        }
        float _1933;
        if (_1435 > 0.0)
        {
            _1933 = abs((1.0 - _1426) / _1435);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1426 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1933 = frontier_phi_38_33_ladder;
        }
        float _1935 = isnan(_1637) ? _1463 : (isnan(_1463) ? _1637 : min(_1463, _1637));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1429) + _1418;
        float _1941 = (_1936 * _1432) + _1422;
        float _1942 = (_1936 * _1435) + _1426;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2087 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1371);
            frontier_phi_16_38_ladder = _2087.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2087.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2087.x * cbModelParam._m0[1u].y;
        }
        _1451 = frontier_phi_16_38_ladder_2;
        _1453 = frontier_phi_16_38_ladder_1;
        _1455 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_529, _530, _531), _1371);
        _1451 = _1439.x * cbModelParam._m0[1u].y;
        _1453 = _1439.y * cbModelParam._m0[1u].y;
        _1455 = _1439.z * cbModelParam._m0[1u].y;
    }
    float _1459 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _359);
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1459 : min(cbModelParam._m0[25u].w, _1459));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1517 = fma(_590, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _582)) + cbModelParam._m0[21u].w;
        float _1521 = fma(_590, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _582)) + cbModelParam._m0[22u].w;
        float _1525 = fma(_590, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _582)) + cbModelParam._m0[23u].w;
        float _1528 = fma(_531, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529));
        float _1531 = fma(_531, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529));
        float _1534 = fma(_531, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529));
        float _1642;
        if (_1528 > 0.0)
        {
            _1642 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1642 = frontier_phi_28_24_ladder;
        }
        float _1960;
        if (_1531 > 0.0)
        {
            _1960 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1960 = frontier_phi_40_35_ladder;
        }
        float _2287;
        if (_1534 > 0.0)
        {
            _2287 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2287 = frontier_phi_50_47_ladder;
        }
        float _2289 = isnan(_1960) ? _1642 : (isnan(_1642) ? _1960 : min(_1642, _1960));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1528) + _1517;
        float _2295 = (_2290 * _1531) + _1521;
        float _2296 = (_2290 * _1534) + _1525;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1460);
            frontier_phi_25_50_ladder = _2414.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2414.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2414.x * cbModelParam._m0[1u].z;
        }
        _1553 = frontier_phi_25_50_ladder_2;
        _1555 = frontier_phi_25_50_ladder_1;
        _1557 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_529, _530, _531), _1460);
        _1553 = _1537.x * cbModelParam._m0[1u].z;
        _1555 = _1537.y * cbModelParam._m0[1u].z;
        _1557 = _1537.z * cbModelParam._m0[1u].z;
    }
    float _1569 = ((((1.0 - _550) * ((_537 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_550 * _537)) * _521;
    float _1570 = _1569 * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1571 = _1569 * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1572 = _1569 * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1575 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1629 = _1616 / _1628;
    float _1630 = _1620 / _1628;
    float _1631 = _1624 / _1628;
    float _1778;
    float _1779;
    float _1780;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1658 = ((uint(_1631 > cbSceneParam._m0[59u].y) + uint(_1631 > cbSceneParam._m0[59u].x)) + uint(_1631 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1659 = _1658 + 43u;
        uint _1667 = _1658 + 44u;
        uint _1675 = _1658 + 45u;
        uint _1683 = _1658 + 46u;
        float _1694 = fma(_1628, cbSceneParam._m0[_1659].w, fma(_1624, cbSceneParam._m0[_1659].z, fma(_1620, cbSceneParam._m0[_1659].y, _1616 * cbSceneParam._m0[_1659].x)));
        float _1698 = fma(_1628, cbSceneParam._m0[_1667].w, fma(_1624, cbSceneParam._m0[_1667].z, fma(_1620, cbSceneParam._m0[_1667].y, _1616 * cbSceneParam._m0[_1667].x)));
        float _1706 = fma(_1628, cbSceneParam._m0[_1683].w, fma(_1624, cbSceneParam._m0[_1683].z, fma(_1620, cbSceneParam._m0[_1683].y, _1616 * cbSceneParam._m0[_1683].x)));
        float _1711 = cbSceneParam._m0[33u].z * _1706;
        float _1713 = cbSceneParam._m0[33u].w * _1706;
        float _1716 = fma(_1628, cbSceneParam._m0[_1675].w, fma(_1624, cbSceneParam._m0[_1675].z, fma(_1620, cbSceneParam._m0[_1675].y, _1616 * cbSceneParam._m0[_1675].x))) / _1706;
        float _1764 = (cbSceneParam._m0[33u].x - sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631))) * cbSceneParam._m0[33u].y;
        float _4064 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1771 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1711 + _1694) / _1706, (_1713 + _1698) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 + _1694) / _1706, (_1698 - _1711) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 - _1711) / _1706, (_1698 - _1713) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 - _1713) / _1706, (_1711 + _1698) / _1706), _1716), 0.0)).x), vec4(0.25)));
        _1778 = 1.0 - (_1771 * cbSceneParam._m0[34u].x);
        _1779 = 1.0 - (_1771 * cbSceneParam._m0[34u].y);
        _1780 = 1.0 - (_1771 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1778 = 1.0;
        _1779 = 1.0;
        _1780 = 1.0;
    }
    float _1844;
    float _1846;
    float _1848;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1832 = fma(_1628, cbSceneParam._m0[63u].w, fma(_1624, cbSceneParam._m0[63u].z, fma(_1620, cbSceneParam._m0[63u].y, _1616 * cbSceneParam._m0[63u].x)));
        float _1833 = fma(_1628, cbSceneParam._m0[60u].w, fma(_1624, cbSceneParam._m0[60u].z, fma(_1620, cbSceneParam._m0[60u].y, _1616 * cbSceneParam._m0[60u].x))) / _1832;
        float _1834 = fma(_1628, cbSceneParam._m0[61u].w, fma(_1624, cbSceneParam._m0[61u].z, fma(_1620, cbSceneParam._m0[61u].y, _1616 * cbSceneParam._m0[61u].x))) / _1832;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1833 >= cbSceneParam._m0[64u].x) && (_1834 >= cbSceneParam._m0[64u].y)) && (_1833 <= cbSceneParam._m0[64u].z)) && (_1834 <= cbSceneParam._m0[64u].w))
        {
            float _1973 = fma(_1628, cbSceneParam._m0[62u].w, fma(_1624, cbSceneParam._m0[62u].z, fma(_1620, cbSceneParam._m0[62u].y, _1616 * cbSceneParam._m0[62u].x))) / _1832;
            float _1977 = isnan(cbSceneParam._m0[41u].w) ? _1973 : (isnan(_1973) ? cbSceneParam._m0[41u].w : max(_1973, cbSceneParam._m0[41u].w));
            float _2020 = (cbSceneParam._m0[33u].x - sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631))) * cbSceneParam._m0[33u].y;
            float _4080 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
            float _2027 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1833, cbSceneParam._m0[33u].w + _1834), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1833, _1834 - cbSceneParam._m0[33u].z), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1833 - cbSceneParam._m0[33u].z, _1834 - cbSceneParam._m0[33u].w), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1833 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1834), _1977), 0.0)).x), vec4(0.25)));
            float _2031 = 1.0 - (_2027 * cbSceneParam._m0[34u].x);
            float _2032 = 1.0 - (_2027 * cbSceneParam._m0[34u].y);
            float _2033 = 1.0 - (_2027 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2033) ? _1780 : (isnan(_1780) ? _2033 : min(_1780, _2033));
            frontier_phi_37_36_ladder_1 = isnan(_2032) ? _1779 : (isnan(_1779) ? _2032 : min(_1779, _2032));
            frontier_phi_37_36_ladder_2 = isnan(_2031) ? _1778 : (isnan(_1778) ? _2031 : min(_1778, _2031));
        }
        else
        {
            frontier_phi_37_36_ladder = _1780;
            frontier_phi_37_36_ladder_1 = _1779;
            frontier_phi_37_36_ladder_2 = _1778;
        }
        _1844 = frontier_phi_37_36_ladder_2;
        _1846 = frontier_phi_37_36_ladder_1;
        _1848 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1844 = _1778;
        _1846 = _1779;
        _1848 = _1780;
    }
    uvec4 _1853 = floatBitsToUint(cbInstanceData._m0[_496 + 5u]);
    uint _1855 = _1853.x * 14u;
    uint _1856 = _1855 + 13u;
    float _1863 = _521 + (-1.0);
    float _1868 = (cbLight._m0[_1856].x * _1863) + 1.0;
    float _1869 = (cbLight._m0[_1856].y * _1863) + 1.0;
    float _1870 = (cbLight._m0[_1856].z * _1863) + 1.0;
    float _1871 = (cbLight._m0[_1856].w * _1863) + 1.0;
    uint _1872 = _1855 + 5u;
    float _1878 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1882 = _1855 + 4u;
    float _1892 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1896 = _1855 | 1u;
    float _1907 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_356, _357, _358));
    float _1910 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_356, _357, _358));
    float _4116 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _4127 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1915 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _1917 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1924 = ((cbLight._m0[_1872].x * _1878) * _1917) + (((cbLight._m0[_1882].x * _1844) * _1892) * _1915);
    float _1925 = ((_1878 * cbLight._m0[_1872].y) * _1917) + (((cbLight._m0[_1882].y * _1846) * _1892) * _1915);
    float _1926 = ((_1878 * cbLight._m0[_1872].z) * _1917) + (((cbLight._m0[_1882].z * _1848) * _1892) * _1915);
    uvec4 _1930 = floatBitsToUint(cbLight._m0[_1855 + 12u]);
    bool _1932 = _1930.x == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1932)
    {
        _2034 = _1924;
        _2036 = _1925;
        _2038 = _1926;
    }
    else
    {
        uint _2042 = _1855 + 6u;
        float _2058 = (dot(vec3(cbLight._m0[_1855 + 2u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _2059 = _2058 * _2058;
        float _4138 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2061 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2034 = (((cbLight._m0[_2042].x * 0.3183098733425140380859375) * _2060) * _2061) + _1924;
        _2036 = (((cbLight._m0[_2042].y * 0.3183098733425140380859375) * _2060) * _2061) + _1925;
        _2038 = (((cbLight._m0[_2042].z * 0.3183098733425140380859375) * _2060) * _2061) + _1926;
    }
    bool _2041 = _1930.y == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2041)
    {
        _2096 = _2034;
        _2098 = _2036;
        _2100 = _2038;
    }
    else
    {
        uint _2258 = _1855 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1855 + 3u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4154 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2277 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2096 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2034;
        _2098 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2036;
        _2100 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2038;
    }
    uint _2103 = _1855 + 8u;
    float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _359) * 0.949999988079071044921875);
    float _2117 = _2116 * _2116;
    float _2118 = cbLight._m0[_1855].x + _437;
    float _2119 = cbLight._m0[_1855].y + _438;
    float _2120 = cbLight._m0[_1855].z + _439;
    float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
    float _2125 = _2124 * _2118;
    float _2126 = _2124 * _2119;
    float _2127 = _2124 * _2120;
    float _2128 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1855].xyz));
    float _4170 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2132 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2133 = dot(vec3(_356, _357, _358), vec3(_2125, _2126, _2127));
    float _4192 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2125, _2126, _2127));
    float _4203 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2117 * _2117;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2157 = 1.0 - _2117;
    float _2168 = (0.5 / (((_2132 * ((_2131 * _2157) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2157) + _2117) * _2131))) * _2131;
    float _4214 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    uint _2184 = _1855 + 9u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _359) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_1896].x + _437;
    float _2198 = cbLight._m0[_1896].y + _438;
    float _2199 = cbLight._m0[_1896].z + _439;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1896].xyz));
    float _4225 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2211 = dot(vec3(_356, _357, _358), vec3(_2204, _2205, _2206));
    float _4236 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2204, _2205, _2206));
    float _4247 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2196 * _2196;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2233 = 1.0 - _2196;
    float _2243 = (0.5 / (((_2132 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2233) + _2196) * _2210))) * _2210;
    float _4258 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    float _2255 = (((_2232 * cbLight._m0[_2184].x) * _2245) * _1878) + ((((cbLight._m0[_2103].x * _1844) * _2156) * _2170) * _1892);
    float _2256 = (((_2232 * cbLight._m0[_2184].y) * _2245) * _1878) + ((((cbLight._m0[_2103].y * _1846) * _2156) * _2170) * _1892);
    float _2257 = (((_2232 * cbLight._m0[_2184].z) * _2245) * _1878) + ((((cbLight._m0[_2103].z * _1848) * _2156) * _2170) * _1892);
    float _2313;
    float _2315;
    float _2317;
    if (_1932)
    {
        _2313 = _2255;
        _2315 = _2256;
        _2317 = _2257;
    }
    else
    {
        uint _2319 = _1855 + 2u;
        uint _2323 = _1855 + 10u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _359) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _437;
        float _2340 = cbLight._m0[_2319].y + _438;
        float _2341 = cbLight._m0[_2319].z + _439;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2319].xyz));
        float _4269 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2353 = dot(vec3(_356, _357, _358), vec3(_2346, _2347, _2348));
        float _4280 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4291 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2375 = 1.0 - _2338;
        float _2385 = (0.5 / (((_2132 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2375) + _2338) * _2352))) * _2352;
        float _4302 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2313 = (((_2374 * cbLight._m0[_2323].x) * _2387) * _2388) + _2255;
        _2315 = (((_2374 * cbLight._m0[_2323].y) * _2387) * _2388) + _2256;
        _2317 = (((_2374 * cbLight._m0[_2323].z) * _2387) * _2388) + _2257;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2041)
    {
        _2419 = _2313;
        _2421 = _2315;
        _2423 = _2317;
    }
    else
    {
        uint _2430 = _1855 + 3u;
        uint _2434 = _1855 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _359) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _437;
        float _2451 = cbLight._m0[_2430].y + _438;
        float _2452 = cbLight._m0[_2430].z + _439;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2430].xyz));
        float _4318 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2464 = dot(vec3(_356, _357, _358), vec3(_2457, _2458, _2459));
        float _4329 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4340 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2486 = 1.0 - _2449;
        float _2496 = (0.5 / (((_2132 * ((_2463 * _2486) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2486) + _2449) * _2463))) * _2463;
        float _4351 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2419 = (((_2485 * cbLight._m0[_2434].x) * _2498) * _2499) + _2313;
        _2421 = (((_2485 * cbLight._m0[_2434].y) * _2498) * _2499) + _2315;
        _2423 = (((_2485 * cbLight._m0[_2434].z) * _2498) * _2499) + _2317;
    }
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_1853.y == 0u)
    {
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.x;
        uint _2532 = uint((float(_2520.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _2521))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _2521)));
        float _2542 = (log2(_1631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2543 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        uint _2546 = uint(isnan(14.0) ? _2543 : (isnan(_2543) ? 14.0 : min(_2543, 14.0)));
        uvec4 _2551 = texelFetch(g_lightClusterGridBuffer, int(((_2546 << 2u) + (_2532 << 6u)) >> 2u));
        uint _2552 = _2551.x;
        uint _2553 = _2520.z;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((((1u << ((_2553 >> 4u) & 15u)) + 4294967295u) & _2552) == 0u) || ((_2553 & 240u) == 0u))
        {
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
        }
        else
        {
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            uint _2791 = 0u;
            uint _2800;
            bool _2801;
            for (;;)
            {
                _2800 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                _2801 = _2800 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2801)
                {
                    frontier_phi_71_pred = _2790;
                    frontier_phi_71_pred_1 = _2789;
                    frontier_phi_71_pred_2 = _2788;
                    frontier_phi_71_pred_3 = _2787;
                    frontier_phi_71_pred_4 = _2786;
                    frontier_phi_71_pred_5 = _2785;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2800;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2791 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _1629;
                        float _2997 = _2956.y - _1630;
                        float _2998 = _2956.z - _1631;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_477, _480, _483), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4377 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _1629;
                        float _3032 = (-0.0) - _1630;
                        float _3033 = (-0.0) - _1631;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3047 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3048 = 1.0 - _537;
                        float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                        float _3056 = _3055 * _3055;
                        float _3057 = _3056 * _3056;
                        float _3058 = _3038 + _3003;
                        float _3059 = _3039 + _3004;
                        float _3060 = _3040 + _3005;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3068 = dot(vec3(_477, _480, _483), vec3(_3038, _3039, _3040));
                        float _4393 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3072 = dot(vec3(_477, _480, _483), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                        float _4404 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                        float _3080 = _3016 * _3056;
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3006) + _3081;
                        float _4415 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3086 = 1.0 - _3056;
                        float _3096 = (0.5 / (((_3085 * ((_3071 * _3086) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3085 * _3086) + _3056) * _3071))) * _3085;
                        float _4426 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3107 = (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3079 * _3079) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2860 = (_3027 * _2975.x) + _2933;
                        _2861 = (_3027 * _2975.y) + _2934;
                        _2862 = (_3027 * _2975.z) + _2935;
                        _2857 = (_3107 * _2992.x) + _2930;
                        _2858 = (_3107 * _2992.y) + _2931;
                        _2859 = (_3107 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_71_pred = _2862;
                    frontier_phi_71_pred_1 = _2861;
                    frontier_phi_71_pred_2 = _2860;
                    frontier_phi_71_pred_3 = _2859;
                    frontier_phi_71_pred_4 = _2858;
                    frontier_phi_71_pred_5 = _2857;
                }
                _2643 = frontier_phi_71_pred;
                _2641 = frontier_phi_71_pred_1;
                _2639 = frontier_phi_71_pred_2;
                _2637 = frontier_phi_71_pred_3;
                _2635 = frontier_phi_71_pred_4;
                _2633 = frontier_phi_71_pred_5;
                uint _2792 = _2791 + 1u;
                if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2785 = _2633;
                    _2786 = _2635;
                    _2787 = _2637;
                    _2788 = _2639;
                    _2789 = _2641;
                    _2790 = _2643;
                    _2791 = _2792;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
        }
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.z;
        uint _2649 = (_2647 >> 8u) & 15u;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((4294967295u << _2649) & _2552) == 0u)
        {
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
        }
        else
        {
            float _2778 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
            float _2779 = _2778 * _1629;
            float _2780 = _2778 * _1630;
            float _2781 = _2778 * _1631;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2649 < ((_2647 >> 12u) & 15u))
            {
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2913 = _2632;
                float _2914 = _2634;
                float _2915 = _2636;
                float _2916 = _2638;
                float _2917 = _2640;
                float _2918 = _2642;
                uint _2919 = _2649;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2929)
                    {
                        frontier_phi_82_pred = _2918;
                        frontier_phi_82_pred_1 = _2917;
                        frontier_phi_82_pred_2 = _2916;
                        frontier_phi_82_pred_3 = _2915;
                        frontier_phi_82_pred_4 = _2914;
                        frontier_phi_82_pred_5 = _2913;
                    }
                    else
                    {
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        float _3136 = _2915;
                        float _3137 = _2916;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        uint _3140 = _2928;
                        uint _3141;
                        vec4 _3166;
                        float _3167;
                        vec4 _3182;
                        vec3 _3194;
                        vec4 _3210;
                        vec4 _3226;
                        float _3273;
                        bool _3274;
                        for (;;)
                        {
                            uint _3151 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3140));
                            _3141 = (_3140 + 4294967295u) & _3140;
                            uint _3153 = _3151 * 40u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3167 = _3166.w;
                            uint _3169 = (_3151 * 40u) + 4u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3151 * 40u) + 8u;
                            _3194 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x));
                            uint _3197 = (_3151 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3213 = (_3151 * 40u) + 20u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3229 = (_3151 * 40u) + 24u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3248 = (_3151 * 40u) + 28u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3273 = fma(_1631, _3261.z, fma(_1630, _3261.y, _3261.x * _1629)) + _3261.w;
                            _3274 = !((fma(_1631, _3242.z, fma(_1630, _3242.y, _3242.x * _1629)) + _3242.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3274)
                            {
                                float _3301 = _3166.x - _1629;
                                float _3302 = _3166.y - _1630;
                                float _3303 = _3166.z - _1631;
                                float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                                float _3307 = inversesqrt(_3304);
                                float _3308 = _3307 * _3301;
                                float _3309 = _3307 * _3302;
                                float _3310 = _3307 * _3303;
                                float _3314 = 1.0 - (_3304 / (_3167 * _3167));
                                float _4437 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3319 = sqrt(_3304) * _3182.w;
                                float _3321 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                                float _3322 = _3321 * _3321;
                                float _3325 = ((1.0 - _3322) * dot(vec3(_3308, _3309, _3310), vec3(_477, _480, _483))) + _3322;
                                float _3328 = _3319 * _3319;
                                float _3332 = (fma(_1631, _3210.z, fma(_1630, _3210.y, _3210.x * _1629)) + _3210.w) / _3273;
                                float _3333 = (fma(_1631, _3226.z, fma(_1630, _3226.y, _3226.x * _1629)) + _3226.w) / _3273;
                                float _3337 = 1.0 - dot(vec2(_3332, _3333), vec2(_3332, _3333));
                                float _4453 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3339 = _3338 * (((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3315) / ((_3328 * 0.699999988079071044921875) + 1.0));
                                float _3351 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                                float _3352 = 1.0 - _537;
                                float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                                float _3360 = _3359 * _3359;
                                float _3361 = _3360 * _3360;
                                float _3362 = _3308 - _2779;
                                float _3363 = _3309 - _2780;
                                float _3364 = _3310 - _2781;
                                float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                                float _3372 = dot(vec3(_477, _480, _483), vec3((-0.0) - _2779, (-0.0) - _2780, (-0.0) - _2781));
                                float _4464 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3376 = dot(vec3(_477, _480, _483), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                                float _4475 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                                float _3384 = _3321 * _3360;
                                float _3385 = _3384 * _3384;
                                float _3391 = ((1.0 - _3385) * dot(vec3(_477, _480, _483), vec3(_3308, _3309, _3310))) + _3385;
                                float _4486 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3393 = 1.0 - _3360;
                                float _3403 = (0.5 / (((_3392 * ((_3375 * _3393) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3360) * _3375))) * _3392;
                                float _4497 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3413 = (_3338 * _3315) * (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3383 * _3383) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3339 * _3182.z;
                                frontier_phi_88_pred_1 = _3339 * _3182.y;
                                frontier_phi_88_pred_2 = _3339 * _3182.x;
                                frontier_phi_88_pred_3 = _3413 * _3194.z;
                                frontier_phi_88_pred_4 = _3413 * _3194.y;
                                frontier_phi_88_pred_5 = _3413 * _3194.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3422 = frontier_phi_88_pred;
                            _3421 = frontier_phi_88_pred_1;
                            _3420 = frontier_phi_88_pred_2;
                            _3419 = frontier_phi_88_pred_3;
                            _3418 = frontier_phi_88_pred_4;
                            _3417 = frontier_phi_88_pred_5;
                            _3124 = _3420 + _3137;
                            _3125 = _3421 + _3138;
                            _3126 = _3422 + _3139;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            if (_3141 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3141;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3126;
                        frontier_phi_82_pred_1 = _3125;
                        frontier_phi_82_pred_2 = _3124;
                        frontier_phi_82_pred_3 = _3123;
                        frontier_phi_82_pred_4 = _3122;
                        frontier_phi_82_pred_5 = _3121;
                    }
                    _2764 = frontier_phi_82_pred;
                    _2762 = frontier_phi_82_pred_1;
                    _2760 = frontier_phi_82_pred_2;
                    _2758 = frontier_phi_82_pred_3;
                    _2756 = frontier_phi_82_pred_4;
                    _2754 = frontier_phi_82_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2754;
                        _2914 = _2756;
                        _2915 = _2758;
                        _2916 = _2760;
                        _2917 = _2762;
                        _2918 = _2764;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2760;
                frontier_phi_63_64_ladder_1 = _2764;
                frontier_phi_63_64_ladder_2 = _2762;
                frontier_phi_63_64_ladder_3 = _2758;
                frontier_phi_63_64_ladder_4 = _2756;
                frontier_phi_63_64_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_63_64_ladder = _2638;
                frontier_phi_63_64_ladder_1 = _2642;
                frontier_phi_63_64_ladder_2 = _2640;
                frontier_phi_63_64_ladder_3 = _2636;
                frontier_phi_63_64_ladder_4 = _2634;
                frontier_phi_63_64_ladder_5 = _2632;
            }
            _2753 = frontier_phi_63_64_ladder_5;
            _2755 = frontier_phi_63_64_ladder_4;
            _2757 = frontier_phi_63_64_ladder_3;
            _2759 = frontier_phi_63_64_ladder;
            _2761 = frontier_phi_63_64_ladder_2;
            _2763 = frontier_phi_63_64_ladder_1;
        }
        float _2768 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
        _2565 = (_2768 * _2759) + _2096;
        _2567 = (_2768 * _2761) + _2098;
        _2569 = (_2768 * _2763) + _2100;
        _2571 = ((_2753 * 0.039999999105930328369140625) * _2768) + _2419;
        _2573 = ((_2755 * 0.039999999105930328369140625) * _2768) + _2421;
        _2575 = ((_2757 * 0.039999999105930328369140625) * _2768) + _2423;
    }
    else
    {
        _2565 = _2096;
        _2567 = _2098;
        _2569 = _2100;
        _2571 = _2419;
        _2573 = _2421;
        _2575 = _2423;
    }
    float _4513 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4524 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4535 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _2592 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2565 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _521))) + ((_2571 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1360)) * cbPerFrame._m0[3u].x);
    float _2593 = ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2567 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _521))) + ((_2573 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1360)) * cbPerFrame._m0[3u].x);
    float _2594 = ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2569 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _521))) + ((_2575 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1360)) * cbPerFrame._m0[3u].x);
    uint _2595 = _496 + 6u;
    float _2603 = _457 / cbSceneParam._m0[86u].x;
    float _2604 = _458 / cbSceneParam._m0[86u].y;
    vec4 _2618 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, (log2((isnan(cbSceneParam._m0[77u].w) ? _378 : (isnan(_378) ? cbSceneParam._m0[77u].w : min(_378, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2620 = _2618.x;
    float _2621 = _2618.y;
    float _2622 = _2618.z;
    float _2623 = _2618.w;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_378 > cbSceneParam._m0[78u].w)
    {
        float _2657 = isnan(_378) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _378 : min(cbSceneParam._m0[80u].w, _378));
        float _2658 = _2657 / _378;
        float _2669 = _2658 * _430;
        float _2670 = _431 * _2658;
        float _2671 = (-0.0) - _2670;
        float _2673 = _2658 * _432;
        float _2675 = (cbSceneParam._m0[77u].w * _2671) / _2657;
        float _2676 = _2675 + cbSceneParam._m0[79u].w;
        float _2677 = cbSceneParam._m0[79u].w - _2670;
        float _2683 = sqrt(((_2669 * _2669) + (_2670 * _2670)) + (_2673 * _2673));
        float _2686 = (1.0 - (cbSceneParam._m0[77u].w / _2657)) * _2683;
        float _2691 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2693 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2671 - _2675) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2676 > 0.0) ? exp2(_2691 * _2676) : (2.0 - exp2(_2693 * _2676))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2686;
        }
        else
        {
            float _2814 = 1.0 / cbSceneParam._m0[80u].x;
            float _2815 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : max(_2676, _2677));
            float _2816 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : min(_2676, _2677));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            _2870 = ((abs(_2683 / _2671) * cbSceneParam._m0[80u].y) * ((((_2825 - _2826) * 2.0) - ((exp2(_2691 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)))) - exp2(_2691 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))))) * _2814)) - ((exp2(_2693 * _2825) - exp2(_2693 * _2826)) * _2814))) + (_2686 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2623);
        _2695 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2620;
        _2697 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2621;
        _2699 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2622;
        _2701 = _2881 * _2623;
    }
    else
    {
        _2695 = _2620;
        _2697 = _2621;
        _2699 = _2622;
        _2701 = _2623;
    }
    bool _2908;
    vec4 _2711;
    vec4 _2733;
    float _2735;
    float _2739;
    float _2740;
    float _2741;
    float _2742;
    bool _2752;
    for (;;)
    {
        _2711 = cbMatDynParam._m0[0u];
        float _2713 = roundEven(_2711.y);
        bool _2714 = _2713 == 3.0;
        float _2715 = log2(_2701);
        float _2722 = exp2(_2715 * cbSceneParam._m0[78u].x) * _2592;
        float _2723 = exp2(_2715 * cbSceneParam._m0[78u].y) * _2593;
        float _2724 = exp2(_2715 * cbSceneParam._m0[78u].z) * _2594;
        float _2731 = _446 + (-0.5);
        _2733 = cbMtdParam._m0[1u];
        _2735 = _2733.y * _2731;
        float _2738 = (_2713 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2739 = _2738 * (_2714 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2695)));
        _2740 = _2738 * (_2714 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2697)));
        _2741 = _2738 * (_2714 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2699)));
        _2742 = _2731 * 0.999000012874603271484375;
        _2752 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2752)
        {
            if ((cbInstanceData._m0[_496 + 7u].x + _2742) < 0.5)
            {
                _2908 = true;
                break;
            }
        }
        uint _2849 = _497 + uint(_2711.w);
        if ((cbInstanceData._m0[_2849].w < 1.0) && ((cbInstanceData._m0[_2849].w + _2742) < 0.5))
        {
            _2908 = true;
            break;
        }
        if ((_2735 + 1.0) < _2733.x)
        {
            _2908 = true;
            break;
        }
        _2908 = false;
        break;
    }
    float _3112;
    if (_2908)
    {
        discard_state = true;
        _3112 = 0.0;
    }
    else
    {
        _3112 = cbInstanceData._m0[_2595].w;
    }
    SV_Target.x = _2739;
    SV_Target.y = _2740;
    SV_Target.z = _2741;
    SV_Target.w = _3112;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2595].w;
    discard_exit();
}


