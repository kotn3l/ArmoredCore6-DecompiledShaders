#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _913;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _228.x) * cbMtdParam._m0[9u].x) * _251.x;
    float _264 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _228.y) * cbMtdParam._m0[9u].y) * _251.y;
    float _268 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _228.z) * cbMtdParam._m0[9u].z) * _251.z;
    vec4 _281 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _283 = _281.x;
    vec4 _300 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _304 = _300.z;
    vec4 _317 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _331 = cbMtdParam._m0[13u].w * _304;
    float _334 = (((((_304 * 2.0) * _317.z) * cbMtdParam._m0[14u].x) - _331) * cbMtdParam._m0[13u].y) + _331;
    float _338 = (_300.x * 2.0) + (-1.0);
    float _340 = (_300.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3530 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    float _354 = (cbMtdParam._m0[13u].x * ((_317.x * 2.0) + (-1.0))) + _338;
    float _355 = (cbMtdParam._m0[13u].x * ((_317.y * 2.0) + (-1.0))) + _340;
    float _358 = fma(_347, _198 * NORMAL.x, fma(_355, _205 * TANGENT.x, (_191 * _183) * _354));
    float _361 = fma(_347, _198 * NORMAL.y, fma(_355, _205 * TANGENT.y, (_191 * _184) * _354));
    float _364 = fma(_347, _198 * NORMAL.z, fma(_355, _205 * TANGENT.z, (_191 * _185) * _354));
    float _368 = inversesqrt(dot(vec3(_358, _361, _364), vec3(_358, _361, _364)));
    float _369 = _368 * _358;
    float _370 = _368 * _361;
    float _371 = _368 * _364;
    float _3541 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _372 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3563 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3574 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3585 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _376 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _444 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _434);
    float _445 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _434);
    float _446 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _434);
    float _450 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _451 = _444 * _450;
    float _452 = _445 * _450;
    float _453 = _446 * _450;
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _479 = fma(_371, cbSceneParam._m0[5u].z, fma(_370, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _369));
    float _482 = fma(_371, cbSceneParam._m0[6u].z, fma(_370, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _369));
    float _485 = fma(_371, cbSceneParam._m0[7u].z, fma(_370, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _369));
    uint _498 = uint(roundEven(NORMAL.w)) * 13u;
    uint _500 = (_498 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _506 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_500].x;
    float _507 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_500].y;
    float _508 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_500].z;
    float _3596 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _512 = 1.0 - _376;
    float _513 = _509 * _512;
    float _514 = _510 * _512;
    float _515 = _511 * _512;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _376;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _376;
    float _522 = (_511 + (-0.039999999105930328369140625)) * _376;
    float _523 = _520 + 0.039999999105930328369140625;
    float _525 = _521 + 0.039999999105930328369140625;
    float _526 = _522 + 0.039999999105930328369140625;
    vec4 _535 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _538 = _535.x * TEXCOORD_5.w;
    float _539 = dot(vec3(_369, _370, _371), vec3(_451, _452, _453));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _369) - _451;
    float _547 = (_542 * _370) - _452;
    float _548 = (_542 * _371) - _453;
    float _552 = abs(dot(vec3(_451, _452, _453), vec3(_369, _370, _371)));
    float _3629 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_372);
    float _567 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _573 = (1.0 - _567) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _574 = _567 * _554;
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _641 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _645 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _670 = _602 + _369;
        float _671 = _606 + _370;
        float _672 = _610 + _371;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _637;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _641;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _645;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_637 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_641 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_645 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_369, _370, _371), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3677 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_369, _370, _371), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3710 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_369, _370, _371), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3743 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _957 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _961 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _984 = _602 + _369;
        float _985 = _606 + _370;
        float _986 = _610 + _371;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_369, _370, _371), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3806 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_369, _370, _371), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3839 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_369, _370, _371), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3872 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _913;
        _1223 = _913;
        _1224 = _913;
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = _913;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _546 * 0.5;
    float _1291 = _547 * 0.5;
    float _1292 = _548 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _916, _919, _922));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_914, _917, _920, _923));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_915, _918, _921, _924));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _372);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1420 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1423 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1451 = frontier_phi_14_12_ladder;
        }
        float _1627;
        if (_1420 > 0.0)
        {
            _1627 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1627 = frontier_phi_23_19_ladder;
        }
        float _1922;
        if (_1423 > 0.0)
        {
            _1922 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1922 = frontier_phi_35_30_ladder;
        }
        float _1924 = isnan(_1627) ? _1451 : (isnan(_1451) ? _1627 : min(_1451, _1627));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1417) + _1406;
        float _1930 = (_1925 * _1420) + _1410;
        float _1931 = (_1925 * _1423) + _1414;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1934 = (-1.0) - _1932;
        float _1936 = _1932 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1931 > _1936) || ((_1931 < _1934) || ((_1930 > _1936) || ((_1930 < _1934) || ((_1929 < _1934) || (_1929 > _1936))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1931, cbModelParam._m0[9u].z, fma(_1930, cbModelParam._m0[9u].y, _1929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1931, cbModelParam._m0[10u].z, fma(_1930, cbModelParam._m0[10u].y, _1929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1931, cbModelParam._m0[11u].z, fma(_1930, cbModelParam._m0[11u].y, _1929 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_13_35_ladder = _2076.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2076.x * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_13_35_ladder_2;
        _1441 = frontier_phi_13_35_ladder_1;
        _1443 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1359);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _372);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1519 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1522 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1632;
        if (_1516 > 0.0)
        {
            _1632 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1632 = frontier_phi_25_21_ladder;
        }
        float _1949;
        if (_1519 > 0.0)
        {
            _1949 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1949 = frontier_phi_37_32_ladder;
        }
        float _2287;
        if (_1522 > 0.0)
        {
            _2287 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2287 = frontier_phi_47_44_ladder;
        }
        float _2289 = isnan(_1949) ? _1632 : (isnan(_1632) ? _1949 : min(_1632, _1949));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1516) + _1505;
        float _2295 = (_2290 * _1519) + _1509;
        float _2296 = (_2290 * _1522) + _1513;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_22_47_ladder = _2418.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2418.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2418.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_22_47_ladder_2;
        _1543 = frontier_phi_22_47_ladder_1;
        _1545 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1558 = (((_573 * _523) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_573 * _525) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_573 * _526) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1610 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1618 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1619 = _1606 / _1618;
    float _1620 = _1610 / _1618;
    float _1621 = _1614 / _1618;
    float _1768;
    float _1769;
    float _1770;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1648 = ((uint(_1621 > cbSceneParam._m0[59u].y) + uint(_1621 > cbSceneParam._m0[59u].x)) + uint(_1621 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1649 = _1648 + 43u;
        uint _1657 = _1648 + 44u;
        uint _1665 = _1648 + 45u;
        uint _1673 = _1648 + 46u;
        float _1684 = fma(_1618, cbSceneParam._m0[_1649].w, fma(_1614, cbSceneParam._m0[_1649].z, fma(_1610, cbSceneParam._m0[_1649].y, _1606 * cbSceneParam._m0[_1649].x)));
        float _1688 = fma(_1618, cbSceneParam._m0[_1657].w, fma(_1614, cbSceneParam._m0[_1657].z, fma(_1610, cbSceneParam._m0[_1657].y, _1606 * cbSceneParam._m0[_1657].x)));
        float _1696 = fma(_1618, cbSceneParam._m0[_1673].w, fma(_1614, cbSceneParam._m0[_1673].z, fma(_1610, cbSceneParam._m0[_1673].y, _1606 * cbSceneParam._m0[_1673].x)));
        float _1701 = cbSceneParam._m0[33u].z * _1696;
        float _1703 = cbSceneParam._m0[33u].w * _1696;
        float _1706 = fma(_1618, cbSceneParam._m0[_1665].w, fma(_1614, cbSceneParam._m0[_1665].z, fma(_1610, cbSceneParam._m0[_1665].y, _1606 * cbSceneParam._m0[_1665].x))) / _1696;
        float _1754 = (cbSceneParam._m0[33u].x - sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621))) * cbSceneParam._m0[33u].y;
        float _3998 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1761 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1701 + _1684) / _1696, (_1703 + _1688) / _1696), _1706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 + _1684) / _1696, (_1688 - _1701) / _1696), _1706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1684 - _1701) / _1696, (_1688 - _1703) / _1696), _1706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1684 - _1703) / _1696, (_1701 + _1688) / _1696), _1706), 0.0)).x), vec4(0.25)));
        _1768 = 1.0 - (_1761 * cbSceneParam._m0[34u].x);
        _1769 = 1.0 - (_1761 * cbSceneParam._m0[34u].y);
        _1770 = 1.0 - (_1761 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1768 = 1.0;
        _1769 = 1.0;
        _1770 = 1.0;
    }
    float _1834;
    float _1836;
    float _1838;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1822 = fma(_1618, cbSceneParam._m0[63u].w, fma(_1614, cbSceneParam._m0[63u].z, fma(_1610, cbSceneParam._m0[63u].y, _1606 * cbSceneParam._m0[63u].x)));
        float _1823 = fma(_1618, cbSceneParam._m0[60u].w, fma(_1614, cbSceneParam._m0[60u].z, fma(_1610, cbSceneParam._m0[60u].y, _1606 * cbSceneParam._m0[60u].x))) / _1822;
        float _1824 = fma(_1618, cbSceneParam._m0[61u].w, fma(_1614, cbSceneParam._m0[61u].z, fma(_1610, cbSceneParam._m0[61u].y, _1606 * cbSceneParam._m0[61u].x))) / _1822;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1823 >= cbSceneParam._m0[64u].x) && (_1824 >= cbSceneParam._m0[64u].y)) && (_1823 <= cbSceneParam._m0[64u].z)) && (_1824 <= cbSceneParam._m0[64u].w))
        {
            float _1962 = fma(_1618, cbSceneParam._m0[62u].w, fma(_1614, cbSceneParam._m0[62u].z, fma(_1610, cbSceneParam._m0[62u].y, _1606 * cbSceneParam._m0[62u].x))) / _1822;
            float _1966 = isnan(cbSceneParam._m0[41u].w) ? _1962 : (isnan(_1962) ? cbSceneParam._m0[41u].w : max(_1962, cbSceneParam._m0[41u].w));
            float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621))) * cbSceneParam._m0[33u].y;
            float _4014 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
            float _2016 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1823, cbSceneParam._m0[33u].w + _1824), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1823, _1824 - cbSceneParam._m0[33u].z), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1823 - cbSceneParam._m0[33u].z, _1824 - cbSceneParam._m0[33u].w), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1823 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1824), _1966), 0.0)).x), vec4(0.25)));
            float _2020 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
            float _2021 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
            float _2022 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2022) ? _1770 : (isnan(_1770) ? _2022 : min(_1770, _2022));
            frontier_phi_34_33_ladder_1 = isnan(_2021) ? _1769 : (isnan(_1769) ? _2021 : min(_1769, _2021));
            frontier_phi_34_33_ladder_2 = isnan(_2020) ? _1768 : (isnan(_1768) ? _2020 : min(_1768, _2020));
        }
        else
        {
            frontier_phi_34_33_ladder = _1770;
            frontier_phi_34_33_ladder_1 = _1769;
            frontier_phi_34_33_ladder_2 = _1768;
        }
        _1834 = frontier_phi_34_33_ladder_2;
        _1836 = frontier_phi_34_33_ladder_1;
        _1838 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1834 = _1768;
        _1836 = _1769;
        _1838 = _1770;
    }
    uvec4 _1843 = floatBitsToUint(cbInstanceData._m0[_498 + 5u]);
    uint _1845 = _1843.x * 14u;
    uint _1846 = _1845 + 13u;
    float _1853 = _538 + (-1.0);
    float _1858 = (cbLight._m0[_1846].x * _1853) + 1.0;
    float _1859 = (cbLight._m0[_1846].y * _1853) + 1.0;
    float _1860 = (cbLight._m0[_1846].z * _1853) + 1.0;
    float _1861 = (cbLight._m0[_1846].w * _1853) + 1.0;
    uint _1862 = _1845 + 5u;
    float _1868 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1872 = _1845 + 4u;
    float _1881 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1885 = _1845 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_369, _370, _371));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_369, _370, _371));
    float _4050 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4061 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1862].x * _1868) * _1906) + (((cbLight._m0[_1872].x * _1834) * _1881) * _1904);
    float _1914 = ((_1868 * cbLight._m0[_1862].y) * _1906) + (((cbLight._m0[_1872].y * _1836) * _1881) * _1904);
    float _1915 = ((_1868 * cbLight._m0[_1862].z) * _1906) + (((cbLight._m0[_1872].z * _1838) * _1881) * _1904);
    uvec4 _1919 = floatBitsToUint(cbLight._m0[_1845 + 12u]);
    bool _1921 = _1919.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1921)
    {
        _2023 = _1913;
        _2025 = _1914;
        _2027 = _1915;
    }
    else
    {
        uint _2031 = _1845 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1845 + 2u].xyz), vec3(_369, _370, _371)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4072 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2050 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1913;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1914;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1915;
    }
    bool _2030 = _1919.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2030)
    {
        _2085 = _2023;
        _2087 = _2025;
        _2089 = _2027;
    }
    else
    {
        uint _2258 = _1845 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1845 + 3u].xyz), vec3(_369, _370, _371)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4088 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2277 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2085 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2023;
        _2087 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2025;
        _2089 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2027;
    }
    uint _2092 = _1845 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _372) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1845].x + _451;
    float _2108 = cbLight._m0[_1845].y + _452;
    float _2109 = cbLight._m0[_1845].z + _453;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1845].xyz));
    float _4104 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _2121 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2122 = dot(vec3(_369, _370, _371), vec3(_2114, _2115, _2116));
    float _4126 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2114, _2115, _2116));
    float _4137 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0);
    float _2143 = 0.959999978542327880859375 - _520;
    float _2145 = 0.959999978542327880859375 - _521;
    float _2146 = 0.959999978542327880859375 - _522;
    float _2153 = 1.0 - _2106;
    float _2164 = (0.5 / (((_2121 * ((_2120 * _2153) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2153) + _2106) * _2120))) * _2120;
    float _4148 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2180 = _1845 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _372) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1885].x + _451;
    float _2194 = cbLight._m0[_1885].y + _452;
    float _2195 = cbLight._m0[_1885].z + _453;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1885].xyz));
    float _4159 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2207 = dot(vec3(_369, _370, _371), vec3(_2200, _2201, _2202));
    float _4170 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2200, _2201, _2202));
    float _4181 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0);
    float _2233 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2121 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2233) + _2192) * _2206))) * _2206;
    float _4192 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2255 = (((((_2226 * _2143) + _523) * cbLight._m0[_2180].x) * _2245) * _1868) + ((((cbLight._m0[_2092].x * _1834) * ((_2142 * _2143) + _523)) * _2166) * _1881);
    float _2256 = (((((_2226 * _2145) + _525) * cbLight._m0[_2180].y) * _2245) * _1868) + ((((cbLight._m0[_2092].y * _1836) * ((_2142 * _2145) + _525)) * _2166) * _1881);
    float _2257 = (((((_2226 * _2146) + _526) * cbLight._m0[_2180].z) * _2245) * _1868) + ((((cbLight._m0[_2092].z * _1838) * ((_2142 * _2146) + _526)) * _2166) * _1881);
    float _2313;
    float _2315;
    float _2317;
    if (_1921)
    {
        _2313 = _2255;
        _2315 = _2256;
        _2317 = _2257;
    }
    else
    {
        uint _2319 = _1845 + 2u;
        uint _2323 = _1845 + 10u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _372) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _451;
        float _2340 = cbLight._m0[_2319].y + _452;
        float _2341 = cbLight._m0[_2319].z + _453;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_2319].xyz));
        float _4203 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2353 = dot(vec3(_369, _370, _371), vec3(_2346, _2347, _2348));
        float _4214 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4225 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_2121 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2379) + _2338) * _2352))) * _2352;
        float _4236 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2313 = (((((_2372 * _2143) + _523) * cbLight._m0[_2323].x) * _2391) * _2392) + _2255;
        _2315 = (((((_2372 * _2145) + _525) * cbLight._m0[_2323].y) * _2391) * _2392) + _2256;
        _2317 = (((((_2372 * _2146) + _526) * cbLight._m0[_2323].z) * _2391) * _2392) + _2257;
    }
    float _2423;
    float _2425;
    float _2427;
    if (_2030)
    {
        _2423 = _2313;
        _2425 = _2315;
        _2427 = _2317;
    }
    else
    {
        uint _2434 = _1845 + 3u;
        uint _2438 = _1845 + 11u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _372) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _451;
        float _2455 = cbLight._m0[_2434].y + _452;
        float _2456 = cbLight._m0[_2434].z + _453;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_2434].xyz));
        float _4252 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2468 = dot(vec3(_369, _370, _371), vec3(_2461, _2462, _2463));
        float _4263 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4274 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0);
        float _2494 = 1.0 - _2453;
        float _2504 = (0.5 / (((_2121 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2494) + _2453) * _2467))) * _2467;
        float _4285 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2423 = (((((_2487 * _2143) + _523) * cbLight._m0[_2438].x) * _2506) * _2507) + _2313;
        _2425 = (((((_2487 * _2145) + _525) * cbLight._m0[_2438].y) * _2506) * _2507) + _2315;
        _2427 = (((((_2487 * _2146) + _526) * cbLight._m0[_2438].z) * _2506) * _2507) + _2317;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1843.y == 0u)
    {
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.x;
        uint _2540 = uint((float(_2528.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _2529))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _2529)));
        float _2550 = (log2(_1621 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2551 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        uint _2554 = uint(isnan(14.0) ? _2551 : (isnan(_2551) ? 14.0 : min(_2551, 14.0)));
        uvec4 _2559 = texelFetch(g_lightClusterGridBuffer, int(((_2554 << 2u) + (_2540 << 6u)) >> 2u));
        uint _2560 = _2559.x;
        uint _2561 = _2528.z;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((((1u << ((_2561 >> 4u) & 15u)) + 4294967295u) & _2560) == 0u) || ((_2561 & 240u) == 0u))
        {
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
        }
        else
        {
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            uint _2791 = 0u;
            uint _2800;
            bool _2801;
            for (;;)
            {
                _2800 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                _2801 = _2800 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2801)
                {
                    frontier_phi_66_pred = _2790;
                    frontier_phi_66_pred_1 = _2789;
                    frontier_phi_66_pred_2 = _2788;
                    frontier_phi_66_pred_3 = _2787;
                    frontier_phi_66_pred_4 = _2786;
                    frontier_phi_66_pred_5 = _2785;
                }
                else
                {
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    uint _2915;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2800;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    for (;;)
                    {
                        uint _2919 = uint(findLSB(_2915)) + (_2791 << 5u);
                        uint _2916 = (_2915 + 4294967295u) & _2915;
                        uint _2921 = _2919 * 48u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2941 = (_2919 * 48u) + 4u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2960 = (_2919 * 48u) + 8u;
                        vec3 _2971 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x));
                        float _2975 = _2935.x - _1619;
                        float _2976 = _2935.y - _1620;
                        float _2977 = _2935.z - _1621;
                        float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                        float _2981 = inversesqrt(_2978);
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2985 = dot(vec3(_479, _482, _485), vec3(_2982, _2983, _2984));
                        float _2990 = 1.0 - (_2978 * _2935.w);
                        float _4311 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _2992 = sqrt(_2978) * _2954.w;
                        float _2995 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2985) + _2996;
                        float _3002 = _2992 * _2992;
                        float _3006 = ((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2991) / ((_3002 * 0.699999988079071044921875) + 1.0);
                        float _3010 = (-0.0) - _1619;
                        float _3011 = (-0.0) - _1620;
                        float _3012 = (-0.0) - _1621;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3026 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                        float _3027 = 1.0 - _554;
                        float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                        float _3035 = _3034 * _3034;
                        float _3036 = _3035 * _3035;
                        float _3037 = _3017 + _2982;
                        float _3038 = _3018 + _2983;
                        float _3039 = _3019 + _2984;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3047 = dot(vec3(_479, _482, _485), vec3(_3017, _3018, _3019));
                        float _4327 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3051 = dot(vec3(_479, _482, _485), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                        float _4338 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                        float _3059 = _2995 * _3035;
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _2985) + _3060;
                        float _4349 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3065 = 1.0 - _3035;
                        float _3075 = (0.5 / (((_3064 * ((_3050 * _3065) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3035) * _3050))) * _3064;
                        float _4360 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3086 = (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3058 * _3058) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125))) * _2991;
                        _2844 = (_3006 * _2954.x) + _2912;
                        _2845 = (_3006 * _2954.y) + _2913;
                        _2846 = (_3006 * _2954.z) + _2914;
                        _2841 = (_3086 * _2971.x) + _2909;
                        _2842 = (_3086 * _2971.y) + _2910;
                        _2843 = (_3086 * _2971.z) + _2911;
                        if (_2916 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2916;
                        }
                    }
                    frontier_phi_66_pred = _2846;
                    frontier_phi_66_pred_1 = _2845;
                    frontier_phi_66_pred_2 = _2844;
                    frontier_phi_66_pred_3 = _2843;
                    frontier_phi_66_pred_4 = _2842;
                    frontier_phi_66_pred_5 = _2841;
                }
                _2651 = frontier_phi_66_pred;
                _2649 = frontier_phi_66_pred_1;
                _2647 = frontier_phi_66_pred_2;
                _2645 = frontier_phi_66_pred_3;
                _2643 = frontier_phi_66_pred_4;
                _2641 = frontier_phi_66_pred_5;
                uint _2792 = _2791 + 1u;
                if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2785 = _2641;
                    _2786 = _2643;
                    _2787 = _2645;
                    _2788 = _2647;
                    _2789 = _2649;
                    _2790 = _2651;
                    _2791 = _2792;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
        }
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.z;
        uint _2657 = (_2655 >> 8u) & 15u;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((4294967295u << _2657) & _2560) == 0u)
        {
            _2753 = _2640;
            _2755 = _2642;
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
        }
        else
        {
            float _2778 = inversesqrt(dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621)));
            float _2779 = _2778 * _1619;
            float _2780 = _2778 * _1620;
            float _2781 = _2778 * _1621;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2657 < ((_2655 >> 12u) & 15u))
            {
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2892 = _2640;
                float _2893 = _2642;
                float _2894 = _2644;
                float _2895 = _2646;
                float _2896 = _2648;
                float _2897 = _2650;
                uint _2898 = _2657;
                uint _2907;
                bool _2908;
                for (;;)
                {
                    _2907 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                    _2908 = _2907 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2908)
                    {
                        frontier_phi_72_pred = _2897;
                        frontier_phi_72_pred_1 = _2896;
                        frontier_phi_72_pred_2 = _2895;
                        frontier_phi_72_pred_3 = _2894;
                        frontier_phi_72_pred_4 = _2893;
                        frontier_phi_72_pred_5 = _2892;
                    }
                    else
                    {
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3104 = _2892;
                        float _3105 = _2893;
                        float _3106 = _2894;
                        float _3107 = _2895;
                        float _3108 = _2896;
                        float _3109 = _2897;
                        uint _3110 = _2907;
                        uint _3111;
                        vec4 _3136;
                        float _3137;
                        vec4 _3152;
                        vec3 _3164;
                        vec4 _3180;
                        vec4 _3196;
                        float _3243;
                        bool _3244;
                        for (;;)
                        {
                            uint _3121 = ((_2898 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3110));
                            _3111 = (_3110 + 4294967295u) & _3110;
                            uint _3123 = _3121 * 40u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3137 = _3136.w;
                            uint _3139 = (_3121 * 40u) + 4u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3121 * 40u) + 8u;
                            _3164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x));
                            uint _3167 = (_3121 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3183 = (_3121 * 40u) + 20u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3121 * 40u) + 24u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3218 = (_3121 * 40u) + 28u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3243 = fma(_1621, _3231.z, fma(_1620, _3231.y, _3231.x * _1619)) + _3231.w;
                            _3244 = !((fma(_1621, _3212.z, fma(_1620, _3212.y, _3212.x * _1619)) + _3212.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3244)
                            {
                                float _3271 = _3136.x - _1619;
                                float _3272 = _3136.y - _1620;
                                float _3273 = _3136.z - _1621;
                                float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                                float _3277 = inversesqrt(_3274);
                                float _3278 = _3277 * _3271;
                                float _3279 = _3277 * _3272;
                                float _3280 = _3277 * _3273;
                                float _3284 = 1.0 - (_3274 / (_3137 * _3137));
                                float _4371 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3289 = sqrt(_3274) * _3152.w;
                                float _3291 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                                float _3292 = _3291 * _3291;
                                float _3295 = ((1.0 - _3292) * dot(vec3(_3278, _3279, _3280), vec3(_479, _482, _485))) + _3292;
                                float _3298 = _3289 * _3289;
                                float _3302 = (fma(_1621, _3180.z, fma(_1620, _3180.y, _3180.x * _1619)) + _3180.w) / _3243;
                                float _3303 = (fma(_1621, _3196.z, fma(_1620, _3196.y, _3196.x * _1619)) + _3196.w) / _3243;
                                float _3307 = 1.0 - dot(vec2(_3302, _3303), vec2(_3302, _3303));
                                float _4387 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3309 = _3308 * (((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3285) / ((_3298 * 0.699999988079071044921875) + 1.0));
                                float _3321 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                                float _3322 = 1.0 - _554;
                                float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                                float _3330 = _3329 * _3329;
                                float _3331 = _3330 * _3330;
                                float _3332 = _3278 - _2779;
                                float _3333 = _3279 - _2780;
                                float _3334 = _3280 - _2781;
                                float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                                float _3342 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2779, (-0.0) - _2780, (-0.0) - _2781));
                                float _4398 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3346 = dot(vec3(_479, _482, _485), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                                float _4409 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                                float _3354 = _3291 * _3330;
                                float _3355 = _3354 * _3354;
                                float _3361 = ((1.0 - _3355) * dot(vec3(_479, _482, _485), vec3(_3278, _3279, _3280))) + _3355;
                                float _4420 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3363 = 1.0 - _3330;
                                float _3373 = (0.5 / (((_3362 * ((_3345 * _3363) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3330) * _3345))) * _3362;
                                float _4431 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = (_3308 * _3285) * (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) / ((_3353 * _3353) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3309 * _3152.y;
                                frontier_phi_78_pred_1 = _3309 * _3152.x;
                                frontier_phi_78_pred_2 = _3383 * _3164.z;
                                frontier_phi_78_pred_3 = _3383 * _3164.y;
                                frontier_phi_78_pred_4 = _3383 * _3164.x;
                                frontier_phi_78_pred_5 = _3309 * _3152.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3391 = frontier_phi_78_pred;
                            _3390 = frontier_phi_78_pred_1;
                            _3389 = frontier_phi_78_pred_2;
                            _3388 = frontier_phi_78_pred_3;
                            _3387 = frontier_phi_78_pred_4;
                            _3392 = frontier_phi_78_pred_5;
                            _3094 = _3390 + _3107;
                            _3095 = _3391 + _3108;
                            _3096 = _3392 + _3109;
                            _3091 = _3387 + _3104;
                            _3092 = _3388 + _3105;
                            _3093 = _3389 + _3106;
                            if (_3111 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3111;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3096;
                        frontier_phi_72_pred_1 = _3095;
                        frontier_phi_72_pred_2 = _3094;
                        frontier_phi_72_pred_3 = _3093;
                        frontier_phi_72_pred_4 = _3092;
                        frontier_phi_72_pred_5 = _3091;
                    }
                    _2764 = frontier_phi_72_pred;
                    _2762 = frontier_phi_72_pred_1;
                    _2760 = frontier_phi_72_pred_2;
                    _2758 = frontier_phi_72_pred_3;
                    _2756 = frontier_phi_72_pred_4;
                    _2754 = frontier_phi_72_pred_5;
                    uint _2899 = _2898 + 1u;
                    if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2892 = _2754;
                        _2893 = _2756;
                        _2894 = _2758;
                        _2895 = _2760;
                        _2896 = _2762;
                        _2897 = _2764;
                        _2898 = _2899;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2764;
                frontier_phi_60_61_ladder_1 = _2762;
                frontier_phi_60_61_ladder_2 = _2758;
                frontier_phi_60_61_ladder_3 = _2756;
                frontier_phi_60_61_ladder_4 = _2754;
                frontier_phi_60_61_ladder_5 = _2760;
            }
            else
            {
                frontier_phi_60_61_ladder = _2650;
                frontier_phi_60_61_ladder_1 = _2648;
                frontier_phi_60_61_ladder_2 = _2644;
                frontier_phi_60_61_ladder_3 = _2642;
                frontier_phi_60_61_ladder_4 = _2640;
                frontier_phi_60_61_ladder_5 = _2646;
            }
            _2753 = frontier_phi_60_61_ladder_4;
            _2755 = frontier_phi_60_61_ladder_3;
            _2757 = frontier_phi_60_61_ladder_2;
            _2759 = frontier_phi_60_61_ladder_5;
            _2761 = frontier_phi_60_61_ladder_1;
            _2763 = frontier_phi_60_61_ladder;
        }
        float _2768 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2573 = (_2768 * _2759) + _2085;
        _2575 = (_2768 * _2761) + _2087;
        _2577 = (_2768 * _2763) + _2089;
        _2579 = ((_2753 * _523) * _2768) + _2423;
        _2581 = ((_2755 * _525) * _2768) + _2425;
        _2583 = ((_2757 * _526) * _2768) + _2427;
    }
    else
    {
        _2573 = _2085;
        _2575 = _2087;
        _2577 = _2089;
        _2579 = _2423;
        _2581 = _2425;
        _2583 = _2427;
    }
    float _4447 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4458 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4469 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    uint _2603 = _498 + 6u;
    float _2611 = _459 / cbSceneParam._m0[86u].x;
    float _2612 = _460 / cbSceneParam._m0[86u].y;
    vec4 _2626 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2628 = _2626.x;
    float _2629 = _2626.y;
    float _2630 = _2626.z;
    float _2631 = _2626.w;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2665 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2666 = _2665 / _392;
        float _2677 = _2666 * _444;
        float _2678 = _445 * _2666;
        float _2679 = (-0.0) - _2678;
        float _2681 = _2666 * _446;
        float _2683 = (cbSceneParam._m0[77u].w * _2679) / _2665;
        float _2684 = _2683 + cbSceneParam._m0[79u].w;
        float _2685 = cbSceneParam._m0[79u].w - _2678;
        float _2691 = sqrt(((_2677 * _2677) + (_2678 * _2678)) + (_2681 * _2681));
        float _2694 = (1.0 - (cbSceneParam._m0[77u].w / _2665)) * _2691;
        float _2699 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2701 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2854;
        if (abs((_2679 - _2683) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2854 = ((((_2684 > 0.0) ? exp2(_2699 * _2684) : (2.0 - exp2(_2701 * _2684))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2694;
        }
        else
        {
            float _2814 = 1.0 / cbSceneParam._m0[80u].x;
            float _2815 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : max(_2684, _2685));
            float _2816 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : min(_2684, _2685));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            _2854 = ((abs(_2691 / _2679) * cbSceneParam._m0[80u].y) * ((((_2825 - _2826) * 2.0) - ((exp2(_2699 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)))) - exp2(_2699 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))))) * _2814)) - ((exp2(_2701 * _2825) - exp2(_2701 * _2826)) * _2814))) + (_2694 * cbSceneParam._m0[80u].z);
        }
        vec4 _2856 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, 1.0), 0.0);
        float _2865 = exp2((_2854 * (-1.44269502162933349609375)) * (1.0 - _2856.w));
        float _2866 = log2(_2865);
        float _2882 = log2(_2631);
        _2703 = (exp2(_2882 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].x)) * _2856.x) / cbSceneParam._m0[78u].x)) + _2628;
        _2705 = (exp2(_2882 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].y)) * _2856.y) / cbSceneParam._m0[78u].y)) + _2629;
        _2707 = (exp2(_2882 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].z)) * _2856.z) / cbSceneParam._m0[78u].z)) + _2630;
        _2709 = _2865 * _2631;
    }
    else
    {
        _2703 = _2628;
        _2705 = _2629;
        _2707 = _2630;
        _2709 = _2631;
    }
    float _2721 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2722 = _2721 == 3.0;
    float _2723 = log2(_2709);
    float _2730 = exp2(_2723 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2573 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _538))) + ((_2579 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1348)) * cbPerFrame._m0[3u].x));
    float _2731 = exp2(_2723 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2575 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _538))) + ((_2581 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1348)) * cbPerFrame._m0[3u].x));
    float _2732 = exp2(_2723 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2577 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _538))) + ((_2583 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1348)) * cbPerFrame._m0[3u].x));
    float _2741 = (_2721 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2741 * (_2722 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.y = _2741 * (_2722 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.z = _2741 * (_2722 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.w = cbInstanceData._m0[_2603].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2603].w;
}


