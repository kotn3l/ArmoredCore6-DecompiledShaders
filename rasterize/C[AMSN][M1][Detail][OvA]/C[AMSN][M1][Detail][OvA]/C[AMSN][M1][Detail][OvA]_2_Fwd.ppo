#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _909;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _180 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _181 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _224.x) * cbMtdParam._m0[9u].x) * _247.x;
    float _260 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _224.y) * cbMtdParam._m0[9u].y) * _247.y;
    float _264 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _224.z) * cbMtdParam._m0[9u].z) * _247.z;
    vec4 _277 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _279 = _277.x;
    vec4 _296 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _300 = _296.z;
    vec4 _313 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _327 = cbMtdParam._m0[13u].w * _300;
    float _330 = (((((_300 * 2.0) * _313.z) * cbMtdParam._m0[14u].x) - _327) * cbMtdParam._m0[13u].y) + _327;
    float _334 = (_296.x * 2.0) + (-1.0);
    float _336 = (_296.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3243 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))));
    float _350 = (cbMtdParam._m0[13u].x * ((_313.x * 2.0) + (-1.0))) + _334;
    float _351 = (cbMtdParam._m0[13u].x * ((_313.y * 2.0) + (-1.0))) + _336;
    float _354 = fma(_343, _194 * NORMAL.x, fma(_351, _201 * TANGENT.x, (_187 * _179) * _350));
    float _357 = fma(_343, _194 * NORMAL.y, fma(_351, _201 * TANGENT.y, (_187 * _180) * _350));
    float _360 = fma(_343, _194 * NORMAL.z, fma(_351, _201 * TANGENT.z, (_187 * _181) * _350));
    float _364 = inversesqrt(dot(vec3(_354, _357, _360), vec3(_354, _357, _360)));
    float _365 = _364 * _354;
    float _366 = _364 * _357;
    float _367 = _364 * _360;
    float _3254 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _368 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3276 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3287 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3298 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _372 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _388 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _440 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _430);
    float _441 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _430);
    float _442 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _430);
    float _446 = inversesqrt(dot(vec3(_440, _441, _442), vec3(_440, _441, _442)));
    float _447 = _440 * _446;
    float _448 = _441 * _446;
    float _449 = _442 * _446;
    float _455 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _456 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _475 = fma(_367, cbSceneParam._m0[5u].z, fma(_366, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _365));
    float _478 = fma(_367, cbSceneParam._m0[6u].z, fma(_366, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _365));
    float _481 = fma(_367, cbSceneParam._m0[7u].z, fma(_366, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _365));
    uint _494 = uint(roundEven(NORMAL.w)) * 13u;
    uint _496 = (_494 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _502 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0)))) * cbInstanceData._m0[_496].x;
    float _503 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_496].y;
    float _504 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_496].z;
    float _3309 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _508 = 1.0 - _372;
    float _509 = _505 * _508;
    float _510 = _506 * _508;
    float _511 = _507 * _508;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _372;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _372;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _372;
    float _519 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    float _522 = _518 + 0.039999999105930328369140625;
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _455, cbSceneParam._m0[86u].y * _456));
    float _534 = _531.x * TEXCOORD_5.w;
    float _535 = dot(vec3(_365, _366, _367), vec3(_447, _448, _449));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _365) - _447;
    float _543 = (_538 * _366) - _448;
    float _544 = (_538 * _367) - _449;
    float _548 = abs(dot(vec3(_447, _448, _449), vec3(_365, _366, _367)));
    float _3342 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_368);
    float _563 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _569 = (1.0 - _563) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _570 = _563 * _550;
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _637 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _641 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _666 = _598 + _365;
        float _667 = _602 + _366;
        float _668 = _606 + _367;
        float _678 = fma(_668, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666)) - _633;
        float _679 = fma(_668, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666)) - _637;
        float _680 = fma(_668, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666)) - _641;
        float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
        float _697 = ((_684 * _678) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_684 * _679) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_684 * _680) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        float _736 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_702.x + (-0.5));
        float _738 = _736 * (_702.y + (-0.5));
        float _739 = _736 * (_702.z + (-0.5));
        float _746 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_709.x + (-0.5));
        float _748 = _746 * (_709.y + (-0.5));
        float _749 = _746 * (_709.z + (-0.5));
        float _756 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_716.x + (-0.5));
        float _758 = _756 * (_716.y + (-0.5));
        float _759 = _756 * (_716.z + (-0.5));
        float _766 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_723.x + (-0.5));
        float _768 = _766 * (_723.y + (-0.5));
        float _769 = _766 * (_723.z + (-0.5));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = _737 * 0.5;
        float _774 = _747 * 0.5;
        float _775 = _757 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _790 = (dot(vec3(_365, _366, _367), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _800 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3390 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_802 + 1.0))) + _807) * _770;
        float _817 = _738 * 0.5;
        float _818 = _748 * 0.5;
        float _819 = _758 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_365, _366, _367), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3423 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_844 + 1.0))) + _849) * _771;
        float _859 = _739 * 0.5;
        float _860 = _749 * 0.5;
        float _861 = _759 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_365, _366, _367), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3456 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_886 + 1.0))) + _891) * _772;
        _908 = _739;
        _910 = _738;
        _911 = _737;
        _912 = _749;
        _913 = _748;
        _914 = _747;
        _915 = _759;
        _916 = _758;
        _917 = _757;
        _918 = _772;
        _919 = _771;
        _920 = _770;
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
        _921 = 0.0;
        _922 = 0.0;
        _923 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _953 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _957 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _980 = _598 + _365;
        float _981 = _602 + _366;
        float _982 = _606 + _367;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_365, _366, _367), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3519 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_365, _366, _367), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3552 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_365, _366, _367), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3585 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _909;
        _1219 = _909;
        _1220 = _909;
        _1221 = _909;
        _1222 = _909;
        _1223 = _909;
        _1224 = _909;
        _1225 = _909;
        _1226 = _909;
        _1227 = _909;
        _1228 = _909;
        _1229 = _909;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _922)) + _922;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _542 * 0.5;
    float _1287 = _543 * 0.5;
    float _1288 = _544 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _912, _915, _918));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_910, _913, _916, _919));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_911, _914, _917, _920));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _368);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1416 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1419 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1447 = frontier_phi_14_12_ladder;
        }
        float _1654;
        if (_1416 > 0.0)
        {
            _1654 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1654 = frontier_phi_23_19_ladder;
        }
        float _1908;
        if (_1419 > 0.0)
        {
            _1908 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1908 = frontier_phi_35_30_ladder;
        }
        float _1910 = isnan(_1654) ? _1447 : (isnan(_1447) ? _1654 : min(_1447, _1654));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1413) + _1402;
        float _1916 = (_1911 * _1416) + _1406;
        float _1917 = (_1911 * _1419) + _1410;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_13_35_ladder = _2045.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2045.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2045.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_13_35_ladder_2;
        _1437 = frontier_phi_13_35_ladder_1;
        _1439 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1355);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _368);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1515 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1518 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1659;
        if (_1512 > 0.0)
        {
            _1659 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1659 = frontier_phi_25_21_ladder;
        }
        float _1935;
        if (_1515 > 0.0)
        {
            _1935 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1935 = frontier_phi_37_32_ladder;
        }
        float _2148;
        if (_1518 > 0.0)
        {
            _2148 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2148 = frontier_phi_46_43_ladder;
        }
        float _2150 = isnan(_1935) ? _1659 : (isnan(_1659) ? _1935 : min(_1659, _1935));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1512) + _1501;
        float _2156 = (_2151 * _1515) + _1505;
        float _2157 = (_2151 * _1518) + _1509;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2158;
        float _2161 = _2158 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2157 > _2161) || ((_2157 < _2159) || ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 < _2159) || (_2155 > _2161))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2157, cbModelParam._m0[17u].z, fma(_2156, cbModelParam._m0[17u].y, _2155 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2157, cbModelParam._m0[18u].z, fma(_2156, cbModelParam._m0[18u].y, _2155 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2157, cbModelParam._m0[19u].z, fma(_2156, cbModelParam._m0[19u].y, _2155 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_22_46_ladder = _2356.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2356.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2356.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_22_46_ladder_2;
        _1539 = frontier_phi_22_46_ladder_1;
        _1541 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_569 * _519) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_569 * _521) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_569 * _522) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_494 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _534 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1612 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1616 = _1579 | 1u;
    float _1627 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_365, _366, _367));
    float _1630 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_365, _366, _367));
    float _3721 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _3732 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _1635 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.3183098733425140380859375;
    float _1637 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.3183098733425140380859375;
    float _1644 = ((cbLight._m0[_1596].x * _1602) * _1637) + ((cbLight._m0[_1606].x * _1612) * _1635);
    float _1645 = ((_1602 * cbLight._m0[_1596].y) * _1637) + ((_1612 * cbLight._m0[_1606].y) * _1635);
    float _1646 = ((_1602 * cbLight._m0[_1596].z) * _1637) + ((_1612 * cbLight._m0[_1606].z) * _1635);
    uvec4 _1651 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1653 = _1651.x == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1653)
    {
        _1664 = _1644;
        _1666 = _1645;
        _1668 = _1646;
    }
    else
    {
        uint _1672 = _1579 + 6u;
        float _1688 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_365, _366, _367)) * 0.5) + 0.5;
        float _1689 = _1688 * _1688;
        float _3743 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1691 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1664 = (((cbLight._m0[_1672].x * 0.3183098733425140380859375) * _1690) * _1691) + _1644;
        _1666 = (((cbLight._m0[_1672].y * 0.3183098733425140380859375) * _1690) * _1691) + _1645;
        _1668 = (((cbLight._m0[_1672].z * 0.3183098733425140380859375) * _1690) * _1691) + _1646;
    }
    bool _1671 = _1651.y == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1671)
    {
        _1709 = _1664;
        _1711 = _1666;
        _1713 = _1668;
    }
    else
    {
        uint _1879 = _1579 + 7u;
        float _1895 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_365, _366, _367)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3759 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1898 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1709 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1664;
        _1711 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1666;
        _1713 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1668;
    }
    uint _1716 = _1579 + 8u;
    float _1729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _368) * 0.949999988079071044921875);
    float _1730 = _1729 * _1729;
    float _1731 = cbLight._m0[_1579].x + _447;
    float _1732 = cbLight._m0[_1579].y + _448;
    float _1733 = cbLight._m0[_1579].z + _449;
    float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
    float _1738 = _1737 * _1731;
    float _1739 = _1737 * _1732;
    float _1740 = _1737 * _1733;
    float _1741 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1579].xyz));
    float _3775 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _1745 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1746 = dot(vec3(_365, _366, _367), vec3(_1738, _1739, _1740));
    float _3797 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1738, _1739, _1740));
    float _3808 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1754 = _1730 * _1730;
    float _1758 = ((_1749 * _1749) * (_1754 + (-1.0))) + 1.0;
    float _1766 = exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0);
    float _1767 = 0.959999978542327880859375 - _516;
    float _1769 = 0.959999978542327880859375 - _517;
    float _1770 = 0.959999978542327880859375 - _518;
    float _1777 = 1.0 - _1730;
    float _1788 = (0.5 / (((_1745 * ((_1744 * _1777) + _1730)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1777) + _1730) * _1744))) * _1744;
    float _3819 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1754 / ((_1758 * _1758) * 3.141590118408203125));
    uint _1801 = _1579 + 9u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1616].w)) * _368) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1616].x + _447;
    float _1815 = cbLight._m0[_1616].y + _448;
    float _1816 = cbLight._m0[_1616].z + _449;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1616].xyz));
    float _3830 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1828 = dot(vec3(_365, _366, _367), vec3(_1821, _1822, _1823));
    float _3841 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_1821, _1822, _1823));
    float _3852 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1813 * _1813;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1847 = exp2(log2(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * 5.0);
    float _1854 = 1.0 - _1813;
    float _1864 = (0.5 / (((_1745 * ((_1827 * _1854) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1854) + _1813) * _1827))) * _1827;
    float _3863 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    float _1876 = (((((_1847 * _1767) + _519) * cbLight._m0[_1801].x) * _1866) * _1602) + (((((_1766 * _1767) + _519) * cbLight._m0[_1716].x) * _1790) * _1612);
    float _1877 = (((((_1847 * _1769) + _521) * cbLight._m0[_1801].y) * _1866) * _1602) + (((((_1766 * _1769) + _521) * cbLight._m0[_1716].y) * _1790) * _1612);
    float _1878 = (((((_1847 * _1770) + _522) * cbLight._m0[_1801].z) * _1866) * _1602) + (((((_1766 * _1770) + _522) * cbLight._m0[_1716].z) * _1790) * _1612);
    float _1940;
    float _1942;
    float _1944;
    if (_1653)
    {
        _1940 = _1876;
        _1942 = _1877;
        _1944 = _1878;
    }
    else
    {
        uint _1946 = _1579 + 2u;
        uint _1950 = _1579 + 10u;
        float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _368) * 0.949999988079071044921875);
        float _1965 = _1964 * _1964;
        float _1966 = cbLight._m0[_1946].x + _447;
        float _1967 = cbLight._m0[_1946].y + _448;
        float _1968 = cbLight._m0[_1946].z + _449;
        float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
        float _1973 = _1972 * _1966;
        float _1974 = _1972 * _1967;
        float _1975 = _1972 * _1968;
        float _1976 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1946].xyz));
        float _3874 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1980 = dot(vec3(_365, _366, _367), vec3(_1973, _1974, _1975));
        float _3885 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1984 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_1973, _1974, _1975));
        float _3896 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1988 = _1965 * _1965;
        float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
        float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0);
        float _2006 = 1.0 - _1965;
        float _2016 = (0.5 / (((_1745 * ((_1979 * _2006) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2006) + _1965) * _1979))) * _1979;
        float _3907 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2018 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
        float _2019 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1940 = (((((_1999 * _1767) + _519) * cbLight._m0[_1950].x) * _2018) * _2019) + _1876;
        _1942 = (((((_1999 * _1769) + _521) * cbLight._m0[_1950].y) * _2018) * _2019) + _1877;
        _1944 = (((((_1999 * _1770) + _522) * cbLight._m0[_1950].z) * _2018) * _2019) + _1878;
    }
    float _2054;
    float _2056;
    float _2058;
    if (_1671)
    {
        _2054 = _1940;
        _2056 = _1942;
        _2058 = _1944;
    }
    else
    {
        uint _2065 = _1579 + 3u;
        uint _2069 = _1579 + 11u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _368) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _447;
        float _2086 = cbLight._m0[_2065].y + _448;
        float _2087 = cbLight._m0[_2065].z + _449;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_2065].xyz));
        float _3923 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _2099 = dot(vec3(_365, _366, _367), vec3(_2092, _2093, _2094));
        float _3934 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _3945 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0);
        float _2125 = 1.0 - _2084;
        float _2135 = (0.5 / (((_1745 * ((_2098 * _2125) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2125) + _2084) * _2098))) * _2098;
        float _3956 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2054 = (((((_2118 * _1767) + _519) * cbLight._m0[_2069].x) * _2137) * _2138) + _1940;
        _2056 = (((((_2118 * _1769) + _521) * cbLight._m0[_2069].y) * _2137) * _2138) + _1942;
        _2058 = (((((_2118 * _1770) + _522) * cbLight._m0[_2069].z) * _2137) * _2138) + _1944;
    }
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1577.y == 0u)
    {
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2213;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2213;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2213;
        uvec4 _2228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2229 = _2228.x;
        uint _2240 = uint((float(_2228.y) * floor(float(uint(cbSceneParam._m0[85u].y * _456) / _2229))) + floor(float(uint(cbSceneParam._m0[85u].x * _455) / _2229)));
        float _2250 = (log2(_2216 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2251 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        uint _2254 = uint(isnan(14.0) ? _2251 : (isnan(_2251) ? 14.0 : min(_2251, 14.0)));
        uvec4 _2259 = texelFetch(g_lightClusterGridBuffer, int(((_2254 << 2u) + (_2240 << 6u)) >> 2u));
        uint _2260 = _2259.x;
        uint _2261 = _2228.z;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        if (((((1u << ((_2261 >> 4u) & 15u)) + 4294967295u) & _2260) == 0u) || ((_2261 & 240u) == 0u))
        {
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
        }
        else
        {
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            uint _2512 = 0u;
            uint _2521;
            bool _2522;
            for (;;)
            {
                _2521 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                _2522 = _2521 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2522)
                {
                    frontier_phi_61_pred = _2506;
                    frontier_phi_61_pred_1 = _2511;
                    frontier_phi_61_pred_2 = _2510;
                    frontier_phi_61_pred_3 = _2509;
                    frontier_phi_61_pred_4 = _2508;
                    frontier_phi_61_pred_5 = _2507;
                }
                else
                {
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    uint _2636;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2521;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    for (;;)
                    {
                        uint _2640 = uint(findLSB(_2636)) + (_2512 << 5u);
                        uint _2637 = (_2636 + 4294967295u) & _2636;
                        uint _2642 = _2640 * 48u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2662 = (_2640 * 48u) + 4u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2681 = (_2640 * 48u) + 8u;
                        vec3 _2692 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x));
                        float _2696 = _2656.x - _2214;
                        float _2697 = _2656.y - _2215;
                        float _2698 = _2656.z - _2216;
                        float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                        float _2702 = inversesqrt(_2699);
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2706 = dot(vec3(_475, _478, _481), vec3(_2703, _2704, _2705));
                        float _2711 = 1.0 - (_2699 * _2656.w);
                        float _3982 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2712 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2713 = sqrt(_2699) * _2675.w;
                        float _2716 = 1.39999997615814208984375 / (_2713 + 1.39999997615814208984375);
                        float _2717 = _2716 * _2716;
                        float _2720 = ((1.0 - _2717) * _2706) + _2717;
                        float _2723 = _2713 * _2713;
                        float _2727 = ((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2712) / ((_2723 * 0.699999988079071044921875) + 1.0);
                        float _2731 = (-0.0) - _2214;
                        float _2732 = (-0.0) - _2215;
                        float _2733 = (-0.0) - _2216;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2748 = exp2(log2(1.0 / ((_2723 * 3.5) + 5.0)) * 0.25);
                        float _2749 = 1.0 - _550;
                        float _2756 = sqrt(1.0 - ((1.0 - (_2749 * _2749)) * (1.0 - (_2748 * _2748))));
                        float _2757 = _2756 * _2756;
                        float _2758 = _2757 * _2757;
                        float _2759 = _2738 + _2703;
                        float _2760 = _2739 + _2704;
                        float _2761 = _2740 + _2705;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2769 = dot(vec3(_475, _478, _481), vec3(_2738, _2739, _2740));
                        float _3998 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2772 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2773 = dot(vec3(_475, _478, _481), vec3(_2765 * _2759, _2765 * _2760, _2765 * _2761));
                        float _4009 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2780 = ((_2776 * _2776) * (_2758 + (-1.0))) + 1.0;
                        float _2781 = _2716 * _2757;
                        float _2782 = _2781 * _2781;
                        float _2785 = ((1.0 - _2782) * _2706) + _2782;
                        float _4020 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2787 = 1.0 - _2757;
                        float _2797 = (0.5 / (((_2786 * ((_2772 * _2787) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2787) + _2757) * _2772))) * _2786;
                        float _4031 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2808 = (((_2758 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_2780 * _2780) * ((_2723 * 2.1991131305694580078125) + 3.141590118408203125))) * _2712;
                        _2565 = (_2727 * _2675.x) + _2633;
                        _2566 = (_2727 * _2675.y) + _2634;
                        _2567 = (_2727 * _2675.z) + _2635;
                        _2562 = (_2808 * _2692.x) + _2630;
                        _2563 = (_2808 * _2692.y) + _2631;
                        _2564 = (_2808 * _2692.z) + _2632;
                        if (_2637 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2637;
                        }
                    }
                    frontier_phi_61_pred = _2562;
                    frontier_phi_61_pred_1 = _2567;
                    frontier_phi_61_pred_2 = _2566;
                    frontier_phi_61_pred_3 = _2565;
                    frontier_phi_61_pred_4 = _2564;
                    frontier_phi_61_pred_5 = _2563;
                }
                _2362 = frontier_phi_61_pred;
                _2372 = frontier_phi_61_pred_1;
                _2370 = frontier_phi_61_pred_2;
                _2368 = frontier_phi_61_pred_3;
                _2366 = frontier_phi_61_pred_4;
                _2364 = frontier_phi_61_pred_5;
                uint _2513 = _2512 + 1u;
                if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2506 = _2362;
                    _2507 = _2364;
                    _2508 = _2366;
                    _2509 = _2368;
                    _2510 = _2370;
                    _2511 = _2372;
                    _2512 = _2513;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
        }
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.z;
        uint _2378 = (_2376 >> 8u) & 15u;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((4294967295u << _2378) & _2260) == 0u)
        {
            _2474 = _2361;
            _2476 = _2363;
            _2478 = _2365;
            _2480 = _2367;
            _2482 = _2369;
            _2484 = _2371;
        }
        else
        {
            float _2499 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
            float _2500 = _2499 * _2214;
            float _2501 = _2499 * _2215;
            float _2502 = _2499 * _2216;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2378 < ((_2376 >> 12u) & 15u))
            {
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2613 = _2361;
                float _2614 = _2363;
                float _2615 = _2365;
                float _2616 = _2367;
                float _2617 = _2369;
                float _2618 = _2371;
                uint _2619 = _2378;
                uint _2628;
                bool _2629;
                for (;;)
                {
                    _2628 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                    _2629 = _2628 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2629)
                    {
                        frontier_phi_67_pred = _2616;
                        frontier_phi_67_pred_1 = _2617;
                        frontier_phi_67_pred_2 = _2618;
                        frontier_phi_67_pred_3 = _2615;
                        frontier_phi_67_pred_4 = _2614;
                        frontier_phi_67_pred_5 = _2613;
                    }
                    else
                    {
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        float _2829 = _2616;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        uint _2832 = _2628;
                        uint _2833;
                        vec4 _2858;
                        float _2859;
                        vec4 _2874;
                        vec3 _2886;
                        vec4 _2902;
                        vec4 _2918;
                        float _2965;
                        bool _2966;
                        for (;;)
                        {
                            uint _2843 = ((_2619 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2832));
                            _2833 = (_2832 + 4294967295u) & _2832;
                            uint _2845 = _2843 * 40u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            _2859 = _2858.w;
                            uint _2861 = (_2843 * 40u) + 4u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2876 = (_2843 * 40u) + 8u;
                            _2886 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x));
                            uint _2889 = (_2843 * 40u) + 16u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2905 = (_2843 * 40u) + 20u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2843 * 40u) + 24u;
                            vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2940 = (_2843 * 40u) + 28u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2965 = fma(_2216, _2953.z, fma(_2215, _2953.y, _2953.x * _2214)) + _2953.w;
                            _2966 = !((fma(_2216, _2934.z, fma(_2215, _2934.y, _2934.x * _2214)) + _2934.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2966)
                            {
                                float _2993 = _2858.x - _2214;
                                float _2994 = _2858.y - _2215;
                                float _2995 = _2858.z - _2216;
                                float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                                float _2999 = inversesqrt(_2996);
                                float _3000 = _2999 * _2993;
                                float _3001 = _2999 * _2994;
                                float _3002 = _2999 * _2995;
                                float _3006 = 1.0 - (_2996 / (_2859 * _2859));
                                float _4042 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3011 = sqrt(_2996) * _2874.w;
                                float _3013 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                                float _3014 = _3013 * _3013;
                                float _3017 = ((1.0 - _3014) * dot(vec3(_3000, _3001, _3002), vec3(_475, _478, _481))) + _3014;
                                float _3020 = _3011 * _3011;
                                float _3024 = (fma(_2216, _2902.z, fma(_2215, _2902.y, _2902.x * _2214)) + _2902.w) / _2965;
                                float _3025 = (fma(_2216, _2918.z, fma(_2215, _2918.y, _2918.x * _2214)) + _2918.w) / _2965;
                                float _3029 = 1.0 - dot(vec2(_3024, _3025), vec2(_3024, _3025));
                                float _4058 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3031 = _3030 * (((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3007) / ((_3020 * 0.699999988079071044921875) + 1.0));
                                float _3043 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                                float _3044 = 1.0 - _550;
                                float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                                float _3052 = _3051 * _3051;
                                float _3053 = _3052 * _3052;
                                float _3054 = _3000 - _2500;
                                float _3055 = _3001 - _2501;
                                float _3056 = _3002 - _2502;
                                float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                                float _3064 = dot(vec3(_475, _478, _481), vec3((-0.0) - _2500, (-0.0) - _2501, (-0.0) - _2502));
                                float _4069 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3067 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3068 = dot(vec3(_475, _478, _481), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                                float _4080 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3071 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                                float _3076 = _3013 * _3052;
                                float _3077 = _3076 * _3076;
                                float _3083 = ((1.0 - _3077) * dot(vec3(_475, _478, _481), vec3(_3000, _3001, _3002))) + _3077;
                                float _4091 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3085 = 1.0 - _3052;
                                float _3095 = (0.5 / (((_3084 * ((_3067 * _3085) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3084 * _3085) + _3052) * _3067))) * _3084;
                                float _4102 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3105 = (_3030 * _3007) * (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) / ((_3075 * _3075) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3105 * _2886.x;
                                frontier_phi_73_pred_1 = _3105 * _2886.y;
                                frontier_phi_73_pred_2 = _3031 * _2874.z;
                                frontier_phi_73_pred_3 = _3031 * _2874.y;
                                frontier_phi_73_pred_4 = _3031 * _2874.x;
                                frontier_phi_73_pred_5 = _3105 * _2886.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3109 = frontier_phi_73_pred;
                            _3110 = frontier_phi_73_pred_1;
                            _3114 = frontier_phi_73_pred_2;
                            _3113 = frontier_phi_73_pred_3;
                            _3112 = frontier_phi_73_pred_4;
                            _3111 = frontier_phi_73_pred_5;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            if (_2833 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2833;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2816;
                        frontier_phi_67_pred_1 = _2817;
                        frontier_phi_67_pred_2 = _2818;
                        frontier_phi_67_pred_3 = _2815;
                        frontier_phi_67_pred_4 = _2814;
                        frontier_phi_67_pred_5 = _2813;
                    }
                    _2481 = frontier_phi_67_pred;
                    _2483 = frontier_phi_67_pred_1;
                    _2485 = frontier_phi_67_pred_2;
                    _2479 = frontier_phi_67_pred_3;
                    _2477 = frontier_phi_67_pred_4;
                    _2475 = frontier_phi_67_pred_5;
                    uint _2620 = _2619 + 1u;
                    if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2613 = _2475;
                        _2614 = _2477;
                        _2615 = _2479;
                        _2616 = _2481;
                        _2617 = _2483;
                        _2618 = _2485;
                        _2619 = _2620;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2483;
                frontier_phi_55_56_ladder_1 = _2485;
                frontier_phi_55_56_ladder_2 = _2481;
                frontier_phi_55_56_ladder_3 = _2479;
                frontier_phi_55_56_ladder_4 = _2477;
                frontier_phi_55_56_ladder_5 = _2475;
            }
            else
            {
                frontier_phi_55_56_ladder = _2369;
                frontier_phi_55_56_ladder_1 = _2371;
                frontier_phi_55_56_ladder_2 = _2367;
                frontier_phi_55_56_ladder_3 = _2365;
                frontier_phi_55_56_ladder_4 = _2363;
                frontier_phi_55_56_ladder_5 = _2361;
            }
            _2474 = frontier_phi_55_56_ladder_5;
            _2476 = frontier_phi_55_56_ladder_4;
            _2478 = frontier_phi_55_56_ladder_3;
            _2480 = frontier_phi_55_56_ladder_2;
            _2482 = frontier_phi_55_56_ladder;
            _2484 = frontier_phi_55_56_ladder_1;
        }
        float _2489 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2273 = (_2489 * _2480) + _1709;
        _2275 = (_2489 * _2482) + _1711;
        _2277 = (_2489 * _2484) + _1713;
        _2279 = ((_2474 * _519) * _2489) + _2054;
        _2281 = ((_2476 * _521) * _2489) + _2056;
        _2283 = ((_2478 * _522) * _2489) + _2058;
    }
    else
    {
        _2273 = _1709;
        _2275 = _1711;
        _2277 = _1713;
        _2279 = _2054;
        _2281 = _2056;
        _2283 = _2058;
    }
    float _4118 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4129 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4140 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    uint _2303 = _494 + 6u;
    float _2311 = _455 / cbSceneParam._m0[86u].x;
    float _2312 = _456 / cbSceneParam._m0[86u].y;
    vec4 _2326 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2311, _2312, (log2((isnan(cbSceneParam._m0[77u].w) ? _388 : (isnan(_388) ? cbSceneParam._m0[77u].w : min(_388, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2328 = _2326.x;
    float _2329 = _2326.y;
    float _2330 = _2326.z;
    float _2331 = _2326.w;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    if (_388 > cbSceneParam._m0[78u].w)
    {
        float _2386 = isnan(_388) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _388 : min(cbSceneParam._m0[80u].w, _388));
        float _2387 = _2386 / _388;
        float _2398 = _2387 * _440;
        float _2399 = _441 * _2387;
        float _2400 = (-0.0) - _2399;
        float _2402 = _2387 * _442;
        float _2404 = (cbSceneParam._m0[77u].w * _2400) / _2386;
        float _2405 = _2404 + cbSceneParam._m0[79u].w;
        float _2406 = cbSceneParam._m0[79u].w - _2399;
        float _2412 = sqrt(((_2398 * _2398) + (_2399 * _2399)) + (_2402 * _2402));
        float _2415 = (1.0 - (cbSceneParam._m0[77u].w / _2386)) * _2412;
        float _2420 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2422 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2575;
        if (abs((_2400 - _2404) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2575 = ((((_2405 > 0.0) ? exp2(_2420 * _2405) : (2.0 - exp2(_2422 * _2405))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2415;
        }
        else
        {
            float _2535 = 1.0 / cbSceneParam._m0[80u].x;
            float _2536 = isnan(_2406) ? _2405 : (isnan(_2405) ? _2406 : max(_2405, _2406));
            float _2537 = isnan(_2406) ? _2405 : (isnan(_2405) ? _2406 : min(_2405, _2406));
            float _2546 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : min(_2536, 0.0));
            float _2547 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : min(_2537, 0.0));
            _2575 = ((abs(_2412 / _2400) * cbSceneParam._m0[80u].y) * ((((_2546 - _2547) * 2.0) - ((exp2(_2420 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)))) - exp2(_2420 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))))) * _2535)) - ((exp2(_2422 * _2546) - exp2(_2422 * _2547)) * _2535))) + (_2415 * cbSceneParam._m0[80u].z);
        }
        vec4 _2577 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2311, _2312, 1.0), 0.0);
        float _2586 = exp2((_2575 * (-1.44269502162933349609375)) * (1.0 - _2577.w));
        float _2587 = log2(_2586);
        float _2603 = log2(_2331);
        _2424 = (exp2(_2603 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].x)) * _2577.x) / cbSceneParam._m0[78u].x)) + _2328;
        _2426 = (exp2(_2603 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].y)) * _2577.y) / cbSceneParam._m0[78u].y)) + _2329;
        _2428 = (exp2(_2603 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].z)) * _2577.z) / cbSceneParam._m0[78u].z)) + _2330;
        _2430 = _2586 * _2331;
    }
    else
    {
        _2424 = _2328;
        _2426 = _2329;
        _2428 = _2330;
        _2430 = _2331;
    }
    float _2442 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2443 = _2442 == 3.0;
    float _2444 = log2(_2430);
    float _2451 = exp2(_2444 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2273 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _534))) + ((_2279 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1344)) * cbPerFrame._m0[3u].x));
    float _2452 = exp2(_2444 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2275 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _534))) + ((_2281 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1344)) * cbPerFrame._m0[3u].x));
    float _2453 = exp2(_2444 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2277 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _534))) + ((_2283 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1344)) * cbPerFrame._m0[3u].x));
    float _2462 = (_2442 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2462 * (_2443 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2424)));
    SV_Target.y = _2462 * (_2443 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2426)));
    SV_Target.z = _2462 * (_2443 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.w = cbInstanceData._m0[_2303].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2303].w;
}


