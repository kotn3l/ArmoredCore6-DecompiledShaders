#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1034;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _245.x * cbMtdParam._m0[10u].x;
    float _252 = _245.y * cbMtdParam._m0[10u].y;
    float _253 = _245.z * cbMtdParam._m0[10u].z;
    float _258 = 1.0 - cbMtdParam._m0[13u].z;
    float _3391 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _286 = ((_251 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _278.x;
    float _289 = ((_252 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _278.y;
    float _292 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _278.z;
    float _299 = ((_251 - _286) * _260) + _286;
    float _300 = ((_252 - _289) * _260) + _289;
    float _301 = ((_253 - _292) * _260) + _292;
    vec4 _319 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _349 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3402 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _357 = (_350 * ((_319.x * cbMtdParam._m0[11u].x) - _299)) + _299;
    float _358 = (_350 * ((_319.y * cbMtdParam._m0[11u].y) - _300)) + _300;
    float _359 = (_350 * ((_319.z * cbMtdParam._m0[11u].z) - _301)) + _301;
    vec4 _372 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _374 = _372.x;
    float _376 = _374 - (_374 * TEXCOORD_5.x);
    vec4 _390 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _394 = _390.z;
    vec4 _407 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _421 = cbMtdParam._m0[13u].w * _394;
    float _424 = (((((_394 * 2.0) * _407.z) * cbMtdParam._m0[14u].x) - _421) * cbMtdParam._m0[13u].y) + _421;
    vec4 _437 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _452 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_437.z * cbMtdParam._m0[14u].y) - _424)) + _424;
    float _459 = (_390.x * 2.0) + (-1.0);
    float _460 = (_390.y * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3413 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _466 = sqrt(1.0 - (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))));
    float _477 = ((cbMtdParam._m0[13u].x * ((_407.x * 2.0) + (-1.0))) + _459) + ((((_437.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _478 = ((cbMtdParam._m0[13u].x * ((_407.y * 2.0) + (-1.0))) + _460) + ((((_437.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _481 = fma(_466, _210 * NORMAL.x, fma(_478, _217 * TANGENT.x, (_203 * _195) * _477));
    float _484 = fma(_466, _210 * NORMAL.y, fma(_478, _217 * TANGENT.y, (_203 * _196) * _477));
    float _487 = fma(_466, _210 * NORMAL.z, fma(_478, _217 * TANGENT.z, (_203 * _197) * _477));
    float _491 = inversesqrt(dot(vec3(_481, _484, _487), vec3(_481, _484, _487)));
    float _492 = _491 * _481;
    float _493 = _491 * _484;
    float _494 = _491 * _487;
    float _3424 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _495 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3446 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3457 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3468 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _499 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _515 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _566 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _556);
    float _567 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _556);
    float _568 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _556);
    float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
    float _573 = _566 * _572;
    float _574 = _567 * _572;
    float _575 = _568 * _572;
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _600 = fma(_494, cbSceneParam._m0[5u].z, fma(_493, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _492));
    float _603 = fma(_494, cbSceneParam._m0[6u].z, fma(_493, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _492));
    float _606 = fma(_494, cbSceneParam._m0[7u].z, fma(_493, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _492));
    uint _619 = uint(roundEven(NORMAL.w)) * 13u;
    uint _621 = (_619 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3479 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _633 = 1.0 - _499;
    float _634 = _630 * _633;
    float _635 = _631 * _633;
    float _636 = _632 * _633;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _499;
    float _642 = (_631 + (-0.039999999105930328369140625)) * _499;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _499;
    float _644 = _641 + 0.039999999105930328369140625;
    float _646 = _642 + 0.039999999105930328369140625;
    float _647 = _643 + 0.039999999105930328369140625;
    vec4 _656 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _659 = _656.x * TEXCOORD_5.w;
    float _660 = dot(vec3(_492, _493, _494), vec3(_573, _574, _575));
    float _663 = _660 * 2.0;
    float _667 = (_663 * _492) - _573;
    float _668 = (_663 * _493) - _574;
    float _669 = (_663 * _494) - _575;
    float _673 = abs(dot(vec3(_573, _574, _575), vec3(_492, _493, _494)));
    float _3512 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _675 = sqrt(_495);
    float _688 = exp2((_675 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_675 * 3.0));
    float _694 = (1.0 - _688) * ((_675 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _695 = _688 * _675;
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1033;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _758 = fma(_731, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723));
        float _762 = fma(_731, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723));
        float _766 = fma(_731, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723));
        float _791 = _723 + _492;
        float _792 = _727 + _493;
        float _793 = _731 + _494;
        float _803 = fma(_793, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791)) - _758;
        float _804 = fma(_793, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791)) - _762;
        float _805 = fma(_793, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791)) - _766;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_758 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_762 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[34u].z) + ((((((_766 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _861 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_827.x + (-0.5));
        float _863 = _861 * (_827.y + (-0.5));
        float _864 = _861 * (_827.z + (-0.5));
        float _871 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_834.x + (-0.5));
        float _873 = _871 * (_834.y + (-0.5));
        float _874 = _871 * (_834.z + (-0.5));
        float _881 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_841.x + (-0.5));
        float _883 = _881 * (_841.y + (-0.5));
        float _884 = _881 * (_841.z + (-0.5));
        float _891 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_848.x + (-0.5));
        float _893 = _891 * (_848.y + (-0.5));
        float _894 = _891 * (_848.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _915 = (dot(vec3(_492, _493, _494), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _925 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3560 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_927 + 1.0))) + _932) * _895;
        float _942 = _863 * 0.5;
        float _943 = _873 * 0.5;
        float _944 = _883 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_492, _493, _494), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3593 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_969 + 1.0))) + _974) * _896;
        float _984 = _864 * 0.5;
        float _985 = _874 * 0.5;
        float _986 = _884 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_492, _493, _494), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3626 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1011 + 1.0))) + _1016) * _897;
        _1033 = _864;
        _1035 = _863;
        _1036 = _862;
        _1037 = _874;
        _1038 = _873;
        _1039 = _872;
        _1040 = _884;
        _1041 = _883;
        _1042 = _882;
        _1043 = _897;
        _1044 = _896;
        _1045 = _895;
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _1034;
        _1035 = _1034;
        _1036 = _1034;
        _1037 = _1034;
        _1038 = _1034;
        _1039 = _1034;
        _1040 = _1034;
        _1041 = _1034;
        _1042 = _1034;
        _1043 = _1034;
        _1044 = _1034;
        _1045 = _1034;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_731, cbModelParam._m0[30u].z, fma(_727, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _723));
        float _1078 = fma(_731, cbModelParam._m0[31u].z, fma(_727, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _723));
        float _1082 = fma(_731, cbModelParam._m0[32u].z, fma(_727, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _723));
        float _1105 = _723 + _492;
        float _1106 = _727 + _493;
        float _1107 = _731 + _494;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_492, _493, _494), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3689 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_492, _493, _494), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3722 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_492, _493, _494), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3755 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1034;
        _1344 = _1034;
        _1345 = _1034;
        _1346 = _1034;
        _1347 = _1034;
        _1348 = _1034;
        _1349 = _1034;
        _1350 = _1034;
        _1351 = _1034;
        _1352 = _1034;
        _1353 = _1034;
        _1354 = _1034;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1047)) + _1047;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _667 * 0.5;
    float _1412 = _668 * 0.5;
    float _1413 = _669 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1033, _1037, _1040, _1043));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _495);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1527 = fma(_731, cbModelParam._m0[13u].z, fma(_727, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723)) + cbModelParam._m0[13u].w;
        float _1531 = fma(_731, cbModelParam._m0[14u].z, fma(_727, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723)) + cbModelParam._m0[14u].w;
        float _1535 = fma(_731, cbModelParam._m0[15u].z, fma(_727, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723)) + cbModelParam._m0[15u].w;
        float _1538 = fma(_669, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667));
        float _1541 = fma(_669, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667));
        float _1544 = fma(_669, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667));
        float _1572;
        if (_1538 > 0.0)
        {
            _1572 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1572 = frontier_phi_14_12_ladder;
        }
        float _1799;
        if (_1541 > 0.0)
        {
            _1799 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1799 = frontier_phi_23_19_ladder;
        }
        float _2056;
        if (_1544 > 0.0)
        {
            _2056 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2056 = frontier_phi_35_30_ladder;
        }
        float _2058 = isnan(_1799) ? _1572 : (isnan(_1572) ? _1799 : min(_1572, _1799));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1538) + _1527;
        float _2064 = (_2059 * _1541) + _1531;
        float _2065 = (_2059 * _1544) + _1535;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2066;
        float _2070 = _2066 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 > _2070) || ((_2064 < _2068) || ((_2063 < _2068) || (_2063 > _2070))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2193 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2065, cbModelParam._m0[9u].z, fma(_2064, cbModelParam._m0[9u].y, _2063 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2065, cbModelParam._m0[10u].z, fma(_2064, cbModelParam._m0[10u].y, _2063 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2065, cbModelParam._m0[11u].z, fma(_2064, cbModelParam._m0[11u].y, _2063 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_13_35_ladder = _2193.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2193.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2193.x * cbModelParam._m0[1u].y;
        }
        _1560 = frontier_phi_13_35_ladder_2;
        _1562 = frontier_phi_13_35_ladder_1;
        _1564 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_667, _668, _669), _1480);
        _1560 = _1548.x * cbModelParam._m0[1u].y;
        _1562 = _1548.y * cbModelParam._m0[1u].y;
        _1564 = _1548.z * cbModelParam._m0[1u].y;
    }
    float _1568 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _495);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1568 : min(cbModelParam._m0[25u].w, _1568));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_731, cbModelParam._m0[21u].z, fma(_727, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_731, cbModelParam._m0[22u].z, fma(_727, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_731, cbModelParam._m0[23u].z, fma(_727, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_669, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667));
        float _1640 = fma(_669, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667));
        float _1643 = fma(_669, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667));
        float _1804;
        if (_1637 > 0.0)
        {
            _1804 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1804 = frontier_phi_25_21_ladder;
        }
        float _2083;
        if (_1640 > 0.0)
        {
            _2083 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2083 = frontier_phi_37_32_ladder;
        }
        float _2296;
        if (_1643 > 0.0)
        {
            _2296 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2296 = frontier_phi_46_43_ladder;
        }
        float _2298 = isnan(_2083) ? _1804 : (isnan(_1804) ? _2083 : min(_1804, _2083));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1637) + _1626;
        float _2304 = (_2299 * _1640) + _1630;
        float _2305 = (_2299 * _1643) + _1634;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2306;
        float _2309 = _2306 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2305 > _2309) || ((_2305 < _2307) || ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 < _2307) || (_2303 > _2309))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2305, cbModelParam._m0[17u].z, fma(_2304, cbModelParam._m0[17u].y, _2303 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2305, cbModelParam._m0[18u].z, fma(_2304, cbModelParam._m0[18u].y, _2303 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2305, cbModelParam._m0[19u].z, fma(_2304, cbModelParam._m0[19u].y, _2303 * cbModelParam._m0[19u].x))), _1569);
            frontier_phi_22_46_ladder = _2504.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2504.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2504.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_22_46_ladder_2;
        _1664 = frontier_phi_22_46_ladder_1;
        _1666 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_667, _668, _669), _1569);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1679 = (((_694 * _644) + _695) * _659) * ((cbModelParam._m0[1u].w * (_1662 - _1560)) + _1560);
    float _1681 = (((_694 * _646) + _695) * _659) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1683 = (((_694 * _647) + _695) * _659) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    vec4 _1700 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_581, _582));
    float _1702 = _1700.w;
    float _1714 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1702);
    float _1715 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1702);
    float _1716 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1702);
    uvec4 _1720 = floatBitsToUint(cbInstanceData._m0[_619 + 5u]);
    uint _1722 = _1720.x * 14u;
    uint _1723 = _1722 + 13u;
    float _1730 = _659 + (-1.0);
    float _1735 = (cbLight._m0[_1723].x * _1730) + 1.0;
    float _1736 = (cbLight._m0[_1723].y * _1730) + 1.0;
    float _1737 = (cbLight._m0[_1723].z * _1730) + 1.0;
    float _1738 = (cbLight._m0[_1723].w * _1730) + 1.0;
    uint _1739 = _1722 + 5u;
    float _1745 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1749 = _1722 + 4u;
    float _1758 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1762 = _1722 | 1u;
    float _1773 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_492, _493, _494));
    float _1776 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_492, _493, _494));
    float _3891 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _3902 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1781 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.3183098733425140380859375;
    float _1783 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.3183098733425140380859375;
    float _1790 = ((cbLight._m0[_1739].x * _1745) * _1783) + (((cbLight._m0[_1749].x * _1714) * _1758) * _1781);
    float _1791 = ((_1745 * cbLight._m0[_1739].y) * _1783) + (((cbLight._m0[_1749].y * _1715) * _1758) * _1781);
    float _1792 = ((_1745 * cbLight._m0[_1739].z) * _1783) + (((cbLight._m0[_1749].z * _1716) * _1758) * _1781);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1722 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1790;
        _1811 = _1791;
        _1813 = _1792;
    }
    else
    {
        uint _1817 = _1722 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1722 + 2u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3913 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1836 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1792;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2027 = _1722 + 7u;
        float _2043 = (dot(vec3(cbLight._m0[_1722 + 3u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _3929 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _2046 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1854 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _1809;
        _1856 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _1811;
        _1858 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _1813;
    }
    uint _1861 = _1722 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _495) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1722].x + _573;
    float _1877 = cbLight._m0[_1722].y + _574;
    float _1878 = cbLight._m0[_1722].z + _575;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1722].xyz));
    float _3945 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _1890 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1891 = dot(vec3(_492, _493, _494), vec3(_1883, _1884, _1885));
    float _3967 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1883, _1884, _1885));
    float _3978 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1911 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
    float _1912 = 0.959999978542327880859375 - _641;
    float _1914 = 0.959999978542327880859375 - _642;
    float _1915 = 0.959999978542327880859375 - _643;
    float _1922 = 1.0 - _1875;
    float _1933 = (0.5 / (((_1890 * ((_1889 * _1922) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1922) + _1875) * _1889))) * _1889;
    float _3989 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1949 = _1722 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _495) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1762].x + _573;
    float _1963 = cbLight._m0[_1762].y + _574;
    float _1964 = cbLight._m0[_1762].z + _575;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1762].xyz));
    float _4000 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1976 = dot(vec3(_492, _493, _494), vec3(_1969, _1970, _1971));
    float _4011 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1969, _1970, _1971));
    float _4022 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
    float _2002 = 1.0 - _1961;
    float _2012 = (0.5 / (((_1890 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2002) + _1961) * _1975))) * _1975;
    float _4033 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2024 = (((((_1995 * _1912) + _644) * cbLight._m0[_1949].x) * _2014) * _1745) + ((((cbLight._m0[_1861].x * _1714) * ((_1911 * _1912) + _644)) * _1935) * _1758);
    float _2025 = (((((_1995 * _1914) + _646) * cbLight._m0[_1949].y) * _2014) * _1745) + ((((cbLight._m0[_1861].y * _1715) * ((_1911 * _1914) + _646)) * _1935) * _1758);
    float _2026 = (((((_1995 * _1915) + _647) * cbLight._m0[_1949].z) * _2014) * _1745) + ((((cbLight._m0[_1861].z * _1716) * ((_1911 * _1915) + _647)) * _1935) * _1758);
    float _2088;
    float _2090;
    float _2092;
    if (_1798)
    {
        _2088 = _2024;
        _2090 = _2025;
        _2092 = _2026;
    }
    else
    {
        uint _2094 = _1722 + 2u;
        uint _2098 = _1722 + 10u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _495) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _573;
        float _2115 = cbLight._m0[_2094].y + _574;
        float _2116 = cbLight._m0[_2094].z + _575;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2094].xyz));
        float _4044 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2128 = dot(vec3(_492, _493, _494), vec3(_2121, _2122, _2123));
        float _4055 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _4066 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
        float _2154 = 1.0 - _2113;
        float _2164 = (0.5 / (((_1890 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2154) + _2113) * _2127))) * _2127;
        float _4077 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _2088 = (((((_2147 * _1912) + _644) * cbLight._m0[_2098].x) * _2166) * _2167) + _2024;
        _2090 = (((((_2147 * _1914) + _646) * cbLight._m0[_2098].y) * _2166) * _2167) + _2025;
        _2092 = (((((_2147 * _1915) + _647) * cbLight._m0[_2098].z) * _2166) * _2167) + _2026;
    }
    float _2202;
    float _2204;
    float _2206;
    if (_1816)
    {
        _2202 = _2088;
        _2204 = _2090;
        _2206 = _2092;
    }
    else
    {
        uint _2213 = _1722 + 3u;
        uint _2217 = _1722 + 11u;
        float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _495) * 0.949999988079071044921875);
        float _2232 = _2231 * _2231;
        float _2233 = cbLight._m0[_2213].x + _573;
        float _2234 = cbLight._m0[_2213].y + _574;
        float _2235 = cbLight._m0[_2213].z + _575;
        float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
        float _2240 = _2239 * _2233;
        float _2241 = _2239 * _2234;
        float _2242 = _2239 * _2235;
        float _2243 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2213].xyz));
        float _4093 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2247 = dot(vec3(_492, _493, _494), vec3(_2240, _2241, _2242));
        float _4104 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2251 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2240, _2241, _2242));
        float _4115 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2255 = _2232 * _2232;
        float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
        float _2266 = exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0);
        float _2273 = 1.0 - _2232;
        float _2283 = (0.5 / (((_1890 * ((_2246 * _2273) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2273) + _2232) * _2246))) * _2246;
        float _4126 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2285 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
        float _2286 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2202 = (((((_2266 * _1912) + _644) * cbLight._m0[_2217].x) * _2285) * _2286) + _2088;
        _2204 = (((((_2266 * _1914) + _646) * cbLight._m0[_2217].y) * _2285) * _2286) + _2090;
        _2206 = (((((_2266 * _1915) + _647) * cbLight._m0[_2217].z) * _2285) * _2286) + _2092;
    }
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_1720.y == 0u)
    {
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2361;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2361;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2361;
        uvec4 _2376 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2377 = _2376.x;
        uint _2388 = uint((float(_2376.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2377))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2377)));
        float _2398 = (log2(_2364 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2399 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        uint _2402 = uint(isnan(14.0) ? _2399 : (isnan(_2399) ? 14.0 : min(_2399, 14.0)));
        uvec4 _2407 = texelFetch(g_lightClusterGridBuffer, int(((_2402 << 2u) + (_2388 << 6u)) >> 2u));
        uint _2408 = _2407.x;
        uint _2409 = _2376.z;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((((1u << ((_2409 >> 4u) & 15u)) + 4294967295u) & _2408) == 0u) || ((_2409 & 240u) == 0u))
        {
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
        }
        else
        {
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            uint _2660 = 0u;
            uint _2669;
            bool _2670;
            for (;;)
            {
                _2669 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                _2670 = _2669 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2670)
                {
                    frontier_phi_61_pred = _2654;
                    frontier_phi_61_pred_1 = _2659;
                    frontier_phi_61_pred_2 = _2658;
                    frontier_phi_61_pred_3 = _2657;
                    frontier_phi_61_pred_4 = _2656;
                    frontier_phi_61_pred_5 = _2655;
                }
                else
                {
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    uint _2784;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2669;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    for (;;)
                    {
                        uint _2788 = uint(findLSB(_2784)) + (_2660 << 5u);
                        uint _2785 = (_2784 + 4294967295u) & _2784;
                        uint _2790 = _2788 * 48u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2810 = (_2788 * 48u) + 4u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2829 = (_2788 * 48u) + 8u;
                        vec3 _2840 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x));
                        float _2844 = _2804.x - _2362;
                        float _2845 = _2804.y - _2363;
                        float _2846 = _2804.z - _2364;
                        float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                        float _2850 = inversesqrt(_2847);
                        float _2851 = _2850 * _2844;
                        float _2852 = _2850 * _2845;
                        float _2853 = _2850 * _2846;
                        float _2854 = dot(vec3(_600, _603, _606), vec3(_2851, _2852, _2853));
                        float _2859 = 1.0 - (_2847 * _2804.w);
                        float _4152 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2861 = sqrt(_2847) * _2823.w;
                        float _2864 = 1.39999997615814208984375 / (_2861 + 1.39999997615814208984375);
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2854) + _2865;
                        float _2871 = _2861 * _2861;
                        float _2875 = ((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2860) / ((_2871 * 0.699999988079071044921875) + 1.0);
                        float _2879 = (-0.0) - _2362;
                        float _2880 = (-0.0) - _2363;
                        float _2881 = (-0.0) - _2364;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2896 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                        float _2897 = 1.0 - _675;
                        float _2904 = sqrt(1.0 - ((1.0 - (_2897 * _2897)) * (1.0 - (_2896 * _2896))));
                        float _2905 = _2904 * _2904;
                        float _2906 = _2905 * _2905;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2909 = _2888 + _2853;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2917 = dot(vec3(_600, _603, _606), vec3(_2886, _2887, _2888));
                        float _4168 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2921 = dot(vec3(_600, _603, _606), vec3(_2913 * _2907, _2913 * _2908, _2913 * _2909));
                        float _4179 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2928 = ((_2924 * _2924) * (_2906 + (-1.0))) + 1.0;
                        float _2929 = _2864 * _2905;
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2854) + _2930;
                        float _4190 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2935 = 1.0 - _2905;
                        float _2945 = (0.5 / (((_2934 * ((_2920 * _2935) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2934 * _2935) + _2905) * _2920))) * _2934;
                        float _4201 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2956 = (((_2906 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_2928 * _2928) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125))) * _2860;
                        _2713 = (_2875 * _2823.x) + _2781;
                        _2714 = (_2875 * _2823.y) + _2782;
                        _2715 = (_2875 * _2823.z) + _2783;
                        _2710 = (_2956 * _2840.x) + _2778;
                        _2711 = (_2956 * _2840.y) + _2779;
                        _2712 = (_2956 * _2840.z) + _2780;
                        if (_2785 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2785;
                        }
                    }
                    frontier_phi_61_pred = _2710;
                    frontier_phi_61_pred_1 = _2715;
                    frontier_phi_61_pred_2 = _2714;
                    frontier_phi_61_pred_3 = _2713;
                    frontier_phi_61_pred_4 = _2712;
                    frontier_phi_61_pred_5 = _2711;
                }
                _2510 = frontier_phi_61_pred;
                _2520 = frontier_phi_61_pred_1;
                _2518 = frontier_phi_61_pred_2;
                _2516 = frontier_phi_61_pred_3;
                _2514 = frontier_phi_61_pred_4;
                _2512 = frontier_phi_61_pred_5;
                uint _2661 = _2660 + 1u;
                if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2654 = _2510;
                    _2655 = _2512;
                    _2656 = _2514;
                    _2657 = _2516;
                    _2658 = _2518;
                    _2659 = _2520;
                    _2660 = _2661;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
        }
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.z;
        uint _2526 = (_2524 >> 8u) & 15u;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((4294967295u << _2526) & _2408) == 0u)
        {
            _2622 = _2509;
            _2624 = _2511;
            _2626 = _2513;
            _2628 = _2515;
            _2630 = _2517;
            _2632 = _2519;
        }
        else
        {
            float _2647 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
            float _2648 = _2647 * _2362;
            float _2649 = _2647 * _2363;
            float _2650 = _2647 * _2364;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2526 < ((_2524 >> 12u) & 15u))
            {
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2761 = _2509;
                float _2762 = _2511;
                float _2763 = _2513;
                float _2764 = _2515;
                float _2765 = _2517;
                float _2766 = _2519;
                uint _2767 = _2526;
                uint _2776;
                bool _2777;
                for (;;)
                {
                    _2776 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                    _2777 = _2776 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2777)
                    {
                        frontier_phi_67_pred = _2764;
                        frontier_phi_67_pred_1 = _2765;
                        frontier_phi_67_pred_2 = _2766;
                        frontier_phi_67_pred_3 = _2763;
                        frontier_phi_67_pred_4 = _2762;
                        frontier_phi_67_pred_5 = _2761;
                    }
                    else
                    {
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        uint _2980 = _2776;
                        uint _2981;
                        vec4 _3006;
                        float _3007;
                        vec4 _3022;
                        vec3 _3034;
                        vec4 _3050;
                        vec4 _3066;
                        float _3113;
                        bool _3114;
                        for (;;)
                        {
                            uint _2991 = ((_2767 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2980));
                            _2981 = (_2980 + 4294967295u) & _2980;
                            uint _2993 = _2991 * 40u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3007 = _3006.w;
                            uint _3009 = (_2991 * 40u) + 4u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2991 * 40u) + 8u;
                            _3034 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x));
                            uint _3037 = (_2991 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2991 * 40u) + 20u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_2991 * 40u) + 24u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3088 = (_2991 * 40u) + 28u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3113 = fma(_2364, _3101.z, fma(_2363, _3101.y, _3101.x * _2362)) + _3101.w;
                            _3114 = !((fma(_2364, _3082.z, fma(_2363, _3082.y, _3082.x * _2362)) + _3082.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3114)
                            {
                                float _3141 = _3006.x - _2362;
                                float _3142 = _3006.y - _2363;
                                float _3143 = _3006.z - _2364;
                                float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                                float _3147 = inversesqrt(_3144);
                                float _3148 = _3147 * _3141;
                                float _3149 = _3147 * _3142;
                                float _3150 = _3147 * _3143;
                                float _3154 = 1.0 - (_3144 / (_3007 * _3007));
                                float _4212 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3159 = sqrt(_3144) * _3022.w;
                                float _3161 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                                float _3162 = _3161 * _3161;
                                float _3165 = ((1.0 - _3162) * dot(vec3(_3148, _3149, _3150), vec3(_600, _603, _606))) + _3162;
                                float _3168 = _3159 * _3159;
                                float _3172 = (fma(_2364, _3050.z, fma(_2363, _3050.y, _3050.x * _2362)) + _3050.w) / _3113;
                                float _3173 = (fma(_2364, _3066.z, fma(_2363, _3066.y, _3066.x * _2362)) + _3066.w) / _3113;
                                float _3177 = 1.0 - dot(vec2(_3172, _3173), vec2(_3172, _3173));
                                float _4228 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3179 = _3178 * (((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3155) / ((_3168 * 0.699999988079071044921875) + 1.0));
                                float _3191 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                                float _3192 = 1.0 - _675;
                                float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                                float _3200 = _3199 * _3199;
                                float _3201 = _3200 * _3200;
                                float _3202 = _3148 - _2648;
                                float _3203 = _3149 - _2649;
                                float _3204 = _3150 - _2650;
                                float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                                float _3212 = dot(vec3(_600, _603, _606), vec3((-0.0) - _2648, (-0.0) - _2649, (-0.0) - _2650));
                                float _4239 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3216 = dot(vec3(_600, _603, _606), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                                float _4250 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                                float _3224 = _3161 * _3200;
                                float _3225 = _3224 * _3224;
                                float _3231 = ((1.0 - _3225) * dot(vec3(_600, _603, _606), vec3(_3148, _3149, _3150))) + _3225;
                                float _4261 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3233 = 1.0 - _3200;
                                float _3243 = (0.5 / (((_3232 * ((_3215 * _3233) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3200) * _3215))) * _3232;
                                float _4272 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3253 = (_3178 * _3155) * (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_3223 * _3223) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3253 * _3034.x;
                                frontier_phi_73_pred_1 = _3253 * _3034.y;
                                frontier_phi_73_pred_2 = _3179 * _3022.z;
                                frontier_phi_73_pred_3 = _3179 * _3022.y;
                                frontier_phi_73_pred_4 = _3179 * _3022.x;
                                frontier_phi_73_pred_5 = _3253 * _3034.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3257 = frontier_phi_73_pred;
                            _3258 = frontier_phi_73_pred_1;
                            _3262 = frontier_phi_73_pred_2;
                            _3261 = frontier_phi_73_pred_3;
                            _3260 = frontier_phi_73_pred_4;
                            _3259 = frontier_phi_73_pred_5;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            if (_2981 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2981;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2964;
                        frontier_phi_67_pred_1 = _2965;
                        frontier_phi_67_pred_2 = _2966;
                        frontier_phi_67_pred_3 = _2963;
                        frontier_phi_67_pred_4 = _2962;
                        frontier_phi_67_pred_5 = _2961;
                    }
                    _2629 = frontier_phi_67_pred;
                    _2631 = frontier_phi_67_pred_1;
                    _2633 = frontier_phi_67_pred_2;
                    _2627 = frontier_phi_67_pred_3;
                    _2625 = frontier_phi_67_pred_4;
                    _2623 = frontier_phi_67_pred_5;
                    uint _2768 = _2767 + 1u;
                    if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2761 = _2623;
                        _2762 = _2625;
                        _2763 = _2627;
                        _2764 = _2629;
                        _2765 = _2631;
                        _2766 = _2633;
                        _2767 = _2768;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2631;
                frontier_phi_55_56_ladder_1 = _2633;
                frontier_phi_55_56_ladder_2 = _2629;
                frontier_phi_55_56_ladder_3 = _2627;
                frontier_phi_55_56_ladder_4 = _2625;
                frontier_phi_55_56_ladder_5 = _2623;
            }
            else
            {
                frontier_phi_55_56_ladder = _2517;
                frontier_phi_55_56_ladder_1 = _2519;
                frontier_phi_55_56_ladder_2 = _2515;
                frontier_phi_55_56_ladder_3 = _2513;
                frontier_phi_55_56_ladder_4 = _2511;
                frontier_phi_55_56_ladder_5 = _2509;
            }
            _2622 = frontier_phi_55_56_ladder_5;
            _2624 = frontier_phi_55_56_ladder_4;
            _2626 = frontier_phi_55_56_ladder_3;
            _2628 = frontier_phi_55_56_ladder_2;
            _2630 = frontier_phi_55_56_ladder;
            _2632 = frontier_phi_55_56_ladder_1;
        }
        float _2637 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
        _2421 = (_2637 * _2628) + _1854;
        _2423 = (_2637 * _2630) + _1856;
        _2425 = (_2637 * _2632) + _1858;
        _2427 = ((_2622 * _644) * _2637) + _2202;
        _2429 = ((_2624 * _646) * _2637) + _2204;
        _2431 = ((_2626 * _647) * _2637) + _2206;
    }
    else
    {
        _2421 = _1854;
        _2423 = _1856;
        _2425 = _1858;
        _2427 = _2202;
        _2429 = _2204;
        _2431 = _2206;
    }
    float _4288 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4299 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4310 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    uint _2451 = _619 + 6u;
    float _2459 = _581 / cbSceneParam._m0[86u].x;
    float _2460 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2474 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, (log2((isnan(cbSceneParam._m0[77u].w) ? _515 : (isnan(_515) ? cbSceneParam._m0[77u].w : min(_515, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2476 = _2474.x;
    float _2477 = _2474.y;
    float _2478 = _2474.z;
    float _2479 = _2474.w;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_515 > cbSceneParam._m0[78u].w)
    {
        float _2534 = isnan(_515) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _515 : min(cbSceneParam._m0[80u].w, _515));
        float _2535 = _2534 / _515;
        float _2546 = _2535 * _566;
        float _2547 = _567 * _2535;
        float _2548 = (-0.0) - _2547;
        float _2550 = _2535 * _568;
        float _2552 = (cbSceneParam._m0[77u].w * _2548) / _2534;
        float _2553 = _2552 + cbSceneParam._m0[79u].w;
        float _2554 = cbSceneParam._m0[79u].w - _2547;
        float _2560 = sqrt(((_2546 * _2546) + (_2547 * _2547)) + (_2550 * _2550));
        float _2563 = (1.0 - (cbSceneParam._m0[77u].w / _2534)) * _2560;
        float _2568 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2570 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2723;
        if (abs((_2548 - _2552) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2723 = ((((_2553 > 0.0) ? exp2(_2568 * _2553) : (2.0 - exp2(_2570 * _2553))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2563;
        }
        else
        {
            float _2683 = 1.0 / cbSceneParam._m0[80u].x;
            float _2684 = isnan(_2554) ? _2553 : (isnan(_2553) ? _2554 : max(_2553, _2554));
            float _2685 = isnan(_2554) ? _2553 : (isnan(_2553) ? _2554 : min(_2553, _2554));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            _2723 = ((abs(_2560 / _2548) * cbSceneParam._m0[80u].y) * ((((_2694 - _2695) * 2.0) - ((exp2(_2568 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)))) - exp2(_2568 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))))) * _2683)) - ((exp2(_2570 * _2694) - exp2(_2570 * _2695)) * _2683))) + (_2563 * cbSceneParam._m0[80u].z);
        }
        vec4 _2725 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, 1.0), 0.0);
        float _2734 = exp2((_2723 * (-1.44269502162933349609375)) * (1.0 - _2725.w));
        float _2735 = log2(_2734);
        float _2751 = log2(_2479);
        _2572 = (exp2(_2751 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].x)) * _2725.x) / cbSceneParam._m0[78u].x)) + _2476;
        _2574 = (exp2(_2751 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].y)) * _2725.y) / cbSceneParam._m0[78u].y)) + _2477;
        _2576 = (exp2(_2751 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].z)) * _2725.z) / cbSceneParam._m0[78u].z)) + _2478;
        _2578 = _2734 * _2479;
    }
    else
    {
        _2572 = _2476;
        _2574 = _2477;
        _2576 = _2478;
        _2578 = _2479;
    }
    float _2590 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2591 = _2590 == 3.0;
    float _2592 = log2(_2578);
    float _2599 = exp2(_2592 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2421 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _659))) + ((_2427 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1469)) * cbPerFrame._m0[3u].x));
    float _2600 = exp2(_2592 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2423 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _659))) + ((_2429 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1469)) * cbPerFrame._m0[3u].x));
    float _2601 = exp2(_2592 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2425 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _659))) + ((_2431 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1469)) * cbPerFrame._m0[3u].x));
    float _2610 = (_2590 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2610 * (_2591 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2572)));
    SV_Target.y = _2610 * (_2591 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2574)));
    SV_Target.z = _2610 * (_2591 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.w = cbInstanceData._m0[_2451].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2451].w;
}


