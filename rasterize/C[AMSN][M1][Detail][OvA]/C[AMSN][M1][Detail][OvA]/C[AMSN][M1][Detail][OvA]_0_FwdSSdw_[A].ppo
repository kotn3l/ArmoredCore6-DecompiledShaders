#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1078;
float _3489;
float _3490;
float _3491;
float _3492;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[10u].x;
    float _256 = _249.y * cbMtdParam._m0[10u].y;
    float _257 = _249.z * cbMtdParam._m0[10u].z;
    float _262 = 1.0 - cbMtdParam._m0[13u].z;
    float _3501 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _290 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _282.x;
    float _293 = ((_256 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _282.y;
    float _296 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _282.z;
    float _303 = ((_255 - _290) * _264) + _290;
    float _304 = ((_256 - _293) * _264) + _293;
    float _305 = ((_257 - _296) * _264) + _296;
    vec4 _323 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _353 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3512 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _361 = (_354 * ((_323.x * cbMtdParam._m0[11u].x) - _303)) + _303;
    float _362 = (_354 * ((_323.y * cbMtdParam._m0[11u].y) - _304)) + _304;
    float _363 = (_354 * ((_323.z * cbMtdParam._m0[11u].z) - _305)) + _305;
    vec4 _376 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _378 = _376.x;
    float _380 = _378 - (_378 * TEXCOORD_5.x);
    vec4 _394 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _398 = _394.z;
    vec4 _411 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _425 = cbMtdParam._m0[13u].w * _398;
    float _428 = (((((_398 * 2.0) * _411.z) * cbMtdParam._m0[14u].x) - _425) * cbMtdParam._m0[13u].y) + _425;
    vec4 _441 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _456 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_441.z * cbMtdParam._m0[14u].y) - _428)) + _428;
    float _463 = (_394.x * 2.0) + (-1.0);
    float _464 = (_394.y * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3523 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    float _481 = ((cbMtdParam._m0[13u].x * ((_411.x * 2.0) + (-1.0))) + _463) + ((((_441.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _482 = ((cbMtdParam._m0[13u].x * ((_411.y * 2.0) + (-1.0))) + _464) + ((((_441.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _485 = fma(_470, _214 * NORMAL.x, fma(_482, _221 * TANGENT.x, (_207 * _199) * _481));
    float _488 = fma(_470, _214 * NORMAL.y, fma(_482, _221 * TANGENT.y, (_207 * _200) * _481));
    float _491 = fma(_470, _214 * NORMAL.z, fma(_482, _221 * TANGENT.z, (_207 * _201) * _481));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _3534 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _499 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3556 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3567 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3578 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _503 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _519 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _570 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _560);
    float _571 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _560);
    float _572 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _560);
    float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
    float _577 = _570 * _576;
    float _578 = _571 * _576;
    float _579 = _572 * _576;
    vec4 _584 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _586 = _584.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _758 = sqrt(((_570 * _570) + (_571 * _571)) + (_572 * _572));
        float _764 = (cbMatDynParam._m0[5u].x * _758) + cbMatDynParam._m0[5u].y;
        float _3589 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _769 = (cbMatDynParam._m0[5u].z * _758) + cbMatDynParam._m0[5u].w;
        float _3600 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) - _765)) + _765) < ((_586 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _616 = fma(_498, cbSceneParam._m0[5u].z, fma(_497, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _496));
    float _619 = fma(_498, cbSceneParam._m0[6u].z, fma(_497, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _496));
    float _622 = fma(_498, cbSceneParam._m0[7u].z, fma(_497, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _496));
    uint _635 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = _635 + 9u;
    uint _637 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3611 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _649 = 1.0 - _503;
    float _650 = _646 * _649;
    float _651 = _647 * _649;
    float _652 = _648 * _649;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _503;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _503;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _503;
    float _660 = _657 + 0.039999999105930328369140625;
    float _662 = _658 + 0.039999999105930328369140625;
    float _663 = _659 + 0.039999999105930328369140625;
    vec4 _672 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _675 = _672.x * TEXCOORD_5.w;
    float _676 = dot(vec3(_496, _497, _498), vec3(_577, _578, _579));
    float _679 = _676 * 2.0;
    float _683 = (_679 * _496) - _577;
    float _684 = (_679 * _497) - _578;
    float _685 = (_679 * _498) - _579;
    float _689 = abs(dot(vec3(_577, _578, _579), vec3(_496, _497, _498)));
    float _3644 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _691 = sqrt(_499);
    float _704 = exp2((_691 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _710 = (1.0 - _704) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _711 = _704 * _691;
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _806 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _810 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _835 = _739 + _496;
        float _836 = _743 + _497;
        float _837 = _747 + _498;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_496, _497, _498), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3692 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_496, _497, _498), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3725 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_496, _497, _498), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3758 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1125 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1129 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1152 = _739 + _496;
        float _1153 = _743 + _497;
        float _1154 = _747 + _498;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_496, _497, _498), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3821 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_496, _497, _498), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3854 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_496, _497, _498), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3887 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = _1078;
        _1399 = _1078;
        _1400 = _1078;
        _1401 = _1078;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1090)) + _1090;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1091)) + _1091;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _683 * 0.5;
    float _1459 = _684 * 0.5;
    float _1460 = _685 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _499);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_685, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683));
        float _1588 = fma(_685, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683));
        float _1591 = fma(_685, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1619 = frontier_phi_17_15_ladder;
        }
        float _1846;
        if (_1588 > 0.0)
        {
            _1846 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1846 = frontier_phi_26_22_ladder;
        }
        float _2103;
        if (_1591 > 0.0)
        {
            _2103 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2103 = frontier_phi_38_33_ladder;
        }
        float _2105 = isnan(_1846) ? _1619 : (isnan(_1619) ? _1846 : min(_1619, _1846));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1585) + _1574;
        float _2111 = (_2106 * _1588) + _1578;
        float _2112 = (_2106 * _1591) + _1582;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2113;
        float _2117 = _2113 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 > _2117) || ((_2111 < _2115) || ((_2110 < _2115) || (_2110 > _2117))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2112, cbModelParam._m0[9u].z, fma(_2111, cbModelParam._m0[9u].y, _2110 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2112, cbModelParam._m0[10u].z, fma(_2111, cbModelParam._m0[10u].y, _2110 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2112, cbModelParam._m0[11u].z, fma(_2111, cbModelParam._m0[11u].y, _2110 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_16_38_ladder = _2240.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2240.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2240.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_16_38_ladder_2;
        _1609 = frontier_phi_16_38_ladder_1;
        _1611 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_683, _684, _685), _1527);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _499);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_685, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683));
        float _1687 = fma(_685, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683));
        float _1690 = fma(_685, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683));
        float _1851;
        if (_1684 > 0.0)
        {
            _1851 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1851 = frontier_phi_28_24_ladder;
        }
        float _2130;
        if (_1687 > 0.0)
        {
            _2130 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2130 = frontier_phi_40_35_ladder;
        }
        float _2343;
        if (_1690 > 0.0)
        {
            _2343 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2343 = frontier_phi_49_46_ladder;
        }
        float _2345 = isnan(_2130) ? _1851 : (isnan(_1851) ? _2130 : min(_1851, _2130));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1684) + _1673;
        float _2351 = (_2346 * _1687) + _1677;
        float _2352 = (_2346 * _1690) + _1681;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2353;
        float _2356 = _2353 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2352 > _2356) || ((_2352 < _2354) || ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 < _2354) || (_2350 > _2356))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2352, cbModelParam._m0[17u].z, fma(_2351, cbModelParam._m0[17u].y, _2350 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2352, cbModelParam._m0[18u].z, fma(_2351, cbModelParam._m0[18u].y, _2350 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2352, cbModelParam._m0[19u].z, fma(_2351, cbModelParam._m0[19u].y, _2350 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_25_49_ladder = _2551.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2551.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2551.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_25_49_ladder_2;
        _1711 = frontier_phi_25_49_ladder_1;
        _1713 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_683, _684, _685), _1616);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1726 = (((_710 * _660) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1709 - _1607)) + _1607);
    float _1728 = (((_710 * _662) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1711 - _1609)) + _1609);
    float _1730 = (((_710 * _663) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1733 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    vec4 _1747 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_597, _598));
    float _1749 = _1747.w;
    float _1761 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1749);
    float _1762 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1749);
    float _1763 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1749);
    uvec4 _1767 = floatBitsToUint(cbInstanceData._m0[_635 + 5u]);
    uint _1769 = _1767.x * 14u;
    uint _1770 = _1769 + 13u;
    float _1777 = _675 + (-1.0);
    float _1782 = (cbLight._m0[_1770].x * _1777) + 1.0;
    float _1783 = (cbLight._m0[_1770].y * _1777) + 1.0;
    float _1784 = (cbLight._m0[_1770].z * _1777) + 1.0;
    float _1785 = (cbLight._m0[_1770].w * _1777) + 1.0;
    uint _1786 = _1769 + 5u;
    float _1792 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1796 = _1769 + 4u;
    float _1805 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1809 = _1769 | 1u;
    float _1820 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_496, _497, _498));
    float _1823 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_496, _497, _498));
    float _4023 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _4034 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1828 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1830 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1837 = ((cbLight._m0[_1786].x * _1792) * _1830) + (((cbLight._m0[_1796].x * _1761) * _1805) * _1828);
    float _1838 = ((_1792 * cbLight._m0[_1786].y) * _1830) + (((cbLight._m0[_1796].y * _1762) * _1805) * _1828);
    float _1839 = ((_1792 * cbLight._m0[_1786].z) * _1830) + (((cbLight._m0[_1796].z * _1763) * _1805) * _1828);
    uvec4 _1843 = floatBitsToUint(cbLight._m0[_1769 + 12u]);
    bool _1845 = _1843.x == 0u;
    float _1856;
    float _1858;
    float _1860;
    if (_1845)
    {
        _1856 = _1837;
        _1858 = _1838;
        _1860 = _1839;
    }
    else
    {
        uint _1864 = _1769 + 6u;
        float _1880 = (dot(vec3(cbLight._m0[_1769 + 2u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _1881 = _1880 * _1880;
        float _4045 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1883 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _1856 = (((cbLight._m0[_1864].x * 0.3183098733425140380859375) * _1882) * _1883) + _1837;
        _1858 = (((cbLight._m0[_1864].y * 0.3183098733425140380859375) * _1882) * _1883) + _1838;
        _1860 = (((cbLight._m0[_1864].z * 0.3183098733425140380859375) * _1882) * _1883) + _1839;
    }
    bool _1863 = _1843.y == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1863)
    {
        _1901 = _1856;
        _1903 = _1858;
        _1905 = _1860;
    }
    else
    {
        uint _2074 = _1769 + 7u;
        float _2090 = (dot(vec3(cbLight._m0[_1769 + 3u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _4061 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2093 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _1901 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _1856;
        _1903 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _1858;
        _1905 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _1860;
    }
    uint _1908 = _1769 + 8u;
    float _1921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1769].w)) * _499) * 0.949999988079071044921875);
    float _1922 = _1921 * _1921;
    float _1923 = cbLight._m0[_1769].x + _577;
    float _1924 = cbLight._m0[_1769].y + _578;
    float _1925 = cbLight._m0[_1769].z + _579;
    float _1929 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
    float _1930 = _1929 * _1923;
    float _1931 = _1929 * _1924;
    float _1932 = _1929 * _1925;
    float _1933 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1769].xyz));
    float _4077 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _1937 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1938 = dot(vec3(_496, _497, _498), vec3(_1930, _1931, _1932));
    float _4099 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_1930, _1931, _1932));
    float _4110 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1946 = _1922 * _1922;
    float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
    float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _1959 = 0.959999978542327880859375 - _657;
    float _1961 = 0.959999978542327880859375 - _658;
    float _1962 = 0.959999978542327880859375 - _659;
    float _1969 = 1.0 - _1922;
    float _1980 = (0.5 / (((_1937 * ((_1936 * _1969) + _1922)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _1969) + _1922) * _1936))) * _1936;
    float _4121 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
    uint _1996 = _1769 + 9u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _499) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1809].x + _577;
    float _2010 = cbLight._m0[_1809].y + _578;
    float _2011 = cbLight._m0[_1809].z + _579;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1809].xyz));
    float _4132 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2023 = dot(vec3(_496, _497, _498), vec3(_2016, _2017, _2018));
    float _4143 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_2016, _2017, _2018));
    float _4154 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2008 * _2008;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2042 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
    float _2049 = 1.0 - _2008;
    float _2059 = (0.5 / (((_1937 * ((_2022 * _2049) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2049) + _2008) * _2022))) * _2022;
    float _4165 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    float _2071 = (((((_2042 * _1959) + _660) * cbLight._m0[_1996].x) * _2061) * _1792) + ((((cbLight._m0[_1908].x * _1761) * ((_1958 * _1959) + _660)) * _1982) * _1805);
    float _2072 = (((((_2042 * _1961) + _662) * cbLight._m0[_1996].y) * _2061) * _1792) + ((((cbLight._m0[_1908].y * _1762) * ((_1958 * _1961) + _662)) * _1982) * _1805);
    float _2073 = (((((_2042 * _1962) + _663) * cbLight._m0[_1996].z) * _2061) * _1792) + ((((cbLight._m0[_1908].z * _1763) * ((_1958 * _1962) + _663)) * _1982) * _1805);
    float _2135;
    float _2137;
    float _2139;
    if (_1845)
    {
        _2135 = _2071;
        _2137 = _2072;
        _2139 = _2073;
    }
    else
    {
        uint _2141 = _1769 + 2u;
        uint _2145 = _1769 + 10u;
        float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _499) * 0.949999988079071044921875);
        float _2160 = _2159 * _2159;
        float _2161 = cbLight._m0[_2141].x + _577;
        float _2162 = cbLight._m0[_2141].y + _578;
        float _2163 = cbLight._m0[_2141].z + _579;
        float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
        float _2168 = _2167 * _2161;
        float _2169 = _2167 * _2162;
        float _2170 = _2167 * _2163;
        float _2171 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2141].xyz));
        float _4176 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2175 = dot(vec3(_496, _497, _498), vec3(_2168, _2169, _2170));
        float _4187 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2179 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2168, _2169, _2170));
        float _4198 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2183 = _2160 * _2160;
        float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
        float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
        float _2201 = 1.0 - _2160;
        float _2211 = (0.5 / (((_1937 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2201) + _2160) * _2174))) * _2174;
        float _4209 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2213 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
        float _2214 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _2135 = (((((_2194 * _1959) + _660) * cbLight._m0[_2145].x) * _2213) * _2214) + _2071;
        _2137 = (((((_2194 * _1961) + _662) * cbLight._m0[_2145].y) * _2213) * _2214) + _2072;
        _2139 = (((((_2194 * _1962) + _663) * cbLight._m0[_2145].z) * _2213) * _2214) + _2073;
    }
    float _2249;
    float _2251;
    float _2253;
    if (_1863)
    {
        _2249 = _2135;
        _2251 = _2137;
        _2253 = _2139;
    }
    else
    {
        uint _2260 = _1769 + 3u;
        uint _2264 = _1769 + 11u;
        float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _499) * 0.949999988079071044921875);
        float _2279 = _2278 * _2278;
        float _2280 = cbLight._m0[_2260].x + _577;
        float _2281 = cbLight._m0[_2260].y + _578;
        float _2282 = cbLight._m0[_2260].z + _579;
        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
        float _2287 = _2286 * _2280;
        float _2288 = _2286 * _2281;
        float _2289 = _2286 * _2282;
        float _2290 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2260].xyz));
        float _4225 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2294 = dot(vec3(_496, _497, _498), vec3(_2287, _2288, _2289));
        float _4236 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2287, _2288, _2289));
        float _4247 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _2279 * _2279;
        float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
        float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
        float _2320 = 1.0 - _2279;
        float _2330 = (0.5 / (((_1937 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2320) + _2279) * _2293))) * _2293;
        float _4258 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2332 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
        float _2333 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2249 = (((((_2313 * _1959) + _660) * cbLight._m0[_2264].x) * _2332) * _2333) + _2135;
        _2251 = (((((_2313 * _1961) + _662) * cbLight._m0[_2264].y) * _2332) * _2333) + _2137;
        _2253 = (((((_2313 * _1962) + _663) * cbLight._m0[_2264].z) * _2332) * _2333) + _2139;
    }
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    if (_1767.y == 0u)
    {
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2408;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2408;
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2408;
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.x;
        uint _2435 = uint((float(_2423.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2424))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2424)));
        float _2445 = (log2(_2411 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2446 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        uint _2449 = uint(isnan(14.0) ? _2446 : (isnan(_2446) ? 14.0 : min(_2446, 14.0)));
        uvec4 _2454 = texelFetch(g_lightClusterGridBuffer, int(((_2449 << 2u) + (_2435 << 6u)) >> 2u));
        uint _2455 = _2454.x;
        uint _2456 = _2423.z;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((((1u << ((_2456 >> 4u) & 15u)) + 4294967295u) & _2455) == 0u) || ((_2456 & 240u) == 0u))
        {
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
        }
        else
        {
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            uint _2715 = 0u;
            uint _2724;
            bool _2725;
            for (;;)
            {
                _2724 = texelFetch(g_lightClassification, int((((_2449 << 5u) + (_2435 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                _2725 = _2724 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2725)
                {
                    frontier_phi_66_pred = _2709;
                    frontier_phi_66_pred_1 = _2714;
                    frontier_phi_66_pred_2 = _2713;
                    frontier_phi_66_pred_3 = _2712;
                    frontier_phi_66_pred_4 = _2711;
                    frontier_phi_66_pred_5 = _2710;
                }
                else
                {
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    uint _2860;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2724;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2864 = uint(findLSB(_2860)) + (_2715 << 5u);
                        uint _2861 = (_2860 + 4294967295u) & _2860;
                        uint _2866 = _2864 * 48u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2886 = (_2864 * 48u) + 4u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2905 = (_2864 * 48u) + 8u;
                        vec3 _2916 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x));
                        float _2920 = _2880.x - _2409;
                        float _2921 = _2880.y - _2410;
                        float _2922 = _2880.z - _2411;
                        float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                        float _2926 = inversesqrt(_2923);
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2930 = dot(vec3(_616, _619, _622), vec3(_2927, _2928, _2929));
                        float _2935 = 1.0 - (_2923 * _2880.w);
                        float _4284 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2937 = sqrt(_2923) * _2899.w;
                        float _2940 = 1.39999997615814208984375 / (_2937 + 1.39999997615814208984375);
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2930) + _2941;
                        float _2947 = _2937 * _2937;
                        float _2951 = ((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2936) / ((_2947 * 0.699999988079071044921875) + 1.0);
                        float _2955 = (-0.0) - _2409;
                        float _2956 = (-0.0) - _2410;
                        float _2957 = (-0.0) - _2411;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2972 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _691;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_616, _619, _622), vec3(_2962, _2963, _2964));
                        float _4300 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _2997 = dot(vec3(_616, _619, _622), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4311 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2940 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2930) + _3006;
                        float _4322 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4333 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3032 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3004 * _3004) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125))) * _2936;
                        _2784 = (_2951 * _2899.x) + _2857;
                        _2785 = (_2951 * _2899.y) + _2858;
                        _2786 = (_2951 * _2899.z) + _2859;
                        _2781 = (_3032 * _2916.x) + _2854;
                        _2782 = (_3032 * _2916.y) + _2855;
                        _2783 = (_3032 * _2916.z) + _2856;
                        if (_2861 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2861;
                        }
                    }
                    frontier_phi_66_pred = _2781;
                    frontier_phi_66_pred_1 = _2786;
                    frontier_phi_66_pred_2 = _2785;
                    frontier_phi_66_pred_3 = _2784;
                    frontier_phi_66_pred_4 = _2783;
                    frontier_phi_66_pred_5 = _2782;
                }
                _2557 = frontier_phi_66_pred;
                _2567 = frontier_phi_66_pred_1;
                _2565 = frontier_phi_66_pred_2;
                _2563 = frontier_phi_66_pred_3;
                _2561 = frontier_phi_66_pred_4;
                _2559 = frontier_phi_66_pred_5;
                uint _2716 = _2715 + 1u;
                if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2709 = _2557;
                    _2710 = _2559;
                    _2711 = _2561;
                    _2712 = _2563;
                    _2713 = _2565;
                    _2714 = _2567;
                    _2715 = _2716;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
        }
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.z;
        uint _2573 = (_2571 >> 8u) & 15u;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        if (((4294967295u << _2573) & _2455) == 0u)
        {
            _2677 = _2556;
            _2679 = _2558;
            _2681 = _2560;
            _2683 = _2562;
            _2685 = _2564;
            _2687 = _2566;
        }
        else
        {
            float _2702 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
            float _2703 = _2702 * _2409;
            float _2704 = _2702 * _2410;
            float _2705 = _2702 * _2411;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2573 < ((_2571 >> 12u) & 15u))
            {
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2837 = _2556;
                float _2838 = _2558;
                float _2839 = _2560;
                float _2840 = _2562;
                float _2841 = _2564;
                float _2842 = _2566;
                uint _2843 = _2573;
                uint _2852;
                bool _2853;
                for (;;)
                {
                    _2852 = texelFetch(g_lightClassification, int((((_2449 << 5u) + (_2435 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                    _2853 = _2852 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2853)
                    {
                        frontier_phi_77_pred = _2842;
                        frontier_phi_77_pred_1 = _2841;
                        frontier_phi_77_pred_2 = _2840;
                        frontier_phi_77_pred_3 = _2839;
                        frontier_phi_77_pred_4 = _2838;
                        frontier_phi_77_pred_5 = _2837;
                    }
                    else
                    {
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        uint _3065 = _2852;
                        uint _3066;
                        vec4 _3091;
                        float _3092;
                        vec4 _3107;
                        vec3 _3119;
                        vec4 _3135;
                        vec4 _3151;
                        float _3198;
                        bool _3199;
                        for (;;)
                        {
                            uint _3076 = ((_2843 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3065));
                            _3066 = (_3065 + 4294967295u) & _3065;
                            uint _3078 = _3076 * 40u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            _3092 = _3091.w;
                            uint _3094 = (_3076 * 40u) + 4u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3109 = (_3076 * 40u) + 8u;
                            _3119 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x));
                            uint _3122 = (_3076 * 40u) + 16u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3138 = (_3076 * 40u) + 20u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3154 = (_3076 * 40u) + 24u;
                            vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3173 = (_3076 * 40u) + 28u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3198 = fma(_2411, _3186.z, fma(_2410, _3186.y, _3186.x * _2409)) + _3186.w;
                            _3199 = !((fma(_2411, _3167.z, fma(_2410, _3167.y, _3167.x * _2409)) + _3167.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3199)
                            {
                                float _3226 = _3091.x - _2409;
                                float _3227 = _3091.y - _2410;
                                float _3228 = _3091.z - _2411;
                                float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                                float _3232 = inversesqrt(_3229);
                                float _3233 = _3232 * _3226;
                                float _3234 = _3232 * _3227;
                                float _3235 = _3232 * _3228;
                                float _3239 = 1.0 - (_3229 / (_3092 * _3092));
                                float _4344 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3244 = sqrt(_3229) * _3107.w;
                                float _3246 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                                float _3247 = _3246 * _3246;
                                float _3250 = ((1.0 - _3247) * dot(vec3(_3233, _3234, _3235), vec3(_616, _619, _622))) + _3247;
                                float _3253 = _3244 * _3244;
                                float _3257 = (fma(_2411, _3135.z, fma(_2410, _3135.y, _3135.x * _2409)) + _3135.w) / _3198;
                                float _3258 = (fma(_2411, _3151.z, fma(_2410, _3151.y, _3151.x * _2409)) + _3151.w) / _3198;
                                float _3262 = 1.0 - dot(vec2(_3257, _3258), vec2(_3257, _3258));
                                float _4360 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3264 = _3263 * (((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3240) / ((_3253 * 0.699999988079071044921875) + 1.0));
                                float _3276 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                                float _3277 = 1.0 - _691;
                                float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                                float _3285 = _3284 * _3284;
                                float _3286 = _3285 * _3285;
                                float _3287 = _3233 - _2703;
                                float _3288 = _3234 - _2704;
                                float _3289 = _3235 - _2705;
                                float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                                float _3297 = dot(vec3(_616, _619, _622), vec3((-0.0) - _2703, (-0.0) - _2704, (-0.0) - _2705));
                                float _4371 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3301 = dot(vec3(_616, _619, _622), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                                float _4382 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3304 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                                float _3309 = _3246 * _3285;
                                float _3310 = _3309 * _3309;
                                float _3316 = ((1.0 - _3310) * dot(vec3(_616, _619, _622), vec3(_3233, _3234, _3235))) + _3310;
                                float _4393 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3318 = 1.0 - _3285;
                                float _3328 = (0.5 / (((_3317 * ((_3300 * _3318) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3285) * _3300))) * _3317;
                                float _4404 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3338 = (_3263 * _3240) * (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3308 * _3308) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3264 * _3107.y;
                                frontier_phi_83_pred_1 = _3264 * _3107.x;
                                frontier_phi_83_pred_2 = _3338 * _3119.z;
                                frontier_phi_83_pred_3 = _3338 * _3119.y;
                                frontier_phi_83_pred_4 = _3338 * _3119.x;
                                frontier_phi_83_pred_5 = _3264 * _3107.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3346 = frontier_phi_83_pred;
                            _3345 = frontier_phi_83_pred_1;
                            _3344 = frontier_phi_83_pred_2;
                            _3343 = frontier_phi_83_pred_3;
                            _3342 = frontier_phi_83_pred_4;
                            _3347 = frontier_phi_83_pred_5;
                            _3049 = _3345 + _3062;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            _3046 = _3342 + _3059;
                            _3047 = _3343 + _3060;
                            _3048 = _3344 + _3061;
                            if (_3066 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3066;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3051;
                        frontier_phi_77_pred_1 = _3050;
                        frontier_phi_77_pred_2 = _3049;
                        frontier_phi_77_pred_3 = _3048;
                        frontier_phi_77_pred_4 = _3047;
                        frontier_phi_77_pred_5 = _3046;
                    }
                    _2688 = frontier_phi_77_pred;
                    _2686 = frontier_phi_77_pred_1;
                    _2684 = frontier_phi_77_pred_2;
                    _2682 = frontier_phi_77_pred_3;
                    _2680 = frontier_phi_77_pred_4;
                    _2678 = frontier_phi_77_pred_5;
                    uint _2844 = _2843 + 1u;
                    if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2837 = _2678;
                        _2838 = _2680;
                        _2839 = _2682;
                        _2840 = _2684;
                        _2841 = _2686;
                        _2842 = _2688;
                        _2843 = _2844;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2682;
                frontier_phi_58_59_ladder_1 = _2688;
                frontier_phi_58_59_ladder_2 = _2686;
                frontier_phi_58_59_ladder_3 = _2684;
                frontier_phi_58_59_ladder_4 = _2680;
                frontier_phi_58_59_ladder_5 = _2678;
            }
            else
            {
                frontier_phi_58_59_ladder = _2560;
                frontier_phi_58_59_ladder_1 = _2566;
                frontier_phi_58_59_ladder_2 = _2564;
                frontier_phi_58_59_ladder_3 = _2562;
                frontier_phi_58_59_ladder_4 = _2558;
                frontier_phi_58_59_ladder_5 = _2556;
            }
            _2677 = frontier_phi_58_59_ladder_5;
            _2679 = frontier_phi_58_59_ladder_4;
            _2681 = frontier_phi_58_59_ladder;
            _2683 = frontier_phi_58_59_ladder_3;
            _2685 = frontier_phi_58_59_ladder_2;
            _2687 = frontier_phi_58_59_ladder_1;
        }
        float _2692 = isnan(1.0) ? _675 : (isnan(_675) ? 1.0 : min(_675, 1.0));
        _2468 = (_2692 * _2683) + _1901;
        _2470 = (_2692 * _2685) + _1903;
        _2472 = (_2692 * _2687) + _1905;
        _2474 = ((_2677 * _660) * _2692) + _2249;
        _2476 = ((_2679 * _662) * _2692) + _2251;
        _2478 = ((_2681 * _663) * _2692) + _2253;
    }
    else
    {
        _2468 = _1901;
        _2470 = _1903;
        _2472 = _1905;
        _2474 = _2249;
        _2476 = _2251;
        _2478 = _2253;
    }
    float _4420 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4431 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4442 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2495 = ((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2468 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _675))) + ((_2474 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2496 = ((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2470 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _675))) + ((_2476 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2497 = ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2472 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _675))) + ((_2478 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    uint _2498 = _635 + 6u;
    float _2506 = _597 / cbSceneParam._m0[86u].x;
    float _2507 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2521 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2506, _2507, (log2((isnan(cbSceneParam._m0[77u].w) ? _519 : (isnan(_519) ? cbSceneParam._m0[77u].w : min(_519, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2523 = _2521.x;
    float _2524 = _2521.y;
    float _2525 = _2521.z;
    float _2526 = _2521.w;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_519 > cbSceneParam._m0[78u].w)
    {
        float _2581 = isnan(_519) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _519 : min(cbSceneParam._m0[80u].w, _519));
        float _2582 = _2581 / _519;
        float _2593 = _2582 * _570;
        float _2594 = _571 * _2582;
        float _2595 = (-0.0) - _2594;
        float _2597 = _2582 * _572;
        float _2599 = (cbSceneParam._m0[77u].w * _2595) / _2581;
        float _2600 = _2599 + cbSceneParam._m0[79u].w;
        float _2601 = cbSceneParam._m0[79u].w - _2594;
        float _2607 = sqrt(((_2593 * _2593) + (_2594 * _2594)) + (_2597 * _2597));
        float _2610 = (1.0 - (cbSceneParam._m0[77u].w / _2581)) * _2607;
        float _2615 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2617 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2595 - _2599) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2600 > 0.0) ? exp2(_2615 * _2600) : (2.0 - exp2(_2617 * _2600))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2610;
        }
        else
        {
            float _2738 = 1.0 / cbSceneParam._m0[80u].x;
            float _2739 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : max(_2600, _2601));
            float _2740 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : min(_2600, _2601));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            _2794 = ((abs(_2607 / _2595) * cbSceneParam._m0[80u].y) * ((((_2749 - _2750) * 2.0) - ((exp2(_2615 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0)))) - exp2(_2615 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0))))) * _2738)) - ((exp2(_2617 * _2749) - exp2(_2617 * _2750)) * _2738))) + (_2610 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2506, _2507, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2526);
        _2619 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2523;
        _2621 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2524;
        _2623 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2525;
        _2625 = _2805 * _2526;
    }
    else
    {
        _2619 = _2523;
        _2621 = _2524;
        _2623 = _2525;
        _2625 = _2526;
    }
    bool _2832;
    vec4 _2635;
    vec4 _2657;
    float _2659;
    float _2663;
    float _2664;
    float _2665;
    float _2666;
    bool _2676;
    for (;;)
    {
        _2635 = cbMatDynParam._m0[0u];
        float _2637 = roundEven(_2635.y);
        bool _2638 = _2637 == 3.0;
        float _2639 = log2(_2625);
        float _2646 = exp2(_2639 * cbSceneParam._m0[78u].x) * _2495;
        float _2647 = exp2(_2639 * cbSceneParam._m0[78u].y) * _2496;
        float _2648 = exp2(_2639 * cbSceneParam._m0[78u].z) * _2497;
        float _2655 = _586 + (-0.5);
        _2657 = cbMtdParam._m0[1u];
        _2659 = _2657.y * _2655;
        float _2662 = (_2637 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2663 = _2662 * (_2638 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2619)));
        _2664 = _2662 * (_2638 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2621)));
        _2665 = _2662 * (_2638 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2623)));
        _2666 = _2655 * 0.999000012874603271484375;
        _2676 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2676)
        {
            if ((cbInstanceData._m0[_635 + 7u].x + _2666) < 0.5)
            {
                _2832 = true;
                break;
            }
        }
        uint _2773 = _636 + uint(_2635.w);
        if ((cbInstanceData._m0[_2773].w < 1.0) && ((cbInstanceData._m0[_2773].w + _2666) < 0.5))
        {
            _2832 = true;
            break;
        }
        if ((_2659 + 1.0) < _2657.x)
        {
            _2832 = true;
            break;
        }
        _2832 = false;
        break;
    }
    float _3037;
    if (_2832)
    {
        discard_state = true;
        _3037 = 0.0;
    }
    else
    {
        _3037 = cbInstanceData._m0[_2498].w;
    }
    SV_Target.x = _2663;
    SV_Target.y = _2664;
    SV_Target.z = _2665;
    SV_Target.w = _3037;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2498].w;
    discard_exit();
}


