#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1032;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _249 = _243.x * cbMtdParam._m0[10u].x;
    float _250 = _243.y * cbMtdParam._m0[10u].y;
    float _251 = _243.z * cbMtdParam._m0[10u].z;
    float _256 = 1.0 - cbMtdParam._m0[13u].z;
    float _3365 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _258 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    vec4 _276 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _284 = ((_249 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _276.x;
    float _287 = ((_250 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _276.y;
    float _290 = ((_251 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _276.z;
    float _297 = ((_249 - _284) * _258) + _284;
    float _298 = ((_250 - _287) * _258) + _287;
    float _299 = ((_251 - _290) * _258) + _290;
    vec4 _317 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _347 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3376 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _355 = (_348 * ((_317.x * cbMtdParam._m0[11u].x) - _297)) + _297;
    float _356 = (_348 * ((_317.y * cbMtdParam._m0[11u].y) - _298)) + _298;
    float _357 = (_348 * ((_317.z * cbMtdParam._m0[11u].z) - _299)) + _299;
    vec4 _370 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _372 = _370.x;
    float _374 = _372 - (_372 * TEXCOORD_5.x);
    vec4 _388 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _392 = _388.z;
    vec4 _405 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = cbMtdParam._m0[13u].w * _392;
    float _422 = (((((_392 * 2.0) * _405.z) * cbMtdParam._m0[14u].x) - _419) * cbMtdParam._m0[13u].y) + _419;
    vec4 _435 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _450 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_435.z * cbMtdParam._m0[14u].y) - _422)) + _422;
    float _457 = (_388.x * 2.0) + (-1.0);
    float _458 = (_388.y * 2.0) + (-1.0);
    float _459 = dot(vec2(_457, _458), vec2(_457, _458));
    float _3387 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _464 = sqrt(1.0 - (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))));
    float _475 = ((cbMtdParam._m0[13u].x * ((_405.x * 2.0) + (-1.0))) + _457) + ((((_435.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _476 = ((cbMtdParam._m0[13u].x * ((_405.y * 2.0) + (-1.0))) + _458) + ((((_435.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _479 = fma(_464, _208 * NORMAL.x, fma(_476, _215 * TANGENT.x, (_201 * _193) * _475));
    float _482 = fma(_464, _208 * NORMAL.y, fma(_476, _215 * TANGENT.y, (_201 * _194) * _475));
    float _485 = fma(_464, _208 * NORMAL.z, fma(_476, _215 * TANGENT.z, (_201 * _195) * _475));
    float _489 = inversesqrt(dot(vec3(_479, _482, _485), vec3(_479, _482, _485)));
    float _490 = _489 * _479;
    float _491 = _489 * _482;
    float _492 = _489 * _485;
    float _3398 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _493 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3420 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3431 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3442 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _497 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _513 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _564 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _554);
    float _565 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _554);
    float _566 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _554);
    float _570 = inversesqrt(dot(vec3(_564, _565, _566), vec3(_564, _565, _566)));
    float _571 = _564 * _570;
    float _572 = _565 * _570;
    float _573 = _566 * _570;
    float _579 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _580 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_492, cbSceneParam._m0[5u].z, fma(_491, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _490));
    float _601 = fma(_492, cbSceneParam._m0[6u].z, fma(_491, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _490));
    float _604 = fma(_492, cbSceneParam._m0[7u].z, fma(_491, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _490));
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _619 = (_617 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3453 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _631 = 1.0 - _497;
    float _632 = _628 * _631;
    float _633 = _629 * _631;
    float _634 = _630 * _631;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _497;
    float _640 = (_629 + (-0.039999999105930328369140625)) * _497;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _497;
    float _642 = _639 + 0.039999999105930328369140625;
    float _644 = _640 + 0.039999999105930328369140625;
    float _645 = _641 + 0.039999999105930328369140625;
    vec4 _654 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _579, cbSceneParam._m0[86u].y * _580));
    float _657 = _654.x * TEXCOORD_5.w;
    float _658 = dot(vec3(_490, _491, _492), vec3(_571, _572, _573));
    float _661 = _658 * 2.0;
    float _665 = (_661 * _490) - _571;
    float _666 = (_661 * _491) - _572;
    float _667 = (_661 * _492) - _573;
    float _671 = abs(dot(vec3(_571, _572, _573), vec3(_490, _491, _492)));
    float _3486 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _673 = sqrt(_493);
    float _686 = exp2((_673 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_673 * 3.0));
    float _692 = (1.0 - _686) * ((_673 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _693 = _686 * _673;
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1031;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _756 = fma(_729, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721));
        float _760 = fma(_729, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721));
        float _764 = fma(_729, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721));
        float _789 = _721 + _490;
        float _790 = _725 + _491;
        float _791 = _729 + _492;
        float _801 = fma(_791, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789)) - _756;
        float _802 = fma(_791, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789)) - _760;
        float _803 = fma(_791, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789)) - _764;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_756 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_760 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[34u].z) + ((((((_764 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _859 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_825.x + (-0.5));
        float _861 = _859 * (_825.y + (-0.5));
        float _862 = _859 * (_825.z + (-0.5));
        float _869 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_832.x + (-0.5));
        float _871 = _869 * (_832.y + (-0.5));
        float _872 = _869 * (_832.z + (-0.5));
        float _879 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_839.x + (-0.5));
        float _881 = _879 * (_839.y + (-0.5));
        float _882 = _879 * (_839.z + (-0.5));
        float _889 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_846.x + (-0.5));
        float _891 = _889 * (_846.y + (-0.5));
        float _892 = _889 * (_846.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _913 = (dot(vec3(_490, _491, _492), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _923 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3534 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_925 + 1.0))) + _930) * _893;
        float _940 = _861 * 0.5;
        float _941 = _871 * 0.5;
        float _942 = _881 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_490, _491, _492), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3567 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_967 + 1.0))) + _972) * _894;
        float _982 = _862 * 0.5;
        float _983 = _872 * 0.5;
        float _984 = _882 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_490, _491, _492), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3600 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1009 + 1.0))) + _1014) * _895;
        _1031 = _862;
        _1033 = _861;
        _1034 = _860;
        _1035 = _872;
        _1036 = _871;
        _1037 = _870;
        _1038 = _882;
        _1039 = _881;
        _1040 = _880;
        _1041 = _895;
        _1042 = _894;
        _1043 = _893;
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _1032;
        _1033 = _1032;
        _1034 = _1032;
        _1035 = _1032;
        _1036 = _1032;
        _1037 = _1032;
        _1038 = _1032;
        _1039 = _1032;
        _1040 = _1032;
        _1041 = _1032;
        _1042 = _1032;
        _1043 = _1032;
        _1044 = 0.0;
        _1045 = 0.0;
        _1046 = 0.0;
    }
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1072 = fma(_729, cbModelParam._m0[30u].z, fma(_725, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _721));
        float _1076 = fma(_729, cbModelParam._m0[31u].z, fma(_725, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _721));
        float _1080 = fma(_729, cbModelParam._m0[32u].z, fma(_725, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _721));
        float _1103 = _721 + _490;
        float _1104 = _725 + _491;
        float _1105 = _729 + _492;
        float _1115 = fma(_1105, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103)) - _1072;
        float _1116 = fma(_1105, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103)) - _1076;
        float _1117 = fma(_1105, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103)) - _1080;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1072 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1076 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[35u].z) + ((((((_1080 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1171 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1138.x + (-0.5));
        float _1173 = _1171 * (_1138.y + (-0.5));
        float _1174 = _1171 * (_1138.z + (-0.5));
        float _1181 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1145.x + (-0.5));
        float _1183 = _1181 * (_1145.y + (-0.5));
        float _1184 = _1181 * (_1145.z + (-0.5));
        float _1191 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1152.x + (-0.5));
        float _1193 = _1191 * (_1152.y + (-0.5));
        float _1194 = _1191 * (_1152.z + (-0.5));
        float _1201 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1159.x + (-0.5));
        float _1203 = _1201 * (_1159.y + (-0.5));
        float _1204 = _1201 * (_1159.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_490, _491, _492), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3663 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1235 + 1.0))) + _1240) * _1205;
        float _1250 = _1173 * 0.5;
        float _1251 = _1183 * 0.5;
        float _1252 = _1193 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_490, _491, _492), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3696 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1277 + 1.0))) + _1282) * _1206;
        float _1292 = _1174 * 0.5;
        float _1293 = _1184 * 0.5;
        float _1294 = _1194 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_490, _491, _492), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3729 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1319 + 1.0))) + _1324) * _1207;
        _1341 = _1174;
        _1342 = _1173;
        _1343 = _1172;
        _1344 = _1184;
        _1345 = _1183;
        _1346 = _1182;
        _1347 = _1194;
        _1348 = _1193;
        _1349 = _1192;
        _1350 = _1207;
        _1351 = _1206;
        _1352 = _1205;
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1032;
        _1342 = _1032;
        _1343 = _1032;
        _1344 = _1032;
        _1345 = _1032;
        _1346 = _1032;
        _1347 = _1032;
        _1348 = _1032;
        _1349 = _1032;
        _1350 = _1032;
        _1351 = _1032;
        _1352 = _1032;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1044)) + _1044;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1045)) + _1045;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1388 = fma(_1367, cbSceneParam._m0[89u].z, fma(_1366, cbSceneParam._m0[89u].y, _1365 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1367, cbSceneParam._m0[90u].z, fma(_1366, cbSceneParam._m0[90u].y, _1365 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1367, cbSceneParam._m0[91u].z, fma(_1366, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1365));
    float _1409 = _665 * 0.5;
    float _1410 = _666 * 0.5;
    float _1411 = _667 * 0.5;
    float _1412 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1415 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1418 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1452;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1425 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1031, _1035, _1038, _1041));
        float _1429 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1433 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1440 = dot(vec4(cbModelParam._m0[39u]), vec4(_1409, _1410, _1411, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1463;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1454 = dot(vec4(cbModelParam._m0[40u]), vec4(_1409, _1410, _1411, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1467 = (_1463 * cbModelParam._m0[1u].x) + (_1452 * (1.0 - cbModelParam._m0[1u].x));
    float _1477 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _493);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1477 : min(cbModelParam._m0[25u].z, _1477));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_729, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_729, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_729, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_667, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665));
        float _1539 = fma(_667, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665));
        float _1542 = fma(_667, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1570 = frontier_phi_14_12_ladder;
        }
        float _1776;
        if (_1539 > 0.0)
        {
            _1776 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1776 = frontier_phi_23_19_ladder;
        }
        float _2030;
        if (_1542 > 0.0)
        {
            _2030 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2030 = frontier_phi_35_30_ladder;
        }
        float _2032 = isnan(_1776) ? _1570 : (isnan(_1570) ? _1776 : min(_1570, _1776));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1536) + _1525;
        float _2038 = (_2033 * _1539) + _1529;
        float _2039 = (_2033 * _1542) + _1533;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1478);
            frontier_phi_13_35_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_13_35_ladder_2;
        _1560 = frontier_phi_13_35_ladder_1;
        _1562 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_665, _666, _667), _1478);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _493);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1624 = fma(_729, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721)) + cbModelParam._m0[21u].w;
        float _1628 = fma(_729, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721)) + cbModelParam._m0[22u].w;
        float _1632 = fma(_729, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721)) + cbModelParam._m0[23u].w;
        float _1635 = fma(_667, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665));
        float _1638 = fma(_667, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665));
        float _1641 = fma(_667, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665));
        float _1781;
        if (_1635 > 0.0)
        {
            _1781 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1781 = frontier_phi_25_21_ladder;
        }
        float _2057;
        if (_1638 > 0.0)
        {
            _2057 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2057 = frontier_phi_37_32_ladder;
        }
        float _2270;
        if (_1641 > 0.0)
        {
            _2270 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2270 = frontier_phi_46_43_ladder;
        }
        float _2272 = isnan(_2057) ? _1781 : (isnan(_1781) ? _2057 : min(_1781, _2057));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1635) + _1624;
        float _2278 = (_2273 * _1638) + _1628;
        float _2279 = (_2273 * _1641) + _1632;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_22_46_ladder = _2478.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2478.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2478.x * cbModelParam._m0[1u].z;
        }
        _1660 = frontier_phi_22_46_ladder_2;
        _1662 = frontier_phi_22_46_ladder_1;
        _1664 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_665, _666, _667), _1567);
        _1660 = _1644.x * cbModelParam._m0[1u].z;
        _1662 = _1644.y * cbModelParam._m0[1u].z;
        _1664 = _1644.z * cbModelParam._m0[1u].z;
    }
    float _1677 = (((_692 * _642) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1660 - _1558)) + _1558);
    float _1679 = (((_692 * _644) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1662 - _1560)) + _1560);
    float _1681 = (((_692 * _645) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1677 * cbSceneParam._m0[91u].x));
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1710 = _657 + (-1.0);
    float _1715 = (cbLight._m0[_1703].x * _1710) + 1.0;
    float _1716 = (cbLight._m0[_1703].y * _1710) + 1.0;
    float _1717 = (cbLight._m0[_1703].z * _1710) + 1.0;
    float _1718 = (cbLight._m0[_1703].w * _1710) + 1.0;
    uint _1719 = _1702 + 5u;
    float _1725 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1729 = _1702 + 4u;
    float _1735 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1739 = _1702 | 1u;
    float _1750 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_490, _491, _492));
    float _1753 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_490, _491, _492));
    float _3865 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _3876 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1758 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.3183098733425140380859375;
    float _1760 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.3183098733425140380859375;
    float _1767 = ((cbLight._m0[_1719].x * _1725) * _1760) + ((cbLight._m0[_1729].x * _1735) * _1758);
    float _1768 = ((_1725 * cbLight._m0[_1719].y) * _1760) + ((_1735 * cbLight._m0[_1729].y) * _1758);
    float _1769 = ((_1725 * cbLight._m0[_1719].z) * _1760) + ((_1735 * cbLight._m0[_1729].z) * _1758);
    uvec4 _1773 = floatBitsToUint(cbLight._m0[_1702 + 12u]);
    bool _1775 = _1773.x == 0u;
    float _1786;
    float _1788;
    float _1790;
    if (_1775)
    {
        _1786 = _1767;
        _1788 = _1768;
        _1790 = _1769;
    }
    else
    {
        uint _1794 = _1702 + 6u;
        float _1810 = (dot(vec3(cbLight._m0[_1702 + 2u].xyz), vec3(_490, _491, _492)) * 0.5) + 0.5;
        float _1811 = _1810 * _1810;
        float _3887 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1813 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1786 = (((cbLight._m0[_1794].x * 0.3183098733425140380859375) * _1812) * _1813) + _1767;
        _1788 = (((cbLight._m0[_1794].y * 0.3183098733425140380859375) * _1812) * _1813) + _1768;
        _1790 = (((cbLight._m0[_1794].z * 0.3183098733425140380859375) * _1812) * _1813) + _1769;
    }
    bool _1793 = _1773.y == 0u;
    float _1831;
    float _1833;
    float _1835;
    if (_1793)
    {
        _1831 = _1786;
        _1833 = _1788;
        _1835 = _1790;
    }
    else
    {
        uint _2001 = _1702 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1702 + 3u].xyz), vec3(_490, _491, _492)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _3903 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _2020 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1831 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1786;
        _1833 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1788;
        _1835 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1790;
    }
    uint _1838 = _1702 + 8u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _493) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1702].x + _571;
    float _1854 = cbLight._m0[_1702].y + _572;
    float _1855 = cbLight._m0[_1702].z + _573;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1702].xyz));
    float _3919 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _1867 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1868 = dot(vec3(_490, _491, _492), vec3(_1860, _1861, _1862));
    float _3941 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1860, _1861, _1862));
    float _3952 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1852 * _1852;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1888 = exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0);
    float _1889 = 0.959999978542327880859375 - _639;
    float _1891 = 0.959999978542327880859375 - _640;
    float _1892 = 0.959999978542327880859375 - _641;
    float _1899 = 1.0 - _1852;
    float _1910 = (0.5 / (((_1867 * ((_1866 * _1899) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1899) + _1852) * _1866))) * _1866;
    float _3963 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    uint _1923 = _1702 + 9u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _493) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1739].x + _571;
    float _1937 = cbLight._m0[_1739].y + _572;
    float _1938 = cbLight._m0[_1739].z + _573;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1739].xyz));
    float _3974 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1950 = dot(vec3(_490, _491, _492), vec3(_1943, _1944, _1945));
    float _3985 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1943, _1944, _1945));
    float _3996 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1935 * _1935;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
    float _1976 = 1.0 - _1935;
    float _1986 = (0.5 / (((_1867 * ((_1949 * _1976) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1976) + _1935) * _1949))) * _1949;
    float _4007 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    float _1998 = (((((_1969 * _1889) + _642) * cbLight._m0[_1923].x) * _1988) * _1725) + (((((_1888 * _1889) + _642) * cbLight._m0[_1838].x) * _1912) * _1735);
    float _1999 = (((((_1969 * _1891) + _644) * cbLight._m0[_1923].y) * _1988) * _1725) + (((((_1888 * _1891) + _644) * cbLight._m0[_1838].y) * _1912) * _1735);
    float _2000 = (((((_1969 * _1892) + _645) * cbLight._m0[_1923].z) * _1988) * _1725) + (((((_1888 * _1892) + _645) * cbLight._m0[_1838].z) * _1912) * _1735);
    float _2062;
    float _2064;
    float _2066;
    if (_1775)
    {
        _2062 = _1998;
        _2064 = _1999;
        _2066 = _2000;
    }
    else
    {
        uint _2068 = _1702 + 2u;
        uint _2072 = _1702 + 10u;
        float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _493) * 0.949999988079071044921875);
        float _2087 = _2086 * _2086;
        float _2088 = cbLight._m0[_2068].x + _571;
        float _2089 = cbLight._m0[_2068].y + _572;
        float _2090 = cbLight._m0[_2068].z + _573;
        float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
        float _2095 = _2094 * _2088;
        float _2096 = _2094 * _2089;
        float _2097 = _2094 * _2090;
        float _2098 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_2068].xyz));
        float _4018 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2102 = dot(vec3(_490, _491, _492), vec3(_2095, _2096, _2097));
        float _4029 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2106 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2095, _2096, _2097));
        float _4040 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2110 = _2087 * _2087;
        float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
        float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
        float _2128 = 1.0 - _2087;
        float _2138 = (0.5 / (((_1867 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2128) + _2087) * _2101))) * _2101;
        float _4051 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2062 = (((((_2121 * _1889) + _642) * cbLight._m0[_2072].x) * _2140) * _2141) + _1998;
        _2064 = (((((_2121 * _1891) + _644) * cbLight._m0[_2072].y) * _2140) * _2141) + _1999;
        _2066 = (((((_2121 * _1892) + _645) * cbLight._m0[_2072].z) * _2140) * _2141) + _2000;
    }
    float _2176;
    float _2178;
    float _2180;
    if (_1793)
    {
        _2176 = _2062;
        _2178 = _2064;
        _2180 = _2066;
    }
    else
    {
        uint _2187 = _1702 + 3u;
        uint _2191 = _1702 + 11u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _493) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _571;
        float _2208 = cbLight._m0[_2187].y + _572;
        float _2209 = cbLight._m0[_2187].z + _573;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_2187].xyz));
        float _4067 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2221 = dot(vec3(_490, _491, _492), vec3(_2214, _2215, _2216));
        float _4078 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4089 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * 5.0);
        float _2247 = 1.0 - _2206;
        float _2257 = (0.5 / (((_1867 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2247) + _2206) * _2220))) * _2220;
        float _4100 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2176 = (((((_2240 * _1889) + _642) * cbLight._m0[_2191].x) * _2259) * _2260) + _2062;
        _2178 = (((((_2240 * _1891) + _644) * cbLight._m0[_2191].y) * _2259) * _2260) + _2064;
        _2180 = (((((_2240 * _1892) + _645) * cbLight._m0[_2191].z) * _2259) * _2260) + _2066;
    }
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_1700.y == 0u)
    {
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2335;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2335;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2335;
        uvec4 _2350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2351 = _2350.x;
        uint _2362 = uint((float(_2350.y) * floor(float(uint(cbSceneParam._m0[85u].y * _580) / _2351))) + floor(float(uint(cbSceneParam._m0[85u].x * _579) / _2351)));
        float _2372 = (log2(_2338 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2373 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        uint _2376 = uint(isnan(14.0) ? _2373 : (isnan(_2373) ? 14.0 : min(_2373, 14.0)));
        uvec4 _2381 = texelFetch(g_lightClusterGridBuffer, int(((_2376 << 2u) + (_2362 << 6u)) >> 2u));
        uint _2382 = _2381.x;
        uint _2383 = _2350.z;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        if (((((1u << ((_2383 >> 4u) & 15u)) + 4294967295u) & _2382) == 0u) || ((_2383 & 240u) == 0u))
        {
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
        }
        else
        {
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            uint _2634 = 0u;
            uint _2643;
            bool _2644;
            for (;;)
            {
                _2643 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2634 << 2u)) >> 2u)).x;
                _2644 = _2643 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2644)
                {
                    frontier_phi_61_pred = _2628;
                    frontier_phi_61_pred_1 = _2633;
                    frontier_phi_61_pred_2 = _2632;
                    frontier_phi_61_pred_3 = _2631;
                    frontier_phi_61_pred_4 = _2630;
                    frontier_phi_61_pred_5 = _2629;
                }
                else
                {
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    uint _2758;
                    _2752 = _2628;
                    _2753 = _2629;
                    _2754 = _2630;
                    _2755 = _2631;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2643;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    for (;;)
                    {
                        uint _2762 = uint(findLSB(_2758)) + (_2634 << 5u);
                        uint _2759 = (_2758 + 4294967295u) & _2758;
                        uint _2764 = _2762 * 48u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2784 = (_2762 * 48u) + 4u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2803 = (_2762 * 48u) + 8u;
                        vec3 _2814 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x));
                        float _2818 = _2778.x - _2336;
                        float _2819 = _2778.y - _2337;
                        float _2820 = _2778.z - _2338;
                        float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                        float _2824 = inversesqrt(_2821);
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2828 = dot(vec3(_598, _601, _604), vec3(_2825, _2826, _2827));
                        float _2833 = 1.0 - (_2821 * _2778.w);
                        float _4126 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2835 = sqrt(_2821) * _2797.w;
                        float _2838 = 1.39999997615814208984375 / (_2835 + 1.39999997615814208984375);
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2828) + _2839;
                        float _2845 = _2835 * _2835;
                        float _2849 = ((isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))) * _2834) / ((_2845 * 0.699999988079071044921875) + 1.0);
                        float _2853 = (-0.0) - _2336;
                        float _2854 = (-0.0) - _2337;
                        float _2855 = (-0.0) - _2338;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2870 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2871 = 1.0 - _673;
                        float _2878 = sqrt(1.0 - ((1.0 - (_2871 * _2871)) * (1.0 - (_2870 * _2870))));
                        float _2879 = _2878 * _2878;
                        float _2880 = _2879 * _2879;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_598, _601, _604), vec3(_2860, _2861, _2862));
                        float _4142 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2895 = dot(vec3(_598, _601, _604), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4153 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2902 = ((_2898 * _2898) * (_2880 + (-1.0))) + 1.0;
                        float _2903 = _2838 * _2879;
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2828) + _2904;
                        float _4164 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2909 = 1.0 - _2879;
                        float _2919 = (0.5 / (((_2908 * ((_2894 * _2909) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2908 * _2909) + _2879) * _2894))) * _2908;
                        float _4175 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2930 = (((_2880 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_2902 * _2902) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2834;
                        _2687 = (_2849 * _2797.x) + _2755;
                        _2688 = (_2849 * _2797.y) + _2756;
                        _2689 = (_2849 * _2797.z) + _2757;
                        _2684 = (_2930 * _2814.x) + _2752;
                        _2685 = (_2930 * _2814.y) + _2753;
                        _2686 = (_2930 * _2814.z) + _2754;
                        if (_2759 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2752 = _2684;
                            _2753 = _2685;
                            _2754 = _2686;
                            _2755 = _2687;
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2759;
                        }
                    }
                    frontier_phi_61_pred = _2684;
                    frontier_phi_61_pred_1 = _2689;
                    frontier_phi_61_pred_2 = _2688;
                    frontier_phi_61_pred_3 = _2687;
                    frontier_phi_61_pred_4 = _2686;
                    frontier_phi_61_pred_5 = _2685;
                }
                _2484 = frontier_phi_61_pred;
                _2494 = frontier_phi_61_pred_1;
                _2492 = frontier_phi_61_pred_2;
                _2490 = frontier_phi_61_pred_3;
                _2488 = frontier_phi_61_pred_4;
                _2486 = frontier_phi_61_pred_5;
                uint _2635 = _2634 + 1u;
                if (_2635 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2628 = _2484;
                    _2629 = _2486;
                    _2630 = _2488;
                    _2631 = _2490;
                    _2632 = _2492;
                    _2633 = _2494;
                    _2634 = _2635;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
        }
        uvec4 _2497 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2498 = _2497.z;
        uint _2500 = (_2498 >> 8u) & 15u;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        if (((4294967295u << _2500) & _2382) == 0u)
        {
            _2596 = _2483;
            _2598 = _2485;
            _2600 = _2487;
            _2602 = _2489;
            _2604 = _2491;
            _2606 = _2493;
        }
        else
        {
            float _2621 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
            float _2622 = _2621 * _2336;
            float _2623 = _2621 * _2337;
            float _2624 = _2621 * _2338;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2500 < ((_2498 >> 12u) & 15u))
            {
                float _2597;
                float _2599;
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2735 = _2483;
                float _2736 = _2485;
                float _2737 = _2487;
                float _2738 = _2489;
                float _2739 = _2491;
                float _2740 = _2493;
                uint _2741 = _2500;
                uint _2750;
                bool _2751;
                for (;;)
                {
                    _2750 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                    _2751 = _2750 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2751)
                    {
                        frontier_phi_67_pred = _2738;
                        frontier_phi_67_pred_1 = _2739;
                        frontier_phi_67_pred_2 = _2740;
                        frontier_phi_67_pred_3 = _2737;
                        frontier_phi_67_pred_4 = _2736;
                        frontier_phi_67_pred_5 = _2735;
                    }
                    else
                    {
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _2948 = _2735;
                        float _2949 = _2736;
                        float _2950 = _2737;
                        float _2951 = _2738;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        uint _2954 = _2750;
                        uint _2955;
                        vec4 _2980;
                        float _2981;
                        vec4 _2996;
                        vec3 _3008;
                        vec4 _3024;
                        vec4 _3040;
                        float _3087;
                        bool _3088;
                        for (;;)
                        {
                            uint _2965 = ((_2741 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2954));
                            _2955 = (_2954 + 4294967295u) & _2954;
                            uint _2967 = _2965 * 40u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            _2981 = _2980.w;
                            uint _2983 = (_2965 * 40u) + 4u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2998 = (_2965 * 40u) + 8u;
                            _3008 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x));
                            uint _3011 = (_2965 * 40u) + 16u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            uint _3027 = (_2965 * 40u) + 20u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3043 = (_2965 * 40u) + 24u;
                            vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3062 = (_2965 * 40u) + 28u;
                            vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            _3087 = fma(_2338, _3075.z, fma(_2337, _3075.y, _3075.x * _2336)) + _3075.w;
                            _3088 = !((fma(_2338, _3056.z, fma(_2337, _3056.y, _3056.x * _2336)) + _3056.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3088)
                            {
                                float _3115 = _2980.x - _2336;
                                float _3116 = _2980.y - _2337;
                                float _3117 = _2980.z - _2338;
                                float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                                float _3121 = inversesqrt(_3118);
                                float _3122 = _3121 * _3115;
                                float _3123 = _3121 * _3116;
                                float _3124 = _3121 * _3117;
                                float _3128 = 1.0 - (_3118 / (_2981 * _2981));
                                float _4186 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3133 = sqrt(_3118) * _2996.w;
                                float _3135 = 1.39999997615814208984375 / (_3133 + 1.39999997615814208984375);
                                float _3136 = _3135 * _3135;
                                float _3139 = ((1.0 - _3136) * dot(vec3(_3122, _3123, _3124), vec3(_598, _601, _604))) + _3136;
                                float _3142 = _3133 * _3133;
                                float _3146 = (fma(_2338, _3024.z, fma(_2337, _3024.y, _3024.x * _2336)) + _3024.w) / _3087;
                                float _3147 = (fma(_2338, _3040.z, fma(_2337, _3040.y, _3040.x * _2336)) + _3040.w) / _3087;
                                float _3151 = 1.0 - dot(vec2(_3146, _3147), vec2(_3146, _3147));
                                float _4202 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3153 = _3152 * (((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3129) / ((_3142 * 0.699999988079071044921875) + 1.0));
                                float _3165 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                                float _3166 = 1.0 - _673;
                                float _3173 = sqrt(1.0 - ((1.0 - (_3166 * _3166)) * (1.0 - (_3165 * _3165))));
                                float _3174 = _3173 * _3173;
                                float _3175 = _3174 * _3174;
                                float _3176 = _3122 - _2622;
                                float _3177 = _3123 - _2623;
                                float _3178 = _3124 - _2624;
                                float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                                float _3186 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2622, (-0.0) - _2623, (-0.0) - _2624));
                                float _4213 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3189 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3190 = dot(vec3(_598, _601, _604), vec3(_3182 * _3176, _3182 * _3177, _3182 * _3178));
                                float _4224 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3193 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3197 = ((_3193 * _3193) * (_3175 + (-1.0))) + 1.0;
                                float _3198 = _3135 * _3174;
                                float _3199 = _3198 * _3198;
                                float _3205 = ((1.0 - _3199) * dot(vec3(_598, _601, _604), vec3(_3122, _3123, _3124))) + _3199;
                                float _4235 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3207 = 1.0 - _3174;
                                float _3217 = (0.5 / (((_3206 * ((_3189 * _3207) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3174) * _3189))) * _3206;
                                float _4246 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3227 = (_3152 * _3129) * (((_3175 * 3.1415927410125732421875) * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) / ((_3197 * _3197) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3227 * _3008.x;
                                frontier_phi_73_pred_1 = _3227 * _3008.y;
                                frontier_phi_73_pred_2 = _3153 * _2996.z;
                                frontier_phi_73_pred_3 = _3153 * _2996.y;
                                frontier_phi_73_pred_4 = _3153 * _2996.x;
                                frontier_phi_73_pred_5 = _3227 * _3008.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3231 = frontier_phi_73_pred;
                            _3232 = frontier_phi_73_pred_1;
                            _3236 = frontier_phi_73_pred_2;
                            _3235 = frontier_phi_73_pred_3;
                            _3234 = frontier_phi_73_pred_4;
                            _3233 = frontier_phi_73_pred_5;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            _2940 = _3236 + _2953;
                            _2935 = _3231 + _2948;
                            _2936 = _3232 + _2949;
                            _2937 = _3233 + _2950;
                            if (_2955 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2955;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2938;
                        frontier_phi_67_pred_1 = _2939;
                        frontier_phi_67_pred_2 = _2940;
                        frontier_phi_67_pred_3 = _2937;
                        frontier_phi_67_pred_4 = _2936;
                        frontier_phi_67_pred_5 = _2935;
                    }
                    _2603 = frontier_phi_67_pred;
                    _2605 = frontier_phi_67_pred_1;
                    _2607 = frontier_phi_67_pred_2;
                    _2601 = frontier_phi_67_pred_3;
                    _2599 = frontier_phi_67_pred_4;
                    _2597 = frontier_phi_67_pred_5;
                    uint _2742 = _2741 + 1u;
                    if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2735 = _2597;
                        _2736 = _2599;
                        _2737 = _2601;
                        _2738 = _2603;
                        _2739 = _2605;
                        _2740 = _2607;
                        _2741 = _2742;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2605;
                frontier_phi_55_56_ladder_1 = _2607;
                frontier_phi_55_56_ladder_2 = _2603;
                frontier_phi_55_56_ladder_3 = _2601;
                frontier_phi_55_56_ladder_4 = _2599;
                frontier_phi_55_56_ladder_5 = _2597;
            }
            else
            {
                frontier_phi_55_56_ladder = _2491;
                frontier_phi_55_56_ladder_1 = _2493;
                frontier_phi_55_56_ladder_2 = _2489;
                frontier_phi_55_56_ladder_3 = _2487;
                frontier_phi_55_56_ladder_4 = _2485;
                frontier_phi_55_56_ladder_5 = _2483;
            }
            _2596 = frontier_phi_55_56_ladder_5;
            _2598 = frontier_phi_55_56_ladder_4;
            _2600 = frontier_phi_55_56_ladder_3;
            _2602 = frontier_phi_55_56_ladder_2;
            _2604 = frontier_phi_55_56_ladder;
            _2606 = frontier_phi_55_56_ladder_1;
        }
        float _2611 = isnan(1.0) ? _657 : (isnan(_657) ? 1.0 : min(_657, 1.0));
        _2395 = (_2611 * _2602) + _1831;
        _2397 = (_2611 * _2604) + _1833;
        _2399 = (_2611 * _2606) + _1835;
        _2401 = ((_2596 * _642) * _2611) + _2176;
        _2403 = ((_2598 * _644) * _2611) + _2178;
        _2405 = ((_2600 * _645) * _2611) + _2180;
    }
    else
    {
        _2395 = _1831;
        _2397 = _1833;
        _2399 = _1835;
        _2401 = _2176;
        _2403 = _2178;
        _2405 = _2180;
    }
    float _4262 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4273 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4284 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    uint _2425 = _617 + 6u;
    float _2433 = _579 / cbSceneParam._m0[86u].x;
    float _2434 = _580 / cbSceneParam._m0[86u].y;
    vec4 _2448 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2433, _2434, (log2((isnan(cbSceneParam._m0[77u].w) ? _513 : (isnan(_513) ? cbSceneParam._m0[77u].w : min(_513, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2450 = _2448.x;
    float _2451 = _2448.y;
    float _2452 = _2448.z;
    float _2453 = _2448.w;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    if (_513 > cbSceneParam._m0[78u].w)
    {
        float _2508 = isnan(_513) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _513 : min(cbSceneParam._m0[80u].w, _513));
        float _2509 = _2508 / _513;
        float _2520 = _2509 * _564;
        float _2521 = _565 * _2509;
        float _2522 = (-0.0) - _2521;
        float _2524 = _2509 * _566;
        float _2526 = (cbSceneParam._m0[77u].w * _2522) / _2508;
        float _2527 = _2526 + cbSceneParam._m0[79u].w;
        float _2528 = cbSceneParam._m0[79u].w - _2521;
        float _2534 = sqrt(((_2520 * _2520) + (_2521 * _2521)) + (_2524 * _2524));
        float _2537 = (1.0 - (cbSceneParam._m0[77u].w / _2508)) * _2534;
        float _2542 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2544 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2697;
        if (abs((_2522 - _2526) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2697 = ((((_2527 > 0.0) ? exp2(_2542 * _2527) : (2.0 - exp2(_2544 * _2527))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2537;
        }
        else
        {
            float _2657 = 1.0 / cbSceneParam._m0[80u].x;
            float _2658 = isnan(_2528) ? _2527 : (isnan(_2527) ? _2528 : max(_2527, _2528));
            float _2659 = isnan(_2528) ? _2527 : (isnan(_2527) ? _2528 : min(_2527, _2528));
            float _2668 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : min(_2658, 0.0));
            float _2669 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : min(_2659, 0.0));
            _2697 = ((abs(_2534 / _2522) * cbSceneParam._m0[80u].y) * ((((_2668 - _2669) * 2.0) - ((exp2(_2542 * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0)))) - exp2(_2542 * (isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0))))) * _2657)) - ((exp2(_2544 * _2668) - exp2(_2544 * _2669)) * _2657))) + (_2537 * cbSceneParam._m0[80u].z);
        }
        vec4 _2699 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2433, _2434, 1.0), 0.0);
        float _2708 = exp2((_2697 * (-1.44269502162933349609375)) * (1.0 - _2699.w));
        float _2709 = log2(_2708);
        float _2725 = log2(_2453);
        _2546 = (exp2(_2725 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2709 * cbSceneParam._m0[78u].x)) * _2699.x) / cbSceneParam._m0[78u].x)) + _2450;
        _2548 = (exp2(_2725 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2709 * cbSceneParam._m0[78u].y)) * _2699.y) / cbSceneParam._m0[78u].y)) + _2451;
        _2550 = (exp2(_2725 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2709 * cbSceneParam._m0[78u].z)) * _2699.z) / cbSceneParam._m0[78u].z)) + _2452;
        _2552 = _2708 * _2453;
    }
    else
    {
        _2546 = _2450;
        _2548 = _2451;
        _2550 = _2452;
        _2552 = _2453;
    }
    float _2564 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2565 = _2564 == 3.0;
    float _2566 = log2(_2552);
    float _2573 = exp2(_2566 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2395 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _657))) + ((_2401 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1467)) * cbPerFrame._m0[3u].x));
    float _2574 = exp2(_2566 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2397 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _657))) + ((_2403 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1467)) * cbPerFrame._m0[3u].x));
    float _2575 = exp2(_2566 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2399 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _657))) + ((_2405 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1467)) * cbPerFrame._m0[3u].x));
    float _2584 = (_2564 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2584 * (_2565 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2546)));
    SV_Target.y = _2584 * (_2565 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2548)));
    SV_Target.z = _2584 * (_2565 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2550)));
    SV_Target.w = cbInstanceData._m0[_2425].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2425].w;
}


