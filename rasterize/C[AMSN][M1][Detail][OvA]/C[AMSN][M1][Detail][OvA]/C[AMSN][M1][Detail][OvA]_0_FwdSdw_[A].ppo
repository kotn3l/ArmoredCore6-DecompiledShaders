#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1080;
float _3750;
float _3751;
float _3752;
float _3753;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[10u].x;
    float _258 = _251.y * cbMtdParam._m0[10u].y;
    float _259 = _251.z * cbMtdParam._m0[10u].z;
    float _264 = 1.0 - cbMtdParam._m0[13u].z;
    float _3762 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    vec4 _284 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _292 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _284.x;
    float _295 = ((_258 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _284.y;
    float _298 = ((_259 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _284.z;
    float _305 = ((_257 - _292) * _266) + _292;
    float _306 = ((_258 - _295) * _266) + _295;
    float _307 = ((_259 - _298) * _266) + _298;
    vec4 _325 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _355 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3773 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _363 = (_356 * ((_325.x * cbMtdParam._m0[11u].x) - _305)) + _305;
    float _364 = (_356 * ((_325.y * cbMtdParam._m0[11u].y) - _306)) + _306;
    float _365 = (_356 * ((_325.z * cbMtdParam._m0[11u].z) - _307)) + _307;
    vec4 _378 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _380 = _378.x;
    float _382 = _380 - (_380 * TEXCOORD_5.x);
    vec4 _396 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _400 = _396.z;
    vec4 _413 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _427 = cbMtdParam._m0[13u].w * _400;
    float _430 = (((((_400 * 2.0) * _413.z) * cbMtdParam._m0[14u].x) - _427) * cbMtdParam._m0[13u].y) + _427;
    vec4 _443 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _458 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_443.z * cbMtdParam._m0[14u].y) - _430)) + _430;
    float _465 = (_396.x * 2.0) + (-1.0);
    float _466 = (_396.y * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3784 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))));
    float _483 = ((cbMtdParam._m0[13u].x * ((_413.x * 2.0) + (-1.0))) + _465) + ((((_443.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _484 = ((cbMtdParam._m0[13u].x * ((_413.y * 2.0) + (-1.0))) + _466) + ((((_443.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _487 = fma(_472, _216 * NORMAL.x, fma(_484, _223 * TANGENT.x, (_209 * _201) * _483));
    float _490 = fma(_472, _216 * NORMAL.y, fma(_484, _223 * TANGENT.y, (_209 * _202) * _483));
    float _493 = fma(_472, _216 * NORMAL.z, fma(_484, _223 * TANGENT.z, (_209 * _203) * _483));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3795 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _501 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3817 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3828 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3839 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _505 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    vec4 _586 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _588 = _586.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _760 = sqrt(((_572 * _572) + (_573 * _573)) + (_574 * _574));
        float _766 = (cbMatDynParam._m0[5u].x * _760) + cbMatDynParam._m0[5u].y;
        float _3850 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _771 = (cbMatDynParam._m0[5u].z * _760) + cbMatDynParam._m0[5u].w;
        float _3861 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) - _767)) + _767) < ((_588 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _618 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _621 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _624 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _637 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = _637 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3872 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _651 = 1.0 - _505;
    float _652 = _648 * _651;
    float _653 = _649 * _651;
    float _654 = _650 * _651;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _505;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _505;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _505;
    float _662 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    vec4 _674 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _677 = _674.x * TEXCOORD_5.w;
    float _678 = dot(vec3(_498, _499, _500), vec3(_579, _580, _581));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _498) - _579;
    float _686 = (_681 * _499) - _580;
    float _687 = (_681 * _500) - _581;
    float _691 = abs(dot(vec3(_579, _580, _581), vec3(_498, _499, _500)));
    float _3905 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_501);
    float _706 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _712 = (1.0 - _706) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _713 = _706 * _693;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _808 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _812 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _837 = _741 + _498;
        float _838 = _745 + _499;
        float _839 = _749 + _500;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _804;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _808;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _812;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_498, _499, _500), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3953 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_498, _499, _500), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3986 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_498, _499, _500), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _4019 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1127 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1131 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1154 = _741 + _498;
        float _1155 = _745 + _499;
        float _1156 = _749 + _500;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_498, _499, _500), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4082 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_498, _499, _500), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4115 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_498, _499, _500), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4148 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = _1080;
        _1402 = _1080;
        _1403 = _1080;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _685 * 0.5;
    float _1461 = _686 * 0.5;
    float _1462 = _687 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1576 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1580 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1584 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1587 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1590 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1593 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1621;
        if (_1587 > 0.0)
        {
            _1621 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1621 = frontier_phi_17_15_ladder;
        }
        float _1796;
        if (_1590 > 0.0)
        {
            _1796 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1796 = frontier_phi_26_22_ladder;
        }
        float _2091;
        if (_1593 > 0.0)
        {
            _2091 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2091 = frontier_phi_38_33_ladder;
        }
        float _2093 = isnan(_1796) ? _1621 : (isnan(_1621) ? _1796 : min(_1621, _1796));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1587) + _1576;
        float _2099 = (_2094 * _1590) + _1580;
        float _2100 = (_2094 * _1593) + _1584;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_16_38_ladder = _2245.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2245.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2245.x * cbModelParam._m0[1u].y;
        }
        _1609 = frontier_phi_16_38_ladder_2;
        _1611 = frontier_phi_16_38_ladder_1;
        _1613 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1529);
        _1609 = _1597.x * cbModelParam._m0[1u].y;
        _1611 = _1597.y * cbModelParam._m0[1u].y;
        _1613 = _1597.z * cbModelParam._m0[1u].y;
    }
    float _1617 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1617 : min(cbModelParam._m0[25u].w, _1617));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1675 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1679 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1683 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1686 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1689 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1692 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1801;
        if (_1686 > 0.0)
        {
            _1801 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1801 = frontier_phi_28_24_ladder;
        }
        float _2118;
        if (_1689 > 0.0)
        {
            _2118 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2118 = frontier_phi_40_35_ladder;
        }
        float _2456;
        if (_1692 > 0.0)
        {
            _2456 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2456 = frontier_phi_50_47_ladder;
        }
        float _2458 = isnan(_2118) ? _1801 : (isnan(_1801) ? _2118 : min(_1801, _2118));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1686) + _1675;
        float _2464 = (_2459 * _1689) + _1679;
        float _2465 = (_2459 * _1692) + _1683;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2465, cbModelParam._m0[17u].z, fma(_2464, cbModelParam._m0[17u].y, _2463 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2465, cbModelParam._m0[18u].z, fma(_2464, cbModelParam._m0[18u].y, _2463 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2465, cbModelParam._m0[19u].z, fma(_2464, cbModelParam._m0[19u].y, _2463 * cbModelParam._m0[19u].x))), _1618);
            frontier_phi_25_50_ladder = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2587.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2587.x * cbModelParam._m0[1u].z;
        }
        _1711 = frontier_phi_25_50_ladder_2;
        _1713 = frontier_phi_25_50_ladder_1;
        _1715 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1618);
        _1711 = _1695.x * cbModelParam._m0[1u].z;
        _1713 = _1695.y * cbModelParam._m0[1u].z;
        _1715 = _1695.z * cbModelParam._m0[1u].z;
    }
    float _1728 = (((_712 * _662) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1711 - _1609)) + _1609);
    float _1730 = (((_712 * _664) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1732 = (((_712 * _665) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1735 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1728 * cbSceneParam._m0[91u].x));
    float _1775 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1787 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1788 = _1775 / _1787;
    float _1789 = _1779 / _1787;
    float _1790 = _1783 / _1787;
    float _1937;
    float _1938;
    float _1939;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1817 = ((uint(_1790 > cbSceneParam._m0[59u].y) + uint(_1790 > cbSceneParam._m0[59u].x)) + uint(_1790 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1818 = _1817 + 43u;
        uint _1826 = _1817 + 44u;
        uint _1834 = _1817 + 45u;
        uint _1842 = _1817 + 46u;
        float _1853 = fma(_1787, cbSceneParam._m0[_1818].w, fma(_1783, cbSceneParam._m0[_1818].z, fma(_1779, cbSceneParam._m0[_1818].y, _1775 * cbSceneParam._m0[_1818].x)));
        float _1857 = fma(_1787, cbSceneParam._m0[_1826].w, fma(_1783, cbSceneParam._m0[_1826].z, fma(_1779, cbSceneParam._m0[_1826].y, _1775 * cbSceneParam._m0[_1826].x)));
        float _1865 = fma(_1787, cbSceneParam._m0[_1842].w, fma(_1783, cbSceneParam._m0[_1842].z, fma(_1779, cbSceneParam._m0[_1842].y, _1775 * cbSceneParam._m0[_1842].x)));
        float _1870 = cbSceneParam._m0[33u].z * _1865;
        float _1872 = cbSceneParam._m0[33u].w * _1865;
        float _1875 = fma(_1787, cbSceneParam._m0[_1834].w, fma(_1783, cbSceneParam._m0[_1834].z, fma(_1779, cbSceneParam._m0[_1834].y, _1775 * cbSceneParam._m0[_1834].x))) / _1865;
        float _1923 = (cbSceneParam._m0[33u].x - sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790))) * cbSceneParam._m0[33u].y;
        float _4274 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1930 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 + _1853) / _1865, (_1872 + _1857) / _1865), _1875), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1872 + _1853) / _1865, (_1857 - _1870) / _1865), _1875), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 - _1870) / _1865, (_1857 - _1872) / _1865), _1875), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 - _1872) / _1865, (_1870 + _1857) / _1865), _1875), 0.0)).x), vec4(0.25)));
        _1937 = 1.0 - (_1930 * cbSceneParam._m0[34u].x);
        _1938 = 1.0 - (_1930 * cbSceneParam._m0[34u].y);
        _1939 = 1.0 - (_1930 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1937 = 1.0;
        _1938 = 1.0;
        _1939 = 1.0;
    }
    float _2003;
    float _2005;
    float _2007;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1991 = fma(_1787, cbSceneParam._m0[63u].w, fma(_1783, cbSceneParam._m0[63u].z, fma(_1779, cbSceneParam._m0[63u].y, _1775 * cbSceneParam._m0[63u].x)));
        float _1992 = fma(_1787, cbSceneParam._m0[60u].w, fma(_1783, cbSceneParam._m0[60u].z, fma(_1779, cbSceneParam._m0[60u].y, _1775 * cbSceneParam._m0[60u].x))) / _1991;
        float _1993 = fma(_1787, cbSceneParam._m0[61u].w, fma(_1783, cbSceneParam._m0[61u].z, fma(_1779, cbSceneParam._m0[61u].y, _1775 * cbSceneParam._m0[61u].x))) / _1991;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1992 >= cbSceneParam._m0[64u].x) && (_1993 >= cbSceneParam._m0[64u].y)) && (_1992 <= cbSceneParam._m0[64u].z)) && (_1993 <= cbSceneParam._m0[64u].w))
        {
            float _2131 = fma(_1787, cbSceneParam._m0[62u].w, fma(_1783, cbSceneParam._m0[62u].z, fma(_1779, cbSceneParam._m0[62u].y, _1775 * cbSceneParam._m0[62u].x))) / _1991;
            float _2135 = isnan(cbSceneParam._m0[41u].w) ? _2131 : (isnan(_2131) ? cbSceneParam._m0[41u].w : max(_2131, cbSceneParam._m0[41u].w));
            float _2178 = (cbSceneParam._m0[33u].x - sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790))) * cbSceneParam._m0[33u].y;
            float _4290 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
            float _2185 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1992, cbSceneParam._m0[33u].w + _1993), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1992, _1993 - cbSceneParam._m0[33u].z), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1992 - cbSceneParam._m0[33u].z, _1993 - cbSceneParam._m0[33u].w), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1992 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1993), _2135), 0.0)).x), vec4(0.25)));
            float _2189 = 1.0 - (_2185 * cbSceneParam._m0[34u].x);
            float _2190 = 1.0 - (_2185 * cbSceneParam._m0[34u].y);
            float _2191 = 1.0 - (_2185 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2191) ? _1939 : (isnan(_1939) ? _2191 : min(_1939, _2191));
            frontier_phi_37_36_ladder_1 = isnan(_2190) ? _1938 : (isnan(_1938) ? _2190 : min(_1938, _2190));
            frontier_phi_37_36_ladder_2 = isnan(_2189) ? _1937 : (isnan(_1937) ? _2189 : min(_1937, _2189));
        }
        else
        {
            frontier_phi_37_36_ladder = _1939;
            frontier_phi_37_36_ladder_1 = _1938;
            frontier_phi_37_36_ladder_2 = _1937;
        }
        _2003 = frontier_phi_37_36_ladder_2;
        _2005 = frontier_phi_37_36_ladder_1;
        _2007 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2003 = _1937;
        _2005 = _1938;
        _2007 = _1939;
    }
    uvec4 _2012 = floatBitsToUint(cbInstanceData._m0[_637 + 5u]);
    uint _2014 = _2012.x * 14u;
    uint _2015 = _2014 + 13u;
    float _2022 = _677 + (-1.0);
    float _2027 = (cbLight._m0[_2015].x * _2022) + 1.0;
    float _2028 = (cbLight._m0[_2015].y * _2022) + 1.0;
    float _2029 = (cbLight._m0[_2015].z * _2022) + 1.0;
    float _2030 = (cbLight._m0[_2015].w * _2022) + 1.0;
    uint _2031 = _2014 + 5u;
    float _2037 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
    uint _2041 = _2014 + 4u;
    float _2050 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2054 = _2014 | 1u;
    float _2065 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_498, _499, _500));
    float _2068 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_498, _499, _500));
    float _4326 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _4337 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2073 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2075 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.3183098733425140380859375;
    float _2082 = ((cbLight._m0[_2031].x * _2037) * _2075) + (((cbLight._m0[_2041].x * _2003) * _2050) * _2073);
    float _2083 = ((_2037 * cbLight._m0[_2031].y) * _2075) + (((cbLight._m0[_2041].y * _2005) * _2050) * _2073);
    float _2084 = ((_2037 * cbLight._m0[_2031].z) * _2075) + (((cbLight._m0[_2041].z * _2007) * _2050) * _2073);
    uvec4 _2088 = floatBitsToUint(cbLight._m0[_2014 + 12u]);
    bool _2090 = _2088.x == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2090)
    {
        _2192 = _2082;
        _2194 = _2083;
        _2196 = _2084;
    }
    else
    {
        uint _2200 = _2014 + 6u;
        float _2216 = (dot(vec3(cbLight._m0[_2014 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4348 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2219 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2192 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _2082;
        _2194 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _2083;
        _2196 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _2084;
    }
    bool _2199 = _2088.y == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2199)
    {
        _2254 = _2192;
        _2256 = _2194;
        _2258 = _2196;
    }
    else
    {
        uint _2427 = _2014 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2014 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4364 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2446 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2254 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2192;
        _2256 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2194;
        _2258 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2196;
    }
    uint _2261 = _2014 + 8u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _501) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2014].x + _579;
    float _2277 = cbLight._m0[_2014].y + _580;
    float _2278 = cbLight._m0[_2014].z + _581;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2014].xyz));
    float _4380 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _2290 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2291 = dot(vec3(_498, _499, _500), vec3(_2283, _2284, _2285));
    float _4402 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2283, _2284, _2285));
    float _4413 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2275 * _2275;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0);
    float _2312 = 0.959999978542327880859375 - _659;
    float _2314 = 0.959999978542327880859375 - _660;
    float _2315 = 0.959999978542327880859375 - _661;
    float _2322 = 1.0 - _2275;
    float _2333 = (0.5 / (((_2290 * ((_2289 * _2322) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2322) + _2275) * _2289))) * _2289;
    float _4424 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    uint _2349 = _2014 + 9u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _501) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2054].x + _579;
    float _2363 = cbLight._m0[_2054].y + _580;
    float _2364 = cbLight._m0[_2054].z + _581;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2054].xyz));
    float _4435 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2376 = dot(vec3(_498, _499, _500), vec3(_2369, _2370, _2371));
    float _4446 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2369, _2370, _2371));
    float _4457 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2361 * _2361;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2402 = 1.0 - _2361;
    float _2412 = (0.5 / (((_2290 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2402) + _2361) * _2375))) * _2375;
    float _4468 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    float _2424 = (((((_2395 * _2312) + _662) * cbLight._m0[_2349].x) * _2414) * _2037) + ((((cbLight._m0[_2261].x * _2003) * ((_2311 * _2312) + _662)) * _2335) * _2050);
    float _2425 = (((((_2395 * _2314) + _664) * cbLight._m0[_2349].y) * _2414) * _2037) + ((((cbLight._m0[_2261].y * _2005) * ((_2311 * _2314) + _664)) * _2335) * _2050);
    float _2426 = (((((_2395 * _2315) + _665) * cbLight._m0[_2349].z) * _2414) * _2037) + ((((cbLight._m0[_2261].z * _2007) * ((_2311 * _2315) + _665)) * _2335) * _2050);
    float _2482;
    float _2484;
    float _2486;
    if (_2090)
    {
        _2482 = _2424;
        _2484 = _2425;
        _2486 = _2426;
    }
    else
    {
        uint _2488 = _2014 + 2u;
        uint _2492 = _2014 + 10u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _501) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _579;
        float _2509 = cbLight._m0[_2488].y + _580;
        float _2510 = cbLight._m0[_2488].z + _581;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2488].xyz));
        float _4479 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2522 = dot(vec3(_498, _499, _500), vec3(_2515, _2516, _2517));
        float _4490 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4501 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
        float _2548 = 1.0 - _2507;
        float _2558 = (0.5 / (((_2290 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2548) + _2507) * _2521))) * _2521;
        float _4512 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2482 = (((((_2541 * _2312) + _662) * cbLight._m0[_2492].x) * _2560) * _2561) + _2424;
        _2484 = (((((_2541 * _2314) + _664) * cbLight._m0[_2492].y) * _2560) * _2561) + _2425;
        _2486 = (((((_2541 * _2315) + _665) * cbLight._m0[_2492].z) * _2560) * _2561) + _2426;
    }
    float _2592;
    float _2594;
    float _2596;
    if (_2199)
    {
        _2592 = _2482;
        _2594 = _2484;
        _2596 = _2486;
    }
    else
    {
        uint _2603 = _2014 + 3u;
        uint _2607 = _2014 + 11u;
        float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2603].w)) * _501) * 0.949999988079071044921875);
        float _2622 = _2621 * _2621;
        float _2623 = cbLight._m0[_2603].x + _579;
        float _2624 = cbLight._m0[_2603].y + _580;
        float _2625 = cbLight._m0[_2603].z + _581;
        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
        float _2630 = _2629 * _2623;
        float _2631 = _2629 * _2624;
        float _2632 = _2629 * _2625;
        float _2633 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2603].xyz));
        float _4528 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2637 = dot(vec3(_498, _499, _500), vec3(_2630, _2631, _2632));
        float _4539 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2641 = dot(vec3(cbLight._m0[_2603].xyz), vec3(_2630, _2631, _2632));
        float _4550 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2645 = _2622 * _2622;
        float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
        float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
        float _2663 = 1.0 - _2622;
        float _2673 = (0.5 / (((_2290 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2663) + _2622) * _2636))) * _2636;
        float _4561 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2675 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
        float _2676 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2592 = (((((_2656 * _2312) + _662) * cbLight._m0[_2607].x) * _2675) * _2676) + _2482;
        _2594 = (((((_2656 * _2314) + _664) * cbLight._m0[_2607].y) * _2675) * _2676) + _2484;
        _2596 = (((((_2656 * _2315) + _665) * cbLight._m0[_2607].z) * _2675) * _2676) + _2486;
    }
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_2012.y == 0u)
    {
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.x;
        uint _2709 = uint((float(_2697.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2698))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2698)));
        float _2719 = (log2(_1790 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2720 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        uint _2723 = uint(isnan(14.0) ? _2720 : (isnan(_2720) ? 14.0 : min(_2720, 14.0)));
        uvec4 _2728 = texelFetch(g_lightClusterGridBuffer, int(((_2723 << 2u) + (_2709 << 6u)) >> 2u));
        uint _2729 = _2728.x;
        uint _2730 = _2697.z;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((((1u << ((_2730 >> 4u) & 15u)) + 4294967295u) & _2729) == 0u) || ((_2730 & 240u) == 0u))
        {
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
        }
        else
        {
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            uint _2968 = 0u;
            uint _2977;
            bool _2978;
            for (;;)
            {
                _2977 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                _2978 = _2977 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2978)
                {
                    frontier_phi_71_pred = _2967;
                    frontier_phi_71_pred_1 = _2966;
                    frontier_phi_71_pred_2 = _2965;
                    frontier_phi_71_pred_3 = _2964;
                    frontier_phi_71_pred_4 = _2963;
                    frontier_phi_71_pred_5 = _2962;
                }
                else
                {
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    uint _3113;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2977;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    for (;;)
                    {
                        uint _3117 = uint(findLSB(_3113)) + (_2968 << 5u);
                        uint _3114 = (_3113 + 4294967295u) & _3113;
                        uint _3119 = _3117 * 48u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3139 = (_3117 * 48u) + 4u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3158 = (_3117 * 48u) + 8u;
                        vec3 _3169 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x));
                        float _3173 = _3133.x - _1788;
                        float _3174 = _3133.y - _1789;
                        float _3175 = _3133.z - _1790;
                        float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                        float _3179 = inversesqrt(_3176);
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3183 = dot(vec3(_618, _621, _624), vec3(_3180, _3181, _3182));
                        float _3188 = 1.0 - (_3176 * _3133.w);
                        float _4587 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3190 = sqrt(_3176) * _3152.w;
                        float _3193 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3183) + _3194;
                        float _3200 = _3190 * _3190;
                        float _3204 = ((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3189) / ((_3200 * 0.699999988079071044921875) + 1.0);
                        float _3208 = (-0.0) - _1788;
                        float _3209 = (-0.0) - _1789;
                        float _3210 = (-0.0) - _1790;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3224 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                        float _3225 = 1.0 - _693;
                        float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                        float _3233 = _3232 * _3232;
                        float _3234 = _3233 * _3233;
                        float _3235 = _3215 + _3180;
                        float _3236 = _3216 + _3181;
                        float _3237 = _3217 + _3182;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3245 = dot(vec3(_618, _621, _624), vec3(_3215, _3216, _3217));
                        float _4603 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3249 = dot(vec3(_618, _621, _624), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                        float _4614 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                        float _3257 = _3193 * _3233;
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3183) + _3258;
                        float _4625 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3263 = 1.0 - _3233;
                        float _3273 = (0.5 / (((_3262 * ((_3248 * _3263) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3233) * _3248))) * _3262;
                        float _4636 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3284 = (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3256 * _3256) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125))) * _3189;
                        _3037 = (_3204 * _3152.x) + _3110;
                        _3038 = (_3204 * _3152.y) + _3111;
                        _3039 = (_3204 * _3152.z) + _3112;
                        _3034 = (_3284 * _3169.x) + _3107;
                        _3035 = (_3284 * _3169.y) + _3108;
                        _3036 = (_3284 * _3169.z) + _3109;
                        if (_3114 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3114;
                        }
                    }
                    frontier_phi_71_pred = _3039;
                    frontier_phi_71_pred_1 = _3038;
                    frontier_phi_71_pred_2 = _3037;
                    frontier_phi_71_pred_3 = _3036;
                    frontier_phi_71_pred_4 = _3035;
                    frontier_phi_71_pred_5 = _3034;
                }
                _2820 = frontier_phi_71_pred;
                _2818 = frontier_phi_71_pred_1;
                _2816 = frontier_phi_71_pred_2;
                _2814 = frontier_phi_71_pred_3;
                _2812 = frontier_phi_71_pred_4;
                _2810 = frontier_phi_71_pred_5;
                uint _2969 = _2968 + 1u;
                if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2962 = _2810;
                    _2963 = _2812;
                    _2964 = _2814;
                    _2965 = _2816;
                    _2966 = _2818;
                    _2967 = _2820;
                    _2968 = _2969;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
        }
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.z;
        uint _2826 = (_2824 >> 8u) & 15u;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((4294967295u << _2826) & _2729) == 0u)
        {
            _2930 = _2809;
            _2932 = _2811;
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
        }
        else
        {
            float _2955 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
            float _2956 = _2955 * _1788;
            float _2957 = _2955 * _1789;
            float _2958 = _2955 * _1790;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2826 < ((_2824 >> 12u) & 15u))
            {
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _3090 = _2809;
                float _3091 = _2811;
                float _3092 = _2813;
                float _3093 = _2815;
                float _3094 = _2817;
                float _3095 = _2819;
                uint _3096 = _2826;
                uint _3105;
                bool _3106;
                for (;;)
                {
                    _3105 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                    _3106 = _3105 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3106)
                    {
                        frontier_phi_82_pred = _3095;
                        frontier_phi_82_pred_1 = _3094;
                        frontier_phi_82_pred_2 = _3093;
                        frontier_phi_82_pred_3 = _3092;
                        frontier_phi_82_pred_4 = _3091;
                        frontier_phi_82_pred_5 = _3090;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3311 = _3090;
                        float _3312 = _3091;
                        float _3313 = _3092;
                        float _3314 = _3093;
                        float _3315 = _3094;
                        float _3316 = _3095;
                        uint _3317 = _3105;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3387;
                        vec4 _3403;
                        float _3450;
                        bool _3451;
                        for (;;)
                        {
                            uint _3328 = ((_3096 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3374 = (_3328 * 40u) + 16u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3390 = (_3328 * 40u) + 20u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3406 = (_3328 * 40u) + 24u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3425 = (_3328 * 40u) + 28u;
                            vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3450 = fma(_1790, _3438.z, fma(_1789, _3438.y, _3438.x * _1788)) + _3438.w;
                            _3451 = !((fma(_1790, _3419.z, fma(_1789, _3419.y, _3419.x * _1788)) + _3419.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3451)
                            {
                                float _3478 = _3343.x - _1788;
                                float _3479 = _3343.y - _1789;
                                float _3480 = _3343.z - _1790;
                                float _3481 = dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480));
                                float _3484 = inversesqrt(_3481);
                                float _3485 = _3484 * _3478;
                                float _3486 = _3484 * _3479;
                                float _3487 = _3484 * _3480;
                                float _3491 = 1.0 - (_3481 / (_3344 * _3344));
                                float _4647 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3496 = sqrt(_3481) * _3359.w;
                                float _3498 = 1.39999997615814208984375 / (_3496 + 1.39999997615814208984375);
                                float _3499 = _3498 * _3498;
                                float _3502 = ((1.0 - _3499) * dot(vec3(_3485, _3486, _3487), vec3(_618, _621, _624))) + _3499;
                                float _3505 = _3496 * _3496;
                                float _3509 = (fma(_1790, _3387.z, fma(_1789, _3387.y, _3387.x * _1788)) + _3387.w) / _3450;
                                float _3510 = (fma(_1790, _3403.z, fma(_1789, _3403.y, _3403.x * _1788)) + _3403.w) / _3450;
                                float _3514 = 1.0 - dot(vec2(_3509, _3510), vec2(_3509, _3510));
                                float _4663 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3516 = _3515 * (((isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0))) * _3492) / ((_3505 * 0.699999988079071044921875) + 1.0));
                                float _3528 = exp2(log2(1.0 / ((_3505 * 3.5) + 5.0)) * 0.25);
                                float _3529 = 1.0 - _693;
                                float _3536 = sqrt(1.0 - ((1.0 - (_3529 * _3529)) * (1.0 - (_3528 * _3528))));
                                float _3537 = _3536 * _3536;
                                float _3538 = _3537 * _3537;
                                float _3539 = _3485 - _2956;
                                float _3540 = _3486 - _2957;
                                float _3541 = _3487 - _2958;
                                float _3545 = inversesqrt(dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541)));
                                float _3549 = dot(vec3(_618, _621, _624), vec3((-0.0) - _2956, (-0.0) - _2957, (-0.0) - _2958));
                                float _4674 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3553 = dot(vec3(_618, _621, _624), vec3(_3545 * _3539, _3545 * _3540, _3545 * _3541));
                                float _4685 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3560 = ((_3556 * _3556) * (_3538 + (-1.0))) + 1.0;
                                float _3561 = _3498 * _3537;
                                float _3562 = _3561 * _3561;
                                float _3568 = ((1.0 - _3562) * dot(vec3(_618, _621, _624), vec3(_3485, _3486, _3487))) + _3562;
                                float _4696 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3570 = 1.0 - _3537;
                                float _3580 = (0.5 / (((_3569 * ((_3552 * _3570) + _3537)) + 9.9999999392252902907785028219223e-09) + (((_3569 * _3570) + _3537) * _3552))) * _3569;
                                float _4707 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3590 = (_3515 * _3492) * (((_3538 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3560 * _3560) * ((_3505 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3516 * _3359.z;
                                frontier_phi_88_pred_1 = _3516 * _3359.y;
                                frontier_phi_88_pred_2 = _3516 * _3359.x;
                                frontier_phi_88_pred_3 = _3590 * _3371.z;
                                frontier_phi_88_pred_4 = _3590 * _3371.y;
                                frontier_phi_88_pred_5 = _3590 * _3371.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3599 = frontier_phi_88_pred;
                            _3598 = frontier_phi_88_pred_1;
                            _3597 = frontier_phi_88_pred_2;
                            _3596 = frontier_phi_88_pred_3;
                            _3595 = frontier_phi_88_pred_4;
                            _3594 = frontier_phi_88_pred_5;
                            _3301 = _3597 + _3314;
                            _3302 = _3598 + _3315;
                            _3303 = _3599 + _3316;
                            _3298 = _3594 + _3311;
                            _3299 = _3595 + _3312;
                            _3300 = _3596 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3303;
                        frontier_phi_82_pred_1 = _3302;
                        frontier_phi_82_pred_2 = _3301;
                        frontier_phi_82_pred_3 = _3300;
                        frontier_phi_82_pred_4 = _3299;
                        frontier_phi_82_pred_5 = _3298;
                    }
                    _2941 = frontier_phi_82_pred;
                    _2939 = frontier_phi_82_pred_1;
                    _2937 = frontier_phi_82_pred_2;
                    _2935 = frontier_phi_82_pred_3;
                    _2933 = frontier_phi_82_pred_4;
                    _2931 = frontier_phi_82_pred_5;
                    uint _3097 = _3096 + 1u;
                    if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3090 = _2931;
                        _3091 = _2933;
                        _3092 = _2935;
                        _3093 = _2937;
                        _3094 = _2939;
                        _3095 = _2941;
                        _3096 = _3097;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2937;
                frontier_phi_63_64_ladder_1 = _2941;
                frontier_phi_63_64_ladder_2 = _2939;
                frontier_phi_63_64_ladder_3 = _2935;
                frontier_phi_63_64_ladder_4 = _2933;
                frontier_phi_63_64_ladder_5 = _2931;
            }
            else
            {
                frontier_phi_63_64_ladder = _2815;
                frontier_phi_63_64_ladder_1 = _2819;
                frontier_phi_63_64_ladder_2 = _2817;
                frontier_phi_63_64_ladder_3 = _2813;
                frontier_phi_63_64_ladder_4 = _2811;
                frontier_phi_63_64_ladder_5 = _2809;
            }
            _2930 = frontier_phi_63_64_ladder_5;
            _2932 = frontier_phi_63_64_ladder_4;
            _2934 = frontier_phi_63_64_ladder_3;
            _2936 = frontier_phi_63_64_ladder;
            _2938 = frontier_phi_63_64_ladder_2;
            _2940 = frontier_phi_63_64_ladder_1;
        }
        float _2945 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2742 = (_2945 * _2936) + _2254;
        _2744 = (_2945 * _2938) + _2256;
        _2746 = (_2945 * _2940) + _2258;
        _2748 = ((_2930 * _662) * _2945) + _2592;
        _2750 = ((_2932 * _664) * _2945) + _2594;
        _2752 = ((_2934 * _665) * _2945) + _2596;
    }
    else
    {
        _2742 = _2254;
        _2744 = _2256;
        _2746 = _2258;
        _2748 = _2592;
        _2750 = _2594;
        _2752 = _2596;
    }
    float _4723 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4734 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4745 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2769 = ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2742 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _677))) + ((_2748 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2770 = ((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2744 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _677))) + ((_2750 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2771 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2746 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _677))) + ((_2752 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    uint _2772 = _637 + 6u;
    float _2780 = _599 / cbSceneParam._m0[86u].x;
    float _2781 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2795 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2797 = _2795.x;
    float _2798 = _2795.y;
    float _2799 = _2795.z;
    float _2800 = _2795.w;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2834 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2835 = _2834 / _521;
        float _2846 = _2835 * _572;
        float _2847 = _573 * _2835;
        float _2848 = (-0.0) - _2847;
        float _2850 = _2835 * _574;
        float _2852 = (cbSceneParam._m0[77u].w * _2848) / _2834;
        float _2853 = _2852 + cbSceneParam._m0[79u].w;
        float _2854 = cbSceneParam._m0[79u].w - _2847;
        float _2860 = sqrt(((_2846 * _2846) + (_2847 * _2847)) + (_2850 * _2850));
        float _2863 = (1.0 - (cbSceneParam._m0[77u].w / _2834)) * _2860;
        float _2868 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2870 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3047;
        if (abs((_2848 - _2852) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3047 = ((((_2853 > 0.0) ? exp2(_2868 * _2853) : (2.0 - exp2(_2870 * _2853))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2863;
        }
        else
        {
            float _2991 = 1.0 / cbSceneParam._m0[80u].x;
            float _2992 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : max(_2853, _2854));
            float _2993 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : min(_2853, _2854));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            _3047 = ((abs(_2860 / _2848) * cbSceneParam._m0[80u].y) * ((((_3002 - _3003) * 2.0) - ((exp2(_2868 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0)))) - exp2(_2868 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))))) * _2991)) - ((exp2(_2870 * _3002) - exp2(_2870 * _3003)) * _2991))) + (_2863 * cbSceneParam._m0[80u].z);
        }
        vec4 _3049 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, 1.0), 0.0);
        float _3058 = exp2((_3047 * (-1.44269502162933349609375)) * (1.0 - _3049.w));
        float _3059 = log2(_3058);
        float _3075 = log2(_2800);
        _2872 = (exp2(_3075 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].x)) * _3049.x) / cbSceneParam._m0[78u].x)) + _2797;
        _2874 = (exp2(_3075 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].y)) * _3049.y) / cbSceneParam._m0[78u].y)) + _2798;
        _2876 = (exp2(_3075 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].z)) * _3049.z) / cbSceneParam._m0[78u].z)) + _2799;
        _2878 = _3058 * _2800;
    }
    else
    {
        _2872 = _2797;
        _2874 = _2798;
        _2876 = _2799;
        _2878 = _2800;
    }
    bool _3085;
    vec4 _2888;
    vec4 _2910;
    float _2912;
    float _2916;
    float _2917;
    float _2918;
    float _2919;
    bool _2929;
    for (;;)
    {
        _2888 = cbMatDynParam._m0[0u];
        float _2890 = roundEven(_2888.y);
        bool _2891 = _2890 == 3.0;
        float _2892 = log2(_2878);
        float _2899 = exp2(_2892 * cbSceneParam._m0[78u].x) * _2769;
        float _2900 = exp2(_2892 * cbSceneParam._m0[78u].y) * _2770;
        float _2901 = exp2(_2892 * cbSceneParam._m0[78u].z) * _2771;
        float _2908 = _588 + (-0.5);
        _2910 = cbMtdParam._m0[1u];
        _2912 = _2910.y * _2908;
        float _2915 = (_2890 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2916 = _2915 * (_2891 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2872)));
        _2917 = _2915 * (_2891 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2874)));
        _2918 = _2915 * (_2891 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2876)));
        _2919 = _2908 * 0.999000012874603271484375;
        _2929 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2929)
        {
            if ((cbInstanceData._m0[_637 + 7u].x + _2919) < 0.5)
            {
                _3085 = true;
                break;
            }
        }
        uint _3026 = _638 + uint(_2888.w);
        if ((cbInstanceData._m0[_3026].w < 1.0) && ((cbInstanceData._m0[_3026].w + _2919) < 0.5))
        {
            _3085 = true;
            break;
        }
        if ((_2912 + 1.0) < _2910.x)
        {
            _3085 = true;
            break;
        }
        _3085 = false;
        break;
    }
    float _3289;
    if (_3085)
    {
        discard_state = true;
        _3289 = 0.0;
    }
    else
    {
        _3289 = cbInstanceData._m0[_2772].w;
    }
    SV_Target.x = _2916;
    SV_Target.y = _2917;
    SV_Target.z = _2918;
    SV_Target.w = _3289;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2772].w;
    discard_exit();
}


