#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _954;
float _3342;
float _3343;
float _3344;
float _3345;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _228.x) * cbMtdParam._m0[9u].x) * _251.x;
    float _264 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _228.y) * cbMtdParam._m0[9u].y) * _251.y;
    float _268 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _228.z) * cbMtdParam._m0[9u].z) * _251.z;
    vec4 _281 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _283 = _281.x;
    vec4 _300 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _304 = _300.z;
    vec4 _317 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _331 = cbMtdParam._m0[13u].w * _304;
    float _334 = (((((_304 * 2.0) * _317.z) * cbMtdParam._m0[14u].x) - _331) * cbMtdParam._m0[13u].y) + _331;
    float _338 = (_300.x * 2.0) + (-1.0);
    float _340 = (_300.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3354 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))));
    float _354 = (cbMtdParam._m0[13u].x * ((_317.x * 2.0) + (-1.0))) + _338;
    float _355 = (cbMtdParam._m0[13u].x * ((_317.y * 2.0) + (-1.0))) + _340;
    float _358 = fma(_347, _198 * NORMAL.x, fma(_355, _205 * TANGENT.x, (_191 * _183) * _354));
    float _361 = fma(_347, _198 * NORMAL.y, fma(_355, _205 * TANGENT.y, (_191 * _184) * _354));
    float _364 = fma(_347, _198 * NORMAL.z, fma(_355, _205 * TANGENT.z, (_191 * _185) * _354));
    float _368 = inversesqrt(dot(vec3(_358, _361, _364), vec3(_358, _361, _364)));
    float _369 = _368 * _358;
    float _370 = _368 * _361;
    float _371 = _368 * _364;
    float _3365 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _372 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _3376 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3387 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3398 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3409 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _376 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _444 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _434);
    float _445 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _434);
    float _446 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _434);
    float _450 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _451 = _444 * _450;
    float _452 = _445 * _450;
    float _453 = _446 * _450;
    vec4 _458 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _460 = _458.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _633 = sqrt(((_444 * _444) + (_445 * _445)) + (_446 * _446));
        float _639 = (cbMatDynParam._m0[5u].x * _633) + cbMatDynParam._m0[5u].y;
        float _3420 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _644 = (cbMatDynParam._m0[5u].z * _633) + cbMatDynParam._m0[5u].w;
        float _3431 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) - _640)) + _640) < ((_460 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _471 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _472 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _491 = fma(_371, cbSceneParam._m0[5u].z, fma(_370, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _369));
    float _494 = fma(_371, cbSceneParam._m0[6u].z, fma(_370, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _369));
    float _497 = fma(_371, cbSceneParam._m0[7u].z, fma(_370, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _369));
    uint _510 = uint(roundEven(NORMAL.w)) * 13u;
    uint _511 = _510 + 9u;
    uint _512 = _511 + uint(cbMatDynParam._m0[0u].w);
    float _518 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_512].x;
    float _519 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_512].y;
    float _520 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_512].z;
    float _3442 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _524 = 1.0 - _376;
    float _525 = _521 * _524;
    float _526 = _522 * _524;
    float _527 = _523 * _524;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _376;
    float _533 = (_522 + (-0.039999999105930328369140625)) * _376;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _376;
    float _535 = _532 + 0.039999999105930328369140625;
    float _537 = _533 + 0.039999999105930328369140625;
    float _538 = _534 + 0.039999999105930328369140625;
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _471, cbSceneParam._m0[86u].y * _472));
    float _550 = _547.x * TEXCOORD_5.w;
    float _551 = dot(vec3(_369, _370, _371), vec3(_451, _452, _453));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _369) - _451;
    float _559 = (_554 * _370) - _452;
    float _560 = (_554 * _371) - _453;
    float _564 = abs(dot(vec3(_451, _452, _453), vec3(_369, _370, _371)));
    float _3475 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_372);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _585 = (1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _586 = _579 * _566;
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _953;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _678 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _682 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _686 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _711 = _614 + _369;
        float _712 = _618 + _370;
        float _713 = _622 + _371;
        float _723 = fma(_713, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) - _678;
        float _724 = fma(_713, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) - _682;
        float _725 = fma(_713, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) - _686;
        float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
        float _742 = ((_729 * _723) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_678 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_729 * _724) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_682 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_729 * _725) / cbModelParam._m0[34u].z) + ((((((_686 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        float _781 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_747.x + (-0.5));
        float _783 = _781 * (_747.y + (-0.5));
        float _784 = _781 * (_747.z + (-0.5));
        float _791 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_754.x + (-0.5));
        float _793 = _791 * (_754.y + (-0.5));
        float _794 = _791 * (_754.z + (-0.5));
        float _801 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_761.x + (-0.5));
        float _803 = _801 * (_761.y + (-0.5));
        float _804 = _801 * (_761.z + (-0.5));
        float _811 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_768.x + (-0.5));
        float _813 = _811 * (_768.y + (-0.5));
        float _814 = _811 * (_768.z + (-0.5));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = _782 * 0.5;
        float _819 = _792 * 0.5;
        float _820 = _802 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _835 = (dot(vec3(_369, _370, _371), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _845 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3523 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_847 + 1.0))) + _852) * _815;
        float _862 = _783 * 0.5;
        float _863 = _793 * 0.5;
        float _864 = _803 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_369, _370, _371), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3556 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_889 + 1.0))) + _894) * _816;
        float _904 = _784 * 0.5;
        float _905 = _794 * 0.5;
        float _906 = _804 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_369, _370, _371), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3589 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_931 + 1.0))) + _936) * _817;
        _953 = _784;
        _955 = _783;
        _956 = _782;
        _957 = _794;
        _958 = _793;
        _959 = _792;
        _960 = _804;
        _961 = _803;
        _962 = _802;
        _963 = _817;
        _964 = _816;
        _965 = _815;
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
    }
    else
    {
        _953 = _954;
        _955 = _954;
        _956 = _954;
        _957 = _954;
        _958 = _954;
        _959 = _954;
        _960 = _954;
        _961 = _954;
        _962 = _954;
        _963 = _954;
        _964 = _954;
        _965 = _954;
        _966 = 0.0;
        _967 = 0.0;
        _968 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _1001 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _1005 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _1028 = _614 + _369;
        float _1029 = _618 + _370;
        float _1030 = _622 + _371;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_369, _370, _371), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3652 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_369, _370, _371), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3685 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_369, _370, _371), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3718 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _954;
        _1267 = _954;
        _1268 = _954;
        _1269 = _954;
        _1270 = _954;
        _1271 = _954;
        _1272 = _954;
        _1273 = _954;
        _1274 = _954;
        _1275 = _954;
        _1276 = _954;
        _1277 = _954;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _558 * 0.5;
    float _1335 = _559 * 0.5;
    float _1336 = _560 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_953, _957, _960, _963));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_955, _958, _961, _964));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_956, _959, _962, _965));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _372);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1450 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1454 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1458 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1461 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1464 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1467 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1495;
        if (_1461 > 0.0)
        {
            _1495 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1495 = frontier_phi_17_15_ladder;
        }
        float _1702;
        if (_1464 > 0.0)
        {
            _1702 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1702 = frontier_phi_26_22_ladder;
        }
        float _1956;
        if (_1467 > 0.0)
        {
            _1956 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1956 = frontier_phi_38_33_ladder;
        }
        float _1958 = isnan(_1702) ? _1495 : (isnan(_1495) ? _1702 : min(_1495, _1702));
        float _1959 = isnan(_1956) ? _1958 : (isnan(_1958) ? _1956 : min(_1958, _1956));
        float _1963 = (_1959 * _1461) + _1450;
        float _1964 = (_1959 * _1464) + _1454;
        float _1965 = (_1959 * _1467) + _1458;
        float _1966 = _1959 * 9.9999997473787516355514526367188e-05;
        float _1968 = (-1.0) - _1966;
        float _1970 = _1966 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1965 > _1970) || ((_1965 < _1968) || ((_1964 > _1970) || ((_1964 < _1968) || ((_1963 < _1968) || (_1963 > _1970))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1965, cbModelParam._m0[9u].z, fma(_1964, cbModelParam._m0[9u].y, _1963 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1965, cbModelParam._m0[10u].z, fma(_1964, cbModelParam._m0[10u].y, _1963 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1965, cbModelParam._m0[11u].z, fma(_1964, cbModelParam._m0[11u].y, _1963 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_16_38_ladder = _2093.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2093.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2093.x * cbModelParam._m0[1u].y;
        }
        _1483 = frontier_phi_16_38_ladder_2;
        _1485 = frontier_phi_16_38_ladder_1;
        _1487 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1403);
        _1483 = _1471.x * cbModelParam._m0[1u].y;
        _1485 = _1471.y * cbModelParam._m0[1u].y;
        _1487 = _1471.z * cbModelParam._m0[1u].y;
    }
    float _1491 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _372);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1491 : min(cbModelParam._m0[25u].w, _1491));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1549 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1553 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1557 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1560 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1563 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1566 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1707;
        if (_1560 > 0.0)
        {
            _1707 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1707 = frontier_phi_28_24_ladder;
        }
        float _1983;
        if (_1563 > 0.0)
        {
            _1983 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1983 = frontier_phi_40_35_ladder;
        }
        float _2196;
        if (_1566 > 0.0)
        {
            _2196 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2196 = frontier_phi_49_46_ladder;
        }
        float _2198 = isnan(_1983) ? _1707 : (isnan(_1707) ? _1983 : min(_1707, _1983));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1560) + _1549;
        float _2204 = (_2199 * _1563) + _1553;
        float _2205 = (_2199 * _1566) + _1557;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2207 = (-1.0) - _2206;
        float _2209 = _2206 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2205 > _2209) || ((_2205 < _2207) || ((_2204 > _2209) || ((_2204 < _2207) || ((_2203 < _2207) || (_2203 > _2209))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2205, cbModelParam._m0[17u].z, fma(_2204, cbModelParam._m0[17u].y, _2203 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2205, cbModelParam._m0[18u].z, fma(_2204, cbModelParam._m0[18u].y, _2203 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2205, cbModelParam._m0[19u].z, fma(_2204, cbModelParam._m0[19u].y, _2203 * cbModelParam._m0[19u].x))), _1492);
            frontier_phi_25_49_ladder = _2404.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2404.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2404.x * cbModelParam._m0[1u].z;
        }
        _1585 = frontier_phi_25_49_ladder_2;
        _1587 = frontier_phi_25_49_ladder_1;
        _1589 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1492);
        _1585 = _1569.x * cbModelParam._m0[1u].z;
        _1587 = _1569.y * cbModelParam._m0[1u].z;
        _1589 = _1569.z * cbModelParam._m0[1u].z;
    }
    float _1602 = (((_585 * _535) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_585 * _537) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_585 * _538) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1602 * cbSceneParam._m0[91u].x));
    uvec4 _1625 = floatBitsToUint(cbInstanceData._m0[_510 + 5u]);
    uint _1627 = _1625.x * 14u;
    uint _1628 = _1627 + 13u;
    float _1635 = _550 + (-1.0);
    float _1640 = (cbLight._m0[_1628].x * _1635) + 1.0;
    float _1641 = (cbLight._m0[_1628].y * _1635) + 1.0;
    float _1642 = (cbLight._m0[_1628].z * _1635) + 1.0;
    float _1643 = (cbLight._m0[_1628].w * _1635) + 1.0;
    uint _1644 = _1627 + 5u;
    float _1650 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1654 = _1627 + 4u;
    float _1660 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1664 = _1627 | 1u;
    float _1675 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_369, _370, _371));
    float _1678 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_369, _370, _371));
    float _3854 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _3865 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1683 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.3183098733425140380859375;
    float _1685 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.3183098733425140380859375;
    float _1692 = ((cbLight._m0[_1644].x * _1650) * _1685) + ((cbLight._m0[_1654].x * _1660) * _1683);
    float _1693 = ((_1650 * cbLight._m0[_1644].y) * _1685) + ((_1660 * cbLight._m0[_1654].y) * _1683);
    float _1694 = ((_1650 * cbLight._m0[_1644].z) * _1685) + ((_1660 * cbLight._m0[_1654].z) * _1683);
    uvec4 _1699 = floatBitsToUint(cbLight._m0[_1627 + 12u]);
    bool _1701 = _1699.x == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1701)
    {
        _1712 = _1692;
        _1714 = _1693;
        _1716 = _1694;
    }
    else
    {
        uint _1720 = _1627 + 6u;
        float _1736 = (dot(vec3(cbLight._m0[_1627 + 2u].xyz), vec3(_369, _370, _371)) * 0.5) + 0.5;
        float _1737 = _1736 * _1736;
        float _3876 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1739 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1712 = (((cbLight._m0[_1720].x * 0.3183098733425140380859375) * _1738) * _1739) + _1692;
        _1714 = (((cbLight._m0[_1720].y * 0.3183098733425140380859375) * _1738) * _1739) + _1693;
        _1716 = (((cbLight._m0[_1720].z * 0.3183098733425140380859375) * _1738) * _1739) + _1694;
    }
    bool _1719 = _1699.y == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1719)
    {
        _1757 = _1712;
        _1759 = _1714;
        _1761 = _1716;
    }
    else
    {
        uint _1927 = _1627 + 7u;
        float _1943 = (dot(vec3(cbLight._m0[_1627 + 3u].xyz), vec3(_369, _370, _371)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _3892 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1946 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1757 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1712;
        _1759 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1714;
        _1761 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1716;
    }
    uint _1764 = _1627 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _372) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1627].x + _451;
    float _1780 = cbLight._m0[_1627].y + _452;
    float _1781 = cbLight._m0[_1627].z + _453;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1627].xyz));
    float _3908 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _1793 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1794 = dot(vec3(_369, _370, _371), vec3(_1786, _1787, _1788));
    float _3930 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1786, _1787, _1788));
    float _3941 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1814 = exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0);
    float _1815 = 0.959999978542327880859375 - _532;
    float _1817 = 0.959999978542327880859375 - _533;
    float _1818 = 0.959999978542327880859375 - _534;
    float _1825 = 1.0 - _1778;
    float _1836 = (0.5 / (((_1793 * ((_1792 * _1825) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1825) + _1778) * _1792))) * _1792;
    float _3952 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1849 = _1627 + 9u;
    float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _372) * 0.949999988079071044921875);
    float _1861 = _1860 * _1860;
    float _1862 = cbLight._m0[_1664].x + _451;
    float _1863 = cbLight._m0[_1664].y + _452;
    float _1864 = cbLight._m0[_1664].z + _453;
    float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
    float _1869 = _1868 * _1862;
    float _1870 = _1868 * _1863;
    float _1871 = _1868 * _1864;
    float _1872 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1664].xyz));
    float _3963 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1876 = dot(vec3(_369, _370, _371), vec3(_1869, _1870, _1871));
    float _3974 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1880 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1869, _1870, _1871));
    float _3985 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1884 = _1861 * _1861;
    float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
    float _1895 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
    float _1902 = 1.0 - _1861;
    float _1912 = (0.5 / (((_1793 * ((_1875 * _1902) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1902) + _1861) * _1875))) * _1875;
    float _3996 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
    float _1924 = (((((_1895 * _1815) + _535) * cbLight._m0[_1849].x) * _1914) * _1650) + (((((_1814 * _1815) + _535) * cbLight._m0[_1764].x) * _1838) * _1660);
    float _1925 = (((((_1895 * _1817) + _537) * cbLight._m0[_1849].y) * _1914) * _1650) + (((((_1814 * _1817) + _537) * cbLight._m0[_1764].y) * _1838) * _1660);
    float _1926 = (((((_1895 * _1818) + _538) * cbLight._m0[_1849].z) * _1914) * _1650) + (((((_1814 * _1818) + _538) * cbLight._m0[_1764].z) * _1838) * _1660);
    float _1988;
    float _1990;
    float _1992;
    if (_1701)
    {
        _1988 = _1924;
        _1990 = _1925;
        _1992 = _1926;
    }
    else
    {
        uint _1994 = _1627 + 2u;
        uint _1998 = _1627 + 10u;
        float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _372) * 0.949999988079071044921875);
        float _2013 = _2012 * _2012;
        float _2014 = cbLight._m0[_1994].x + _451;
        float _2015 = cbLight._m0[_1994].y + _452;
        float _2016 = cbLight._m0[_1994].z + _453;
        float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
        float _2021 = _2020 * _2014;
        float _2022 = _2020 * _2015;
        float _2023 = _2020 * _2016;
        float _2024 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1994].xyz));
        float _4007 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2028 = dot(vec3(_369, _370, _371), vec3(_2021, _2022, _2023));
        float _4018 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2032 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2021, _2022, _2023));
        float _4029 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2036 = _2013 * _2013;
        float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
        float _2047 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
        float _2054 = 1.0 - _2013;
        float _2064 = (0.5 / (((_1793 * ((_2027 * _2054) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2054) + _2013) * _2027))) * _2027;
        float _4040 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2066 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
        float _2067 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1988 = (((((_2047 * _1815) + _535) * cbLight._m0[_1998].x) * _2066) * _2067) + _1924;
        _1990 = (((((_2047 * _1817) + _537) * cbLight._m0[_1998].y) * _2066) * _2067) + _1925;
        _1992 = (((((_2047 * _1818) + _538) * cbLight._m0[_1998].z) * _2066) * _2067) + _1926;
    }
    float _2102;
    float _2104;
    float _2106;
    if (_1719)
    {
        _2102 = _1988;
        _2104 = _1990;
        _2106 = _1992;
    }
    else
    {
        uint _2113 = _1627 + 3u;
        uint _2117 = _1627 + 11u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _372) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _451;
        float _2134 = cbLight._m0[_2113].y + _452;
        float _2135 = cbLight._m0[_2113].z + _453;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_2113].xyz));
        float _4056 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2147 = dot(vec3(_369, _370, _371), vec3(_2140, _2141, _2142));
        float _4067 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4078 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0);
        float _2173 = 1.0 - _2132;
        float _2183 = (0.5 / (((_1793 * ((_2146 * _2173) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2173) + _2132) * _2146))) * _2146;
        float _4089 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2185 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2186 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _2102 = (((((_2166 * _1815) + _535) * cbLight._m0[_2117].x) * _2185) * _2186) + _1988;
        _2104 = (((((_2166 * _1817) + _537) * cbLight._m0[_2117].y) * _2185) * _2186) + _1990;
        _2106 = (((((_2166 * _1818) + _538) * cbLight._m0[_2117].z) * _2185) * _2186) + _1992;
    }
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_1625.y == 0u)
    {
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2261;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2261;
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2261;
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.x;
        uint _2288 = uint((float(_2276.y) * floor(float(uint(cbSceneParam._m0[85u].y * _472) / _2277))) + floor(float(uint(cbSceneParam._m0[85u].x * _471) / _2277)));
        float _2298 = (log2(_2264 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2299 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        uint _2302 = uint(isnan(14.0) ? _2299 : (isnan(_2299) ? 14.0 : min(_2299, 14.0)));
        uvec4 _2307 = texelFetch(g_lightClusterGridBuffer, int(((_2302 << 2u) + (_2288 << 6u)) >> 2u));
        uint _2308 = _2307.x;
        uint _2309 = _2276.z;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((((1u << ((_2309 >> 4u) & 15u)) + 4294967295u) & _2308) == 0u) || ((_2309 & 240u) == 0u))
        {
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
        }
        else
        {
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            uint _2568 = 0u;
            uint _2577;
            bool _2578;
            for (;;)
            {
                _2577 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2568 << 2u)) >> 2u)).x;
                _2578 = _2577 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2578)
                {
                    frontier_phi_66_pred = _2562;
                    frontier_phi_66_pred_1 = _2567;
                    frontier_phi_66_pred_2 = _2566;
                    frontier_phi_66_pred_3 = _2565;
                    frontier_phi_66_pred_4 = _2564;
                    frontier_phi_66_pred_5 = _2563;
                }
                else
                {
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    uint _2713;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2577;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    for (;;)
                    {
                        uint _2717 = uint(findLSB(_2713)) + (_2568 << 5u);
                        uint _2714 = (_2713 + 4294967295u) & _2713;
                        uint _2719 = _2717 * 48u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2739 = (_2717 * 48u) + 4u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2758 = (_2717 * 48u) + 8u;
                        vec3 _2769 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x));
                        float _2773 = _2733.x - _2262;
                        float _2774 = _2733.y - _2263;
                        float _2775 = _2733.z - _2264;
                        float _2776 = dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775));
                        float _2779 = inversesqrt(_2776);
                        float _2780 = _2779 * _2773;
                        float _2781 = _2779 * _2774;
                        float _2782 = _2779 * _2775;
                        float _2783 = dot(vec3(_491, _494, _497), vec3(_2780, _2781, _2782));
                        float _2788 = 1.0 - (_2776 * _2733.w);
                        float _4115 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2789 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2790 = sqrt(_2776) * _2752.w;
                        float _2793 = 1.39999997615814208984375 / (_2790 + 1.39999997615814208984375);
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2783) + _2794;
                        float _2800 = _2790 * _2790;
                        float _2804 = ((isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))) * _2789) / ((_2800 * 0.699999988079071044921875) + 1.0);
                        float _2808 = (-0.0) - _2262;
                        float _2809 = (-0.0) - _2263;
                        float _2810 = (-0.0) - _2264;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2825 = exp2(log2(1.0 / ((_2800 * 3.5) + 5.0)) * 0.25);
                        float _2826 = 1.0 - _566;
                        float _2833 = sqrt(1.0 - ((1.0 - (_2826 * _2826)) * (1.0 - (_2825 * _2825))));
                        float _2834 = _2833 * _2833;
                        float _2835 = _2834 * _2834;
                        float _2836 = _2815 + _2780;
                        float _2837 = _2816 + _2781;
                        float _2838 = _2817 + _2782;
                        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
                        float _2846 = dot(vec3(_491, _494, _497), vec3(_2815, _2816, _2817));
                        float _4131 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2849 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2850 = dot(vec3(_491, _494, _497), vec3(_2842 * _2836, _2842 * _2837, _2842 * _2838));
                        float _4142 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2857 = ((_2853 * _2853) * (_2835 + (-1.0))) + 1.0;
                        float _2858 = _2793 * _2834;
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2783) + _2859;
                        float _4153 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2864 = 1.0 - _2834;
                        float _2874 = (0.5 / (((_2863 * ((_2849 * _2864) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2863 * _2864) + _2834) * _2849))) * _2863;
                        float _4164 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2885 = (((_2835 * 3.1415927410125732421875) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) / ((_2857 * _2857) * ((_2800 * 2.1991131305694580078125) + 3.141590118408203125))) * _2789;
                        _2637 = (_2804 * _2752.x) + _2710;
                        _2638 = (_2804 * _2752.y) + _2711;
                        _2639 = (_2804 * _2752.z) + _2712;
                        _2634 = (_2885 * _2769.x) + _2707;
                        _2635 = (_2885 * _2769.y) + _2708;
                        _2636 = (_2885 * _2769.z) + _2709;
                        if (_2714 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2714;
                        }
                    }
                    frontier_phi_66_pred = _2634;
                    frontier_phi_66_pred_1 = _2639;
                    frontier_phi_66_pred_2 = _2638;
                    frontier_phi_66_pred_3 = _2637;
                    frontier_phi_66_pred_4 = _2636;
                    frontier_phi_66_pred_5 = _2635;
                }
                _2410 = frontier_phi_66_pred;
                _2420 = frontier_phi_66_pred_1;
                _2418 = frontier_phi_66_pred_2;
                _2416 = frontier_phi_66_pred_3;
                _2414 = frontier_phi_66_pred_4;
                _2412 = frontier_phi_66_pred_5;
                uint _2569 = _2568 + 1u;
                if (_2569 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2562 = _2410;
                    _2563 = _2412;
                    _2564 = _2414;
                    _2565 = _2416;
                    _2566 = _2418;
                    _2567 = _2420;
                    _2568 = _2569;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
        }
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.z;
        uint _2426 = (_2424 >> 8u) & 15u;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        if (((4294967295u << _2426) & _2308) == 0u)
        {
            _2530 = _2409;
            _2532 = _2411;
            _2534 = _2413;
            _2536 = _2415;
            _2538 = _2417;
            _2540 = _2419;
        }
        else
        {
            float _2555 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
            float _2556 = _2555 * _2262;
            float _2557 = _2555 * _2263;
            float _2558 = _2555 * _2264;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2426 < ((_2424 >> 12u) & 15u))
            {
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2690 = _2409;
                float _2691 = _2411;
                float _2692 = _2413;
                float _2693 = _2415;
                float _2694 = _2417;
                float _2695 = _2419;
                uint _2696 = _2426;
                uint _2705;
                bool _2706;
                for (;;)
                {
                    _2705 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                    _2706 = _2705 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2706)
                    {
                        frontier_phi_77_pred = _2695;
                        frontier_phi_77_pred_1 = _2694;
                        frontier_phi_77_pred_2 = _2693;
                        frontier_phi_77_pred_3 = _2692;
                        frontier_phi_77_pred_4 = _2691;
                        frontier_phi_77_pred_5 = _2690;
                    }
                    else
                    {
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        uint _2918 = _2705;
                        uint _2919;
                        vec4 _2944;
                        float _2945;
                        vec4 _2960;
                        vec3 _2972;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2929 = ((_2696 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2918));
                            _2919 = (_2918 + 4294967295u) & _2918;
                            uint _2931 = _2929 * 40u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.w;
                            uint _2947 = (_2929 * 40u) + 4u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2929 * 40u) + 8u;
                            _2972 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x));
                            uint _2975 = (_2929 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2929 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2929 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2929 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2264, _3039.z, fma(_2263, _3039.y, _3039.x * _2262)) + _3039.w;
                            _3052 = !((fma(_2264, _3020.z, fma(_2263, _3020.y, _3020.x * _2262)) + _3020.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2944.x - _2262;
                                float _3080 = _2944.y - _2263;
                                float _3081 = _2944.z - _2264;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2945 * _2945));
                                float _4175 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3097 = sqrt(_3082) * _2960.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_491, _494, _497))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2264, _2988.z, fma(_2263, _2988.y, _2988.x * _2262)) + _2988.w) / _3051;
                                float _3111 = (fma(_2264, _3004.z, fma(_2263, _3004.y, _3004.x * _2262)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4191 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _566;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2556;
                                float _3141 = _3087 - _2557;
                                float _3142 = _3088 - _2558;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_491, _494, _497), vec3((-0.0) - _2556, (-0.0) - _2557, (-0.0) - _2558));
                                float _4202 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3154 = dot(vec3(_491, _494, _497), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4213 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_491, _494, _497), vec3(_3086, _3087, _3088))) + _3163;
                                float _4224 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4235 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3117 * _2960.y;
                                frontier_phi_83_pred_1 = _3117 * _2960.x;
                                frontier_phi_83_pred_2 = _3191 * _2972.z;
                                frontier_phi_83_pred_3 = _3191 * _2972.y;
                                frontier_phi_83_pred_4 = _3191 * _2972.x;
                                frontier_phi_83_pred_5 = _3117 * _2960.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3199 = frontier_phi_83_pred;
                            _3198 = frontier_phi_83_pred_1;
                            _3197 = frontier_phi_83_pred_2;
                            _3196 = frontier_phi_83_pred_3;
                            _3195 = frontier_phi_83_pred_4;
                            _3200 = frontier_phi_83_pred_5;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            if (_2919 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2919;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2904;
                        frontier_phi_77_pred_1 = _2903;
                        frontier_phi_77_pred_2 = _2902;
                        frontier_phi_77_pred_3 = _2901;
                        frontier_phi_77_pred_4 = _2900;
                        frontier_phi_77_pred_5 = _2899;
                    }
                    _2541 = frontier_phi_77_pred;
                    _2539 = frontier_phi_77_pred_1;
                    _2537 = frontier_phi_77_pred_2;
                    _2535 = frontier_phi_77_pred_3;
                    _2533 = frontier_phi_77_pred_4;
                    _2531 = frontier_phi_77_pred_5;
                    uint _2697 = _2696 + 1u;
                    if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2690 = _2531;
                        _2691 = _2533;
                        _2692 = _2535;
                        _2693 = _2537;
                        _2694 = _2539;
                        _2695 = _2541;
                        _2696 = _2697;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2535;
                frontier_phi_58_59_ladder_1 = _2541;
                frontier_phi_58_59_ladder_2 = _2539;
                frontier_phi_58_59_ladder_3 = _2537;
                frontier_phi_58_59_ladder_4 = _2533;
                frontier_phi_58_59_ladder_5 = _2531;
            }
            else
            {
                frontier_phi_58_59_ladder = _2413;
                frontier_phi_58_59_ladder_1 = _2419;
                frontier_phi_58_59_ladder_2 = _2417;
                frontier_phi_58_59_ladder_3 = _2415;
                frontier_phi_58_59_ladder_4 = _2411;
                frontier_phi_58_59_ladder_5 = _2409;
            }
            _2530 = frontier_phi_58_59_ladder_5;
            _2532 = frontier_phi_58_59_ladder_4;
            _2534 = frontier_phi_58_59_ladder;
            _2536 = frontier_phi_58_59_ladder_3;
            _2538 = frontier_phi_58_59_ladder_2;
            _2540 = frontier_phi_58_59_ladder_1;
        }
        float _2545 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2321 = (_2545 * _2536) + _1757;
        _2323 = (_2545 * _2538) + _1759;
        _2325 = (_2545 * _2540) + _1761;
        _2327 = ((_2530 * _535) * _2545) + _2102;
        _2329 = ((_2532 * _537) * _2545) + _2104;
        _2331 = ((_2534 * _538) * _2545) + _2106;
    }
    else
    {
        _2321 = _1757;
        _2323 = _1759;
        _2325 = _1761;
        _2327 = _2102;
        _2329 = _2104;
        _2331 = _2106;
    }
    float _4251 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4262 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4273 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _2348 = ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2321 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _550))) + ((_2327 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2349 = ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2323 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _550))) + ((_2329 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2350 = ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2325 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _550))) + ((_2331 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    uint _2351 = _510 + 6u;
    float _2359 = _471 / cbSceneParam._m0[86u].x;
    float _2360 = _472 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2434 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2435 = _2434 / _392;
        float _2446 = _2435 * _444;
        float _2447 = _445 * _2435;
        float _2448 = (-0.0) - _2447;
        float _2450 = _2435 * _446;
        float _2452 = (cbSceneParam._m0[77u].w * _2448) / _2434;
        float _2453 = _2452 + cbSceneParam._m0[79u].w;
        float _2454 = cbSceneParam._m0[79u].w - _2447;
        float _2460 = sqrt(((_2446 * _2446) + (_2447 * _2447)) + (_2450 * _2450));
        float _2463 = (1.0 - (cbSceneParam._m0[77u].w / _2434)) * _2460;
        float _2468 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2470 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2647;
        if (abs((_2448 - _2452) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2647 = ((((_2453 > 0.0) ? exp2(_2468 * _2453) : (2.0 - exp2(_2470 * _2453))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2463;
        }
        else
        {
            float _2591 = 1.0 / cbSceneParam._m0[80u].x;
            float _2592 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : max(_2453, _2454));
            float _2593 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : min(_2453, _2454));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            float _2603 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : min(_2593, 0.0));
            _2647 = ((abs(_2460 / _2448) * cbSceneParam._m0[80u].y) * ((((_2602 - _2603) * 2.0) - ((exp2(_2468 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)))) - exp2(_2468 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0))))) * _2591)) - ((exp2(_2470 * _2602) - exp2(_2470 * _2603)) * _2591))) + (_2463 * cbSceneParam._m0[80u].z);
        }
        vec4 _2649 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2658 = exp2((_2647 * (-1.44269502162933349609375)) * (1.0 - _2649.w));
        float _2659 = log2(_2658);
        float _2675 = log2(_2379);
        _2472 = (exp2(_2675 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].x)) * _2649.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2474 = (exp2(_2675 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].y)) * _2649.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2476 = (exp2(_2675 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].z)) * _2649.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2478 = _2658 * _2379;
    }
    else
    {
        _2472 = _2376;
        _2474 = _2377;
        _2476 = _2378;
        _2478 = _2379;
    }
    bool _2685;
    vec4 _2488;
    vec4 _2510;
    float _2512;
    float _2516;
    float _2517;
    float _2518;
    float _2519;
    bool _2529;
    for (;;)
    {
        _2488 = cbMatDynParam._m0[0u];
        float _2490 = roundEven(_2488.y);
        bool _2491 = _2490 == 3.0;
        float _2492 = log2(_2478);
        float _2499 = exp2(_2492 * cbSceneParam._m0[78u].x) * _2348;
        float _2500 = exp2(_2492 * cbSceneParam._m0[78u].y) * _2349;
        float _2501 = exp2(_2492 * cbSceneParam._m0[78u].z) * _2350;
        float _2508 = _460 + (-0.5);
        _2510 = cbMtdParam._m0[1u];
        _2512 = _2510.y * _2508;
        float _2515 = (_2490 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2516 = _2515 * (_2491 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2472)));
        _2517 = _2515 * (_2491 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2474)));
        _2518 = _2515 * (_2491 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2476)));
        _2519 = _2508 * 0.999000012874603271484375;
        _2529 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2529)
        {
            if ((cbInstanceData._m0[_510 + 7u].x + _2519) < 0.5)
            {
                _2685 = true;
                break;
            }
        }
        uint _2626 = _511 + uint(_2488.w);
        if ((cbInstanceData._m0[_2626].w < 1.0) && ((cbInstanceData._m0[_2626].w + _2519) < 0.5))
        {
            _2685 = true;
            break;
        }
        if ((_2512 + 1.0) < _2510.x)
        {
            _2685 = true;
            break;
        }
        _2685 = false;
        break;
    }
    float _2890;
    if (_2685)
    {
        discard_state = true;
        _2890 = 0.0;
    }
    else
    {
        _2890 = cbInstanceData._m0[_2351].w;
    }
    SV_Target.x = _2516;
    SV_Target.y = _2517;
    SV_Target.z = _2518;
    SV_Target.w = _2890;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2351].w;
    discard_exit();
}


