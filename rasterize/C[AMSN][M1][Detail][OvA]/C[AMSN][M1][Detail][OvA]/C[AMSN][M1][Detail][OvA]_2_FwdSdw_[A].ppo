#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _958;
float _3629;
float _3630;
float _3631;
float _3632;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _255 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _264 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _232.x) * cbMtdParam._m0[9u].x) * _255.x;
    float _268 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _232.y) * cbMtdParam._m0[9u].y) * _255.y;
    float _272 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _232.z) * cbMtdParam._m0[9u].z) * _255.z;
    vec4 _285 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _287 = _285.x;
    vec4 _304 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _308 = _304.z;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _335 = cbMtdParam._m0[13u].w * _308;
    float _338 = (((((_308 * 2.0) * _321.z) * cbMtdParam._m0[14u].x) - _335) * cbMtdParam._m0[13u].y) + _335;
    float _342 = (_304.x * 2.0) + (-1.0);
    float _344 = (_304.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3641 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _351 = sqrt(1.0 - (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))));
    float _358 = (cbMtdParam._m0[13u].x * ((_321.x * 2.0) + (-1.0))) + _342;
    float _359 = (cbMtdParam._m0[13u].x * ((_321.y * 2.0) + (-1.0))) + _344;
    float _362 = fma(_351, _202 * NORMAL.x, fma(_359, _209 * TANGENT.x, (_195 * _187) * _358));
    float _365 = fma(_351, _202 * NORMAL.y, fma(_359, _209 * TANGENT.y, (_195 * _188) * _358));
    float _368 = fma(_351, _202 * NORMAL.z, fma(_359, _209 * TANGENT.z, (_195 * _189) * _358));
    float _372 = inversesqrt(dot(vec3(_362, _365, _368), vec3(_362, _365, _368)));
    float _373 = _372 * _362;
    float _374 = _372 * _365;
    float _375 = _372 * _368;
    float _3652 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _376 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3674 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3685 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3696 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _380 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _396 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _438 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _448 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _438);
    float _449 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _438);
    float _450 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _438);
    float _454 = inversesqrt(dot(vec3(_448, _449, _450), vec3(_448, _449, _450)));
    float _455 = _448 * _454;
    float _456 = _449 * _454;
    float _457 = _450 * _454;
    vec4 _462 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _464 = _462.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _637 = sqrt(((_448 * _448) + (_449 * _449)) + (_450 * _450));
        float _643 = (cbMatDynParam._m0[5u].x * _637) + cbMatDynParam._m0[5u].y;
        float _3707 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _648 = (cbMatDynParam._m0[5u].z * _637) + cbMatDynParam._m0[5u].w;
        float _3718 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) - _644)) + _644) < ((_464 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _475 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _476 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _495 = fma(_375, cbSceneParam._m0[5u].z, fma(_374, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _373));
    float _498 = fma(_375, cbSceneParam._m0[6u].z, fma(_374, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _373));
    float _501 = fma(_375, cbSceneParam._m0[7u].z, fma(_374, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _373));
    uint _514 = uint(roundEven(NORMAL.w)) * 13u;
    uint _515 = _514 + 9u;
    uint _516 = _515 + uint(cbMatDynParam._m0[0u].w);
    float _522 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_516].x;
    float _523 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_516].y;
    float _524 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_516].z;
    float _3729 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _528 = 1.0 - _380;
    float _529 = _525 * _528;
    float _530 = _526 * _528;
    float _531 = _527 * _528;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _380;
    float _537 = (_526 + (-0.039999999105930328369140625)) * _380;
    float _538 = (_527 + (-0.039999999105930328369140625)) * _380;
    float _539 = _536 + 0.039999999105930328369140625;
    float _541 = _537 + 0.039999999105930328369140625;
    float _542 = _538 + 0.039999999105930328369140625;
    vec4 _551 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _475, cbSceneParam._m0[86u].y * _476));
    float _554 = _551.x * TEXCOORD_5.w;
    float _555 = dot(vec3(_373, _374, _375), vec3(_455, _456, _457));
    float _558 = _555 * 2.0;
    float _562 = (_558 * _373) - _455;
    float _563 = (_558 * _374) - _456;
    float _564 = (_558 * _375) - _457;
    float _568 = abs(dot(vec3(_455, _456, _457), vec3(_373, _374, _375)));
    float _3762 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _570 = sqrt(_376);
    float _583 = exp2((_570 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_570 * 3.0));
    float _589 = (1.0 - _583) * ((_570 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _590 = _583 * _570;
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _686 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _690 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _715 = _618 + _373;
        float _716 = _622 + _374;
        float _717 = _626 + _375;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_373, _374, _375), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3810 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_373, _374, _375), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3843 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_373, _374, _375), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3876 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _1005 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _1009 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _1032 = _618 + _373;
        float _1033 = _622 + _374;
        float _1034 = _626 + _375;
        float _1044 = fma(_1034, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032)) - _1001;
        float _1045 = fma(_1034, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032)) - _1005;
        float _1046 = fma(_1034, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032)) - _1009;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1001 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1005 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[35u].z) + ((((((_1009 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1100 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1067.x + (-0.5));
        float _1102 = _1100 * (_1067.y + (-0.5));
        float _1103 = _1100 * (_1067.z + (-0.5));
        float _1110 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1074.x + (-0.5));
        float _1112 = _1110 * (_1074.y + (-0.5));
        float _1113 = _1110 * (_1074.z + (-0.5));
        float _1120 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1081.x + (-0.5));
        float _1122 = _1120 * (_1081.y + (-0.5));
        float _1123 = _1120 * (_1081.z + (-0.5));
        float _1130 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1088.x + (-0.5));
        float _1132 = _1130 * (_1088.y + (-0.5));
        float _1133 = _1130 * (_1088.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_373, _374, _375), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3939 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1164 + 1.0))) + _1169) * _1134;
        float _1179 = _1102 * 0.5;
        float _1180 = _1112 * 0.5;
        float _1181 = _1122 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_373, _374, _375), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3972 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1206 + 1.0))) + _1211) * _1135;
        float _1221 = _1103 * 0.5;
        float _1222 = _1113 * 0.5;
        float _1223 = _1123 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_373, _374, _375), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4005 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1248 + 1.0))) + _1253) * _1136;
        _1270 = _1103;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1113;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1123;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1136;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = _958;
        _1280 = _958;
        _1281 = _958;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _971)) + _971;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1317 = fma(_1296, cbSceneParam._m0[89u].z, fma(_1295, cbSceneParam._m0[89u].y, _1294 * cbSceneParam._m0[89u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[90u].z, fma(_1295, cbSceneParam._m0[90u].y, _1294 * cbSceneParam._m0[90u].x));
    float _1323 = fma(_1296, cbSceneParam._m0[91u].z, fma(_1295, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1294));
    float _1338 = _562 * 0.5;
    float _1339 = _563 * 0.5;
    float _1340 = _564 * 0.5;
    float _1341 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1344 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1347 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1381;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1354 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_957, _961, _964, _967));
        float _1358 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_959, _962, _965, _968));
        float _1362 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_960, _963, _966, _969));
        float _1369 = dot(vec4(cbModelParam._m0[39u]), vec4(_1338, _1339, _1340, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1392;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1383 = dot(vec4(cbModelParam._m0[40u]), vec4(_1338, _1339, _1340, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1396 = (_1392 * cbModelParam._m0[1u].x) + (_1381 * (1.0 - cbModelParam._m0[1u].x));
    float _1406 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _376);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1406 : min(cbModelParam._m0[25u].z, _1406));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1454 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1458 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1462 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1465 = fma(_564, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562));
        float _1468 = fma(_564, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562));
        float _1471 = fma(_564, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562));
        float _1499;
        if (_1465 > 0.0)
        {
            _1499 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1499 = frontier_phi_17_15_ladder;
        }
        float _1675;
        if (_1468 > 0.0)
        {
            _1675 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1675 = frontier_phi_26_22_ladder;
        }
        float _1970;
        if (_1471 > 0.0)
        {
            _1970 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1970 = frontier_phi_38_33_ladder;
        }
        float _1972 = isnan(_1675) ? _1499 : (isnan(_1499) ? _1675 : min(_1499, _1675));
        float _1973 = isnan(_1970) ? _1972 : (isnan(_1972) ? _1970 : min(_1972, _1970));
        float _1977 = (_1973 * _1465) + _1454;
        float _1978 = (_1973 * _1468) + _1458;
        float _1979 = (_1973 * _1471) + _1462;
        float _1980 = _1973 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1980;
        float _1984 = _1980 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 > _1984) || ((_1978 < _1982) || ((_1977 < _1982) || (_1977 > _1984))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2124 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1979, cbModelParam._m0[9u].z, fma(_1978, cbModelParam._m0[9u].y, _1977 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1979, cbModelParam._m0[10u].z, fma(_1978, cbModelParam._m0[10u].y, _1977 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1979, cbModelParam._m0[11u].z, fma(_1978, cbModelParam._m0[11u].y, _1977 * cbModelParam._m0[11u].x))), _1407);
            frontier_phi_16_38_ladder = _2124.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2124.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2124.x * cbModelParam._m0[1u].y;
        }
        _1487 = frontier_phi_16_38_ladder_2;
        _1489 = frontier_phi_16_38_ladder_1;
        _1491 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_562, _563, _564), _1407);
        _1487 = _1475.x * cbModelParam._m0[1u].y;
        _1489 = _1475.y * cbModelParam._m0[1u].y;
        _1491 = _1475.z * cbModelParam._m0[1u].y;
    }
    float _1495 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _376);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1495 : min(cbModelParam._m0[25u].w, _1495));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_564, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562));
        float _1567 = fma(_564, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562));
        float _1570 = fma(_564, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562));
        float _1680;
        if (_1564 > 0.0)
        {
            _1680 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1680 = frontier_phi_28_24_ladder;
        }
        float _1997;
        if (_1567 > 0.0)
        {
            _1997 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1997 = frontier_phi_40_35_ladder;
        }
        float _2335;
        if (_1570 > 0.0)
        {
            _2335 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2335 = frontier_phi_50_47_ladder;
        }
        float _2337 = isnan(_1997) ? _1680 : (isnan(_1680) ? _1997 : min(_1680, _1997));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1564) + _1553;
        float _2343 = (_2338 * _1567) + _1557;
        float _2344 = (_2338 * _1570) + _1561;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1496);
            frontier_phi_25_50_ladder = _2466.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2466.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2466.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_25_50_ladder_2;
        _1591 = frontier_phi_25_50_ladder_1;
        _1593 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_562, _563, _564), _1496);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1606 = (((_589 * _539) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_589 * _541) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1610 = (((_589 * _542) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1667 = _1654 / _1666;
    float _1668 = _1658 / _1666;
    float _1669 = _1662 / _1666;
    float _1816;
    float _1817;
    float _1818;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1696 = ((uint(_1669 > cbSceneParam._m0[59u].y) + uint(_1669 > cbSceneParam._m0[59u].x)) + uint(_1669 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1697 = _1696 + 43u;
        uint _1705 = _1696 + 44u;
        uint _1713 = _1696 + 45u;
        uint _1721 = _1696 + 46u;
        float _1732 = fma(_1666, cbSceneParam._m0[_1697].w, fma(_1662, cbSceneParam._m0[_1697].z, fma(_1658, cbSceneParam._m0[_1697].y, _1654 * cbSceneParam._m0[_1697].x)));
        float _1736 = fma(_1666, cbSceneParam._m0[_1705].w, fma(_1662, cbSceneParam._m0[_1705].z, fma(_1658, cbSceneParam._m0[_1705].y, _1654 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1666, cbSceneParam._m0[_1721].w, fma(_1662, cbSceneParam._m0[_1721].z, fma(_1658, cbSceneParam._m0[_1721].y, _1654 * cbSceneParam._m0[_1721].x)));
        float _1749 = cbSceneParam._m0[33u].z * _1744;
        float _1751 = cbSceneParam._m0[33u].w * _1744;
        float _1754 = fma(_1666, cbSceneParam._m0[_1713].w, fma(_1662, cbSceneParam._m0[_1713].z, fma(_1658, cbSceneParam._m0[_1713].y, _1654 * cbSceneParam._m0[_1713].x))) / _1744;
        float _1802 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
        float _4131 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1809 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 + _1732) / _1744, (_1751 + _1736) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 + _1732) / _1744, (_1736 - _1749) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1749) / _1744, (_1736 - _1751) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1751) / _1744, (_1749 + _1736) / _1744), _1754), 0.0)).x), vec4(0.25)));
        _1816 = 1.0 - (_1809 * cbSceneParam._m0[34u].x);
        _1817 = 1.0 - (_1809 * cbSceneParam._m0[34u].y);
        _1818 = 1.0 - (_1809 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1816 = 1.0;
        _1817 = 1.0;
        _1818 = 1.0;
    }
    float _1882;
    float _1884;
    float _1886;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1870 = fma(_1666, cbSceneParam._m0[63u].w, fma(_1662, cbSceneParam._m0[63u].z, fma(_1658, cbSceneParam._m0[63u].y, _1654 * cbSceneParam._m0[63u].x)));
        float _1871 = fma(_1666, cbSceneParam._m0[60u].w, fma(_1662, cbSceneParam._m0[60u].z, fma(_1658, cbSceneParam._m0[60u].y, _1654 * cbSceneParam._m0[60u].x))) / _1870;
        float _1872 = fma(_1666, cbSceneParam._m0[61u].w, fma(_1662, cbSceneParam._m0[61u].z, fma(_1658, cbSceneParam._m0[61u].y, _1654 * cbSceneParam._m0[61u].x))) / _1870;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1871 >= cbSceneParam._m0[64u].x) && (_1872 >= cbSceneParam._m0[64u].y)) && (_1871 <= cbSceneParam._m0[64u].z)) && (_1872 <= cbSceneParam._m0[64u].w))
        {
            float _2010 = fma(_1666, cbSceneParam._m0[62u].w, fma(_1662, cbSceneParam._m0[62u].z, fma(_1658, cbSceneParam._m0[62u].y, _1654 * cbSceneParam._m0[62u].x))) / _1870;
            float _2014 = isnan(cbSceneParam._m0[41u].w) ? _2010 : (isnan(_2010) ? cbSceneParam._m0[41u].w : max(_2010, cbSceneParam._m0[41u].w));
            float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
            float _4147 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
            float _2064 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1871, cbSceneParam._m0[33u].w + _1872), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1871, _1872 - cbSceneParam._m0[33u].z), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].z, _1872 - cbSceneParam._m0[33u].w), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1872), _2014), 0.0)).x), vec4(0.25)));
            float _2068 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
            float _2069 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
            float _2070 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2070) ? _1818 : (isnan(_1818) ? _2070 : min(_1818, _2070));
            frontier_phi_37_36_ladder_1 = isnan(_2069) ? _1817 : (isnan(_1817) ? _2069 : min(_1817, _2069));
            frontier_phi_37_36_ladder_2 = isnan(_2068) ? _1816 : (isnan(_1816) ? _2068 : min(_1816, _2068));
        }
        else
        {
            frontier_phi_37_36_ladder = _1818;
            frontier_phi_37_36_ladder_1 = _1817;
            frontier_phi_37_36_ladder_2 = _1816;
        }
        _1882 = frontier_phi_37_36_ladder_2;
        _1884 = frontier_phi_37_36_ladder_1;
        _1886 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1882 = _1816;
        _1884 = _1817;
        _1886 = _1818;
    }
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_514 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _554 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1929 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1933 = _1893 | 1u;
    float _1944 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_373, _374, _375));
    float _1947 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_373, _374, _375));
    float _4183 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _4194 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1952 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.3183098733425140380859375;
    float _1954 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _1961 = ((cbLight._m0[_1910].x * _1916) * _1954) + (((cbLight._m0[_1920].x * _1882) * _1929) * _1952);
    float _1962 = ((_1916 * cbLight._m0[_1910].y) * _1954) + (((cbLight._m0[_1920].y * _1884) * _1929) * _1952);
    float _1963 = ((_1916 * cbLight._m0[_1910].z) * _1954) + (((cbLight._m0[_1920].z * _1886) * _1929) * _1952);
    uvec4 _1967 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1969 = _1967.x == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_1969)
    {
        _2071 = _1961;
        _2073 = _1962;
        _2075 = _1963;
    }
    else
    {
        uint _2079 = _1893 + 6u;
        float _2095 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4205 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2098 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2071 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1961;
        _2073 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1962;
        _2075 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1963;
    }
    bool _2078 = _1967.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2078)
    {
        _2133 = _2071;
        _2135 = _2073;
        _2137 = _2075;
    }
    else
    {
        uint _2306 = _1893 + 7u;
        float _2322 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4221 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2325 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2133 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2071;
        _2135 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2073;
        _2137 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2075;
    }
    uint _2140 = _1893 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _376) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1893].x + _455;
    float _2156 = cbLight._m0[_1893].y + _456;
    float _2157 = cbLight._m0[_1893].z + _457;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1893].xyz));
    float _4237 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _2169 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2170 = dot(vec3(_373, _374, _375), vec3(_2162, _2163, _2164));
    float _4259 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2162, _2163, _2164));
    float _4270 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
    float _2191 = 0.959999978542327880859375 - _536;
    float _2193 = 0.959999978542327880859375 - _537;
    float _2194 = 0.959999978542327880859375 - _538;
    float _2201 = 1.0 - _2154;
    float _2212 = (0.5 / (((_2169 * ((_2168 * _2201) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2201) + _2154) * _2168))) * _2168;
    float _4281 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2228 = _1893 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _376) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_1933].x + _455;
    float _2242 = cbLight._m0[_1933].y + _456;
    float _2243 = cbLight._m0[_1933].z + _457;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1933].xyz));
    float _4292 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2255 = dot(vec3(_373, _374, _375), vec3(_2248, _2249, _2250));
    float _4303 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2248, _2249, _2250));
    float _4314 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0);
    float _2281 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2169 * ((_2254 * _2281) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2281) + _2240) * _2254))) * _2254;
    float _4325 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2303 = (((((_2274 * _2191) + _539) * cbLight._m0[_2228].x) * _2293) * _1916) + ((((cbLight._m0[_2140].x * _1882) * ((_2190 * _2191) + _539)) * _2214) * _1929);
    float _2304 = (((((_2274 * _2193) + _541) * cbLight._m0[_2228].y) * _2293) * _1916) + ((((cbLight._m0[_2140].y * _1884) * ((_2190 * _2193) + _541)) * _2214) * _1929);
    float _2305 = (((((_2274 * _2194) + _542) * cbLight._m0[_2228].z) * _2293) * _1916) + ((((cbLight._m0[_2140].z * _1886) * ((_2190 * _2194) + _542)) * _2214) * _1929);
    float _2361;
    float _2363;
    float _2365;
    if (_1969)
    {
        _2361 = _2303;
        _2363 = _2304;
        _2365 = _2305;
    }
    else
    {
        uint _2367 = _1893 + 2u;
        uint _2371 = _1893 + 10u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _376) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _455;
        float _2388 = cbLight._m0[_2367].y + _456;
        float _2389 = cbLight._m0[_2367].z + _457;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2367].xyz));
        float _4336 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2401 = dot(vec3(_373, _374, _375), vec3(_2394, _2395, _2396));
        float _4347 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4358 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
        float _2427 = 1.0 - _2386;
        float _2437 = (0.5 / (((_2169 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2427) + _2386) * _2400))) * _2400;
        float _4369 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2361 = (((((_2420 * _2191) + _539) * cbLight._m0[_2371].x) * _2439) * _2440) + _2303;
        _2363 = (((((_2420 * _2193) + _541) * cbLight._m0[_2371].y) * _2439) * _2440) + _2304;
        _2365 = (((((_2420 * _2194) + _542) * cbLight._m0[_2371].z) * _2439) * _2440) + _2305;
    }
    float _2471;
    float _2473;
    float _2475;
    if (_2078)
    {
        _2471 = _2361;
        _2473 = _2363;
        _2475 = _2365;
    }
    else
    {
        uint _2482 = _1893 + 3u;
        uint _2486 = _1893 + 11u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _376) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _455;
        float _2503 = cbLight._m0[_2482].y + _456;
        float _2504 = cbLight._m0[_2482].z + _457;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2482].xyz));
        float _4385 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2516 = dot(vec3(_373, _374, _375), vec3(_2509, _2510, _2511));
        float _4396 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4407 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2169 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2542) + _2501) * _2515))) * _2515;
        float _4418 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2471 = (((((_2535 * _2191) + _539) * cbLight._m0[_2486].x) * _2554) * _2555) + _2361;
        _2473 = (((((_2535 * _2193) + _541) * cbLight._m0[_2486].y) * _2554) * _2555) + _2363;
        _2475 = (((((_2535 * _2194) + _542) * cbLight._m0[_2486].z) * _2554) * _2555) + _2365;
    }
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_1891.y == 0u)
    {
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.x;
        uint _2588 = uint((float(_2576.y) * floor(float(uint(cbSceneParam._m0[85u].y * _476) / _2577))) + floor(float(uint(cbSceneParam._m0[85u].x * _475) / _2577)));
        float _2598 = (log2(_1669 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2599 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        uint _2602 = uint(isnan(14.0) ? _2599 : (isnan(_2599) ? 14.0 : min(_2599, 14.0)));
        uvec4 _2607 = texelFetch(g_lightClusterGridBuffer, int(((_2602 << 2u) + (_2588 << 6u)) >> 2u));
        uint _2608 = _2607.x;
        uint _2609 = _2576.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2609 >> 4u) & 15u)) + 4294967295u) & _2608) == 0u) || ((_2609 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            uint _2847 = 0u;
            uint _2856;
            bool _2857;
            for (;;)
            {
                _2856 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                _2857 = _2856 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2857)
                {
                    frontier_phi_71_pred = _2846;
                    frontier_phi_71_pred_1 = _2845;
                    frontier_phi_71_pred_2 = _2844;
                    frontier_phi_71_pred_3 = _2843;
                    frontier_phi_71_pred_4 = _2842;
                    frontier_phi_71_pred_5 = _2841;
                }
                else
                {
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    uint _2992;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2856;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    for (;;)
                    {
                        uint _2996 = uint(findLSB(_2992)) + (_2847 << 5u);
                        uint _2993 = (_2992 + 4294967295u) & _2992;
                        uint _2998 = _2996 * 48u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3018 = (_2996 * 48u) + 4u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3037 = (_2996 * 48u) + 8u;
                        vec3 _3048 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x));
                        float _3052 = _3012.x - _1667;
                        float _3053 = _3012.y - _1668;
                        float _3054 = _3012.z - _1669;
                        float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                        float _3058 = inversesqrt(_3055);
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3062 = dot(vec3(_495, _498, _501), vec3(_3059, _3060, _3061));
                        float _3067 = 1.0 - (_3055 * _3012.w);
                        float _4444 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3069 = sqrt(_3055) * _3031.w;
                        float _3072 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _3062) + _3073;
                        float _3079 = _3069 * _3069;
                        float _3083 = ((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3068) / ((_3079 * 0.699999988079071044921875) + 1.0);
                        float _3087 = (-0.0) - _1667;
                        float _3088 = (-0.0) - _1668;
                        float _3089 = (-0.0) - _1669;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3103 = exp2(log2(1.0 / ((_3079 * 3.5) + 5.0)) * 0.25);
                        float _3104 = 1.0 - _570;
                        float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                        float _3112 = _3111 * _3111;
                        float _3113 = _3112 * _3112;
                        float _3114 = _3094 + _3059;
                        float _3115 = _3095 + _3060;
                        float _3116 = _3096 + _3061;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3124 = dot(vec3(_495, _498, _501), vec3(_3094, _3095, _3096));
                        float _4460 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3128 = dot(vec3(_495, _498, _501), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                        float _4471 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                        float _3136 = _3072 * _3112;
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3062) + _3137;
                        float _4482 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3142 = 1.0 - _3112;
                        float _3152 = (0.5 / (((_3141 * ((_3127 * _3142) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3112) * _3127))) * _3141;
                        float _4493 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3163 = (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) / ((_3135 * _3135) * ((_3079 * 2.1991131305694580078125) + 3.141590118408203125))) * _3068;
                        _2916 = (_3083 * _3031.x) + _2989;
                        _2917 = (_3083 * _3031.y) + _2990;
                        _2918 = (_3083 * _3031.z) + _2991;
                        _2913 = (_3163 * _3048.x) + _2986;
                        _2914 = (_3163 * _3048.y) + _2987;
                        _2915 = (_3163 * _3048.z) + _2988;
                        if (_2993 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2993;
                        }
                    }
                    frontier_phi_71_pred = _2918;
                    frontier_phi_71_pred_1 = _2917;
                    frontier_phi_71_pred_2 = _2916;
                    frontier_phi_71_pred_3 = _2915;
                    frontier_phi_71_pred_4 = _2914;
                    frontier_phi_71_pred_5 = _2913;
                }
                _2699 = frontier_phi_71_pred;
                _2697 = frontier_phi_71_pred_1;
                _2695 = frontier_phi_71_pred_2;
                _2693 = frontier_phi_71_pred_3;
                _2691 = frontier_phi_71_pred_4;
                _2689 = frontier_phi_71_pred_5;
                uint _2848 = _2847 + 1u;
                if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2841 = _2689;
                    _2842 = _2691;
                    _2843 = _2693;
                    _2844 = _2695;
                    _2845 = _2697;
                    _2846 = _2699;
                    _2847 = _2848;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((4294967295u << _2705) & _2608) == 0u)
        {
            _2809 = _2688;
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
        }
        else
        {
            float _2834 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
            float _2835 = _2834 * _1667;
            float _2836 = _2834 * _1668;
            float _2837 = _2834 * _1669;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2969 = _2688;
                float _2970 = _2690;
                float _2971 = _2692;
                float _2972 = _2694;
                float _2973 = _2696;
                float _2974 = _2698;
                uint _2975 = _2705;
                uint _2984;
                bool _2985;
                for (;;)
                {
                    _2984 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                    _2985 = _2984 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2985)
                    {
                        frontier_phi_82_pred = _2974;
                        frontier_phi_82_pred_1 = _2973;
                        frontier_phi_82_pred_2 = _2972;
                        frontier_phi_82_pred_3 = _2971;
                        frontier_phi_82_pred_4 = _2970;
                        frontier_phi_82_pred_5 = _2969;
                    }
                    else
                    {
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3190 = _2969;
                        float _3191 = _2970;
                        float _3192 = _2971;
                        float _3193 = _2972;
                        float _3194 = _2973;
                        float _3195 = _2974;
                        uint _3196 = _2984;
                        uint _3197;
                        vec4 _3222;
                        float _3223;
                        vec4 _3238;
                        vec3 _3250;
                        vec4 _3266;
                        vec4 _3282;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3207 = ((_2975 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3196));
                            _3197 = (_3196 + 4294967295u) & _3196;
                            uint _3209 = _3207 * 40u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3223 = _3222.w;
                            uint _3225 = (_3207 * 40u) + 4u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3207 * 40u) + 8u;
                            _3250 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x));
                            uint _3253 = (_3207 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3207 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3207 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3207 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_1669, _3317.z, fma(_1668, _3317.y, _3317.x * _1667)) + _3317.w;
                            _3330 = !((fma(_1669, _3298.z, fma(_1668, _3298.y, _3298.x * _1667)) + _3298.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3222.x - _1667;
                                float _3358 = _3222.y - _1668;
                                float _3359 = _3222.z - _1669;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3223 * _3223));
                                float _4504 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3375 = sqrt(_3360) * _3238.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_495, _498, _501))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_1669, _3266.z, fma(_1668, _3266.y, _3266.x * _1667)) + _3266.w) / _3329;
                                float _3389 = (fma(_1669, _3282.z, fma(_1668, _3282.y, _3282.x * _1667)) + _3282.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4520 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _570;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2835;
                                float _3419 = _3365 - _2836;
                                float _3420 = _3366 - _2837;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_495, _498, _501), vec3((-0.0) - _2835, (-0.0) - _2836, (-0.0) - _2837));
                                float _4531 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3432 = dot(vec3(_495, _498, _501), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4542 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_495, _498, _501), vec3(_3364, _3365, _3366))) + _3441;
                                float _4553 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4564 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3395 * _3238.z;
                                frontier_phi_88_pred_1 = _3395 * _3238.y;
                                frontier_phi_88_pred_2 = _3395 * _3238.x;
                                frontier_phi_88_pred_3 = _3469 * _3250.z;
                                frontier_phi_88_pred_4 = _3469 * _3250.y;
                                frontier_phi_88_pred_5 = _3469 * _3250.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3478 = frontier_phi_88_pred;
                            _3477 = frontier_phi_88_pred_1;
                            _3476 = frontier_phi_88_pred_2;
                            _3475 = frontier_phi_88_pred_3;
                            _3474 = frontier_phi_88_pred_4;
                            _3473 = frontier_phi_88_pred_5;
                            _3180 = _3476 + _3193;
                            _3181 = _3477 + _3194;
                            _3182 = _3478 + _3195;
                            _3177 = _3473 + _3190;
                            _3178 = _3474 + _3191;
                            _3179 = _3475 + _3192;
                            if (_3197 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3197;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3182;
                        frontier_phi_82_pred_1 = _3181;
                        frontier_phi_82_pred_2 = _3180;
                        frontier_phi_82_pred_3 = _3179;
                        frontier_phi_82_pred_4 = _3178;
                        frontier_phi_82_pred_5 = _3177;
                    }
                    _2820 = frontier_phi_82_pred;
                    _2818 = frontier_phi_82_pred_1;
                    _2816 = frontier_phi_82_pred_2;
                    _2814 = frontier_phi_82_pred_3;
                    _2812 = frontier_phi_82_pred_4;
                    _2810 = frontier_phi_82_pred_5;
                    uint _2976 = _2975 + 1u;
                    if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2969 = _2810;
                        _2970 = _2812;
                        _2971 = _2814;
                        _2972 = _2816;
                        _2973 = _2818;
                        _2974 = _2820;
                        _2975 = _2976;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2816;
                frontier_phi_63_64_ladder_1 = _2820;
                frontier_phi_63_64_ladder_2 = _2818;
                frontier_phi_63_64_ladder_3 = _2814;
                frontier_phi_63_64_ladder_4 = _2812;
                frontier_phi_63_64_ladder_5 = _2810;
            }
            else
            {
                frontier_phi_63_64_ladder = _2694;
                frontier_phi_63_64_ladder_1 = _2698;
                frontier_phi_63_64_ladder_2 = _2696;
                frontier_phi_63_64_ladder_3 = _2692;
                frontier_phi_63_64_ladder_4 = _2690;
                frontier_phi_63_64_ladder_5 = _2688;
            }
            _2809 = frontier_phi_63_64_ladder_5;
            _2811 = frontier_phi_63_64_ladder_4;
            _2813 = frontier_phi_63_64_ladder_3;
            _2815 = frontier_phi_63_64_ladder;
            _2817 = frontier_phi_63_64_ladder_2;
            _2819 = frontier_phi_63_64_ladder_1;
        }
        float _2824 = isnan(1.0) ? _554 : (isnan(_554) ? 1.0 : min(_554, 1.0));
        _2621 = (_2824 * _2815) + _2133;
        _2623 = (_2824 * _2817) + _2135;
        _2625 = (_2824 * _2819) + _2137;
        _2627 = ((_2809 * _539) * _2824) + _2471;
        _2629 = ((_2811 * _541) * _2824) + _2473;
        _2631 = ((_2813 * _542) * _2824) + _2475;
    }
    else
    {
        _2621 = _2133;
        _2623 = _2135;
        _2625 = _2137;
        _2627 = _2471;
        _2629 = _2473;
        _2631 = _2475;
    }
    float _4580 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4591 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4602 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _2648 = ((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2621 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _554))) + ((_2627 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2649 = ((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2623 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _554))) + ((_2629 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2650 = ((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2625 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _554))) + ((_2631 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    uint _2651 = _514 + 6u;
    float _2659 = _475 / cbSceneParam._m0[86u].x;
    float _2660 = _476 / cbSceneParam._m0[86u].y;
    vec4 _2674 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, (log2((isnan(cbSceneParam._m0[77u].w) ? _396 : (isnan(_396) ? cbSceneParam._m0[77u].w : min(_396, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2676 = _2674.x;
    float _2677 = _2674.y;
    float _2678 = _2674.z;
    float _2679 = _2674.w;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_396 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_396) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _396 : min(cbSceneParam._m0[80u].w, _396));
        float _2714 = _2713 / _396;
        float _2725 = _2714 * _448;
        float _2726 = _449 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2729 = _2714 * _450;
        float _2731 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2732 = _2731 + cbSceneParam._m0[79u].w;
        float _2733 = cbSceneParam._m0[79u].w - _2726;
        float _2739 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2729 * _2729));
        float _2742 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2739;
        float _2747 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2749 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2926;
        if (abs((_2727 - _2731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2926 = ((((_2732 > 0.0) ? exp2(_2747 * _2732) : (2.0 - exp2(_2749 * _2732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2742;
        }
        else
        {
            float _2870 = 1.0 / cbSceneParam._m0[80u].x;
            float _2871 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : max(_2732, _2733));
            float _2872 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : min(_2732, _2733));
            float _2881 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : min(_2871, 0.0));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            _2926 = ((abs(_2739 / _2727) * cbSceneParam._m0[80u].y) * ((((_2881 - _2882) * 2.0) - ((exp2(_2747 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)))) - exp2(_2747 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))))) * _2870)) - ((exp2(_2749 * _2881) - exp2(_2749 * _2882)) * _2870))) + (_2742 * cbSceneParam._m0[80u].z);
        }
        vec4 _2928 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, 1.0), 0.0);
        float _2937 = exp2((_2926 * (-1.44269502162933349609375)) * (1.0 - _2928.w));
        float _2938 = log2(_2937);
        float _2954 = log2(_2679);
        _2751 = (exp2(_2954 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].x)) * _2928.x) / cbSceneParam._m0[78u].x)) + _2676;
        _2753 = (exp2(_2954 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].y)) * _2928.y) / cbSceneParam._m0[78u].y)) + _2677;
        _2755 = (exp2(_2954 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].z)) * _2928.z) / cbSceneParam._m0[78u].z)) + _2678;
        _2757 = _2937 * _2679;
    }
    else
    {
        _2751 = _2676;
        _2753 = _2677;
        _2755 = _2678;
        _2757 = _2679;
    }
    bool _2964;
    vec4 _2767;
    vec4 _2789;
    float _2791;
    float _2795;
    float _2796;
    float _2797;
    float _2798;
    bool _2808;
    for (;;)
    {
        _2767 = cbMatDynParam._m0[0u];
        float _2769 = roundEven(_2767.y);
        bool _2770 = _2769 == 3.0;
        float _2771 = log2(_2757);
        float _2778 = exp2(_2771 * cbSceneParam._m0[78u].x) * _2648;
        float _2779 = exp2(_2771 * cbSceneParam._m0[78u].y) * _2649;
        float _2780 = exp2(_2771 * cbSceneParam._m0[78u].z) * _2650;
        float _2787 = _464 + (-0.5);
        _2789 = cbMtdParam._m0[1u];
        _2791 = _2789.y * _2787;
        float _2794 = (_2769 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2795 = _2794 * (_2770 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2751)));
        _2796 = _2794 * (_2770 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2753)));
        _2797 = _2794 * (_2770 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2755)));
        _2798 = _2787 * 0.999000012874603271484375;
        _2808 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2808)
        {
            if ((cbInstanceData._m0[_514 + 7u].x + _2798) < 0.5)
            {
                _2964 = true;
                break;
            }
        }
        uint _2905 = _515 + uint(_2767.w);
        if ((cbInstanceData._m0[_2905].w < 1.0) && ((cbInstanceData._m0[_2905].w + _2798) < 0.5))
        {
            _2964 = true;
            break;
        }
        if ((_2791 + 1.0) < _2789.x)
        {
            _2964 = true;
            break;
        }
        _2964 = false;
        break;
    }
    float _3168;
    if (_2964)
    {
        discard_state = true;
        _3168 = 0.0;
    }
    else
    {
        _3168 = cbInstanceData._m0[_2651].w;
    }
    SV_Target.x = _2795;
    SV_Target.y = _2796;
    SV_Target.z = _2797;
    SV_Target.w = _3168;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2651].w;
    discard_exit();
}


