#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _877;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _226.x) * cbMtdParam._m0[9u].x) * _249.x;
    float _262 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _226.y) * cbMtdParam._m0[9u].y) * _249.y;
    float _266 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _226.z) * cbMtdParam._m0[9u].z) * _249.z;
    vec4 _283 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _287 = _283.z;
    vec4 _300 = texture(sampler2D(C_AMSN_M1_Detail_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _314 = cbMtdParam._m0[13u].w * _287;
    float _317 = (((((_287 * 2.0) * _300.z) * cbMtdParam._m0[14u].x) - _314) * cbMtdParam._m0[13u].y) + _314;
    float _321 = (_283.x * 2.0) + (-1.0);
    float _323 = (_283.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3474 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))));
    float _337 = (cbMtdParam._m0[13u].x * ((_300.x * 2.0) + (-1.0))) + _321;
    float _338 = (cbMtdParam._m0[13u].x * ((_300.y * 2.0) + (-1.0))) + _323;
    float _341 = fma(_330, _196 * NORMAL.x, fma(_338, _203 * TANGENT.x, (_189 * _181) * _337));
    float _344 = fma(_330, _196 * NORMAL.y, fma(_338, _203 * TANGENT.y, (_189 * _182) * _337));
    float _347 = fma(_330, _196 * NORMAL.z, fma(_338, _203 * TANGENT.z, (_189 * _183) * _337));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    float _352 = _351 * _341;
    float _353 = _351 * _344;
    float _354 = _351 * _347;
    float _3485 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _355 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3507 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3518 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _374 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_354, cbSceneParam._m0[5u].z, fma(_353, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _352));
    float _464 = fma(_354, cbSceneParam._m0[6u].z, fma(_353, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _352));
    float _467 = fma(_354, cbSceneParam._m0[7u].z, fma(_353, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _352));
    uint _480 = uint(roundEven(NORMAL.w)) * 13u;
    uint _482 = (_480 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _488 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_482].x;
    float _489 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_482].y;
    float _490 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_482].z;
    float _3529 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    vec4 _502 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _441, cbSceneParam._m0[86u].y * _442));
    float _505 = _502.x * TEXCOORD_5.w;
    float _506 = dot(vec3(_352, _353, _354), vec3(_433, _434, _435));
    float _509 = _506 * 2.0;
    float _513 = (_509 * _352) - _433;
    float _514 = (_509 * _353) - _434;
    float _515 = (_509 * _354) - _435;
    float _519 = abs(dot(vec3(_433, _434, _435), vec3(_352, _353, _354)));
    float _3562 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _521 = sqrt(_355);
    float _534 = exp2((_521 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_521 * 3.0));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _876;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _605 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _609 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _634 = _566 + _352;
        float _635 = _570 + _353;
        float _636 = _574 + _354;
        float _646 = fma(_636, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634)) - _601;
        float _647 = fma(_636, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634)) - _605;
        float _648 = fma(_636, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634)) - _609;
        float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
        float _665 = ((_652 * _646) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_652 * _647) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_652 * _648) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _714 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_677.x + (-0.5));
        float _716 = _714 * (_677.y + (-0.5));
        float _717 = _714 * (_677.z + (-0.5));
        float _724 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_684.x + (-0.5));
        float _726 = _724 * (_684.y + (-0.5));
        float _727 = _724 * (_684.z + (-0.5));
        float _734 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_691.x + (-0.5));
        float _736 = _734 * (_691.y + (-0.5));
        float _737 = _734 * (_691.z + (-0.5));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = _705 * 0.5;
        float _742 = _715 * 0.5;
        float _743 = _725 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _758 = (dot(vec3(_352, _353, _354), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _768 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3610 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_770 + 1.0))) + _775) * _738;
        float _785 = _706 * 0.5;
        float _786 = _716 * 0.5;
        float _787 = _726 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_352, _353, _354), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3643 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_812 + 1.0))) + _817) * _739;
        float _827 = _707 * 0.5;
        float _828 = _717 * 0.5;
        float _829 = _727 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_352, _353, _354), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3676 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_854 + 1.0))) + _859) * _740;
        _876 = _707;
        _878 = _706;
        _879 = _705;
        _880 = _717;
        _881 = _716;
        _882 = _715;
        _883 = _727;
        _884 = _726;
        _885 = _725;
        _886 = _740;
        _887 = _739;
        _888 = _738;
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
    }
    else
    {
        _876 = _877;
        _878 = _877;
        _879 = _877;
        _880 = _877;
        _881 = _877;
        _882 = _877;
        _883 = _877;
        _884 = _877;
        _885 = _877;
        _886 = _877;
        _887 = _877;
        _888 = _877;
        _889 = 0.0;
        _890 = 0.0;
        _891 = 0.0;
    }
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _917 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _921 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _925 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _948 = _566 + _352;
        float _949 = _570 + _353;
        float _950 = _574 + _354;
        float _960 = fma(_950, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _948)) - _917;
        float _961 = fma(_950, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _948)) - _921;
        float _962 = fma(_950, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _948)) - _925;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_917 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_921 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[35u].z) + ((((((_925 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1016 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_983.x + (-0.5));
        float _1018 = _1016 * (_983.y + (-0.5));
        float _1019 = _1016 * (_983.z + (-0.5));
        float _1026 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_990.x + (-0.5));
        float _1028 = _1026 * (_990.y + (-0.5));
        float _1029 = _1026 * (_990.z + (-0.5));
        float _1036 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_997.x + (-0.5));
        float _1038 = _1036 * (_997.y + (-0.5));
        float _1039 = _1036 * (_997.z + (-0.5));
        float _1046 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1004.x + (-0.5));
        float _1048 = _1046 * (_1004.y + (-0.5));
        float _1049 = _1046 * (_1004.z + (-0.5));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = _1017 * 0.5;
        float _1054 = _1027 * 0.5;
        float _1055 = _1037 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_352, _353, _354), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3739 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1080 + 1.0))) + _1085) * _1050;
        float _1095 = _1018 * 0.5;
        float _1096 = _1028 * 0.5;
        float _1097 = _1038 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_352, _353, _354), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3772 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1122 + 1.0))) + _1127) * _1051;
        float _1137 = _1019 * 0.5;
        float _1138 = _1029 * 0.5;
        float _1139 = _1039 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_352, _353, _354), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3805 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1164 + 1.0))) + _1169) * _1052;
        _1186 = _1019;
        _1187 = _1018;
        _1188 = _1017;
        _1189 = _1029;
        _1190 = _1028;
        _1191 = _1027;
        _1192 = _1039;
        _1193 = _1038;
        _1194 = _1037;
        _1195 = _1052;
        _1196 = _1051;
        _1197 = _1050;
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
    }
    else
    {
        _1186 = _877;
        _1187 = _877;
        _1188 = _877;
        _1189 = _877;
        _1190 = _877;
        _1191 = _877;
        _1192 = _877;
        _1193 = _877;
        _1194 = _877;
        _1195 = _877;
        _1196 = _877;
        _1197 = _877;
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _889)) + _889;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _890)) + _890;
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _891)) + _891;
    float _1233 = fma(_1212, cbSceneParam._m0[89u].z, fma(_1211, cbSceneParam._m0[89u].y, _1210 * cbSceneParam._m0[89u].x));
    float _1236 = fma(_1212, cbSceneParam._m0[90u].z, fma(_1211, cbSceneParam._m0[90u].y, _1210 * cbSceneParam._m0[90u].x));
    float _1239 = fma(_1212, cbSceneParam._m0[91u].z, fma(_1211, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1210));
    float _1254 = _513 * 0.5;
    float _1255 = _514 * 0.5;
    float _1256 = _515 * 0.5;
    float _1257 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1260 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1263 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1297;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1270 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_876, _880, _883, _886));
        float _1274 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_878, _881, _884, _887));
        float _1278 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_879, _882, _885, _888));
        float _1285 = dot(vec4(cbModelParam._m0[39u]), vec4(_1254, _1255, _1256, 1.0));
        _1297 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1297 = 1.0;
    }
    float _1308;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1299 = dot(vec4(cbModelParam._m0[40u]), vec4(_1254, _1255, _1256, 1.0));
        _1308 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1299) ? 0.0 : (isnan(0.0) ? _1299 : max(0.0, _1299))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1308 = 1.0;
    }
    float _1312 = (_1308 * cbModelParam._m0[1u].x) + (_1297 * (1.0 - cbModelParam._m0[1u].x));
    float _1322 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1323 = isnan(_1322) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1322 : min(cbModelParam._m0[25u].z, _1322));
    float _1403;
    float _1405;
    float _1407;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1370 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1374 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1378 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1381 = fma(_515, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513));
        float _1384 = fma(_515, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513));
        float _1387 = fma(_515, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513));
        float _1415;
        if (_1381 > 0.0)
        {
            _1415 = abs((1.0 - _1370) / _1381);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1370 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1415 = frontier_phi_14_12_ladder;
        }
        float _1589;
        if (_1384 > 0.0)
        {
            _1589 = abs((1.0 - _1374) / _1384);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1374 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1589 = frontier_phi_23_19_ladder;
        }
        float _1885;
        if (_1387 > 0.0)
        {
            _1885 = abs((1.0 - _1378) / _1387);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1378 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1885 = frontier_phi_35_30_ladder;
        }
        float _1887 = isnan(_1589) ? _1415 : (isnan(_1415) ? _1589 : min(_1415, _1589));
        float _1888 = isnan(_1885) ? _1887 : (isnan(_1887) ? _1885 : min(_1887, _1885));
        float _1892 = (_1888 * _1381) + _1370;
        float _1893 = (_1888 * _1384) + _1374;
        float _1894 = (_1888 * _1387) + _1378;
        float _1895 = _1888 * 9.9999997473787516355514526367188e-05;
        float _1897 = (-1.0) - _1895;
        float _1899 = _1895 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1894 > _1899) || ((_1894 < _1897) || ((_1893 > _1899) || ((_1893 < _1897) || ((_1892 < _1897) || (_1892 > _1899))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1894, cbModelParam._m0[9u].z, fma(_1893, cbModelParam._m0[9u].y, _1892 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1894, cbModelParam._m0[10u].z, fma(_1893, cbModelParam._m0[10u].y, _1892 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1894, cbModelParam._m0[11u].z, fma(_1893, cbModelParam._m0[11u].y, _1892 * cbModelParam._m0[11u].x))), _1323);
            frontier_phi_13_35_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1403 = frontier_phi_13_35_ladder_2;
        _1405 = frontier_phi_13_35_ladder_1;
        _1407 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_513, _514, _515), _1323);
        _1403 = _1391.x * cbModelParam._m0[1u].y;
        _1405 = _1391.y * cbModelParam._m0[1u].y;
        _1407 = _1391.z * cbModelParam._m0[1u].y;
    }
    float _1411 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1412 = isnan(_1411) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1411 : min(cbModelParam._m0[25u].w, _1411));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1469 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1473 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1477 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1480 = fma(_515, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513));
        float _1483 = fma(_515, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513));
        float _1486 = fma(_515, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513));
        float _1594;
        if (_1480 > 0.0)
        {
            _1594 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1594 = frontier_phi_25_21_ladder;
        }
        float _1912;
        if (_1483 > 0.0)
        {
            _1912 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1912 = frontier_phi_37_32_ladder;
        }
        float _2239;
        if (_1486 > 0.0)
        {
            _2239 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2239 = frontier_phi_47_44_ladder;
        }
        float _2241 = isnan(_1912) ? _1594 : (isnan(_1594) ? _1912 : min(_1594, _1912));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1480) + _1469;
        float _2247 = (_2242 * _1483) + _1473;
        float _2248 = (_2242 * _1486) + _1477;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2249;
        float _2252 = _2249 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2248 > _2252) || ((_2248 < _2250) || ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 < _2250) || (_2246 > _2252))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2248, cbModelParam._m0[17u].z, fma(_2247, cbModelParam._m0[17u].y, _2246 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2248, cbModelParam._m0[18u].z, fma(_2247, cbModelParam._m0[18u].y, _2246 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2248, cbModelParam._m0[19u].z, fma(_2247, cbModelParam._m0[19u].y, _2246 * cbModelParam._m0[19u].x))), _1412);
            frontier_phi_22_47_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1505 = frontier_phi_22_47_ladder_2;
        _1507 = frontier_phi_22_47_ladder_1;
        _1509 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_513, _514, _515), _1412);
        _1505 = _1489.x * cbModelParam._m0[1u].z;
        _1507 = _1489.y * cbModelParam._m0[1u].z;
        _1509 = _1489.z * cbModelParam._m0[1u].z;
    }
    float _1521 = ((((1.0 - _534) * ((_521 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_534 * _521)) * _505;
    float _1522 = _1521 * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1523 = _1521 * ((cbModelParam._m0[1u].w * (_1507 - _1405)) + _1405);
    float _1524 = _1521 * ((cbModelParam._m0[1u].w * (_1509 - _1407)) + _1407);
    float _1527 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, _1522 * cbSceneParam._m0[91u].x));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1581 = _1568 / _1580;
    float _1582 = _1572 / _1580;
    float _1583 = _1576 / _1580;
    float _1730;
    float _1731;
    float _1732;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1610 = ((uint(_1583 > cbSceneParam._m0[59u].y) + uint(_1583 > cbSceneParam._m0[59u].x)) + uint(_1583 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1611 = _1610 + 43u;
        uint _1619 = _1610 + 44u;
        uint _1627 = _1610 + 45u;
        uint _1635 = _1610 + 46u;
        float _1646 = fma(_1580, cbSceneParam._m0[_1611].w, fma(_1576, cbSceneParam._m0[_1611].z, fma(_1572, cbSceneParam._m0[_1611].y, _1568 * cbSceneParam._m0[_1611].x)));
        float _1650 = fma(_1580, cbSceneParam._m0[_1619].w, fma(_1576, cbSceneParam._m0[_1619].z, fma(_1572, cbSceneParam._m0[_1619].y, _1568 * cbSceneParam._m0[_1619].x)));
        float _1658 = fma(_1580, cbSceneParam._m0[_1635].w, fma(_1576, cbSceneParam._m0[_1635].z, fma(_1572, cbSceneParam._m0[_1635].y, _1568 * cbSceneParam._m0[_1635].x)));
        float _1663 = cbSceneParam._m0[33u].z * _1658;
        float _1665 = cbSceneParam._m0[33u].w * _1658;
        float _1668 = fma(_1580, cbSceneParam._m0[_1627].w, fma(_1576, cbSceneParam._m0[_1627].z, fma(_1572, cbSceneParam._m0[_1627].y, _1568 * cbSceneParam._m0[_1627].x))) / _1658;
        float _1716 = (cbSceneParam._m0[33u].x - sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583))) * cbSceneParam._m0[33u].y;
        float _3931 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1723 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1663 + _1646) / _1658, (_1665 + _1650) / _1658), _1668), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 + _1646) / _1658, (_1650 - _1663) / _1658), _1668), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 - _1663) / _1658, (_1650 - _1665) / _1658), _1668), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 - _1665) / _1658, (_1663 + _1650) / _1658), _1668), 0.0)).x), vec4(0.25)));
        _1730 = 1.0 - (_1723 * cbSceneParam._m0[34u].x);
        _1731 = 1.0 - (_1723 * cbSceneParam._m0[34u].y);
        _1732 = 1.0 - (_1723 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1730 = 1.0;
        _1731 = 1.0;
        _1732 = 1.0;
    }
    float _1796;
    float _1798;
    float _1800;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1784 = fma(_1580, cbSceneParam._m0[63u].w, fma(_1576, cbSceneParam._m0[63u].z, fma(_1572, cbSceneParam._m0[63u].y, _1568 * cbSceneParam._m0[63u].x)));
        float _1785 = fma(_1580, cbSceneParam._m0[60u].w, fma(_1576, cbSceneParam._m0[60u].z, fma(_1572, cbSceneParam._m0[60u].y, _1568 * cbSceneParam._m0[60u].x))) / _1784;
        float _1786 = fma(_1580, cbSceneParam._m0[61u].w, fma(_1576, cbSceneParam._m0[61u].z, fma(_1572, cbSceneParam._m0[61u].y, _1568 * cbSceneParam._m0[61u].x))) / _1784;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1785 >= cbSceneParam._m0[64u].x) && (_1786 >= cbSceneParam._m0[64u].y)) && (_1785 <= cbSceneParam._m0[64u].z)) && (_1786 <= cbSceneParam._m0[64u].w))
        {
            float _1925 = fma(_1580, cbSceneParam._m0[62u].w, fma(_1576, cbSceneParam._m0[62u].z, fma(_1572, cbSceneParam._m0[62u].y, _1568 * cbSceneParam._m0[62u].x))) / _1784;
            float _1929 = isnan(cbSceneParam._m0[41u].w) ? _1925 : (isnan(_1925) ? cbSceneParam._m0[41u].w : max(_1925, cbSceneParam._m0[41u].w));
            float _1972 = (cbSceneParam._m0[33u].x - sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583))) * cbSceneParam._m0[33u].y;
            float _3947 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
            float _1979 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1785, cbSceneParam._m0[33u].w + _1786), _1929), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1785, _1786 - cbSceneParam._m0[33u].z), _1929), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1785 - cbSceneParam._m0[33u].z, _1786 - cbSceneParam._m0[33u].w), _1929), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1785 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1786), _1929), 0.0)).x), vec4(0.25)));
            float _1983 = 1.0 - (_1979 * cbSceneParam._m0[34u].x);
            float _1984 = 1.0 - (_1979 * cbSceneParam._m0[34u].y);
            float _1985 = 1.0 - (_1979 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1985) ? _1732 : (isnan(_1732) ? _1985 : min(_1732, _1985));
            frontier_phi_34_33_ladder_1 = isnan(_1984) ? _1731 : (isnan(_1731) ? _1984 : min(_1731, _1984));
            frontier_phi_34_33_ladder_2 = isnan(_1983) ? _1730 : (isnan(_1730) ? _1983 : min(_1730, _1983));
        }
        else
        {
            frontier_phi_34_33_ladder = _1732;
            frontier_phi_34_33_ladder_1 = _1731;
            frontier_phi_34_33_ladder_2 = _1730;
        }
        _1796 = frontier_phi_34_33_ladder_2;
        _1798 = frontier_phi_34_33_ladder_1;
        _1800 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1796 = _1730;
        _1798 = _1731;
        _1800 = _1732;
    }
    uvec4 _1805 = floatBitsToUint(cbInstanceData._m0[_480 + 5u]);
    uint _1807 = _1805.x * 14u;
    uint _1808 = _1807 + 13u;
    float _1815 = _505 + (-1.0);
    float _1820 = (cbLight._m0[_1808].x * _1815) + 1.0;
    float _1821 = (cbLight._m0[_1808].y * _1815) + 1.0;
    float _1822 = (cbLight._m0[_1808].z * _1815) + 1.0;
    float _1823 = (cbLight._m0[_1808].w * _1815) + 1.0;
    uint _1824 = _1807 + 5u;
    float _1830 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1834 = _1807 + 4u;
    float _1844 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1848 = _1807 | 1u;
    float _1859 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_352, _353, _354));
    float _1862 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_352, _353, _354));
    float _3983 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _3994 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1867 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.3183098733425140380859375;
    float _1869 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _1876 = ((cbLight._m0[_1824].x * _1830) * _1869) + (((cbLight._m0[_1834].x * _1796) * _1844) * _1867);
    float _1877 = ((_1830 * cbLight._m0[_1824].y) * _1869) + (((cbLight._m0[_1834].y * _1798) * _1844) * _1867);
    float _1878 = ((_1830 * cbLight._m0[_1824].z) * _1869) + (((cbLight._m0[_1834].z * _1800) * _1844) * _1867);
    uvec4 _1882 = floatBitsToUint(cbLight._m0[_1807 + 12u]);
    bool _1884 = _1882.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1884)
    {
        _1986 = _1876;
        _1988 = _1877;
        _1990 = _1878;
    }
    else
    {
        uint _1994 = _1807 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1807 + 2u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4005 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2013 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1876;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1877;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1878;
    }
    bool _1993 = _1882.y == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_1993)
    {
        _2048 = _1986;
        _2050 = _1988;
        _2052 = _1990;
    }
    else
    {
        uint _2210 = _1807 + 7u;
        float _2226 = (dot(vec3(cbLight._m0[_1807 + 3u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4021 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2229 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2048 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _1986;
        _2050 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _1988;
        _2052 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _1990;
    }
    uint _2055 = _1807 + 8u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _355) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1807].x + _433;
    float _2071 = cbLight._m0[_1807].y + _434;
    float _2072 = cbLight._m0[_1807].z + _435;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1807].xyz));
    float _4037 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _2084 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _2085 = dot(vec3(_352, _353, _354), vec3(_2077, _2078, _2079));
    float _4059 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_2077, _2078, _2079));
    float _4070 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2069 * _2069;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2109 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2084 * ((_2083 * _2109) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2109) + _2069) * _2083))) * _2083;
    float _4081 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    uint _2136 = _1807 + 9u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _355) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1848].x + _433;
    float _2150 = cbLight._m0[_1848].y + _434;
    float _2151 = cbLight._m0[_1848].z + _435;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1848].xyz));
    float _4092 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _2163 = dot(vec3(_352, _353, _354), vec3(_2156, _2157, _2158));
    float _4103 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2156, _2157, _2158));
    float _4114 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2148 * _2148;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2185 = 1.0 - _2148;
    float _2195 = (0.5 / (((_2084 * ((_2162 * _2185) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2185) + _2148) * _2162))) * _2162;
    float _4125 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    float _2207 = (((_2184 * cbLight._m0[_2136].x) * _2197) * _1830) + ((((cbLight._m0[_2055].x * _1796) * _2108) * _2122) * _1844);
    float _2208 = (((_2184 * cbLight._m0[_2136].y) * _2197) * _1830) + ((((cbLight._m0[_2055].y * _1798) * _2108) * _2122) * _1844);
    float _2209 = (((_2184 * cbLight._m0[_2136].z) * _2197) * _1830) + ((((cbLight._m0[_2055].z * _1800) * _2108) * _2122) * _1844);
    float _2265;
    float _2267;
    float _2269;
    if (_1884)
    {
        _2265 = _2207;
        _2267 = _2208;
        _2269 = _2209;
    }
    else
    {
        uint _2271 = _1807 + 2u;
        uint _2275 = _1807 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _355) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _433;
        float _2292 = cbLight._m0[_2271].y + _434;
        float _2293 = cbLight._m0[_2271].z + _435;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2271].xyz));
        float _4136 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2305 = dot(vec3(_352, _353, _354), vec3(_2298, _2299, _2300));
        float _4147 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4158 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2327 = 1.0 - _2290;
        float _2337 = (0.5 / (((_2084 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2327) + _2290) * _2304))) * _2304;
        float _4169 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2265 = (((_2326 * cbLight._m0[_2275].x) * _2339) * _2340) + _2207;
        _2267 = (((_2326 * cbLight._m0[_2275].y) * _2339) * _2340) + _2208;
        _2269 = (((_2326 * cbLight._m0[_2275].z) * _2339) * _2340) + _2209;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_1993)
    {
        _2371 = _2265;
        _2373 = _2267;
        _2375 = _2269;
    }
    else
    {
        uint _2382 = _1807 + 3u;
        uint _2386 = _1807 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _355) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _433;
        float _2403 = cbLight._m0[_2382].y + _434;
        float _2404 = cbLight._m0[_2382].z + _435;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2382].xyz));
        float _4185 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2416 = dot(vec3(_352, _353, _354), vec3(_2409, _2410, _2411));
        float _4196 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4207 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2438 = 1.0 - _2401;
        float _2448 = (0.5 / (((_2084 * ((_2415 * _2438) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2438) + _2401) * _2415))) * _2415;
        float _4218 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2371 = (((_2437 * cbLight._m0[_2386].x) * _2450) * _2451) + _2265;
        _2373 = (((_2437 * cbLight._m0[_2386].y) * _2450) * _2451) + _2267;
        _2375 = (((_2437 * cbLight._m0[_2386].z) * _2450) * _2451) + _2269;
    }
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_1805.y == 0u)
    {
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.x;
        uint _2484 = uint((float(_2472.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _2473))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _2473)));
        float _2494 = (log2(_1583 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2495 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        uint _2498 = uint(isnan(14.0) ? _2495 : (isnan(_2495) ? 14.0 : min(_2495, 14.0)));
        uvec4 _2503 = texelFetch(g_lightClusterGridBuffer, int(((_2498 << 2u) + (_2484 << 6u)) >> 2u));
        uint _2504 = _2503.x;
        uint _2505 = _2472.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2505 >> 4u) & 15u)) + 4294967295u) & _2504) == 0u) || ((_2505 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            uint _2735 = 0u;
            uint _2744;
            bool _2745;
            for (;;)
            {
                _2744 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                _2745 = _2744 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2745)
                {
                    frontier_phi_66_pred = _2734;
                    frontier_phi_66_pred_1 = _2733;
                    frontier_phi_66_pred_2 = _2732;
                    frontier_phi_66_pred_3 = _2731;
                    frontier_phi_66_pred_4 = _2730;
                    frontier_phi_66_pred_5 = _2729;
                }
                else
                {
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    uint _2859;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2744;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    for (;;)
                    {
                        uint _2863 = uint(findLSB(_2859)) + (_2735 << 5u);
                        uint _2860 = (_2859 + 4294967295u) & _2859;
                        uint _2865 = _2863 * 48u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2885 = (_2863 * 48u) + 4u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2904 = (_2863 * 48u) + 8u;
                        vec3 _2915 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x));
                        float _2919 = _2879.x - _1581;
                        float _2920 = _2879.y - _1582;
                        float _2921 = _2879.z - _1583;
                        float _2922 = dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921));
                        float _2925 = inversesqrt(_2922);
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2929 = dot(vec3(_461, _464, _467), vec3(_2926, _2927, _2928));
                        float _2934 = 1.0 - (_2922 * _2879.w);
                        float _4244 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2936 = sqrt(_2922) * _2898.w;
                        float _2939 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2929) + _2940;
                        float _2946 = _2936 * _2936;
                        float _2950 = ((isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))) * _2935) / ((_2946 * 0.699999988079071044921875) + 1.0);
                        float _2954 = (-0.0) - _1581;
                        float _2955 = (-0.0) - _1582;
                        float _2956 = (-0.0) - _1583;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2970 = exp2(log2(1.0 / ((_2946 * 3.5) + 5.0)) * 0.25);
                        float _2971 = 1.0 - _521;
                        float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                        float _2979 = _2978 * _2978;
                        float _2980 = _2979 * _2979;
                        float _2981 = _2961 + _2926;
                        float _2982 = _2962 + _2927;
                        float _2983 = _2963 + _2928;
                        float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                        float _2991 = dot(vec3(_461, _464, _467), vec3(_2961, _2962, _2963));
                        float _4260 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2995 = dot(vec3(_461, _464, _467), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                        float _4271 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                        float _3003 = _2939 * _2979;
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2929) + _3004;
                        float _4282 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _3009 = 1.0 - _2979;
                        float _3019 = (0.5 / (((_3008 * ((_2994 * _3009) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3008 * _3009) + _2979) * _2994))) * _3008;
                        float _4293 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3030 = (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) / ((_3002 * _3002) * ((_2946 * 2.1991131305694580078125) + 3.141590118408203125))) * _2935;
                        _2788 = (_2950 * _2898.x) + _2856;
                        _2789 = (_2950 * _2898.y) + _2857;
                        _2790 = (_2950 * _2898.z) + _2858;
                        _2785 = (_3030 * _2915.x) + _2853;
                        _2786 = (_3030 * _2915.y) + _2854;
                        _2787 = (_3030 * _2915.z) + _2855;
                        if (_2860 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2860;
                        }
                    }
                    frontier_phi_66_pred = _2790;
                    frontier_phi_66_pred_1 = _2789;
                    frontier_phi_66_pred_2 = _2788;
                    frontier_phi_66_pred_3 = _2787;
                    frontier_phi_66_pred_4 = _2786;
                    frontier_phi_66_pred_5 = _2785;
                }
                _2595 = frontier_phi_66_pred;
                _2593 = frontier_phi_66_pred_1;
                _2591 = frontier_phi_66_pred_2;
                _2589 = frontier_phi_66_pred_3;
                _2587 = frontier_phi_66_pred_4;
                _2585 = frontier_phi_66_pred_5;
                uint _2736 = _2735 + 1u;
                if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2729 = _2585;
                    _2730 = _2587;
                    _2731 = _2589;
                    _2732 = _2591;
                    _2733 = _2593;
                    _2734 = _2595;
                    _2735 = _2736;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((4294967295u << _2601) & _2504) == 0u)
        {
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
            _2707 = _2594;
        }
        else
        {
            float _2722 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
            float _2723 = _2722 * _1581;
            float _2724 = _2722 * _1582;
            float _2725 = _2722 * _1583;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2836 = _2584;
                float _2837 = _2586;
                float _2838 = _2588;
                float _2839 = _2590;
                float _2840 = _2592;
                float _2841 = _2594;
                uint _2842 = _2601;
                uint _2851;
                bool _2852;
                for (;;)
                {
                    _2851 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                    _2852 = _2851 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2852)
                    {
                        frontier_phi_72_pred = _2841;
                        frontier_phi_72_pred_1 = _2840;
                        frontier_phi_72_pred_2 = _2839;
                        frontier_phi_72_pred_3 = _2838;
                        frontier_phi_72_pred_4 = _2837;
                        frontier_phi_72_pred_5 = _2836;
                    }
                    else
                    {
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        uint _3054 = _2851;
                        uint _3055;
                        vec4 _3080;
                        float _3081;
                        vec4 _3096;
                        vec3 _3108;
                        vec4 _3124;
                        vec4 _3140;
                        float _3187;
                        bool _3188;
                        for (;;)
                        {
                            uint _3065 = ((_2842 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3054));
                            _3055 = (_3054 + 4294967295u) & _3054;
                            uint _3067 = _3065 * 40u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3081 = _3080.w;
                            uint _3083 = (_3065 * 40u) + 4u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3098 = (_3065 * 40u) + 8u;
                            _3108 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x));
                            uint _3111 = (_3065 * 40u) + 16u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3127 = (_3065 * 40u) + 20u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3065 * 40u) + 24u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3162 = (_3065 * 40u) + 28u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            _3187 = fma(_1583, _3175.z, fma(_1582, _3175.y, _3175.x * _1581)) + _3175.w;
                            _3188 = !((fma(_1583, _3156.z, fma(_1582, _3156.y, _3156.x * _1581)) + _3156.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3188)
                            {
                                float _3215 = _3080.x - _1581;
                                float _3216 = _3080.y - _1582;
                                float _3217 = _3080.z - _1583;
                                float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                                float _3221 = inversesqrt(_3218);
                                float _3222 = _3221 * _3215;
                                float _3223 = _3221 * _3216;
                                float _3224 = _3221 * _3217;
                                float _3228 = 1.0 - (_3218 / (_3081 * _3081));
                                float _4304 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3233 = sqrt(_3218) * _3096.w;
                                float _3235 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                                float _3236 = _3235 * _3235;
                                float _3239 = ((1.0 - _3236) * dot(vec3(_3222, _3223, _3224), vec3(_461, _464, _467))) + _3236;
                                float _3242 = _3233 * _3233;
                                float _3246 = (fma(_1583, _3124.z, fma(_1582, _3124.y, _3124.x * _1581)) + _3124.w) / _3187;
                                float _3247 = (fma(_1583, _3140.z, fma(_1582, _3140.y, _3140.x * _1581)) + _3140.w) / _3187;
                                float _3251 = 1.0 - dot(vec2(_3246, _3247), vec2(_3246, _3247));
                                float _4320 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3253 = _3252 * (((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3229) / ((_3242 * 0.699999988079071044921875) + 1.0));
                                float _3265 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                                float _3266 = 1.0 - _521;
                                float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                                float _3274 = _3273 * _3273;
                                float _3275 = _3274 * _3274;
                                float _3276 = _3222 - _2723;
                                float _3277 = _3223 - _2724;
                                float _3278 = _3224 - _2725;
                                float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                                float _3286 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2723, (-0.0) - _2724, (-0.0) - _2725));
                                float _4331 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3290 = dot(vec3(_461, _464, _467), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                                float _4342 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                                float _3298 = _3235 * _3274;
                                float _3299 = _3298 * _3298;
                                float _3305 = ((1.0 - _3299) * dot(vec3(_461, _464, _467), vec3(_3222, _3223, _3224))) + _3299;
                                float _4353 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3307 = 1.0 - _3274;
                                float _3317 = (0.5 / (((_3306 * ((_3289 * _3307) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3274) * _3289))) * _3306;
                                float _4364 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3327 = (_3252 * _3229) * (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3297 * _3297) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3253 * _3096.y;
                                frontier_phi_78_pred_1 = _3253 * _3096.x;
                                frontier_phi_78_pred_2 = _3327 * _3108.z;
                                frontier_phi_78_pred_3 = _3327 * _3108.y;
                                frontier_phi_78_pred_4 = _3327 * _3108.x;
                                frontier_phi_78_pred_5 = _3253 * _3096.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3335 = frontier_phi_78_pred;
                            _3334 = frontier_phi_78_pred_1;
                            _3333 = frontier_phi_78_pred_2;
                            _3332 = frontier_phi_78_pred_3;
                            _3331 = frontier_phi_78_pred_4;
                            _3336 = frontier_phi_78_pred_5;
                            _3038 = _3334 + _3051;
                            _3039 = _3335 + _3052;
                            _3040 = _3336 + _3053;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3037 = _3333 + _3050;
                            if (_3055 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3055;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3040;
                        frontier_phi_72_pred_1 = _3039;
                        frontier_phi_72_pred_2 = _3038;
                        frontier_phi_72_pred_3 = _3037;
                        frontier_phi_72_pred_4 = _3036;
                        frontier_phi_72_pred_5 = _3035;
                    }
                    _2708 = frontier_phi_72_pred;
                    _2706 = frontier_phi_72_pred_1;
                    _2704 = frontier_phi_72_pred_2;
                    _2702 = frontier_phi_72_pred_3;
                    _2700 = frontier_phi_72_pred_4;
                    _2698 = frontier_phi_72_pred_5;
                    uint _2843 = _2842 + 1u;
                    if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2836 = _2698;
                        _2837 = _2700;
                        _2838 = _2702;
                        _2839 = _2704;
                        _2840 = _2706;
                        _2841 = _2708;
                        _2842 = _2843;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2708;
                frontier_phi_60_61_ladder_1 = _2706;
                frontier_phi_60_61_ladder_2 = _2702;
                frontier_phi_60_61_ladder_3 = _2700;
                frontier_phi_60_61_ladder_4 = _2698;
                frontier_phi_60_61_ladder_5 = _2704;
            }
            else
            {
                frontier_phi_60_61_ladder = _2594;
                frontier_phi_60_61_ladder_1 = _2592;
                frontier_phi_60_61_ladder_2 = _2588;
                frontier_phi_60_61_ladder_3 = _2586;
                frontier_phi_60_61_ladder_4 = _2584;
                frontier_phi_60_61_ladder_5 = _2590;
            }
            _2697 = frontier_phi_60_61_ladder_4;
            _2699 = frontier_phi_60_61_ladder_3;
            _2701 = frontier_phi_60_61_ladder_2;
            _2703 = frontier_phi_60_61_ladder_5;
            _2705 = frontier_phi_60_61_ladder_1;
            _2707 = frontier_phi_60_61_ladder;
        }
        float _2712 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
        _2517 = (_2712 * _2703) + _2048;
        _2519 = (_2712 * _2705) + _2050;
        _2521 = (_2712 * _2707) + _2052;
        _2523 = ((_2697 * 0.039999999105930328369140625) * _2712) + _2371;
        _2525 = ((_2699 * 0.039999999105930328369140625) * _2712) + _2373;
        _2527 = ((_2701 * 0.039999999105930328369140625) * _2712) + _2375;
    }
    else
    {
        _2517 = _2048;
        _2519 = _2050;
        _2521 = _2052;
        _2523 = _2371;
        _2525 = _2373;
        _2527 = _2375;
    }
    float _4380 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4391 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4402 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    uint _2547 = _480 + 6u;
    float _2555 = _441 / cbSceneParam._m0[86u].x;
    float _2556 = _442 / cbSceneParam._m0[86u].y;
    vec4 _2570 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, (log2((isnan(cbSceneParam._m0[77u].w) ? _374 : (isnan(_374) ? cbSceneParam._m0[77u].w : min(_374, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2572 = _2570.x;
    float _2573 = _2570.y;
    float _2574 = _2570.z;
    float _2575 = _2570.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_374 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_374) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _374 : min(cbSceneParam._m0[80u].w, _374));
        float _2610 = _2609 / _374;
        float _2621 = _2610 * _426;
        float _2622 = _427 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2625 = _2610 * _428;
        float _2627 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2622;
        float _2635 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2798;
        if (abs((_2623 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2798 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2758 = 1.0 / cbSceneParam._m0[80u].x;
            float _2759 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2760 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            _2798 = ((abs(_2635 / _2623) * cbSceneParam._m0[80u].y) * ((((_2769 - _2770) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))))) * _2758)) - ((exp2(_2645 * _2769) - exp2(_2645 * _2770)) * _2758))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2800 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, 1.0), 0.0);
        float _2809 = exp2((_2798 * (-1.44269502162933349609375)) * (1.0 - _2800.w));
        float _2810 = log2(_2809);
        float _2826 = log2(_2575);
        _2647 = (exp2(_2826 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].x)) * _2800.x) / cbSceneParam._m0[78u].x)) + _2572;
        _2649 = (exp2(_2826 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].y)) * _2800.y) / cbSceneParam._m0[78u].y)) + _2573;
        _2651 = (exp2(_2826 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].z)) * _2800.z) / cbSceneParam._m0[78u].z)) + _2574;
        _2653 = _2809 * _2575;
    }
    else
    {
        _2647 = _2572;
        _2649 = _2573;
        _2651 = _2574;
        _2653 = _2575;
    }
    float _2665 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2666 = _2665 == 3.0;
    float _2667 = log2(_2653);
    float _2674 = exp2(_2667 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2517 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _505))) + ((_2523 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1312)) * cbPerFrame._m0[3u].x));
    float _2675 = exp2(_2667 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2519 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _505))) + ((_2525 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1312)) * cbPerFrame._m0[3u].x));
    float _2676 = exp2(_2667 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2521 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _505))) + ((_2527 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1312)) * cbPerFrame._m0[3u].x));
    float _2685 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2685 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.y = _2685 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.z = _2685 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.w = cbInstanceData._m0[_2547].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2547].w;
}


