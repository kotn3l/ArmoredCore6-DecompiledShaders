#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2DArray P_ACParts_Marking_snp_0_Texture2DArray_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _750;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _157 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _158 = _157 * NORMAL.x;
    float _159 = _157 * NORMAL.y;
    float _160 = _157 * NORMAL.z;
    float _161 = TEXCOORD.x * 16.0;
    vec4 _184 = texture(sampler2DArray(P_ACParts_Marking_snp_0_Texture2DArray_0, SS_ClampLinear), vec3((cbTextureTilingScale._m0[0u].x * fract(_161)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * fract(TEXCOORD.y)) + cbTextureTilingScale._m0[0u].w, floor(cbMtdParam._m0[9u].z + _161)));
    float _186 = _184.x;
    float _187 = _184.y;
    float _188 = _184.z;
    float _189 = _184.w;
    float _197 = inversesqrt(dot(vec3(_158, _159, _160), vec3(_158, _159, _160)));
    float _198 = _197 * _158;
    float _199 = _197 * _159;
    float _200 = _197 * _160;
    float _3090 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _202 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
    float _3101 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _203 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
    float _3112 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _3123 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _3134 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _3145 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _207 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
    float _223 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _281 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _282 = _275 * _281;
    float _283 = _276 * _281;
    float _284 = _277 * _281;
    float _290 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _291 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _312 = fma(_200, cbSceneParam._m0[5u].z, fma(_199, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _198));
    float _315 = fma(_200, cbSceneParam._m0[6u].z, fma(_199, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _198));
    float _318 = fma(_200, cbSceneParam._m0[7u].z, fma(_199, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _198));
    uint _331 = uint(roundEven(NORMAL.w)) * 13u;
    uint _334 = (_331 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _340 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0)))) * cbInstanceData._m0[_334].x;
    float _341 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0)))) * cbInstanceData._m0[_334].y;
    float _342 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0)))) * cbInstanceData._m0[_334].z;
    float _3156 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _343 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
    float _3167 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _344 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
    float _3178 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _345 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _346 = 1.0 - _207;
    float _347 = _343 * _346;
    float _348 = _344 * _346;
    float _349 = _345 * _346;
    float _354 = (_343 + (-0.039999999105930328369140625)) * _207;
    float _355 = (_344 + (-0.039999999105930328369140625)) * _207;
    float _356 = (_345 + (-0.039999999105930328369140625)) * _207;
    float _357 = _354 + 0.039999999105930328369140625;
    float _359 = _355 + 0.039999999105930328369140625;
    float _360 = _356 + 0.039999999105930328369140625;
    vec4 _370 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _290, cbSceneParam._m0[86u].y * _291));
    float _374 = _370.x * TEXCOORD.z;
    float _375 = dot(vec3(_198, _199, _200), vec3(_282, _283, _284));
    float _378 = _375 * 2.0;
    float _383 = (_378 * _198) - _282;
    float _384 = (_378 * _199) - _283;
    float _385 = (_378 * _200) - _284;
    float _389 = abs(dot(vec3(_282, _283, _284), vec3(_198, _199, _200)));
    float _3189 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _391 = sqrt(_203);
    float _404 = exp2((_391 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_391 * 3.0));
    float _410 = (1.0 - _404) * ((_391 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _411 = _404 * _391;
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _749;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _474 = fma(_447, cbModelParam._m0[26u].z, fma(_443, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _439));
        float _478 = fma(_447, cbModelParam._m0[27u].z, fma(_443, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _439));
        float _482 = fma(_447, cbModelParam._m0[28u].z, fma(_443, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _439));
        float _507 = _439 + _198;
        float _508 = _443 + _199;
        float _509 = _447 + _200;
        float _519 = fma(_509, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _507)) - _474;
        float _520 = fma(_509, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _507)) - _478;
        float _521 = fma(_509, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _507)) - _482;
        float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
        float _538 = ((_525 * _519) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_474 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _539 = ((_525 * _520) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_478 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _540 = ((_525 * _521) / cbModelParam._m0[34u].z) + ((((((_482 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        float _577 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_543.x + (-0.5));
        float _579 = _577 * (_543.y + (-0.5));
        float _580 = _577 * (_543.z + (-0.5));
        float _587 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_550.x + (-0.5));
        float _589 = _587 * (_550.y + (-0.5));
        float _590 = _587 * (_550.z + (-0.5));
        float _597 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _598 = _597 * (_557.x + (-0.5));
        float _599 = _597 * (_557.y + (-0.5));
        float _600 = _597 * (_557.z + (-0.5));
        float _607 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _608 = _607 * (_564.x + (-0.5));
        float _609 = _607 * (_564.y + (-0.5));
        float _610 = _607 * (_564.z + (-0.5));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = _578 * 0.5;
        float _615 = _588 * 0.5;
        float _616 = _598 * 0.5;
        float _617 = dot(vec3(_614, _615, _616), vec3(_614, _615, _616));
        float _622 = (_617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_617);
        float _631 = (dot(vec3(_198, _199, _200), vec3(_622 * _614, _622 * _615, _622 * _616)) + 1.0) * 0.5;
        float _3215 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _641 = sqrt(((_615 * _615) + (_614 * _614)) + (_616 * _616)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _3226 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _643 = _642 * 2.0;
        float _647 = (1.0 - _642) / (_642 + 1.0);
        float _3237 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _657 = ((((1.0 - _648) * (_643 + 2.0)) * exp2(log2(isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))) * (_643 + 1.0))) + _648) * _611;
        float _658 = _579 * 0.5;
        float _659 = _589 * 0.5;
        float _660 = _599 * 0.5;
        float _661 = dot(vec3(_658, _659, _660), vec3(_658, _659, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _674 = (dot(vec3(_198, _199, _200), vec3(_666 * _658, _666 * _659, _666 * _660)) + 1.0) * 0.5;
        float _3248 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _683 = sqrt(((_659 * _659) + (_658 * _658)) + (_660 * _660)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _3259 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _3270 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * (_685 + 1.0))) + _690) * _612;
        float _700 = _580 * 0.5;
        float _701 = _590 * 0.5;
        float _702 = _600 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _716 = (dot(vec3(_198, _199, _200), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3281 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _725 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3292 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3303 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (_727 + 1.0))) + _732) * _613;
        _749 = _580;
        _751 = _579;
        _752 = _578;
        _753 = _590;
        _754 = _589;
        _755 = _588;
        _756 = _600;
        _757 = _599;
        _758 = _598;
        _759 = _613;
        _760 = _612;
        _761 = _611;
        _762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0)));
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
    }
    else
    {
        _749 = _750;
        _751 = _750;
        _752 = _750;
        _753 = _750;
        _754 = _750;
        _755 = _750;
        _756 = _750;
        _757 = _750;
        _758 = _750;
        _759 = _750;
        _760 = _750;
        _761 = _750;
        _762 = 0.0;
        _763 = 0.0;
        _764 = 0.0;
    }
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _790 = fma(_447, cbModelParam._m0[30u].z, fma(_443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _439));
        float _794 = fma(_447, cbModelParam._m0[31u].z, fma(_443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _439));
        float _798 = fma(_447, cbModelParam._m0[32u].z, fma(_443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _439));
        float _821 = _439 + _198;
        float _822 = _443 + _199;
        float _823 = _447 + _200;
        float _833 = fma(_823, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821)) - _790;
        float _834 = fma(_823, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821)) - _794;
        float _835 = fma(_823, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821)) - _798;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_790 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_794 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[35u].z) + ((((((_798 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _889 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_856.x + (-0.5));
        float _891 = _889 * (_856.y + (-0.5));
        float _892 = _889 * (_856.z + (-0.5));
        float _899 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_863.x + (-0.5));
        float _901 = _899 * (_863.y + (-0.5));
        float _902 = _899 * (_863.z + (-0.5));
        float _909 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_870.x + (-0.5));
        float _911 = _909 * (_870.y + (-0.5));
        float _912 = _909 * (_870.z + (-0.5));
        float _919 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_877.x + (-0.5));
        float _921 = _919 * (_877.y + (-0.5));
        float _922 = _919 * (_877.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_198, _199, _200), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3366 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_953 + 1.0))) + _958) * _923;
        float _968 = _891 * 0.5;
        float _969 = _901 * 0.5;
        float _970 = _911 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_198, _199, _200), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3399 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_995 + 1.0))) + _1000) * _924;
        float _1010 = _892 * 0.5;
        float _1011 = _902 * 0.5;
        float _1012 = _912 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_198, _199, _200), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3432 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1037 + 1.0))) + _1042) * _925;
        _1059 = _892;
        _1060 = _891;
        _1061 = _890;
        _1062 = _902;
        _1063 = _901;
        _1064 = _900;
        _1065 = _912;
        _1066 = _911;
        _1067 = _910;
        _1068 = _925;
        _1069 = _924;
        _1070 = _923;
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _750;
        _1060 = _750;
        _1061 = _750;
        _1062 = _750;
        _1063 = _750;
        _1064 = _750;
        _1065 = _750;
        _1066 = _750;
        _1067 = _750;
        _1068 = _750;
        _1069 = _750;
        _1070 = _750;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _762)) + _762;
    float _1084 = (cbModelParam._m0[1u].x * (_1072 - _763)) + _763;
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _764)) + _764;
    float _1106 = fma(_1085, cbSceneParam._m0[89u].z, fma(_1084, cbSceneParam._m0[89u].y, _1083 * cbSceneParam._m0[89u].x));
    float _1109 = fma(_1085, cbSceneParam._m0[90u].z, fma(_1084, cbSceneParam._m0[90u].y, _1083 * cbSceneParam._m0[90u].x));
    float _1112 = fma(_1085, cbSceneParam._m0[91u].z, fma(_1084, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1083));
    float _1127 = _383 * 0.5;
    float _1128 = _384 * 0.5;
    float _1129 = _385 * 0.5;
    float _1130 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1133 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1060, _1063, _1066, _1069));
    float _1136 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1170;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1143 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_749, _753, _756, _759));
        float _1147 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_751, _754, _757, _760));
        float _1151 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_752, _755, _758, _761));
        float _1158 = dot(vec4(cbModelParam._m0[39u]), vec4(_1127, _1128, _1129, 1.0));
        _1170 = dot(vec3(isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1158) ? 0.0 : (isnan(0.0) ? _1158 : max(0.0, _1158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1170 = 1.0;
    }
    float _1181;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1172 = dot(vec4(cbModelParam._m0[40u]), vec4(_1127, _1128, _1129, 1.0));
        _1181 = dot(vec3(isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)), isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1172) ? 0.0 : (isnan(0.0) ? _1172 : max(0.0, _1172))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1181 = 1.0;
    }
    float _1185 = (_1181 * cbModelParam._m0[1u].x) + (_1170 * (1.0 - cbModelParam._m0[1u].x));
    float _1195 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _203);
    float _1196 = isnan(_1195) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1195 : min(cbModelParam._m0[25u].z, _1195));
    float _1278;
    float _1280;
    float _1282;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1245 = fma(_447, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439)) + cbModelParam._m0[13u].w;
        float _1249 = fma(_447, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439)) + cbModelParam._m0[14u].w;
        float _1253 = fma(_447, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439)) + cbModelParam._m0[15u].w;
        float _1256 = fma(_385, cbModelParam._m0[13u].z, fma(_384, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _383));
        float _1259 = fma(_385, cbModelParam._m0[14u].z, fma(_384, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _383));
        float _1262 = fma(_385, cbModelParam._m0[15u].z, fma(_384, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _383));
        float _1290;
        if (_1256 > 0.0)
        {
            _1290 = abs((1.0 - _1245) / _1256);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1245 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1290 = frontier_phi_14_12_ladder;
        }
        float _1499;
        if (_1259 > 0.0)
        {
            _1499 = abs((1.0 - _1249) / _1259);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1249 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1499 = frontier_phi_23_19_ladder;
        }
        float _1753;
        if (_1262 > 0.0)
        {
            _1753 = abs((1.0 - _1253) / _1262);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1253 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1753 = frontier_phi_35_30_ladder;
        }
        float _1755 = isnan(_1499) ? _1290 : (isnan(_1290) ? _1499 : min(_1290, _1499));
        float _1756 = isnan(_1753) ? _1755 : (isnan(_1755) ? _1753 : min(_1755, _1753));
        float _1760 = (_1756 * _1256) + _1245;
        float _1761 = (_1756 * _1259) + _1249;
        float _1762 = (_1756 * _1262) + _1253;
        float _1763 = _1756 * 9.9999997473787516355514526367188e-05;
        float _1765 = (-1.0) - _1763;
        float _1767 = _1763 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1762 > _1767) || ((_1762 < _1765) || ((_1761 > _1767) || ((_1761 < _1765) || ((_1760 < _1765) || (_1760 > _1767))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1762, cbModelParam._m0[9u].z, fma(_1761, cbModelParam._m0[9u].y, _1760 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1762, cbModelParam._m0[10u].z, fma(_1761, cbModelParam._m0[10u].y, _1760 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1762, cbModelParam._m0[11u].z, fma(_1761, cbModelParam._m0[11u].y, _1760 * cbModelParam._m0[11u].x))), _1196);
            frontier_phi_13_35_ladder = _1890.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1890.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1890.x * cbModelParam._m0[1u].y;
        }
        _1278 = frontier_phi_13_35_ladder_2;
        _1280 = frontier_phi_13_35_ladder_1;
        _1282 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_383, _384, _385), _1196);
        _1278 = _1266.x * cbModelParam._m0[1u].y;
        _1280 = _1266.y * cbModelParam._m0[1u].y;
        _1282 = _1266.z * cbModelParam._m0[1u].y;
    }
    float _1286 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _203);
    float _1287 = isnan(_1286) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1286 : min(cbModelParam._m0[25u].w, _1286));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1344 = fma(_447, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439)) + cbModelParam._m0[21u].w;
        float _1348 = fma(_447, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439)) + cbModelParam._m0[22u].w;
        float _1352 = fma(_447, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439)) + cbModelParam._m0[23u].w;
        float _1355 = fma(_385, cbModelParam._m0[21u].z, fma(_384, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _383));
        float _1358 = fma(_385, cbModelParam._m0[22u].z, fma(_384, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _383));
        float _1361 = fma(_385, cbModelParam._m0[23u].z, fma(_384, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _383));
        float _1504;
        if (_1355 > 0.0)
        {
            _1504 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1504 = frontier_phi_25_21_ladder;
        }
        float _1780;
        if (_1358 > 0.0)
        {
            _1780 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1780 = frontier_phi_37_32_ladder;
        }
        float _1993;
        if (_1361 > 0.0)
        {
            _1993 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1993 = frontier_phi_46_43_ladder;
        }
        float _1995 = isnan(_1780) ? _1504 : (isnan(_1504) ? _1780 : min(_1504, _1780));
        float _1996 = isnan(_1993) ? _1995 : (isnan(_1995) ? _1993 : min(_1995, _1993));
        float _2000 = (_1996 * _1355) + _1344;
        float _2001 = (_1996 * _1358) + _1348;
        float _2002 = (_1996 * _1361) + _1352;
        float _2003 = _1996 * 9.9999997473787516355514526367188e-05;
        float _2004 = (-1.0) - _2003;
        float _2006 = _2003 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2002 > _2006) || ((_2002 < _2004) || ((_2001 > _2006) || ((_2001 < _2004) || ((_2000 < _2004) || (_2000 > _2006))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2203 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2002, cbModelParam._m0[17u].z, fma(_2001, cbModelParam._m0[17u].y, _2000 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2002, cbModelParam._m0[18u].z, fma(_2001, cbModelParam._m0[18u].y, _2000 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2002, cbModelParam._m0[19u].z, fma(_2001, cbModelParam._m0[19u].y, _2000 * cbModelParam._m0[19u].x))), _1287);
            frontier_phi_22_46_ladder = _2203.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2203.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2203.x * cbModelParam._m0[1u].z;
        }
        _1380 = frontier_phi_22_46_ladder_2;
        _1382 = frontier_phi_22_46_ladder_1;
        _1384 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_383, _384, _385), _1287);
        _1380 = _1364.x * cbModelParam._m0[1u].z;
        _1382 = _1364.y * cbModelParam._m0[1u].z;
        _1384 = _1364.z * cbModelParam._m0[1u].z;
    }
    float _1397 = (((_410 * _357) + _411) * _374) * ((cbModelParam._m0[1u].w * (_1380 - _1278)) + _1278);
    float _1399 = (((_410 * _359) + _411) * _374) * ((cbModelParam._m0[1u].w * (_1382 - _1280)) + _1280);
    float _1401 = (((_410 * _360) + _411) * _374) * ((cbModelParam._m0[1u].w * (_1384 - _1282)) + _1282);
    float _1404 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, _1397 * cbSceneParam._m0[91u].x));
    uvec4 _1420 = floatBitsToUint(cbInstanceData._m0[_331 + 5u]);
    uint _1422 = _1420.x * 14u;
    uint _1423 = _1422 + 13u;
    float _1430 = _374 + (-1.0);
    float _1436 = (cbLight._m0[_1423].x * _1430) + 1.0;
    float _1437 = (cbLight._m0[_1423].y * _1430) + 1.0;
    float _1438 = (cbLight._m0[_1423].z * _1430) + 1.0;
    float _1439 = (cbLight._m0[_1423].w * _1430) + 1.0;
    uint _1440 = _1422 + 5u;
    float _1446 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
    uint _1450 = _1422 + 4u;
    float _1457 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
    uint _1461 = _1422 | 1u;
    float _1472 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_198, _199, _200));
    float _1475 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_198, _199, _200));
    float _3568 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
    float _3579 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
    float _1480 = (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.3183098733425140380859375;
    float _1482 = (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.3183098733425140380859375;
    float _1489 = ((cbLight._m0[_1440].x * _1446) * _1482) + ((cbLight._m0[_1450].x * _1457) * _1480);
    float _1490 = ((_1446 * cbLight._m0[_1440].y) * _1482) + ((_1457 * cbLight._m0[_1450].y) * _1480);
    float _1491 = ((_1446 * cbLight._m0[_1440].z) * _1482) + ((_1457 * cbLight._m0[_1450].z) * _1480);
    uvec4 _1496 = floatBitsToUint(cbLight._m0[_1422 + 12u]);
    bool _1498 = _1496.x == 0u;
    float _1509;
    float _1511;
    float _1513;
    if (_1498)
    {
        _1509 = _1489;
        _1511 = _1490;
        _1513 = _1491;
    }
    else
    {
        uint _1517 = _1422 + 6u;
        float _1533 = (dot(vec3(cbLight._m0[_1422 + 2u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1534 = _1533 * _1533;
        float _3590 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1536 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1509 = (((cbLight._m0[_1517].x * 0.3183098733425140380859375) * _1535) * _1536) + _1489;
        _1511 = (((cbLight._m0[_1517].y * 0.3183098733425140380859375) * _1535) * _1536) + _1490;
        _1513 = (((cbLight._m0[_1517].z * 0.3183098733425140380859375) * _1535) * _1536) + _1491;
    }
    bool _1516 = _1496.y == 0u;
    float _1554;
    float _1556;
    float _1558;
    if (_1516)
    {
        _1554 = _1509;
        _1556 = _1511;
        _1558 = _1513;
    }
    else
    {
        uint _1724 = _1422 + 7u;
        float _1740 = (dot(vec3(cbLight._m0[_1422 + 3u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1741 = _1740 * _1740;
        float _3606 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1743 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1554 = (((cbLight._m0[_1724].x * 0.3183098733425140380859375) * _1742) * _1743) + _1509;
        _1556 = (((cbLight._m0[_1724].y * 0.3183098733425140380859375) * _1742) * _1743) + _1511;
        _1558 = (((cbLight._m0[_1724].z * 0.3183098733425140380859375) * _1742) * _1743) + _1513;
    }
    uint _1561 = _1422 + 8u;
    float _1574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1422].w)) * _203) * 0.949999988079071044921875);
    float _1575 = _1574 * _1574;
    float _1576 = cbLight._m0[_1422].x + _282;
    float _1577 = cbLight._m0[_1422].y + _283;
    float _1578 = cbLight._m0[_1422].z + _284;
    float _1582 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
    float _1583 = _1582 * _1576;
    float _1584 = _1582 * _1577;
    float _1585 = _1582 * _1578;
    float _1586 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1422].xyz));
    float _3622 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _1589 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _1590 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _1591 = dot(vec3(_198, _199, _200), vec3(_1583, _1584, _1585));
    float _3644 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1594 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _1595 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_1583, _1584, _1585));
    float _3655 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1599 = _1575 * _1575;
    float _1603 = ((_1594 * _1594) * (_1599 + (-1.0))) + 1.0;
    float _1611 = exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0);
    float _1612 = 0.959999978542327880859375 - _354;
    float _1614 = 0.959999978542327880859375 - _355;
    float _1615 = 0.959999978542327880859375 - _356;
    float _1622 = 1.0 - _1575;
    float _1633 = (0.5 / (((_1590 * ((_1589 * _1622) + _1575)) + 9.9999999392252902907785028219223e-09) + (((_1590 * _1622) + _1575) * _1589))) * _1589;
    float _3666 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1635 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1599 / ((_1603 * _1603) * 3.141590118408203125));
    uint _1646 = _1422 + 9u;
    float _1657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1461].w)) * _203) * 0.949999988079071044921875);
    float _1658 = _1657 * _1657;
    float _1659 = cbLight._m0[_1461].x + _282;
    float _1660 = cbLight._m0[_1461].y + _283;
    float _1661 = cbLight._m0[_1461].z + _284;
    float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
    float _1666 = _1665 * _1659;
    float _1667 = _1665 * _1660;
    float _1668 = _1665 * _1661;
    float _1669 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1461].xyz));
    float _3677 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1672 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _1673 = dot(vec3(_198, _199, _200), vec3(_1666, _1667, _1668));
    float _3688 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1676 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _1677 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_1666, _1667, _1668));
    float _3699 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1681 = _1658 * _1658;
    float _1685 = ((_1676 * _1676) * (_1681 + (-1.0))) + 1.0;
    float _1692 = exp2(log2(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * 5.0);
    float _1699 = 1.0 - _1658;
    float _1709 = (0.5 / (((_1590 * ((_1672 * _1699) + _1658)) + 9.9999999392252902907785028219223e-09) + (((_1590 * _1699) + _1658) * _1672))) * _1672;
    float _3710 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1711 = (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1681 / ((_1685 * _1685) * 3.141590118408203125));
    float _1721 = (((((_1692 * _1612) + _357) * cbLight._m0[_1646].x) * _1711) * _1446) + (((((_1611 * _1612) + _357) * cbLight._m0[_1561].x) * _1635) * _1457);
    float _1722 = (((((_1692 * _1614) + _359) * cbLight._m0[_1646].y) * _1711) * _1446) + (((((_1611 * _1614) + _359) * cbLight._m0[_1561].y) * _1635) * _1457);
    float _1723 = (((((_1692 * _1615) + _360) * cbLight._m0[_1646].z) * _1711) * _1446) + (((((_1611 * _1615) + _360) * cbLight._m0[_1561].z) * _1635) * _1457);
    float _1785;
    float _1787;
    float _1789;
    if (_1498)
    {
        _1785 = _1721;
        _1787 = _1722;
        _1789 = _1723;
    }
    else
    {
        uint _1791 = _1422 + 2u;
        uint _1795 = _1422 + 10u;
        float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _203) * 0.949999988079071044921875);
        float _1810 = _1809 * _1809;
        float _1811 = cbLight._m0[_1791].x + _282;
        float _1812 = cbLight._m0[_1791].y + _283;
        float _1813 = cbLight._m0[_1791].z + _284;
        float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
        float _1818 = _1817 * _1811;
        float _1819 = _1817 * _1812;
        float _1820 = _1817 * _1813;
        float _1821 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1791].xyz));
        float _3721 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1824 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1825 = dot(vec3(_198, _199, _200), vec3(_1818, _1819, _1820));
        float _3732 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1828 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1829 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1818, _1819, _1820));
        float _3743 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1833 = _1810 * _1810;
        float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
        float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * 5.0);
        float _1851 = 1.0 - _1810;
        float _1861 = (0.5 / (((_1590 * ((_1824 * _1851) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1590 * _1851) + _1810) * _1824))) * _1824;
        float _3754 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1863 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
        float _1864 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1785 = (((((_1844 * _1612) + _357) * cbLight._m0[_1795].x) * _1863) * _1864) + _1721;
        _1787 = (((((_1844 * _1614) + _359) * cbLight._m0[_1795].y) * _1863) * _1864) + _1722;
        _1789 = (((((_1844 * _1615) + _360) * cbLight._m0[_1795].z) * _1863) * _1864) + _1723;
    }
    float _1899;
    float _1901;
    float _1903;
    if (_1516)
    {
        _1899 = _1785;
        _1901 = _1787;
        _1903 = _1789;
    }
    else
    {
        uint _1910 = _1422 + 3u;
        uint _1914 = _1422 + 11u;
        float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _203) * 0.949999988079071044921875);
        float _1929 = _1928 * _1928;
        float _1930 = cbLight._m0[_1910].x + _282;
        float _1931 = cbLight._m0[_1910].y + _283;
        float _1932 = cbLight._m0[_1910].z + _284;
        float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
        float _1937 = _1936 * _1930;
        float _1938 = _1936 * _1931;
        float _1939 = _1936 * _1932;
        float _1940 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1910].xyz));
        float _3770 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1943 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1944 = dot(vec3(_198, _199, _200), vec3(_1937, _1938, _1939));
        float _3781 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1948 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_1937, _1938, _1939));
        float _3792 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1952 = _1929 * _1929;
        float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
        float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0);
        float _1970 = 1.0 - _1929;
        float _1980 = (0.5 / (((_1590 * ((_1943 * _1970) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1590 * _1970) + _1929) * _1943))) * _1943;
        float _3803 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1982 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
        float _1983 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1899 = (((((_1963 * _1612) + _357) * cbLight._m0[_1914].x) * _1982) * _1983) + _1785;
        _1901 = (((((_1963 * _1614) + _359) * cbLight._m0[_1914].y) * _1982) * _1983) + _1787;
        _1903 = (((((_1963 * _1615) + _360) * cbLight._m0[_1914].z) * _1982) * _1983) + _1789;
    }
    float _2118;
    float _2120;
    float _2122;
    float _2124;
    float _2126;
    float _2128;
    if (_1420.y == 0u)
    {
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2059 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2058;
        float _2060 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2058;
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2058;
        uvec4 _2073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2074 = _2073.x;
        uint _2085 = uint((float(_2073.y) * floor(float(uint(cbSceneParam._m0[85u].y * _291) / _2074))) + floor(float(uint(cbSceneParam._m0[85u].x * _290) / _2074)));
        float _2095 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2096 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        uint _2099 = uint(isnan(14.0) ? _2096 : (isnan(_2096) ? 14.0 : min(_2096, 14.0)));
        uvec4 _2104 = texelFetch(g_lightClusterGridBuffer, int(((_2099 << 2u) + (_2085 << 6u)) >> 2u));
        uint _2105 = _2104.x;
        uint _2106 = _2073.z;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        if (((((1u << ((_2106 >> 4u) & 15u)) + 4294967295u) & _2105) == 0u) || ((_2106 & 240u) == 0u))
        {
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
            _2218 = 0.0;
        }
        else
        {
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2219;
            float _2353 = 0.0;
            float _2354 = 0.0;
            float _2355 = 0.0;
            float _2356 = 0.0;
            float _2357 = 0.0;
            float _2358 = 0.0;
            uint _2359 = 0u;
            uint _2368;
            bool _2369;
            for (;;)
            {
                _2368 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2359 << 2u)) >> 2u)).x;
                _2369 = _2368 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2369)
                {
                    frontier_phi_61_pred = _2353;
                    frontier_phi_61_pred_1 = _2358;
                    frontier_phi_61_pred_2 = _2357;
                    frontier_phi_61_pred_3 = _2356;
                    frontier_phi_61_pred_4 = _2355;
                    frontier_phi_61_pred_5 = _2354;
                }
                else
                {
                    float _2477;
                    float _2478;
                    float _2479;
                    float _2480;
                    float _2481;
                    float _2482;
                    uint _2483;
                    _2477 = _2353;
                    _2478 = _2354;
                    _2479 = _2355;
                    _2480 = _2356;
                    _2481 = _2357;
                    _2482 = _2358;
                    _2483 = _2368;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    for (;;)
                    {
                        uint _2487 = uint(findLSB(_2483)) + (_2359 << 5u);
                        uint _2484 = (_2483 + 4294967295u) & _2483;
                        uint _2489 = _2487 * 48u;
                        vec4 _2503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2489)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 3u)).x));
                        uint _2509 = (_2487 * 48u) + 4u;
                        vec4 _2522 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2509)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 3u)).x));
                        uint _2528 = (_2487 * 48u) + 8u;
                        vec3 _2539 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2528)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 2u)).x));
                        float _2543 = _2503.x - _2059;
                        float _2544 = _2503.y - _2060;
                        float _2545 = _2503.z - _2061;
                        float _2546 = dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545));
                        float _2549 = inversesqrt(_2546);
                        float _2550 = _2549 * _2543;
                        float _2551 = _2549 * _2544;
                        float _2552 = _2549 * _2545;
                        float _2553 = dot(vec3(_312, _315, _318), vec3(_2550, _2551, _2552));
                        float _2558 = 1.0 - (_2546 * _2503.w);
                        float _3829 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2559 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                        float _2560 = sqrt(_2546) * _2522.w;
                        float _2563 = 1.39999997615814208984375 / (_2560 + 1.39999997615814208984375);
                        float _2564 = _2563 * _2563;
                        float _2567 = ((1.0 - _2564) * _2553) + _2564;
                        float _2570 = _2560 * _2560;
                        float _2574 = ((isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))) * _2559) / ((_2570 * 0.699999988079071044921875) + 1.0);
                        float _2578 = (-0.0) - _2059;
                        float _2579 = (-0.0) - _2060;
                        float _2580 = (-0.0) - _2061;
                        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
                        float _2585 = _2584 * _2578;
                        float _2586 = _2584 * _2579;
                        float _2587 = _2584 * _2580;
                        float _2595 = exp2(log2(1.0 / ((_2570 * 3.5) + 5.0)) * 0.25);
                        float _2596 = 1.0 - _391;
                        float _2603 = sqrt(1.0 - ((1.0 - (_2596 * _2596)) * (1.0 - (_2595 * _2595))));
                        float _2604 = _2603 * _2603;
                        float _2605 = _2604 * _2604;
                        float _2606 = _2585 + _2550;
                        float _2607 = _2586 + _2551;
                        float _2608 = _2587 + _2552;
                        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
                        float _2616 = dot(vec3(_312, _315, _318), vec3(_2585, _2586, _2587));
                        float _3845 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _2619 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                        float _2620 = dot(vec3(_312, _315, _318), vec3(_2612 * _2606, _2612 * _2607, _2612 * _2608));
                        float _3856 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2623 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                        float _2627 = ((_2623 * _2623) * (_2605 + (-1.0))) + 1.0;
                        float _2628 = _2563 * _2604;
                        float _2629 = _2628 * _2628;
                        float _2632 = ((1.0 - _2629) * _2553) + _2629;
                        float _3867 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
                        float _2633 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                        float _2634 = 1.0 - _2604;
                        float _2644 = (0.5 / (((_2633 * ((_2619 * _2634) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2634) + _2604) * _2619))) * _2633;
                        float _3878 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                        float _2655 = (((_2605 * 3.1415927410125732421875) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) / ((_2627 * _2627) * ((_2570 * 2.1991131305694580078125) + 3.141590118408203125))) * _2559;
                        _2412 = (_2574 * _2522.x) + _2480;
                        _2413 = (_2574 * _2522.y) + _2481;
                        _2414 = (_2574 * _2522.z) + _2482;
                        _2409 = (_2655 * _2539.x) + _2477;
                        _2410 = (_2655 * _2539.y) + _2478;
                        _2411 = (_2655 * _2539.z) + _2479;
                        if (_2484 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2477 = _2409;
                            _2478 = _2410;
                            _2479 = _2411;
                            _2480 = _2412;
                            _2481 = _2413;
                            _2482 = _2414;
                            _2483 = _2484;
                        }
                    }
                    frontier_phi_61_pred = _2409;
                    frontier_phi_61_pred_1 = _2414;
                    frontier_phi_61_pred_2 = _2413;
                    frontier_phi_61_pred_3 = _2412;
                    frontier_phi_61_pred_4 = _2411;
                    frontier_phi_61_pred_5 = _2410;
                }
                _2209 = frontier_phi_61_pred;
                _2219 = frontier_phi_61_pred_1;
                _2217 = frontier_phi_61_pred_2;
                _2215 = frontier_phi_61_pred_3;
                _2213 = frontier_phi_61_pred_4;
                _2211 = frontier_phi_61_pred_5;
                uint _2360 = _2359 + 1u;
                if (_2360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2353 = _2209;
                    _2354 = _2211;
                    _2355 = _2213;
                    _2356 = _2215;
                    _2357 = _2217;
                    _2358 = _2219;
                    _2359 = _2360;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
            _2218 = _2219;
        }
        uvec4 _2222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2223 = _2222.z;
        uint _2225 = (_2223 >> 8u) & 15u;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        if (((4294967295u << _2225) & _2105) == 0u)
        {
            _2321 = _2208;
            _2323 = _2210;
            _2325 = _2212;
            _2327 = _2214;
            _2329 = _2216;
            _2331 = _2218;
        }
        else
        {
            float _2346 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _2347 = _2346 * _2059;
            float _2348 = _2346 * _2060;
            float _2349 = _2346 * _2061;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2225 < ((_2223 >> 12u) & 15u))
            {
                float _2322;
                float _2324;
                float _2326;
                float _2328;
                float _2330;
                float _2332;
                float _2460 = _2208;
                float _2461 = _2210;
                float _2462 = _2212;
                float _2463 = _2214;
                float _2464 = _2216;
                float _2465 = _2218;
                uint _2466 = _2225;
                uint _2475;
                bool _2476;
                for (;;)
                {
                    _2475 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2466 << 2u)) >> 2u)).x;
                    _2476 = _2475 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2476)
                    {
                        frontier_phi_67_pred = _2463;
                        frontier_phi_67_pred_1 = _2464;
                        frontier_phi_67_pred_2 = _2465;
                        frontier_phi_67_pred_3 = _2462;
                        frontier_phi_67_pred_4 = _2461;
                        frontier_phi_67_pred_5 = _2460;
                    }
                    else
                    {
                        float _2660;
                        float _2661;
                        float _2662;
                        float _2663;
                        float _2664;
                        float _2665;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2673 = _2460;
                        float _2674 = _2461;
                        float _2675 = _2462;
                        float _2676 = _2463;
                        float _2677 = _2464;
                        float _2678 = _2465;
                        uint _2679 = _2475;
                        uint _2680;
                        vec4 _2705;
                        float _2706;
                        vec4 _2721;
                        vec3 _2733;
                        vec4 _2749;
                        vec4 _2765;
                        float _2812;
                        bool _2813;
                        for (;;)
                        {
                            uint _2690 = ((_2466 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2679));
                            _2680 = (_2679 + 4294967295u) & _2679;
                            uint _2692 = _2690 * 40u;
                            _2705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 3u)).x));
                            _2706 = _2705.w;
                            uint _2708 = (_2690 * 40u) + 4u;
                            _2721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 3u)).x));
                            uint _2723 = (_2690 * 40u) + 8u;
                            _2733 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x));
                            uint _2736 = (_2690 * 40u) + 16u;
                            _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            uint _2752 = (_2690 * 40u) + 20u;
                            _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            uint _2768 = (_2690 * 40u) + 24u;
                            vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 3u)).x));
                            uint _2787 = (_2690 * 40u) + 28u;
                            vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            _2812 = fma(_2061, _2800.z, fma(_2060, _2800.y, _2800.x * _2059)) + _2800.w;
                            _2813 = !((fma(_2061, _2781.z, fma(_2060, _2781.y, _2781.x * _2059)) + _2781.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2813)
                            {
                                float _2840 = _2705.x - _2059;
                                float _2841 = _2705.y - _2060;
                                float _2842 = _2705.z - _2061;
                                float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                                float _2846 = inversesqrt(_2843);
                                float _2847 = _2846 * _2840;
                                float _2848 = _2846 * _2841;
                                float _2849 = _2846 * _2842;
                                float _2853 = 1.0 - (_2843 / (_2706 * _2706));
                                float _3889 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                                float _2854 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                                float _2858 = sqrt(_2843) * _2721.w;
                                float _2860 = 1.39999997615814208984375 / (_2858 + 1.39999997615814208984375);
                                float _2861 = _2860 * _2860;
                                float _2864 = ((1.0 - _2861) * dot(vec3(_2847, _2848, _2849), vec3(_312, _315, _318))) + _2861;
                                float _2867 = _2858 * _2858;
                                float _2871 = (fma(_2061, _2749.z, fma(_2060, _2749.y, _2749.x * _2059)) + _2749.w) / _2812;
                                float _2872 = (fma(_2061, _2765.z, fma(_2060, _2765.y, _2765.x * _2059)) + _2765.w) / _2812;
                                float _2876 = 1.0 - dot(vec2(_2871, _2872), vec2(_2871, _2872));
                                float _3905 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                                float _2877 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _2878 = _2877 * (((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2854) / ((_2867 * 0.699999988079071044921875) + 1.0));
                                float _2890 = exp2(log2(1.0 / ((_2867 * 3.5) + 5.0)) * 0.25);
                                float _2891 = 1.0 - _391;
                                float _2898 = sqrt(1.0 - ((1.0 - (_2891 * _2891)) * (1.0 - (_2890 * _2890))));
                                float _2899 = _2898 * _2898;
                                float _2900 = _2899 * _2899;
                                float _2901 = _2847 - _2347;
                                float _2902 = _2848 - _2348;
                                float _2903 = _2849 - _2349;
                                float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                                float _2911 = dot(vec3(_312, _315, _318), vec3((-0.0) - _2347, (-0.0) - _2348, (-0.0) - _2349));
                                float _3916 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                                float _2914 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2915 = dot(vec3(_312, _315, _318), vec3(_2907 * _2901, _2907 * _2902, _2907 * _2903));
                                float _3927 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2918 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _2922 = ((_2918 * _2918) * (_2900 + (-1.0))) + 1.0;
                                float _2923 = _2860 * _2899;
                                float _2924 = _2923 * _2923;
                                float _2930 = ((1.0 - _2924) * dot(vec3(_312, _315, _318), vec3(_2847, _2848, _2849))) + _2924;
                                float _3938 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2931 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                                float _2932 = 1.0 - _2899;
                                float _2942 = (0.5 / (((_2931 * ((_2914 * _2932) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2931 * _2932) + _2899) * _2914))) * _2931;
                                float _3949 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                                float _2952 = (_2877 * _2854) * (((_2900 * 3.1415927410125732421875) * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) / ((_2922 * _2922) * ((_2867 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2952 * _2733.x;
                                frontier_phi_73_pred_1 = _2952 * _2733.y;
                                frontier_phi_73_pred_2 = _2878 * _2721.z;
                                frontier_phi_73_pred_3 = _2878 * _2721.y;
                                frontier_phi_73_pred_4 = _2878 * _2721.x;
                                frontier_phi_73_pred_5 = _2952 * _2733.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2956 = frontier_phi_73_pred;
                            _2957 = frontier_phi_73_pred_1;
                            _2961 = frontier_phi_73_pred_2;
                            _2960 = frontier_phi_73_pred_3;
                            _2959 = frontier_phi_73_pred_4;
                            _2958 = frontier_phi_73_pred_5;
                            _2663 = _2959 + _2676;
                            _2664 = _2960 + _2677;
                            _2665 = _2961 + _2678;
                            _2660 = _2956 + _2673;
                            _2661 = _2957 + _2674;
                            _2662 = _2958 + _2675;
                            if (_2680 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2673 = _2660;
                                _2674 = _2661;
                                _2675 = _2662;
                                _2676 = _2663;
                                _2677 = _2664;
                                _2678 = _2665;
                                _2679 = _2680;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2663;
                        frontier_phi_67_pred_1 = _2664;
                        frontier_phi_67_pred_2 = _2665;
                        frontier_phi_67_pred_3 = _2662;
                        frontier_phi_67_pred_4 = _2661;
                        frontier_phi_67_pred_5 = _2660;
                    }
                    _2328 = frontier_phi_67_pred;
                    _2330 = frontier_phi_67_pred_1;
                    _2332 = frontier_phi_67_pred_2;
                    _2326 = frontier_phi_67_pred_3;
                    _2324 = frontier_phi_67_pred_4;
                    _2322 = frontier_phi_67_pred_5;
                    uint _2467 = _2466 + 1u;
                    if (_2467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2460 = _2322;
                        _2461 = _2324;
                        _2462 = _2326;
                        _2463 = _2328;
                        _2464 = _2330;
                        _2465 = _2332;
                        _2466 = _2467;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2330;
                frontier_phi_55_56_ladder_1 = _2332;
                frontier_phi_55_56_ladder_2 = _2328;
                frontier_phi_55_56_ladder_3 = _2326;
                frontier_phi_55_56_ladder_4 = _2324;
                frontier_phi_55_56_ladder_5 = _2322;
            }
            else
            {
                frontier_phi_55_56_ladder = _2216;
                frontier_phi_55_56_ladder_1 = _2218;
                frontier_phi_55_56_ladder_2 = _2214;
                frontier_phi_55_56_ladder_3 = _2212;
                frontier_phi_55_56_ladder_4 = _2210;
                frontier_phi_55_56_ladder_5 = _2208;
            }
            _2321 = frontier_phi_55_56_ladder_5;
            _2323 = frontier_phi_55_56_ladder_4;
            _2325 = frontier_phi_55_56_ladder_3;
            _2327 = frontier_phi_55_56_ladder_2;
            _2329 = frontier_phi_55_56_ladder;
            _2331 = frontier_phi_55_56_ladder_1;
        }
        float _2336 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
        _2118 = (_2336 * _2327) + _1554;
        _2120 = (_2336 * _2329) + _1556;
        _2122 = (_2336 * _2331) + _1558;
        _2124 = ((_2321 * _357) * _2336) + _1899;
        _2126 = ((_2323 * _359) * _2336) + _1901;
        _2128 = ((_2325 * _360) * _2336) + _1903;
    }
    else
    {
        _2118 = _1554;
        _2120 = _1556;
        _2122 = _1558;
        _2124 = _1899;
        _2126 = _1901;
        _2128 = _1903;
    }
    float _3965 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3976 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3987 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3998 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2153 = cbInstanceData._m0[_331 + 6u].w * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)));
    float _2158 = _290 / cbSceneParam._m0[86u].x;
    float _2159 = _291 / cbSceneParam._m0[86u].y;
    vec4 _2173 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2158, _2159, (log2((isnan(cbSceneParam._m0[77u].w) ? _223 : (isnan(_223) ? cbSceneParam._m0[77u].w : min(_223, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2175 = _2173.x;
    float _2176 = _2173.y;
    float _2177 = _2173.z;
    float _2178 = _2173.w;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    if (_223 > cbSceneParam._m0[78u].w)
    {
        float _2233 = isnan(_223) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _223 : min(cbSceneParam._m0[80u].w, _223));
        float _2234 = _2233 / _223;
        float _2245 = _2234 * _275;
        float _2246 = _276 * _2234;
        float _2247 = (-0.0) - _2246;
        float _2249 = _2234 * _277;
        float _2251 = (cbSceneParam._m0[77u].w * _2247) / _2233;
        float _2252 = _2251 + cbSceneParam._m0[79u].w;
        float _2253 = cbSceneParam._m0[79u].w - _2246;
        float _2259 = sqrt(((_2245 * _2245) + (_2246 * _2246)) + (_2249 * _2249));
        float _2262 = (1.0 - (cbSceneParam._m0[77u].w / _2233)) * _2259;
        float _2267 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2269 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2422;
        if (abs((_2247 - _2251) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2422 = ((((_2252 > 0.0) ? exp2(_2267 * _2252) : (2.0 - exp2(_2269 * _2252))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2262;
        }
        else
        {
            float _2382 = 1.0 / cbSceneParam._m0[80u].x;
            float _2383 = isnan(_2253) ? _2252 : (isnan(_2252) ? _2253 : max(_2252, _2253));
            float _2384 = isnan(_2253) ? _2252 : (isnan(_2252) ? _2253 : min(_2252, _2253));
            float _2393 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : min(_2383, 0.0));
            float _2394 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : min(_2384, 0.0));
            _2422 = ((abs(_2259 / _2247) * cbSceneParam._m0[80u].y) * ((((_2393 - _2394) * 2.0) - ((exp2(_2267 * (isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0)))) - exp2(_2267 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0))))) * _2382)) - ((exp2(_2269 * _2393) - exp2(_2269 * _2394)) * _2382))) + (_2262 * cbSceneParam._m0[80u].z);
        }
        vec4 _2424 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2158, _2159, 1.0), 0.0);
        float _2433 = exp2((_2422 * (-1.44269502162933349609375)) * (1.0 - _2424.w));
        float _2434 = log2(_2433);
        float _2450 = log2(_2178);
        _2271 = (exp2(_2450 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].x)) * _2424.x) / cbSceneParam._m0[78u].x)) + _2175;
        _2273 = (exp2(_2450 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].y)) * _2424.y) / cbSceneParam._m0[78u].y)) + _2176;
        _2275 = (exp2(_2450 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].z)) * _2424.z) / cbSceneParam._m0[78u].z)) + _2177;
        _2277 = _2433 * _2178;
    }
    else
    {
        _2271 = _2175;
        _2273 = _2176;
        _2275 = _2177;
        _2277 = _2178;
    }
    float _2289 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2290 = _2289 == 3.0;
    float _2291 = log2(_2277);
    float _2298 = exp2(_2291 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2118 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _374))) + ((_2124 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1185)) * cbPerFrame._m0[3u].x));
    float _2299 = exp2(_2291 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2120 + ((isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))) * _374))) + ((_2126 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _1185)) * cbPerFrame._m0[3u].x));
    float _2300 = exp2(_2291 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2122 + ((isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))) * _374))) + ((_2128 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _1185)) * cbPerFrame._m0[3u].x));
    float _2309 = (_2289 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2309 * (_2290 ? _2298 : (_2298 + (cbSceneParam._m0[72u].w * _2271)));
    SV_Target.y = _2309 * (_2290 ? _2299 : (_2299 + (cbSceneParam._m0[72u].w * _2273)));
    SV_Target.z = _2309 * (_2290 ? _2300 : (_2300 + (cbSceneParam._m0[72u].w * _2275)));
    SV_Target.w = _2153;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2153;
}


