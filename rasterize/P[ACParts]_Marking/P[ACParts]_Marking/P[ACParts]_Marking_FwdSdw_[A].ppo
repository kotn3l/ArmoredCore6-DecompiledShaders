#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2DArray P_ACParts_Marking_snp_0_Texture2DArray_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _799;
float _3476;
float _3477;
float _3478;
float _3479;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _169 = TEXCOORD.x * 16.0;
    vec4 _192 = texture(sampler2DArray(P_ACParts_Marking_snp_0_Texture2DArray_0, SS_ClampLinear), vec3((cbTextureTilingScale._m0[0u].x * fract(_169)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * fract(TEXCOORD.y)) + cbTextureTilingScale._m0[0u].w, floor(cbMtdParam._m0[9u].z + _169)));
    float _194 = _192.x;
    float _195 = _192.y;
    float _196 = _192.z;
    float _197 = _192.w;
    float _205 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _206 = _205 * _166;
    float _207 = _205 * _167;
    float _208 = _205 * _168;
    float _3488 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _210 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _211 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _3521 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _3532 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3543 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _215 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _231 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _273 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _283 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _273);
    float _284 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _273);
    float _285 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _273);
    float _289 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _290 = _283 * _289;
    float _291 = _284 * _289;
    float _292 = _285 * _289;
    vec4 _298 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _301 = _298.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _478 = sqrt(((_283 * _283) + (_284 * _284)) + (_285 * _285));
        float _484 = (cbMatDynParam._m0[5u].x * _478) + cbMatDynParam._m0[5u].y;
        float _3554 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
        float _485 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _489 = (cbMatDynParam._m0[5u].z * _478) + cbMatDynParam._m0[5u].w;
        float _3565 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) - _485)) + _485) < ((_301 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _313 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _314 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _334 = fma(_208, cbSceneParam._m0[5u].z, fma(_207, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _206));
    float _337 = fma(_208, cbSceneParam._m0[6u].z, fma(_207, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _206));
    float _340 = fma(_208, cbSceneParam._m0[7u].z, fma(_207, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _206));
    uint _353 = uint(roundEven(NORMAL.w)) * 13u;
    uint _355 = _353 + 9u;
    uint _356 = _355 + uint(cbMatDynParam._m0[0u].w);
    float _362 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_356].x;
    float _363 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_356].y;
    float _364 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_356].z;
    float _3576 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _368 = 1.0 - _215;
    float _369 = _365 * _368;
    float _370 = _366 * _368;
    float _371 = _367 * _368;
    float _376 = (_365 + (-0.039999999105930328369140625)) * _215;
    float _377 = (_366 + (-0.039999999105930328369140625)) * _215;
    float _378 = (_367 + (-0.039999999105930328369140625)) * _215;
    float _379 = _376 + 0.039999999105930328369140625;
    float _381 = _377 + 0.039999999105930328369140625;
    float _382 = _378 + 0.039999999105930328369140625;
    vec4 _391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _313, cbSceneParam._m0[86u].y * _314));
    float _394 = _391.x * TEXCOORD.z;
    float _395 = dot(vec3(_206, _207, _208), vec3(_290, _291, _292));
    float _398 = _395 * 2.0;
    float _403 = (_398 * _206) - _290;
    float _404 = (_398 * _207) - _291;
    float _405 = (_398 * _208) - _292;
    float _409 = abs(dot(vec3(_290, _291, _292), vec3(_206, _207, _208)));
    float _3609 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _411 = sqrt(_211);
    float _424 = exp2((_411 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_411 * 3.0));
    float _430 = (1.0 - _424) * ((_411 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _431 = _424 * _411;
    float _459 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _467 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _798;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _523 = fma(_467, cbModelParam._m0[26u].z, fma(_463, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _459));
        float _527 = fma(_467, cbModelParam._m0[27u].z, fma(_463, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _459));
        float _531 = fma(_467, cbModelParam._m0[28u].z, fma(_463, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _459));
        float _556 = _459 + _206;
        float _557 = _463 + _207;
        float _558 = _467 + _208;
        float _568 = fma(_558, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556)) - _523;
        float _569 = fma(_558, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556)) - _527;
        float _570 = fma(_558, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556)) - _531;
        float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
        float _587 = ((_574 * _568) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_523 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_574 * _569) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_527 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_574 * _570) / cbModelParam._m0[34u].z) + ((((((_531 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_592.x + (-0.5));
        float _628 = _626 * (_592.y + (-0.5));
        float _629 = _626 * (_592.z + (-0.5));
        float _636 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_599.x + (-0.5));
        float _638 = _636 * (_599.y + (-0.5));
        float _639 = _636 * (_599.z + (-0.5));
        float _646 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_606.x + (-0.5));
        float _648 = _646 * (_606.y + (-0.5));
        float _649 = _646 * (_606.z + (-0.5));
        float _656 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_613.x + (-0.5));
        float _658 = _656 * (_613.y + (-0.5));
        float _659 = _656 * (_613.z + (-0.5));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = _627 * 0.5;
        float _664 = _637 * 0.5;
        float _665 = _647 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _680 = (dot(vec3(_206, _207, _208), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _690 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3657 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_692 + 1.0))) + _697) * _660;
        float _707 = _628 * 0.5;
        float _708 = _638 * 0.5;
        float _709 = _648 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_206, _207, _208), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3690 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_734 + 1.0))) + _739) * _661;
        float _749 = _629 * 0.5;
        float _750 = _639 * 0.5;
        float _751 = _649 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _765 = (dot(vec3(_206, _207, _208), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _774 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3723 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_776 + 1.0))) + _781) * _662;
        _798 = _629;
        _800 = _628;
        _801 = _627;
        _802 = _639;
        _803 = _638;
        _804 = _637;
        _805 = _649;
        _806 = _648;
        _807 = _647;
        _808 = _662;
        _809 = _661;
        _810 = _660;
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
    }
    else
    {
        _798 = _799;
        _800 = _799;
        _801 = _799;
        _802 = _799;
        _803 = _799;
        _804 = _799;
        _805 = _799;
        _806 = _799;
        _807 = _799;
        _808 = _799;
        _809 = _799;
        _810 = _799;
        _811 = 0.0;
        _812 = 0.0;
        _813 = 0.0;
    }
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _842 = fma(_467, cbModelParam._m0[30u].z, fma(_463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _459));
        float _846 = fma(_467, cbModelParam._m0[31u].z, fma(_463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _459));
        float _850 = fma(_467, cbModelParam._m0[32u].z, fma(_463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _459));
        float _873 = _459 + _206;
        float _874 = _463 + _207;
        float _875 = _467 + _208;
        float _885 = fma(_875, cbModelParam._m0[30u].z, fma(_874, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873)) - _842;
        float _886 = fma(_875, cbModelParam._m0[31u].z, fma(_874, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873)) - _846;
        float _887 = fma(_875, cbModelParam._m0[32u].z, fma(_874, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873)) - _850;
        float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
        float _904 = ((_891 * _885) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_842 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_891 * _886) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_846 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_891 * _887) / cbModelParam._m0[35u].z) + ((((((_850 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _941 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_908.x + (-0.5));
        float _943 = _941 * (_908.y + (-0.5));
        float _944 = _941 * (_908.z + (-0.5));
        float _951 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_915.x + (-0.5));
        float _953 = _951 * (_915.y + (-0.5));
        float _954 = _951 * (_915.z + (-0.5));
        float _961 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_922.x + (-0.5));
        float _963 = _961 * (_922.y + (-0.5));
        float _964 = _961 * (_922.z + (-0.5));
        float _971 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_929.x + (-0.5));
        float _973 = _971 * (_929.y + (-0.5));
        float _974 = _971 * (_929.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_206, _207, _208), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3786 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1005 + 1.0))) + _1010) * _975;
        float _1020 = _943 * 0.5;
        float _1021 = _953 * 0.5;
        float _1022 = _963 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_206, _207, _208), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3819 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1047 + 1.0))) + _1052) * _976;
        float _1062 = _944 * 0.5;
        float _1063 = _954 * 0.5;
        float _1064 = _964 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_206, _207, _208), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3852 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1089 + 1.0))) + _1094) * _977;
        _1111 = _944;
        _1112 = _943;
        _1113 = _942;
        _1114 = _954;
        _1115 = _953;
        _1116 = _952;
        _1117 = _964;
        _1118 = _963;
        _1119 = _962;
        _1120 = _977;
        _1121 = _976;
        _1122 = _975;
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _799;
        _1112 = _799;
        _1113 = _799;
        _1114 = _799;
        _1115 = _799;
        _1116 = _799;
        _1117 = _799;
        _1118 = _799;
        _1119 = _799;
        _1120 = _799;
        _1121 = _799;
        _1122 = _799;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _811)) + _811;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _812)) + _812;
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _813)) + _813;
    float _1158 = fma(_1137, cbSceneParam._m0[89u].z, fma(_1136, cbSceneParam._m0[89u].y, _1135 * cbSceneParam._m0[89u].x));
    float _1161 = fma(_1137, cbSceneParam._m0[90u].z, fma(_1136, cbSceneParam._m0[90u].y, _1135 * cbSceneParam._m0[90u].x));
    float _1164 = fma(_1137, cbSceneParam._m0[91u].z, fma(_1136, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1135));
    float _1179 = _403 * 0.5;
    float _1180 = _404 * 0.5;
    float _1181 = _405 * 0.5;
    float _1182 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1185 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1188 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1222;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1195 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_798, _802, _805, _808));
        float _1199 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_800, _803, _806, _809));
        float _1203 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_801, _804, _807, _810));
        float _1210 = dot(vec4(cbModelParam._m0[39u]), vec4(_1179, _1180, _1181, 1.0));
        _1222 = dot(vec3(isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1210) ? 0.0 : (isnan(0.0) ? _1210 : max(0.0, _1210))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1222 = 1.0;
    }
    float _1233;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1224 = dot(vec4(cbModelParam._m0[40u]), vec4(_1179, _1180, _1181, 1.0));
        _1233 = dot(vec3(isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1224) ? 0.0 : (isnan(0.0) ? _1224 : max(0.0, _1224))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1233 = 1.0;
    }
    float _1237 = (_1233 * cbModelParam._m0[1u].x) + (_1222 * (1.0 - cbModelParam._m0[1u].x));
    float _1247 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _211);
    float _1248 = isnan(_1247) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1247 : min(cbModelParam._m0[25u].z, _1247));
    float _1330;
    float _1332;
    float _1334;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1297 = fma(_467, cbModelParam._m0[13u].z, fma(_463, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459)) + cbModelParam._m0[13u].w;
        float _1301 = fma(_467, cbModelParam._m0[14u].z, fma(_463, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459)) + cbModelParam._m0[14u].w;
        float _1305 = fma(_467, cbModelParam._m0[15u].z, fma(_463, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459)) + cbModelParam._m0[15u].w;
        float _1308 = fma(_405, cbModelParam._m0[13u].z, fma(_404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _403));
        float _1311 = fma(_405, cbModelParam._m0[14u].z, fma(_404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _403));
        float _1314 = fma(_405, cbModelParam._m0[15u].z, fma(_404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _403));
        float _1342;
        if (_1308 > 0.0)
        {
            _1342 = abs((1.0 - _1297) / _1308);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1297 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1342 = frontier_phi_17_15_ladder;
        }
        float _1518;
        if (_1311 > 0.0)
        {
            _1518 = abs((1.0 - _1301) / _1311);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1301 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1518 = frontier_phi_26_22_ladder;
        }
        float _1815;
        if (_1314 > 0.0)
        {
            _1815 = abs((1.0 - _1305) / _1314);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1305 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1815 = frontier_phi_38_33_ladder;
        }
        float _1817 = isnan(_1518) ? _1342 : (isnan(_1342) ? _1518 : min(_1342, _1518));
        float _1818 = isnan(_1815) ? _1817 : (isnan(_1817) ? _1815 : min(_1817, _1815));
        float _1822 = (_1818 * _1308) + _1297;
        float _1823 = (_1818 * _1311) + _1301;
        float _1824 = (_1818 * _1314) + _1305;
        float _1825 = _1818 * 9.9999997473787516355514526367188e-05;
        float _1827 = (-1.0) - _1825;
        float _1829 = _1825 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1824 > _1829) || ((_1824 < _1827) || ((_1823 > _1829) || ((_1823 < _1827) || ((_1822 < _1827) || (_1822 > _1829))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1824, cbModelParam._m0[9u].z, fma(_1823, cbModelParam._m0[9u].y, _1822 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1824, cbModelParam._m0[10u].z, fma(_1823, cbModelParam._m0[10u].y, _1822 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1824, cbModelParam._m0[11u].z, fma(_1823, cbModelParam._m0[11u].y, _1822 * cbModelParam._m0[11u].x))), _1248);
            frontier_phi_16_38_ladder = _1969.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1969.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1969.x * cbModelParam._m0[1u].y;
        }
        _1330 = frontier_phi_16_38_ladder_2;
        _1332 = frontier_phi_16_38_ladder_1;
        _1334 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_403, _404, _405), _1248);
        _1330 = _1318.x * cbModelParam._m0[1u].y;
        _1332 = _1318.y * cbModelParam._m0[1u].y;
        _1334 = _1318.z * cbModelParam._m0[1u].y;
    }
    float _1338 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _211);
    float _1339 = isnan(_1338) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1338 : min(cbModelParam._m0[25u].w, _1338));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1396 = fma(_467, cbModelParam._m0[21u].z, fma(_463, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459)) + cbModelParam._m0[21u].w;
        float _1400 = fma(_467, cbModelParam._m0[22u].z, fma(_463, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459)) + cbModelParam._m0[22u].w;
        float _1404 = fma(_467, cbModelParam._m0[23u].z, fma(_463, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459)) + cbModelParam._m0[23u].w;
        float _1407 = fma(_405, cbModelParam._m0[21u].z, fma(_404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _403));
        float _1410 = fma(_405, cbModelParam._m0[22u].z, fma(_404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _403));
        float _1413 = fma(_405, cbModelParam._m0[23u].z, fma(_404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _403));
        float _1523;
        if (_1407 > 0.0)
        {
            _1523 = abs((1.0 - _1396) / _1407);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1396 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1523 = frontier_phi_28_24_ladder;
        }
        float _1842;
        if (_1410 > 0.0)
        {
            _1842 = abs((1.0 - _1400) / _1410);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1400 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1842 = frontier_phi_40_35_ladder;
        }
        float _2180;
        if (_1413 > 0.0)
        {
            _2180 = abs((1.0 - _1404) / _1413);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1404 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2180 = frontier_phi_50_47_ladder;
        }
        float _2182 = isnan(_1842) ? _1523 : (isnan(_1523) ? _1842 : min(_1523, _1842));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1407) + _1396;
        float _2188 = (_2183 * _1410) + _1400;
        float _2189 = (_2183 * _1413) + _1404;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2190;
        float _2193 = _2190 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2189 > _2193) || ((_2189 < _2191) || ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 < _2191) || (_2187 > _2193))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2189, cbModelParam._m0[17u].z, fma(_2188, cbModelParam._m0[17u].y, _2187 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2189, cbModelParam._m0[18u].z, fma(_2188, cbModelParam._m0[18u].y, _2187 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2189, cbModelParam._m0[19u].z, fma(_2188, cbModelParam._m0[19u].y, _2187 * cbModelParam._m0[19u].x))), _1339);
            frontier_phi_25_50_ladder = _2311.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2311.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2311.x * cbModelParam._m0[1u].z;
        }
        _1432 = frontier_phi_25_50_ladder_2;
        _1434 = frontier_phi_25_50_ladder_1;
        _1436 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_403, _404, _405), _1339);
        _1432 = _1416.x * cbModelParam._m0[1u].z;
        _1434 = _1416.y * cbModelParam._m0[1u].z;
        _1436 = _1416.z * cbModelParam._m0[1u].z;
    }
    float _1449 = (((_430 * _379) + _431) * _394) * ((cbModelParam._m0[1u].w * (_1432 - _1330)) + _1330);
    float _1451 = (((_430 * _381) + _431) * _394) * ((cbModelParam._m0[1u].w * (_1434 - _1332)) + _1332);
    float _1453 = (((_430 * _382) + _431) * _394) * ((cbModelParam._m0[1u].w * (_1436 - _1334)) + _1334);
    float _1456 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1449 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1449 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, _1449 * cbSceneParam._m0[91u].x));
    float _1497 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1501 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1505 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1510 = _1497 / _1509;
    float _1511 = _1501 / _1509;
    float _1512 = _1505 / _1509;
    float _1659;
    float _1660;
    float _1661;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1539 = ((uint(_1512 > cbSceneParam._m0[59u].y) + uint(_1512 > cbSceneParam._m0[59u].x)) + uint(_1512 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1540 = _1539 + 43u;
        uint _1548 = _1539 + 44u;
        uint _1556 = _1539 + 45u;
        uint _1564 = _1539 + 46u;
        float _1575 = fma(_1509, cbSceneParam._m0[_1540].w, fma(_1505, cbSceneParam._m0[_1540].z, fma(_1501, cbSceneParam._m0[_1540].y, _1497 * cbSceneParam._m0[_1540].x)));
        float _1579 = fma(_1509, cbSceneParam._m0[_1548].w, fma(_1505, cbSceneParam._m0[_1548].z, fma(_1501, cbSceneParam._m0[_1548].y, _1497 * cbSceneParam._m0[_1548].x)));
        float _1587 = fma(_1509, cbSceneParam._m0[_1564].w, fma(_1505, cbSceneParam._m0[_1564].z, fma(_1501, cbSceneParam._m0[_1564].y, _1497 * cbSceneParam._m0[_1564].x)));
        float _1592 = cbSceneParam._m0[33u].z * _1587;
        float _1594 = cbSceneParam._m0[33u].w * _1587;
        float _1597 = fma(_1509, cbSceneParam._m0[_1556].w, fma(_1505, cbSceneParam._m0[_1556].z, fma(_1501, cbSceneParam._m0[_1556].y, _1497 * cbSceneParam._m0[_1556].x))) / _1587;
        float _1645 = (cbSceneParam._m0[33u].x - sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512))) * cbSceneParam._m0[33u].y;
        float _3978 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1652 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1592 + _1575) / _1587, (_1594 + _1579) / _1587), _1597), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1594 + _1575) / _1587, (_1579 - _1592) / _1587), _1597), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1575 - _1592) / _1587, (_1579 - _1594) / _1587), _1597), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1575 - _1594) / _1587, (_1592 + _1579) / _1587), _1597), 0.0)).x), vec4(0.25)));
        _1659 = 1.0 - (_1652 * cbSceneParam._m0[34u].x);
        _1660 = 1.0 - (_1652 * cbSceneParam._m0[34u].y);
        _1661 = 1.0 - (_1652 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1659 = 1.0;
        _1660 = 1.0;
        _1661 = 1.0;
    }
    float _1725;
    float _1727;
    float _1729;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1713 = fma(_1509, cbSceneParam._m0[63u].w, fma(_1505, cbSceneParam._m0[63u].z, fma(_1501, cbSceneParam._m0[63u].y, _1497 * cbSceneParam._m0[63u].x)));
        float _1714 = fma(_1509, cbSceneParam._m0[60u].w, fma(_1505, cbSceneParam._m0[60u].z, fma(_1501, cbSceneParam._m0[60u].y, _1497 * cbSceneParam._m0[60u].x))) / _1713;
        float _1715 = fma(_1509, cbSceneParam._m0[61u].w, fma(_1505, cbSceneParam._m0[61u].z, fma(_1501, cbSceneParam._m0[61u].y, _1497 * cbSceneParam._m0[61u].x))) / _1713;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1714 >= cbSceneParam._m0[64u].x) && (_1715 >= cbSceneParam._m0[64u].y)) && (_1714 <= cbSceneParam._m0[64u].z)) && (_1715 <= cbSceneParam._m0[64u].w))
        {
            float _1855 = fma(_1509, cbSceneParam._m0[62u].w, fma(_1505, cbSceneParam._m0[62u].z, fma(_1501, cbSceneParam._m0[62u].y, _1497 * cbSceneParam._m0[62u].x))) / _1713;
            float _1859 = isnan(cbSceneParam._m0[41u].w) ? _1855 : (isnan(_1855) ? cbSceneParam._m0[41u].w : max(_1855, cbSceneParam._m0[41u].w));
            float _1902 = (cbSceneParam._m0[33u].x - sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512))) * cbSceneParam._m0[33u].y;
            float _3994 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
            float _1909 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1714, cbSceneParam._m0[33u].w + _1715), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1714, _1715 - cbSceneParam._m0[33u].z), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1714 - cbSceneParam._m0[33u].z, _1715 - cbSceneParam._m0[33u].w), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1714 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1715), _1859), 0.0)).x), vec4(0.25)));
            float _1913 = 1.0 - (_1909 * cbSceneParam._m0[34u].x);
            float _1914 = 1.0 - (_1909 * cbSceneParam._m0[34u].y);
            float _1915 = 1.0 - (_1909 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1915) ? _1661 : (isnan(_1661) ? _1915 : min(_1661, _1915));
            frontier_phi_37_36_ladder_1 = isnan(_1914) ? _1660 : (isnan(_1660) ? _1914 : min(_1660, _1914));
            frontier_phi_37_36_ladder_2 = isnan(_1913) ? _1659 : (isnan(_1659) ? _1913 : min(_1659, _1913));
        }
        else
        {
            frontier_phi_37_36_ladder = _1661;
            frontier_phi_37_36_ladder_1 = _1660;
            frontier_phi_37_36_ladder_2 = _1659;
        }
        _1725 = frontier_phi_37_36_ladder_2;
        _1727 = frontier_phi_37_36_ladder_1;
        _1729 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1725 = _1659;
        _1727 = _1660;
        _1729 = _1661;
    }
    uvec4 _1734 = floatBitsToUint(cbInstanceData._m0[_353 + 5u]);
    uint _1736 = _1734.x * 14u;
    uint _1737 = _1736 + 13u;
    float _1744 = _394 + (-1.0);
    float _1750 = (cbLight._m0[_1737].x * _1744) + 1.0;
    float _1751 = (cbLight._m0[_1737].y * _1744) + 1.0;
    float _1752 = (cbLight._m0[_1737].z * _1744) + 1.0;
    float _1753 = (cbLight._m0[_1737].w * _1744) + 1.0;
    uint _1754 = _1736 + 5u;
    float _1760 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1764 = _1736 + 4u;
    float _1774 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1778 = _1736 | 1u;
    float _1789 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_206, _207, _208));
    float _1792 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_206, _207, _208));
    float _4030 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _4041 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1797 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1799 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1806 = ((cbLight._m0[_1754].x * _1760) * _1799) + (((cbLight._m0[_1764].x * _1725) * _1774) * _1797);
    float _1807 = ((_1760 * cbLight._m0[_1754].y) * _1799) + (((cbLight._m0[_1764].y * _1727) * _1774) * _1797);
    float _1808 = ((_1760 * cbLight._m0[_1754].z) * _1799) + (((cbLight._m0[_1764].z * _1729) * _1774) * _1797);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1736 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1814)
    {
        _1916 = _1806;
        _1918 = _1807;
        _1920 = _1808;
    }
    else
    {
        uint _1924 = _1736 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1736 + 2u].xyz), vec3(_206, _207, _208)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _4052 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1943 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1806;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1807;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1808;
    }
    bool _1923 = _1812.y == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1923)
    {
        _1978 = _1916;
        _1980 = _1918;
        _1982 = _1920;
    }
    else
    {
        uint _2151 = _1736 + 7u;
        float _2167 = (dot(vec3(cbLight._m0[_1736 + 3u].xyz), vec3(_206, _207, _208)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _4068 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2170 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _1978 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _1916;
        _1980 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _1918;
        _1982 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _1920;
    }
    uint _1985 = _1736 + 8u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _211) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1736].x + _290;
    float _2001 = cbLight._m0[_1736].y + _291;
    float _2002 = cbLight._m0[_1736].z + _292;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1736].xyz));
    float _4084 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _2014 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2015 = dot(vec3(_206, _207, _208), vec3(_2007, _2008, _2009));
    float _4106 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_2007, _2008, _2009));
    float _4117 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _1999 * _1999;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2035 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
    float _2036 = 0.959999978542327880859375 - _376;
    float _2038 = 0.959999978542327880859375 - _377;
    float _2039 = 0.959999978542327880859375 - _378;
    float _2046 = 1.0 - _1999;
    float _2057 = (0.5 / (((_2014 * ((_2013 * _2046) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2046) + _1999) * _2013))) * _2013;
    float _4128 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    uint _2073 = _1736 + 9u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _211) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1778].x + _290;
    float _2087 = cbLight._m0[_1778].y + _291;
    float _2088 = cbLight._m0[_1778].z + _292;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1778].xyz));
    float _4139 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2100 = dot(vec3(_206, _207, _208), vec3(_2093, _2094, _2095));
    float _4150 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_2093, _2094, _2095));
    float _4161 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2085 * _2085;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0);
    float _2126 = 1.0 - _2085;
    float _2136 = (0.5 / (((_2014 * ((_2099 * _2126) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2126) + _2085) * _2099))) * _2099;
    float _4172 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    float _2148 = (((((_2119 * _2036) + _379) * cbLight._m0[_2073].x) * _2138) * _1760) + ((((cbLight._m0[_1985].x * _1725) * ((_2035 * _2036) + _379)) * _2059) * _1774);
    float _2149 = (((((_2119 * _2038) + _381) * cbLight._m0[_2073].y) * _2138) * _1760) + ((((cbLight._m0[_1985].y * _1727) * ((_2035 * _2038) + _381)) * _2059) * _1774);
    float _2150 = (((((_2119 * _2039) + _382) * cbLight._m0[_2073].z) * _2138) * _1760) + ((((cbLight._m0[_1985].z * _1729) * ((_2035 * _2039) + _382)) * _2059) * _1774);
    float _2206;
    float _2208;
    float _2210;
    if (_1814)
    {
        _2206 = _2148;
        _2208 = _2149;
        _2210 = _2150;
    }
    else
    {
        uint _2212 = _1736 + 2u;
        uint _2216 = _1736 + 10u;
        float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _211) * 0.949999988079071044921875);
        float _2231 = _2230 * _2230;
        float _2232 = cbLight._m0[_2212].x + _290;
        float _2233 = cbLight._m0[_2212].y + _291;
        float _2234 = cbLight._m0[_2212].z + _292;
        float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
        float _2239 = _2238 * _2232;
        float _2240 = _2238 * _2233;
        float _2241 = _2238 * _2234;
        float _2242 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_2212].xyz));
        float _4183 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2246 = dot(vec3(_206, _207, _208), vec3(_2239, _2240, _2241));
        float _4194 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2250 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2239, _2240, _2241));
        float _4205 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2254 = _2231 * _2231;
        float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
        float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0);
        float _2272 = 1.0 - _2231;
        float _2282 = (0.5 / (((_2014 * ((_2245 * _2272) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2272) + _2231) * _2245))) * _2245;
        float _4216 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2206 = (((((_2265 * _2036) + _379) * cbLight._m0[_2216].x) * _2284) * _2285) + _2148;
        _2208 = (((((_2265 * _2038) + _381) * cbLight._m0[_2216].y) * _2284) * _2285) + _2149;
        _2210 = (((((_2265 * _2039) + _382) * cbLight._m0[_2216].z) * _2284) * _2285) + _2150;
    }
    float _2316;
    float _2318;
    float _2320;
    if (_1923)
    {
        _2316 = _2206;
        _2318 = _2208;
        _2320 = _2210;
    }
    else
    {
        uint _2327 = _1736 + 3u;
        uint _2331 = _1736 + 11u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _211) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _290;
        float _2348 = cbLight._m0[_2327].y + _291;
        float _2349 = cbLight._m0[_2327].z + _292;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_2327].xyz));
        float _4232 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2361 = dot(vec3(_206, _207, _208), vec3(_2354, _2355, _2356));
        float _4243 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4254 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0);
        float _2387 = 1.0 - _2346;
        float _2397 = (0.5 / (((_2014 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2387) + _2346) * _2360))) * _2360;
        float _4265 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _2316 = (((((_2380 * _2036) + _379) * cbLight._m0[_2331].x) * _2399) * _2400) + _2206;
        _2318 = (((((_2380 * _2038) + _381) * cbLight._m0[_2331].y) * _2399) * _2400) + _2208;
        _2320 = (((((_2380 * _2039) + _382) * cbLight._m0[_2331].z) * _2399) * _2400) + _2210;
    }
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    if (_1734.y == 0u)
    {
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.x;
        uint _2433 = uint((float(_2421.y) * floor(float(uint(cbSceneParam._m0[85u].y * _314) / _2422))) + floor(float(uint(cbSceneParam._m0[85u].x * _313) / _2422)));
        float _2443 = (log2(_1512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2444 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        uint _2447 = uint(isnan(14.0) ? _2444 : (isnan(_2444) ? 14.0 : min(_2444, 14.0)));
        uvec4 _2452 = texelFetch(g_lightClusterGridBuffer, int(((_2447 << 2u) + (_2433 << 6u)) >> 2u));
        uint _2453 = _2452.x;
        uint _2454 = _2421.z;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        if (((((1u << ((_2454 >> 4u) & 15u)) + 4294967295u) & _2453) == 0u) || ((_2454 & 240u) == 0u))
        {
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
        }
        else
        {
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            uint _2694 = 0u;
            uint _2703;
            bool _2704;
            for (;;)
            {
                _2703 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2694 << 2u)) >> 2u)).x;
                _2704 = _2703 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2704)
                {
                    frontier_phi_71_pred = _2693;
                    frontier_phi_71_pred_1 = _2692;
                    frontier_phi_71_pred_2 = _2691;
                    frontier_phi_71_pred_3 = _2690;
                    frontier_phi_71_pred_4 = _2689;
                    frontier_phi_71_pred_5 = _2688;
                }
                else
                {
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    uint _2839;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2703;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    for (;;)
                    {
                        uint _2843 = uint(findLSB(_2839)) + (_2694 << 5u);
                        uint _2840 = (_2839 + 4294967295u) & _2839;
                        uint _2845 = _2843 * 48u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2865 = (_2843 * 48u) + 4u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2884 = (_2843 * 48u) + 8u;
                        vec3 _2895 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x));
                        float _2899 = _2859.x - _1510;
                        float _2900 = _2859.y - _1511;
                        float _2901 = _2859.z - _1512;
                        float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                        float _2905 = inversesqrt(_2902);
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2909 = dot(vec3(_334, _337, _340), vec3(_2906, _2907, _2908));
                        float _2914 = 1.0 - (_2902 * _2859.w);
                        float _4291 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2915 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2916 = sqrt(_2902) * _2878.w;
                        float _2919 = 1.39999997615814208984375 / (_2916 + 1.39999997615814208984375);
                        float _2920 = _2919 * _2919;
                        float _2923 = ((1.0 - _2920) * _2909) + _2920;
                        float _2926 = _2916 * _2916;
                        float _2930 = ((isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))) * _2915) / ((_2926 * 0.699999988079071044921875) + 1.0);
                        float _2934 = (-0.0) - _1510;
                        float _2935 = (-0.0) - _1511;
                        float _2936 = (-0.0) - _1512;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2950 = exp2(log2(1.0 / ((_2926 * 3.5) + 5.0)) * 0.25);
                        float _2951 = 1.0 - _411;
                        float _2958 = sqrt(1.0 - ((1.0 - (_2951 * _2951)) * (1.0 - (_2950 * _2950))));
                        float _2959 = _2958 * _2958;
                        float _2960 = _2959 * _2959;
                        float _2961 = _2941 + _2906;
                        float _2962 = _2942 + _2907;
                        float _2963 = _2943 + _2908;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2971 = dot(vec3(_334, _337, _340), vec3(_2941, _2942, _2943));
                        float _4307 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2975 = dot(vec3(_334, _337, _340), vec3(_2967 * _2961, _2967 * _2962, _2967 * _2963));
                        float _4318 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2982 = ((_2978 * _2978) * (_2960 + (-1.0))) + 1.0;
                        float _2983 = _2919 * _2959;
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2909) + _2984;
                        float _4329 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _2989 = 1.0 - _2959;
                        float _2999 = (0.5 / (((_2988 * ((_2974 * _2989) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2959) * _2974))) * _2988;
                        float _4340 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3010 = (((_2960 * 3.1415927410125732421875) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) / ((_2982 * _2982) * ((_2926 * 2.1991131305694580078125) + 3.141590118408203125))) * _2915;
                        _2763 = (_2930 * _2878.x) + _2836;
                        _2764 = (_2930 * _2878.y) + _2837;
                        _2765 = (_2930 * _2878.z) + _2838;
                        _2760 = (_3010 * _2895.x) + _2833;
                        _2761 = (_3010 * _2895.y) + _2834;
                        _2762 = (_3010 * _2895.z) + _2835;
                        if (_2840 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2840;
                        }
                    }
                    frontier_phi_71_pred = _2765;
                    frontier_phi_71_pred_1 = _2764;
                    frontier_phi_71_pred_2 = _2763;
                    frontier_phi_71_pred_3 = _2762;
                    frontier_phi_71_pred_4 = _2761;
                    frontier_phi_71_pred_5 = _2760;
                }
                _2546 = frontier_phi_71_pred;
                _2544 = frontier_phi_71_pred_1;
                _2542 = frontier_phi_71_pred_2;
                _2540 = frontier_phi_71_pred_3;
                _2538 = frontier_phi_71_pred_4;
                _2536 = frontier_phi_71_pred_5;
                uint _2695 = _2694 + 1u;
                if (_2695 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2688 = _2536;
                    _2689 = _2538;
                    _2690 = _2540;
                    _2691 = _2542;
                    _2692 = _2544;
                    _2693 = _2546;
                    _2694 = _2695;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
        }
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.z;
        uint _2552 = (_2550 >> 8u) & 15u;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        if (((4294967295u << _2552) & _2453) == 0u)
        {
            _2656 = _2535;
            _2658 = _2537;
            _2660 = _2539;
            _2662 = _2541;
            _2664 = _2543;
            _2666 = _2545;
        }
        else
        {
            float _2681 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
            float _2682 = _2681 * _1510;
            float _2683 = _2681 * _1511;
            float _2684 = _2681 * _1512;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2552 < ((_2550 >> 12u) & 15u))
            {
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2816 = _2535;
                float _2817 = _2537;
                float _2818 = _2539;
                float _2819 = _2541;
                float _2820 = _2543;
                float _2821 = _2545;
                uint _2822 = _2552;
                uint _2831;
                bool _2832;
                for (;;)
                {
                    _2831 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2822 << 2u)) >> 2u)).x;
                    _2832 = _2831 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2832)
                    {
                        frontier_phi_82_pred = _2821;
                        frontier_phi_82_pred_1 = _2820;
                        frontier_phi_82_pred_2 = _2819;
                        frontier_phi_82_pred_3 = _2818;
                        frontier_phi_82_pred_4 = _2817;
                        frontier_phi_82_pred_5 = _2816;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3037 = _2816;
                        float _3038 = _2817;
                        float _3039 = _2818;
                        float _3040 = _2819;
                        float _3041 = _2820;
                        float _3042 = _2821;
                        uint _3043 = _2831;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3113;
                        vec4 _3129;
                        float _3176;
                        bool _3177;
                        for (;;)
                        {
                            uint _3054 = ((_2822 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3100 = (_3054 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3054 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3054 * 40u) + 24u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3151 = (_3054 * 40u) + 28u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3176 = fma(_1512, _3164.z, fma(_1511, _3164.y, _3164.x * _1510)) + _3164.w;
                            _3177 = !((fma(_1512, _3145.z, fma(_1511, _3145.y, _3145.x * _1510)) + _3145.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3177)
                            {
                                float _3204 = _3069.x - _1510;
                                float _3205 = _3069.y - _1511;
                                float _3206 = _3069.z - _1512;
                                float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                                float _3210 = inversesqrt(_3207);
                                float _3211 = _3210 * _3204;
                                float _3212 = _3210 * _3205;
                                float _3213 = _3210 * _3206;
                                float _3217 = 1.0 - (_3207 / (_3070 * _3070));
                                float _4351 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3222 = sqrt(_3207) * _3085.w;
                                float _3224 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                                float _3225 = _3224 * _3224;
                                float _3228 = ((1.0 - _3225) * dot(vec3(_3211, _3212, _3213), vec3(_334, _337, _340))) + _3225;
                                float _3231 = _3222 * _3222;
                                float _3235 = (fma(_1512, _3113.z, fma(_1511, _3113.y, _3113.x * _1510)) + _3113.w) / _3176;
                                float _3236 = (fma(_1512, _3129.z, fma(_1511, _3129.y, _3129.x * _1510)) + _3129.w) / _3176;
                                float _3240 = 1.0 - dot(vec2(_3235, _3236), vec2(_3235, _3236));
                                float _4367 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3242 = _3241 * (((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3218) / ((_3231 * 0.699999988079071044921875) + 1.0));
                                float _3254 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                                float _3255 = 1.0 - _411;
                                float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                                float _3263 = _3262 * _3262;
                                float _3264 = _3263 * _3263;
                                float _3265 = _3211 - _2682;
                                float _3266 = _3212 - _2683;
                                float _3267 = _3213 - _2684;
                                float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                                float _3275 = dot(vec3(_334, _337, _340), vec3((-0.0) - _2682, (-0.0) - _2683, (-0.0) - _2684));
                                float _4378 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3279 = dot(vec3(_334, _337, _340), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                                float _4389 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                                float _3287 = _3224 * _3263;
                                float _3288 = _3287 * _3287;
                                float _3294 = ((1.0 - _3288) * dot(vec3(_334, _337, _340), vec3(_3211, _3212, _3213))) + _3288;
                                float _4400 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3296 = 1.0 - _3263;
                                float _3306 = (0.5 / (((_3295 * ((_3278 * _3296) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3263) * _3278))) * _3295;
                                float _4411 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3316 = (_3241 * _3218) * (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) / ((_3286 * _3286) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3242 * _3085.z;
                                frontier_phi_88_pred_1 = _3242 * _3085.y;
                                frontier_phi_88_pred_2 = _3242 * _3085.x;
                                frontier_phi_88_pred_3 = _3316 * _3097.z;
                                frontier_phi_88_pred_4 = _3316 * _3097.y;
                                frontier_phi_88_pred_5 = _3316 * _3097.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3325 = frontier_phi_88_pred;
                            _3324 = frontier_phi_88_pred_1;
                            _3323 = frontier_phi_88_pred_2;
                            _3322 = frontier_phi_88_pred_3;
                            _3321 = frontier_phi_88_pred_4;
                            _3320 = frontier_phi_88_pred_5;
                            _3027 = _3323 + _3040;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            _3026 = _3322 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3029;
                        frontier_phi_82_pred_1 = _3028;
                        frontier_phi_82_pred_2 = _3027;
                        frontier_phi_82_pred_3 = _3026;
                        frontier_phi_82_pred_4 = _3025;
                        frontier_phi_82_pred_5 = _3024;
                    }
                    _2667 = frontier_phi_82_pred;
                    _2665 = frontier_phi_82_pred_1;
                    _2663 = frontier_phi_82_pred_2;
                    _2661 = frontier_phi_82_pred_3;
                    _2659 = frontier_phi_82_pred_4;
                    _2657 = frontier_phi_82_pred_5;
                    uint _2823 = _2822 + 1u;
                    if (_2823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2816 = _2657;
                        _2817 = _2659;
                        _2818 = _2661;
                        _2819 = _2663;
                        _2820 = _2665;
                        _2821 = _2667;
                        _2822 = _2823;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2663;
                frontier_phi_63_64_ladder_1 = _2667;
                frontier_phi_63_64_ladder_2 = _2665;
                frontier_phi_63_64_ladder_3 = _2661;
                frontier_phi_63_64_ladder_4 = _2659;
                frontier_phi_63_64_ladder_5 = _2657;
            }
            else
            {
                frontier_phi_63_64_ladder = _2541;
                frontier_phi_63_64_ladder_1 = _2545;
                frontier_phi_63_64_ladder_2 = _2543;
                frontier_phi_63_64_ladder_3 = _2539;
                frontier_phi_63_64_ladder_4 = _2537;
                frontier_phi_63_64_ladder_5 = _2535;
            }
            _2656 = frontier_phi_63_64_ladder_5;
            _2658 = frontier_phi_63_64_ladder_4;
            _2660 = frontier_phi_63_64_ladder_3;
            _2662 = frontier_phi_63_64_ladder;
            _2664 = frontier_phi_63_64_ladder_2;
            _2666 = frontier_phi_63_64_ladder_1;
        }
        float _2671 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
        _2466 = (_2671 * _2662) + _1978;
        _2468 = (_2671 * _2664) + _1980;
        _2470 = (_2671 * _2666) + _1982;
        _2472 = ((_2656 * _379) * _2671) + _2316;
        _2474 = ((_2658 * _381) * _2671) + _2318;
        _2476 = ((_2660 * _382) * _2671) + _2320;
    }
    else
    {
        _2466 = _1978;
        _2468 = _1980;
        _2470 = _1982;
        _2472 = _2316;
        _2474 = _2318;
        _2476 = _2320;
    }
    float _4427 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _4438 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _4449 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _4460 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _2494 = ((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2466 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _394))) + ((_2472 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _2495 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2468 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _394))) + ((_2474 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _2496 = ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2470 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _394))) + ((_2476 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _2501 = cbInstanceData._m0[_353 + 6u].w * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)));
    float _2506 = _313 / cbSceneParam._m0[86u].x;
    float _2507 = _314 / cbSceneParam._m0[86u].y;
    vec4 _2521 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2506, _2507, (log2((isnan(cbSceneParam._m0[77u].w) ? _231 : (isnan(_231) ? cbSceneParam._m0[77u].w : min(_231, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2523 = _2521.x;
    float _2524 = _2521.y;
    float _2525 = _2521.z;
    float _2526 = _2521.w;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_231 > cbSceneParam._m0[78u].w)
    {
        float _2560 = isnan(_231) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _231 : min(cbSceneParam._m0[80u].w, _231));
        float _2561 = _2560 / _231;
        float _2572 = _2561 * _283;
        float _2573 = _284 * _2561;
        float _2574 = (-0.0) - _2573;
        float _2576 = _2561 * _285;
        float _2578 = (cbSceneParam._m0[77u].w * _2574) / _2560;
        float _2579 = _2578 + cbSceneParam._m0[79u].w;
        float _2580 = cbSceneParam._m0[79u].w - _2573;
        float _2586 = sqrt(((_2572 * _2572) + (_2573 * _2573)) + (_2576 * _2576));
        float _2589 = (1.0 - (cbSceneParam._m0[77u].w / _2560)) * _2586;
        float _2594 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2596 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2773;
        if (abs((_2574 - _2578) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2773 = ((((_2579 > 0.0) ? exp2(_2594 * _2579) : (2.0 - exp2(_2596 * _2579))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2589;
        }
        else
        {
            float _2717 = 1.0 / cbSceneParam._m0[80u].x;
            float _2718 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : max(_2579, _2580));
            float _2719 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : min(_2579, _2580));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            _2773 = ((abs(_2586 / _2574) * cbSceneParam._m0[80u].y) * ((((_2728 - _2729) * 2.0) - ((exp2(_2594 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0)))) - exp2(_2594 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0))))) * _2717)) - ((exp2(_2596 * _2728) - exp2(_2596 * _2729)) * _2717))) + (_2589 * cbSceneParam._m0[80u].z);
        }
        vec4 _2775 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2506, _2507, 1.0), 0.0);
        float _2784 = exp2((_2773 * (-1.44269502162933349609375)) * (1.0 - _2775.w));
        float _2785 = log2(_2784);
        float _2801 = log2(_2526);
        _2598 = (exp2(_2801 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].x)) * _2775.x) / cbSceneParam._m0[78u].x)) + _2523;
        _2600 = (exp2(_2801 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].y)) * _2775.y) / cbSceneParam._m0[78u].y)) + _2524;
        _2602 = (exp2(_2801 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].z)) * _2775.z) / cbSceneParam._m0[78u].z)) + _2525;
        _2604 = _2784 * _2526;
    }
    else
    {
        _2598 = _2523;
        _2600 = _2524;
        _2602 = _2525;
        _2604 = _2526;
    }
    bool _2811;
    vec4 _2614;
    vec4 _2636;
    float _2638;
    float _2642;
    float _2643;
    float _2644;
    float _2645;
    bool _2655;
    for (;;)
    {
        _2614 = cbMatDynParam._m0[0u];
        float _2616 = roundEven(_2614.y);
        bool _2617 = _2616 == 3.0;
        float _2618 = log2(_2604);
        float _2625 = exp2(_2618 * cbSceneParam._m0[78u].x) * _2494;
        float _2626 = exp2(_2618 * cbSceneParam._m0[78u].y) * _2495;
        float _2627 = exp2(_2618 * cbSceneParam._m0[78u].z) * _2496;
        float _2634 = _301 + (-0.5);
        _2636 = cbMtdParam._m0[1u];
        _2638 = _2636.y * _2634;
        float _2641 = (_2616 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2642 = _2641 * (_2617 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2598)));
        _2643 = _2641 * (_2617 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2600)));
        _2644 = _2641 * (_2617 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2602)));
        _2645 = _2634 * 0.999000012874603271484375;
        _2655 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2655)
        {
            if ((cbInstanceData._m0[_353 + 7u].x + _2645) < 0.5)
            {
                _2811 = true;
                break;
            }
        }
        uint _2752 = _355 + uint(_2614.w);
        if ((cbInstanceData._m0[_2752].w < 1.0) && ((cbInstanceData._m0[_2752].w + _2645) < 0.5))
        {
            _2811 = true;
            break;
        }
        if ((_2638 + _197) < _2636.x)
        {
            _2811 = true;
            break;
        }
        _2811 = false;
        break;
    }
    float _3015;
    if (_2811)
    {
        discard_state = true;
        _3015 = 0.0;
    }
    else
    {
        _3015 = _2501;
    }
    SV_Target.x = _2642;
    SV_Target.y = _2643;
    SV_Target.z = _2644;
    SV_Target.w = _3015;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2501;
    discard_exit();
}


