#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2DArray P_ACParts_Marking_snp_0_Texture2DArray_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _754;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    float _165 = TEXCOORD.x * 16.0;
    vec4 _188 = texture(sampler2DArray(P_ACParts_Marking_snp_0_Texture2DArray_0, SS_ClampLinear), vec3((cbTextureTilingScale._m0[0u].x * fract(_165)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * fract(TEXCOORD.y)) + cbTextureTilingScale._m0[0u].w, floor(cbMtdParam._m0[9u].z + _165)));
    float _190 = _188.x;
    float _191 = _188.y;
    float _192 = _188.z;
    float _193 = _188.w;
    float _201 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _202 = _201 * _162;
    float _203 = _201 * _163;
    float _204 = _201 * _164;
    float _3377 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _206 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _207 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _3410 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _3421 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3432 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _211 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _227 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    float _285 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _286 = _279 * _285;
    float _287 = _280 * _285;
    float _288 = _281 * _285;
    float _294 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _295 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _316 = fma(_204, cbSceneParam._m0[5u].z, fma(_203, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _202));
    float _319 = fma(_204, cbSceneParam._m0[6u].z, fma(_203, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _202));
    float _322 = fma(_204, cbSceneParam._m0[7u].z, fma(_203, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _202));
    uint _335 = uint(roundEven(NORMAL.w)) * 13u;
    uint _338 = (_335 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _344 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_338].x;
    float _345 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_338].y;
    float _346 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_338].z;
    float _3443 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _347 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _348 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _349 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _350 = 1.0 - _211;
    float _351 = _347 * _350;
    float _352 = _348 * _350;
    float _353 = _349 * _350;
    float _358 = (_347 + (-0.039999999105930328369140625)) * _211;
    float _359 = (_348 + (-0.039999999105930328369140625)) * _211;
    float _360 = (_349 + (-0.039999999105930328369140625)) * _211;
    float _361 = _358 + 0.039999999105930328369140625;
    float _363 = _359 + 0.039999999105930328369140625;
    float _364 = _360 + 0.039999999105930328369140625;
    vec4 _374 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _294, cbSceneParam._m0[86u].y * _295));
    float _378 = _374.x * TEXCOORD.z;
    float _379 = dot(vec3(_202, _203, _204), vec3(_286, _287, _288));
    float _382 = _379 * 2.0;
    float _387 = (_382 * _202) - _286;
    float _388 = (_382 * _203) - _287;
    float _389 = (_382 * _204) - _288;
    float _393 = abs(dot(vec3(_286, _287, _288), vec3(_202, _203, _204)));
    float _3476 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _395 = sqrt(_207);
    float _408 = exp2((_395 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_395 * 3.0));
    float _414 = (1.0 - _408) * ((_395 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _415 = _408 * _395;
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _753;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _478 = fma(_451, cbModelParam._m0[26u].z, fma(_447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _443));
        float _482 = fma(_451, cbModelParam._m0[27u].z, fma(_447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _443));
        float _486 = fma(_451, cbModelParam._m0[28u].z, fma(_447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _443));
        float _511 = _443 + _202;
        float _512 = _447 + _203;
        float _513 = _451 + _204;
        float _523 = fma(_513, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511)) - _478;
        float _524 = fma(_513, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511)) - _482;
        float _525 = fma(_513, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511)) - _486;
        float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
        float _542 = ((_529 * _523) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_478 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _543 = ((_529 * _524) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_482 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _544 = ((_529 * _525) / cbModelParam._m0[34u].z) + ((((((_486 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        float _581 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_547.x + (-0.5));
        float _583 = _581 * (_547.y + (-0.5));
        float _584 = _581 * (_547.z + (-0.5));
        float _591 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_554.x + (-0.5));
        float _593 = _591 * (_554.y + (-0.5));
        float _594 = _591 * (_554.z + (-0.5));
        float _601 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _602 = _601 * (_561.x + (-0.5));
        float _603 = _601 * (_561.y + (-0.5));
        float _604 = _601 * (_561.z + (-0.5));
        float _611 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _612 = _611 * (_568.x + (-0.5));
        float _613 = _611 * (_568.y + (-0.5));
        float _614 = _611 * (_568.z + (-0.5));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _618 = _582 * 0.5;
        float _619 = _592 * 0.5;
        float _620 = _602 * 0.5;
        float _621 = dot(vec3(_618, _619, _620), vec3(_618, _619, _620));
        float _626 = (_621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_621);
        float _635 = (dot(vec3(_202, _203, _204), vec3(_626 * _618, _626 * _619, _626 * _620)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _645 = sqrt(((_619 * _619) + (_618 * _618)) + (_620 * _620)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _647 = _646 * 2.0;
        float _651 = (1.0 - _646) / (_646 + 1.0);
        float _3524 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _652 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _661 = ((((1.0 - _652) * (_647 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_647 + 1.0))) + _652) * _615;
        float _662 = _583 * 0.5;
        float _663 = _593 * 0.5;
        float _664 = _603 * 0.5;
        float _665 = dot(vec3(_662, _663, _664), vec3(_662, _663, _664));
        float _670 = (_665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_665);
        float _678 = (dot(vec3(_202, _203, _204), vec3(_670 * _662, _670 * _663, _670 * _664)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _687 = sqrt(((_663 * _663) + (_662 * _662)) + (_664 * _664)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _689 = _688 * 2.0;
        float _693 = (1.0 - _688) / (_688 + 1.0);
        float _3557 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _703 = ((((1.0 - _694) * (_689 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_689 + 1.0))) + _694) * _616;
        float _704 = _584 * 0.5;
        float _705 = _594 * 0.5;
        float _706 = _604 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _720 = (dot(vec3(_202, _203, _204), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _729 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_617 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3590 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_731 + 1.0))) + _736) * _617;
        _753 = _584;
        _755 = _583;
        _756 = _582;
        _757 = _594;
        _758 = _593;
        _759 = _592;
        _760 = _604;
        _761 = _603;
        _762 = _602;
        _763 = _617;
        _764 = _616;
        _765 = _615;
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0)));
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0)));
        _768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
    }
    else
    {
        _753 = _754;
        _755 = _754;
        _756 = _754;
        _757 = _754;
        _758 = _754;
        _759 = _754;
        _760 = _754;
        _761 = _754;
        _762 = _754;
        _763 = _754;
        _764 = _754;
        _765 = _754;
        _766 = 0.0;
        _767 = 0.0;
        _768 = 0.0;
    }
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _794 = fma(_451, cbModelParam._m0[30u].z, fma(_447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _443));
        float _798 = fma(_451, cbModelParam._m0[31u].z, fma(_447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _443));
        float _802 = fma(_451, cbModelParam._m0[32u].z, fma(_447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _443));
        float _825 = _443 + _202;
        float _826 = _447 + _203;
        float _827 = _451 + _204;
        float _837 = fma(_827, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825)) - _794;
        float _838 = fma(_827, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825)) - _798;
        float _839 = fma(_827, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825)) - _802;
        float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
        float _856 = ((_843 * _837) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_794 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_843 * _838) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_798 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_843 * _839) / cbModelParam._m0[35u].z) + ((((((_802 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _893 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_860.x + (-0.5));
        float _895 = _893 * (_860.y + (-0.5));
        float _896 = _893 * (_860.z + (-0.5));
        float _903 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_867.x + (-0.5));
        float _905 = _903 * (_867.y + (-0.5));
        float _906 = _903 * (_867.z + (-0.5));
        float _913 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_874.x + (-0.5));
        float _915 = _913 * (_874.y + (-0.5));
        float _916 = _913 * (_874.z + (-0.5));
        float _923 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_881.x + (-0.5));
        float _925 = _923 * (_881.y + (-0.5));
        float _926 = _923 * (_881.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_202, _203, _204), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3653 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_957 + 1.0))) + _962) * _927;
        float _972 = _895 * 0.5;
        float _973 = _905 * 0.5;
        float _974 = _915 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_202, _203, _204), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3686 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_999 + 1.0))) + _1004) * _928;
        float _1014 = _896 * 0.5;
        float _1015 = _906 * 0.5;
        float _1016 = _916 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_202, _203, _204), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3719 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1041 + 1.0))) + _1046) * _929;
        _1063 = _896;
        _1064 = _895;
        _1065 = _894;
        _1066 = _906;
        _1067 = _905;
        _1068 = _904;
        _1069 = _916;
        _1070 = _915;
        _1071 = _914;
        _1072 = _929;
        _1073 = _928;
        _1074 = _927;
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _754;
        _1064 = _754;
        _1065 = _754;
        _1066 = _754;
        _1067 = _754;
        _1068 = _754;
        _1069 = _754;
        _1070 = _754;
        _1071 = _754;
        _1072 = _754;
        _1073 = _754;
        _1074 = _754;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _766)) + _766;
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _767)) + _767;
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _768)) + _768;
    float _1110 = fma(_1089, cbSceneParam._m0[89u].z, fma(_1088, cbSceneParam._m0[89u].y, _1087 * cbSceneParam._m0[89u].x));
    float _1113 = fma(_1089, cbSceneParam._m0[90u].z, fma(_1088, cbSceneParam._m0[90u].y, _1087 * cbSceneParam._m0[90u].x));
    float _1116 = fma(_1089, cbSceneParam._m0[91u].z, fma(_1088, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1087));
    float _1131 = _387 * 0.5;
    float _1132 = _388 * 0.5;
    float _1133 = _389 * 0.5;
    float _1134 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1137 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1140 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1174;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1147 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_753, _757, _760, _763));
        float _1151 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_755, _758, _761, _764));
        float _1155 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_756, _759, _762, _765));
        float _1162 = dot(vec4(cbModelParam._m0[39u]), vec4(_1131, _1132, _1133, 1.0));
        _1174 = dot(vec3(isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1162) ? 0.0 : (isnan(0.0) ? _1162 : max(0.0, _1162))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1174 = 1.0;
    }
    float _1185;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1176 = dot(vec4(cbModelParam._m0[40u]), vec4(_1131, _1132, _1133, 1.0));
        _1185 = dot(vec3(isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1176) ? 0.0 : (isnan(0.0) ? _1176 : max(0.0, _1176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1185 = 1.0;
    }
    float _1189 = (_1185 * cbModelParam._m0[1u].x) + (_1174 * (1.0 - cbModelParam._m0[1u].x));
    float _1199 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _207);
    float _1200 = isnan(_1199) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1199 : min(cbModelParam._m0[25u].z, _1199));
    float _1282;
    float _1284;
    float _1286;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1249 = fma(_451, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443)) + cbModelParam._m0[13u].w;
        float _1253 = fma(_451, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443)) + cbModelParam._m0[14u].w;
        float _1257 = fma(_451, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443)) + cbModelParam._m0[15u].w;
        float _1260 = fma(_389, cbModelParam._m0[13u].z, fma(_388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _387));
        float _1263 = fma(_389, cbModelParam._m0[14u].z, fma(_388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _387));
        float _1266 = fma(_389, cbModelParam._m0[15u].z, fma(_388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _387));
        float _1294;
        if (_1260 > 0.0)
        {
            _1294 = abs((1.0 - _1249) / _1260);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1260 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1249 + 1.0) / _1260);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1294 = frontier_phi_14_12_ladder;
        }
        float _1470;
        if (_1263 > 0.0)
        {
            _1470 = abs((1.0 - _1253) / _1263);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1263 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1253 + 1.0) / _1263);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1470 = frontier_phi_23_19_ladder;
        }
        float _1767;
        if (_1266 > 0.0)
        {
            _1767 = abs((1.0 - _1257) / _1266);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1266 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1257 + 1.0) / _1266);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1767 = frontier_phi_35_30_ladder;
        }
        float _1769 = isnan(_1470) ? _1294 : (isnan(_1294) ? _1470 : min(_1294, _1470));
        float _1770 = isnan(_1767) ? _1769 : (isnan(_1769) ? _1767 : min(_1769, _1767));
        float _1774 = (_1770 * _1260) + _1249;
        float _1775 = (_1770 * _1263) + _1253;
        float _1776 = (_1770 * _1266) + _1257;
        float _1777 = _1770 * 9.9999997473787516355514526367188e-05;
        float _1779 = (-1.0) - _1777;
        float _1781 = _1777 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1776 > _1781) || ((_1776 < _1779) || ((_1775 > _1781) || ((_1775 < _1779) || ((_1774 < _1779) || (_1774 > _1781))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1776, cbModelParam._m0[9u].z, fma(_1775, cbModelParam._m0[9u].y, _1774 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1776, cbModelParam._m0[10u].z, fma(_1775, cbModelParam._m0[10u].y, _1774 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1776, cbModelParam._m0[11u].z, fma(_1775, cbModelParam._m0[11u].y, _1774 * cbModelParam._m0[11u].x))), _1200);
            frontier_phi_13_35_ladder = _1921.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1921.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1921.x * cbModelParam._m0[1u].y;
        }
        _1282 = frontier_phi_13_35_ladder_2;
        _1284 = frontier_phi_13_35_ladder_1;
        _1286 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_387, _388, _389), _1200);
        _1282 = _1270.x * cbModelParam._m0[1u].y;
        _1284 = _1270.y * cbModelParam._m0[1u].y;
        _1286 = _1270.z * cbModelParam._m0[1u].y;
    }
    float _1290 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _207);
    float _1291 = isnan(_1290) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1290 : min(cbModelParam._m0[25u].w, _1290));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1348 = fma(_451, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443)) + cbModelParam._m0[21u].w;
        float _1352 = fma(_451, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443)) + cbModelParam._m0[22u].w;
        float _1356 = fma(_451, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443)) + cbModelParam._m0[23u].w;
        float _1359 = fma(_389, cbModelParam._m0[21u].z, fma(_388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _387));
        float _1362 = fma(_389, cbModelParam._m0[22u].z, fma(_388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _387));
        float _1365 = fma(_389, cbModelParam._m0[23u].z, fma(_388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _387));
        float _1475;
        if (_1359 > 0.0)
        {
            _1475 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1475 = frontier_phi_25_21_ladder;
        }
        float _1794;
        if (_1362 > 0.0)
        {
            _1794 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1794 = frontier_phi_37_32_ladder;
        }
        float _2132;
        if (_1365 > 0.0)
        {
            _2132 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2132 = frontier_phi_47_44_ladder;
        }
        float _2134 = isnan(_1794) ? _1475 : (isnan(_1475) ? _1794 : min(_1475, _1794));
        float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
        float _2139 = (_2135 * _1359) + _1348;
        float _2140 = (_2135 * _1362) + _1352;
        float _2141 = (_2135 * _1365) + _1356;
        float _2142 = _2135 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2142;
        float _2145 = _2142 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2141 > _2145) || ((_2141 < _2143) || ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 < _2143) || (_2139 > _2145))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2263 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2141, cbModelParam._m0[17u].z, fma(_2140, cbModelParam._m0[17u].y, _2139 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2141, cbModelParam._m0[18u].z, fma(_2140, cbModelParam._m0[18u].y, _2139 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2141, cbModelParam._m0[19u].z, fma(_2140, cbModelParam._m0[19u].y, _2139 * cbModelParam._m0[19u].x))), _1291);
            frontier_phi_22_47_ladder = _2263.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2263.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2263.x * cbModelParam._m0[1u].z;
        }
        _1384 = frontier_phi_22_47_ladder_2;
        _1386 = frontier_phi_22_47_ladder_1;
        _1388 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_387, _388, _389), _1291);
        _1384 = _1368.x * cbModelParam._m0[1u].z;
        _1386 = _1368.y * cbModelParam._m0[1u].z;
        _1388 = _1368.z * cbModelParam._m0[1u].z;
    }
    float _1401 = (((_414 * _361) + _415) * _378) * ((cbModelParam._m0[1u].w * (_1384 - _1282)) + _1282);
    float _1403 = (((_414 * _363) + _415) * _378) * ((cbModelParam._m0[1u].w * (_1386 - _1284)) + _1284);
    float _1405 = (((_414 * _364) + _415) * _378) * ((cbModelParam._m0[1u].w * (_1388 - _1286)) + _1286);
    float _1408 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, _1401 * cbSceneParam._m0[91u].x));
    float _1449 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1453 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1457 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1461 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1462 = _1449 / _1461;
    float _1463 = _1453 / _1461;
    float _1464 = _1457 / _1461;
    float _1611;
    float _1612;
    float _1613;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1491 = ((uint(_1464 > cbSceneParam._m0[59u].y) + uint(_1464 > cbSceneParam._m0[59u].x)) + uint(_1464 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1492 = _1491 + 43u;
        uint _1500 = _1491 + 44u;
        uint _1508 = _1491 + 45u;
        uint _1516 = _1491 + 46u;
        float _1527 = fma(_1461, cbSceneParam._m0[_1492].w, fma(_1457, cbSceneParam._m0[_1492].z, fma(_1453, cbSceneParam._m0[_1492].y, _1449 * cbSceneParam._m0[_1492].x)));
        float _1531 = fma(_1461, cbSceneParam._m0[_1500].w, fma(_1457, cbSceneParam._m0[_1500].z, fma(_1453, cbSceneParam._m0[_1500].y, _1449 * cbSceneParam._m0[_1500].x)));
        float _1539 = fma(_1461, cbSceneParam._m0[_1516].w, fma(_1457, cbSceneParam._m0[_1516].z, fma(_1453, cbSceneParam._m0[_1516].y, _1449 * cbSceneParam._m0[_1516].x)));
        float _1544 = cbSceneParam._m0[33u].z * _1539;
        float _1546 = cbSceneParam._m0[33u].w * _1539;
        float _1549 = fma(_1461, cbSceneParam._m0[_1508].w, fma(_1457, cbSceneParam._m0[_1508].z, fma(_1453, cbSceneParam._m0[_1508].y, _1449 * cbSceneParam._m0[_1508].x))) / _1539;
        float _1597 = (cbSceneParam._m0[33u].x - sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464))) * cbSceneParam._m0[33u].y;
        float _3845 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1604 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1544 + _1527) / _1539, (_1546 + _1531) / _1539), _1549), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1546 + _1527) / _1539, (_1531 - _1544) / _1539), _1549), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1527 - _1544) / _1539, (_1531 - _1546) / _1539), _1549), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1527 - _1546) / _1539, (_1544 + _1531) / _1539), _1549), 0.0)).x), vec4(0.25)));
        _1611 = 1.0 - (_1604 * cbSceneParam._m0[34u].x);
        _1612 = 1.0 - (_1604 * cbSceneParam._m0[34u].y);
        _1613 = 1.0 - (_1604 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1611 = 1.0;
        _1612 = 1.0;
        _1613 = 1.0;
    }
    float _1677;
    float _1679;
    float _1681;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1665 = fma(_1461, cbSceneParam._m0[63u].w, fma(_1457, cbSceneParam._m0[63u].z, fma(_1453, cbSceneParam._m0[63u].y, _1449 * cbSceneParam._m0[63u].x)));
        float _1666 = fma(_1461, cbSceneParam._m0[60u].w, fma(_1457, cbSceneParam._m0[60u].z, fma(_1453, cbSceneParam._m0[60u].y, _1449 * cbSceneParam._m0[60u].x))) / _1665;
        float _1667 = fma(_1461, cbSceneParam._m0[61u].w, fma(_1457, cbSceneParam._m0[61u].z, fma(_1453, cbSceneParam._m0[61u].y, _1449 * cbSceneParam._m0[61u].x))) / _1665;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1666 >= cbSceneParam._m0[64u].x) && (_1667 >= cbSceneParam._m0[64u].y)) && (_1666 <= cbSceneParam._m0[64u].z)) && (_1667 <= cbSceneParam._m0[64u].w))
        {
            float _1807 = fma(_1461, cbSceneParam._m0[62u].w, fma(_1457, cbSceneParam._m0[62u].z, fma(_1453, cbSceneParam._m0[62u].y, _1449 * cbSceneParam._m0[62u].x))) / _1665;
            float _1811 = isnan(cbSceneParam._m0[41u].w) ? _1807 : (isnan(_1807) ? cbSceneParam._m0[41u].w : max(_1807, cbSceneParam._m0[41u].w));
            float _1854 = (cbSceneParam._m0[33u].x - sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464))) * cbSceneParam._m0[33u].y;
            float _3861 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
            float _1861 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1666, cbSceneParam._m0[33u].w + _1667), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1666, _1667 - cbSceneParam._m0[33u].z), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1666 - cbSceneParam._m0[33u].z, _1667 - cbSceneParam._m0[33u].w), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1666 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1667), _1811), 0.0)).x), vec4(0.25)));
            float _1865 = 1.0 - (_1861 * cbSceneParam._m0[34u].x);
            float _1866 = 1.0 - (_1861 * cbSceneParam._m0[34u].y);
            float _1867 = 1.0 - (_1861 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1867) ? _1613 : (isnan(_1613) ? _1867 : min(_1613, _1867));
            frontier_phi_34_33_ladder_1 = isnan(_1866) ? _1612 : (isnan(_1612) ? _1866 : min(_1612, _1866));
            frontier_phi_34_33_ladder_2 = isnan(_1865) ? _1611 : (isnan(_1611) ? _1865 : min(_1611, _1865));
        }
        else
        {
            frontier_phi_34_33_ladder = _1613;
            frontier_phi_34_33_ladder_1 = _1612;
            frontier_phi_34_33_ladder_2 = _1611;
        }
        _1677 = frontier_phi_34_33_ladder_2;
        _1679 = frontier_phi_34_33_ladder_1;
        _1681 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1677 = _1611;
        _1679 = _1612;
        _1681 = _1613;
    }
    uvec4 _1686 = floatBitsToUint(cbInstanceData._m0[_335 + 5u]);
    uint _1688 = _1686.x * 14u;
    uint _1689 = _1688 + 13u;
    float _1696 = _378 + (-1.0);
    float _1702 = (cbLight._m0[_1689].x * _1696) + 1.0;
    float _1703 = (cbLight._m0[_1689].y * _1696) + 1.0;
    float _1704 = (cbLight._m0[_1689].z * _1696) + 1.0;
    float _1705 = (cbLight._m0[_1689].w * _1696) + 1.0;
    uint _1706 = _1688 + 5u;
    float _1712 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1716 = _1688 + 4u;
    float _1726 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1730 = _1688 | 1u;
    float _1741 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_202, _203, _204));
    float _1744 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_202, _203, _204));
    float _3897 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _3908 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1749 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1751 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1758 = ((cbLight._m0[_1706].x * _1712) * _1751) + (((cbLight._m0[_1716].x * _1677) * _1726) * _1749);
    float _1759 = ((_1712 * cbLight._m0[_1706].y) * _1751) + (((cbLight._m0[_1716].y * _1679) * _1726) * _1749);
    float _1760 = ((_1712 * cbLight._m0[_1706].z) * _1751) + (((cbLight._m0[_1716].z * _1681) * _1726) * _1749);
    uvec4 _1764 = floatBitsToUint(cbLight._m0[_1688 + 12u]);
    bool _1766 = _1764.x == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1766)
    {
        _1868 = _1758;
        _1870 = _1759;
        _1872 = _1760;
    }
    else
    {
        uint _1876 = _1688 + 6u;
        float _1892 = (dot(vec3(cbLight._m0[_1688 + 2u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _3919 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1895 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1868 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1758;
        _1870 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1759;
        _1872 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1760;
    }
    bool _1875 = _1764.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1875)
    {
        _1930 = _1868;
        _1932 = _1870;
        _1934 = _1872;
    }
    else
    {
        uint _2103 = _1688 + 7u;
        float _2119 = (dot(vec3(cbLight._m0[_1688 + 3u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _3935 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2122 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1930 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _1868;
        _1932 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _1870;
        _1934 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _1872;
    }
    uint _1937 = _1688 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _207) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1688].x + _286;
    float _1953 = cbLight._m0[_1688].y + _287;
    float _1954 = cbLight._m0[_1688].z + _288;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1688].xyz));
    float _3951 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _1966 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1967 = dot(vec3(_202, _203, _204), vec3(_1959, _1960, _1961));
    float _3973 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1959, _1960, _1961));
    float _3984 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1987 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1988 = 0.959999978542327880859375 - _358;
    float _1990 = 0.959999978542327880859375 - _359;
    float _1991 = 0.959999978542327880859375 - _360;
    float _1998 = 1.0 - _1951;
    float _2009 = (0.5 / (((_1966 * ((_1965 * _1998) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1998) + _1951) * _1965))) * _1965;
    float _3995 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2025 = _1688 + 9u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _207) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1730].x + _286;
    float _2039 = cbLight._m0[_1730].y + _287;
    float _2040 = cbLight._m0[_1730].z + _288;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1730].xyz));
    float _4006 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _2052 = dot(vec3(_202, _203, _204), vec3(_2045, _2046, _2047));
    float _4017 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_2045, _2046, _2047));
    float _4028 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2037 * _2037;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2071 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
    float _2078 = 1.0 - _2037;
    float _2088 = (0.5 / (((_1966 * ((_2051 * _2078) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2078) + _2037) * _2051))) * _2051;
    float _4039 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    float _2100 = (((((_2071 * _1988) + _361) * cbLight._m0[_2025].x) * _2090) * _1712) + ((((cbLight._m0[_1937].x * _1677) * ((_1987 * _1988) + _361)) * _2011) * _1726);
    float _2101 = (((((_2071 * _1990) + _363) * cbLight._m0[_2025].y) * _2090) * _1712) + ((((cbLight._m0[_1937].y * _1679) * ((_1987 * _1990) + _363)) * _2011) * _1726);
    float _2102 = (((((_2071 * _1991) + _364) * cbLight._m0[_2025].z) * _2090) * _1712) + ((((cbLight._m0[_1937].z * _1681) * ((_1987 * _1991) + _364)) * _2011) * _1726);
    float _2158;
    float _2160;
    float _2162;
    if (_1766)
    {
        _2158 = _2100;
        _2160 = _2101;
        _2162 = _2102;
    }
    else
    {
        uint _2164 = _1688 + 2u;
        uint _2168 = _1688 + 10u;
        float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _207) * 0.949999988079071044921875);
        float _2183 = _2182 * _2182;
        float _2184 = cbLight._m0[_2164].x + _286;
        float _2185 = cbLight._m0[_2164].y + _287;
        float _2186 = cbLight._m0[_2164].z + _288;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2191 = _2190 * _2184;
        float _2192 = _2190 * _2185;
        float _2193 = _2190 * _2186;
        float _2194 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_2164].xyz));
        float _4050 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2198 = dot(vec3(_202, _203, _204), vec3(_2191, _2192, _2193));
        float _4061 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2191, _2192, _2193));
        float _4072 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _2183 * _2183;
        float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
        float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0);
        float _2224 = 1.0 - _2183;
        float _2234 = (0.5 / (((_1966 * ((_2197 * _2224) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2224) + _2183) * _2197))) * _2197;
        float _4083 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2236 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
        float _2237 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2158 = (((((_2217 * _1988) + _361) * cbLight._m0[_2168].x) * _2236) * _2237) + _2100;
        _2160 = (((((_2217 * _1990) + _363) * cbLight._m0[_2168].y) * _2236) * _2237) + _2101;
        _2162 = (((((_2217 * _1991) + _364) * cbLight._m0[_2168].z) * _2236) * _2237) + _2102;
    }
    float _2268;
    float _2270;
    float _2272;
    if (_1875)
    {
        _2268 = _2158;
        _2270 = _2160;
        _2272 = _2162;
    }
    else
    {
        uint _2279 = _1688 + 3u;
        uint _2283 = _1688 + 11u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _207) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _286;
        float _2300 = cbLight._m0[_2279].y + _287;
        float _2301 = cbLight._m0[_2279].z + _288;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_2279].xyz));
        float _4099 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2313 = dot(vec3(_202, _203, _204), vec3(_2306, _2307, _2308));
        float _4110 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4121 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2339 = 1.0 - _2298;
        float _2349 = (0.5 / (((_1966 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2339) + _2298) * _2312))) * _2312;
        float _4132 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2268 = (((((_2332 * _1988) + _361) * cbLight._m0[_2283].x) * _2351) * _2352) + _2158;
        _2270 = (((((_2332 * _1990) + _363) * cbLight._m0[_2283].y) * _2351) * _2352) + _2160;
        _2272 = (((((_2332 * _1991) + _364) * cbLight._m0[_2283].z) * _2351) * _2352) + _2162;
    }
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_1686.y == 0u)
    {
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.x;
        uint _2385 = uint((float(_2373.y) * floor(float(uint(cbSceneParam._m0[85u].y * _295) / _2374))) + floor(float(uint(cbSceneParam._m0[85u].x * _294) / _2374)));
        float _2395 = (log2(_1464 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2396 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        uint _2399 = uint(isnan(14.0) ? _2396 : (isnan(_2396) ? 14.0 : min(_2396, 14.0)));
        uvec4 _2404 = texelFetch(g_lightClusterGridBuffer, int(((_2399 << 2u) + (_2385 << 6u)) >> 2u));
        uint _2405 = _2404.x;
        uint _2406 = _2373.z;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((((1u << ((_2406 >> 4u) & 15u)) + 4294967295u) & _2405) == 0u) || ((_2406 & 240u) == 0u))
        {
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
        }
        else
        {
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            uint _2638 = 0u;
            uint _2647;
            bool _2648;
            for (;;)
            {
                _2647 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                _2648 = _2647 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2648)
                {
                    frontier_phi_66_pred = _2637;
                    frontier_phi_66_pred_1 = _2636;
                    frontier_phi_66_pred_2 = _2635;
                    frontier_phi_66_pred_3 = _2634;
                    frontier_phi_66_pred_4 = _2633;
                    frontier_phi_66_pred_5 = _2632;
                }
                else
                {
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    uint _2762;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2647;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    for (;;)
                    {
                        uint _2766 = uint(findLSB(_2762)) + (_2638 << 5u);
                        uint _2763 = (_2762 + 4294967295u) & _2762;
                        uint _2768 = _2766 * 48u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2788 = (_2766 * 48u) + 4u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 3u)).x));
                        uint _2807 = (_2766 * 48u) + 8u;
                        vec3 _2818 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x));
                        float _2822 = _2782.x - _1462;
                        float _2823 = _2782.y - _1463;
                        float _2824 = _2782.z - _1464;
                        float _2825 = dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824));
                        float _2828 = inversesqrt(_2825);
                        float _2829 = _2828 * _2822;
                        float _2830 = _2828 * _2823;
                        float _2831 = _2828 * _2824;
                        float _2832 = dot(vec3(_316, _319, _322), vec3(_2829, _2830, _2831));
                        float _2837 = 1.0 - (_2825 * _2782.w);
                        float _4158 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2839 = sqrt(_2825) * _2801.w;
                        float _2842 = 1.39999997615814208984375 / (_2839 + 1.39999997615814208984375);
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * _2832) + _2843;
                        float _2849 = _2839 * _2839;
                        float _2853 = ((isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * _2838) / ((_2849 * 0.699999988079071044921875) + 1.0);
                        float _2857 = (-0.0) - _1462;
                        float _2858 = (-0.0) - _1463;
                        float _2859 = (-0.0) - _1464;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2873 = exp2(log2(1.0 / ((_2849 * 3.5) + 5.0)) * 0.25);
                        float _2874 = 1.0 - _395;
                        float _2881 = sqrt(1.0 - ((1.0 - (_2874 * _2874)) * (1.0 - (_2873 * _2873))));
                        float _2882 = _2881 * _2881;
                        float _2883 = _2882 * _2882;
                        float _2884 = _2864 + _2829;
                        float _2885 = _2865 + _2830;
                        float _2886 = _2866 + _2831;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2894 = dot(vec3(_316, _319, _322), vec3(_2864, _2865, _2866));
                        float _4174 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2898 = dot(vec3(_316, _319, _322), vec3(_2890 * _2884, _2890 * _2885, _2890 * _2886));
                        float _4185 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2905 = ((_2901 * _2901) * (_2883 + (-1.0))) + 1.0;
                        float _2906 = _2842 * _2882;
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2832) + _2907;
                        float _4196 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2912 = 1.0 - _2882;
                        float _2922 = (0.5 / (((_2911 * ((_2897 * _2912) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2911 * _2912) + _2882) * _2897))) * _2911;
                        float _4207 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2933 = (((_2883 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2905 * _2905) * ((_2849 * 2.1991131305694580078125) + 3.141590118408203125))) * _2838;
                        _2691 = (_2853 * _2801.x) + _2759;
                        _2692 = (_2853 * _2801.y) + _2760;
                        _2693 = (_2853 * _2801.z) + _2761;
                        _2688 = (_2933 * _2818.x) + _2756;
                        _2689 = (_2933 * _2818.y) + _2757;
                        _2690 = (_2933 * _2818.z) + _2758;
                        if (_2763 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2763;
                        }
                    }
                    frontier_phi_66_pred = _2693;
                    frontier_phi_66_pred_1 = _2692;
                    frontier_phi_66_pred_2 = _2691;
                    frontier_phi_66_pred_3 = _2690;
                    frontier_phi_66_pred_4 = _2689;
                    frontier_phi_66_pred_5 = _2688;
                }
                _2498 = frontier_phi_66_pred;
                _2496 = frontier_phi_66_pred_1;
                _2494 = frontier_phi_66_pred_2;
                _2492 = frontier_phi_66_pred_3;
                _2490 = frontier_phi_66_pred_4;
                _2488 = frontier_phi_66_pred_5;
                uint _2639 = _2638 + 1u;
                if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2632 = _2488;
                    _2633 = _2490;
                    _2634 = _2492;
                    _2635 = _2494;
                    _2636 = _2496;
                    _2637 = _2498;
                    _2638 = _2639;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
        }
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.z;
        uint _2504 = (_2502 >> 8u) & 15u;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((4294967295u << _2504) & _2405) == 0u)
        {
            _2600 = _2487;
            _2602 = _2489;
            _2604 = _2491;
            _2606 = _2493;
            _2608 = _2495;
            _2610 = _2497;
        }
        else
        {
            float _2625 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
            float _2626 = _2625 * _1462;
            float _2627 = _2625 * _1463;
            float _2628 = _2625 * _1464;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2504 < ((_2502 >> 12u) & 15u))
            {
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2739 = _2487;
                float _2740 = _2489;
                float _2741 = _2491;
                float _2742 = _2493;
                float _2743 = _2495;
                float _2744 = _2497;
                uint _2745 = _2504;
                uint _2754;
                bool _2755;
                for (;;)
                {
                    _2754 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                    _2755 = _2754 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2755)
                    {
                        frontier_phi_72_pred = _2744;
                        frontier_phi_72_pred_1 = _2743;
                        frontier_phi_72_pred_2 = _2742;
                        frontier_phi_72_pred_3 = _2741;
                        frontier_phi_72_pred_4 = _2740;
                        frontier_phi_72_pred_5 = _2739;
                    }
                    else
                    {
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2951 = _2739;
                        float _2952 = _2740;
                        float _2953 = _2741;
                        float _2954 = _2742;
                        float _2955 = _2743;
                        float _2956 = _2744;
                        uint _2957 = _2754;
                        uint _2958;
                        vec4 _2983;
                        float _2984;
                        vec4 _2999;
                        vec3 _3011;
                        vec4 _3027;
                        vec4 _3043;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2968 = ((_2745 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2957));
                            _2958 = (_2957 + 4294967295u) & _2957;
                            uint _2970 = _2968 * 40u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2984 = _2983.w;
                            uint _2986 = (_2968 * 40u) + 4u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2968 * 40u) + 8u;
                            _3011 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x));
                            uint _3014 = (_2968 * 40u) + 16u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2968 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3046 = (_2968 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2968 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_1464, _3078.z, fma(_1463, _3078.y, _3078.x * _1462)) + _3078.w;
                            _3091 = !((fma(_1464, _3059.z, fma(_1463, _3059.y, _3059.x * _1462)) + _3059.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2983.x - _1462;
                                float _3119 = _2983.y - _1463;
                                float _3120 = _2983.z - _1464;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2984 * _2984));
                                float _4218 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3136 = sqrt(_3121) * _2999.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_316, _319, _322))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_1464, _3027.z, fma(_1463, _3027.y, _3027.x * _1462)) + _3027.w) / _3090;
                                float _3150 = (fma(_1464, _3043.z, fma(_1463, _3043.y, _3043.x * _1462)) + _3043.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4234 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _395;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2626;
                                float _3180 = _3126 - _2627;
                                float _3181 = _3127 - _2628;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_316, _319, _322), vec3((-0.0) - _2626, (-0.0) - _2627, (-0.0) - _2628));
                                float _4245 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3193 = dot(vec3(_316, _319, _322), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4256 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_316, _319, _322), vec3(_3125, _3126, _3127))) + _3202;
                                float _4267 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4278 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3156 * _2999.y;
                                frontier_phi_78_pred_1 = _3156 * _2999.x;
                                frontier_phi_78_pred_2 = _3230 * _3011.z;
                                frontier_phi_78_pred_3 = _3230 * _3011.y;
                                frontier_phi_78_pred_4 = _3230 * _3011.x;
                                frontier_phi_78_pred_5 = _3156 * _2999.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3238 = frontier_phi_78_pred;
                            _3237 = frontier_phi_78_pred_1;
                            _3236 = frontier_phi_78_pred_2;
                            _3235 = frontier_phi_78_pred_3;
                            _3234 = frontier_phi_78_pred_4;
                            _3239 = frontier_phi_78_pred_5;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            _2940 = _3236 + _2953;
                            if (_2958 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2958;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2943;
                        frontier_phi_72_pred_1 = _2942;
                        frontier_phi_72_pred_2 = _2941;
                        frontier_phi_72_pred_3 = _2940;
                        frontier_phi_72_pred_4 = _2939;
                        frontier_phi_72_pred_5 = _2938;
                    }
                    _2611 = frontier_phi_72_pred;
                    _2609 = frontier_phi_72_pred_1;
                    _2607 = frontier_phi_72_pred_2;
                    _2605 = frontier_phi_72_pred_3;
                    _2603 = frontier_phi_72_pred_4;
                    _2601 = frontier_phi_72_pred_5;
                    uint _2746 = _2745 + 1u;
                    if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2739 = _2601;
                        _2740 = _2603;
                        _2741 = _2605;
                        _2742 = _2607;
                        _2743 = _2609;
                        _2744 = _2611;
                        _2745 = _2746;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2611;
                frontier_phi_60_61_ladder_1 = _2609;
                frontier_phi_60_61_ladder_2 = _2605;
                frontier_phi_60_61_ladder_3 = _2603;
                frontier_phi_60_61_ladder_4 = _2601;
                frontier_phi_60_61_ladder_5 = _2607;
            }
            else
            {
                frontier_phi_60_61_ladder = _2497;
                frontier_phi_60_61_ladder_1 = _2495;
                frontier_phi_60_61_ladder_2 = _2491;
                frontier_phi_60_61_ladder_3 = _2489;
                frontier_phi_60_61_ladder_4 = _2487;
                frontier_phi_60_61_ladder_5 = _2493;
            }
            _2600 = frontier_phi_60_61_ladder_4;
            _2602 = frontier_phi_60_61_ladder_3;
            _2604 = frontier_phi_60_61_ladder_2;
            _2606 = frontier_phi_60_61_ladder_5;
            _2608 = frontier_phi_60_61_ladder_1;
            _2610 = frontier_phi_60_61_ladder;
        }
        float _2615 = isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0));
        _2418 = (_2615 * _2606) + _1930;
        _2420 = (_2615 * _2608) + _1932;
        _2422 = (_2615 * _2610) + _1934;
        _2424 = ((_2600 * _361) * _2615) + _2268;
        _2426 = ((_2602 * _363) * _2615) + _2270;
        _2428 = ((_2604 * _364) * _2615) + _2272;
    }
    else
    {
        _2418 = _1930;
        _2420 = _1932;
        _2422 = _1934;
        _2424 = _2268;
        _2426 = _2270;
        _2428 = _2272;
    }
    float _4294 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _4305 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _4316 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _4327 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _2453 = cbInstanceData._m0[_335 + 6u].w * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)));
    float _2458 = _294 / cbSceneParam._m0[86u].x;
    float _2459 = _295 / cbSceneParam._m0[86u].y;
    vec4 _2473 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2458, _2459, (log2((isnan(cbSceneParam._m0[77u].w) ? _227 : (isnan(_227) ? cbSceneParam._m0[77u].w : min(_227, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2475 = _2473.x;
    float _2476 = _2473.y;
    float _2477 = _2473.z;
    float _2478 = _2473.w;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_227 > cbSceneParam._m0[78u].w)
    {
        float _2512 = isnan(_227) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _227 : min(cbSceneParam._m0[80u].w, _227));
        float _2513 = _2512 / _227;
        float _2524 = _2513 * _279;
        float _2525 = _280 * _2513;
        float _2526 = (-0.0) - _2525;
        float _2528 = _2513 * _281;
        float _2530 = (cbSceneParam._m0[77u].w * _2526) / _2512;
        float _2531 = _2530 + cbSceneParam._m0[79u].w;
        float _2532 = cbSceneParam._m0[79u].w - _2525;
        float _2538 = sqrt(((_2524 * _2524) + (_2525 * _2525)) + (_2528 * _2528));
        float _2541 = (1.0 - (cbSceneParam._m0[77u].w / _2512)) * _2538;
        float _2546 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2548 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2701;
        if (abs((_2526 - _2530) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2701 = ((((_2531 > 0.0) ? exp2(_2546 * _2531) : (2.0 - exp2(_2548 * _2531))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2541;
        }
        else
        {
            float _2661 = 1.0 / cbSceneParam._m0[80u].x;
            float _2662 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : max(_2531, _2532));
            float _2663 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : min(_2531, _2532));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            _2701 = ((abs(_2538 / _2526) * cbSceneParam._m0[80u].y) * ((((_2672 - _2673) * 2.0) - ((exp2(_2546 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)))) - exp2(_2546 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))))) * _2661)) - ((exp2(_2548 * _2672) - exp2(_2548 * _2673)) * _2661))) + (_2541 * cbSceneParam._m0[80u].z);
        }
        vec4 _2703 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2458, _2459, 1.0), 0.0);
        float _2712 = exp2((_2701 * (-1.44269502162933349609375)) * (1.0 - _2703.w));
        float _2713 = log2(_2712);
        float _2729 = log2(_2478);
        _2550 = (exp2(_2729 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].x)) * _2703.x) / cbSceneParam._m0[78u].x)) + _2475;
        _2552 = (exp2(_2729 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].y)) * _2703.y) / cbSceneParam._m0[78u].y)) + _2476;
        _2554 = (exp2(_2729 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].z)) * _2703.z) / cbSceneParam._m0[78u].z)) + _2477;
        _2556 = _2712 * _2478;
    }
    else
    {
        _2550 = _2475;
        _2552 = _2476;
        _2554 = _2477;
        _2556 = _2478;
    }
    float _2568 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2569 = _2568 == 3.0;
    float _2570 = log2(_2556);
    float _2577 = exp2(_2570 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2418 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _378))) + ((_2424 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _1189)) * cbPerFrame._m0[3u].x));
    float _2578 = exp2(_2570 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2420 + ((isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))) * _378))) + ((_2426 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _1189)) * cbPerFrame._m0[3u].x));
    float _2579 = exp2(_2570 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2422 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _378))) + ((_2428 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _1189)) * cbPerFrame._m0[3u].x));
    float _2588 = (_2568 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2588 * (_2569 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2550)));
    SV_Target.y = _2588 * (_2569 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2552)));
    SV_Target.z = _2588 * (_2569 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2554)));
    SV_Target.w = _2453;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2453;
}


