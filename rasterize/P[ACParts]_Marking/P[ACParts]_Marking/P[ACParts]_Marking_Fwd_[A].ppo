#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2DArray P_ACParts_Marking_snp_0_Texture2DArray_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _795;
float _3189;
float _3190;
float _3191;
float _3192;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    float _165 = TEXCOORD.x * 16.0;
    vec4 _188 = texture(sampler2DArray(P_ACParts_Marking_snp_0_Texture2DArray_0, SS_ClampLinear), vec3((cbTextureTilingScale._m0[0u].x * fract(_165)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * fract(TEXCOORD.y)) + cbTextureTilingScale._m0[0u].w, floor(cbMtdParam._m0[9u].z + _165)));
    float _190 = _188.x;
    float _191 = _188.y;
    float _192 = _188.z;
    float _193 = _188.w;
    float _201 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _202 = _201 * _162;
    float _203 = _201 * _163;
    float _204 = _201 * _164;
    float _3201 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _206 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _3212 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _207 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _3234 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _3245 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3256 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _211 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _227 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    float _285 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _286 = _279 * _285;
    float _287 = _280 * _285;
    float _288 = _281 * _285;
    vec4 _294 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _297 = _294.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _474 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
        float _480 = (cbMatDynParam._m0[5u].x * _474) + cbMatDynParam._m0[5u].y;
        float _3267 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
        float _481 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _485 = (cbMatDynParam._m0[5u].z * _474) + cbMatDynParam._m0[5u].w;
        float _3278 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) - _481)) + _481) < ((_297 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _309 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _310 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _330 = fma(_204, cbSceneParam._m0[5u].z, fma(_203, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _202));
    float _333 = fma(_204, cbSceneParam._m0[6u].z, fma(_203, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _202));
    float _336 = fma(_204, cbSceneParam._m0[7u].z, fma(_203, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _202));
    uint _349 = uint(roundEven(NORMAL.w)) * 13u;
    uint _351 = _349 + 9u;
    uint _352 = _351 + uint(cbMatDynParam._m0[0u].w);
    float _358 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * cbInstanceData._m0[_352].x;
    float _359 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_352].y;
    float _360 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * cbInstanceData._m0[_352].z;
    float _3289 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _361 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _3311 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _364 = 1.0 - _211;
    float _365 = _361 * _364;
    float _366 = _362 * _364;
    float _367 = _363 * _364;
    float _372 = (_361 + (-0.039999999105930328369140625)) * _211;
    float _373 = (_362 + (-0.039999999105930328369140625)) * _211;
    float _374 = (_363 + (-0.039999999105930328369140625)) * _211;
    float _375 = _372 + 0.039999999105930328369140625;
    float _377 = _373 + 0.039999999105930328369140625;
    float _378 = _374 + 0.039999999105930328369140625;
    vec4 _387 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _309, cbSceneParam._m0[86u].y * _310));
    float _390 = _387.x * TEXCOORD.z;
    float _391 = dot(vec3(_202, _203, _204), vec3(_286, _287, _288));
    float _394 = _391 * 2.0;
    float _399 = (_394 * _202) - _286;
    float _400 = (_394 * _203) - _287;
    float _401 = (_394 * _204) - _288;
    float _405 = abs(dot(vec3(_286, _287, _288), vec3(_202, _203, _204)));
    float _3322 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _407 = sqrt(_207);
    float _420 = exp2((_407 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_407 * 3.0));
    float _426 = (1.0 - _420) * ((_407 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _427 = _420 * _407;
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _459 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _794;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _519 = fma(_463, cbModelParam._m0[26u].z, fma(_459, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _455));
        float _523 = fma(_463, cbModelParam._m0[27u].z, fma(_459, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _455));
        float _527 = fma(_463, cbModelParam._m0[28u].z, fma(_459, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _455));
        float _552 = _455 + _202;
        float _553 = _459 + _203;
        float _554 = _463 + _204;
        float _564 = fma(_554, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552)) - _519;
        float _565 = fma(_554, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552)) - _523;
        float _566 = fma(_554, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552)) - _527;
        float _570 = inversesqrt(dot(vec3(_564, _565, _566), vec3(_564, _565, _566)));
        float _583 = ((_570 * _564) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_519 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _584 = ((_570 * _565) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_523 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _585 = ((_570 * _566) / cbModelParam._m0[34u].z) + ((((((_527 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        vec4 _609 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_583, _584, _585), 0.0);
        float _622 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_588.x + (-0.5));
        float _624 = _622 * (_588.y + (-0.5));
        float _625 = _622 * (_588.z + (-0.5));
        float _632 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_595.x + (-0.5));
        float _634 = _632 * (_595.y + (-0.5));
        float _635 = _632 * (_595.z + (-0.5));
        float _642 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_602.x + (-0.5));
        float _644 = _642 * (_602.y + (-0.5));
        float _645 = _642 * (_602.z + (-0.5));
        float _652 = exp2((_609.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_609.x + (-0.5));
        float _654 = _652 * (_609.y + (-0.5));
        float _655 = _652 * (_609.z + (-0.5));
        float _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = _623 * 0.5;
        float _660 = _633 * 0.5;
        float _661 = _643 * 0.5;
        float _662 = dot(vec3(_659, _660, _661), vec3(_659, _660, _661));
        float _667 = (_662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_662);
        float _676 = (dot(vec3(_202, _203, _204), vec3(_667 * _659, _667 * _660, _667 * _661)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _686 = sqrt(((_660 * _660) + (_659 * _659)) + (_661 * _661)) / (_656 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _688 = _687 * 2.0;
        float _692 = (1.0 - _687) / (_687 + 1.0);
        float _3370 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _702 = ((((1.0 - _693) * (_688 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_688 + 1.0))) + _693) * _656;
        float _703 = _624 * 0.5;
        float _704 = _634 * 0.5;
        float _705 = _644 * 0.5;
        float _706 = dot(vec3(_703, _704, _705), vec3(_703, _704, _705));
        float _711 = (_706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_706);
        float _719 = (dot(vec3(_202, _203, _204), vec3(_711 * _703, _711 * _704, _711 * _705)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _728 = sqrt(((_704 * _704) + (_703 * _703)) + (_705 * _705)) / (_657 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _3403 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_730 + 1.0))) + _735) * _657;
        float _745 = _625 * 0.5;
        float _746 = _635 * 0.5;
        float _747 = _645 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _761 = (dot(vec3(_202, _203, _204), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _770 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3436 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_772 + 1.0))) + _777) * _658;
        _794 = _625;
        _796 = _624;
        _797 = _623;
        _798 = _635;
        _799 = _634;
        _800 = _633;
        _801 = _645;
        _802 = _644;
        _803 = _643;
        _804 = _658;
        _805 = _657;
        _806 = _656;
        _807 = cbModelParam._m0[36u].z * (isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0)));
        _808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
    }
    else
    {
        _794 = _795;
        _796 = _795;
        _797 = _795;
        _798 = _795;
        _799 = _795;
        _800 = _795;
        _801 = _795;
        _802 = _795;
        _803 = _795;
        _804 = _795;
        _805 = _795;
        _806 = _795;
        _807 = 0.0;
        _808 = 0.0;
        _809 = 0.0;
    }
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _838 = fma(_463, cbModelParam._m0[30u].z, fma(_459, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _455));
        float _842 = fma(_463, cbModelParam._m0[31u].z, fma(_459, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _455));
        float _846 = fma(_463, cbModelParam._m0[32u].z, fma(_459, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _455));
        float _869 = _455 + _202;
        float _870 = _459 + _203;
        float _871 = _463 + _204;
        float _881 = fma(_871, cbModelParam._m0[30u].z, fma(_870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869)) - _838;
        float _882 = fma(_871, cbModelParam._m0[31u].z, fma(_870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869)) - _842;
        float _883 = fma(_871, cbModelParam._m0[32u].z, fma(_870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869)) - _846;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_838 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_842 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[35u].z) + ((((((_846 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _937 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_904.x + (-0.5));
        float _939 = _937 * (_904.y + (-0.5));
        float _940 = _937 * (_904.z + (-0.5));
        float _947 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_911.x + (-0.5));
        float _949 = _947 * (_911.y + (-0.5));
        float _950 = _947 * (_911.z + (-0.5));
        float _957 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_918.x + (-0.5));
        float _959 = _957 * (_918.y + (-0.5));
        float _960 = _957 * (_918.z + (-0.5));
        float _967 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_925.x + (-0.5));
        float _969 = _967 * (_925.y + (-0.5));
        float _970 = _967 * (_925.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_202, _203, _204), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3499 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1001 + 1.0))) + _1006) * _971;
        float _1016 = _939 * 0.5;
        float _1017 = _949 * 0.5;
        float _1018 = _959 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_202, _203, _204), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3532 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1043 + 1.0))) + _1048) * _972;
        float _1058 = _940 * 0.5;
        float _1059 = _950 * 0.5;
        float _1060 = _960 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_202, _203, _204), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3565 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_1085 + 1.0))) + _1090) * _973;
        _1107 = _940;
        _1108 = _939;
        _1109 = _938;
        _1110 = _950;
        _1111 = _949;
        _1112 = _948;
        _1113 = _960;
        _1114 = _959;
        _1115 = _958;
        _1116 = _973;
        _1117 = _972;
        _1118 = _971;
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _795;
        _1108 = _795;
        _1109 = _795;
        _1110 = _795;
        _1111 = _795;
        _1112 = _795;
        _1113 = _795;
        _1114 = _795;
        _1115 = _795;
        _1116 = _795;
        _1117 = _795;
        _1118 = _795;
        _1119 = 0.0;
        _1120 = 0.0;
        _1121 = 0.0;
    }
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _807)) + _807;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _808)) + _808;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _809)) + _809;
    float _1154 = fma(_1133, cbSceneParam._m0[89u].z, fma(_1132, cbSceneParam._m0[89u].y, _1131 * cbSceneParam._m0[89u].x));
    float _1157 = fma(_1133, cbSceneParam._m0[90u].z, fma(_1132, cbSceneParam._m0[90u].y, _1131 * cbSceneParam._m0[90u].x));
    float _1160 = fma(_1133, cbSceneParam._m0[91u].z, fma(_1132, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1131));
    float _1175 = _399 * 0.5;
    float _1176 = _400 * 0.5;
    float _1177 = _401 * 0.5;
    float _1178 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1181 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1184 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1218;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1191 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_794, _798, _801, _804));
        float _1195 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_796, _799, _802, _805));
        float _1199 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_797, _800, _803, _806));
        float _1206 = dot(vec4(cbModelParam._m0[39u]), vec4(_1175, _1176, _1177, 1.0));
        _1218 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1218 = 1.0;
    }
    float _1229;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1220 = dot(vec4(cbModelParam._m0[40u]), vec4(_1175, _1176, _1177, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1233 = (_1229 * cbModelParam._m0[1u].x) + (_1218 * (1.0 - cbModelParam._m0[1u].x));
    float _1243 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _207);
    float _1244 = isnan(_1243) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1243 : min(cbModelParam._m0[25u].z, _1243));
    float _1326;
    float _1328;
    float _1330;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1293 = fma(_463, cbModelParam._m0[13u].z, fma(_459, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455)) + cbModelParam._m0[13u].w;
        float _1297 = fma(_463, cbModelParam._m0[14u].z, fma(_459, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455)) + cbModelParam._m0[14u].w;
        float _1301 = fma(_463, cbModelParam._m0[15u].z, fma(_459, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455)) + cbModelParam._m0[15u].w;
        float _1304 = fma(_401, cbModelParam._m0[13u].z, fma(_400, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _399));
        float _1307 = fma(_401, cbModelParam._m0[14u].z, fma(_400, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _399));
        float _1310 = fma(_401, cbModelParam._m0[15u].z, fma(_400, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _399));
        float _1338;
        if (_1304 > 0.0)
        {
            _1338 = abs((1.0 - _1293) / _1304);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1293 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1338 = frontier_phi_17_15_ladder;
        }
        float _1547;
        if (_1307 > 0.0)
        {
            _1547 = abs((1.0 - _1297) / _1307);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1297 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1547 = frontier_phi_26_22_ladder;
        }
        float _1801;
        if (_1310 > 0.0)
        {
            _1801 = abs((1.0 - _1301) / _1310);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1301 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1801 = frontier_phi_38_33_ladder;
        }
        float _1803 = isnan(_1547) ? _1338 : (isnan(_1338) ? _1547 : min(_1338, _1547));
        float _1804 = isnan(_1801) ? _1803 : (isnan(_1803) ? _1801 : min(_1803, _1801));
        float _1808 = (_1804 * _1304) + _1293;
        float _1809 = (_1804 * _1307) + _1297;
        float _1810 = (_1804 * _1310) + _1301;
        float _1811 = _1804 * 9.9999997473787516355514526367188e-05;
        float _1813 = (-1.0) - _1811;
        float _1815 = _1811 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1810 > _1815) || ((_1810 < _1813) || ((_1809 > _1815) || ((_1809 < _1813) || ((_1808 < _1813) || (_1808 > _1815))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1810, cbModelParam._m0[9u].z, fma(_1809, cbModelParam._m0[9u].y, _1808 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1810, cbModelParam._m0[10u].z, fma(_1809, cbModelParam._m0[10u].y, _1808 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1810, cbModelParam._m0[11u].z, fma(_1809, cbModelParam._m0[11u].y, _1808 * cbModelParam._m0[11u].x))), _1244);
            frontier_phi_16_38_ladder = _1938.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1938.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1938.x * cbModelParam._m0[1u].y;
        }
        _1326 = frontier_phi_16_38_ladder_2;
        _1328 = frontier_phi_16_38_ladder_1;
        _1330 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_399, _400, _401), _1244);
        _1326 = _1314.x * cbModelParam._m0[1u].y;
        _1328 = _1314.y * cbModelParam._m0[1u].y;
        _1330 = _1314.z * cbModelParam._m0[1u].y;
    }
    float _1334 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _207);
    float _1335 = isnan(_1334) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1334 : min(cbModelParam._m0[25u].w, _1334));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1392 = fma(_463, cbModelParam._m0[21u].z, fma(_459, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455)) + cbModelParam._m0[21u].w;
        float _1396 = fma(_463, cbModelParam._m0[22u].z, fma(_459, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455)) + cbModelParam._m0[22u].w;
        float _1400 = fma(_463, cbModelParam._m0[23u].z, fma(_459, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455)) + cbModelParam._m0[23u].w;
        float _1403 = fma(_401, cbModelParam._m0[21u].z, fma(_400, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _399));
        float _1406 = fma(_401, cbModelParam._m0[22u].z, fma(_400, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _399));
        float _1409 = fma(_401, cbModelParam._m0[23u].z, fma(_400, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _399));
        float _1552;
        if (_1403 > 0.0)
        {
            _1552 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1552 = frontier_phi_28_24_ladder;
        }
        float _1828;
        if (_1406 > 0.0)
        {
            _1828 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1828 = frontier_phi_40_35_ladder;
        }
        float _2041;
        if (_1409 > 0.0)
        {
            _2041 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2041 = frontier_phi_49_46_ladder;
        }
        float _2043 = isnan(_1828) ? _1552 : (isnan(_1552) ? _1828 : min(_1552, _1828));
        float _2044 = isnan(_2041) ? _2043 : (isnan(_2043) ? _2041 : min(_2043, _2041));
        float _2048 = (_2044 * _1403) + _1392;
        float _2049 = (_2044 * _1406) + _1396;
        float _2050 = (_2044 * _1409) + _1400;
        float _2051 = _2044 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2051;
        float _2054 = _2051 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2050 > _2054) || ((_2050 < _2052) || ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 < _2052) || (_2048 > _2054))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2251 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2050, cbModelParam._m0[17u].z, fma(_2049, cbModelParam._m0[17u].y, _2048 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2050, cbModelParam._m0[18u].z, fma(_2049, cbModelParam._m0[18u].y, _2048 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2050, cbModelParam._m0[19u].z, fma(_2049, cbModelParam._m0[19u].y, _2048 * cbModelParam._m0[19u].x))), _1335);
            frontier_phi_25_49_ladder = _2251.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2251.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2251.x * cbModelParam._m0[1u].z;
        }
        _1428 = frontier_phi_25_49_ladder_2;
        _1430 = frontier_phi_25_49_ladder_1;
        _1432 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_399, _400, _401), _1335);
        _1428 = _1412.x * cbModelParam._m0[1u].z;
        _1430 = _1412.y * cbModelParam._m0[1u].z;
        _1432 = _1412.z * cbModelParam._m0[1u].z;
    }
    float _1445 = (((_426 * _375) + _427) * _390) * ((cbModelParam._m0[1u].w * (_1428 - _1326)) + _1326);
    float _1447 = (((_426 * _377) + _427) * _390) * ((cbModelParam._m0[1u].w * (_1430 - _1328)) + _1328);
    float _1449 = (((_426 * _378) + _427) * _390) * ((cbModelParam._m0[1u].w * (_1432 - _1330)) + _1330);
    float _1452 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, _1445 * cbSceneParam._m0[91u].x));
    uvec4 _1468 = floatBitsToUint(cbInstanceData._m0[_349 + 5u]);
    uint _1470 = _1468.x * 14u;
    uint _1471 = _1470 + 13u;
    float _1478 = _390 + (-1.0);
    float _1484 = (cbLight._m0[_1471].x * _1478) + 1.0;
    float _1485 = (cbLight._m0[_1471].y * _1478) + 1.0;
    float _1486 = (cbLight._m0[_1471].z * _1478) + 1.0;
    float _1487 = (cbLight._m0[_1471].w * _1478) + 1.0;
    uint _1488 = _1470 + 5u;
    float _1494 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
    uint _1498 = _1470 + 4u;
    float _1505 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
    uint _1509 = _1470 | 1u;
    float _1520 = dot(vec3(cbLight._m0[_1470].xyz), vec3(_202, _203, _204));
    float _1523 = dot(vec3(cbLight._m0[_1509].xyz), vec3(_202, _203, _204));
    float _3701 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
    float _3712 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1528 = (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.3183098733425140380859375;
    float _1530 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1537 = ((cbLight._m0[_1488].x * _1494) * _1530) + ((cbLight._m0[_1498].x * _1505) * _1528);
    float _1538 = ((_1494 * cbLight._m0[_1488].y) * _1530) + ((_1505 * cbLight._m0[_1498].y) * _1528);
    float _1539 = ((_1494 * cbLight._m0[_1488].z) * _1530) + ((_1505 * cbLight._m0[_1498].z) * _1528);
    uvec4 _1544 = floatBitsToUint(cbLight._m0[_1470 + 12u]);
    bool _1546 = _1544.x == 0u;
    float _1557;
    float _1559;
    float _1561;
    if (_1546)
    {
        _1557 = _1537;
        _1559 = _1538;
        _1561 = _1539;
    }
    else
    {
        uint _1565 = _1470 + 6u;
        float _1581 = (dot(vec3(cbLight._m0[_1470 + 2u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1582 = _1581 * _1581;
        float _3723 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1584 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1557 = (((cbLight._m0[_1565].x * 0.3183098733425140380859375) * _1583) * _1584) + _1537;
        _1559 = (((cbLight._m0[_1565].y * 0.3183098733425140380859375) * _1583) * _1584) + _1538;
        _1561 = (((cbLight._m0[_1565].z * 0.3183098733425140380859375) * _1583) * _1584) + _1539;
    }
    bool _1564 = _1544.y == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1564)
    {
        _1602 = _1557;
        _1604 = _1559;
        _1606 = _1561;
    }
    else
    {
        uint _1772 = _1470 + 7u;
        float _1788 = (dot(vec3(cbLight._m0[_1470 + 3u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1789 = _1788 * _1788;
        float _3739 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1791 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1602 = (((cbLight._m0[_1772].x * 0.3183098733425140380859375) * _1790) * _1791) + _1557;
        _1604 = (((cbLight._m0[_1772].y * 0.3183098733425140380859375) * _1790) * _1791) + _1559;
        _1606 = (((cbLight._m0[_1772].z * 0.3183098733425140380859375) * _1790) * _1791) + _1561;
    }
    uint _1609 = _1470 + 8u;
    float _1622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1470].w)) * _207) * 0.949999988079071044921875);
    float _1623 = _1622 * _1622;
    float _1624 = cbLight._m0[_1470].x + _286;
    float _1625 = cbLight._m0[_1470].y + _287;
    float _1626 = cbLight._m0[_1470].z + _288;
    float _1630 = inversesqrt(dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626)));
    float _1631 = _1630 * _1624;
    float _1632 = _1630 * _1625;
    float _1633 = _1630 * _1626;
    float _1634 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1470].xyz));
    float _3755 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1637 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _1638 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _1639 = dot(vec3(_202, _203, _204), vec3(_1631, _1632, _1633));
    float _3777 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1642 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1470].xyz), vec3(_1631, _1632, _1633));
    float _3788 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1647 = _1623 * _1623;
    float _1651 = ((_1642 * _1642) * (_1647 + (-1.0))) + 1.0;
    float _1659 = exp2(log2(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * 5.0);
    float _1660 = 0.959999978542327880859375 - _372;
    float _1662 = 0.959999978542327880859375 - _373;
    float _1663 = 0.959999978542327880859375 - _374;
    float _1670 = 1.0 - _1623;
    float _1681 = (0.5 / (((_1638 * ((_1637 * _1670) + _1623)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1670) + _1623) * _1637))) * _1637;
    float _3799 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1683 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1647 / ((_1651 * _1651) * 3.141590118408203125));
    uint _1694 = _1470 + 9u;
    float _1705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1509].w)) * _207) * 0.949999988079071044921875);
    float _1706 = _1705 * _1705;
    float _1707 = cbLight._m0[_1509].x + _286;
    float _1708 = cbLight._m0[_1509].y + _287;
    float _1709 = cbLight._m0[_1509].z + _288;
    float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
    float _1714 = _1713 * _1707;
    float _1715 = _1713 * _1708;
    float _1716 = _1713 * _1709;
    float _1717 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1509].xyz));
    float _3810 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _1721 = dot(vec3(_202, _203, _204), vec3(_1714, _1715, _1716));
    float _3821 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1725 = dot(vec3(cbLight._m0[_1509].xyz), vec3(_1714, _1715, _1716));
    float _3832 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1729 = _1706 * _1706;
    float _1733 = ((_1724 * _1724) * (_1729 + (-1.0))) + 1.0;
    float _1740 = exp2(log2(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * 5.0);
    float _1747 = 1.0 - _1706;
    float _1757 = (0.5 / (((_1638 * ((_1720 * _1747) + _1706)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1747) + _1706) * _1720))) * _1720;
    float _3843 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1759 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1729 / ((_1733 * _1733) * 3.141590118408203125));
    float _1769 = (((((_1740 * _1660) + _375) * cbLight._m0[_1694].x) * _1759) * _1494) + (((((_1659 * _1660) + _375) * cbLight._m0[_1609].x) * _1683) * _1505);
    float _1770 = (((((_1740 * _1662) + _377) * cbLight._m0[_1694].y) * _1759) * _1494) + (((((_1659 * _1662) + _377) * cbLight._m0[_1609].y) * _1683) * _1505);
    float _1771 = (((((_1740 * _1663) + _378) * cbLight._m0[_1694].z) * _1759) * _1494) + (((((_1659 * _1663) + _378) * cbLight._m0[_1609].z) * _1683) * _1505);
    float _1833;
    float _1835;
    float _1837;
    if (_1546)
    {
        _1833 = _1769;
        _1835 = _1770;
        _1837 = _1771;
    }
    else
    {
        uint _1839 = _1470 + 2u;
        uint _1843 = _1470 + 10u;
        float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _207) * 0.949999988079071044921875);
        float _1858 = _1857 * _1857;
        float _1859 = cbLight._m0[_1839].x + _286;
        float _1860 = cbLight._m0[_1839].y + _287;
        float _1861 = cbLight._m0[_1839].z + _288;
        float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
        float _1866 = _1865 * _1859;
        float _1867 = _1865 * _1860;
        float _1868 = _1865 * _1861;
        float _1869 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1839].xyz));
        float _3854 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1872 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1873 = dot(vec3(_202, _203, _204), vec3(_1866, _1867, _1868));
        float _3865 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1876 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1877 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1866, _1867, _1868));
        float _3876 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1881 = _1858 * _1858;
        float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
        float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * 5.0);
        float _1899 = 1.0 - _1858;
        float _1909 = (0.5 / (((_1638 * ((_1872 * _1899) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1899) + _1858) * _1872))) * _1872;
        float _3887 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1911 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
        float _1912 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1833 = (((((_1892 * _1660) + _375) * cbLight._m0[_1843].x) * _1911) * _1912) + _1769;
        _1835 = (((((_1892 * _1662) + _377) * cbLight._m0[_1843].y) * _1911) * _1912) + _1770;
        _1837 = (((((_1892 * _1663) + _378) * cbLight._m0[_1843].z) * _1911) * _1912) + _1771;
    }
    float _1947;
    float _1949;
    float _1951;
    if (_1564)
    {
        _1947 = _1833;
        _1949 = _1835;
        _1951 = _1837;
    }
    else
    {
        uint _1958 = _1470 + 3u;
        uint _1962 = _1470 + 11u;
        float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _207) * 0.949999988079071044921875);
        float _1977 = _1976 * _1976;
        float _1978 = cbLight._m0[_1958].x + _286;
        float _1979 = cbLight._m0[_1958].y + _287;
        float _1980 = cbLight._m0[_1958].z + _288;
        float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
        float _1985 = _1984 * _1978;
        float _1986 = _1984 * _1979;
        float _1987 = _1984 * _1980;
        float _1988 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1958].xyz));
        float _3903 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1992 = dot(vec3(_202, _203, _204), vec3(_1985, _1986, _1987));
        float _3914 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1996 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_1985, _1986, _1987));
        float _3925 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2000 = _1977 * _1977;
        float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
        float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0);
        float _2018 = 1.0 - _1977;
        float _2028 = (0.5 / (((_1638 * ((_1991 * _2018) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _2018) + _1977) * _1991))) * _1991;
        float _3936 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2030 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
        float _2031 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1947 = (((((_2011 * _1660) + _375) * cbLight._m0[_1962].x) * _2030) * _2031) + _1833;
        _1949 = (((((_2011 * _1662) + _377) * cbLight._m0[_1962].y) * _2030) * _2031) + _1835;
        _1951 = (((((_2011 * _1663) + _378) * cbLight._m0[_1962].z) * _2030) * _2031) + _1837;
    }
    float _2166;
    float _2168;
    float _2170;
    float _2172;
    float _2174;
    float _2176;
    if (_1468.y == 0u)
    {
        float _2106 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2107 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2106;
        float _2108 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2106;
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2106;
        uvec4 _2121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2122 = _2121.x;
        uint _2133 = uint((float(_2121.y) * floor(float(uint(cbSceneParam._m0[85u].y * _310) / _2122))) + floor(float(uint(cbSceneParam._m0[85u].x * _309) / _2122)));
        float _2143 = (log2(_2109 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2144 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        uint _2147 = uint(isnan(14.0) ? _2144 : (isnan(_2144) ? 14.0 : min(_2144, 14.0)));
        uvec4 _2152 = texelFetch(g_lightClusterGridBuffer, int(((_2147 << 2u) + (_2133 << 6u)) >> 2u));
        uint _2153 = _2152.x;
        uint _2154 = _2121.z;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        if (((((1u << ((_2154 >> 4u) & 15u)) + 4294967295u) & _2153) == 0u) || ((_2154 & 240u) == 0u))
        {
            _2256 = 0.0;
            _2258 = 0.0;
            _2260 = 0.0;
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
        }
        else
        {
            float _2257;
            float _2259;
            float _2261;
            float _2263;
            float _2265;
            float _2267;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            uint _2415 = 0u;
            uint _2424;
            bool _2425;
            for (;;)
            {
                _2424 = texelFetch(g_lightClassification, int((((_2147 << 5u) + (_2133 << 9u)) + (_2415 << 2u)) >> 2u)).x;
                _2425 = _2424 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2425)
                {
                    frontier_phi_66_pred = _2409;
                    frontier_phi_66_pred_1 = _2414;
                    frontier_phi_66_pred_2 = _2413;
                    frontier_phi_66_pred_3 = _2412;
                    frontier_phi_66_pred_4 = _2411;
                    frontier_phi_66_pred_5 = _2410;
                }
                else
                {
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    uint _2560;
                    _2554 = _2409;
                    _2555 = _2410;
                    _2556 = _2411;
                    _2557 = _2412;
                    _2558 = _2413;
                    _2559 = _2414;
                    _2560 = _2424;
                    float _2481;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    for (;;)
                    {
                        uint _2564 = uint(findLSB(_2560)) + (_2415 << 5u);
                        uint _2561 = (_2560 + 4294967295u) & _2560;
                        uint _2566 = _2564 * 48u;
                        vec4 _2580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2566)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 3u)).x));
                        uint _2586 = (_2564 * 48u) + 4u;
                        vec4 _2599 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2586)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 3u)).x));
                        uint _2605 = (_2564 * 48u) + 8u;
                        vec3 _2616 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2605)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 2u)).x));
                        float _2620 = _2580.x - _2107;
                        float _2621 = _2580.y - _2108;
                        float _2622 = _2580.z - _2109;
                        float _2623 = dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622));
                        float _2626 = inversesqrt(_2623);
                        float _2627 = _2626 * _2620;
                        float _2628 = _2626 * _2621;
                        float _2629 = _2626 * _2622;
                        float _2630 = dot(vec3(_330, _333, _336), vec3(_2627, _2628, _2629));
                        float _2635 = 1.0 - (_2623 * _2580.w);
                        float _3962 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                        float _2636 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2637 = sqrt(_2623) * _2599.w;
                        float _2640 = 1.39999997615814208984375 / (_2637 + 1.39999997615814208984375);
                        float _2641 = _2640 * _2640;
                        float _2644 = ((1.0 - _2641) * _2630) + _2641;
                        float _2647 = _2637 * _2637;
                        float _2651 = ((isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0))) * _2636) / ((_2647 * 0.699999988079071044921875) + 1.0);
                        float _2655 = (-0.0) - _2107;
                        float _2656 = (-0.0) - _2108;
                        float _2657 = (-0.0) - _2109;
                        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
                        float _2662 = _2661 * _2655;
                        float _2663 = _2661 * _2656;
                        float _2664 = _2661 * _2657;
                        float _2672 = exp2(log2(1.0 / ((_2647 * 3.5) + 5.0)) * 0.25);
                        float _2673 = 1.0 - _407;
                        float _2680 = sqrt(1.0 - ((1.0 - (_2673 * _2673)) * (1.0 - (_2672 * _2672))));
                        float _2681 = _2680 * _2680;
                        float _2682 = _2681 * _2681;
                        float _2683 = _2662 + _2627;
                        float _2684 = _2663 + _2628;
                        float _2685 = _2664 + _2629;
                        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
                        float _2693 = dot(vec3(_330, _333, _336), vec3(_2662, _2663, _2664));
                        float _3978 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2696 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2697 = dot(vec3(_330, _333, _336), vec3(_2689 * _2683, _2689 * _2684, _2689 * _2685));
                        float _3989 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2700 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2704 = ((_2700 * _2700) * (_2682 + (-1.0))) + 1.0;
                        float _2705 = _2640 * _2681;
                        float _2706 = _2705 * _2705;
                        float _2709 = ((1.0 - _2706) * _2630) + _2706;
                        float _4000 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2710 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2711 = 1.0 - _2681;
                        float _2721 = (0.5 / (((_2710 * ((_2696 * _2711) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _2711) + _2681) * _2696))) * _2710;
                        float _4011 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2732 = (((_2682 * 3.1415927410125732421875) * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) / ((_2704 * _2704) * ((_2647 * 2.1991131305694580078125) + 3.141590118408203125))) * _2636;
                        _2484 = (_2651 * _2599.x) + _2557;
                        _2485 = (_2651 * _2599.y) + _2558;
                        _2486 = (_2651 * _2599.z) + _2559;
                        _2481 = (_2732 * _2616.x) + _2554;
                        _2482 = (_2732 * _2616.y) + _2555;
                        _2483 = (_2732 * _2616.z) + _2556;
                        if (_2561 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2554 = _2481;
                            _2555 = _2482;
                            _2556 = _2483;
                            _2557 = _2484;
                            _2558 = _2485;
                            _2559 = _2486;
                            _2560 = _2561;
                        }
                    }
                    frontier_phi_66_pred = _2481;
                    frontier_phi_66_pred_1 = _2486;
                    frontier_phi_66_pred_2 = _2485;
                    frontier_phi_66_pred_3 = _2484;
                    frontier_phi_66_pred_4 = _2483;
                    frontier_phi_66_pred_5 = _2482;
                }
                _2257 = frontier_phi_66_pred;
                _2267 = frontier_phi_66_pred_1;
                _2265 = frontier_phi_66_pred_2;
                _2263 = frontier_phi_66_pred_3;
                _2261 = frontier_phi_66_pred_4;
                _2259 = frontier_phi_66_pred_5;
                uint _2416 = _2415 + 1u;
                if (_2416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2409 = _2257;
                    _2410 = _2259;
                    _2411 = _2261;
                    _2412 = _2263;
                    _2413 = _2265;
                    _2414 = _2267;
                    _2415 = _2416;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2256 = _2257;
            _2258 = _2259;
            _2260 = _2261;
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
        }
        uvec4 _2270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2271 = _2270.z;
        uint _2273 = (_2271 >> 8u) & 15u;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((4294967295u << _2273) & _2153) == 0u)
        {
            _2377 = _2256;
            _2379 = _2258;
            _2381 = _2260;
            _2383 = _2262;
            _2385 = _2264;
            _2387 = _2266;
        }
        else
        {
            float _2402 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
            float _2403 = _2402 * _2107;
            float _2404 = _2402 * _2108;
            float _2405 = _2402 * _2109;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2273 < ((_2271 >> 12u) & 15u))
            {
                float _2378;
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2537 = _2256;
                float _2538 = _2258;
                float _2539 = _2260;
                float _2540 = _2262;
                float _2541 = _2264;
                float _2542 = _2266;
                uint _2543 = _2273;
                uint _2552;
                bool _2553;
                for (;;)
                {
                    _2552 = texelFetch(g_lightClassification, int((((_2147 << 5u) + (_2133 << 9u)) + (_2543 << 2u)) >> 2u)).x;
                    _2553 = _2552 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2553)
                    {
                        frontier_phi_77_pred = _2542;
                        frontier_phi_77_pred_1 = _2541;
                        frontier_phi_77_pred_2 = _2540;
                        frontier_phi_77_pred_3 = _2539;
                        frontier_phi_77_pred_4 = _2538;
                        frontier_phi_77_pred_5 = _2537;
                    }
                    else
                    {
                        float _2746;
                        float _2747;
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _2759 = _2537;
                        float _2760 = _2538;
                        float _2761 = _2539;
                        float _2762 = _2540;
                        float _2763 = _2541;
                        float _2764 = _2542;
                        uint _2765 = _2552;
                        uint _2766;
                        vec4 _2791;
                        float _2792;
                        vec4 _2807;
                        vec3 _2819;
                        vec4 _2835;
                        vec4 _2851;
                        float _2898;
                        bool _2899;
                        for (;;)
                        {
                            uint _2776 = ((_2543 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2765));
                            _2766 = (_2765 + 4294967295u) & _2765;
                            uint _2778 = _2776 * 40u;
                            _2791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 3u)).x));
                            _2792 = _2791.w;
                            uint _2794 = (_2776 * 40u) + 4u;
                            _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            uint _2809 = (_2776 * 40u) + 8u;
                            _2819 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x));
                            uint _2822 = (_2776 * 40u) + 16u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2838 = (_2776 * 40u) + 20u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2854 = (_2776 * 40u) + 24u;
                            vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2873 = (_2776 * 40u) + 28u;
                            vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            _2898 = fma(_2109, _2886.z, fma(_2108, _2886.y, _2886.x * _2107)) + _2886.w;
                            _2899 = !((fma(_2109, _2867.z, fma(_2108, _2867.y, _2867.x * _2107)) + _2867.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2899)
                            {
                                float _2926 = _2791.x - _2107;
                                float _2927 = _2791.y - _2108;
                                float _2928 = _2791.z - _2109;
                                float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                                float _2932 = inversesqrt(_2929);
                                float _2933 = _2932 * _2926;
                                float _2934 = _2932 * _2927;
                                float _2935 = _2932 * _2928;
                                float _2939 = 1.0 - (_2929 / (_2792 * _2792));
                                float _4022 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2940 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _2944 = sqrt(_2929) * _2807.w;
                                float _2946 = 1.39999997615814208984375 / (_2944 + 1.39999997615814208984375);
                                float _2947 = _2946 * _2946;
                                float _2950 = ((1.0 - _2947) * dot(vec3(_2933, _2934, _2935), vec3(_330, _333, _336))) + _2947;
                                float _2953 = _2944 * _2944;
                                float _2957 = (fma(_2109, _2835.z, fma(_2108, _2835.y, _2835.x * _2107)) + _2835.w) / _2898;
                                float _2958 = (fma(_2109, _2851.z, fma(_2108, _2851.y, _2851.x * _2107)) + _2851.w) / _2898;
                                float _2962 = 1.0 - dot(vec2(_2957, _2958), vec2(_2957, _2958));
                                float _4038 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _2964 = _2963 * (((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2940) / ((_2953 * 0.699999988079071044921875) + 1.0));
                                float _2976 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                                float _2977 = 1.0 - _407;
                                float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                                float _2985 = _2984 * _2984;
                                float _2986 = _2985 * _2985;
                                float _2987 = _2933 - _2403;
                                float _2988 = _2934 - _2404;
                                float _2989 = _2935 - _2405;
                                float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                                float _2997 = dot(vec3(_330, _333, _336), vec3((-0.0) - _2403, (-0.0) - _2404, (-0.0) - _2405));
                                float _4049 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _3000 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3001 = dot(vec3(_330, _333, _336), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                                float _4060 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3004 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                                float _3009 = _2946 * _2985;
                                float _3010 = _3009 * _3009;
                                float _3016 = ((1.0 - _3010) * dot(vec3(_330, _333, _336), vec3(_2933, _2934, _2935))) + _3010;
                                float _4071 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3017 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3018 = 1.0 - _2985;
                                float _3028 = (0.5 / (((_3017 * ((_3000 * _3018) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3017 * _3018) + _2985) * _3000))) * _3017;
                                float _4082 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3038 = (_2963 * _2940) * (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) / ((_3008 * _3008) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2964 * _2807.y;
                                frontier_phi_83_pred_1 = _2964 * _2807.x;
                                frontier_phi_83_pred_2 = _3038 * _2819.z;
                                frontier_phi_83_pred_3 = _3038 * _2819.y;
                                frontier_phi_83_pred_4 = _3038 * _2819.x;
                                frontier_phi_83_pred_5 = _2964 * _2807.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3046 = frontier_phi_83_pred;
                            _3045 = frontier_phi_83_pred_1;
                            _3044 = frontier_phi_83_pred_2;
                            _3043 = frontier_phi_83_pred_3;
                            _3042 = frontier_phi_83_pred_4;
                            _3047 = frontier_phi_83_pred_5;
                            _2749 = _3045 + _2762;
                            _2750 = _3046 + _2763;
                            _2751 = _3047 + _2764;
                            _2746 = _3042 + _2759;
                            _2747 = _3043 + _2760;
                            _2748 = _3044 + _2761;
                            if (_2766 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2766;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2751;
                        frontier_phi_77_pred_1 = _2750;
                        frontier_phi_77_pred_2 = _2749;
                        frontier_phi_77_pred_3 = _2748;
                        frontier_phi_77_pred_4 = _2747;
                        frontier_phi_77_pred_5 = _2746;
                    }
                    _2388 = frontier_phi_77_pred;
                    _2386 = frontier_phi_77_pred_1;
                    _2384 = frontier_phi_77_pred_2;
                    _2382 = frontier_phi_77_pred_3;
                    _2380 = frontier_phi_77_pred_4;
                    _2378 = frontier_phi_77_pred_5;
                    uint _2544 = _2543 + 1u;
                    if (_2544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2537 = _2378;
                        _2538 = _2380;
                        _2539 = _2382;
                        _2540 = _2384;
                        _2541 = _2386;
                        _2542 = _2388;
                        _2543 = _2544;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2382;
                frontier_phi_58_59_ladder_1 = _2388;
                frontier_phi_58_59_ladder_2 = _2386;
                frontier_phi_58_59_ladder_3 = _2384;
                frontier_phi_58_59_ladder_4 = _2380;
                frontier_phi_58_59_ladder_5 = _2378;
            }
            else
            {
                frontier_phi_58_59_ladder = _2260;
                frontier_phi_58_59_ladder_1 = _2266;
                frontier_phi_58_59_ladder_2 = _2264;
                frontier_phi_58_59_ladder_3 = _2262;
                frontier_phi_58_59_ladder_4 = _2258;
                frontier_phi_58_59_ladder_5 = _2256;
            }
            _2377 = frontier_phi_58_59_ladder_5;
            _2379 = frontier_phi_58_59_ladder_4;
            _2381 = frontier_phi_58_59_ladder;
            _2383 = frontier_phi_58_59_ladder_3;
            _2385 = frontier_phi_58_59_ladder_2;
            _2387 = frontier_phi_58_59_ladder_1;
        }
        float _2392 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
        _2166 = (_2392 * _2383) + _1602;
        _2168 = (_2392 * _2385) + _1604;
        _2170 = (_2392 * _2387) + _1606;
        _2172 = ((_2377 * _375) * _2392) + _1947;
        _2174 = ((_2379 * _377) * _2392) + _1949;
        _2176 = ((_2381 * _378) * _2392) + _1951;
    }
    else
    {
        _2166 = _1602;
        _2168 = _1604;
        _2170 = _1606;
        _2172 = _1947;
        _2174 = _1949;
        _2176 = _1951;
    }
    float _4098 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _4109 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _4120 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _4131 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _2194 = ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2166 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _390))) + ((_2172 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _2195 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2168 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _390))) + ((_2174 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _2196 = ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2170 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _390))) + ((_2176 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _2201 = cbInstanceData._m0[_349 + 6u].w * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)));
    float _2206 = _309 / cbSceneParam._m0[86u].x;
    float _2207 = _310 / cbSceneParam._m0[86u].y;
    vec4 _2221 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2206, _2207, (log2((isnan(cbSceneParam._m0[77u].w) ? _227 : (isnan(_227) ? cbSceneParam._m0[77u].w : min(_227, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2223 = _2221.x;
    float _2224 = _2221.y;
    float _2225 = _2221.z;
    float _2226 = _2221.w;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    if (_227 > cbSceneParam._m0[78u].w)
    {
        float _2281 = isnan(_227) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _227 : min(cbSceneParam._m0[80u].w, _227));
        float _2282 = _2281 / _227;
        float _2293 = _2282 * _279;
        float _2294 = _280 * _2282;
        float _2295 = (-0.0) - _2294;
        float _2297 = _2282 * _281;
        float _2299 = (cbSceneParam._m0[77u].w * _2295) / _2281;
        float _2300 = _2299 + cbSceneParam._m0[79u].w;
        float _2301 = cbSceneParam._m0[79u].w - _2294;
        float _2307 = sqrt(((_2293 * _2293) + (_2294 * _2294)) + (_2297 * _2297));
        float _2310 = (1.0 - (cbSceneParam._m0[77u].w / _2281)) * _2307;
        float _2315 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2317 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2494;
        if (abs((_2295 - _2299) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2494 = ((((_2300 > 0.0) ? exp2(_2315 * _2300) : (2.0 - exp2(_2317 * _2300))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2310;
        }
        else
        {
            float _2438 = 1.0 / cbSceneParam._m0[80u].x;
            float _2439 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : max(_2300, _2301));
            float _2440 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : min(_2300, _2301));
            float _2449 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : min(_2439, 0.0));
            float _2450 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : min(_2440, 0.0));
            _2494 = ((abs(_2307 / _2295) * cbSceneParam._m0[80u].y) * ((((_2449 - _2450) * 2.0) - ((exp2(_2315 * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0)))) - exp2(_2315 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0))))) * _2438)) - ((exp2(_2317 * _2449) - exp2(_2317 * _2450)) * _2438))) + (_2310 * cbSceneParam._m0[80u].z);
        }
        vec4 _2496 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2206, _2207, 1.0), 0.0);
        float _2505 = exp2((_2494 * (-1.44269502162933349609375)) * (1.0 - _2496.w));
        float _2506 = log2(_2505);
        float _2522 = log2(_2226);
        _2319 = (exp2(_2522 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2506 * cbSceneParam._m0[78u].x)) * _2496.x) / cbSceneParam._m0[78u].x)) + _2223;
        _2321 = (exp2(_2522 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2506 * cbSceneParam._m0[78u].y)) * _2496.y) / cbSceneParam._m0[78u].y)) + _2224;
        _2323 = (exp2(_2522 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2506 * cbSceneParam._m0[78u].z)) * _2496.z) / cbSceneParam._m0[78u].z)) + _2225;
        _2325 = _2505 * _2226;
    }
    else
    {
        _2319 = _2223;
        _2321 = _2224;
        _2323 = _2225;
        _2325 = _2226;
    }
    bool _2532;
    vec4 _2335;
    vec4 _2357;
    float _2359;
    float _2363;
    float _2364;
    float _2365;
    float _2366;
    bool _2376;
    for (;;)
    {
        _2335 = cbMatDynParam._m0[0u];
        float _2337 = roundEven(_2335.y);
        bool _2338 = _2337 == 3.0;
        float _2339 = log2(_2325);
        float _2346 = exp2(_2339 * cbSceneParam._m0[78u].x) * _2194;
        float _2347 = exp2(_2339 * cbSceneParam._m0[78u].y) * _2195;
        float _2348 = exp2(_2339 * cbSceneParam._m0[78u].z) * _2196;
        float _2355 = _297 + (-0.5);
        _2357 = cbMtdParam._m0[1u];
        _2359 = _2357.y * _2355;
        float _2362 = (_2337 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2363 = _2362 * (_2338 ? _2346 : (_2346 + (cbSceneParam._m0[72u].w * _2319)));
        _2364 = _2362 * (_2338 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2321)));
        _2365 = _2362 * (_2338 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2323)));
        _2366 = _2355 * 0.999000012874603271484375;
        _2376 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2376)
        {
            if ((cbInstanceData._m0[_349 + 7u].x + _2366) < 0.5)
            {
                _2532 = true;
                break;
            }
        }
        uint _2473 = _351 + uint(_2335.w);
        if ((cbInstanceData._m0[_2473].w < 1.0) && ((cbInstanceData._m0[_2473].w + _2366) < 0.5))
        {
            _2532 = true;
            break;
        }
        if ((_2359 + _193) < _2357.x)
        {
            _2532 = true;
            break;
        }
        _2532 = false;
        break;
    }
    float _2737;
    if (_2532)
    {
        discard_state = true;
        _2737 = 0.0;
    }
    else
    {
        _2737 = _2201;
    }
    SV_Target.x = _2363;
    SV_Target.y = _2364;
    SV_Target.z = _2365;
    SV_Target.w = _2737;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2201;
    discard_exit();
}


