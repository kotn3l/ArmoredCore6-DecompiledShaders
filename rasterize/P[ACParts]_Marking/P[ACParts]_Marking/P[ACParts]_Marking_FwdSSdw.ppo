#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2DArray P_ACParts_Marking_snp_0_Texture2DArray_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _752;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _159 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = _159 * NORMAL.x;
    float _161 = _159 * NORMAL.y;
    float _162 = _159 * NORMAL.z;
    float _163 = TEXCOORD.x * 16.0;
    vec4 _186 = texture(sampler2DArray(P_ACParts_Marking_snp_0_Texture2DArray_0, SS_ClampLinear), vec3((cbTextureTilingScale._m0[0u].x * fract(_163)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * fract(TEXCOORD.y)) + cbTextureTilingScale._m0[0u].w, floor(cbMtdParam._m0[9u].z + _163)));
    float _188 = _186.x;
    float _189 = _186.y;
    float _190 = _186.z;
    float _191 = _186.w;
    float _199 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _200 = _199 * _160;
    float _201 = _199 * _161;
    float _202 = _199 * _162;
    float _3116 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _204 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
    float _3127 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _205 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
    float _3138 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _3149 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _3160 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _3171 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _209 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
    float _225 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    float _283 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _284 = _277 * _283;
    float _285 = _278 * _283;
    float _286 = _279 * _283;
    float _292 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _293 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _314 = fma(_202, cbSceneParam._m0[5u].z, fma(_201, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _200));
    float _317 = fma(_202, cbSceneParam._m0[6u].z, fma(_201, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _200));
    float _320 = fma(_202, cbSceneParam._m0[7u].z, fma(_201, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _200));
    uint _333 = uint(roundEven(NORMAL.w)) * 13u;
    uint _336 = (_333 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _342 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0)))) * cbInstanceData._m0[_336].x;
    float _343 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0)))) * cbInstanceData._m0[_336].y;
    float _344 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0)))) * cbInstanceData._m0[_336].z;
    float _3182 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _345 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
    float _3193 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _346 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _347 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _348 = 1.0 - _209;
    float _349 = _345 * _348;
    float _350 = _346 * _348;
    float _351 = _347 * _348;
    float _356 = (_345 + (-0.039999999105930328369140625)) * _209;
    float _357 = (_346 + (-0.039999999105930328369140625)) * _209;
    float _358 = (_347 + (-0.039999999105930328369140625)) * _209;
    float _359 = _356 + 0.039999999105930328369140625;
    float _361 = _357 + 0.039999999105930328369140625;
    float _362 = _358 + 0.039999999105930328369140625;
    vec4 _372 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _292, cbSceneParam._m0[86u].y * _293));
    float _376 = _372.x * TEXCOORD.z;
    float _377 = dot(vec3(_200, _201, _202), vec3(_284, _285, _286));
    float _380 = _377 * 2.0;
    float _385 = (_380 * _200) - _284;
    float _386 = (_380 * _201) - _285;
    float _387 = (_380 * _202) - _286;
    float _391 = abs(dot(vec3(_284, _285, _286), vec3(_200, _201, _202)));
    float _3215 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _393 = sqrt(_205);
    float _406 = exp2((_393 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_393 * 3.0));
    float _412 = (1.0 - _406) * ((_393 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _413 = _406 * _393;
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _751;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _476 = fma(_449, cbModelParam._m0[26u].z, fma(_445, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _441));
        float _480 = fma(_449, cbModelParam._m0[27u].z, fma(_445, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _441));
        float _484 = fma(_449, cbModelParam._m0[28u].z, fma(_445, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _441));
        float _509 = _441 + _200;
        float _510 = _445 + _201;
        float _511 = _449 + _202;
        float _521 = fma(_511, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509)) - _476;
        float _522 = fma(_511, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509)) - _480;
        float _523 = fma(_511, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509)) - _484;
        float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
        float _540 = ((_527 * _521) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_476 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _541 = ((_527 * _522) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_480 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _542 = ((_527 * _523) / cbModelParam._m0[34u].z) + ((((((_484 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        float _579 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_545.x + (-0.5));
        float _581 = _579 * (_545.y + (-0.5));
        float _582 = _579 * (_545.z + (-0.5));
        float _589 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_552.x + (-0.5));
        float _591 = _589 * (_552.y + (-0.5));
        float _592 = _589 * (_552.z + (-0.5));
        float _599 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _600 = _599 * (_559.x + (-0.5));
        float _601 = _599 * (_559.y + (-0.5));
        float _602 = _599 * (_559.z + (-0.5));
        float _609 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _610 = _609 * (_566.x + (-0.5));
        float _611 = _609 * (_566.y + (-0.5));
        float _612 = _609 * (_566.z + (-0.5));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = _580 * 0.5;
        float _617 = _590 * 0.5;
        float _618 = _600 * 0.5;
        float _619 = dot(vec3(_616, _617, _618), vec3(_616, _617, _618));
        float _624 = (_619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_619);
        float _633 = (dot(vec3(_200, _201, _202), vec3(_624 * _616, _624 * _617, _624 * _618)) + 1.0) * 0.5;
        float _3241 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _643 = sqrt(((_617 * _617) + (_616 * _616)) + (_618 * _618)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3252 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _645 = _644 * 2.0;
        float _649 = (1.0 - _644) / (_644 + 1.0);
        float _3263 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _650 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _659 = ((((1.0 - _650) * (_645 + 2.0)) * exp2(log2(isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))) * (_645 + 1.0))) + _650) * _613;
        float _660 = _581 * 0.5;
        float _661 = _591 * 0.5;
        float _662 = _601 * 0.5;
        float _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _676 = (dot(vec3(_200, _201, _202), vec3(_668 * _660, _668 * _661, _668 * _662)) + 1.0) * 0.5;
        float _3274 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _685 = sqrt(((_661 * _661) + (_660 * _660)) + (_662 * _662)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _3285 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _3296 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * (_687 + 1.0))) + _692) * _614;
        float _702 = _582 * 0.5;
        float _703 = _592 * 0.5;
        float _704 = _602 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _718 = (dot(vec3(_200, _201, _202), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3307 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _727 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _3318 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3329 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * (_729 + 1.0))) + _734) * _615;
        _751 = _582;
        _753 = _581;
        _754 = _580;
        _755 = _592;
        _756 = _591;
        _757 = _590;
        _758 = _602;
        _759 = _601;
        _760 = _600;
        _761 = _615;
        _762 = _614;
        _763 = _613;
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0)));
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
    }
    else
    {
        _751 = _752;
        _753 = _752;
        _754 = _752;
        _755 = _752;
        _756 = _752;
        _757 = _752;
        _758 = _752;
        _759 = _752;
        _760 = _752;
        _761 = _752;
        _762 = _752;
        _763 = _752;
        _764 = 0.0;
        _765 = 0.0;
        _766 = 0.0;
    }
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _792 = fma(_449, cbModelParam._m0[30u].z, fma(_445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _441));
        float _796 = fma(_449, cbModelParam._m0[31u].z, fma(_445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _441));
        float _800 = fma(_449, cbModelParam._m0[32u].z, fma(_445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _441));
        float _823 = _441 + _200;
        float _824 = _445 + _201;
        float _825 = _449 + _202;
        float _835 = fma(_825, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823)) - _792;
        float _836 = fma(_825, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823)) - _796;
        float _837 = fma(_825, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823)) - _800;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_792 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_796 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[35u].z) + ((((((_800 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _891 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_858.x + (-0.5));
        float _893 = _891 * (_858.y + (-0.5));
        float _894 = _891 * (_858.z + (-0.5));
        float _901 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_865.x + (-0.5));
        float _903 = _901 * (_865.y + (-0.5));
        float _904 = _901 * (_865.z + (-0.5));
        float _911 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_872.x + (-0.5));
        float _913 = _911 * (_872.y + (-0.5));
        float _914 = _911 * (_872.z + (-0.5));
        float _921 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_879.x + (-0.5));
        float _923 = _921 * (_879.y + (-0.5));
        float _924 = _921 * (_879.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_200, _201, _202), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3370 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3381 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3392 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (_955 + 1.0))) + _960) * _925;
        float _970 = _893 * 0.5;
        float _971 = _903 * 0.5;
        float _972 = _913 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_200, _201, _202), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3425 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_997 + 1.0))) + _1002) * _926;
        float _1012 = _894 * 0.5;
        float _1013 = _904 * 0.5;
        float _1014 = _914 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_200, _201, _202), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3458 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_1039 + 1.0))) + _1044) * _927;
        _1061 = _894;
        _1062 = _893;
        _1063 = _892;
        _1064 = _904;
        _1065 = _903;
        _1066 = _902;
        _1067 = _914;
        _1068 = _913;
        _1069 = _912;
        _1070 = _927;
        _1071 = _926;
        _1072 = _925;
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _752;
        _1062 = _752;
        _1063 = _752;
        _1064 = _752;
        _1065 = _752;
        _1066 = _752;
        _1067 = _752;
        _1068 = _752;
        _1069 = _752;
        _1070 = _752;
        _1071 = _752;
        _1072 = _752;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _764)) + _764;
    float _1086 = (cbModelParam._m0[1u].x * (_1074 - _765)) + _765;
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _766)) + _766;
    float _1108 = fma(_1087, cbSceneParam._m0[89u].z, fma(_1086, cbSceneParam._m0[89u].y, _1085 * cbSceneParam._m0[89u].x));
    float _1111 = fma(_1087, cbSceneParam._m0[90u].z, fma(_1086, cbSceneParam._m0[90u].y, _1085 * cbSceneParam._m0[90u].x));
    float _1114 = fma(_1087, cbSceneParam._m0[91u].z, fma(_1086, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1085));
    float _1129 = _385 * 0.5;
    float _1130 = _386 * 0.5;
    float _1131 = _387 * 0.5;
    float _1132 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1135 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1062, _1065, _1068, _1071));
    float _1138 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1172;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1145 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_751, _755, _758, _761));
        float _1149 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_753, _756, _759, _762));
        float _1153 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_754, _757, _760, _763));
        float _1160 = dot(vec4(cbModelParam._m0[39u]), vec4(_1129, _1130, _1131, 1.0));
        _1172 = dot(vec3(isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1160) ? 0.0 : (isnan(0.0) ? _1160 : max(0.0, _1160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1172 = 1.0;
    }
    float _1183;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1174 = dot(vec4(cbModelParam._m0[40u]), vec4(_1129, _1130, _1131, 1.0));
        _1183 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1174) ? 0.0 : (isnan(0.0) ? _1174 : max(0.0, _1174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1183 = 1.0;
    }
    float _1187 = (_1183 * cbModelParam._m0[1u].x) + (_1172 * (1.0 - cbModelParam._m0[1u].x));
    float _1197 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _205);
    float _1198 = isnan(_1197) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1197 : min(cbModelParam._m0[25u].z, _1197));
    float _1280;
    float _1282;
    float _1284;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1247 = fma(_449, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441)) + cbModelParam._m0[13u].w;
        float _1251 = fma(_449, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441)) + cbModelParam._m0[14u].w;
        float _1255 = fma(_449, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441)) + cbModelParam._m0[15u].w;
        float _1258 = fma(_387, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385));
        float _1261 = fma(_387, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385));
        float _1264 = fma(_387, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385));
        float _1292;
        if (_1258 > 0.0)
        {
            _1292 = abs((1.0 - _1247) / _1258);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1247 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1292 = frontier_phi_14_12_ladder;
        }
        float _1522;
        if (_1261 > 0.0)
        {
            _1522 = abs((1.0 - _1251) / _1261);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1251 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1522 = frontier_phi_23_19_ladder;
        }
        float _1779;
        if (_1264 > 0.0)
        {
            _1779 = abs((1.0 - _1255) / _1264);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1255 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1779 = frontier_phi_35_30_ladder;
        }
        float _1781 = isnan(_1522) ? _1292 : (isnan(_1292) ? _1522 : min(_1292, _1522));
        float _1782 = isnan(_1779) ? _1781 : (isnan(_1781) ? _1779 : min(_1781, _1779));
        float _1786 = (_1782 * _1258) + _1247;
        float _1787 = (_1782 * _1261) + _1251;
        float _1788 = (_1782 * _1264) + _1255;
        float _1789 = _1782 * 9.9999997473787516355514526367188e-05;
        float _1791 = (-1.0) - _1789;
        float _1793 = _1789 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1788 > _1793) || ((_1788 < _1791) || ((_1787 > _1793) || ((_1787 < _1791) || ((_1786 < _1791) || (_1786 > _1793))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1788, cbModelParam._m0[9u].z, fma(_1787, cbModelParam._m0[9u].y, _1786 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1788, cbModelParam._m0[10u].z, fma(_1787, cbModelParam._m0[10u].y, _1786 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1788, cbModelParam._m0[11u].z, fma(_1787, cbModelParam._m0[11u].y, _1786 * cbModelParam._m0[11u].x))), _1198);
            frontier_phi_13_35_ladder = _1916.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1916.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1916.x * cbModelParam._m0[1u].y;
        }
        _1280 = frontier_phi_13_35_ladder_2;
        _1282 = frontier_phi_13_35_ladder_1;
        _1284 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_385, _386, _387), _1198);
        _1280 = _1268.x * cbModelParam._m0[1u].y;
        _1282 = _1268.y * cbModelParam._m0[1u].y;
        _1284 = _1268.z * cbModelParam._m0[1u].y;
    }
    float _1288 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _205);
    float _1289 = isnan(_1288) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1288 : min(cbModelParam._m0[25u].w, _1288));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1346 = fma(_449, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441)) + cbModelParam._m0[21u].w;
        float _1350 = fma(_449, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441)) + cbModelParam._m0[22u].w;
        float _1354 = fma(_449, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441)) + cbModelParam._m0[23u].w;
        float _1357 = fma(_387, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385));
        float _1360 = fma(_387, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385));
        float _1363 = fma(_387, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385));
        float _1527;
        if (_1357 > 0.0)
        {
            _1527 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1527 = frontier_phi_25_21_ladder;
        }
        float _1806;
        if (_1360 > 0.0)
        {
            _1806 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1806 = frontier_phi_37_32_ladder;
        }
        float _2019;
        if (_1363 > 0.0)
        {
            _2019 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2019 = frontier_phi_46_43_ladder;
        }
        float _2021 = isnan(_1806) ? _1527 : (isnan(_1527) ? _1806 : min(_1527, _1806));
        float _2022 = isnan(_2019) ? _2021 : (isnan(_2021) ? _2019 : min(_2021, _2019));
        float _2026 = (_2022 * _1357) + _1346;
        float _2027 = (_2022 * _1360) + _1350;
        float _2028 = (_2022 * _1363) + _1354;
        float _2029 = _2022 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2029;
        float _2032 = _2029 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2028 > _2032) || ((_2028 < _2030) || ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 < _2030) || (_2026 > _2032))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2028, cbModelParam._m0[17u].z, fma(_2027, cbModelParam._m0[17u].y, _2026 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2028, cbModelParam._m0[18u].z, fma(_2027, cbModelParam._m0[18u].y, _2026 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2028, cbModelParam._m0[19u].z, fma(_2027, cbModelParam._m0[19u].y, _2026 * cbModelParam._m0[19u].x))), _1289);
            frontier_phi_22_46_ladder = _2229.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2229.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2229.x * cbModelParam._m0[1u].z;
        }
        _1382 = frontier_phi_22_46_ladder_2;
        _1384 = frontier_phi_22_46_ladder_1;
        _1386 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_385, _386, _387), _1289);
        _1382 = _1366.x * cbModelParam._m0[1u].z;
        _1384 = _1366.y * cbModelParam._m0[1u].z;
        _1386 = _1366.z * cbModelParam._m0[1u].z;
    }
    float _1399 = (((_412 * _359) + _413) * _376) * ((cbModelParam._m0[1u].w * (_1382 - _1280)) + _1280);
    float _1401 = (((_412 * _361) + _413) * _376) * ((cbModelParam._m0[1u].w * (_1384 - _1282)) + _1282);
    float _1403 = (((_412 * _362) + _413) * _376) * ((cbModelParam._m0[1u].w * (_1386 - _1284)) + _1284);
    float _1406 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1401, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1401, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1401, cbSceneParam._m0[91u].y, _1399 * cbSceneParam._m0[91u].x));
    vec4 _1420 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_292, _293));
    float _1422 = _1420.w;
    float _1434 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1422);
    float _1435 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1422);
    float _1436 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1422);
    uvec4 _1440 = floatBitsToUint(cbInstanceData._m0[_333 + 5u]);
    uint _1442 = _1440.x * 14u;
    uint _1443 = _1442 + 13u;
    float _1450 = _376 + (-1.0);
    float _1456 = (cbLight._m0[_1443].x * _1450) + 1.0;
    float _1457 = (cbLight._m0[_1443].y * _1450) + 1.0;
    float _1458 = (cbLight._m0[_1443].z * _1450) + 1.0;
    float _1459 = (cbLight._m0[_1443].w * _1450) + 1.0;
    uint _1460 = _1442 + 5u;
    float _1466 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
    uint _1470 = _1442 + 4u;
    float _1480 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
    uint _1484 = _1442 | 1u;
    float _1495 = dot(vec3(cbLight._m0[_1442].xyz), vec3(_200, _201, _202));
    float _1498 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_200, _201, _202));
    float _3594 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _3605 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
    float _1503 = (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * 0.3183098733425140380859375;
    float _1505 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.3183098733425140380859375;
    float _1512 = ((cbLight._m0[_1460].x * _1466) * _1505) + (((cbLight._m0[_1470].x * _1434) * _1480) * _1503);
    float _1513 = ((_1466 * cbLight._m0[_1460].y) * _1505) + (((cbLight._m0[_1470].y * _1435) * _1480) * _1503);
    float _1514 = ((_1466 * cbLight._m0[_1460].z) * _1505) + (((cbLight._m0[_1470].z * _1436) * _1480) * _1503);
    uvec4 _1519 = floatBitsToUint(cbLight._m0[_1442 + 12u]);
    bool _1521 = _1519.x == 0u;
    float _1532;
    float _1534;
    float _1536;
    if (_1521)
    {
        _1532 = _1512;
        _1534 = _1513;
        _1536 = _1514;
    }
    else
    {
        uint _1540 = _1442 + 6u;
        float _1556 = (dot(vec3(cbLight._m0[_1442 + 2u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1557 = _1556 * _1556;
        float _3616 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1559 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1532 = (((cbLight._m0[_1540].x * 0.3183098733425140380859375) * _1558) * _1559) + _1512;
        _1534 = (((cbLight._m0[_1540].y * 0.3183098733425140380859375) * _1558) * _1559) + _1513;
        _1536 = (((cbLight._m0[_1540].z * 0.3183098733425140380859375) * _1558) * _1559) + _1514;
    }
    bool _1539 = _1519.y == 0u;
    float _1577;
    float _1579;
    float _1581;
    if (_1539)
    {
        _1577 = _1532;
        _1579 = _1534;
        _1581 = _1536;
    }
    else
    {
        uint _1750 = _1442 + 7u;
        float _1766 = (dot(vec3(cbLight._m0[_1442 + 3u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1767 = _1766 * _1766;
        float _3632 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1769 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1577 = (((cbLight._m0[_1750].x * 0.3183098733425140380859375) * _1768) * _1769) + _1532;
        _1579 = (((cbLight._m0[_1750].y * 0.3183098733425140380859375) * _1768) * _1769) + _1534;
        _1581 = (((cbLight._m0[_1750].z * 0.3183098733425140380859375) * _1768) * _1769) + _1536;
    }
    uint _1584 = _1442 + 8u;
    float _1597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1442].w)) * _205) * 0.949999988079071044921875);
    float _1598 = _1597 * _1597;
    float _1599 = cbLight._m0[_1442].x + _284;
    float _1600 = cbLight._m0[_1442].y + _285;
    float _1601 = cbLight._m0[_1442].z + _286;
    float _1605 = inversesqrt(dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601)));
    float _1606 = _1605 * _1599;
    float _1607 = _1605 * _1600;
    float _1608 = _1605 * _1601;
    float _1609 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1442].xyz));
    float _3648 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1612 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _1613 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _1614 = dot(vec3(_200, _201, _202), vec3(_1606, _1607, _1608));
    float _3670 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1617 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _1618 = dot(vec3(cbLight._m0[_1442].xyz), vec3(_1606, _1607, _1608));
    float _3681 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1622 = _1598 * _1598;
    float _1626 = ((_1617 * _1617) * (_1622 + (-1.0))) + 1.0;
    float _1634 = exp2(log2(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * 5.0);
    float _1635 = 0.959999978542327880859375 - _356;
    float _1637 = 0.959999978542327880859375 - _357;
    float _1638 = 0.959999978542327880859375 - _358;
    float _1645 = 1.0 - _1598;
    float _1656 = (0.5 / (((_1613 * ((_1612 * _1645) + _1598)) + 9.9999999392252902907785028219223e-09) + (((_1613 * _1645) + _1598) * _1612))) * _1612;
    float _3692 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1658 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1622 / ((_1626 * _1626) * 3.141590118408203125));
    uint _1672 = _1442 + 9u;
    float _1683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1484].w)) * _205) * 0.949999988079071044921875);
    float _1684 = _1683 * _1683;
    float _1685 = cbLight._m0[_1484].x + _284;
    float _1686 = cbLight._m0[_1484].y + _285;
    float _1687 = cbLight._m0[_1484].z + _286;
    float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
    float _1692 = _1691 * _1685;
    float _1693 = _1691 * _1686;
    float _1694 = _1691 * _1687;
    float _1695 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1484].xyz));
    float _3703 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _1699 = dot(vec3(_200, _201, _202), vec3(_1692, _1693, _1694));
    float _3714 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _1703 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_1692, _1693, _1694));
    float _3725 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1707 = _1684 * _1684;
    float _1711 = ((_1702 * _1702) * (_1707 + (-1.0))) + 1.0;
    float _1718 = exp2(log2(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * 5.0);
    float _1725 = 1.0 - _1684;
    float _1735 = (0.5 / (((_1613 * ((_1698 * _1725) + _1684)) + 9.9999999392252902907785028219223e-09) + (((_1613 * _1725) + _1684) * _1698))) * _1698;
    float _3736 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1737 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1707 / ((_1711 * _1711) * 3.141590118408203125));
    float _1747 = (((((_1718 * _1635) + _359) * cbLight._m0[_1672].x) * _1737) * _1466) + ((((cbLight._m0[_1584].x * _1434) * ((_1634 * _1635) + _359)) * _1658) * _1480);
    float _1748 = (((((_1718 * _1637) + _361) * cbLight._m0[_1672].y) * _1737) * _1466) + ((((cbLight._m0[_1584].y * _1435) * ((_1634 * _1637) + _361)) * _1658) * _1480);
    float _1749 = (((((_1718 * _1638) + _362) * cbLight._m0[_1672].z) * _1737) * _1466) + ((((cbLight._m0[_1584].z * _1436) * ((_1634 * _1638) + _362)) * _1658) * _1480);
    float _1811;
    float _1813;
    float _1815;
    if (_1521)
    {
        _1811 = _1747;
        _1813 = _1748;
        _1815 = _1749;
    }
    else
    {
        uint _1817 = _1442 + 2u;
        uint _1821 = _1442 + 10u;
        float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _205) * 0.949999988079071044921875);
        float _1836 = _1835 * _1835;
        float _1837 = cbLight._m0[_1817].x + _284;
        float _1838 = cbLight._m0[_1817].y + _285;
        float _1839 = cbLight._m0[_1817].z + _286;
        float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
        float _1844 = _1843 * _1837;
        float _1845 = _1843 * _1838;
        float _1846 = _1843 * _1839;
        float _1847 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1817].xyz));
        float _3747 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1850 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1851 = dot(vec3(_200, _201, _202), vec3(_1844, _1845, _1846));
        float _3758 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1854 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1855 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1844, _1845, _1846));
        float _3769 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1859 = _1836 * _1836;
        float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
        float _1870 = exp2(log2(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * 5.0);
        float _1877 = 1.0 - _1836;
        float _1887 = (0.5 / (((_1613 * ((_1850 * _1877) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1613 * _1877) + _1836) * _1850))) * _1850;
        float _3780 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1889 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
        float _1890 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1811 = (((((_1870 * _1635) + _359) * cbLight._m0[_1821].x) * _1889) * _1890) + _1747;
        _1813 = (((((_1870 * _1637) + _361) * cbLight._m0[_1821].y) * _1889) * _1890) + _1748;
        _1815 = (((((_1870 * _1638) + _362) * cbLight._m0[_1821].z) * _1889) * _1890) + _1749;
    }
    float _1925;
    float _1927;
    float _1929;
    if (_1539)
    {
        _1925 = _1811;
        _1927 = _1813;
        _1929 = _1815;
    }
    else
    {
        uint _1936 = _1442 + 3u;
        uint _1940 = _1442 + 11u;
        float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _205) * 0.949999988079071044921875);
        float _1955 = _1954 * _1954;
        float _1956 = cbLight._m0[_1936].x + _284;
        float _1957 = cbLight._m0[_1936].y + _285;
        float _1958 = cbLight._m0[_1936].z + _286;
        float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
        float _1963 = _1962 * _1956;
        float _1964 = _1962 * _1957;
        float _1965 = _1962 * _1958;
        float _1966 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1936].xyz));
        float _3796 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1970 = dot(vec3(_200, _201, _202), vec3(_1963, _1964, _1965));
        float _3807 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_1963, _1964, _1965));
        float _3818 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1978 = _1955 * _1955;
        float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
        float _1989 = exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0);
        float _1996 = 1.0 - _1955;
        float _2006 = (0.5 / (((_1613 * ((_1969 * _1996) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1613 * _1996) + _1955) * _1969))) * _1969;
        float _3829 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2008 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
        float _2009 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1925 = (((((_1989 * _1635) + _359) * cbLight._m0[_1940].x) * _2008) * _2009) + _1811;
        _1927 = (((((_1989 * _1637) + _361) * cbLight._m0[_1940].y) * _2008) * _2009) + _1813;
        _1929 = (((((_1989 * _1638) + _362) * cbLight._m0[_1940].z) * _2008) * _2009) + _1815;
    }
    float _2144;
    float _2146;
    float _2148;
    float _2150;
    float _2152;
    float _2154;
    if (_1440.y == 0u)
    {
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2084;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2084;
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2084;
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.x;
        uint _2111 = uint((float(_2099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _293) / _2100))) + floor(float(uint(cbSceneParam._m0[85u].x * _292) / _2100)));
        float _2121 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2122 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        uint _2125 = uint(isnan(14.0) ? _2122 : (isnan(_2122) ? 14.0 : min(_2122, 14.0)));
        uvec4 _2130 = texelFetch(g_lightClusterGridBuffer, int(((_2125 << 2u) + (_2111 << 6u)) >> 2u));
        uint _2131 = _2130.x;
        uint _2132 = _2099.z;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        if (((((1u << ((_2132 >> 4u) & 15u)) + 4294967295u) & _2131) == 0u) || ((_2132 & 240u) == 0u))
        {
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
        }
        else
        {
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2245;
            float _2379 = 0.0;
            float _2380 = 0.0;
            float _2381 = 0.0;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            uint _2385 = 0u;
            uint _2394;
            bool _2395;
            for (;;)
            {
                _2394 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2385 << 2u)) >> 2u)).x;
                _2395 = _2394 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2395)
                {
                    frontier_phi_61_pred = _2379;
                    frontier_phi_61_pred_1 = _2384;
                    frontier_phi_61_pred_2 = _2383;
                    frontier_phi_61_pred_3 = _2382;
                    frontier_phi_61_pred_4 = _2381;
                    frontier_phi_61_pred_5 = _2380;
                }
                else
                {
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    uint _2509;
                    _2503 = _2379;
                    _2504 = _2380;
                    _2505 = _2381;
                    _2506 = _2382;
                    _2507 = _2383;
                    _2508 = _2384;
                    _2509 = _2394;
                    float _2435;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    float _2440;
                    for (;;)
                    {
                        uint _2513 = uint(findLSB(_2509)) + (_2385 << 5u);
                        uint _2510 = (_2509 + 4294967295u) & _2509;
                        uint _2515 = _2513 * 48u;
                        vec4 _2529 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2515)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 3u)).x));
                        uint _2535 = (_2513 * 48u) + 4u;
                        vec4 _2548 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2535)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 3u)).x));
                        uint _2554 = (_2513 * 48u) + 8u;
                        vec3 _2565 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2554)).x, texelFetch(g_PointLightRenderingBuffer, int(_2554 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2554 + 2u)).x));
                        float _2569 = _2529.x - _2085;
                        float _2570 = _2529.y - _2086;
                        float _2571 = _2529.z - _2087;
                        float _2572 = dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571));
                        float _2575 = inversesqrt(_2572);
                        float _2576 = _2575 * _2569;
                        float _2577 = _2575 * _2570;
                        float _2578 = _2575 * _2571;
                        float _2579 = dot(vec3(_314, _317, _320), vec3(_2576, _2577, _2578));
                        float _2584 = 1.0 - (_2572 * _2529.w);
                        float _3855 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
                        float _2585 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
                        float _2586 = sqrt(_2572) * _2548.w;
                        float _2589 = 1.39999997615814208984375 / (_2586 + 1.39999997615814208984375);
                        float _2590 = _2589 * _2589;
                        float _2593 = ((1.0 - _2590) * _2579) + _2590;
                        float _2596 = _2586 * _2586;
                        float _2600 = ((isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0))) * _2585) / ((_2596 * 0.699999988079071044921875) + 1.0);
                        float _2604 = (-0.0) - _2085;
                        float _2605 = (-0.0) - _2086;
                        float _2606 = (-0.0) - _2087;
                        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
                        float _2611 = _2610 * _2604;
                        float _2612 = _2610 * _2605;
                        float _2613 = _2610 * _2606;
                        float _2621 = exp2(log2(1.0 / ((_2596 * 3.5) + 5.0)) * 0.25);
                        float _2622 = 1.0 - _393;
                        float _2629 = sqrt(1.0 - ((1.0 - (_2622 * _2622)) * (1.0 - (_2621 * _2621))));
                        float _2630 = _2629 * _2629;
                        float _2631 = _2630 * _2630;
                        float _2632 = _2611 + _2576;
                        float _2633 = _2612 + _2577;
                        float _2634 = _2613 + _2578;
                        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
                        float _2642 = dot(vec3(_314, _317, _320), vec3(_2611, _2612, _2613));
                        float _3871 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2645 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                        float _2646 = dot(vec3(_314, _317, _320), vec3(_2638 * _2632, _2638 * _2633, _2638 * _2634));
                        float _3882 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                        float _2649 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                        float _2653 = ((_2649 * _2649) * (_2631 + (-1.0))) + 1.0;
                        float _2654 = _2589 * _2630;
                        float _2655 = _2654 * _2654;
                        float _2658 = ((1.0 - _2655) * _2579) + _2655;
                        float _3893 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                        float _2659 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
                        float _2660 = 1.0 - _2630;
                        float _2670 = (0.5 / (((_2659 * ((_2645 * _2660) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2660) + _2630) * _2645))) * _2659;
                        float _3904 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                        float _2681 = (((_2631 * 3.1415927410125732421875) * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) / ((_2653 * _2653) * ((_2596 * 2.1991131305694580078125) + 3.141590118408203125))) * _2585;
                        _2438 = (_2600 * _2548.x) + _2506;
                        _2439 = (_2600 * _2548.y) + _2507;
                        _2440 = (_2600 * _2548.z) + _2508;
                        _2435 = (_2681 * _2565.x) + _2503;
                        _2436 = (_2681 * _2565.y) + _2504;
                        _2437 = (_2681 * _2565.z) + _2505;
                        if (_2510 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2503 = _2435;
                            _2504 = _2436;
                            _2505 = _2437;
                            _2506 = _2438;
                            _2507 = _2439;
                            _2508 = _2440;
                            _2509 = _2510;
                        }
                    }
                    frontier_phi_61_pred = _2435;
                    frontier_phi_61_pred_1 = _2440;
                    frontier_phi_61_pred_2 = _2439;
                    frontier_phi_61_pred_3 = _2438;
                    frontier_phi_61_pred_4 = _2437;
                    frontier_phi_61_pred_5 = _2436;
                }
                _2235 = frontier_phi_61_pred;
                _2245 = frontier_phi_61_pred_1;
                _2243 = frontier_phi_61_pred_2;
                _2241 = frontier_phi_61_pred_3;
                _2239 = frontier_phi_61_pred_4;
                _2237 = frontier_phi_61_pred_5;
                uint _2386 = _2385 + 1u;
                if (_2386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2379 = _2235;
                    _2380 = _2237;
                    _2381 = _2239;
                    _2382 = _2241;
                    _2383 = _2243;
                    _2384 = _2245;
                    _2385 = _2386;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
        }
        uvec4 _2248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2249 = _2248.z;
        uint _2251 = (_2249 >> 8u) & 15u;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        if (((4294967295u << _2251) & _2131) == 0u)
        {
            _2347 = _2234;
            _2349 = _2236;
            _2351 = _2238;
            _2353 = _2240;
            _2355 = _2242;
            _2357 = _2244;
        }
        else
        {
            float _2372 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _2373 = _2372 * _2085;
            float _2374 = _2372 * _2086;
            float _2375 = _2372 * _2087;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2251 < ((_2249 >> 12u) & 15u))
            {
                float _2348;
                float _2350;
                float _2352;
                float _2354;
                float _2356;
                float _2358;
                float _2486 = _2234;
                float _2487 = _2236;
                float _2488 = _2238;
                float _2489 = _2240;
                float _2490 = _2242;
                float _2491 = _2244;
                uint _2492 = _2251;
                uint _2501;
                bool _2502;
                for (;;)
                {
                    _2501 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2492 << 2u)) >> 2u)).x;
                    _2502 = _2501 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2502)
                    {
                        frontier_phi_67_pred = _2489;
                        frontier_phi_67_pred_1 = _2490;
                        frontier_phi_67_pred_2 = _2491;
                        frontier_phi_67_pred_3 = _2488;
                        frontier_phi_67_pred_4 = _2487;
                        frontier_phi_67_pred_5 = _2486;
                    }
                    else
                    {
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2699 = _2486;
                        float _2700 = _2487;
                        float _2701 = _2488;
                        float _2702 = _2489;
                        float _2703 = _2490;
                        float _2704 = _2491;
                        uint _2705 = _2501;
                        uint _2706;
                        vec4 _2731;
                        float _2732;
                        vec4 _2747;
                        vec3 _2759;
                        vec4 _2775;
                        vec4 _2791;
                        float _2838;
                        bool _2839;
                        for (;;)
                        {
                            uint _2716 = ((_2492 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2705));
                            _2706 = (_2705 + 4294967295u) & _2705;
                            uint _2718 = _2716 * 40u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            _2732 = _2731.w;
                            uint _2734 = (_2716 * 40u) + 4u;
                            _2747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 3u)).x));
                            uint _2749 = (_2716 * 40u) + 8u;
                            _2759 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x));
                            uint _2762 = (_2716 * 40u) + 16u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2778 = (_2716 * 40u) + 20u;
                            _2791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 3u)).x));
                            uint _2794 = (_2716 * 40u) + 24u;
                            vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            uint _2813 = (_2716 * 40u) + 28u;
                            vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            _2838 = fma(_2087, _2826.z, fma(_2086, _2826.y, _2826.x * _2085)) + _2826.w;
                            _2839 = !((fma(_2087, _2807.z, fma(_2086, _2807.y, _2807.x * _2085)) + _2807.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2839)
                            {
                                float _2866 = _2731.x - _2085;
                                float _2867 = _2731.y - _2086;
                                float _2868 = _2731.z - _2087;
                                float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                                float _2872 = inversesqrt(_2869);
                                float _2873 = _2872 * _2866;
                                float _2874 = _2872 * _2867;
                                float _2875 = _2872 * _2868;
                                float _2879 = 1.0 - (_2869 / (_2732 * _2732));
                                float _3915 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                                float _2880 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                                float _2884 = sqrt(_2869) * _2747.w;
                                float _2886 = 1.39999997615814208984375 / (_2884 + 1.39999997615814208984375);
                                float _2887 = _2886 * _2886;
                                float _2890 = ((1.0 - _2887) * dot(vec3(_2873, _2874, _2875), vec3(_314, _317, _320))) + _2887;
                                float _2893 = _2884 * _2884;
                                float _2897 = (fma(_2087, _2775.z, fma(_2086, _2775.y, _2775.x * _2085)) + _2775.w) / _2838;
                                float _2898 = (fma(_2087, _2791.z, fma(_2086, _2791.y, _2791.x * _2085)) + _2791.w) / _2838;
                                float _2902 = 1.0 - dot(vec2(_2897, _2898), vec2(_2897, _2898));
                                float _3931 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2903 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                                float _2904 = _2903 * (((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2880) / ((_2893 * 0.699999988079071044921875) + 1.0));
                                float _2916 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                                float _2917 = 1.0 - _393;
                                float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                                float _2925 = _2924 * _2924;
                                float _2926 = _2925 * _2925;
                                float _2927 = _2873 - _2373;
                                float _2928 = _2874 - _2374;
                                float _2929 = _2875 - _2375;
                                float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                                float _2937 = dot(vec3(_314, _317, _320), vec3((-0.0) - _2373, (-0.0) - _2374, (-0.0) - _2375));
                                float _3942 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                                float _2940 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _2941 = dot(vec3(_314, _317, _320), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                                float _3953 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2944 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                                float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                                float _2949 = _2886 * _2925;
                                float _2950 = _2949 * _2949;
                                float _2956 = ((1.0 - _2950) * dot(vec3(_314, _317, _320), vec3(_2873, _2874, _2875))) + _2950;
                                float _3964 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                                float _2958 = 1.0 - _2925;
                                float _2968 = (0.5 / (((_2957 * ((_2940 * _2958) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2925) * _2940))) * _2957;
                                float _3975 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2978 = (_2903 * _2880) * (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) / ((_2948 * _2948) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2978 * _2759.x;
                                frontier_phi_73_pred_1 = _2978 * _2759.y;
                                frontier_phi_73_pred_2 = _2904 * _2747.z;
                                frontier_phi_73_pred_3 = _2904 * _2747.y;
                                frontier_phi_73_pred_4 = _2904 * _2747.x;
                                frontier_phi_73_pred_5 = _2978 * _2759.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2982 = frontier_phi_73_pred;
                            _2983 = frontier_phi_73_pred_1;
                            _2987 = frontier_phi_73_pred_2;
                            _2986 = frontier_phi_73_pred_3;
                            _2985 = frontier_phi_73_pred_4;
                            _2984 = frontier_phi_73_pred_5;
                            _2689 = _2985 + _2702;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            _2686 = _2982 + _2699;
                            _2687 = _2983 + _2700;
                            _2688 = _2984 + _2701;
                            if (_2706 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2706;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2689;
                        frontier_phi_67_pred_1 = _2690;
                        frontier_phi_67_pred_2 = _2691;
                        frontier_phi_67_pred_3 = _2688;
                        frontier_phi_67_pred_4 = _2687;
                        frontier_phi_67_pred_5 = _2686;
                    }
                    _2354 = frontier_phi_67_pred;
                    _2356 = frontier_phi_67_pred_1;
                    _2358 = frontier_phi_67_pred_2;
                    _2352 = frontier_phi_67_pred_3;
                    _2350 = frontier_phi_67_pred_4;
                    _2348 = frontier_phi_67_pred_5;
                    uint _2493 = _2492 + 1u;
                    if (_2493 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2486 = _2348;
                        _2487 = _2350;
                        _2488 = _2352;
                        _2489 = _2354;
                        _2490 = _2356;
                        _2491 = _2358;
                        _2492 = _2493;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2356;
                frontier_phi_55_56_ladder_1 = _2358;
                frontier_phi_55_56_ladder_2 = _2354;
                frontier_phi_55_56_ladder_3 = _2352;
                frontier_phi_55_56_ladder_4 = _2350;
                frontier_phi_55_56_ladder_5 = _2348;
            }
            else
            {
                frontier_phi_55_56_ladder = _2242;
                frontier_phi_55_56_ladder_1 = _2244;
                frontier_phi_55_56_ladder_2 = _2240;
                frontier_phi_55_56_ladder_3 = _2238;
                frontier_phi_55_56_ladder_4 = _2236;
                frontier_phi_55_56_ladder_5 = _2234;
            }
            _2347 = frontier_phi_55_56_ladder_5;
            _2349 = frontier_phi_55_56_ladder_4;
            _2351 = frontier_phi_55_56_ladder_3;
            _2353 = frontier_phi_55_56_ladder_2;
            _2355 = frontier_phi_55_56_ladder;
            _2357 = frontier_phi_55_56_ladder_1;
        }
        float _2362 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _2144 = (_2362 * _2353) + _1577;
        _2146 = (_2362 * _2355) + _1579;
        _2148 = (_2362 * _2357) + _1581;
        _2150 = ((_2347 * _359) * _2362) + _1925;
        _2152 = ((_2349 * _361) * _2362) + _1927;
        _2154 = ((_2351 * _362) * _2362) + _1929;
    }
    else
    {
        _2144 = _1577;
        _2146 = _1579;
        _2148 = _1581;
        _2150 = _1925;
        _2152 = _1927;
        _2154 = _1929;
    }
    float _3991 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _4002 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _4013 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _4024 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _2179 = cbInstanceData._m0[_333 + 6u].w * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)));
    float _2184 = _292 / cbSceneParam._m0[86u].x;
    float _2185 = _293 / cbSceneParam._m0[86u].y;
    vec4 _2199 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2184, _2185, (log2((isnan(cbSceneParam._m0[77u].w) ? _225 : (isnan(_225) ? cbSceneParam._m0[77u].w : min(_225, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2201 = _2199.x;
    float _2202 = _2199.y;
    float _2203 = _2199.z;
    float _2204 = _2199.w;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    if (_225 > cbSceneParam._m0[78u].w)
    {
        float _2259 = isnan(_225) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _225 : min(cbSceneParam._m0[80u].w, _225));
        float _2260 = _2259 / _225;
        float _2271 = _2260 * _277;
        float _2272 = _278 * _2260;
        float _2273 = (-0.0) - _2272;
        float _2275 = _2260 * _279;
        float _2277 = (cbSceneParam._m0[77u].w * _2273) / _2259;
        float _2278 = _2277 + cbSceneParam._m0[79u].w;
        float _2279 = cbSceneParam._m0[79u].w - _2272;
        float _2285 = sqrt(((_2271 * _2271) + (_2272 * _2272)) + (_2275 * _2275));
        float _2288 = (1.0 - (cbSceneParam._m0[77u].w / _2259)) * _2285;
        float _2293 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2295 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2448;
        if (abs((_2273 - _2277) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2448 = ((((_2278 > 0.0) ? exp2(_2293 * _2278) : (2.0 - exp2(_2295 * _2278))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2288;
        }
        else
        {
            float _2408 = 1.0 / cbSceneParam._m0[80u].x;
            float _2409 = isnan(_2279) ? _2278 : (isnan(_2278) ? _2279 : max(_2278, _2279));
            float _2410 = isnan(_2279) ? _2278 : (isnan(_2278) ? _2279 : min(_2278, _2279));
            float _2419 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : min(_2409, 0.0));
            float _2420 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : min(_2410, 0.0));
            _2448 = ((abs(_2285 / _2273) * cbSceneParam._m0[80u].y) * ((((_2419 - _2420) * 2.0) - ((exp2(_2293 * (isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0)))) - exp2(_2293 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0))))) * _2408)) - ((exp2(_2295 * _2419) - exp2(_2295 * _2420)) * _2408))) + (_2288 * cbSceneParam._m0[80u].z);
        }
        vec4 _2450 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2184, _2185, 1.0), 0.0);
        float _2459 = exp2((_2448 * (-1.44269502162933349609375)) * (1.0 - _2450.w));
        float _2460 = log2(_2459);
        float _2476 = log2(_2204);
        _2297 = (exp2(_2476 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].x)) * _2450.x) / cbSceneParam._m0[78u].x)) + _2201;
        _2299 = (exp2(_2476 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].y)) * _2450.y) / cbSceneParam._m0[78u].y)) + _2202;
        _2301 = (exp2(_2476 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].z)) * _2450.z) / cbSceneParam._m0[78u].z)) + _2203;
        _2303 = _2459 * _2204;
    }
    else
    {
        _2297 = _2201;
        _2299 = _2202;
        _2301 = _2203;
        _2303 = _2204;
    }
    float _2315 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2316 = _2315 == 3.0;
    float _2317 = log2(_2303);
    float _2324 = exp2(_2317 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2144 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _376))) + ((_2150 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _1187)) * cbPerFrame._m0[3u].x));
    float _2325 = exp2(_2317 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2146 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _376))) + ((_2152 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _1187)) * cbPerFrame._m0[3u].x));
    float _2326 = exp2(_2317 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2148 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _376))) + ((_2154 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _1187)) * cbPerFrame._m0[3u].x));
    float _2335 = (_2315 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2335 * (_2316 ? _2324 : (_2324 + (cbSceneParam._m0[72u].w * _2297)));
    SV_Target.y = _2335 * (_2316 ? _2325 : (_2325 + (cbSceneParam._m0[72u].w * _2299)));
    SV_Target.z = _2335 * (_2316 ? _2326 : (_2326 + (cbSceneParam._m0[72u].w * _2301)));
    SV_Target.w = _2179;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2179;
}


