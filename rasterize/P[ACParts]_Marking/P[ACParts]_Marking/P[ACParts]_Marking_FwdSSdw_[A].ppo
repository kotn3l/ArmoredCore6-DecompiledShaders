#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2DArray P_ACParts_Marking_snp_0_Texture2DArray_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _797;
float _3215;
float _3216;
float _3217;
float _3218;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _167 = TEXCOORD.x * 16.0;
    vec4 _190 = texture(sampler2DArray(P_ACParts_Marking_snp_0_Texture2DArray_0, SS_ClampLinear), vec3((cbTextureTilingScale._m0[0u].x * fract(_167)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * fract(TEXCOORD.y)) + cbTextureTilingScale._m0[0u].w, floor(cbMtdParam._m0[9u].z + _167)));
    float _192 = _190.x;
    float _193 = _190.y;
    float _194 = _190.z;
    float _195 = _190.w;
    float _203 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _204 = _203 * _164;
    float _205 = _203 * _165;
    float _206 = _203 * _166;
    float _3227 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _208 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _3238 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _209 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _3249 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3260 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3271 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _3282 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _213 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _229 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _271 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _281 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _271);
    float _282 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _271);
    float _283 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _271);
    float _287 = inversesqrt(dot(vec3(_281, _282, _283), vec3(_281, _282, _283)));
    float _288 = _281 * _287;
    float _289 = _282 * _287;
    float _290 = _283 * _287;
    vec4 _296 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _299 = _296.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _476 = sqrt(((_281 * _281) + (_282 * _282)) + (_283 * _283));
        float _482 = (cbMatDynParam._m0[5u].x * _476) + cbMatDynParam._m0[5u].y;
        float _3293 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
        float _483 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _487 = (cbMatDynParam._m0[5u].z * _476) + cbMatDynParam._m0[5u].w;
        float _3304 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) - _483)) + _483) < ((_299 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _311 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _312 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _332 = fma(_206, cbSceneParam._m0[5u].z, fma(_205, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _204));
    float _335 = fma(_206, cbSceneParam._m0[6u].z, fma(_205, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _204));
    float _338 = fma(_206, cbSceneParam._m0[7u].z, fma(_205, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _204));
    uint _351 = uint(roundEven(NORMAL.w)) * 13u;
    uint _353 = _351 + 9u;
    uint _354 = _353 + uint(cbMatDynParam._m0[0u].w);
    float _360 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) * cbInstanceData._m0[_354].x;
    float _361 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) * cbInstanceData._m0[_354].y;
    float _362 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_354].z;
    float _3315 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _3337 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _366 = 1.0 - _213;
    float _367 = _363 * _366;
    float _368 = _364 * _366;
    float _369 = _365 * _366;
    float _374 = (_363 + (-0.039999999105930328369140625)) * _213;
    float _375 = (_364 + (-0.039999999105930328369140625)) * _213;
    float _376 = (_365 + (-0.039999999105930328369140625)) * _213;
    float _377 = _374 + 0.039999999105930328369140625;
    float _379 = _375 + 0.039999999105930328369140625;
    float _380 = _376 + 0.039999999105930328369140625;
    vec4 _389 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _311, cbSceneParam._m0[86u].y * _312));
    float _392 = _389.x * TEXCOORD.z;
    float _393 = dot(vec3(_204, _205, _206), vec3(_288, _289, _290));
    float _396 = _393 * 2.0;
    float _401 = (_396 * _204) - _288;
    float _402 = (_396 * _205) - _289;
    float _403 = (_396 * _206) - _290;
    float _407 = abs(dot(vec3(_288, _289, _290), vec3(_204, _205, _206)));
    float _3348 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _409 = sqrt(_209);
    float _422 = exp2((_409 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_409 * 3.0));
    float _428 = (1.0 - _422) * ((_409 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _429 = _422 * _409;
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _796;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _521 = fma(_465, cbModelParam._m0[26u].z, fma(_461, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _457));
        float _525 = fma(_465, cbModelParam._m0[27u].z, fma(_461, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _457));
        float _529 = fma(_465, cbModelParam._m0[28u].z, fma(_461, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _457));
        float _554 = _457 + _204;
        float _555 = _461 + _205;
        float _556 = _465 + _206;
        float _566 = fma(_556, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554)) - _521;
        float _567 = fma(_556, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554)) - _525;
        float _568 = fma(_556, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554)) - _529;
        float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
        float _585 = ((_572 * _566) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_521 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_572 * _567) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_525 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _587 = ((_572 * _568) / cbModelParam._m0[34u].z) + ((((((_529 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        float _624 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_590.x + (-0.5));
        float _626 = _624 * (_590.y + (-0.5));
        float _627 = _624 * (_590.z + (-0.5));
        float _634 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_597.x + (-0.5));
        float _636 = _634 * (_597.y + (-0.5));
        float _637 = _634 * (_597.z + (-0.5));
        float _644 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_604.x + (-0.5));
        float _646 = _644 * (_604.y + (-0.5));
        float _647 = _644 * (_604.z + (-0.5));
        float _654 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_611.x + (-0.5));
        float _656 = _654 * (_611.y + (-0.5));
        float _657 = _654 * (_611.z + (-0.5));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = _625 * 0.5;
        float _662 = _635 * 0.5;
        float _663 = _645 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _678 = (dot(vec3(_204, _205, _206), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _688 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _3396 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_690 + 1.0))) + _695) * _658;
        float _705 = _626 * 0.5;
        float _706 = _636 * 0.5;
        float _707 = _646 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_204, _205, _206), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3429 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_732 + 1.0))) + _737) * _659;
        float _747 = _627 * 0.5;
        float _748 = _637 * 0.5;
        float _749 = _647 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _763 = (dot(vec3(_204, _205, _206), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _772 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3462 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_774 + 1.0))) + _779) * _660;
        _796 = _627;
        _798 = _626;
        _799 = _625;
        _800 = _637;
        _801 = _636;
        _802 = _635;
        _803 = _647;
        _804 = _646;
        _805 = _645;
        _806 = _660;
        _807 = _659;
        _808 = _658;
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
    }
    else
    {
        _796 = _797;
        _798 = _797;
        _799 = _797;
        _800 = _797;
        _801 = _797;
        _802 = _797;
        _803 = _797;
        _804 = _797;
        _805 = _797;
        _806 = _797;
        _807 = _797;
        _808 = _797;
        _809 = 0.0;
        _810 = 0.0;
        _811 = 0.0;
    }
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _840 = fma(_465, cbModelParam._m0[30u].z, fma(_461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _457));
        float _844 = fma(_465, cbModelParam._m0[31u].z, fma(_461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _457));
        float _848 = fma(_465, cbModelParam._m0[32u].z, fma(_461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _457));
        float _871 = _457 + _204;
        float _872 = _461 + _205;
        float _873 = _465 + _206;
        float _883 = fma(_873, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871)) - _840;
        float _884 = fma(_873, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871)) - _844;
        float _885 = fma(_873, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871)) - _848;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_840 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_844 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[35u].z) + ((((((_848 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _939 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_906.x + (-0.5));
        float _941 = _939 * (_906.y + (-0.5));
        float _942 = _939 * (_906.z + (-0.5));
        float _949 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_913.x + (-0.5));
        float _951 = _949 * (_913.y + (-0.5));
        float _952 = _949 * (_913.z + (-0.5));
        float _959 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_920.x + (-0.5));
        float _961 = _959 * (_920.y + (-0.5));
        float _962 = _959 * (_920.z + (-0.5));
        float _969 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_927.x + (-0.5));
        float _971 = _969 * (_927.y + (-0.5));
        float _972 = _969 * (_927.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_204, _205, _206), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3525 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1003 + 1.0))) + _1008) * _973;
        float _1018 = _941 * 0.5;
        float _1019 = _951 * 0.5;
        float _1020 = _961 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_204, _205, _206), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3558 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_1045 + 1.0))) + _1050) * _974;
        float _1060 = _942 * 0.5;
        float _1061 = _952 * 0.5;
        float _1062 = _962 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_204, _205, _206), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3591 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1087 + 1.0))) + _1092) * _975;
        _1109 = _942;
        _1110 = _941;
        _1111 = _940;
        _1112 = _952;
        _1113 = _951;
        _1114 = _950;
        _1115 = _962;
        _1116 = _961;
        _1117 = _960;
        _1118 = _975;
        _1119 = _974;
        _1120 = _973;
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _797;
        _1110 = _797;
        _1111 = _797;
        _1112 = _797;
        _1113 = _797;
        _1114 = _797;
        _1115 = _797;
        _1116 = _797;
        _1117 = _797;
        _1118 = _797;
        _1119 = _797;
        _1120 = _797;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _809)) + _809;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _810)) + _810;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _811)) + _811;
    float _1156 = fma(_1135, cbSceneParam._m0[89u].z, fma(_1134, cbSceneParam._m0[89u].y, _1133 * cbSceneParam._m0[89u].x));
    float _1159 = fma(_1135, cbSceneParam._m0[90u].z, fma(_1134, cbSceneParam._m0[90u].y, _1133 * cbSceneParam._m0[90u].x));
    float _1162 = fma(_1135, cbSceneParam._m0[91u].z, fma(_1134, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1133));
    float _1177 = _401 * 0.5;
    float _1178 = _402 * 0.5;
    float _1179 = _403 * 0.5;
    float _1180 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1183 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1186 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1220;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1193 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_796, _800, _803, _806));
        float _1197 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_798, _801, _804, _807));
        float _1201 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_799, _802, _805, _808));
        float _1208 = dot(vec4(cbModelParam._m0[39u]), vec4(_1177, _1178, _1179, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1231;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1222 = dot(vec4(cbModelParam._m0[40u]), vec4(_1177, _1178, _1179, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1235 = (_1231 * cbModelParam._m0[1u].x) + (_1220 * (1.0 - cbModelParam._m0[1u].x));
    float _1245 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _209);
    float _1246 = isnan(_1245) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1245 : min(cbModelParam._m0[25u].z, _1245));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1295 = fma(_465, cbModelParam._m0[13u].z, fma(_461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457)) + cbModelParam._m0[13u].w;
        float _1299 = fma(_465, cbModelParam._m0[14u].z, fma(_461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457)) + cbModelParam._m0[14u].w;
        float _1303 = fma(_465, cbModelParam._m0[15u].z, fma(_461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457)) + cbModelParam._m0[15u].w;
        float _1306 = fma(_403, cbModelParam._m0[13u].z, fma(_402, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _401));
        float _1309 = fma(_403, cbModelParam._m0[14u].z, fma(_402, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _401));
        float _1312 = fma(_403, cbModelParam._m0[15u].z, fma(_402, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _401));
        float _1340;
        if (_1306 > 0.0)
        {
            _1340 = abs((1.0 - _1295) / _1306);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1295 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1340 = frontier_phi_17_15_ladder;
        }
        float _1570;
        if (_1309 > 0.0)
        {
            _1570 = abs((1.0 - _1299) / _1309);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1299 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1570 = frontier_phi_26_22_ladder;
        }
        float _1827;
        if (_1312 > 0.0)
        {
            _1827 = abs((1.0 - _1303) / _1312);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1303 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1827 = frontier_phi_38_33_ladder;
        }
        float _1829 = isnan(_1570) ? _1340 : (isnan(_1340) ? _1570 : min(_1340, _1570));
        float _1830 = isnan(_1827) ? _1829 : (isnan(_1829) ? _1827 : min(_1829, _1827));
        float _1834 = (_1830 * _1306) + _1295;
        float _1835 = (_1830 * _1309) + _1299;
        float _1836 = (_1830 * _1312) + _1303;
        float _1837 = _1830 * 9.9999997473787516355514526367188e-05;
        float _1839 = (-1.0) - _1837;
        float _1841 = _1837 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1836 > _1841) || ((_1836 < _1839) || ((_1835 > _1841) || ((_1835 < _1839) || ((_1834 < _1839) || (_1834 > _1841))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1836, cbModelParam._m0[9u].z, fma(_1835, cbModelParam._m0[9u].y, _1834 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1836, cbModelParam._m0[10u].z, fma(_1835, cbModelParam._m0[10u].y, _1834 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1836, cbModelParam._m0[11u].z, fma(_1835, cbModelParam._m0[11u].y, _1834 * cbModelParam._m0[11u].x))), _1246);
            frontier_phi_16_38_ladder = _1964.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1964.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1964.x * cbModelParam._m0[1u].y;
        }
        _1328 = frontier_phi_16_38_ladder_2;
        _1330 = frontier_phi_16_38_ladder_1;
        _1332 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_401, _402, _403), _1246);
        _1328 = _1316.x * cbModelParam._m0[1u].y;
        _1330 = _1316.y * cbModelParam._m0[1u].y;
        _1332 = _1316.z * cbModelParam._m0[1u].y;
    }
    float _1336 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _209);
    float _1337 = isnan(_1336) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1336 : min(cbModelParam._m0[25u].w, _1336));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1394 = fma(_465, cbModelParam._m0[21u].z, fma(_461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457)) + cbModelParam._m0[21u].w;
        float _1398 = fma(_465, cbModelParam._m0[22u].z, fma(_461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457)) + cbModelParam._m0[22u].w;
        float _1402 = fma(_465, cbModelParam._m0[23u].z, fma(_461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457)) + cbModelParam._m0[23u].w;
        float _1405 = fma(_403, cbModelParam._m0[21u].z, fma(_402, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _401));
        float _1408 = fma(_403, cbModelParam._m0[22u].z, fma(_402, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _401));
        float _1411 = fma(_403, cbModelParam._m0[23u].z, fma(_402, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _401));
        float _1575;
        if (_1405 > 0.0)
        {
            _1575 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1575 = frontier_phi_28_24_ladder;
        }
        float _1854;
        if (_1408 > 0.0)
        {
            _1854 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1854 = frontier_phi_40_35_ladder;
        }
        float _2067;
        if (_1411 > 0.0)
        {
            _2067 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2067 = frontier_phi_49_46_ladder;
        }
        float _2069 = isnan(_1854) ? _1575 : (isnan(_1575) ? _1854 : min(_1575, _1854));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1405) + _1394;
        float _2075 = (_2070 * _1408) + _1398;
        float _2076 = (_2070 * _1411) + _1402;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2077;
        float _2080 = _2077 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2076 > _2080) || ((_2076 < _2078) || ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 < _2078) || (_2074 > _2080))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2076, cbModelParam._m0[17u].z, fma(_2075, cbModelParam._m0[17u].y, _2074 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2076, cbModelParam._m0[18u].z, fma(_2075, cbModelParam._m0[18u].y, _2074 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2076, cbModelParam._m0[19u].z, fma(_2075, cbModelParam._m0[19u].y, _2074 * cbModelParam._m0[19u].x))), _1337);
            frontier_phi_25_49_ladder = _2277.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2277.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2277.x * cbModelParam._m0[1u].z;
        }
        _1430 = frontier_phi_25_49_ladder_2;
        _1432 = frontier_phi_25_49_ladder_1;
        _1434 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_401, _402, _403), _1337);
        _1430 = _1414.x * cbModelParam._m0[1u].z;
        _1432 = _1414.y * cbModelParam._m0[1u].z;
        _1434 = _1414.z * cbModelParam._m0[1u].z;
    }
    float _1447 = (((_428 * _377) + _429) * _392) * ((cbModelParam._m0[1u].w * (_1430 - _1328)) + _1328);
    float _1449 = (((_428 * _379) + _429) * _392) * ((cbModelParam._m0[1u].w * (_1432 - _1330)) + _1330);
    float _1451 = (((_428 * _380) + _429) * _392) * ((cbModelParam._m0[1u].w * (_1434 - _1332)) + _1332);
    float _1454 = fma(_1451, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1451, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1451, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, _1447 * cbSceneParam._m0[91u].x));
    vec4 _1468 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_311, _312));
    float _1470 = _1468.w;
    float _1482 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1470);
    float _1483 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1470);
    float _1484 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1470);
    uvec4 _1488 = floatBitsToUint(cbInstanceData._m0[_351 + 5u]);
    uint _1490 = _1488.x * 14u;
    uint _1491 = _1490 + 13u;
    float _1498 = _392 + (-1.0);
    float _1504 = (cbLight._m0[_1491].x * _1498) + 1.0;
    float _1505 = (cbLight._m0[_1491].y * _1498) + 1.0;
    float _1506 = (cbLight._m0[_1491].z * _1498) + 1.0;
    float _1507 = (cbLight._m0[_1491].w * _1498) + 1.0;
    uint _1508 = _1490 + 5u;
    float _1514 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
    uint _1518 = _1490 + 4u;
    float _1528 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
    uint _1532 = _1490 | 1u;
    float _1543 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_204, _205, _206));
    float _1546 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_204, _205, _206));
    float _3727 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _3738 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1551 = (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.3183098733425140380859375;
    float _1553 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1560 = ((cbLight._m0[_1508].x * _1514) * _1553) + (((cbLight._m0[_1518].x * _1482) * _1528) * _1551);
    float _1561 = ((_1514 * cbLight._m0[_1508].y) * _1553) + (((cbLight._m0[_1518].y * _1483) * _1528) * _1551);
    float _1562 = ((_1514 * cbLight._m0[_1508].z) * _1553) + (((cbLight._m0[_1518].z * _1484) * _1528) * _1551);
    uvec4 _1567 = floatBitsToUint(cbLight._m0[_1490 + 12u]);
    bool _1569 = _1567.x == 0u;
    float _1580;
    float _1582;
    float _1584;
    if (_1569)
    {
        _1580 = _1560;
        _1582 = _1561;
        _1584 = _1562;
    }
    else
    {
        uint _1588 = _1490 + 6u;
        float _1604 = (dot(vec3(cbLight._m0[_1490 + 2u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1605 = _1604 * _1604;
        float _3749 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1607 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1580 = (((cbLight._m0[_1588].x * 0.3183098733425140380859375) * _1606) * _1607) + _1560;
        _1582 = (((cbLight._m0[_1588].y * 0.3183098733425140380859375) * _1606) * _1607) + _1561;
        _1584 = (((cbLight._m0[_1588].z * 0.3183098733425140380859375) * _1606) * _1607) + _1562;
    }
    bool _1587 = _1567.y == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1587)
    {
        _1625 = _1580;
        _1627 = _1582;
        _1629 = _1584;
    }
    else
    {
        uint _1798 = _1490 + 7u;
        float _1814 = (dot(vec3(cbLight._m0[_1490 + 3u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1815 = _1814 * _1814;
        float _3765 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1817 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1625 = (((cbLight._m0[_1798].x * 0.3183098733425140380859375) * _1816) * _1817) + _1580;
        _1627 = (((cbLight._m0[_1798].y * 0.3183098733425140380859375) * _1816) * _1817) + _1582;
        _1629 = (((cbLight._m0[_1798].z * 0.3183098733425140380859375) * _1816) * _1817) + _1584;
    }
    uint _1632 = _1490 + 8u;
    float _1645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1490].w)) * _209) * 0.949999988079071044921875);
    float _1646 = _1645 * _1645;
    float _1647 = cbLight._m0[_1490].x + _288;
    float _1648 = cbLight._m0[_1490].y + _289;
    float _1649 = cbLight._m0[_1490].z + _290;
    float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
    float _1654 = _1653 * _1647;
    float _1655 = _1653 * _1648;
    float _1656 = _1653 * _1649;
    float _1657 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1490].xyz));
    float _3781 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _1661 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _1662 = dot(vec3(_204, _205, _206), vec3(_1654, _1655, _1656));
    float _3803 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1665 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1666 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_1654, _1655, _1656));
    float _3814 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1670 = _1646 * _1646;
    float _1674 = ((_1665 * _1665) * (_1670 + (-1.0))) + 1.0;
    float _1682 = exp2(log2(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * 5.0);
    float _1683 = 0.959999978542327880859375 - _374;
    float _1685 = 0.959999978542327880859375 - _375;
    float _1686 = 0.959999978542327880859375 - _376;
    float _1693 = 1.0 - _1646;
    float _1704 = (0.5 / (((_1661 * ((_1660 * _1693) + _1646)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1693) + _1646) * _1660))) * _1660;
    float _3825 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1706 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1670 / ((_1674 * _1674) * 3.141590118408203125));
    uint _1720 = _1490 + 9u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1532].w)) * _209) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1532].x + _288;
    float _1734 = cbLight._m0[_1532].y + _289;
    float _1735 = cbLight._m0[_1532].z + _290;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1532].xyz));
    float _3836 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _1747 = dot(vec3(_204, _205, _206), vec3(_1740, _1741, _1742));
    float _3847 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1740, _1741, _1742));
    float _3858 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1732 * _1732;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1766 = exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0);
    float _1773 = 1.0 - _1732;
    float _1783 = (0.5 / (((_1661 * ((_1746 * _1773) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1773) + _1732) * _1746))) * _1746;
    float _3869 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    float _1795 = (((((_1766 * _1683) + _377) * cbLight._m0[_1720].x) * _1785) * _1514) + ((((cbLight._m0[_1632].x * _1482) * ((_1682 * _1683) + _377)) * _1706) * _1528);
    float _1796 = (((((_1766 * _1685) + _379) * cbLight._m0[_1720].y) * _1785) * _1514) + ((((cbLight._m0[_1632].y * _1483) * ((_1682 * _1685) + _379)) * _1706) * _1528);
    float _1797 = (((((_1766 * _1686) + _380) * cbLight._m0[_1720].z) * _1785) * _1514) + ((((cbLight._m0[_1632].z * _1484) * ((_1682 * _1686) + _380)) * _1706) * _1528);
    float _1859;
    float _1861;
    float _1863;
    if (_1569)
    {
        _1859 = _1795;
        _1861 = _1796;
        _1863 = _1797;
    }
    else
    {
        uint _1865 = _1490 + 2u;
        uint _1869 = _1490 + 10u;
        float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _209) * 0.949999988079071044921875);
        float _1884 = _1883 * _1883;
        float _1885 = cbLight._m0[_1865].x + _288;
        float _1886 = cbLight._m0[_1865].y + _289;
        float _1887 = cbLight._m0[_1865].z + _290;
        float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
        float _1892 = _1891 * _1885;
        float _1893 = _1891 * _1886;
        float _1894 = _1891 * _1887;
        float _1895 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1865].xyz));
        float _3880 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1898 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1899 = dot(vec3(_204, _205, _206), vec3(_1892, _1893, _1894));
        float _3891 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1902 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1903 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_1892, _1893, _1894));
        float _3902 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1907 = _1884 * _1884;
        float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
        float _1918 = exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0);
        float _1925 = 1.0 - _1884;
        float _1935 = (0.5 / (((_1661 * ((_1898 * _1925) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1925) + _1884) * _1898))) * _1898;
        float _3913 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1937 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
        float _1938 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1859 = (((((_1918 * _1683) + _377) * cbLight._m0[_1869].x) * _1937) * _1938) + _1795;
        _1861 = (((((_1918 * _1685) + _379) * cbLight._m0[_1869].y) * _1937) * _1938) + _1796;
        _1863 = (((((_1918 * _1686) + _380) * cbLight._m0[_1869].z) * _1937) * _1938) + _1797;
    }
    float _1973;
    float _1975;
    float _1977;
    if (_1587)
    {
        _1973 = _1859;
        _1975 = _1861;
        _1977 = _1863;
    }
    else
    {
        uint _1984 = _1490 + 3u;
        uint _1988 = _1490 + 11u;
        float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _209) * 0.949999988079071044921875);
        float _2003 = _2002 * _2002;
        float _2004 = cbLight._m0[_1984].x + _288;
        float _2005 = cbLight._m0[_1984].y + _289;
        float _2006 = cbLight._m0[_1984].z + _290;
        float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
        float _2011 = _2010 * _2004;
        float _2012 = _2010 * _2005;
        float _2013 = _2010 * _2006;
        float _2014 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1984].xyz));
        float _3929 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2017 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _2018 = dot(vec3(_204, _205, _206), vec3(_2011, _2012, _2013));
        float _3940 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2022 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2011, _2012, _2013));
        float _3951 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2026 = _2003 * _2003;
        float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
        float _2037 = exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0);
        float _2044 = 1.0 - _2003;
        float _2054 = (0.5 / (((_1661 * ((_2017 * _2044) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _2044) + _2003) * _2017))) * _2017;
        float _3962 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2056 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
        float _2057 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1973 = (((((_2037 * _1683) + _377) * cbLight._m0[_1988].x) * _2056) * _2057) + _1859;
        _1975 = (((((_2037 * _1685) + _379) * cbLight._m0[_1988].y) * _2056) * _2057) + _1861;
        _1977 = (((((_2037 * _1686) + _380) * cbLight._m0[_1988].z) * _2056) * _2057) + _1863;
    }
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_1488.y == 0u)
    {
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2132;
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2132;
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2132;
        uvec4 _2147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2148 = _2147.x;
        uint _2159 = uint((float(_2147.y) * floor(float(uint(cbSceneParam._m0[85u].y * _312) / _2148))) + floor(float(uint(cbSceneParam._m0[85u].x * _311) / _2148)));
        float _2169 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2170 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        uint _2173 = uint(isnan(14.0) ? _2170 : (isnan(_2170) ? 14.0 : min(_2170, 14.0)));
        uvec4 _2178 = texelFetch(g_lightClusterGridBuffer, int(((_2173 << 2u) + (_2159 << 6u)) >> 2u));
        uint _2179 = _2178.x;
        uint _2180 = _2147.z;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        if (((((1u << ((_2180 >> 4u) & 15u)) + 4294967295u) & _2179) == 0u) || ((_2180 & 240u) == 0u))
        {
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
            _2292 = 0.0;
        }
        else
        {
            float _2283;
            float _2285;
            float _2287;
            float _2289;
            float _2291;
            float _2293;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            uint _2441 = 0u;
            uint _2450;
            bool _2451;
            for (;;)
            {
                _2450 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2441 << 2u)) >> 2u)).x;
                _2451 = _2450 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2451)
                {
                    frontier_phi_66_pred = _2435;
                    frontier_phi_66_pred_1 = _2440;
                    frontier_phi_66_pred_2 = _2439;
                    frontier_phi_66_pred_3 = _2438;
                    frontier_phi_66_pred_4 = _2437;
                    frontier_phi_66_pred_5 = _2436;
                }
                else
                {
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    uint _2586;
                    _2580 = _2435;
                    _2581 = _2436;
                    _2582 = _2437;
                    _2583 = _2438;
                    _2584 = _2439;
                    _2585 = _2440;
                    _2586 = _2450;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    for (;;)
                    {
                        uint _2590 = uint(findLSB(_2586)) + (_2441 << 5u);
                        uint _2587 = (_2586 + 4294967295u) & _2586;
                        uint _2592 = _2590 * 48u;
                        vec4 _2606 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2592)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 3u)).x));
                        uint _2612 = (_2590 * 48u) + 4u;
                        vec4 _2625 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2612)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 3u)).x));
                        uint _2631 = (_2590 * 48u) + 8u;
                        vec3 _2642 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x));
                        float _2646 = _2606.x - _2133;
                        float _2647 = _2606.y - _2134;
                        float _2648 = _2606.z - _2135;
                        float _2649 = dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648));
                        float _2652 = inversesqrt(_2649);
                        float _2653 = _2652 * _2646;
                        float _2654 = _2652 * _2647;
                        float _2655 = _2652 * _2648;
                        float _2656 = dot(vec3(_332, _335, _338), vec3(_2653, _2654, _2655));
                        float _2661 = 1.0 - (_2649 * _2606.w);
                        float _3988 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                        float _2662 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2663 = sqrt(_2649) * _2625.w;
                        float _2666 = 1.39999997615814208984375 / (_2663 + 1.39999997615814208984375);
                        float _2667 = _2666 * _2666;
                        float _2670 = ((1.0 - _2667) * _2656) + _2667;
                        float _2673 = _2663 * _2663;
                        float _2677 = ((isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0))) * _2662) / ((_2673 * 0.699999988079071044921875) + 1.0);
                        float _2681 = (-0.0) - _2133;
                        float _2682 = (-0.0) - _2134;
                        float _2683 = (-0.0) - _2135;
                        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
                        float _2688 = _2687 * _2681;
                        float _2689 = _2687 * _2682;
                        float _2690 = _2687 * _2683;
                        float _2698 = exp2(log2(1.0 / ((_2673 * 3.5) + 5.0)) * 0.25);
                        float _2699 = 1.0 - _409;
                        float _2706 = sqrt(1.0 - ((1.0 - (_2699 * _2699)) * (1.0 - (_2698 * _2698))));
                        float _2707 = _2706 * _2706;
                        float _2708 = _2707 * _2707;
                        float _2709 = _2688 + _2653;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
                        float _2719 = dot(vec3(_332, _335, _338), vec3(_2688, _2689, _2690));
                        float _4004 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2722 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2723 = dot(vec3(_332, _335, _338), vec3(_2715 * _2709, _2715 * _2710, _2715 * _2711));
                        float _4015 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2730 = ((_2726 * _2726) * (_2708 + (-1.0))) + 1.0;
                        float _2731 = _2666 * _2707;
                        float _2732 = _2731 * _2731;
                        float _2735 = ((1.0 - _2732) * _2656) + _2732;
                        float _4026 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2736 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2737 = 1.0 - _2707;
                        float _2747 = (0.5 / (((_2736 * ((_2722 * _2737) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2736 * _2737) + _2707) * _2722))) * _2736;
                        float _4037 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2758 = (((_2708 * 3.1415927410125732421875) * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) / ((_2730 * _2730) * ((_2673 * 2.1991131305694580078125) + 3.141590118408203125))) * _2662;
                        _2510 = (_2677 * _2625.x) + _2583;
                        _2511 = (_2677 * _2625.y) + _2584;
                        _2512 = (_2677 * _2625.z) + _2585;
                        _2507 = (_2758 * _2642.x) + _2580;
                        _2508 = (_2758 * _2642.y) + _2581;
                        _2509 = (_2758 * _2642.z) + _2582;
                        if (_2587 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2580 = _2507;
                            _2581 = _2508;
                            _2582 = _2509;
                            _2583 = _2510;
                            _2584 = _2511;
                            _2585 = _2512;
                            _2586 = _2587;
                        }
                    }
                    frontier_phi_66_pred = _2507;
                    frontier_phi_66_pred_1 = _2512;
                    frontier_phi_66_pred_2 = _2511;
                    frontier_phi_66_pred_3 = _2510;
                    frontier_phi_66_pred_4 = _2509;
                    frontier_phi_66_pred_5 = _2508;
                }
                _2283 = frontier_phi_66_pred;
                _2293 = frontier_phi_66_pred_1;
                _2291 = frontier_phi_66_pred_2;
                _2289 = frontier_phi_66_pred_3;
                _2287 = frontier_phi_66_pred_4;
                _2285 = frontier_phi_66_pred_5;
                uint _2442 = _2441 + 1u;
                if (_2442 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2435 = _2283;
                    _2436 = _2285;
                    _2437 = _2287;
                    _2438 = _2289;
                    _2439 = _2291;
                    _2440 = _2293;
                    _2441 = _2442;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
            _2292 = _2293;
        }
        uvec4 _2296 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2297 = _2296.z;
        uint _2299 = (_2297 >> 8u) & 15u;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        if (((4294967295u << _2299) & _2179) == 0u)
        {
            _2403 = _2282;
            _2405 = _2284;
            _2407 = _2286;
            _2409 = _2288;
            _2411 = _2290;
            _2413 = _2292;
        }
        else
        {
            float _2428 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _2429 = _2428 * _2133;
            float _2430 = _2428 * _2134;
            float _2431 = _2428 * _2135;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2299 < ((_2297 >> 12u) & 15u))
            {
                float _2404;
                float _2406;
                float _2408;
                float _2410;
                float _2412;
                float _2414;
                float _2563 = _2282;
                float _2564 = _2284;
                float _2565 = _2286;
                float _2566 = _2288;
                float _2567 = _2290;
                float _2568 = _2292;
                uint _2569 = _2299;
                uint _2578;
                bool _2579;
                for (;;)
                {
                    _2578 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2569 << 2u)) >> 2u)).x;
                    _2579 = _2578 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2579)
                    {
                        frontier_phi_77_pred = _2568;
                        frontier_phi_77_pred_1 = _2567;
                        frontier_phi_77_pred_2 = _2566;
                        frontier_phi_77_pred_3 = _2565;
                        frontier_phi_77_pred_4 = _2564;
                        frontier_phi_77_pred_5 = _2563;
                    }
                    else
                    {
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _2785 = _2563;
                        float _2786 = _2564;
                        float _2787 = _2565;
                        float _2788 = _2566;
                        float _2789 = _2567;
                        float _2790 = _2568;
                        uint _2791 = _2578;
                        uint _2792;
                        vec4 _2817;
                        float _2818;
                        vec4 _2833;
                        vec3 _2845;
                        vec4 _2861;
                        vec4 _2877;
                        float _2924;
                        bool _2925;
                        for (;;)
                        {
                            uint _2802 = ((_2569 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2791));
                            _2792 = (_2791 + 4294967295u) & _2791;
                            uint _2804 = _2802 * 40u;
                            _2817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 3u)).x));
                            _2818 = _2817.w;
                            uint _2820 = (_2802 * 40u) + 4u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            uint _2835 = (_2802 * 40u) + 8u;
                            _2845 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x));
                            uint _2848 = (_2802 * 40u) + 16u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2864 = (_2802 * 40u) + 20u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2880 = (_2802 * 40u) + 24u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2899 = (_2802 * 40u) + 28u;
                            vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            _2924 = fma(_2135, _2912.z, fma(_2134, _2912.y, _2912.x * _2133)) + _2912.w;
                            _2925 = !((fma(_2135, _2893.z, fma(_2134, _2893.y, _2893.x * _2133)) + _2893.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2925)
                            {
                                float _2952 = _2817.x - _2133;
                                float _2953 = _2817.y - _2134;
                                float _2954 = _2817.z - _2135;
                                float _2955 = dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954));
                                float _2958 = inversesqrt(_2955);
                                float _2959 = _2958 * _2952;
                                float _2960 = _2958 * _2953;
                                float _2961 = _2958 * _2954;
                                float _2965 = 1.0 - (_2955 / (_2818 * _2818));
                                float _4048 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2966 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _2970 = sqrt(_2955) * _2833.w;
                                float _2972 = 1.39999997615814208984375 / (_2970 + 1.39999997615814208984375);
                                float _2973 = _2972 * _2972;
                                float _2976 = ((1.0 - _2973) * dot(vec3(_2959, _2960, _2961), vec3(_332, _335, _338))) + _2973;
                                float _2979 = _2970 * _2970;
                                float _2983 = (fma(_2135, _2861.z, fma(_2134, _2861.y, _2861.x * _2133)) + _2861.w) / _2924;
                                float _2984 = (fma(_2135, _2877.z, fma(_2134, _2877.y, _2877.x * _2133)) + _2877.w) / _2924;
                                float _2988 = 1.0 - dot(vec2(_2983, _2984), vec2(_2983, _2984));
                                float _4064 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _2990 = _2989 * (((isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))) * _2966) / ((_2979 * 0.699999988079071044921875) + 1.0));
                                float _3002 = exp2(log2(1.0 / ((_2979 * 3.5) + 5.0)) * 0.25);
                                float _3003 = 1.0 - _409;
                                float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                                float _3011 = _3010 * _3010;
                                float _3012 = _3011 * _3011;
                                float _3013 = _2959 - _2429;
                                float _3014 = _2960 - _2430;
                                float _3015 = _2961 - _2431;
                                float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                                float _3023 = dot(vec3(_332, _335, _338), vec3((-0.0) - _2429, (-0.0) - _2430, (-0.0) - _2431));
                                float _4075 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3026 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3027 = dot(vec3(_332, _335, _338), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                                float _4086 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                                float _3035 = _2972 * _3011;
                                float _3036 = _3035 * _3035;
                                float _3042 = ((1.0 - _3036) * dot(vec3(_332, _335, _338), vec3(_2959, _2960, _2961))) + _3036;
                                float _4097 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3044 = 1.0 - _3011;
                                float _3054 = (0.5 / (((_3043 * ((_3026 * _3044) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3043 * _3044) + _3011) * _3026))) * _3043;
                                float _4108 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3064 = (_2989 * _2966) * (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) / ((_3034 * _3034) * ((_2979 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2990 * _2833.y;
                                frontier_phi_83_pred_1 = _2990 * _2833.x;
                                frontier_phi_83_pred_2 = _3064 * _2845.z;
                                frontier_phi_83_pred_3 = _3064 * _2845.y;
                                frontier_phi_83_pred_4 = _3064 * _2845.x;
                                frontier_phi_83_pred_5 = _2990 * _2833.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3072 = frontier_phi_83_pred;
                            _3071 = frontier_phi_83_pred_1;
                            _3070 = frontier_phi_83_pred_2;
                            _3069 = frontier_phi_83_pred_3;
                            _3068 = frontier_phi_83_pred_4;
                            _3073 = frontier_phi_83_pred_5;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            if (_2792 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2792;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2777;
                        frontier_phi_77_pred_1 = _2776;
                        frontier_phi_77_pred_2 = _2775;
                        frontier_phi_77_pred_3 = _2774;
                        frontier_phi_77_pred_4 = _2773;
                        frontier_phi_77_pred_5 = _2772;
                    }
                    _2414 = frontier_phi_77_pred;
                    _2412 = frontier_phi_77_pred_1;
                    _2410 = frontier_phi_77_pred_2;
                    _2408 = frontier_phi_77_pred_3;
                    _2406 = frontier_phi_77_pred_4;
                    _2404 = frontier_phi_77_pred_5;
                    uint _2570 = _2569 + 1u;
                    if (_2570 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2563 = _2404;
                        _2564 = _2406;
                        _2565 = _2408;
                        _2566 = _2410;
                        _2567 = _2412;
                        _2568 = _2414;
                        _2569 = _2570;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2408;
                frontier_phi_58_59_ladder_1 = _2414;
                frontier_phi_58_59_ladder_2 = _2412;
                frontier_phi_58_59_ladder_3 = _2410;
                frontier_phi_58_59_ladder_4 = _2406;
                frontier_phi_58_59_ladder_5 = _2404;
            }
            else
            {
                frontier_phi_58_59_ladder = _2286;
                frontier_phi_58_59_ladder_1 = _2292;
                frontier_phi_58_59_ladder_2 = _2290;
                frontier_phi_58_59_ladder_3 = _2288;
                frontier_phi_58_59_ladder_4 = _2284;
                frontier_phi_58_59_ladder_5 = _2282;
            }
            _2403 = frontier_phi_58_59_ladder_5;
            _2405 = frontier_phi_58_59_ladder_4;
            _2407 = frontier_phi_58_59_ladder;
            _2409 = frontier_phi_58_59_ladder_3;
            _2411 = frontier_phi_58_59_ladder_2;
            _2413 = frontier_phi_58_59_ladder_1;
        }
        float _2418 = isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0));
        _2192 = (_2418 * _2409) + _1625;
        _2194 = (_2418 * _2411) + _1627;
        _2196 = (_2418 * _2413) + _1629;
        _2198 = ((_2403 * _377) * _2418) + _1973;
        _2200 = ((_2405 * _379) * _2418) + _1975;
        _2202 = ((_2407 * _380) * _2418) + _1977;
    }
    else
    {
        _2192 = _1625;
        _2194 = _1627;
        _2196 = _1629;
        _2198 = _1973;
        _2200 = _1975;
        _2202 = _1977;
    }
    float _4124 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _4135 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _4146 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _4157 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _2220 = ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2192 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _392))) + ((_2198 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _2221 = ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2194 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _392))) + ((_2200 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _2222 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2196 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _392))) + ((_2202 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _2227 = cbInstanceData._m0[_351 + 6u].w * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)));
    float _2232 = _311 / cbSceneParam._m0[86u].x;
    float _2233 = _312 / cbSceneParam._m0[86u].y;
    vec4 _2247 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2232, _2233, (log2((isnan(cbSceneParam._m0[77u].w) ? _229 : (isnan(_229) ? cbSceneParam._m0[77u].w : min(_229, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2249 = _2247.x;
    float _2250 = _2247.y;
    float _2251 = _2247.z;
    float _2252 = _2247.w;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    if (_229 > cbSceneParam._m0[78u].w)
    {
        float _2307 = isnan(_229) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _229 : min(cbSceneParam._m0[80u].w, _229));
        float _2308 = _2307 / _229;
        float _2319 = _2308 * _281;
        float _2320 = _282 * _2308;
        float _2321 = (-0.0) - _2320;
        float _2323 = _2308 * _283;
        float _2325 = (cbSceneParam._m0[77u].w * _2321) / _2307;
        float _2326 = _2325 + cbSceneParam._m0[79u].w;
        float _2327 = cbSceneParam._m0[79u].w - _2320;
        float _2333 = sqrt(((_2319 * _2319) + (_2320 * _2320)) + (_2323 * _2323));
        float _2336 = (1.0 - (cbSceneParam._m0[77u].w / _2307)) * _2333;
        float _2341 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2343 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2520;
        if (abs((_2321 - _2325) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2520 = ((((_2326 > 0.0) ? exp2(_2341 * _2326) : (2.0 - exp2(_2343 * _2326))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2336;
        }
        else
        {
            float _2464 = 1.0 / cbSceneParam._m0[80u].x;
            float _2465 = isnan(_2327) ? _2326 : (isnan(_2326) ? _2327 : max(_2326, _2327));
            float _2466 = isnan(_2327) ? _2326 : (isnan(_2326) ? _2327 : min(_2326, _2327));
            float _2475 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : min(_2465, 0.0));
            float _2476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : min(_2466, 0.0));
            _2520 = ((abs(_2333 / _2321) * cbSceneParam._m0[80u].y) * ((((_2475 - _2476) * 2.0) - ((exp2(_2341 * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0)))) - exp2(_2341 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0))))) * _2464)) - ((exp2(_2343 * _2475) - exp2(_2343 * _2476)) * _2464))) + (_2336 * cbSceneParam._m0[80u].z);
        }
        vec4 _2522 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2232, _2233, 1.0), 0.0);
        float _2531 = exp2((_2520 * (-1.44269502162933349609375)) * (1.0 - _2522.w));
        float _2532 = log2(_2531);
        float _2548 = log2(_2252);
        _2345 = (exp2(_2548 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].x)) * _2522.x) / cbSceneParam._m0[78u].x)) + _2249;
        _2347 = (exp2(_2548 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].y)) * _2522.y) / cbSceneParam._m0[78u].y)) + _2250;
        _2349 = (exp2(_2548 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].z)) * _2522.z) / cbSceneParam._m0[78u].z)) + _2251;
        _2351 = _2531 * _2252;
    }
    else
    {
        _2345 = _2249;
        _2347 = _2250;
        _2349 = _2251;
        _2351 = _2252;
    }
    bool _2558;
    vec4 _2361;
    vec4 _2383;
    float _2385;
    float _2389;
    float _2390;
    float _2391;
    float _2392;
    bool _2402;
    for (;;)
    {
        _2361 = cbMatDynParam._m0[0u];
        float _2363 = roundEven(_2361.y);
        bool _2364 = _2363 == 3.0;
        float _2365 = log2(_2351);
        float _2372 = exp2(_2365 * cbSceneParam._m0[78u].x) * _2220;
        float _2373 = exp2(_2365 * cbSceneParam._m0[78u].y) * _2221;
        float _2374 = exp2(_2365 * cbSceneParam._m0[78u].z) * _2222;
        float _2381 = _299 + (-0.5);
        _2383 = cbMtdParam._m0[1u];
        _2385 = _2383.y * _2381;
        float _2388 = (_2363 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2389 = _2388 * (_2364 ? _2372 : (_2372 + (cbSceneParam._m0[72u].w * _2345)));
        _2390 = _2388 * (_2364 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2347)));
        _2391 = _2388 * (_2364 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2349)));
        _2392 = _2381 * 0.999000012874603271484375;
        _2402 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2402)
        {
            if ((cbInstanceData._m0[_351 + 7u].x + _2392) < 0.5)
            {
                _2558 = true;
                break;
            }
        }
        uint _2499 = _353 + uint(_2361.w);
        if ((cbInstanceData._m0[_2499].w < 1.0) && ((cbInstanceData._m0[_2499].w + _2392) < 0.5))
        {
            _2558 = true;
            break;
        }
        if ((_2385 + _195) < _2383.x)
        {
            _2558 = true;
            break;
        }
        _2558 = false;
        break;
    }
    float _2763;
    if (_2558)
    {
        discard_state = true;
        _2763 = 0.0;
    }
    else
    {
        _2763 = _2227;
    }
    SV_Target.x = _2389;
    SV_Target.y = _2390;
    SV_Target.z = _2391;
    SV_Target.w = _2763;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2227;
    discard_exit();
}


