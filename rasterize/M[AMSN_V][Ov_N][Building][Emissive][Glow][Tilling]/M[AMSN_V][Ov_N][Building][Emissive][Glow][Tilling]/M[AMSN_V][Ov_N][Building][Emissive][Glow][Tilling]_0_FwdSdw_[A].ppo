#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1200;
float _3876;
float _3877;
float _3878;
float _3879;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _226 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _227 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _228 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _232 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _233 = _232 * _226;
    float _234 = _232 * _227;
    float _235 = _232 * _228;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _253 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _254 = _253 * TANGENT_2.x;
    float _255 = _253 * TANGENT_2.y;
    float _256 = _253 * TANGENT_2.z;
    float _261;
    float _262;
    float _263;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _261 = (-0.0) - _240;
        _262 = (-0.0) - _241;
        _263 = (-0.0) - _242;
    }
    else
    {
        _261 = _240;
        _262 = _241;
        _263 = _242;
    }
    float _286 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _298 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _286) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3888 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _301 = 1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)));
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    float _311 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _286) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3909 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = 1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)));
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _333 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _335 = _333.x;
    float _336 = _333.y;
    float _337 = _333.z;
    float _338 = cbMtdParam._m0[11u].x * _315;
    float _340 = cbMtdParam._m0[11u].y * _315;
    float _342 = cbMtdParam._m0[11u].z * _315;
    float _362 = _313 + _301;
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _364 = isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0));
    vec4 _382 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _387 = _382.w;
    float _388 = _382.x * cbMtdParam._m0[10u].x;
    float _389 = _382.y * cbMtdParam._m0[10u].y;
    float _390 = _382.z * cbMtdParam._m0[10u].z;
    float _405 = (_388 - (_364 * _388)) + ((((((_335 * (cbMtdParam._m0[9u].x - _338)) * _303) + (_338 * _335)) * 4.55000019073486328125) * _364) * _388);
    float _407 = (((((((_336 * (cbMtdParam._m0[9u].y - _340)) * _303) + (_340 * _336)) * 4.55000019073486328125) * _364) * _389) + _389) - (_364 * _389);
    float _409 = (((((((_337 * (cbMtdParam._m0[9u].z - _342)) * _303) + (_342 * _337)) * 4.55000019073486328125) * _364) * _390) + _390) - (_364 * _390);
    vec4 _426 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _430 = _426.z;
    float _434 = (_426.x * 2.0) + (-1.0);
    float _436 = (_426.y * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3940 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))));
    float _445 = fma(_442, _261, fma(_436, _254, _434 * _233));
    float _448 = fma(_442, _262, fma(_436, _255, _434 * _234));
    float _451 = fma(_442, _263, fma(_436, _256, _434 * _235));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    float _456 = _455 * _445;
    float _457 = _455 * _448;
    float _458 = _455 * _451;
    vec4 _470 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _476 = (_470.x * 2.0) + (-1.0);
    float _477 = (_470.y * 2.0) + (-1.0);
    float _478 = dot(vec2(_476, _477), vec2(_476, _477));
    float _3951 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))));
    float _486 = fma(_483, _261, fma(_477, _254, _476 * _233));
    float _489 = fma(_483, _262, fma(_477, _255, _476 * _234));
    float _492 = fma(_483, _263, fma(_477, _256, _476 * _235));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    float _497 = _496 * _486;
    float _498 = _496 * _489;
    float _499 = _496 * _492;
    float _502 = fma(_499, _216, fma(_498, _215, _497 * _214));
    float _505 = fma(_499, _249, fma(_498, _248, _497 * _247));
    float _508 = fma(_499, _263, fma(_498, _262, _497 * _261));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _516 = fma(_458, _216, fma(_457, _215, _456 * _214));
    float _519 = fma(_458, _249, fma(_457, _248, _456 * _247));
    float _522 = fma(_458, _263, fma(_457, _262, _456 * _261));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    float _529 = _526 * _522;
    vec4 _542 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _548 = (_542.x * 2.0) + (-1.0);
    float _549 = (_542.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3962 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    float _558 = fma(_555, _261, fma(_549, _254, _548 * _233));
    float _561 = fma(_555, _262, fma(_549, _255, _548 * _234));
    float _564 = fma(_555, _263, fma(_549, _256, _548 * _235));
    float _568 = inversesqrt(dot(vec3(_558, _561, _564), vec3(_558, _561, _564)));
    float _569 = _568 * _558;
    float _570 = _568 * _561;
    float _571 = _568 * _564;
    float _574 = fma(_571, _216, fma(_570, _215, _569 * _214));
    float _577 = fma(_571, _249, fma(_570, _248, _569 * _247));
    float _580 = fma(_571, _263, fma(_570, _262, _569 * _261));
    float _584 = inversesqrt(dot(vec3(_574, _577, _580), vec3(_574, _577, _580)));
    float _599 = ((_526 * _516) + (((_502 * _303) * _512) * cbMtdParam._m0[14u].z)) + (((_574 * _315) * _584) * cbMtdParam._m0[14u].y);
    float _601 = ((_526 * _519) + (((_505 * _303) * _512) * cbMtdParam._m0[14u].z)) + (((_577 * _315) * _584) * cbMtdParam._m0[14u].y);
    float _604 = fma(_529, _261, fma(_601, _247, _599 * _214));
    float _607 = fma(_529, _262, fma(_601, _248, _599 * _215));
    float _610 = fma(_529, _263, fma(_601, _249, _599 * _216));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _3973 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _618 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _619 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _4006 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _4017 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _4028 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _623 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _690 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _680);
    float _691 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _680);
    float _692 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _680);
    float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
    float _697 = _690 * _696;
    float _698 = _691 * _696;
    float _699 = _692 * _696;
    vec4 _704 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _706 = _704.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _879 = sqrt(((_690 * _690) + (_691 * _691)) + (_692 * _692));
        float _885 = (cbMatDynParam._m0[5u].x * _879) + cbMatDynParam._m0[5u].y;
        float _4039 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _890 = (cbMatDynParam._m0[5u].z * _879) + cbMatDynParam._m0[5u].w;
        float _4050 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) - _886)) + _886) < ((_706 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_617, cbSceneParam._m0[5u].z, fma(_616, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _615));
    float _740 = fma(_617, cbSceneParam._m0[6u].z, fma(_616, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _615));
    float _743 = fma(_617, cbSceneParam._m0[7u].z, fma(_616, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _615));
    uint _756 = uint(roundEven(NORMAL.w)) * 13u;
    uint _757 = _756 + 9u;
    uint _758 = _757 + uint(cbMatDynParam._m0[0u].w);
    float _764 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_758].x;
    float _765 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_758].y;
    float _766 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_758].z;
    float _4061 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _770 = 1.0 - _623;
    float _771 = _767 * _770;
    float _772 = _768 * _770;
    float _773 = _769 * _770;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _623;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _623;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _623;
    float _781 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _796 = _793.x * TEXCOORD_7.w;
    float _797 = dot(vec3(_615, _616, _617), vec3(_697, _698, _699));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _615) - _697;
    float _805 = (_800 * _616) - _698;
    float _806 = (_800 * _617) - _699;
    float _810 = abs(dot(vec3(_697, _698, _699), vec3(_615, _616, _617)));
    float _4094 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_619);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _831 = (1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _832 = _825 * _812;
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1199;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _924 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _928 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _932 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _957 = _860 + _615;
        float _958 = _864 + _616;
        float _959 = _868 + _617;
        float _969 = fma(_959, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957)) - _924;
        float _970 = fma(_959, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957)) - _928;
        float _971 = fma(_959, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957)) - _932;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_924 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_928 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[34u].z) + ((((((_932 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1027 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_993.x + (-0.5));
        float _1029 = _1027 * (_993.y + (-0.5));
        float _1030 = _1027 * (_993.z + (-0.5));
        float _1037 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1000.x + (-0.5));
        float _1039 = _1037 * (_1000.y + (-0.5));
        float _1040 = _1037 * (_1000.z + (-0.5));
        float _1047 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1007.x + (-0.5));
        float _1049 = _1047 * (_1007.y + (-0.5));
        float _1050 = _1047 * (_1007.z + (-0.5));
        float _1057 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1014.x + (-0.5));
        float _1059 = _1057 * (_1014.y + (-0.5));
        float _1060 = _1057 * (_1014.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1081 = (dot(vec3(_615, _616, _617), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1091 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _4142 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1093 + 1.0))) + _1098) * _1061;
        float _1108 = _1029 * 0.5;
        float _1109 = _1039 * 0.5;
        float _1110 = _1049 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_615, _616, _617), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _4175 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1135 + 1.0))) + _1140) * _1062;
        float _1150 = _1030 * 0.5;
        float _1151 = _1040 * 0.5;
        float _1152 = _1050 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_615, _616, _617), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4208 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1177 + 1.0))) + _1182) * _1063;
        _1199 = _1030;
        _1201 = _1029;
        _1202 = _1028;
        _1203 = _1040;
        _1204 = _1039;
        _1205 = _1038;
        _1206 = _1050;
        _1207 = _1049;
        _1208 = _1048;
        _1209 = _1063;
        _1210 = _1062;
        _1211 = _1061;
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _1200;
        _1201 = _1200;
        _1202 = _1200;
        _1203 = _1200;
        _1204 = _1200;
        _1205 = _1200;
        _1206 = _1200;
        _1207 = _1200;
        _1208 = _1200;
        _1209 = _1200;
        _1210 = _1200;
        _1211 = _1200;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1243 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1247 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1251 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1274 = _860 + _615;
        float _1275 = _864 + _616;
        float _1276 = _868 + _617;
        float _1286 = fma(_1276, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274)) - _1243;
        float _1287 = fma(_1276, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274)) - _1247;
        float _1288 = fma(_1276, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274)) - _1251;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1243 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1247 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[35u].z) + ((((((_1251 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1342 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1309.x + (-0.5));
        float _1344 = _1342 * (_1309.y + (-0.5));
        float _1345 = _1342 * (_1309.z + (-0.5));
        float _1352 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1316.x + (-0.5));
        float _1354 = _1352 * (_1316.y + (-0.5));
        float _1355 = _1352 * (_1316.z + (-0.5));
        float _1362 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1323.x + (-0.5));
        float _1364 = _1362 * (_1323.y + (-0.5));
        float _1365 = _1362 * (_1323.z + (-0.5));
        float _1372 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1330.x + (-0.5));
        float _1374 = _1372 * (_1330.y + (-0.5));
        float _1375 = _1372 * (_1330.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_615, _616, _617), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4271 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1406 + 1.0))) + _1411) * _1376;
        float _1421 = _1344 * 0.5;
        float _1422 = _1354 * 0.5;
        float _1423 = _1364 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_615, _616, _617), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4304 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1448 + 1.0))) + _1453) * _1377;
        float _1463 = _1345 * 0.5;
        float _1464 = _1355 * 0.5;
        float _1465 = _1365 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_615, _616, _617), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4337 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1490 + 1.0))) + _1495) * _1378;
        _1512 = _1345;
        _1513 = _1344;
        _1514 = _1343;
        _1515 = _1355;
        _1516 = _1354;
        _1517 = _1353;
        _1518 = _1365;
        _1519 = _1364;
        _1520 = _1363;
        _1521 = _1378;
        _1522 = _1377;
        _1523 = _1376;
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
    }
    else
    {
        _1512 = _1200;
        _1513 = _1200;
        _1514 = _1200;
        _1515 = _1200;
        _1516 = _1200;
        _1517 = _1200;
        _1518 = _1200;
        _1519 = _1200;
        _1520 = _1200;
        _1521 = _1200;
        _1522 = _1200;
        _1523 = _1200;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1212)) + _1212;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1213)) + _1213;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1214)) + _1214;
    float _1559 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1536));
    float _1580 = _804 * 0.5;
    float _1581 = _805 * 0.5;
    float _1582 = _806 * 0.5;
    float _1583 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1586 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1589 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1623;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1596 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1199, _1203, _1206, _1209));
        float _1600 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1604 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1611 = dot(vec4(cbModelParam._m0[39u]), vec4(_1580, _1581, _1582, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1634;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1625 = dot(vec4(cbModelParam._m0[40u]), vec4(_1580, _1581, _1582, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1638 = (_1634 * cbModelParam._m0[1u].x) + (_1623 * (1.0 - cbModelParam._m0[1u].x));
    float _1648 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1648 : min(cbModelParam._m0[25u].z, _1648));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1696 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1700 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1704 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1707 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1710 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1713 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1741;
        if (_1707 > 0.0)
        {
            _1741 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1741 = frontier_phi_19_17_ladder;
        }
        float _1917;
        if (_1710 > 0.0)
        {
            _1917 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1917 = frontier_phi_28_24_ladder;
        }
        float _2212;
        if (_1713 > 0.0)
        {
            _2212 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2212 = frontier_phi_40_35_ladder;
        }
        float _2214 = isnan(_1917) ? _1741 : (isnan(_1741) ? _1917 : min(_1741, _1917));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1707) + _1696;
        float _2220 = (_2215 * _1710) + _1700;
        float _2221 = (_2215 * _1713) + _1704;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2222;
        float _2226 = _2222 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 > _2226) || ((_2220 < _2224) || ((_2219 < _2224) || (_2219 > _2226))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2221, cbModelParam._m0[9u].z, fma(_2220, cbModelParam._m0[9u].y, _2219 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2221, cbModelParam._m0[10u].z, fma(_2220, cbModelParam._m0[10u].y, _2219 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2221, cbModelParam._m0[11u].z, fma(_2220, cbModelParam._m0[11u].y, _2219 * cbModelParam._m0[11u].x))), _1649);
            frontier_phi_18_40_ladder = _2366.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2366.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2366.x * cbModelParam._m0[1u].y;
        }
        _1729 = frontier_phi_18_40_ladder_2;
        _1731 = frontier_phi_18_40_ladder_1;
        _1733 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1649);
        _1729 = _1717.x * cbModelParam._m0[1u].y;
        _1731 = _1717.y * cbModelParam._m0[1u].y;
        _1733 = _1717.z * cbModelParam._m0[1u].y;
    }
    float _1737 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1737 : min(cbModelParam._m0[25u].w, _1737));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1809 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1812 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1922;
        if (_1806 > 0.0)
        {
            _1922 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1922 = frontier_phi_30_26_ladder;
        }
        float _2239;
        if (_1809 > 0.0)
        {
            _2239 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2239 = frontier_phi_42_37_ladder;
        }
        float _2577;
        if (_1812 > 0.0)
        {
            _2577 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2577 = frontier_phi_52_49_ladder;
        }
        float _2579 = isnan(_2239) ? _1922 : (isnan(_1922) ? _2239 : min(_1922, _2239));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _1806) + _1795;
        float _2585 = (_2580 * _1809) + _1799;
        float _2586 = (_2580 * _1812) + _1803;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2587;
        float _2590 = _2587 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2586 > _2590) || ((_2586 < _2588) || ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 < _2588) || (_2584 > _2590))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2586, cbModelParam._m0[17u].z, fma(_2585, cbModelParam._m0[17u].y, _2584 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2586, cbModelParam._m0[18u].z, fma(_2585, cbModelParam._m0[18u].y, _2584 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2586, cbModelParam._m0[19u].z, fma(_2585, cbModelParam._m0[19u].y, _2584 * cbModelParam._m0[19u].x))), _1738);
            frontier_phi_27_52_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_27_52_ladder_2;
        _1833 = frontier_phi_27_52_ladder_1;
        _1835 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1738);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1848 = (((_831 * _781) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1831 - _1729)) + _1729);
    float _1850 = (((_831 * _783) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1833 - _1731)) + _1731);
    float _1852 = (((_831 * _784) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1835 - _1733)) + _1733);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1909 = _1896 / _1908;
    float _1910 = _1900 / _1908;
    float _1911 = _1904 / _1908;
    float _2058;
    float _2059;
    float _2060;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1938 = ((uint(_1911 > cbSceneParam._m0[59u].y) + uint(_1911 > cbSceneParam._m0[59u].x)) + uint(_1911 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1939 = _1938 + 43u;
        uint _1947 = _1938 + 44u;
        uint _1955 = _1938 + 45u;
        uint _1963 = _1938 + 46u;
        float _1974 = fma(_1908, cbSceneParam._m0[_1939].w, fma(_1904, cbSceneParam._m0[_1939].z, fma(_1900, cbSceneParam._m0[_1939].y, _1896 * cbSceneParam._m0[_1939].x)));
        float _1978 = fma(_1908, cbSceneParam._m0[_1947].w, fma(_1904, cbSceneParam._m0[_1947].z, fma(_1900, cbSceneParam._m0[_1947].y, _1896 * cbSceneParam._m0[_1947].x)));
        float _1986 = fma(_1908, cbSceneParam._m0[_1963].w, fma(_1904, cbSceneParam._m0[_1963].z, fma(_1900, cbSceneParam._m0[_1963].y, _1896 * cbSceneParam._m0[_1963].x)));
        float _1991 = cbSceneParam._m0[33u].z * _1986;
        float _1993 = cbSceneParam._m0[33u].w * _1986;
        float _1996 = fma(_1908, cbSceneParam._m0[_1955].w, fma(_1904, cbSceneParam._m0[_1955].z, fma(_1900, cbSceneParam._m0[_1955].y, _1896 * cbSceneParam._m0[_1955].x))) / _1986;
        float _2044 = (cbSceneParam._m0[33u].x - sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911))) * cbSceneParam._m0[33u].y;
        float _4463 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2051 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 + _1974) / _1986, (_1993 + _1978) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 + _1974) / _1986, (_1978 - _1991) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 - _1991) / _1986, (_1978 - _1993) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 - _1993) / _1986, (_1991 + _1978) / _1986), _1996), 0.0)).x), vec4(0.25)));
        _2058 = 1.0 - (_2051 * cbSceneParam._m0[34u].x);
        _2059 = 1.0 - (_2051 * cbSceneParam._m0[34u].y);
        _2060 = 1.0 - (_2051 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2058 = 1.0;
        _2059 = 1.0;
        _2060 = 1.0;
    }
    float _2124;
    float _2126;
    float _2128;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2112 = fma(_1908, cbSceneParam._m0[63u].w, fma(_1904, cbSceneParam._m0[63u].z, fma(_1900, cbSceneParam._m0[63u].y, _1896 * cbSceneParam._m0[63u].x)));
        float _2113 = fma(_1908, cbSceneParam._m0[60u].w, fma(_1904, cbSceneParam._m0[60u].z, fma(_1900, cbSceneParam._m0[60u].y, _1896 * cbSceneParam._m0[60u].x))) / _2112;
        float _2114 = fma(_1908, cbSceneParam._m0[61u].w, fma(_1904, cbSceneParam._m0[61u].z, fma(_1900, cbSceneParam._m0[61u].y, _1896 * cbSceneParam._m0[61u].x))) / _2112;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2113 >= cbSceneParam._m0[64u].x) && (_2114 >= cbSceneParam._m0[64u].y)) && (_2113 <= cbSceneParam._m0[64u].z)) && (_2114 <= cbSceneParam._m0[64u].w))
        {
            float _2252 = fma(_1908, cbSceneParam._m0[62u].w, fma(_1904, cbSceneParam._m0[62u].z, fma(_1900, cbSceneParam._m0[62u].y, _1896 * cbSceneParam._m0[62u].x))) / _2112;
            float _2256 = isnan(cbSceneParam._m0[41u].w) ? _2252 : (isnan(_2252) ? cbSceneParam._m0[41u].w : max(_2252, cbSceneParam._m0[41u].w));
            float _2299 = (cbSceneParam._m0[33u].x - sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911))) * cbSceneParam._m0[33u].y;
            float _4479 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
            float _2306 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2113, cbSceneParam._m0[33u].w + _2114), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2113, _2114 - cbSceneParam._m0[33u].z), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2113 - cbSceneParam._m0[33u].z, _2114 - cbSceneParam._m0[33u].w), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2113 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2114), _2256), 0.0)).x), vec4(0.25)));
            float _2310 = 1.0 - (_2306 * cbSceneParam._m0[34u].x);
            float _2311 = 1.0 - (_2306 * cbSceneParam._m0[34u].y);
            float _2312 = 1.0 - (_2306 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2311) ? _2059 : (isnan(_2059) ? _2311 : min(_2059, _2311));
            frontier_phi_39_38_ladder_1 = isnan(_2310) ? _2058 : (isnan(_2058) ? _2310 : min(_2058, _2310));
            frontier_phi_39_38_ladder_2 = isnan(_2312) ? _2060 : (isnan(_2060) ? _2312 : min(_2060, _2312));
        }
        else
        {
            frontier_phi_39_38_ladder = _2059;
            frontier_phi_39_38_ladder_1 = _2058;
            frontier_phi_39_38_ladder_2 = _2060;
        }
        _2124 = frontier_phi_39_38_ladder_1;
        _2126 = frontier_phi_39_38_ladder;
        _2128 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2124 = _2058;
        _2126 = _2059;
        _2128 = _2060;
    }
    uvec4 _2133 = floatBitsToUint(cbInstanceData._m0[_756 + 5u]);
    uint _2135 = _2133.x * 14u;
    uint _2136 = _2135 + 13u;
    float _2143 = _796 + (-1.0);
    float _2148 = (cbLight._m0[_2136].x * _2143) + 1.0;
    float _2149 = (cbLight._m0[_2136].y * _2143) + 1.0;
    float _2150 = (cbLight._m0[_2136].z * _2143) + 1.0;
    float _2151 = (cbLight._m0[_2136].w * _2143) + 1.0;
    uint _2152 = _2135 + 5u;
    float _2158 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2162 = _2135 + 4u;
    float _2171 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2175 = _2135 | 1u;
    float _2186 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_615, _616, _617));
    float _2189 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_615, _616, _617));
    float _4515 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _4526 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2194 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2196 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2203 = ((cbLight._m0[_2152].x * _2158) * _2196) + (((cbLight._m0[_2162].x * _2124) * _2171) * _2194);
    float _2204 = ((_2158 * cbLight._m0[_2152].y) * _2196) + (((cbLight._m0[_2162].y * _2126) * _2171) * _2194);
    float _2205 = ((_2158 * cbLight._m0[_2152].z) * _2196) + (((cbLight._m0[_2162].z * _2128) * _2171) * _2194);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2135 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2313;
    float _2315;
    float _2317;
    if (_2211)
    {
        _2313 = _2203;
        _2315 = _2204;
        _2317 = _2205;
    }
    else
    {
        uint _2321 = _2135 + 6u;
        float _2337 = (dot(vec3(cbLight._m0[_2135 + 2u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2338 = _2337 * _2337;
        float _4537 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2339 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2340 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2313 = (((cbLight._m0[_2321].x * 0.3183098733425140380859375) * _2339) * _2340) + _2203;
        _2315 = (((cbLight._m0[_2321].y * 0.3183098733425140380859375) * _2339) * _2340) + _2204;
        _2317 = (((cbLight._m0[_2321].z * 0.3183098733425140380859375) * _2339) * _2340) + _2205;
    }
    bool _2320 = _2209.y == 0u;
    float _2375;
    float _2377;
    float _2379;
    if (_2320)
    {
        _2375 = _2313;
        _2377 = _2315;
        _2379 = _2317;
    }
    else
    {
        uint _2548 = _2135 + 7u;
        float _2564 = (dot(vec3(cbLight._m0[_2135 + 3u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2565 = _2564 * _2564;
        float _4553 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2566 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2567 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2375 = (((cbLight._m0[_2548].x * 0.3183098733425140380859375) * _2566) * _2567) + _2313;
        _2377 = (((cbLight._m0[_2548].y * 0.3183098733425140380859375) * _2566) * _2567) + _2315;
        _2379 = (((cbLight._m0[_2548].z * 0.3183098733425140380859375) * _2566) * _2567) + _2317;
    }
    uint _2382 = _2135 + 8u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _619) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2135].x + _697;
    float _2398 = cbLight._m0[_2135].y + _698;
    float _2399 = cbLight._m0[_2135].z + _699;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2135].xyz));
    float _4569 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _4580 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2411 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2412 = dot(vec3(_615, _616, _617), vec3(_2404, _2405, _2406));
    float _4591 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2404, _2405, _2406));
    float _4602 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2396 * _2396;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2432 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2433 = 0.959999978542327880859375 - _778;
    float _2435 = 0.959999978542327880859375 - _779;
    float _2436 = 0.959999978542327880859375 - _780;
    float _2443 = 1.0 - _2396;
    float _2454 = (0.5 / (((_2411 * ((_2410 * _2443) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2443) + _2396) * _2410))) * _2410;
    float _4613 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    uint _2470 = _2135 + 9u;
    float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _619) * 0.949999988079071044921875);
    float _2482 = _2481 * _2481;
    float _2483 = cbLight._m0[_2175].x + _697;
    float _2484 = cbLight._m0[_2175].y + _698;
    float _2485 = cbLight._m0[_2175].z + _699;
    float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
    float _2490 = _2489 * _2483;
    float _2491 = _2489 * _2484;
    float _2492 = _2489 * _2485;
    float _2493 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2175].xyz));
    float _4624 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2497 = dot(vec3(_615, _616, _617), vec3(_2490, _2491, _2492));
    float _4635 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2501 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2490, _2491, _2492));
    float _4646 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2505 = _2482 * _2482;
    float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
    float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
    float _2523 = 1.0 - _2482;
    float _2533 = (0.5 / (((_2411 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2523) + _2482) * _2496))) * _2496;
    float _4657 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2535 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
    float _2545 = (((((_2516 * _2433) + _781) * cbLight._m0[_2470].x) * _2535) * _2158) + ((((cbLight._m0[_2382].x * _2124) * ((_2432 * _2433) + _781)) * _2456) * _2171);
    float _2546 = (((((_2516 * _2435) + _783) * cbLight._m0[_2470].y) * _2535) * _2158) + ((((cbLight._m0[_2382].y * _2126) * ((_2432 * _2435) + _783)) * _2456) * _2171);
    float _2547 = (((((_2516 * _2436) + _784) * cbLight._m0[_2470].z) * _2535) * _2158) + ((((cbLight._m0[_2382].z * _2128) * ((_2432 * _2436) + _784)) * _2456) * _2171);
    float _2603;
    float _2605;
    float _2607;
    if (_2211)
    {
        _2603 = _2545;
        _2605 = _2546;
        _2607 = _2547;
    }
    else
    {
        uint _2609 = _2135 + 2u;
        uint _2613 = _2135 + 10u;
        float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2609].w)) * _619) * 0.949999988079071044921875);
        float _2628 = _2627 * _2627;
        float _2629 = cbLight._m0[_2609].x + _697;
        float _2630 = cbLight._m0[_2609].y + _698;
        float _2631 = cbLight._m0[_2609].z + _699;
        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
        float _2636 = _2635 * _2629;
        float _2637 = _2635 * _2630;
        float _2638 = _2635 * _2631;
        float _2639 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2609].xyz));
        float _4668 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2643 = dot(vec3(_615, _616, _617), vec3(_2636, _2637, _2638));
        float _4679 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2647 = dot(vec3(cbLight._m0[_2609].xyz), vec3(_2636, _2637, _2638));
        float _4690 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2651 = _2628 * _2628;
        float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
        float _2662 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
        float _2669 = 1.0 - _2628;
        float _2679 = (0.5 / (((_2411 * ((_2642 * _2669) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2669) + _2628) * _2642))) * _2642;
        float _4701 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2681 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
        float _2682 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2603 = (((((_2662 * _2433) + _781) * cbLight._m0[_2613].x) * _2681) * _2682) + _2545;
        _2605 = (((((_2662 * _2435) + _783) * cbLight._m0[_2613].y) * _2681) * _2682) + _2546;
        _2607 = (((((_2662 * _2436) + _784) * cbLight._m0[_2613].z) * _2681) * _2682) + _2547;
    }
    float _2713;
    float _2715;
    float _2717;
    if (_2320)
    {
        _2713 = _2603;
        _2715 = _2605;
        _2717 = _2607;
    }
    else
    {
        uint _2724 = _2135 + 3u;
        uint _2728 = _2135 + 11u;
        float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2724].w)) * _619) * 0.949999988079071044921875);
        float _2743 = _2742 * _2742;
        float _2744 = cbLight._m0[_2724].x + _697;
        float _2745 = cbLight._m0[_2724].y + _698;
        float _2746 = cbLight._m0[_2724].z + _699;
        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
        float _2751 = _2750 * _2744;
        float _2752 = _2750 * _2745;
        float _2753 = _2750 * _2746;
        float _2754 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2724].xyz));
        float _4717 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2758 = dot(vec3(_615, _616, _617), vec3(_2751, _2752, _2753));
        float _4728 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2762 = dot(vec3(cbLight._m0[_2724].xyz), vec3(_2751, _2752, _2753));
        float _4739 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2766 = _2743 * _2743;
        float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
        float _2777 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
        float _2784 = 1.0 - _2743;
        float _2794 = (0.5 / (((_2411 * ((_2757 * _2784) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2784) + _2743) * _2757))) * _2757;
        float _4750 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2796 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
        float _2797 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2713 = (((((_2777 * _2433) + _781) * cbLight._m0[_2728].x) * _2796) * _2797) + _2603;
        _2715 = (((((_2777 * _2435) + _783) * cbLight._m0[_2728].y) * _2796) * _2797) + _2605;
        _2717 = (((((_2777 * _2436) + _784) * cbLight._m0[_2728].z) * _2796) * _2797) + _2607;
    }
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_2133.y == 0u)
    {
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.x;
        uint _2830 = uint((float(_2818.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2819))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2819)));
        float _2840 = (log2(_1911 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2841 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        uint _2844 = uint(isnan(14.0) ? _2841 : (isnan(_2841) ? 14.0 : min(_2841, 14.0)));
        uvec4 _2849 = texelFetch(g_lightClusterGridBuffer, int(((_2844 << 2u) + (_2830 << 6u)) >> 2u));
        uint _2850 = _2849.x;
        uint _2851 = _2818.z;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((((1u << ((_2851 >> 4u) & 15u)) + 4294967295u) & _2850) == 0u) || ((_2851 & 240u) == 0u))
        {
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
        }
        else
        {
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            uint _3092 = 0u;
            uint _3101;
            bool _3102;
            for (;;)
            {
                _3101 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                _3102 = _3101 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3102)
                {
                    frontier_phi_73_pred = _3091;
                    frontier_phi_73_pred_1 = _3090;
                    frontier_phi_73_pred_2 = _3089;
                    frontier_phi_73_pred_3 = _3088;
                    frontier_phi_73_pred_4 = _3087;
                    frontier_phi_73_pred_5 = _3086;
                }
                else
                {
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    uint _3237;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3101;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3241 = uint(findLSB(_3237)) + (_3092 << 5u);
                        uint _3238 = (_3237 + 4294967295u) & _3237;
                        uint _3243 = _3241 * 48u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3263 = (_3241 * 48u) + 4u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3282 = (_3241 * 48u) + 8u;
                        vec3 _3293 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x));
                        float _3297 = _3257.x - _1909;
                        float _3298 = _3257.y - _1910;
                        float _3299 = _3257.z - _1911;
                        float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                        float _3303 = inversesqrt(_3300);
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3307 = dot(vec3(_737, _740, _743), vec3(_3304, _3305, _3306));
                        float _3312 = 1.0 - (_3300 * _3257.w);
                        float _4776 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3314 = sqrt(_3300) * _3276.w;
                        float _3317 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3307) + _3318;
                        float _3324 = _3314 * _3314;
                        float _3328 = ((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3313) / ((_3324 * 0.699999988079071044921875) + 1.0);
                        float _3332 = (-0.0) - _1909;
                        float _3333 = (-0.0) - _1910;
                        float _3334 = (-0.0) - _1911;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3348 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                        float _3349 = 1.0 - _812;
                        float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                        float _3357 = _3356 * _3356;
                        float _3358 = _3357 * _3357;
                        float _3359 = _3339 + _3304;
                        float _3360 = _3340 + _3305;
                        float _3361 = _3341 + _3306;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3369 = dot(vec3(_737, _740, _743), vec3(_3339, _3340, _3341));
                        float _4792 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3373 = dot(vec3(_737, _740, _743), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                        float _4803 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                        float _3381 = _3317 * _3357;
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3307) + _3382;
                        float _4814 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3387 = 1.0 - _3357;
                        float _3397 = (0.5 / (((_3386 * ((_3372 * _3387) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3357) * _3372))) * _3386;
                        float _4825 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3408 = (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3380 * _3380) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125))) * _3313;
                        _3161 = (_3328 * _3276.x) + _3234;
                        _3162 = (_3328 * _3276.y) + _3235;
                        _3163 = (_3328 * _3276.z) + _3236;
                        _3158 = (_3408 * _3293.x) + _3231;
                        _3159 = (_3408 * _3293.y) + _3232;
                        _3160 = (_3408 * _3293.z) + _3233;
                        if (_3238 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3238;
                        }
                    }
                    frontier_phi_73_pred = _3163;
                    frontier_phi_73_pred_1 = _3162;
                    frontier_phi_73_pred_2 = _3161;
                    frontier_phi_73_pred_3 = _3160;
                    frontier_phi_73_pred_4 = _3159;
                    frontier_phi_73_pred_5 = _3158;
                }
                _2945 = frontier_phi_73_pred;
                _2943 = frontier_phi_73_pred_1;
                _2941 = frontier_phi_73_pred_2;
                _2939 = frontier_phi_73_pred_3;
                _2937 = frontier_phi_73_pred_4;
                _2935 = frontier_phi_73_pred_5;
                uint _3093 = _3092 + 1u;
                if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3086 = _2935;
                    _3087 = _2937;
                    _3088 = _2939;
                    _3089 = _2941;
                    _3090 = _2943;
                    _3091 = _2945;
                    _3092 = _3093;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
        }
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.z;
        uint _2951 = (_2949 >> 8u) & 15u;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((4294967295u << _2951) & _2850) == 0u)
        {
            _3054 = _2934;
            _3056 = _2936;
            _3058 = _2938;
            _3060 = _2940;
            _3062 = _2942;
            _3064 = _2944;
        }
        else
        {
            float _3079 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
            float _3080 = _3079 * _1909;
            float _3081 = _3079 * _1910;
            float _3082 = _3079 * _1911;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2951 < ((_2949 >> 12u) & 15u))
            {
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3214 = _2934;
                float _3215 = _2936;
                float _3216 = _2938;
                float _3217 = _2940;
                float _3218 = _2942;
                float _3219 = _2944;
                uint _3220 = _2951;
                uint _3229;
                bool _3230;
                for (;;)
                {
                    _3229 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                    _3230 = _3229 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3230)
                    {
                        frontier_phi_84_pred = _3218;
                        frontier_phi_84_pred_1 = _3217;
                        frontier_phi_84_pred_2 = _3216;
                        frontier_phi_84_pred_3 = _3215;
                        frontier_phi_84_pred_4 = _3214;
                        frontier_phi_84_pred_5 = _3219;
                    }
                    else
                    {
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        float _3438 = _3217;
                        float _3439 = _3218;
                        float _3440 = _3219;
                        uint _3441 = _3229;
                        uint _3442;
                        vec4 _3467;
                        float _3468;
                        vec4 _3483;
                        vec3 _3495;
                        vec4 _3511;
                        vec4 _3527;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3452 = ((_3220 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3441));
                            _3442 = (_3441 + 4294967295u) & _3441;
                            uint _3454 = _3452 * 40u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3468 = _3467.w;
                            uint _3470 = (_3452 * 40u) + 4u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3452 * 40u) + 8u;
                            _3495 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x));
                            uint _3498 = (_3452 * 40u) + 16u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3514 = (_3452 * 40u) + 20u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3530 = (_3452 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3452 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_1911, _3562.z, fma(_1910, _3562.y, _3562.x * _1909)) + _3562.w;
                            _3575 = !((fma(_1911, _3543.z, fma(_1910, _3543.y, _3543.x * _1909)) + _3543.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3467.x - _1909;
                                float _3603 = _3467.y - _1910;
                                float _3604 = _3467.z - _1911;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3468 * _3468));
                                float _4836 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3620 = sqrt(_3605) * _3483.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_737, _740, _743))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_1911, _3511.z, fma(_1910, _3511.y, _3511.x * _1909)) + _3511.w) / _3574;
                                float _3634 = (fma(_1911, _3527.z, fma(_1910, _3527.y, _3527.x * _1909)) + _3527.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4852 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _812;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3080;
                                float _3664 = _3610 - _3081;
                                float _3665 = _3611 - _3082;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_737, _740, _743), vec3((-0.0) - _3080, (-0.0) - _3081, (-0.0) - _3082));
                                float _4863 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3677 = dot(vec3(_737, _740, _743), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4874 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_737, _740, _743), vec3(_3609, _3610, _3611))) + _3686;
                                float _4885 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4896 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3640 * _3483.y;
                                frontier_phi_90_pred_1 = _3640 * _3483.x;
                                frontier_phi_90_pred_2 = _3714 * _3495.z;
                                frontier_phi_90_pred_3 = _3714 * _3495.y;
                                frontier_phi_90_pred_4 = _3714 * _3495.x;
                                frontier_phi_90_pred_5 = _3640 * _3483.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3722 = frontier_phi_90_pred;
                            _3721 = frontier_phi_90_pred_1;
                            _3720 = frontier_phi_90_pred_2;
                            _3719 = frontier_phi_90_pred_3;
                            _3718 = frontier_phi_90_pred_4;
                            _3723 = frontier_phi_90_pred_5;
                            _3425 = _3721 + _3438;
                            _3426 = _3722 + _3439;
                            _3427 = _3723 + _3440;
                            _3422 = _3718 + _3435;
                            _3423 = _3719 + _3436;
                            _3424 = _3720 + _3437;
                            if (_3442 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3442;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3426;
                        frontier_phi_84_pred_1 = _3425;
                        frontier_phi_84_pred_2 = _3424;
                        frontier_phi_84_pred_3 = _3423;
                        frontier_phi_84_pred_4 = _3422;
                        frontier_phi_84_pred_5 = _3427;
                    }
                    _3063 = frontier_phi_84_pred;
                    _3061 = frontier_phi_84_pred_1;
                    _3059 = frontier_phi_84_pred_2;
                    _3057 = frontier_phi_84_pred_3;
                    _3055 = frontier_phi_84_pred_4;
                    _3065 = frontier_phi_84_pred_5;
                    uint _3221 = _3220 + 1u;
                    if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3214 = _3055;
                        _3215 = _3057;
                        _3216 = _3059;
                        _3217 = _3061;
                        _3218 = _3063;
                        _3219 = _3065;
                        _3220 = _3221;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3065;
                frontier_phi_65_66_ladder_1 = _3061;
                frontier_phi_65_66_ladder_2 = _3063;
                frontier_phi_65_66_ladder_3 = _3057;
                frontier_phi_65_66_ladder_4 = _3055;
                frontier_phi_65_66_ladder_5 = _3059;
            }
            else
            {
                frontier_phi_65_66_ladder = _2944;
                frontier_phi_65_66_ladder_1 = _2940;
                frontier_phi_65_66_ladder_2 = _2942;
                frontier_phi_65_66_ladder_3 = _2936;
                frontier_phi_65_66_ladder_4 = _2934;
                frontier_phi_65_66_ladder_5 = _2938;
            }
            _3054 = frontier_phi_65_66_ladder_4;
            _3056 = frontier_phi_65_66_ladder_3;
            _3058 = frontier_phi_65_66_ladder_5;
            _3060 = frontier_phi_65_66_ladder_1;
            _3062 = frontier_phi_65_66_ladder_2;
            _3064 = frontier_phi_65_66_ladder;
        }
        float _3069 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2862 = (_3069 * _3060) + _2375;
        _2864 = (_3069 * _3062) + _2377;
        _2866 = (_3069 * _3064) + _2379;
        _2868 = ((_3054 * _781) * _3069) + _2713;
        _2870 = ((_3056 * _783) * _3069) + _2715;
        _2872 = ((_3058 * _784) * _3069) + _2717;
    }
    else
    {
        _2862 = _2375;
        _2864 = _2377;
        _2866 = _2379;
        _2868 = _2713;
        _2870 = _2715;
        _2872 = _2717;
    }
    float _4912 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4923 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4934 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4945 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2890 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2862 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _796))) + ((_2868 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2864 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _796))) + ((_2870 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2866 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _796))) + ((_2872 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2893 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
    float _2894 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
    float _2895 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
    float _2900 = cbInstanceData._m0[_756 + 6u].w * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)));
    float _2905 = _717 / cbSceneParam._m0[86u].x;
    float _2906 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2920 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2922 = _2920.x;
    float _2923 = _2920.y;
    float _2924 = _2920.z;
    float _2925 = _2920.w;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2959 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2960 = _2959 / _639;
        float _2971 = _2960 * _690;
        float _2972 = _691 * _2960;
        float _2973 = (-0.0) - _2972;
        float _2974 = _2960 * _692;
        float _2976 = (cbSceneParam._m0[77u].w * _2973) / _2959;
        float _2977 = _2976 + cbSceneParam._m0[79u].w;
        float _2978 = cbSceneParam._m0[79u].w - _2972;
        float _2984 = sqrt(((_2971 * _2971) + (_2972 * _2972)) + (_2974 * _2974));
        float _2987 = (1.0 - (cbSceneParam._m0[77u].w / _2959)) * _2984;
        float _2992 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2994 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2973 - _2976) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_2977 > 0.0) ? exp2(_2992 * _2977) : (2.0 - exp2(_2994 * _2977))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2987;
        }
        else
        {
            float _3115 = 1.0 / cbSceneParam._m0[80u].x;
            float _3116 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : max(_2977, _2978));
            float _3117 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : min(_2977, _2978));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            _3171 = ((abs(_2984 / _2973) * cbSceneParam._m0[80u].y) * ((((_3126 - _3127) * 2.0) - ((exp2(_2992 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0)))) - exp2(_2992 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))))) * _3115)) - ((exp2(_2994 * _3126) - exp2(_2994 * _3127)) * _3115))) + (_2987 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2925);
        _2996 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2922;
        _2998 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2923;
        _3000 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2924;
        _3002 = _3182 * _2925;
    }
    else
    {
        _2996 = _2922;
        _2998 = _2923;
        _3000 = _2924;
        _3002 = _2925;
    }
    bool _3209;
    vec4 _3012;
    vec4 _3034;
    float _3036;
    float _3040;
    float _3041;
    float _3042;
    float _3043;
    bool _3053;
    for (;;)
    {
        _3012 = cbMatDynParam._m0[0u];
        float _3014 = roundEven(_3012.y);
        bool _3015 = _3014 == 3.0;
        float _3016 = log2(_3002);
        float _3023 = exp2(_3016 * cbSceneParam._m0[78u].x) * _2893;
        float _3024 = exp2(_3016 * cbSceneParam._m0[78u].y) * _2894;
        float _3025 = exp2(_3016 * cbSceneParam._m0[78u].z) * _2895;
        float _3032 = _706 + (-0.5);
        _3034 = cbMtdParam._m0[1u];
        _3036 = _3034.y * _3032;
        float _3039 = (_3014 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3040 = _3039 * (_3015 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2996)));
        _3041 = _3039 * (_3015 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2998)));
        _3042 = _3039 * (_3015 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _3000)));
        _3043 = _3032 * 0.999000012874603271484375;
        _3053 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3053)
        {
            if ((cbInstanceData._m0[_756 + 7u].x + _3043) < 0.5)
            {
                _3209 = true;
                break;
            }
        }
        uint _3150 = _757 + uint(_3012.w);
        if ((cbInstanceData._m0[_3150].w < 1.0) && ((cbInstanceData._m0[_3150].w + _3043) < 0.5))
        {
            _3209 = true;
            break;
        }
        if ((_3036 + _387) < _3034.x)
        {
            _3209 = true;
            break;
        }
        _3209 = false;
        break;
    }
    float _3413;
    if (_3209)
    {
        discard_state = true;
        _3413 = 0.0;
    }
    else
    {
        _3413 = _2900;
    }
    SV_Target.x = _3040;
    SV_Target.y = _3041;
    SV_Target.z = _3042;
    SV_Target.w = _3413;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2900;
    discard_exit();
}


