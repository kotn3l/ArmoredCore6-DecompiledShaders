#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1267;
float _3962;
float _3963;
float _3964;
float _3965;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _239 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _240 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _241 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _245 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _246 = _245 * _239;
    float _247 = _245 * _240;
    float _248 = _245 * _241;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _266 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _267 = _266 * TANGENT_2.x;
    float _268 = _266 * TANGENT_2.y;
    float _269 = _266 * TANGENT_2.z;
    float _274;
    float _275;
    float _276;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _274 = (-0.0) - _253;
        _275 = (-0.0) - _254;
        _276 = (-0.0) - _255;
    }
    else
    {
        _274 = _253;
        _275 = _254;
        _276 = _255;
    }
    float _298 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _310 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _298) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3974 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _313 = 1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)));
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    float _323 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _298) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3995 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = 1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)));
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    vec4 _345 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _347 = _345.x;
    float _348 = _345.y;
    float _349 = _345.z;
    float _350 = cbMtdParam._m0[11u].x * _327;
    float _352 = cbMtdParam._m0[11u].y * _327;
    float _354 = cbMtdParam._m0[11u].z * _327;
    float _374 = _325 + _313;
    float _375 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _376 = isnan(1.0) ? _375 : (isnan(_375) ? 1.0 : min(_375, 1.0));
    vec4 _394 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _399 = _394.w;
    float _400 = _394.x * cbMtdParam._m0[10u].x;
    float _401 = _394.y * cbMtdParam._m0[10u].y;
    float _402 = _394.z * cbMtdParam._m0[10u].z;
    float _417 = (_400 - (_376 * _400)) + ((((((_347 * (cbMtdParam._m0[9u].x - _350)) * _315) + (_350 * _347)) * 4.55000019073486328125) * _376) * _400);
    float _419 = (((((((_348 * (cbMtdParam._m0[9u].y - _352)) * _315) + (_352 * _348)) * 4.55000019073486328125) * _376) * _401) + _401) - (_376 * _401);
    float _421 = (((((((_349 * (cbMtdParam._m0[9u].z - _354)) * _315) + (_354 * _349)) * 4.55000019073486328125) * _376) * _402) + _402) - (_376 * _402);
    vec4 _438 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _442 = _438.z;
    float _446 = (_438.x * 2.0) + (-1.0);
    float _448 = (_438.y * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _4026 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))));
    float _457 = fma(_454, _274, fma(_448, _267, _446 * _246));
    float _460 = fma(_454, _275, fma(_448, _268, _446 * _247));
    float _463 = fma(_454, _276, fma(_448, _269, _446 * _248));
    float _467 = inversesqrt(dot(vec3(_457, _460, _463), vec3(_457, _460, _463)));
    float _468 = _467 * _457;
    float _469 = _467 * _460;
    float _470 = _467 * _463;
    float _488 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4037 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _489 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _494 = (_489 * _489) * (3.0 - (_489 * 2.0));
    float _495 = isnan(cbMtdParam._m0[14u].w) ? _494 : (isnan(_494) ? cbMtdParam._m0[14u].w : max(_494, cbMtdParam._m0[14u].w));
    vec4 _514 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _519 = (isnan(cbMtdParam._m0[12u].y) ? _495 : (isnan(_495) ? cbMtdParam._m0[12u].y : min(_495, cbMtdParam._m0[12u].y))) * cbMtdParam._m0[12u].z;
    vec4 _538 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _544 = (_538.x * 2.0) + (-1.0);
    float _545 = (_538.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _4058 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))));
    float _554 = fma(_551, _274, fma(_545, _267, _544 * _246));
    float _557 = fma(_551, _275, fma(_545, _268, _544 * _247));
    float _560 = fma(_551, _276, fma(_545, _269, _544 * _248));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    float _565 = _564 * _554;
    float _566 = _564 * _557;
    float _567 = _564 * _560;
    float _570 = fma(_567, _229, fma(_566, _228, _565 * _227));
    float _573 = fma(_567, _262, fma(_566, _261, _565 * _260));
    float _576 = fma(_567, _276, fma(_566, _275, _565 * _274));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _584 = fma(_470, _229, fma(_469, _228, _468 * _227));
    float _587 = fma(_470, _262, fma(_469, _261, _468 * _260));
    float _590 = fma(_470, _276, fma(_469, _275, _468 * _274));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _597 = _594 * _590;
    vec4 _610 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _616 = (_610.x * 2.0) + (-1.0);
    float _617 = (_610.y * 2.0) + (-1.0);
    float _618 = dot(vec2(_616, _617), vec2(_616, _617));
    float _4069 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _623 = sqrt(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))));
    float _626 = fma(_623, _274, fma(_617, _267, _616 * _246));
    float _629 = fma(_623, _275, fma(_617, _268, _616 * _247));
    float _632 = fma(_623, _276, fma(_617, _269, _616 * _248));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _642 = fma(_639, _229, fma(_638, _228, _637 * _227));
    float _645 = fma(_639, _262, fma(_638, _261, _637 * _260));
    float _648 = fma(_639, _276, fma(_638, _275, _637 * _274));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _667 = ((_594 * _584) + (((_570 * _315) * _580) * cbMtdParam._m0[14u].z)) + (((_642 * _327) * _652) * cbMtdParam._m0[14u].y);
    float _669 = ((_594 * _587) + (((_573 * _315) * _580) * cbMtdParam._m0[14u].z)) + (((_645 * _327) * _652) * cbMtdParam._m0[14u].y);
    float _672 = fma(_597, _274, fma(_669, _260, _667 * _227));
    float _675 = fma(_597, _275, fma(_669, _261, _667 * _228));
    float _678 = fma(_597, _276, fma(_669, _262, _667 * _229));
    float _682 = inversesqrt(dot(vec3(_672, _675, _678), vec3(_672, _675, _678)));
    float _683 = _682 * _672;
    float _684 = _682 * _675;
    float _685 = _682 * _678;
    float _4080 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _686 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _687 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _4113 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _4124 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _4135 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _691 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _707 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    vec4 _772 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _774 = _772.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _946 = sqrt(((_758 * _758) + (_759 * _759)) + (_760 * _760));
        float _952 = (cbMatDynParam._m0[5u].x * _946) + cbMatDynParam._m0[5u].y;
        float _4146 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _957 = (cbMatDynParam._m0[5u].z * _946) + cbMatDynParam._m0[5u].w;
        float _4157 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) - _953)) + _953) < ((_774 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _785 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _786 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _805 = fma(_685, cbSceneParam._m0[5u].z, fma(_684, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _683));
    float _808 = fma(_685, cbSceneParam._m0[6u].z, fma(_684, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _683));
    float _811 = fma(_685, cbSceneParam._m0[7u].z, fma(_684, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _683));
    uint _824 = uint(roundEven(NORMAL.w)) * 13u;
    uint _825 = _824 + 9u;
    uint _826 = _825 + uint(cbMatDynParam._m0[0u].w);
    float _832 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_826].x;
    float _833 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * cbInstanceData._m0[_826].y;
    float _834 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_826].z;
    float _4168 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _838 = 1.0 - _691;
    float _839 = _835 * _838;
    float _840 = _836 * _838;
    float _841 = _837 * _838;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _691;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _691;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _691;
    float _849 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _785, cbSceneParam._m0[86u].y * _786));
    float _864 = _861.x * TEXCOORD_7.w;
    float _865 = dot(vec3(_683, _684, _685), vec3(_765, _766, _767));
    float _868 = _865 * 2.0;
    float _872 = (_868 * _683) - _765;
    float _873 = (_868 * _684) - _766;
    float _874 = (_868 * _685) - _767;
    float _878 = abs(dot(vec3(_765, _766, _767), vec3(_683, _684, _685)));
    float _4201 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_687);
    float _892 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _898 = (1.0 - _892) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _899 = _892 * _880;
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _991 = fma(_935, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927));
        float _995 = fma(_935, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927));
        float _999 = fma(_935, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927));
        float _1024 = _927 + _683;
        float _1025 = _931 + _684;
        float _1026 = _935 + _685;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _991;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _995;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _999;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_991 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_995 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_999 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_683, _684, _685), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _4249 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_683, _684, _685), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _4282 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_683, _684, _685), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4315 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_935, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927));
        float _1314 = fma(_935, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927));
        float _1318 = fma(_935, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927));
        float _1341 = _927 + _683;
        float _1342 = _931 + _684;
        float _1343 = _935 + _685;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_683, _684, _685), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4378 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_683, _684, _685), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4411 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_683, _684, _685), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4444 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = _1267;
        _1589 = _1267;
        _1590 = _1267;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1279)) + _1279;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1280)) + _1280;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1281)) + _1281;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _872 * 0.5;
    float _1648 = _873 * 0.5;
    float _1649 = _874 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1763 = fma(_935, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927)) + cbModelParam._m0[13u].w;
        float _1767 = fma(_935, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927)) + cbModelParam._m0[14u].w;
        float _1771 = fma(_935, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927)) + cbModelParam._m0[15u].w;
        float _1774 = fma(_874, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872));
        float _1777 = fma(_874, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872));
        float _1780 = fma(_874, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872));
        float _1808;
        if (_1774 > 0.0)
        {
            _1808 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1808 = frontier_phi_19_17_ladder;
        }
        float _1982;
        if (_1777 > 0.0)
        {
            _1982 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1982 = frontier_phi_28_24_ladder;
        }
        float _2277;
        if (_1780 > 0.0)
        {
            _2277 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2277 = frontier_phi_40_35_ladder;
        }
        float _2279 = isnan(_1982) ? _1808 : (isnan(_1808) ? _1982 : min(_1808, _1982));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1774) + _1763;
        float _2285 = (_2280 * _1777) + _1767;
        float _2286 = (_2280 * _1780) + _1771;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2287;
        float _2291 = _2287 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 > _2291) || ((_2285 < _2289) || ((_2284 < _2289) || (_2284 > _2291))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2286, cbModelParam._m0[9u].z, fma(_2285, cbModelParam._m0[9u].y, _2284 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2286, cbModelParam._m0[10u].z, fma(_2285, cbModelParam._m0[10u].y, _2284 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2286, cbModelParam._m0[11u].z, fma(_2285, cbModelParam._m0[11u].y, _2284 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_18_40_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1796 = frontier_phi_18_40_ladder_2;
        _1798 = frontier_phi_18_40_ladder_1;
        _1800 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_872, _873, _874), _1716);
        _1796 = _1784.x * cbModelParam._m0[1u].y;
        _1798 = _1784.y * cbModelParam._m0[1u].y;
        _1800 = _1784.z * cbModelParam._m0[1u].y;
    }
    float _1804 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1804 : min(cbModelParam._m0[25u].w, _1804));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1861 = fma(_935, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927)) + cbModelParam._m0[21u].w;
        float _1865 = fma(_935, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927)) + cbModelParam._m0[22u].w;
        float _1869 = fma(_935, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927)) + cbModelParam._m0[23u].w;
        float _1872 = fma(_874, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872));
        float _1875 = fma(_874, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872));
        float _1878 = fma(_874, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872));
        float _1987;
        if (_1872 > 0.0)
        {
            _1987 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1987 = frontier_phi_30_26_ladder;
        }
        float _2304;
        if (_1875 > 0.0)
        {
            _2304 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2304 = frontier_phi_42_37_ladder;
        }
        float _2642;
        if (_1878 > 0.0)
        {
            _2642 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2642 = frontier_phi_52_49_ladder;
        }
        float _2644 = isnan(_2304) ? _1987 : (isnan(_1987) ? _2304 : min(_1987, _2304));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _1872) + _1861;
        float _2650 = (_2645 * _1875) + _1865;
        float _2651 = (_2645 * _1878) + _1869;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2652;
        float _2655 = _2652 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2651 > _2655) || ((_2651 < _2653) || ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 < _2653) || (_2649 > _2655))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2651, cbModelParam._m0[17u].z, fma(_2650, cbModelParam._m0[17u].y, _2649 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2651, cbModelParam._m0[18u].z, fma(_2650, cbModelParam._m0[18u].y, _2649 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2651, cbModelParam._m0[19u].z, fma(_2650, cbModelParam._m0[19u].y, _2649 * cbModelParam._m0[19u].x))), _1805);
            frontier_phi_27_52_ladder = _2773.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2773.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2773.x * cbModelParam._m0[1u].z;
        }
        _1897 = frontier_phi_27_52_ladder_2;
        _1899 = frontier_phi_27_52_ladder_1;
        _1901 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_872, _873, _874), _1805);
        _1897 = _1881.x * cbModelParam._m0[1u].z;
        _1899 = _1881.y * cbModelParam._m0[1u].z;
        _1901 = _1881.z * cbModelParam._m0[1u].z;
    }
    float _1914 = (((_898 * _849) + _899) * _864) * ((cbModelParam._m0[1u].w * (_1897 - _1796)) + _1796);
    float _1916 = (((_898 * _851) + _899) * _864) * ((cbModelParam._m0[1u].w * (_1899 - _1798)) + _1798);
    float _1918 = (((_898 * _852) + _899) * _864) * ((cbModelParam._m0[1u].w * (_1901 - _1800)) + _1800);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, _1914 * cbSceneParam._m0[91u].x));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1974 = _1961 / _1973;
    float _1975 = _1965 / _1973;
    float _1976 = _1969 / _1973;
    float _2123;
    float _2124;
    float _2125;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2003 = ((uint(_1976 > cbSceneParam._m0[59u].y) + uint(_1976 > cbSceneParam._m0[59u].x)) + uint(_1976 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2004 = _2003 + 43u;
        uint _2012 = _2003 + 44u;
        uint _2020 = _2003 + 45u;
        uint _2028 = _2003 + 46u;
        float _2039 = fma(_1973, cbSceneParam._m0[_2004].w, fma(_1969, cbSceneParam._m0[_2004].z, fma(_1965, cbSceneParam._m0[_2004].y, _1961 * cbSceneParam._m0[_2004].x)));
        float _2043 = fma(_1973, cbSceneParam._m0[_2012].w, fma(_1969, cbSceneParam._m0[_2012].z, fma(_1965, cbSceneParam._m0[_2012].y, _1961 * cbSceneParam._m0[_2012].x)));
        float _2051 = fma(_1973, cbSceneParam._m0[_2028].w, fma(_1969, cbSceneParam._m0[_2028].z, fma(_1965, cbSceneParam._m0[_2028].y, _1961 * cbSceneParam._m0[_2028].x)));
        float _2056 = cbSceneParam._m0[33u].z * _2051;
        float _2058 = cbSceneParam._m0[33u].w * _2051;
        float _2061 = fma(_1973, cbSceneParam._m0[_2020].w, fma(_1969, cbSceneParam._m0[_2020].z, fma(_1965, cbSceneParam._m0[_2020].y, _1961 * cbSceneParam._m0[_2020].x))) / _2051;
        float _2109 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
        float _4570 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2116 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 + _2039) / _2051, (_2058 + _2043) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 + _2039) / _2051, (_2043 - _2056) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2056) / _2051, (_2043 - _2058) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2058) / _2051, (_2056 + _2043) / _2051), _2061), 0.0)).x), vec4(0.25)));
        _2123 = 1.0 - (_2116 * cbSceneParam._m0[34u].x);
        _2124 = 1.0 - (_2116 * cbSceneParam._m0[34u].y);
        _2125 = 1.0 - (_2116 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2123 = 1.0;
        _2124 = 1.0;
        _2125 = 1.0;
    }
    float _2189;
    float _2191;
    float _2193;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2177 = fma(_1973, cbSceneParam._m0[63u].w, fma(_1969, cbSceneParam._m0[63u].z, fma(_1965, cbSceneParam._m0[63u].y, _1961 * cbSceneParam._m0[63u].x)));
        float _2178 = fma(_1973, cbSceneParam._m0[60u].w, fma(_1969, cbSceneParam._m0[60u].z, fma(_1965, cbSceneParam._m0[60u].y, _1961 * cbSceneParam._m0[60u].x))) / _2177;
        float _2179 = fma(_1973, cbSceneParam._m0[61u].w, fma(_1969, cbSceneParam._m0[61u].z, fma(_1965, cbSceneParam._m0[61u].y, _1961 * cbSceneParam._m0[61u].x))) / _2177;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2178 >= cbSceneParam._m0[64u].x) && (_2179 >= cbSceneParam._m0[64u].y)) && (_2178 <= cbSceneParam._m0[64u].z)) && (_2179 <= cbSceneParam._m0[64u].w))
        {
            float _2317 = fma(_1973, cbSceneParam._m0[62u].w, fma(_1969, cbSceneParam._m0[62u].z, fma(_1965, cbSceneParam._m0[62u].y, _1961 * cbSceneParam._m0[62u].x))) / _2177;
            float _2321 = isnan(cbSceneParam._m0[41u].w) ? _2317 : (isnan(_2317) ? cbSceneParam._m0[41u].w : max(_2317, cbSceneParam._m0[41u].w));
            float _2364 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
            float _4586 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
            float _2371 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2178, cbSceneParam._m0[33u].w + _2179), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2178, _2179 - cbSceneParam._m0[33u].z), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].z, _2179 - cbSceneParam._m0[33u].w), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2179), _2321), 0.0)).x), vec4(0.25)));
            float _2375 = 1.0 - (_2371 * cbSceneParam._m0[34u].x);
            float _2376 = 1.0 - (_2371 * cbSceneParam._m0[34u].y);
            float _2377 = 1.0 - (_2371 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
            frontier_phi_39_38_ladder_1 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
            frontier_phi_39_38_ladder_2 = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
        }
        else
        {
            frontier_phi_39_38_ladder = _2124;
            frontier_phi_39_38_ladder_1 = _2123;
            frontier_phi_39_38_ladder_2 = _2125;
        }
        _2189 = frontier_phi_39_38_ladder_1;
        _2191 = frontier_phi_39_38_ladder;
        _2193 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2189 = _2123;
        _2191 = _2124;
        _2193 = _2125;
    }
    uvec4 _2198 = floatBitsToUint(cbInstanceData._m0[_824 + 5u]);
    uint _2200 = _2198.x * 14u;
    uint _2201 = _2200 + 13u;
    float _2208 = _864 + (-1.0);
    float _2213 = (cbLight._m0[_2201].x * _2208) + 1.0;
    float _2214 = (cbLight._m0[_2201].y * _2208) + 1.0;
    float _2215 = (cbLight._m0[_2201].z * _2208) + 1.0;
    float _2216 = (cbLight._m0[_2201].w * _2208) + 1.0;
    uint _2217 = _2200 + 5u;
    float _2223 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2227 = _2200 + 4u;
    float _2236 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2240 = _2200 | 1u;
    float _2251 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_683, _684, _685));
    float _2254 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_683, _684, _685));
    float _4622 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _4633 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2259 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2261 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2268 = ((cbLight._m0[_2217].x * _2223) * _2261) + (((cbLight._m0[_2227].x * _2189) * _2236) * _2259);
    float _2269 = ((_2223 * cbLight._m0[_2217].y) * _2261) + (((cbLight._m0[_2227].y * _2191) * _2236) * _2259);
    float _2270 = ((_2223 * cbLight._m0[_2217].z) * _2261) + (((cbLight._m0[_2227].z * _2193) * _2236) * _2259);
    uvec4 _2274 = floatBitsToUint(cbLight._m0[_2200 + 12u]);
    bool _2276 = _2274.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2276)
    {
        _2378 = _2268;
        _2380 = _2269;
        _2382 = _2270;
    }
    else
    {
        uint _2386 = _2200 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2200 + 2u].xyz), vec3(_683, _684, _685)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4644 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2405 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2268;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2269;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2270;
    }
    bool _2385 = _2274.y == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2385)
    {
        _2440 = _2378;
        _2442 = _2380;
        _2444 = _2382;
    }
    else
    {
        uint _2613 = _2200 + 7u;
        float _2629 = (dot(vec3(cbLight._m0[_2200 + 3u].xyz), vec3(_683, _684, _685)) * 0.5) + 0.5;
        float _2630 = _2629 * _2629;
        float _4660 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2631 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2632 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2440 = (((cbLight._m0[_2613].x * 0.3183098733425140380859375) * _2631) * _2632) + _2378;
        _2442 = (((cbLight._m0[_2613].y * 0.3183098733425140380859375) * _2631) * _2632) + _2380;
        _2444 = (((cbLight._m0[_2613].z * 0.3183098733425140380859375) * _2631) * _2632) + _2382;
    }
    uint _2447 = _2200 + 8u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _687) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2200].x + _765;
    float _2463 = cbLight._m0[_2200].y + _766;
    float _2464 = cbLight._m0[_2200].z + _767;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2200].xyz));
    float _4676 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _4687 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2476 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2477 = dot(vec3(_683, _684, _685), vec3(_2469, _2470, _2471));
    float _4698 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2469, _2470, _2471));
    float _4709 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2461 * _2461;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0);
    float _2498 = 0.959999978542327880859375 - _846;
    float _2500 = 0.959999978542327880859375 - _847;
    float _2501 = 0.959999978542327880859375 - _848;
    float _2508 = 1.0 - _2461;
    float _2519 = (0.5 / (((_2476 * ((_2475 * _2508) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2508) + _2461) * _2475))) * _2475;
    float _4720 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2521 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    uint _2535 = _2200 + 9u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _687) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2240].x + _765;
    float _2549 = cbLight._m0[_2240].y + _766;
    float _2550 = cbLight._m0[_2240].z + _767;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2240].xyz));
    float _4731 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2562 = dot(vec3(_683, _684, _685), vec3(_2555, _2556, _2557));
    float _4742 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2566 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2555, _2556, _2557));
    float _4753 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2570 = _2547 * _2547;
    float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
    float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0);
    float _2588 = 1.0 - _2547;
    float _2598 = (0.5 / (((_2476 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2588) + _2547) * _2561))) * _2561;
    float _4764 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2600 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
    float _2610 = (((((_2581 * _2498) + _849) * cbLight._m0[_2535].x) * _2600) * _2223) + ((((cbLight._m0[_2447].x * _2189) * ((_2497 * _2498) + _849)) * _2521) * _2236);
    float _2611 = (((((_2581 * _2500) + _851) * cbLight._m0[_2535].y) * _2600) * _2223) + ((((cbLight._m0[_2447].y * _2191) * ((_2497 * _2500) + _851)) * _2521) * _2236);
    float _2612 = (((((_2581 * _2501) + _852) * cbLight._m0[_2535].z) * _2600) * _2223) + ((((cbLight._m0[_2447].z * _2193) * ((_2497 * _2501) + _852)) * _2521) * _2236);
    float _2668;
    float _2670;
    float _2672;
    if (_2276)
    {
        _2668 = _2610;
        _2670 = _2611;
        _2672 = _2612;
    }
    else
    {
        uint _2674 = _2200 + 2u;
        uint _2678 = _2200 + 10u;
        float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2674].w)) * _687) * 0.949999988079071044921875);
        float _2693 = _2692 * _2692;
        float _2694 = cbLight._m0[_2674].x + _765;
        float _2695 = cbLight._m0[_2674].y + _766;
        float _2696 = cbLight._m0[_2674].z + _767;
        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
        float _2701 = _2700 * _2694;
        float _2702 = _2700 * _2695;
        float _2703 = _2700 * _2696;
        float _2704 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2674].xyz));
        float _4775 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2708 = dot(vec3(_683, _684, _685), vec3(_2701, _2702, _2703));
        float _4786 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2712 = dot(vec3(cbLight._m0[_2674].xyz), vec3(_2701, _2702, _2703));
        float _4797 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2716 = _2693 * _2693;
        float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
        float _2727 = exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0);
        float _2734 = 1.0 - _2693;
        float _2744 = (0.5 / (((_2476 * ((_2707 * _2734) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2734) + _2693) * _2707))) * _2707;
        float _4808 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2746 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
        float _2747 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2668 = (((((_2727 * _2498) + _849) * cbLight._m0[_2678].x) * _2746) * _2747) + _2610;
        _2670 = (((((_2727 * _2500) + _851) * cbLight._m0[_2678].y) * _2746) * _2747) + _2611;
        _2672 = (((((_2727 * _2501) + _852) * cbLight._m0[_2678].z) * _2746) * _2747) + _2612;
    }
    float _2778;
    float _2780;
    float _2782;
    if (_2385)
    {
        _2778 = _2668;
        _2780 = _2670;
        _2782 = _2672;
    }
    else
    {
        uint _2789 = _2200 + 3u;
        uint _2793 = _2200 + 11u;
        float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2789].w)) * _687) * 0.949999988079071044921875);
        float _2808 = _2807 * _2807;
        float _2809 = cbLight._m0[_2789].x + _765;
        float _2810 = cbLight._m0[_2789].y + _766;
        float _2811 = cbLight._m0[_2789].z + _767;
        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
        float _2816 = _2815 * _2809;
        float _2817 = _2815 * _2810;
        float _2818 = _2815 * _2811;
        float _2819 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2789].xyz));
        float _4824 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2823 = dot(vec3(_683, _684, _685), vec3(_2816, _2817, _2818));
        float _4835 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2827 = dot(vec3(cbLight._m0[_2789].xyz), vec3(_2816, _2817, _2818));
        float _4846 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2831 = _2808 * _2808;
        float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
        float _2842 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
        float _2849 = 1.0 - _2808;
        float _2859 = (0.5 / (((_2476 * ((_2822 * _2849) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2849) + _2808) * _2822))) * _2822;
        float _4857 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2861 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
        float _2862 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2778 = (((((_2842 * _2498) + _849) * cbLight._m0[_2793].x) * _2861) * _2862) + _2668;
        _2780 = (((((_2842 * _2500) + _851) * cbLight._m0[_2793].y) * _2861) * _2862) + _2670;
        _2782 = (((((_2842 * _2501) + _852) * cbLight._m0[_2793].z) * _2861) * _2862) + _2672;
    }
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    if (_2198.y == 0u)
    {
        uvec4 _2883 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2884 = _2883.x;
        uint _2895 = uint((float(_2883.y) * floor(float(uint(cbSceneParam._m0[85u].y * _786) / _2884))) + floor(float(uint(cbSceneParam._m0[85u].x * _785) / _2884)));
        float _2905 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2906 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        uint _2909 = uint(isnan(14.0) ? _2906 : (isnan(_2906) ? 14.0 : min(_2906, 14.0)));
        uvec4 _2914 = texelFetch(g_lightClusterGridBuffer, int(((_2909 << 2u) + (_2895 << 6u)) >> 2u));
        uint _2915 = _2914.x;
        uint _2916 = _2883.z;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        if (((((1u << ((_2916 >> 4u) & 15u)) + 4294967295u) & _2915) == 0u) || ((_2916 & 240u) == 0u))
        {
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
        }
        else
        {
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            uint _3179 = 0u;
            uint _3188;
            bool _3189;
            for (;;)
            {
                _3188 = texelFetch(g_lightClassification, int((((_2909 << 5u) + (_2895 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                _3189 = _3188 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3189)
                {
                    frontier_phi_73_pred = _3178;
                    frontier_phi_73_pred_1 = _3177;
                    frontier_phi_73_pred_2 = _3176;
                    frontier_phi_73_pred_3 = _3175;
                    frontier_phi_73_pred_4 = _3174;
                    frontier_phi_73_pred_5 = _3173;
                }
                else
                {
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    uint _3324;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3188;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    for (;;)
                    {
                        uint _3328 = uint(findLSB(_3324)) + (_3179 << 5u);
                        uint _3325 = (_3324 + 4294967295u) & _3324;
                        uint _3330 = _3328 * 48u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3350 = (_3328 * 48u) + 4u;
                        vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3369 = (_3328 * 48u) + 8u;
                        vec3 _3380 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x));
                        float _3384 = _3344.x - _1974;
                        float _3385 = _3344.y - _1975;
                        float _3386 = _3344.z - _1976;
                        float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                        float _3390 = inversesqrt(_3387);
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3394 = dot(vec3(_805, _808, _811), vec3(_3391, _3392, _3393));
                        float _3399 = 1.0 - (_3387 * _3344.w);
                        float _4883 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3401 = sqrt(_3387) * _3363.w;
                        float _3404 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3394) + _3405;
                        float _3411 = _3401 * _3401;
                        float _3415 = ((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3400) / ((_3411 * 0.699999988079071044921875) + 1.0);
                        float _3419 = (-0.0) - _1974;
                        float _3420 = (-0.0) - _1975;
                        float _3421 = (-0.0) - _1976;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3435 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                        float _3436 = 1.0 - _880;
                        float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                        float _3444 = _3443 * _3443;
                        float _3445 = _3444 * _3444;
                        float _3446 = _3426 + _3391;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3456 = dot(vec3(_805, _808, _811), vec3(_3426, _3427, _3428));
                        float _4899 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3460 = dot(vec3(_805, _808, _811), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                        float _4910 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                        float _3468 = _3404 * _3444;
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3394) + _3469;
                        float _4921 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3474 = 1.0 - _3444;
                        float _3484 = (0.5 / (((_3473 * ((_3459 * _3474) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3444) * _3459))) * _3473;
                        float _4932 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3495 = (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)))) / ((_3467 * _3467) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125))) * _3400;
                        _3248 = (_3415 * _3363.x) + _3321;
                        _3249 = (_3415 * _3363.y) + _3322;
                        _3250 = (_3415 * _3363.z) + _3323;
                        _3245 = (_3495 * _3380.x) + _3318;
                        _3246 = (_3495 * _3380.y) + _3319;
                        _3247 = (_3495 * _3380.z) + _3320;
                        if (_3325 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3325;
                        }
                    }
                    frontier_phi_73_pred = _3250;
                    frontier_phi_73_pred_1 = _3249;
                    frontier_phi_73_pred_2 = _3248;
                    frontier_phi_73_pred_3 = _3247;
                    frontier_phi_73_pred_4 = _3246;
                    frontier_phi_73_pred_5 = _3245;
                }
                _3032 = frontier_phi_73_pred;
                _3030 = frontier_phi_73_pred_1;
                _3028 = frontier_phi_73_pred_2;
                _3026 = frontier_phi_73_pred_3;
                _3024 = frontier_phi_73_pred_4;
                _3022 = frontier_phi_73_pred_5;
                uint _3180 = _3179 + 1u;
                if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3173 = _3022;
                    _3174 = _3024;
                    _3175 = _3026;
                    _3176 = _3028;
                    _3177 = _3030;
                    _3178 = _3032;
                    _3179 = _3180;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
        }
        uvec4 _3035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3036 = _3035.z;
        uint _3038 = (_3036 >> 8u) & 15u;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        if (((4294967295u << _3038) & _2915) == 0u)
        {
            _3141 = _3021;
            _3143 = _3023;
            _3145 = _3025;
            _3147 = _3027;
            _3149 = _3029;
            _3151 = _3031;
        }
        else
        {
            float _3166 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _3167 = _3166 * _1974;
            float _3168 = _3166 * _1975;
            float _3169 = _3166 * _1976;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3038 < ((_3036 >> 12u) & 15u))
            {
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3301 = _3021;
                float _3302 = _3023;
                float _3303 = _3025;
                float _3304 = _3027;
                float _3305 = _3029;
                float _3306 = _3031;
                uint _3307 = _3038;
                uint _3316;
                bool _3317;
                for (;;)
                {
                    _3316 = texelFetch(g_lightClassification, int((((_2909 << 5u) + (_2895 << 9u)) + (_3307 << 2u)) >> 2u)).x;
                    _3317 = _3316 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3317)
                    {
                        frontier_phi_84_pred = _3305;
                        frontier_phi_84_pred_1 = _3304;
                        frontier_phi_84_pred_2 = _3303;
                        frontier_phi_84_pred_3 = _3302;
                        frontier_phi_84_pred_4 = _3301;
                        frontier_phi_84_pred_5 = _3306;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3522 = _3301;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        uint _3528 = _3316;
                        uint _3529;
                        vec4 _3554;
                        float _3555;
                        vec4 _3570;
                        vec3 _3582;
                        vec4 _3597;
                        vec4 _3613;
                        float _3660;
                        bool _3661;
                        for (;;)
                        {
                            uint _3539 = ((_3307 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3528));
                            _3529 = (_3528 + 4294967295u) & _3528;
                            uint _3541 = _3539 * 40u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3555 = _3554.w;
                            uint _3557 = (_3539 * 40u) + 4u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3539 * 40u) + 8u;
                            _3582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x));
                            uint _3584 = (_3539 * 40u) + 16u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3600 = (_3539 * 40u) + 20u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3616 = (_3539 * 40u) + 24u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3635 = (_3539 * 40u) + 28u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            _3660 = fma(_1976, _3648.z, fma(_1975, _3648.y, _3648.x * _1974)) + _3648.w;
                            _3661 = !((fma(_1976, _3629.z, fma(_1975, _3629.y, _3629.x * _1974)) + _3629.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3661)
                            {
                                float _3688 = _3554.x - _1974;
                                float _3689 = _3554.y - _1975;
                                float _3690 = _3554.z - _1976;
                                float _3691 = dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690));
                                float _3694 = inversesqrt(_3691);
                                float _3695 = _3694 * _3688;
                                float _3696 = _3694 * _3689;
                                float _3697 = _3694 * _3690;
                                float _3701 = 1.0 - (_3691 / (_3555 * _3555));
                                float _4943 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3706 = sqrt(_3691) * _3570.w;
                                float _3708 = 1.39999997615814208984375 / (_3706 + 1.39999997615814208984375);
                                float _3709 = _3708 * _3708;
                                float _3712 = ((1.0 - _3709) * dot(vec3(_3695, _3696, _3697), vec3(_805, _808, _811))) + _3709;
                                float _3715 = _3706 * _3706;
                                float _3719 = (fma(_1976, _3597.z, fma(_1975, _3597.y, _3597.x * _1974)) + _3597.w) / _3660;
                                float _3720 = (fma(_1976, _3613.z, fma(_1975, _3613.y, _3613.x * _1974)) + _3613.w) / _3660;
                                float _3724 = 1.0 - dot(vec2(_3719, _3720), vec2(_3719, _3720));
                                float _4959 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3726 = _3725 * (((isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0))) * _3702) / ((_3715 * 0.699999988079071044921875) + 1.0));
                                float _3738 = exp2(log2(1.0 / ((_3715 * 3.5) + 5.0)) * 0.25);
                                float _3739 = 1.0 - _880;
                                float _3746 = sqrt(1.0 - ((1.0 - (_3739 * _3739)) * (1.0 - (_3738 * _3738))));
                                float _3747 = _3746 * _3746;
                                float _3748 = _3747 * _3747;
                                float _3749 = _3695 - _3167;
                                float _3750 = _3696 - _3168;
                                float _3751 = _3697 - _3169;
                                float _3755 = inversesqrt(dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751)));
                                float _3759 = dot(vec3(_805, _808, _811), vec3((-0.0) - _3167, (-0.0) - _3168, (-0.0) - _3169));
                                float _4970 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3762 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3763 = dot(vec3(_805, _808, _811), vec3(_3755 * _3749, _3755 * _3750, _3755 * _3751));
                                float _4981 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3770 = ((_3766 * _3766) * (_3748 + (-1.0))) + 1.0;
                                float _3771 = _3708 * _3747;
                                float _3772 = _3771 * _3771;
                                float _3778 = ((1.0 - _3772) * dot(vec3(_805, _808, _811), vec3(_3695, _3696, _3697))) + _3772;
                                float _4992 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3780 = 1.0 - _3747;
                                float _3790 = (0.5 / (((_3779 * ((_3762 * _3780) + _3747)) + 9.9999999392252902907785028219223e-09) + (((_3779 * _3780) + _3747) * _3762))) * _3779;
                                float _5003 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3800 = (_3725 * _3702) * (((_3748 * 3.1415927410125732421875) * (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)))) / ((_3770 * _3770) * ((_3715 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3726 * _3570.y;
                                frontier_phi_90_pred_1 = _3726 * _3570.x;
                                frontier_phi_90_pred_2 = _3800 * _3582.z;
                                frontier_phi_90_pred_3 = _3800 * _3582.y;
                                frontier_phi_90_pred_4 = _3800 * _3582.x;
                                frontier_phi_90_pred_5 = _3726 * _3570.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3808 = frontier_phi_90_pred;
                            _3807 = frontier_phi_90_pred_1;
                            _3806 = frontier_phi_90_pred_2;
                            _3805 = frontier_phi_90_pred_3;
                            _3804 = frontier_phi_90_pred_4;
                            _3809 = frontier_phi_90_pred_5;
                            _3512 = _3807 + _3525;
                            _3513 = _3808 + _3526;
                            _3514 = _3809 + _3527;
                            _3509 = _3804 + _3522;
                            _3510 = _3805 + _3523;
                            _3511 = _3806 + _3524;
                            if (_3529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3529;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3513;
                        frontier_phi_84_pred_1 = _3512;
                        frontier_phi_84_pred_2 = _3511;
                        frontier_phi_84_pred_3 = _3510;
                        frontier_phi_84_pred_4 = _3509;
                        frontier_phi_84_pred_5 = _3514;
                    }
                    _3150 = frontier_phi_84_pred;
                    _3148 = frontier_phi_84_pred_1;
                    _3146 = frontier_phi_84_pred_2;
                    _3144 = frontier_phi_84_pred_3;
                    _3142 = frontier_phi_84_pred_4;
                    _3152 = frontier_phi_84_pred_5;
                    uint _3308 = _3307 + 1u;
                    if (_3308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3301 = _3142;
                        _3302 = _3144;
                        _3303 = _3146;
                        _3304 = _3148;
                        _3305 = _3150;
                        _3306 = _3152;
                        _3307 = _3308;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3152;
                frontier_phi_65_66_ladder_1 = _3148;
                frontier_phi_65_66_ladder_2 = _3150;
                frontier_phi_65_66_ladder_3 = _3144;
                frontier_phi_65_66_ladder_4 = _3142;
                frontier_phi_65_66_ladder_5 = _3146;
            }
            else
            {
                frontier_phi_65_66_ladder = _3031;
                frontier_phi_65_66_ladder_1 = _3027;
                frontier_phi_65_66_ladder_2 = _3029;
                frontier_phi_65_66_ladder_3 = _3023;
                frontier_phi_65_66_ladder_4 = _3021;
                frontier_phi_65_66_ladder_5 = _3025;
            }
            _3141 = frontier_phi_65_66_ladder_4;
            _3143 = frontier_phi_65_66_ladder_3;
            _3145 = frontier_phi_65_66_ladder_5;
            _3147 = frontier_phi_65_66_ladder_1;
            _3149 = frontier_phi_65_66_ladder_2;
            _3151 = frontier_phi_65_66_ladder;
        }
        float _3156 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _2927 = (_3156 * _3147) + _2440;
        _2929 = (_3156 * _3149) + _2442;
        _2931 = (_3156 * _3151) + _2444;
        _2933 = ((_3141 * _849) * _3156) + _2778;
        _2935 = ((_3143 * _851) * _3156) + _2780;
        _2937 = ((_3145 * _852) * _3156) + _2782;
    }
    else
    {
        _2927 = _2440;
        _2929 = _2442;
        _2931 = _2444;
        _2933 = _2778;
        _2935 = _2780;
        _2937 = _2782;
    }
    uint _2943 = _825 + uint(cbMatDynParam._m0[0u].w);
    float _5019 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _5030 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _5041 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _5052 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2975 = (((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2927 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _864))) + ((_2933 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1705)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * TEXCOORD_7.x) * ((_519 * _514.x) + cbMtdParam._m0[16u].x)) * cbInstanceData._m0[_2943].x);
    float _2977 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.y) * ((_519 * _514.y) + cbMtdParam._m0[16u].y)) * cbInstanceData._m0[_2943].y) + ((_2935 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1705)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2929 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _864)));
    float _2979 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.z) * ((_519 * _514.z) + cbMtdParam._m0[16u].z)) * cbInstanceData._m0[_2943].z) + ((_2937 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1705)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2931 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _864)));
    float _2980 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
    float _2981 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
    float _2982 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
    float _2987 = cbInstanceData._m0[_824 + 6u].w * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)));
    float _2992 = _785 / cbSceneParam._m0[86u].x;
    float _2993 = _786 / cbSceneParam._m0[86u].y;
    vec4 _3007 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2992, _2993, (log2((isnan(cbSceneParam._m0[77u].w) ? _707 : (isnan(_707) ? cbSceneParam._m0[77u].w : min(_707, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3009 = _3007.x;
    float _3010 = _3007.y;
    float _3011 = _3007.z;
    float _3012 = _3007.w;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    if (_707 > cbSceneParam._m0[78u].w)
    {
        float _3046 = isnan(_707) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _707 : min(cbSceneParam._m0[80u].w, _707));
        float _3047 = _3046 / _707;
        float _3058 = _3047 * _758;
        float _3059 = _759 * _3047;
        float _3060 = (-0.0) - _3059;
        float _3061 = _3047 * _760;
        float _3063 = (cbSceneParam._m0[77u].w * _3060) / _3046;
        float _3064 = _3063 + cbSceneParam._m0[79u].w;
        float _3065 = cbSceneParam._m0[79u].w - _3059;
        float _3071 = sqrt(((_3058 * _3058) + (_3059 * _3059)) + (_3061 * _3061));
        float _3074 = (1.0 - (cbSceneParam._m0[77u].w / _3046)) * _3071;
        float _3079 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3081 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3258;
        if (abs((_3060 - _3063) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3258 = ((((_3064 > 0.0) ? exp2(_3079 * _3064) : (2.0 - exp2(_3081 * _3064))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3074;
        }
        else
        {
            float _3202 = 1.0 / cbSceneParam._m0[80u].x;
            float _3203 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : max(_3064, _3065));
            float _3204 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : min(_3064, _3065));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            _3258 = ((abs(_3071 / _3060) * cbSceneParam._m0[80u].y) * ((((_3213 - _3214) * 2.0) - ((exp2(_3079 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0)))) - exp2(_3079 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))))) * _3202)) - ((exp2(_3081 * _3213) - exp2(_3081 * _3214)) * _3202))) + (_3074 * cbSceneParam._m0[80u].z);
        }
        vec4 _3260 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2992, _2993, 1.0), 0.0);
        float _3269 = exp2((_3258 * (-1.44269502162933349609375)) * (1.0 - _3260.w));
        float _3270 = log2(_3269);
        float _3286 = log2(_3012);
        _3083 = (exp2(_3286 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].x)) * _3260.x) / cbSceneParam._m0[78u].x)) + _3009;
        _3085 = (exp2(_3286 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].y)) * _3260.y) / cbSceneParam._m0[78u].y)) + _3010;
        _3087 = (exp2(_3286 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].z)) * _3260.z) / cbSceneParam._m0[78u].z)) + _3011;
        _3089 = _3269 * _3012;
    }
    else
    {
        _3083 = _3009;
        _3085 = _3010;
        _3087 = _3011;
        _3089 = _3012;
    }
    bool _3296;
    vec4 _3099;
    vec4 _3121;
    float _3123;
    float _3127;
    float _3128;
    float _3129;
    float _3130;
    bool _3140;
    for (;;)
    {
        _3099 = cbMatDynParam._m0[0u];
        float _3101 = roundEven(_3099.y);
        bool _3102 = _3101 == 3.0;
        float _3103 = log2(_3089);
        float _3110 = exp2(_3103 * cbSceneParam._m0[78u].x) * _2980;
        float _3111 = exp2(_3103 * cbSceneParam._m0[78u].y) * _2981;
        float _3112 = exp2(_3103 * cbSceneParam._m0[78u].z) * _2982;
        float _3119 = _774 + (-0.5);
        _3121 = cbMtdParam._m0[1u];
        _3123 = _3121.y * _3119;
        float _3126 = (_3101 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3127 = _3126 * (_3102 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3083)));
        _3128 = _3126 * (_3102 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3085)));
        _3129 = _3126 * (_3102 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3087)));
        _3130 = _3119 * 0.999000012874603271484375;
        _3140 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3140)
        {
            if ((cbInstanceData._m0[_824 + 7u].x + _3130) < 0.5)
            {
                _3296 = true;
                break;
            }
        }
        uint _3237 = _825 + uint(_3099.w);
        if ((cbInstanceData._m0[_3237].w < 1.0) && ((cbInstanceData._m0[_3237].w + _3130) < 0.5))
        {
            _3296 = true;
            break;
        }
        if ((_3123 + _399) < _3121.x)
        {
            _3296 = true;
            break;
        }
        _3296 = false;
        break;
    }
    float _3500;
    if (_3296)
    {
        discard_state = true;
        _3500 = 0.0;
    }
    else
    {
        _3500 = _2987;
    }
    SV_Target.x = _3127;
    SV_Target.y = _3128;
    SV_Target.z = _3129;
    SV_Target.w = _3500;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2987;
    discard_exit();
}


