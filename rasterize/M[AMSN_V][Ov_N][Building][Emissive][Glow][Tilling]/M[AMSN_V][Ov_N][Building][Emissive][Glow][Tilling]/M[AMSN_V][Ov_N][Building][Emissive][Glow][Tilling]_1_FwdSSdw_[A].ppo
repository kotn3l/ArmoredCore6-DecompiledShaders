#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1265;
float _3701;
float _3702;
float _3703;
float _3704;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _237 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _238 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _239 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _243 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _244 = _243 * _237;
    float _245 = _243 * _238;
    float _246 = _243 * _239;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _264 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _265 = _264 * TANGENT_2.x;
    float _266 = _264 * TANGENT_2.y;
    float _267 = _264 * TANGENT_2.z;
    float _272;
    float _273;
    float _274;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _272 = (-0.0) - _251;
        _273 = (-0.0) - _252;
        _274 = (-0.0) - _253;
    }
    else
    {
        _272 = _251;
        _273 = _252;
        _274 = _253;
    }
    float _296 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _308 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _296) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3713 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _311 = 1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)));
    float _312 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(1.0) ? _312 : (isnan(_312) ? 1.0 : min(_312, 1.0));
    float _321 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _296) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3734 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = 1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)));
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _343 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _345 = _343.x;
    float _346 = _343.y;
    float _347 = _343.z;
    float _348 = cbMtdParam._m0[11u].x * _325;
    float _350 = cbMtdParam._m0[11u].y * _325;
    float _352 = cbMtdParam._m0[11u].z * _325;
    float _372 = _323 + _311;
    float _373 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _374 = isnan(1.0) ? _373 : (isnan(_373) ? 1.0 : min(_373, 1.0));
    vec4 _392 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _397 = _392.w;
    float _398 = _392.x * cbMtdParam._m0[10u].x;
    float _399 = _392.y * cbMtdParam._m0[10u].y;
    float _400 = _392.z * cbMtdParam._m0[10u].z;
    float _415 = (_398 - (_374 * _398)) + ((((((_345 * (cbMtdParam._m0[9u].x - _348)) * _313) + (_348 * _345)) * 4.55000019073486328125) * _374) * _398);
    float _417 = (((((((_346 * (cbMtdParam._m0[9u].y - _350)) * _313) + (_350 * _346)) * 4.55000019073486328125) * _374) * _399) + _399) - (_374 * _399);
    float _419 = (((((((_347 * (cbMtdParam._m0[9u].z - _352)) * _313) + (_352 * _347)) * 4.55000019073486328125) * _374) * _400) + _400) - (_374 * _400);
    vec4 _436 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _440 = _436.z;
    float _444 = (_436.x * 2.0) + (-1.0);
    float _446 = (_436.y * 2.0) + (-1.0);
    float _447 = dot(vec2(_444, _446), vec2(_444, _446));
    float _3765 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _452 = sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))));
    float _455 = fma(_452, _272, fma(_446, _265, _444 * _244));
    float _458 = fma(_452, _273, fma(_446, _266, _444 * _245));
    float _461 = fma(_452, _274, fma(_446, _267, _444 * _246));
    float _465 = inversesqrt(dot(vec3(_455, _458, _461), vec3(_455, _458, _461)));
    float _466 = _465 * _455;
    float _467 = _465 * _458;
    float _468 = _465 * _461;
    float _486 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3776 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _492 = (_487 * _487) * (3.0 - (_487 * 2.0));
    float _493 = isnan(cbMtdParam._m0[14u].w) ? _492 : (isnan(_492) ? cbMtdParam._m0[14u].w : max(_492, cbMtdParam._m0[14u].w));
    vec4 _512 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _517 = (isnan(cbMtdParam._m0[12u].y) ? _493 : (isnan(_493) ? cbMtdParam._m0[12u].y : min(_493, cbMtdParam._m0[12u].y))) * cbMtdParam._m0[12u].z;
    vec4 _536 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _542 = (_536.x * 2.0) + (-1.0);
    float _543 = (_536.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3797 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))));
    float _552 = fma(_549, _272, fma(_543, _265, _542 * _244));
    float _555 = fma(_549, _273, fma(_543, _266, _542 * _245));
    float _558 = fma(_549, _274, fma(_543, _267, _542 * _246));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _568 = fma(_565, _227, fma(_564, _226, _563 * _225));
    float _571 = fma(_565, _260, fma(_564, _259, _563 * _258));
    float _574 = fma(_565, _274, fma(_564, _273, _563 * _272));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _582 = fma(_468, _227, fma(_467, _226, _466 * _225));
    float _585 = fma(_468, _260, fma(_467, _259, _466 * _258));
    float _588 = fma(_468, _274, fma(_467, _273, _466 * _272));
    float _592 = inversesqrt(dot(vec3(_582, _585, _588), vec3(_582, _585, _588)));
    float _595 = _592 * _588;
    vec4 _608 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _614 = (_608.x * 2.0) + (-1.0);
    float _615 = (_608.y * 2.0) + (-1.0);
    float _616 = dot(vec2(_614, _615), vec2(_614, _615));
    float _3808 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _621 = sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))));
    float _624 = fma(_621, _272, fma(_615, _265, _614 * _244));
    float _627 = fma(_621, _273, fma(_615, _266, _614 * _245));
    float _630 = fma(_621, _274, fma(_615, _267, _614 * _246));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _640 = fma(_637, _227, fma(_636, _226, _635 * _225));
    float _643 = fma(_637, _260, fma(_636, _259, _635 * _258));
    float _646 = fma(_637, _274, fma(_636, _273, _635 * _272));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _665 = ((_592 * _582) + (((_568 * _313) * _578) * cbMtdParam._m0[14u].z)) + (((_640 * _325) * _650) * cbMtdParam._m0[14u].y);
    float _667 = ((_592 * _585) + (((_571 * _313) * _578) * cbMtdParam._m0[14u].z)) + (((_643 * _325) * _650) * cbMtdParam._m0[14u].y);
    float _670 = fma(_595, _272, fma(_667, _258, _665 * _225));
    float _673 = fma(_595, _273, fma(_667, _259, _665 * _226));
    float _676 = fma(_595, _274, fma(_667, _260, _665 * _227));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _3819 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _684 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _685 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3852 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3863 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3874 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _689 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _756 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _746);
    float _757 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _746);
    float _758 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _746);
    float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
    float _763 = _756 * _762;
    float _764 = _757 * _762;
    float _765 = _758 * _762;
    vec4 _770 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _772 = _770.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _944 = sqrt(((_756 * _756) + (_757 * _757)) + (_758 * _758));
        float _950 = (cbMatDynParam._m0[5u].x * _944) + cbMatDynParam._m0[5u].y;
        float _3885 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _955 = (cbMatDynParam._m0[5u].z * _944) + cbMatDynParam._m0[5u].w;
        float _3896 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) - _951)) + _951) < ((_772 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_683, cbSceneParam._m0[5u].z, fma(_682, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _681));
    float _806 = fma(_683, cbSceneParam._m0[6u].z, fma(_682, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _681));
    float _809 = fma(_683, cbSceneParam._m0[7u].z, fma(_682, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _681));
    uint _822 = uint(roundEven(NORMAL.w)) * 13u;
    uint _823 = _822 + 9u;
    uint _824 = _823 + uint(cbMatDynParam._m0[0u].w);
    float _830 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_824].x;
    float _831 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_824].y;
    float _832 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_824].z;
    float _3907 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _836 = 1.0 - _689;
    float _837 = _833 * _836;
    float _838 = _834 * _836;
    float _839 = _835 * _836;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _689;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _689;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _689;
    float _847 = _844 + 0.039999999105930328369140625;
    float _849 = _845 + 0.039999999105930328369140625;
    float _850 = _846 + 0.039999999105930328369140625;
    vec4 _859 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _862 = _859.x * TEXCOORD_7.w;
    float _863 = dot(vec3(_681, _682, _683), vec3(_763, _764, _765));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _681) - _763;
    float _871 = (_866 * _682) - _764;
    float _872 = (_866 * _683) - _765;
    float _876 = abs(dot(vec3(_763, _764, _765), vec3(_681, _682, _683)));
    float _3940 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_685);
    float _890 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _896 = (1.0 - _890) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _897 = _890 * _878;
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1264;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _989 = fma(_933, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925));
        float _993 = fma(_933, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925));
        float _997 = fma(_933, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925));
        float _1022 = _925 + _681;
        float _1023 = _929 + _682;
        float _1024 = _933 + _683;
        float _1034 = fma(_1024, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022)) - _989;
        float _1035 = fma(_1024, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022)) - _993;
        float _1036 = fma(_1024, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022)) - _997;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_989 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_993 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[34u].z) + ((((((_997 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1092 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1058.x + (-0.5));
        float _1094 = _1092 * (_1058.y + (-0.5));
        float _1095 = _1092 * (_1058.z + (-0.5));
        float _1102 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1065.x + (-0.5));
        float _1104 = _1102 * (_1065.y + (-0.5));
        float _1105 = _1102 * (_1065.z + (-0.5));
        float _1112 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1072.x + (-0.5));
        float _1114 = _1112 * (_1072.y + (-0.5));
        float _1115 = _1112 * (_1072.z + (-0.5));
        float _1122 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1079.x + (-0.5));
        float _1124 = _1122 * (_1079.y + (-0.5));
        float _1125 = _1122 * (_1079.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1146 = (dot(vec3(_681, _682, _683), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1156 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3988 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1158 + 1.0))) + _1163) * _1126;
        float _1173 = _1094 * 0.5;
        float _1174 = _1104 * 0.5;
        float _1175 = _1114 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_681, _682, _683), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4021 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1200 + 1.0))) + _1205) * _1127;
        float _1215 = _1095 * 0.5;
        float _1216 = _1105 * 0.5;
        float _1217 = _1115 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_681, _682, _683), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4054 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1242 + 1.0))) + _1247) * _1128;
        _1264 = _1095;
        _1266 = _1094;
        _1267 = _1093;
        _1268 = _1105;
        _1269 = _1104;
        _1270 = _1103;
        _1271 = _1115;
        _1272 = _1114;
        _1273 = _1113;
        _1274 = _1128;
        _1275 = _1127;
        _1276 = _1126;
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _1265;
        _1266 = _1265;
        _1267 = _1265;
        _1268 = _1265;
        _1269 = _1265;
        _1270 = _1265;
        _1271 = _1265;
        _1272 = _1265;
        _1273 = _1265;
        _1274 = _1265;
        _1275 = _1265;
        _1276 = _1265;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1308 = fma(_933, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925));
        float _1312 = fma(_933, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925));
        float _1316 = fma(_933, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925));
        float _1339 = _925 + _681;
        float _1340 = _929 + _682;
        float _1341 = _933 + _683;
        float _1351 = fma(_1341, cbModelParam._m0[30u].z, fma(_1340, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1339)) - _1308;
        float _1352 = fma(_1341, cbModelParam._m0[31u].z, fma(_1340, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1339)) - _1312;
        float _1353 = fma(_1341, cbModelParam._m0[32u].z, fma(_1340, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1339)) - _1316;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1308 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1312 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[35u].z) + ((((((_1316 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1407 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1374.x + (-0.5));
        float _1409 = _1407 * (_1374.y + (-0.5));
        float _1410 = _1407 * (_1374.z + (-0.5));
        float _1417 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1381.x + (-0.5));
        float _1419 = _1417 * (_1381.y + (-0.5));
        float _1420 = _1417 * (_1381.z + (-0.5));
        float _1427 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1388.x + (-0.5));
        float _1429 = _1427 * (_1388.y + (-0.5));
        float _1430 = _1427 * (_1388.z + (-0.5));
        float _1437 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1395.x + (-0.5));
        float _1439 = _1437 * (_1395.y + (-0.5));
        float _1440 = _1437 * (_1395.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_681, _682, _683), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4117 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1471 + 1.0))) + _1476) * _1441;
        float _1486 = _1409 * 0.5;
        float _1487 = _1419 * 0.5;
        float _1488 = _1429 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_681, _682, _683), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4150 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1513 + 1.0))) + _1518) * _1442;
        float _1528 = _1410 * 0.5;
        float _1529 = _1420 * 0.5;
        float _1530 = _1430 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_681, _682, _683), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4183 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1555 + 1.0))) + _1560) * _1443;
        _1577 = _1410;
        _1578 = _1409;
        _1579 = _1408;
        _1580 = _1420;
        _1581 = _1419;
        _1582 = _1418;
        _1583 = _1430;
        _1584 = _1429;
        _1585 = _1428;
        _1586 = _1443;
        _1587 = _1442;
        _1588 = _1441;
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
    }
    else
    {
        _1577 = _1265;
        _1578 = _1265;
        _1579 = _1265;
        _1580 = _1265;
        _1581 = _1265;
        _1582 = _1265;
        _1583 = _1265;
        _1584 = _1265;
        _1585 = _1265;
        _1586 = _1265;
        _1587 = _1265;
        _1588 = _1265;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1277)) + _1277;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1278)) + _1278;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1279)) + _1279;
    float _1624 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1601));
    float _1645 = _870 * 0.5;
    float _1646 = _871 * 0.5;
    float _1647 = _872 * 0.5;
    float _1648 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1651 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1654 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1688;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1661 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1264, _1268, _1271, _1274));
        float _1665 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1669 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1676 = dot(vec4(cbModelParam._m0[39u]), vec4(_1645, _1646, _1647, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1699;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1690 = dot(vec4(cbModelParam._m0[40u]), vec4(_1645, _1646, _1647, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1703 = (_1699 * cbModelParam._m0[1u].x) + (_1688 * (1.0 - cbModelParam._m0[1u].x));
    float _1713 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _685);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1713 : min(cbModelParam._m0[25u].z, _1713));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1761 = fma(_933, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925)) + cbModelParam._m0[13u].w;
        float _1765 = fma(_933, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925)) + cbModelParam._m0[14u].w;
        float _1769 = fma(_933, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925)) + cbModelParam._m0[15u].w;
        float _1772 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1775 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1778 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1806;
        if (_1772 > 0.0)
        {
            _1806 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1806 = frontier_phi_19_17_ladder;
        }
        float _2032;
        if (_1775 > 0.0)
        {
            _2032 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2032 = frontier_phi_28_24_ladder;
        }
        float _2289;
        if (_1778 > 0.0)
        {
            _2289 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2289 = frontier_phi_40_35_ladder;
        }
        float _2291 = isnan(_2032) ? _1806 : (isnan(_1806) ? _2032 : min(_1806, _2032));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1772) + _1761;
        float _2297 = (_2292 * _1775) + _1765;
        float _2298 = (_2292 * _1778) + _1769;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1714);
            frontier_phi_18_40_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1794 = frontier_phi_18_40_ladder_2;
        _1796 = frontier_phi_18_40_ladder_1;
        _1798 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1714);
        _1794 = _1782.x * cbModelParam._m0[1u].y;
        _1796 = _1782.y * cbModelParam._m0[1u].y;
        _1798 = _1782.z * cbModelParam._m0[1u].y;
    }
    float _1802 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _685);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1802 : min(cbModelParam._m0[25u].w, _1802));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_933, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_933, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_933, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1873 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1876 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _2037;
        if (_1870 > 0.0)
        {
            _2037 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2037 = frontier_phi_30_26_ladder;
        }
        float _2316;
        if (_1873 > 0.0)
        {
            _2316 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2316 = frontier_phi_42_37_ladder;
        }
        float _2529;
        if (_1876 > 0.0)
        {
            _2529 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2529 = frontier_phi_51_48_ladder;
        }
        float _2531 = isnan(_2316) ? _2037 : (isnan(_2037) ? _2316 : min(_2037, _2316));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _1870) + _1859;
        float _2537 = (_2532 * _1873) + _1863;
        float _2538 = (_2532 * _1876) + _1867;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2540 = (-1.0) - _2539;
        float _2542 = _2539 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2538 > _2542) || ((_2538 < _2540) || ((_2537 > _2542) || ((_2537 < _2540) || ((_2536 < _2540) || (_2536 > _2542))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2538, cbModelParam._m0[17u].z, fma(_2537, cbModelParam._m0[17u].y, _2536 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2538, cbModelParam._m0[18u].z, fma(_2537, cbModelParam._m0[18u].y, _2536 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2538, cbModelParam._m0[19u].z, fma(_2537, cbModelParam._m0[19u].y, _2536 * cbModelParam._m0[19u].x))), _1803);
            frontier_phi_27_51_ladder = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_27_51_ladder_2;
        _1897 = frontier_phi_27_51_ladder_1;
        _1899 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1803);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1912 = (((_896 * _847) + _897) * _862) * ((cbModelParam._m0[1u].w * (_1895 - _1794)) + _1794);
    float _1914 = (((_896 * _849) + _897) * _862) * ((cbModelParam._m0[1u].w * (_1897 - _1796)) + _1796);
    float _1916 = (((_896 * _850) + _897) * _862) * ((cbModelParam._m0[1u].w * (_1899 - _1798)) + _1798);
    float _1919 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1922 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1925 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    vec4 _1933 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_783, _784));
    float _1935 = _1933.w;
    float _1947 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1935);
    float _1948 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1935);
    float _1949 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1935);
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_822 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1963 = _862 + (-1.0);
    float _1968 = (cbLight._m0[_1956].x * _1963) + 1.0;
    float _1969 = (cbLight._m0[_1956].y * _1963) + 1.0;
    float _1970 = (cbLight._m0[_1956].z * _1963) + 1.0;
    float _1971 = (cbLight._m0[_1956].w * _1963) + 1.0;
    uint _1972 = _1955 + 5u;
    float _1978 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1982 = _1955 + 4u;
    float _1991 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1995 = _1955 | 1u;
    float _2006 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_681, _682, _683));
    float _2009 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_681, _682, _683));
    float _4319 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _4330 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2014 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2016 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2023 = ((cbLight._m0[_1972].x * _1978) * _2016) + (((cbLight._m0[_1982].x * _1947) * _1991) * _2014);
    float _2024 = ((_1978 * cbLight._m0[_1972].y) * _2016) + (((cbLight._m0[_1982].y * _1948) * _1991) * _2014);
    float _2025 = ((_1978 * cbLight._m0[_1972].z) * _2016) + (((cbLight._m0[_1982].z * _1949) * _1991) * _2014);
    uvec4 _2029 = floatBitsToUint(cbLight._m0[_1955 + 12u]);
    bool _2031 = _2029.x == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_2031)
    {
        _2042 = _2023;
        _2044 = _2024;
        _2046 = _2025;
    }
    else
    {
        uint _2050 = _1955 + 6u;
        float _2066 = (dot(vec3(cbLight._m0[_1955 + 2u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4341 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2069 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2042 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _2023;
        _2044 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _2024;
        _2046 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _2025;
    }
    bool _2049 = _2029.y == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2049)
    {
        _2087 = _2042;
        _2089 = _2044;
        _2091 = _2046;
    }
    else
    {
        uint _2260 = _1955 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1955 + 3u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4357 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2279 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2087 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2042;
        _2089 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2044;
        _2091 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2046;
    }
    uint _2094 = _1955 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _685) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1955].x + _763;
    float _2110 = cbLight._m0[_1955].y + _764;
    float _2111 = cbLight._m0[_1955].z + _765;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1955].xyz));
    float _4373 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2123 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2124 = dot(vec3(_681, _682, _683), vec3(_2116, _2117, _2118));
    float _4395 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2116, _2117, _2118));
    float _4406 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
    float _2145 = 0.959999978542327880859375 - _844;
    float _2147 = 0.959999978542327880859375 - _845;
    float _2148 = 0.959999978542327880859375 - _846;
    float _2155 = 1.0 - _2108;
    float _2166 = (0.5 / (((_2123 * ((_2122 * _2155) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2155) + _2108) * _2122))) * _2122;
    float _4417 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2182 = _1955 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _685) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_1995].x + _763;
    float _2196 = cbLight._m0[_1995].y + _764;
    float _2197 = cbLight._m0[_1995].z + _765;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1995].xyz));
    float _4428 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2209 = dot(vec3(_681, _682, _683), vec3(_2202, _2203, _2204));
    float _4439 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2202, _2203, _2204));
    float _4450 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2235 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2123 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2235) + _2194) * _2208))) * _2208;
    float _4461 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2257 = (((((_2228 * _2145) + _847) * cbLight._m0[_2182].x) * _2247) * _1978) + ((((cbLight._m0[_2094].x * _1947) * ((_2144 * _2145) + _847)) * _2168) * _1991);
    float _2258 = (((((_2228 * _2147) + _849) * cbLight._m0[_2182].y) * _2247) * _1978) + ((((cbLight._m0[_2094].y * _1948) * ((_2144 * _2147) + _849)) * _2168) * _1991);
    float _2259 = (((((_2228 * _2148) + _850) * cbLight._m0[_2182].z) * _2247) * _1978) + ((((cbLight._m0[_2094].z * _1949) * ((_2144 * _2148) + _850)) * _2168) * _1991);
    float _2321;
    float _2323;
    float _2325;
    if (_2031)
    {
        _2321 = _2257;
        _2323 = _2258;
        _2325 = _2259;
    }
    else
    {
        uint _2327 = _1955 + 2u;
        uint _2331 = _1955 + 10u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _685) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _763;
        float _2348 = cbLight._m0[_2327].y + _764;
        float _2349 = cbLight._m0[_2327].z + _765;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2327].xyz));
        float _4472 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2361 = dot(vec3(_681, _682, _683), vec3(_2354, _2355, _2356));
        float _4483 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4494 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
        float _2387 = 1.0 - _2346;
        float _2397 = (0.5 / (((_2123 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2387) + _2346) * _2360))) * _2360;
        float _4505 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2321 = (((((_2380 * _2145) + _847) * cbLight._m0[_2331].x) * _2399) * _2400) + _2257;
        _2323 = (((((_2380 * _2147) + _849) * cbLight._m0[_2331].y) * _2399) * _2400) + _2258;
        _2325 = (((((_2380 * _2148) + _850) * cbLight._m0[_2331].z) * _2399) * _2400) + _2259;
    }
    float _2435;
    float _2437;
    float _2439;
    if (_2049)
    {
        _2435 = _2321;
        _2437 = _2323;
        _2439 = _2325;
    }
    else
    {
        uint _2446 = _1955 + 3u;
        uint _2450 = _1955 + 11u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _685) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _763;
        float _2467 = cbLight._m0[_2446].y + _764;
        float _2468 = cbLight._m0[_2446].z + _765;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2446].xyz));
        float _4521 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2480 = dot(vec3(_681, _682, _683), vec3(_2473, _2474, _2475));
        float _4532 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4543 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2499 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2506 = 1.0 - _2465;
        float _2516 = (0.5 / (((_2123 * ((_2479 * _2506) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2506) + _2465) * _2479))) * _2479;
        float _4554 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2435 = (((((_2499 * _2145) + _847) * cbLight._m0[_2450].x) * _2518) * _2519) + _2321;
        _2437 = (((((_2499 * _2147) + _849) * cbLight._m0[_2450].y) * _2518) * _2519) + _2323;
        _2439 = (((((_2499 * _2148) + _850) * cbLight._m0[_2450].z) * _2518) * _2519) + _2325;
    }
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_1953.y == 0u)
    {
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2594;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2594;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2594;
        uvec4 _2609 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2610 = _2609.x;
        uint _2621 = uint((float(_2609.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2610))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2610)));
        float _2631 = (log2(_2597 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2632 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        uint _2635 = uint(isnan(14.0) ? _2632 : (isnan(_2632) ? 14.0 : min(_2632, 14.0)));
        uvec4 _2640 = texelFetch(g_lightClusterGridBuffer, int(((_2635 << 2u) + (_2621 << 6u)) >> 2u));
        uint _2641 = _2640.x;
        uint _2642 = _2609.z;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((((1u << ((_2642 >> 4u) & 15u)) + 4294967295u) & _2641) == 0u) || ((_2642 & 240u) == 0u))
        {
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
        }
        else
        {
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            uint _2926 = 0u;
            uint _2935;
            bool _2936;
            for (;;)
            {
                _2935 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                _2936 = _2935 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2936)
                {
                    frontier_phi_68_pred = _2922;
                    frontier_phi_68_pred_1 = _2925;
                    frontier_phi_68_pred_2 = _2924;
                    frontier_phi_68_pred_3 = _2923;
                    frontier_phi_68_pred_4 = _2921;
                    frontier_phi_68_pred_5 = _2920;
                }
                else
                {
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    uint _3071;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2935;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    for (;;)
                    {
                        uint _3075 = uint(findLSB(_3071)) + (_2926 << 5u);
                        uint _3072 = (_3071 + 4294967295u) & _3071;
                        uint _3077 = _3075 * 48u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 3u)).x));
                        uint _3097 = (_3075 * 48u) + 4u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3116 = (_3075 * 48u) + 8u;
                        vec3 _3127 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x));
                        float _3131 = _3091.x - _2595;
                        float _3132 = _3091.y - _2596;
                        float _3133 = _3091.z - _2597;
                        float _3134 = dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133));
                        float _3137 = inversesqrt(_3134);
                        float _3138 = _3137 * _3131;
                        float _3139 = _3137 * _3132;
                        float _3140 = _3137 * _3133;
                        float _3141 = dot(vec3(_803, _806, _809), vec3(_3138, _3139, _3140));
                        float _3146 = 1.0 - (_3134 * _3091.w);
                        float _4580 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3147 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3148 = sqrt(_3134) * _3110.w;
                        float _3151 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3141) + _3152;
                        float _3158 = _3148 * _3148;
                        float _3162 = ((isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))) * _3147) / ((_3158 * 0.699999988079071044921875) + 1.0);
                        float _3166 = (-0.0) - _2595;
                        float _3167 = (-0.0) - _2596;
                        float _3168 = (-0.0) - _2597;
                        float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                        float _3173 = _3172 * _3166;
                        float _3174 = _3172 * _3167;
                        float _3175 = _3172 * _3168;
                        float _3183 = exp2(log2(1.0 / ((_3158 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _878;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3173 + _3138;
                        float _3195 = _3174 + _3139;
                        float _3196 = _3175 + _3140;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_803, _806, _809), vec3(_3173, _3174, _3175));
                        float _4596 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3208 = dot(vec3(_803, _806, _809), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4607 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3151 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3141) + _3217;
                        float _4618 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4629 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3243 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3215 * _3215) * ((_3158 * 2.1991131305694580078125) + 3.141590118408203125))) * _3147;
                        _2995 = (_3162 * _3110.x) + _3068;
                        _2996 = (_3162 * _3110.y) + _3069;
                        _2997 = (_3162 * _3110.z) + _3070;
                        _2992 = (_3243 * _3127.x) + _3065;
                        _2993 = (_3243 * _3127.y) + _3066;
                        _2994 = (_3243 * _3127.z) + _3067;
                        if (_3072 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _3072;
                        }
                    }
                    frontier_phi_68_pred = _2994;
                    frontier_phi_68_pred_1 = _2997;
                    frontier_phi_68_pred_2 = _2996;
                    frontier_phi_68_pred_3 = _2995;
                    frontier_phi_68_pred_4 = _2993;
                    frontier_phi_68_pred_5 = _2992;
                }
                _2773 = frontier_phi_68_pred;
                _2779 = frontier_phi_68_pred_1;
                _2777 = frontier_phi_68_pred_2;
                _2775 = frontier_phi_68_pred_3;
                _2771 = frontier_phi_68_pred_4;
                _2769 = frontier_phi_68_pred_5;
                uint _2927 = _2926 + 1u;
                if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2920 = _2769;
                    _2921 = _2771;
                    _2922 = _2773;
                    _2923 = _2775;
                    _2924 = _2777;
                    _2925 = _2779;
                    _2926 = _2927;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
        }
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.z;
        uint _2785 = (_2783 >> 8u) & 15u;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        if (((4294967295u << _2785) & _2641) == 0u)
        {
            _2888 = _2768;
            _2890 = _2770;
            _2892 = _2772;
            _2894 = _2774;
            _2896 = _2776;
            _2898 = _2778;
        }
        else
        {
            float _2913 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
            float _2914 = _2913 * _2595;
            float _2915 = _2913 * _2596;
            float _2916 = _2913 * _2597;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2785 < ((_2783 >> 12u) & 15u))
            {
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _3048 = _2768;
                float _3049 = _2770;
                float _3050 = _2772;
                float _3051 = _2774;
                float _3052 = _2776;
                float _3053 = _2778;
                uint _3054 = _2785;
                uint _3063;
                bool _3064;
                for (;;)
                {
                    _3063 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                    _3064 = _3063 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3064)
                    {
                        frontier_phi_79_pred = _3053;
                        frontier_phi_79_pred_1 = _3052;
                        frontier_phi_79_pred_2 = _3051;
                        frontier_phi_79_pred_3 = _3050;
                        frontier_phi_79_pred_4 = _3049;
                        frontier_phi_79_pred_5 = _3048;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3270 = _3048;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        uint _3276 = _3063;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3345;
                        vec4 _3361;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3287 = ((_3054 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3332 = (_3287 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3287 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3364 = (_3287 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3287 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_2597, _3396.z, fma(_2596, _3396.y, _3396.x * _2595)) + _3396.w;
                            _3409 = !((fma(_2597, _3377.z, fma(_2596, _3377.y, _3377.x * _2595)) + _3377.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3302.x - _2595;
                                float _3437 = _3302.y - _2596;
                                float _3438 = _3302.z - _2597;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3303 * _3303));
                                float _4640 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3454 = sqrt(_3439) * _3318.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_803, _806, _809))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_2597, _3345.z, fma(_2596, _3345.y, _3345.x * _2595)) + _3345.w) / _3408;
                                float _3468 = (fma(_2597, _3361.z, fma(_2596, _3361.y, _3361.x * _2595)) + _3361.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4656 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _878;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2914;
                                float _3498 = _3444 - _2915;
                                float _3499 = _3445 - _2916;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_803, _806, _809), vec3((-0.0) - _2914, (-0.0) - _2915, (-0.0) - _2916));
                                float _4667 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3511 = dot(vec3(_803, _806, _809), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4678 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_803, _806, _809), vec3(_3443, _3444, _3445))) + _3520;
                                float _4689 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4700 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3474 * _3318.z;
                                frontier_phi_85_pred_1 = _3474 * _3318.y;
                                frontier_phi_85_pred_2 = _3474 * _3318.x;
                                frontier_phi_85_pred_3 = _3548 * _3330.z;
                                frontier_phi_85_pred_4 = _3548 * _3330.y;
                                frontier_phi_85_pred_5 = _3548 * _3330.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_85_pred;
                            _3556 = frontier_phi_85_pred_1;
                            _3555 = frontier_phi_85_pred_2;
                            _3554 = frontier_phi_85_pred_3;
                            _3553 = frontier_phi_85_pred_4;
                            _3552 = frontier_phi_85_pred_5;
                            _3260 = _3555 + _3273;
                            _3261 = _3556 + _3274;
                            _3262 = _3557 + _3275;
                            _3257 = _3552 + _3270;
                            _3258 = _3553 + _3271;
                            _3259 = _3554 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3262;
                        frontier_phi_79_pred_1 = _3261;
                        frontier_phi_79_pred_2 = _3260;
                        frontier_phi_79_pred_3 = _3259;
                        frontier_phi_79_pred_4 = _3258;
                        frontier_phi_79_pred_5 = _3257;
                    }
                    _2899 = frontier_phi_79_pred;
                    _2897 = frontier_phi_79_pred_1;
                    _2895 = frontier_phi_79_pred_2;
                    _2893 = frontier_phi_79_pred_3;
                    _2891 = frontier_phi_79_pred_4;
                    _2889 = frontier_phi_79_pred_5;
                    uint _3055 = _3054 + 1u;
                    if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3048 = _2889;
                        _3049 = _2891;
                        _3050 = _2893;
                        _3051 = _2895;
                        _3052 = _2897;
                        _3053 = _2899;
                        _3054 = _3055;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2895;
                frontier_phi_60_61_ladder_1 = _2899;
                frontier_phi_60_61_ladder_2 = _2897;
                frontier_phi_60_61_ladder_3 = _2893;
                frontier_phi_60_61_ladder_4 = _2891;
                frontier_phi_60_61_ladder_5 = _2889;
            }
            else
            {
                frontier_phi_60_61_ladder = _2774;
                frontier_phi_60_61_ladder_1 = _2778;
                frontier_phi_60_61_ladder_2 = _2776;
                frontier_phi_60_61_ladder_3 = _2772;
                frontier_phi_60_61_ladder_4 = _2770;
                frontier_phi_60_61_ladder_5 = _2768;
            }
            _2888 = frontier_phi_60_61_ladder_5;
            _2890 = frontier_phi_60_61_ladder_4;
            _2892 = frontier_phi_60_61_ladder_3;
            _2894 = frontier_phi_60_61_ladder;
            _2896 = frontier_phi_60_61_ladder_2;
            _2898 = frontier_phi_60_61_ladder_1;
        }
        float _2903 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2653 = (_2903 * _2894) + _2087;
        _2655 = (_2903 * _2896) + _2089;
        _2657 = (_2903 * _2898) + _2091;
        _2659 = ((_2888 * _847) * _2903) + _2435;
        _2661 = ((_2890 * _849) * _2903) + _2437;
        _2663 = ((_2892 * _850) * _2903) + _2439;
    }
    else
    {
        _2653 = _2087;
        _2655 = _2089;
        _2657 = _2091;
        _2659 = _2435;
        _2661 = _2437;
        _2663 = _2439;
    }
    uint _2669 = _823 + uint(cbMatDynParam._m0[0u].w);
    float _4716 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4727 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4738 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4749 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2701 = (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2653 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _862))) + ((_2659 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1703)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * TEXCOORD_7.x) * ((_517 * _512.x) + cbMtdParam._m0[16u].x)) * cbInstanceData._m0[_2669].x);
    float _2703 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.y) * ((_517 * _512.y) + cbMtdParam._m0[16u].y)) * cbInstanceData._m0[_2669].y) + ((_2661 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1703)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2655 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _862)));
    float _2705 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.z) * ((_517 * _512.z) + cbMtdParam._m0[16u].z)) * cbInstanceData._m0[_2669].z) + ((_2663 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1703)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2657 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _862)));
    float _2706 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2707 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2708 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2713 = cbInstanceData._m0[_822 + 6u].w * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)));
    float _2718 = _783 / cbSceneParam._m0[86u].x;
    float _2719 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2733 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2735 = _2733.x;
    float _2736 = _2733.y;
    float _2737 = _2733.z;
    float _2738 = _2733.w;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2793 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2794 = _2793 / _705;
        float _2805 = _2794 * _756;
        float _2806 = _757 * _2794;
        float _2807 = (-0.0) - _2806;
        float _2808 = _2794 * _758;
        float _2810 = (cbSceneParam._m0[77u].w * _2807) / _2793;
        float _2811 = _2810 + cbSceneParam._m0[79u].w;
        float _2812 = cbSceneParam._m0[79u].w - _2806;
        float _2818 = sqrt(((_2805 * _2805) + (_2806 * _2806)) + (_2808 * _2808));
        float _2821 = (1.0 - (cbSceneParam._m0[77u].w / _2793)) * _2818;
        float _2826 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2828 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3005;
        if (abs((_2807 - _2810) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3005 = ((((_2811 > 0.0) ? exp2(_2826 * _2811) : (2.0 - exp2(_2828 * _2811))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2821;
        }
        else
        {
            float _2949 = 1.0 / cbSceneParam._m0[80u].x;
            float _2950 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : max(_2811, _2812));
            float _2951 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : min(_2811, _2812));
            float _2960 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : min(_2950, 0.0));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            _3005 = ((abs(_2818 / _2807) * cbSceneParam._m0[80u].y) * ((((_2960 - _2961) * 2.0) - ((exp2(_2826 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0)))) - exp2(_2826 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0))))) * _2949)) - ((exp2(_2828 * _2960) - exp2(_2828 * _2961)) * _2949))) + (_2821 * cbSceneParam._m0[80u].z);
        }
        vec4 _3007 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, 1.0), 0.0);
        float _3016 = exp2((_3005 * (-1.44269502162933349609375)) * (1.0 - _3007.w));
        float _3017 = log2(_3016);
        float _3033 = log2(_2738);
        _2830 = (exp2(_3033 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].x)) * _3007.x) / cbSceneParam._m0[78u].x)) + _2735;
        _2832 = (exp2(_3033 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].y)) * _3007.y) / cbSceneParam._m0[78u].y)) + _2736;
        _2834 = (exp2(_3033 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].z)) * _3007.z) / cbSceneParam._m0[78u].z)) + _2737;
        _2836 = _3016 * _2738;
    }
    else
    {
        _2830 = _2735;
        _2832 = _2736;
        _2834 = _2737;
        _2836 = _2738;
    }
    bool _3043;
    vec4 _2846;
    vec4 _2868;
    float _2870;
    float _2874;
    float _2875;
    float _2876;
    float _2877;
    bool _2887;
    for (;;)
    {
        _2846 = cbMatDynParam._m0[0u];
        float _2848 = roundEven(_2846.y);
        bool _2849 = _2848 == 3.0;
        float _2850 = log2(_2836);
        float _2857 = exp2(_2850 * cbSceneParam._m0[78u].x) * _2706;
        float _2858 = exp2(_2850 * cbSceneParam._m0[78u].y) * _2707;
        float _2859 = exp2(_2850 * cbSceneParam._m0[78u].z) * _2708;
        float _2866 = _772 + (-0.5);
        _2868 = cbMtdParam._m0[1u];
        _2870 = _2868.y * _2866;
        float _2873 = (_2848 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2874 = _2873 * (_2849 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2830)));
        _2875 = _2873 * (_2849 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2832)));
        _2876 = _2873 * (_2849 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2834)));
        _2877 = _2866 * 0.999000012874603271484375;
        _2887 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2887)
        {
            if ((cbInstanceData._m0[_822 + 7u].x + _2877) < 0.5)
            {
                _3043 = true;
                break;
            }
        }
        uint _2984 = _823 + uint(_2846.w);
        if ((cbInstanceData._m0[_2984].w < 1.0) && ((cbInstanceData._m0[_2984].w + _2877) < 0.5))
        {
            _3043 = true;
            break;
        }
        if ((_2870 + _397) < _2868.x)
        {
            _3043 = true;
            break;
        }
        _3043 = false;
        break;
    }
    float _3248;
    if (_3043)
    {
        discard_state = true;
        _3248 = 0.0;
    }
    else
    {
        _3248 = _2713;
    }
    SV_Target.x = _2874;
    SV_Target.y = _2875;
    SV_Target.z = _2876;
    SV_Target.w = _3248;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2713;
    discard_exit();
}


