#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1153;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _220 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _221 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _222 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _226 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _227 = _226 * _220;
    float _228 = _226 * _221;
    float _229 = _226 * _222;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    float _247 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _248 = _247 * TANGENT_2.x;
    float _249 = _247 * TANGENT_2.y;
    float _250 = _247 * TANGENT_2.z;
    float _255;
    float _256;
    float _257;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _255 = (-0.0) - _234;
        _256 = (-0.0) - _235;
        _257 = (-0.0) - _236;
    }
    else
    {
        _255 = _234;
        _256 = _235;
        _257 = _236;
    }
    float _280 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _292 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _280) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3516 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _295 = 1.0 - (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)));
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _305 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _280) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3537 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = 1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)));
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _327 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _329 = _327.x;
    float _330 = _327.y;
    float _331 = _327.z;
    float _332 = cbMtdParam._m0[11u].x * _309;
    float _334 = cbMtdParam._m0[11u].y * _309;
    float _336 = cbMtdParam._m0[11u].z * _309;
    float _356 = _307 + _295;
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = isnan(1.0) ? _357 : (isnan(_357) ? 1.0 : min(_357, 1.0));
    vec4 _376 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _381 = _376.w;
    float _382 = _376.x * cbMtdParam._m0[10u].x;
    float _383 = _376.y * cbMtdParam._m0[10u].y;
    float _384 = _376.z * cbMtdParam._m0[10u].z;
    float _399 = (_382 - (_358 * _382)) + ((((((_329 * (cbMtdParam._m0[9u].x - _332)) * _297) + (_332 * _329)) * 4.55000019073486328125) * _358) * _382);
    float _401 = (((((((_330 * (cbMtdParam._m0[9u].y - _334)) * _297) + (_334 * _330)) * 4.55000019073486328125) * _358) * _383) + _383) - (_358 * _383);
    float _403 = (((((((_331 * (cbMtdParam._m0[9u].z - _336)) * _297) + (_336 * _331)) * 4.55000019073486328125) * _358) * _384) + _384) - (_358 * _384);
    vec4 _420 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _424 = _420.z;
    float _428 = (_420.x * 2.0) + (-1.0);
    float _430 = (_420.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3568 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))));
    float _439 = fma(_436, _255, fma(_430, _248, _428 * _227));
    float _442 = fma(_436, _256, fma(_430, _249, _428 * _228));
    float _445 = fma(_436, _257, fma(_430, _250, _428 * _229));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _450 = _449 * _439;
    float _451 = _449 * _442;
    float _452 = _449 * _445;
    vec4 _464 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _470 = (_464.x * 2.0) + (-1.0);
    float _471 = (_464.y * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3579 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))));
    float _480 = fma(_477, _255, fma(_471, _248, _470 * _227));
    float _483 = fma(_477, _256, fma(_471, _249, _470 * _228));
    float _486 = fma(_477, _257, fma(_471, _250, _470 * _229));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    float _491 = _490 * _480;
    float _492 = _490 * _483;
    float _493 = _490 * _486;
    float _496 = fma(_493, _210, fma(_492, _209, _491 * _208));
    float _499 = fma(_493, _243, fma(_492, _242, _491 * _241));
    float _502 = fma(_493, _257, fma(_492, _256, _491 * _255));
    float _506 = inversesqrt(dot(vec3(_496, _499, _502), vec3(_496, _499, _502)));
    float _510 = fma(_452, _210, fma(_451, _209, _450 * _208));
    float _513 = fma(_452, _243, fma(_451, _242, _450 * _241));
    float _516 = fma(_452, _257, fma(_451, _256, _450 * _255));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _523 = _520 * _516;
    vec4 _536 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _542 = (_536.x * 2.0) + (-1.0);
    float _543 = (_536.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3590 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))));
    float _552 = fma(_549, _255, fma(_543, _248, _542 * _227));
    float _555 = fma(_549, _256, fma(_543, _249, _542 * _228));
    float _558 = fma(_549, _257, fma(_543, _250, _542 * _229));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _568 = fma(_565, _210, fma(_564, _209, _563 * _208));
    float _571 = fma(_565, _243, fma(_564, _242, _563 * _241));
    float _574 = fma(_565, _257, fma(_564, _256, _563 * _255));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _593 = ((_520 * _510) + (((_496 * _297) * _506) * cbMtdParam._m0[14u].z)) + (((_568 * _309) * _578) * cbMtdParam._m0[14u].y);
    float _595 = ((_520 * _513) + (((_499 * _297) * _506) * cbMtdParam._m0[14u].z)) + (((_571 * _309) * _578) * cbMtdParam._m0[14u].y);
    float _598 = fma(_523, _255, fma(_595, _241, _593 * _208));
    float _601 = fma(_523, _256, fma(_595, _242, _593 * _209));
    float _604 = fma(_523, _257, fma(_595, _243, _593 * _210));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    float _609 = _608 * _598;
    float _610 = _608 * _601;
    float _611 = _608 * _604;
    float _3601 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _612 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _613 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3634 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3645 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3656 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _617 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _633 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_611, cbSceneParam._m0[5u].z, fma(_610, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _609));
    float _722 = fma(_611, cbSceneParam._m0[6u].z, fma(_610, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _609));
    float _725 = fma(_611, cbSceneParam._m0[7u].z, fma(_610, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _609));
    uint _738 = uint(roundEven(NORMAL.w)) * 13u;
    uint _740 = (_738 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _746 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_740].x;
    float _747 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_740].y;
    float _748 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_740].z;
    float _3667 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _752 = 1.0 - _617;
    float _753 = _749 * _752;
    float _754 = _750 * _752;
    float _755 = _751 * _752;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _617;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _617;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _617;
    float _763 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    vec4 _775 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _778 = _775.x * TEXCOORD_7.w;
    float _779 = dot(vec3(_609, _610, _611), vec3(_691, _692, _693));
    float _782 = _779 * 2.0;
    float _786 = (_782 * _609) - _691;
    float _787 = (_782 * _610) - _692;
    float _788 = (_782 * _611) - _693;
    float _792 = abs(dot(vec3(_691, _692, _693), vec3(_609, _610, _611)));
    float _3700 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _794 = sqrt(_613);
    float _807 = exp2((_794 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_794 * 3.0));
    float _813 = (1.0 - _807) * ((_794 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _814 = _807 * _794;
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _881 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _885 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _910 = _842 + _609;
        float _911 = _846 + _610;
        float _912 = _850 + _611;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _877;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _881;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _885;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_877 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_881 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_885 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_609, _610, _611), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3748 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_609, _610, _611), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3781 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_609, _610, _611), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3814 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1197 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1201 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1224 = _842 + _609;
        float _1225 = _846 + _610;
        float _1226 = _850 + _611;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_609, _610, _611), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3877 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_609, _610, _611), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3910 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_609, _610, _611), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3943 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1153;
        _1463 = _1153;
        _1464 = _1153;
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = _1153;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1165)) + _1165;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1166)) + _1166;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _786 * 0.5;
    float _1531 = _787 * 0.5;
    float _1532 = _788 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1646 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1650 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1654 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1657 = fma(_788, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786));
        float _1660 = fma(_788, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786));
        float _1663 = fma(_788, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786));
        float _1691;
        if (_1657 > 0.0)
        {
            _1691 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1691 = frontier_phi_16_14_ladder;
        }
        float _1919;
        if (_1660 > 0.0)
        {
            _1919 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1919 = frontier_phi_25_21_ladder;
        }
        float _2176;
        if (_1663 > 0.0)
        {
            _2176 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2176 = frontier_phi_37_32_ladder;
        }
        float _2178 = isnan(_1919) ? _1691 : (isnan(_1691) ? _1919 : min(_1691, _1919));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1657) + _1646;
        float _2184 = (_2179 * _1660) + _1650;
        float _2185 = (_2179 * _1663) + _1654;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_15_37_ladder = _2313.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2313.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2313.x * cbModelParam._m0[1u].y;
        }
        _1679 = frontier_phi_15_37_ladder_2;
        _1681 = frontier_phi_15_37_ladder_1;
        _1683 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_786, _787, _788), _1599);
        _1679 = _1667.x * cbModelParam._m0[1u].y;
        _1681 = _1667.y * cbModelParam._m0[1u].y;
        _1683 = _1667.z * cbModelParam._m0[1u].y;
    }
    float _1687 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1687 : min(cbModelParam._m0[25u].w, _1687));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_788, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786));
        float _1759 = fma(_788, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786));
        float _1762 = fma(_788, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786));
        float _1924;
        if (_1756 > 0.0)
        {
            _1924 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1924 = frontier_phi_27_23_ladder;
        }
        float _2203;
        if (_1759 > 0.0)
        {
            _2203 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2203 = frontier_phi_39_34_ladder;
        }
        float _2416;
        if (_1762 > 0.0)
        {
            _2416 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2416 = frontier_phi_48_45_ladder;
        }
        float _2418 = isnan(_2203) ? _1924 : (isnan(_1924) ? _2203 : min(_1924, _2203));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1756) + _1745;
        float _2424 = (_2419 * _1759) + _1749;
        float _2425 = (_2419 * _1762) + _1753;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2426;
        float _2429 = _2426 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2425 > _2429) || ((_2425 < _2427) || ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 < _2427) || (_2423 > _2429))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2425, cbModelParam._m0[17u].z, fma(_2424, cbModelParam._m0[17u].y, _2423 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2425, cbModelParam._m0[18u].z, fma(_2424, cbModelParam._m0[18u].y, _2423 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2425, cbModelParam._m0[19u].z, fma(_2424, cbModelParam._m0[19u].y, _2423 * cbModelParam._m0[19u].x))), _1688);
            frontier_phi_24_48_ladder = _2628.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2628.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2628.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_24_48_ladder_2;
        _1783 = frontier_phi_24_48_ladder_1;
        _1785 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_786, _787, _788), _1688);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1798 = (((_813 * _763) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1781 - _1679)) + _1679);
    float _1800 = (((_813 * _765) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1783 - _1681)) + _1681);
    float _1802 = (((_813 * _766) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1785 - _1683)) + _1683);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    vec4 _1819 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_699, _700));
    float _1821 = _1819.w;
    float _1833 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1821);
    float _1834 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1821);
    float _1835 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1821);
    uvec4 _1839 = floatBitsToUint(cbInstanceData._m0[_738 + 5u]);
    uint _1841 = _1839.x * 14u;
    uint _1842 = _1841 + 13u;
    float _1849 = _778 + (-1.0);
    float _1854 = (cbLight._m0[_1842].x * _1849) + 1.0;
    float _1855 = (cbLight._m0[_1842].y * _1849) + 1.0;
    float _1856 = (cbLight._m0[_1842].z * _1849) + 1.0;
    float _1857 = (cbLight._m0[_1842].w * _1849) + 1.0;
    uint _1858 = _1841 + 5u;
    float _1864 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1868 = _1841 + 4u;
    float _1877 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1881 = _1841 | 1u;
    float _1892 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_609, _610, _611));
    float _1895 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_609, _610, _611));
    float _4079 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _4090 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1900 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1902 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1909 = ((cbLight._m0[_1858].x * _1864) * _1902) + (((cbLight._m0[_1868].x * _1833) * _1877) * _1900);
    float _1910 = ((_1864 * cbLight._m0[_1858].y) * _1902) + (((cbLight._m0[_1868].y * _1834) * _1877) * _1900);
    float _1911 = ((_1864 * cbLight._m0[_1858].z) * _1902) + (((cbLight._m0[_1868].z * _1835) * _1877) * _1900);
    uvec4 _1916 = floatBitsToUint(cbLight._m0[_1841 + 12u]);
    bool _1918 = _1916.x == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1918)
    {
        _1929 = _1909;
        _1931 = _1910;
        _1933 = _1911;
    }
    else
    {
        uint _1937 = _1841 + 6u;
        float _1953 = (dot(vec3(cbLight._m0[_1841 + 2u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _1954 = _1953 * _1953;
        float _4101 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1955 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1956 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1929 = (((cbLight._m0[_1937].x * 0.3183098733425140380859375) * _1955) * _1956) + _1909;
        _1931 = (((cbLight._m0[_1937].y * 0.3183098733425140380859375) * _1955) * _1956) + _1910;
        _1933 = (((cbLight._m0[_1937].z * 0.3183098733425140380859375) * _1955) * _1956) + _1911;
    }
    bool _1936 = _1916.y == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1936)
    {
        _1974 = _1929;
        _1976 = _1931;
        _1978 = _1933;
    }
    else
    {
        uint _2147 = _1841 + 7u;
        float _2163 = (dot(vec3(cbLight._m0[_1841 + 3u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4117 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2166 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _1974 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _1929;
        _1976 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _1931;
        _1978 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _1933;
    }
    uint _1981 = _1841 + 8u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _613) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1841].x + _691;
    float _1997 = cbLight._m0[_1841].y + _692;
    float _1998 = cbLight._m0[_1841].z + _693;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1841].xyz));
    float _4133 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _2010 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2011 = dot(vec3(_609, _610, _611), vec3(_2003, _2004, _2005));
    float _4155 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_2003, _2004, _2005));
    float _4166 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1995 * _1995;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2031 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
    float _2032 = 0.959999978542327880859375 - _760;
    float _2034 = 0.959999978542327880859375 - _761;
    float _2035 = 0.959999978542327880859375 - _762;
    float _2042 = 1.0 - _1995;
    float _2053 = (0.5 / (((_2010 * ((_2009 * _2042) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2042) + _1995) * _2009))) * _2009;
    float _4177 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    uint _2069 = _1841 + 9u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _613) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1881].x + _691;
    float _2083 = cbLight._m0[_1881].y + _692;
    float _2084 = cbLight._m0[_1881].z + _693;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1881].xyz));
    float _4188 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2096 = dot(vec3(_609, _610, _611), vec3(_2089, _2090, _2091));
    float _4199 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2089, _2090, _2091));
    float _4210 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2081 * _2081;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0);
    float _2122 = 1.0 - _2081;
    float _2132 = (0.5 / (((_2010 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2122) + _2081) * _2095))) * _2095;
    float _4221 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    float _2144 = (((((_2115 * _2032) + _763) * cbLight._m0[_2069].x) * _2134) * _1864) + ((((cbLight._m0[_1981].x * _1833) * ((_2031 * _2032) + _763)) * _2055) * _1877);
    float _2145 = (((((_2115 * _2034) + _765) * cbLight._m0[_2069].y) * _2134) * _1864) + ((((cbLight._m0[_1981].y * _1834) * ((_2031 * _2034) + _765)) * _2055) * _1877);
    float _2146 = (((((_2115 * _2035) + _766) * cbLight._m0[_2069].z) * _2134) * _1864) + ((((cbLight._m0[_1981].z * _1835) * ((_2031 * _2035) + _766)) * _2055) * _1877);
    float _2208;
    float _2210;
    float _2212;
    if (_1918)
    {
        _2208 = _2144;
        _2210 = _2145;
        _2212 = _2146;
    }
    else
    {
        uint _2214 = _1841 + 2u;
        uint _2218 = _1841 + 10u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _613) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _691;
        float _2235 = cbLight._m0[_2214].y + _692;
        float _2236 = cbLight._m0[_2214].z + _693;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2214].xyz));
        float _4232 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2248 = dot(vec3(_609, _610, _611), vec3(_2241, _2242, _2243));
        float _4243 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4254 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0);
        float _2274 = 1.0 - _2233;
        float _2284 = (0.5 / (((_2010 * ((_2247 * _2274) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2274) + _2233) * _2247))) * _2247;
        float _4265 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2208 = (((((_2267 * _2032) + _763) * cbLight._m0[_2218].x) * _2286) * _2287) + _2144;
        _2210 = (((((_2267 * _2034) + _765) * cbLight._m0[_2218].y) * _2286) * _2287) + _2145;
        _2212 = (((((_2267 * _2035) + _766) * cbLight._m0[_2218].z) * _2286) * _2287) + _2146;
    }
    float _2322;
    float _2324;
    float _2326;
    if (_1936)
    {
        _2322 = _2208;
        _2324 = _2210;
        _2326 = _2212;
    }
    else
    {
        uint _2333 = _1841 + 3u;
        uint _2337 = _1841 + 11u;
        float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _613) * 0.949999988079071044921875);
        float _2352 = _2351 * _2351;
        float _2353 = cbLight._m0[_2333].x + _691;
        float _2354 = cbLight._m0[_2333].y + _692;
        float _2355 = cbLight._m0[_2333].z + _693;
        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
        float _2360 = _2359 * _2353;
        float _2361 = _2359 * _2354;
        float _2362 = _2359 * _2355;
        float _2363 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2333].xyz));
        float _4281 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2367 = dot(vec3(_609, _610, _611), vec3(_2360, _2361, _2362));
        float _4292 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2371 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2360, _2361, _2362));
        float _4303 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2375 = _2352 * _2352;
        float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
        float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
        float _2393 = 1.0 - _2352;
        float _2403 = (0.5 / (((_2010 * ((_2366 * _2393) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2393) + _2352) * _2366))) * _2366;
        float _4314 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2405 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
        float _2406 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2322 = (((((_2386 * _2032) + _763) * cbLight._m0[_2337].x) * _2405) * _2406) + _2208;
        _2324 = (((((_2386 * _2034) + _765) * cbLight._m0[_2337].y) * _2405) * _2406) + _2210;
        _2326 = (((((_2386 * _2035) + _766) * cbLight._m0[_2337].z) * _2405) * _2406) + _2212;
    }
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_1839.y == 0u)
    {
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2482 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2481;
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2481;
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2481;
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2497)));
        float _2518 = (log2(_2484 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
        }
        else
        {
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            uint _2783 = 0u;
            uint _2792;
            bool _2793;
            for (;;)
            {
                _2792 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                _2793 = _2792 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2793)
                {
                    frontier_phi_63_pred = _2782;
                    frontier_phi_63_pred_1 = _2781;
                    frontier_phi_63_pred_2 = _2780;
                    frontier_phi_63_pred_3 = _2779;
                    frontier_phi_63_pred_4 = _2778;
                    frontier_phi_63_pred_5 = _2777;
                }
                else
                {
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    uint _2907;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2792;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    for (;;)
                    {
                        uint _2911 = uint(findLSB(_2907)) + (_2783 << 5u);
                        uint _2908 = (_2907 + 4294967295u) & _2907;
                        uint _2913 = _2911 * 48u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2933 = (_2911 * 48u) + 4u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2952 = (_2911 * 48u) + 8u;
                        vec3 _2963 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x));
                        float _2967 = _2927.x - _2482;
                        float _2968 = _2927.y - _2483;
                        float _2969 = _2927.z - _2484;
                        float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                        float _2973 = inversesqrt(_2970);
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2977 = dot(vec3(_719, _722, _725), vec3(_2974, _2975, _2976));
                        float _2982 = 1.0 - (_2970 * _2927.w);
                        float _4340 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _2984 = sqrt(_2970) * _2946.w;
                        float _2987 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2977) + _2988;
                        float _2994 = _2984 * _2984;
                        float _2998 = ((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2983) / ((_2994 * 0.699999988079071044921875) + 1.0);
                        float _3002 = (-0.0) - _2482;
                        float _3003 = (-0.0) - _2483;
                        float _3004 = (-0.0) - _2484;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3019 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                        float _3020 = 1.0 - _794;
                        float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                        float _3028 = _3027 * _3027;
                        float _3029 = _3028 * _3028;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                        float _3040 = dot(vec3(_719, _722, _725), vec3(_3009, _3010, _3011));
                        float _4356 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3044 = dot(vec3(_719, _722, _725), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                        float _4367 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                        float _3052 = _2987 * _3028;
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _2977) + _3053;
                        float _4378 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3058 = 1.0 - _3028;
                        float _3068 = (0.5 / (((_3057 * ((_3043 * _3058) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3057 * _3058) + _3028) * _3043))) * _3057;
                        float _4389 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3079 = (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3051 * _3051) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125))) * _2983;
                        _2836 = (_2998 * _2946.x) + _2904;
                        _2837 = (_2998 * _2946.y) + _2905;
                        _2838 = (_2998 * _2946.z) + _2906;
                        _2833 = (_3079 * _2963.x) + _2901;
                        _2834 = (_3079 * _2963.y) + _2902;
                        _2835 = (_3079 * _2963.z) + _2903;
                        if (_2908 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2908;
                        }
                    }
                    frontier_phi_63_pred = _2838;
                    frontier_phi_63_pred_1 = _2837;
                    frontier_phi_63_pred_2 = _2836;
                    frontier_phi_63_pred_3 = _2835;
                    frontier_phi_63_pred_4 = _2834;
                    frontier_phi_63_pred_5 = _2833;
                }
                _2644 = frontier_phi_63_pred;
                _2642 = frontier_phi_63_pred_1;
                _2640 = frontier_phi_63_pred_2;
                _2638 = frontier_phi_63_pred_3;
                _2636 = frontier_phi_63_pred_4;
                _2634 = frontier_phi_63_pred_5;
                uint _2784 = _2783 + 1u;
                if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2777 = _2634;
                    _2778 = _2636;
                    _2779 = _2638;
                    _2780 = _2640;
                    _2781 = _2642;
                    _2782 = _2644;
                    _2783 = _2784;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
        }
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.z;
        uint _2650 = (_2648 >> 8u) & 15u;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((4294967295u << _2650) & _2528) == 0u)
        {
            _2745 = _2633;
            _2747 = _2635;
            _2749 = _2637;
            _2751 = _2639;
            _2753 = _2641;
            _2755 = _2643;
        }
        else
        {
            float _2770 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
            float _2771 = _2770 * _2482;
            float _2772 = _2770 * _2483;
            float _2773 = _2770 * _2484;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2650 < ((_2648 >> 12u) & 15u))
            {
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2884 = _2633;
                float _2885 = _2635;
                float _2886 = _2637;
                float _2887 = _2639;
                float _2888 = _2641;
                float _2889 = _2643;
                uint _2890 = _2650;
                uint _2899;
                bool _2900;
                for (;;)
                {
                    _2899 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                    _2900 = _2899 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2900)
                    {
                        frontier_phi_69_pred = _2889;
                        frontier_phi_69_pred_1 = _2888;
                        frontier_phi_69_pred_2 = _2887;
                        frontier_phi_69_pred_3 = _2886;
                        frontier_phi_69_pred_4 = _2885;
                        frontier_phi_69_pred_5 = _2884;
                    }
                    else
                    {
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        uint _3103 = _2899;
                        uint _3104;
                        vec4 _3129;
                        float _3130;
                        vec4 _3145;
                        vec3 _3157;
                        vec4 _3173;
                        vec4 _3189;
                        float _3236;
                        bool _3237;
                        for (;;)
                        {
                            uint _3114 = ((_2890 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3103));
                            _3104 = (_3103 + 4294967295u) & _3103;
                            uint _3116 = _3114 * 40u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            _3130 = _3129.w;
                            uint _3132 = (_3114 * 40u) + 4u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3114 * 40u) + 8u;
                            _3157 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x));
                            uint _3160 = (_3114 * 40u) + 16u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3176 = (_3114 * 40u) + 20u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3192 = (_3114 * 40u) + 24u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3211 = (_3114 * 40u) + 28u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3236 = fma(_2484, _3224.z, fma(_2483, _3224.y, _3224.x * _2482)) + _3224.w;
                            _3237 = !((fma(_2484, _3205.z, fma(_2483, _3205.y, _3205.x * _2482)) + _3205.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3237)
                            {
                                float _3264 = _3129.x - _2482;
                                float _3265 = _3129.y - _2483;
                                float _3266 = _3129.z - _2484;
                                float _3267 = dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266));
                                float _3270 = inversesqrt(_3267);
                                float _3271 = _3270 * _3264;
                                float _3272 = _3270 * _3265;
                                float _3273 = _3270 * _3266;
                                float _3277 = 1.0 - (_3267 / (_3130 * _3130));
                                float _4400 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3282 = sqrt(_3267) * _3145.w;
                                float _3284 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                                float _3285 = _3284 * _3284;
                                float _3288 = ((1.0 - _3285) * dot(vec3(_3271, _3272, _3273), vec3(_719, _722, _725))) + _3285;
                                float _3291 = _3282 * _3282;
                                float _3295 = (fma(_2484, _3173.z, fma(_2483, _3173.y, _3173.x * _2482)) + _3173.w) / _3236;
                                float _3296 = (fma(_2484, _3189.z, fma(_2483, _3189.y, _3189.x * _2482)) + _3189.w) / _3236;
                                float _3300 = 1.0 - dot(vec2(_3295, _3296), vec2(_3295, _3296));
                                float _4416 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3302 = _3301 * (((isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))) * _3278) / ((_3291 * 0.699999988079071044921875) + 1.0));
                                float _3314 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                                float _3315 = 1.0 - _794;
                                float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                                float _3323 = _3322 * _3322;
                                float _3324 = _3323 * _3323;
                                float _3325 = _3271 - _2771;
                                float _3326 = _3272 - _2772;
                                float _3327 = _3273 - _2773;
                                float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                                float _3335 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2771, (-0.0) - _2772, (-0.0) - _2773));
                                float _4427 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3339 = dot(vec3(_719, _722, _725), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                                float _4438 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                                float _3347 = _3284 * _3323;
                                float _3348 = _3347 * _3347;
                                float _3354 = ((1.0 - _3348) * dot(vec3(_719, _722, _725), vec3(_3271, _3272, _3273))) + _3348;
                                float _4449 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3356 = 1.0 - _3323;
                                float _3366 = (0.5 / (((_3355 * ((_3338 * _3356) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3323) * _3338))) * _3355;
                                float _4460 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3376 = (_3301 * _3278) * (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3346 * _3346) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3302 * _3145.z;
                                frontier_phi_75_pred_1 = _3302 * _3145.y;
                                frontier_phi_75_pred_2 = _3302 * _3145.x;
                                frontier_phi_75_pred_3 = _3376 * _3157.z;
                                frontier_phi_75_pred_4 = _3376 * _3157.y;
                                frontier_phi_75_pred_5 = _3376 * _3157.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_75_pred;
                            _3384 = frontier_phi_75_pred_1;
                            _3383 = frontier_phi_75_pred_2;
                            _3382 = frontier_phi_75_pred_3;
                            _3381 = frontier_phi_75_pred_4;
                            _3380 = frontier_phi_75_pred_5;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            _3089 = _3385 + _3102;
                            _3084 = _3380 + _3097;
                            _3085 = _3381 + _3098;
                            _3086 = _3382 + _3099;
                            if (_3104 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3104;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3089;
                        frontier_phi_69_pred_1 = _3088;
                        frontier_phi_69_pred_2 = _3087;
                        frontier_phi_69_pred_3 = _3086;
                        frontier_phi_69_pred_4 = _3085;
                        frontier_phi_69_pred_5 = _3084;
                    }
                    _2756 = frontier_phi_69_pred;
                    _2754 = frontier_phi_69_pred_1;
                    _2752 = frontier_phi_69_pred_2;
                    _2750 = frontier_phi_69_pred_3;
                    _2748 = frontier_phi_69_pred_4;
                    _2746 = frontier_phi_69_pred_5;
                    uint _2891 = _2890 + 1u;
                    if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2884 = _2746;
                        _2885 = _2748;
                        _2886 = _2750;
                        _2887 = _2752;
                        _2888 = _2754;
                        _2889 = _2756;
                        _2890 = _2891;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2756;
                frontier_phi_57_58_ladder_1 = _2754;
                frontier_phi_57_58_ladder_2 = _2752;
                frontier_phi_57_58_ladder_3 = _2750;
                frontier_phi_57_58_ladder_4 = _2748;
                frontier_phi_57_58_ladder_5 = _2746;
            }
            else
            {
                frontier_phi_57_58_ladder = _2643;
                frontier_phi_57_58_ladder_1 = _2641;
                frontier_phi_57_58_ladder_2 = _2639;
                frontier_phi_57_58_ladder_3 = _2637;
                frontier_phi_57_58_ladder_4 = _2635;
                frontier_phi_57_58_ladder_5 = _2633;
            }
            _2745 = frontier_phi_57_58_ladder_5;
            _2747 = frontier_phi_57_58_ladder_4;
            _2749 = frontier_phi_57_58_ladder_3;
            _2751 = frontier_phi_57_58_ladder_2;
            _2753 = frontier_phi_57_58_ladder_1;
            _2755 = frontier_phi_57_58_ladder;
        }
        float _2760 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
        _2540 = (_2760 * _2751) + _1974;
        _2542 = (_2760 * _2753) + _1976;
        _2544 = (_2760 * _2755) + _1978;
        _2546 = ((_2745 * _763) * _2760) + _2322;
        _2548 = ((_2747 * _765) * _2760) + _2324;
        _2550 = ((_2749 * _766) * _2760) + _2326;
    }
    else
    {
        _2540 = _1974;
        _2542 = _1976;
        _2544 = _1978;
        _2546 = _2322;
        _2548 = _2324;
        _2550 = _2326;
    }
    float _4476 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4487 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4498 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4509 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _2568 = ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2540 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _778))) + ((_2546 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1588)) * cbPerFrame._m0[3u].x);
    float _2569 = ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2542 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _778))) + ((_2548 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1588)) * cbPerFrame._m0[3u].x);
    float _2570 = ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2544 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _778))) + ((_2550 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1588)) * cbPerFrame._m0[3u].x);
    float _2578 = cbInstanceData._m0[_738 + 6u].w * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)));
    float _2583 = _699 / cbSceneParam._m0[86u].x;
    float _2584 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2598 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, (log2((isnan(cbSceneParam._m0[77u].w) ? _633 : (isnan(_633) ? cbSceneParam._m0[77u].w : min(_633, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2600 = _2598.x;
    float _2601 = _2598.y;
    float _2602 = _2598.z;
    float _2603 = _2598.w;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_633 > cbSceneParam._m0[78u].w)
    {
        float _2658 = isnan(_633) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _633 : min(cbSceneParam._m0[80u].w, _633));
        float _2659 = _2658 / _633;
        float _2670 = _2659 * _684;
        float _2671 = _685 * _2659;
        float _2672 = (-0.0) - _2671;
        float _2673 = _2659 * _686;
        float _2675 = (cbSceneParam._m0[77u].w * _2672) / _2658;
        float _2676 = _2675 + cbSceneParam._m0[79u].w;
        float _2677 = cbSceneParam._m0[79u].w - _2671;
        float _2683 = sqrt(((_2670 * _2670) + (_2671 * _2671)) + (_2673 * _2673));
        float _2686 = (1.0 - (cbSceneParam._m0[77u].w / _2658)) * _2683;
        float _2691 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2693 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2846;
        if (abs((_2672 - _2675) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2846 = ((((_2676 > 0.0) ? exp2(_2691 * _2676) : (2.0 - exp2(_2693 * _2676))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2686;
        }
        else
        {
            float _2806 = 1.0 / cbSceneParam._m0[80u].x;
            float _2807 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : max(_2676, _2677));
            float _2808 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : min(_2676, _2677));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            _2846 = ((abs(_2683 / _2672) * cbSceneParam._m0[80u].y) * ((((_2817 - _2818) * 2.0) - ((exp2(_2691 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0)))) - exp2(_2691 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))))) * _2806)) - ((exp2(_2693 * _2817) - exp2(_2693 * _2818)) * _2806))) + (_2686 * cbSceneParam._m0[80u].z);
        }
        vec4 _2848 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, 1.0), 0.0);
        float _2857 = exp2((_2846 * (-1.44269502162933349609375)) * (1.0 - _2848.w));
        float _2858 = log2(_2857);
        float _2874 = log2(_2603);
        _2695 = (exp2(_2874 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].x)) * _2848.x) / cbSceneParam._m0[78u].x)) + _2600;
        _2697 = (exp2(_2874 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].y)) * _2848.y) / cbSceneParam._m0[78u].y)) + _2601;
        _2699 = (exp2(_2874 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].z)) * _2848.z) / cbSceneParam._m0[78u].z)) + _2602;
        _2701 = _2857 * _2603;
    }
    else
    {
        _2695 = _2600;
        _2697 = _2601;
        _2699 = _2602;
        _2701 = _2603;
    }
    float _2713 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2714 = _2713 == 3.0;
    float _2715 = log2(_2701);
    float _2722 = exp2(_2715 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)));
    float _2723 = exp2(_2715 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0)));
    float _2724 = exp2(_2715 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0)));
    float _2733 = (_2713 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2733 * (_2714 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.y = _2733 * (_2714 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2697)));
    SV_Target.z = _2733 * (_2714 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.w = _2578;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2578;
}


