#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1196;
float _3589;
float _3590;
float _3591;
float _3592;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _222 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _223 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _224 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _228 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _229 = _228 * _222;
    float _230 = _228 * _223;
    float _231 = _228 * _224;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _249 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _250 = _249 * TANGENT_2.x;
    float _251 = _249 * TANGENT_2.y;
    float _252 = _249 * TANGENT_2.z;
    float _257;
    float _258;
    float _259;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _257 = (-0.0) - _236;
        _258 = (-0.0) - _237;
        _259 = (-0.0) - _238;
    }
    else
    {
        _257 = _236;
        _258 = _237;
        _259 = _238;
    }
    float _282 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _294 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _282) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3601 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _297 = 1.0 - (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)));
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _307 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _282) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3622 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = 1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)));
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _329 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _331 = _329.x;
    float _332 = _329.y;
    float _333 = _329.z;
    float _334 = cbMtdParam._m0[11u].x * _311;
    float _336 = cbMtdParam._m0[11u].y * _311;
    float _338 = cbMtdParam._m0[11u].z * _311;
    float _358 = _309 + _297;
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0));
    vec4 _378 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _383 = _378.w;
    float _384 = _378.x * cbMtdParam._m0[10u].x;
    float _385 = _378.y * cbMtdParam._m0[10u].y;
    float _386 = _378.z * cbMtdParam._m0[10u].z;
    float _401 = (_384 - (_360 * _384)) + ((((((_331 * (cbMtdParam._m0[9u].x - _334)) * _299) + (_334 * _331)) * 4.55000019073486328125) * _360) * _384);
    float _403 = (((((((_332 * (cbMtdParam._m0[9u].y - _336)) * _299) + (_336 * _332)) * 4.55000019073486328125) * _360) * _385) + _385) - (_360 * _385);
    float _405 = (((((((_333 * (cbMtdParam._m0[9u].z - _338)) * _299) + (_338 * _333)) * 4.55000019073486328125) * _360) * _386) + _386) - (_360 * _386);
    vec4 _422 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _426 = _422.z;
    float _430 = (_422.x * 2.0) + (-1.0);
    float _432 = (_422.y * 2.0) + (-1.0);
    float _433 = dot(vec2(_430, _432), vec2(_430, _432));
    float _3653 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _438 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    float _441 = fma(_438, _257, fma(_432, _250, _430 * _229));
    float _444 = fma(_438, _258, fma(_432, _251, _430 * _230));
    float _447 = fma(_438, _259, fma(_432, _252, _430 * _231));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    vec4 _466 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _472 = (_466.x * 2.0) + (-1.0);
    float _473 = (_466.y * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3664 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))));
    float _482 = fma(_479, _257, fma(_473, _250, _472 * _229));
    float _485 = fma(_479, _258, fma(_473, _251, _472 * _230));
    float _488 = fma(_479, _259, fma(_473, _252, _472 * _231));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    float _493 = _492 * _482;
    float _494 = _492 * _485;
    float _495 = _492 * _488;
    float _498 = fma(_495, _212, fma(_494, _211, _493 * _210));
    float _501 = fma(_495, _245, fma(_494, _244, _493 * _243));
    float _504 = fma(_495, _259, fma(_494, _258, _493 * _257));
    float _508 = inversesqrt(dot(vec3(_498, _501, _504), vec3(_498, _501, _504)));
    float _512 = fma(_454, _212, fma(_453, _211, _452 * _210));
    float _515 = fma(_454, _245, fma(_453, _244, _452 * _243));
    float _518 = fma(_454, _259, fma(_453, _258, _452 * _257));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _525 = _522 * _518;
    vec4 _538 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _544 = (_538.x * 2.0) + (-1.0);
    float _545 = (_538.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3675 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))));
    float _554 = fma(_551, _257, fma(_545, _250, _544 * _229));
    float _557 = fma(_551, _258, fma(_545, _251, _544 * _230));
    float _560 = fma(_551, _259, fma(_545, _252, _544 * _231));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    float _565 = _564 * _554;
    float _566 = _564 * _557;
    float _567 = _564 * _560;
    float _570 = fma(_567, _212, fma(_566, _211, _565 * _210));
    float _573 = fma(_567, _245, fma(_566, _244, _565 * _243));
    float _576 = fma(_567, _259, fma(_566, _258, _565 * _257));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _595 = ((_522 * _512) + (((_498 * _299) * _508) * cbMtdParam._m0[14u].z)) + (((_570 * _311) * _580) * cbMtdParam._m0[14u].y);
    float _597 = ((_522 * _515) + (((_501 * _299) * _508) * cbMtdParam._m0[14u].z)) + (((_573 * _311) * _580) * cbMtdParam._m0[14u].y);
    float _600 = fma(_525, _257, fma(_597, _243, _595 * _210));
    float _603 = fma(_525, _258, fma(_597, _244, _595 * _211));
    float _606 = fma(_525, _259, fma(_597, _245, _595 * _212));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3686 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _614 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _615 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3719 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3730 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3741 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _619 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    vec4 _700 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _702 = _700.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _875 = sqrt(((_686 * _686) + (_687 * _687)) + (_688 * _688));
        float _881 = (cbMatDynParam._m0[5u].x * _875) + cbMatDynParam._m0[5u].y;
        float _3752 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _886 = (cbMatDynParam._m0[5u].z * _875) + cbMatDynParam._m0[5u].w;
        float _3763 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) - _882)) + _882) < ((_702 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _733 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _736 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _739 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    uint _752 = uint(roundEven(NORMAL.w)) * 13u;
    uint _753 = _752 + 9u;
    uint _754 = _753 + uint(cbMatDynParam._m0[0u].w);
    float _760 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_754].x;
    float _761 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_754].y;
    float _762 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_754].z;
    float _3774 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _766 = 1.0 - _619;
    float _767 = _763 * _766;
    float _768 = _764 * _766;
    float _769 = _765 * _766;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _619;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _619;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _619;
    float _777 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _792 = _789.x * TEXCOORD_7.w;
    float _793 = dot(vec3(_611, _612, _613), vec3(_693, _694, _695));
    float _796 = _793 * 2.0;
    float _800 = (_796 * _611) - _693;
    float _801 = (_796 * _612) - _694;
    float _802 = (_796 * _613) - _695;
    float _806 = abs(dot(vec3(_693, _694, _695), vec3(_611, _612, _613)));
    float _3807 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _808 = sqrt(_615);
    float _821 = exp2((_808 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_808 * 3.0));
    float _827 = (1.0 - _821) * ((_808 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _828 = _821 * _808;
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_864, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856));
        float _924 = fma(_864, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856));
        float _928 = fma(_864, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856));
        float _953 = _856 + _611;
        float _954 = _860 + _612;
        float _955 = _864 + _613;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_611, _612, _613), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3855 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_611, _612, _613), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3888 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_611, _612, _613), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3921 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1239 = fma(_864, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _856));
        float _1243 = fma(_864, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _856));
        float _1247 = fma(_864, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _856));
        float _1270 = _856 + _611;
        float _1271 = _860 + _612;
        float _1272 = _864 + _613;
        float _1282 = fma(_1272, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1270)) - _1239;
        float _1283 = fma(_1272, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1270)) - _1243;
        float _1284 = fma(_1272, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1270)) - _1247;
        float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
        float _1301 = ((_1288 * _1282) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1239 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1288 * _1283) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1243 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1288 * _1284) / cbModelParam._m0[35u].z) + ((((((_1247 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        float _1338 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1305.x + (-0.5));
        float _1340 = _1338 * (_1305.y + (-0.5));
        float _1341 = _1338 * (_1305.z + (-0.5));
        float _1348 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1312.x + (-0.5));
        float _1350 = _1348 * (_1312.y + (-0.5));
        float _1351 = _1348 * (_1312.z + (-0.5));
        float _1358 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1319.x + (-0.5));
        float _1360 = _1358 * (_1319.y + (-0.5));
        float _1361 = _1358 * (_1319.z + (-0.5));
        float _1368 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1326.x + (-0.5));
        float _1370 = _1368 * (_1326.y + (-0.5));
        float _1371 = _1368 * (_1326.z + (-0.5));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = _1339 * 0.5;
        float _1376 = _1349 * 0.5;
        float _1377 = _1359 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_611, _612, _613), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3984 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1402 + 1.0))) + _1407) * _1372;
        float _1417 = _1340 * 0.5;
        float _1418 = _1350 * 0.5;
        float _1419 = _1360 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_611, _612, _613), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4017 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1444 + 1.0))) + _1449) * _1373;
        float _1459 = _1341 * 0.5;
        float _1460 = _1351 * 0.5;
        float _1461 = _1361 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_611, _612, _613), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4050 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1486 + 1.0))) + _1491) * _1374;
        _1508 = _1341;
        _1509 = _1340;
        _1510 = _1339;
        _1511 = _1351;
        _1512 = _1350;
        _1513 = _1349;
        _1514 = _1361;
        _1515 = _1360;
        _1516 = _1359;
        _1517 = _1374;
        _1518 = _1373;
        _1519 = _1372;
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = _1196;
        _1518 = _1196;
        _1519 = _1196;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1208)) + _1208;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1209)) + _1209;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1210)) + _1210;
    float _1555 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1532 * cbSceneParam._m0[89u].x));
    float _1558 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1532 * cbSceneParam._m0[90u].x));
    float _1561 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1532));
    float _1576 = _800 * 0.5;
    float _1577 = _801 * 0.5;
    float _1578 = _802 * 0.5;
    float _1579 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1582 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1585 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1619;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1592 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1596 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1600 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1607 = dot(vec4(cbModelParam._m0[39u]), vec4(_1576, _1577, _1578, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1630;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1621 = dot(vec4(cbModelParam._m0[40u]), vec4(_1576, _1577, _1578, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1634 = (_1630 * cbModelParam._m0[1u].x) + (_1619 * (1.0 - cbModelParam._m0[1u].x));
    float _1644 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1644 : min(cbModelParam._m0[25u].z, _1644));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_864, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_864, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_864, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_802, cbModelParam._m0[13u].z, fma(_801, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800));
        float _1706 = fma(_802, cbModelParam._m0[14u].z, fma(_801, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800));
        float _1709 = fma(_802, cbModelParam._m0[15u].z, fma(_801, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1737 = frontier_phi_19_17_ladder;
        }
        float _1944;
        if (_1706 > 0.0)
        {
            _1944 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1944 = frontier_phi_28_24_ladder;
        }
        float _2198;
        if (_1709 > 0.0)
        {
            _2198 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2198 = frontier_phi_40_35_ladder;
        }
        float _2200 = isnan(_1944) ? _1737 : (isnan(_1737) ? _1944 : min(_1737, _1944));
        float _2201 = isnan(_2198) ? _2200 : (isnan(_2200) ? _2198 : min(_2200, _2198));
        float _2205 = (_2201 * _1703) + _1692;
        float _2206 = (_2201 * _1706) + _1696;
        float _2207 = (_2201 * _1709) + _1700;
        float _2208 = _2201 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2208;
        float _2212 = _2208 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 > _2212) || ((_2206 < _2210) || ((_2205 < _2210) || (_2205 > _2212))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2207, cbModelParam._m0[9u].z, fma(_2206, cbModelParam._m0[9u].y, _2205 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2207, cbModelParam._m0[10u].z, fma(_2206, cbModelParam._m0[10u].y, _2205 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2207, cbModelParam._m0[11u].z, fma(_2206, cbModelParam._m0[11u].y, _2205 * cbModelParam._m0[11u].x))), _1645);
            frontier_phi_18_40_ladder = _2335.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2335.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2335.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_18_40_ladder_2;
        _1727 = frontier_phi_18_40_ladder_1;
        _1729 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_800, _801, _802), _1645);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1791 = fma(_864, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856)) + cbModelParam._m0[21u].w;
        float _1795 = fma(_864, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856)) + cbModelParam._m0[22u].w;
        float _1799 = fma(_864, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856)) + cbModelParam._m0[23u].w;
        float _1802 = fma(_802, cbModelParam._m0[21u].z, fma(_801, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800));
        float _1805 = fma(_802, cbModelParam._m0[22u].z, fma(_801, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800));
        float _1808 = fma(_802, cbModelParam._m0[23u].z, fma(_801, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800));
        float _1949;
        if (_1802 > 0.0)
        {
            _1949 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1949 = frontier_phi_30_26_ladder;
        }
        float _2225;
        if (_1805 > 0.0)
        {
            _2225 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2225 = frontier_phi_42_37_ladder;
        }
        float _2438;
        if (_1808 > 0.0)
        {
            _2438 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2438 = frontier_phi_51_48_ladder;
        }
        float _2440 = isnan(_2225) ? _1949 : (isnan(_1949) ? _2225 : min(_1949, _2225));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1802) + _1791;
        float _2446 = (_2441 * _1805) + _1795;
        float _2447 = (_2441 * _1808) + _1799;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_27_51_ladder = _2650.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2650.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2650.x * cbModelParam._m0[1u].z;
        }
        _1827 = frontier_phi_27_51_ladder_2;
        _1829 = frontier_phi_27_51_ladder_1;
        _1831 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_800, _801, _802), _1734);
        _1827 = _1811.x * cbModelParam._m0[1u].z;
        _1829 = _1811.y * cbModelParam._m0[1u].z;
        _1831 = _1811.z * cbModelParam._m0[1u].z;
    }
    float _1844 = (((_827 * _777) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1827 - _1725)) + _1725);
    float _1846 = (((_827 * _779) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1829 - _1727)) + _1727);
    float _1848 = (((_827 * _780) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1831 - _1729)) + _1729);
    float _1851 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1844 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1844 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, _1844 * cbSceneParam._m0[91u].x));
    uvec4 _1867 = floatBitsToUint(cbInstanceData._m0[_752 + 5u]);
    uint _1869 = _1867.x * 14u;
    uint _1870 = _1869 + 13u;
    float _1877 = _792 + (-1.0);
    float _1882 = (cbLight._m0[_1870].x * _1877) + 1.0;
    float _1883 = (cbLight._m0[_1870].y * _1877) + 1.0;
    float _1884 = (cbLight._m0[_1870].z * _1877) + 1.0;
    float _1885 = (cbLight._m0[_1870].w * _1877) + 1.0;
    uint _1886 = _1869 + 5u;
    float _1892 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1896 = _1869 + 4u;
    float _1902 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1906 = _1869 | 1u;
    float _1917 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_611, _612, _613));
    float _1920 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_611, _612, _613));
    float _4186 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _4197 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1925 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _1927 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _1934 = ((cbLight._m0[_1886].x * _1892) * _1927) + ((cbLight._m0[_1896].x * _1902) * _1925);
    float _1935 = ((_1892 * cbLight._m0[_1886].y) * _1927) + ((_1902 * cbLight._m0[_1896].y) * _1925);
    float _1936 = ((_1892 * cbLight._m0[_1886].z) * _1927) + ((_1902 * cbLight._m0[_1896].z) * _1925);
    uvec4 _1941 = floatBitsToUint(cbLight._m0[_1869 + 12u]);
    bool _1943 = _1941.x == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1943)
    {
        _1954 = _1934;
        _1956 = _1935;
        _1958 = _1936;
    }
    else
    {
        uint _1962 = _1869 + 6u;
        float _1978 = (dot(vec3(cbLight._m0[_1869 + 2u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _1979 = _1978 * _1978;
        float _4208 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1980 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1981 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _1954 = (((cbLight._m0[_1962].x * 0.3183098733425140380859375) * _1980) * _1981) + _1934;
        _1956 = (((cbLight._m0[_1962].y * 0.3183098733425140380859375) * _1980) * _1981) + _1935;
        _1958 = (((cbLight._m0[_1962].z * 0.3183098733425140380859375) * _1980) * _1981) + _1936;
    }
    bool _1961 = _1941.y == 0u;
    float _1999;
    float _2001;
    float _2003;
    if (_1961)
    {
        _1999 = _1954;
        _2001 = _1956;
        _2003 = _1958;
    }
    else
    {
        uint _2169 = _1869 + 7u;
        float _2185 = (dot(vec3(cbLight._m0[_1869 + 3u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4224 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2188 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _1999 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _1954;
        _2001 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _1956;
        _2003 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _1958;
    }
    uint _2006 = _1869 + 8u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _615) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1869].x + _693;
    float _2022 = cbLight._m0[_1869].y + _694;
    float _2023 = cbLight._m0[_1869].z + _695;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1869].xyz));
    float _4240 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _2035 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2036 = dot(vec3(_611, _612, _613), vec3(_2028, _2029, _2030));
    float _4262 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2028, _2029, _2030));
    float _4273 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2020 * _2020;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
    float _2057 = 0.959999978542327880859375 - _774;
    float _2059 = 0.959999978542327880859375 - _775;
    float _2060 = 0.959999978542327880859375 - _776;
    float _2067 = 1.0 - _2020;
    float _2078 = (0.5 / (((_2035 * ((_2034 * _2067) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2067) + _2020) * _2034))) * _2034;
    float _4284 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2080 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    uint _2091 = _1869 + 9u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _615) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1906].x + _693;
    float _2105 = cbLight._m0[_1906].y + _694;
    float _2106 = cbLight._m0[_1906].z + _695;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1906].xyz));
    float _4295 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2118 = dot(vec3(_611, _612, _613), vec3(_2111, _2112, _2113));
    float _4306 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2111, _2112, _2113));
    float _4317 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2103 * _2103;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
    float _2144 = 1.0 - _2103;
    float _2154 = (0.5 / (((_2035 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2144) + _2103) * _2117))) * _2117;
    float _4328 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    float _2166 = (((((_2137 * _2057) + _777) * cbLight._m0[_2091].x) * _2156) * _1892) + (((((_2056 * _2057) + _777) * cbLight._m0[_2006].x) * _2080) * _1902);
    float _2167 = (((((_2137 * _2059) + _779) * cbLight._m0[_2091].y) * _2156) * _1892) + (((((_2056 * _2059) + _779) * cbLight._m0[_2006].y) * _2080) * _1902);
    float _2168 = (((((_2137 * _2060) + _780) * cbLight._m0[_2091].z) * _2156) * _1892) + (((((_2056 * _2060) + _780) * cbLight._m0[_2006].z) * _2080) * _1902);
    float _2230;
    float _2232;
    float _2234;
    if (_1943)
    {
        _2230 = _2166;
        _2232 = _2167;
        _2234 = _2168;
    }
    else
    {
        uint _2236 = _1869 + 2u;
        uint _2240 = _1869 + 10u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _615) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _693;
        float _2257 = cbLight._m0[_2236].y + _694;
        float _2258 = cbLight._m0[_2236].z + _695;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2236].xyz));
        float _4339 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2270 = dot(vec3(_611, _612, _613), vec3(_2263, _2264, _2265));
        float _4350 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4361 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
        float _2296 = 1.0 - _2255;
        float _2306 = (0.5 / (((_2035 * ((_2269 * _2296) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2296) + _2255) * _2269))) * _2269;
        float _4372 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2309 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2230 = (((((_2289 * _2057) + _777) * cbLight._m0[_2240].x) * _2308) * _2309) + _2166;
        _2232 = (((((_2289 * _2059) + _779) * cbLight._m0[_2240].y) * _2308) * _2309) + _2167;
        _2234 = (((((_2289 * _2060) + _780) * cbLight._m0[_2240].z) * _2308) * _2309) + _2168;
    }
    float _2344;
    float _2346;
    float _2348;
    if (_1961)
    {
        _2344 = _2230;
        _2346 = _2232;
        _2348 = _2234;
    }
    else
    {
        uint _2355 = _1869 + 3u;
        uint _2359 = _1869 + 11u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _615) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _693;
        float _2376 = cbLight._m0[_2355].y + _694;
        float _2377 = cbLight._m0[_2355].z + _695;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2355].xyz));
        float _4388 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2389 = dot(vec3(_611, _612, _613), vec3(_2382, _2383, _2384));
        float _4399 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4410 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0);
        float _2415 = 1.0 - _2374;
        float _2425 = (0.5 / (((_2035 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2415) + _2374) * _2388))) * _2388;
        float _4421 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2344 = (((((_2408 * _2057) + _777) * cbLight._m0[_2359].x) * _2427) * _2428) + _2230;
        _2346 = (((((_2408 * _2059) + _779) * cbLight._m0[_2359].y) * _2427) * _2428) + _2232;
        _2348 = (((((_2408 * _2060) + _780) * cbLight._m0[_2359].z) * _2427) * _2428) + _2234;
    }
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_1867.y == 0u)
    {
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2503;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2503;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2503;
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2519)));
        float _2540 = (log2(_2506 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
        }
        else
        {
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2823)
                {
                    frontier_phi_68_pred = _2809;
                    frontier_phi_68_pred_1 = _2812;
                    frontier_phi_68_pred_2 = _2811;
                    frontier_phi_68_pred_3 = _2810;
                    frontier_phi_68_pred_4 = _2808;
                    frontier_phi_68_pred_5 = _2807;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2822;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2813 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        float _3018 = _2978.x - _2504;
                        float _3019 = _2978.y - _2505;
                        float _3020 = _2978.z - _2506;
                        float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                        float _3024 = inversesqrt(_3021);
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3028 = dot(vec3(_733, _736, _739), vec3(_3025, _3026, _3027));
                        float _3033 = 1.0 - (_3021 * _2978.w);
                        float _4447 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3035 = sqrt(_3021) * _2997.w;
                        float _3038 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _3028) + _3039;
                        float _3045 = _3035 * _3035;
                        float _3049 = ((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3034) / ((_3045 * 0.699999988079071044921875) + 1.0);
                        float _3053 = (-0.0) - _2504;
                        float _3054 = (-0.0) - _2505;
                        float _3055 = (-0.0) - _2506;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3070 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                        float _3071 = 1.0 - _808;
                        float _3078 = sqrt(1.0 - ((1.0 - (_3071 * _3071)) * (1.0 - (_3070 * _3070))));
                        float _3079 = _3078 * _3078;
                        float _3080 = _3079 * _3079;
                        float _3081 = _3060 + _3025;
                        float _3082 = _3061 + _3026;
                        float _3083 = _3062 + _3027;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3091 = dot(vec3(_733, _736, _739), vec3(_3060, _3061, _3062));
                        float _4463 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3095 = dot(vec3(_733, _736, _739), vec3(_3087 * _3081, _3087 * _3082, _3087 * _3083));
                        float _4474 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3102 = ((_3098 * _3098) * (_3080 + (-1.0))) + 1.0;
                        float _3103 = _3038 * _3079;
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3028) + _3104;
                        float _4485 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3109 = 1.0 - _3079;
                        float _3119 = (0.5 / (((_3108 * ((_3094 * _3109) + _3079)) + 9.9999999392252902907785028219223e-09) + (((_3108 * _3109) + _3079) * _3094))) * _3108;
                        float _4496 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3130 = (((_3080 * 3.1415927410125732421875) * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) / ((_3102 * _3102) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125))) * _3034;
                        _2882 = (_3049 * _2997.x) + _2955;
                        _2883 = (_3049 * _2997.y) + _2956;
                        _2884 = (_3049 * _2997.z) + _2957;
                        _2879 = (_3130 * _3014.x) + _2952;
                        _2880 = (_3130 * _3014.y) + _2953;
                        _2881 = (_3130 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_68_pred = _2881;
                    frontier_phi_68_pred_1 = _2884;
                    frontier_phi_68_pred_2 = _2883;
                    frontier_phi_68_pred_3 = _2882;
                    frontier_phi_68_pred_4 = _2880;
                    frontier_phi_68_pred_5 = _2879;
                }
                _2660 = frontier_phi_68_pred;
                _2666 = frontier_phi_68_pred_1;
                _2664 = frontier_phi_68_pred_2;
                _2662 = frontier_phi_68_pred_3;
                _2658 = frontier_phi_68_pred_4;
                _2656 = frontier_phi_68_pred_5;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2807 = _2656;
                    _2808 = _2658;
                    _2809 = _2660;
                    _2810 = _2662;
                    _2811 = _2664;
                    _2812 = _2666;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
        }
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.z;
        uint _2672 = (_2670 >> 8u) & 15u;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((4294967295u << _2672) & _2550) == 0u)
        {
            _2775 = _2655;
            _2777 = _2657;
            _2779 = _2659;
            _2781 = _2661;
            _2783 = _2663;
            _2785 = _2665;
        }
        else
        {
            float _2800 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
            float _2801 = _2800 * _2504;
            float _2802 = _2800 * _2505;
            float _2803 = _2800 * _2506;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2672 < ((_2670 >> 12u) & 15u))
            {
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2935 = _2655;
                float _2936 = _2657;
                float _2937 = _2659;
                float _2938 = _2661;
                float _2939 = _2663;
                float _2940 = _2665;
                uint _2941 = _2672;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2951)
                    {
                        frontier_phi_79_pred = _2940;
                        frontier_phi_79_pred_1 = _2939;
                        frontier_phi_79_pred_2 = _2938;
                        frontier_phi_79_pred_3 = _2937;
                        frontier_phi_79_pred_4 = _2936;
                        frontier_phi_79_pred_5 = _2935;
                    }
                    else
                    {
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        uint _3163 = _2950;
                        uint _3164;
                        vec4 _3189;
                        float _3190;
                        vec4 _3205;
                        vec3 _3217;
                        vec4 _3233;
                        vec4 _3249;
                        float _3296;
                        bool _3297;
                        for (;;)
                        {
                            uint _3174 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3163));
                            _3164 = (_3163 + 4294967295u) & _3163;
                            uint _3176 = _3174 * 40u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3190 = _3189.w;
                            uint _3192 = (_3174 * 40u) + 4u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3174 * 40u) + 8u;
                            _3217 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x));
                            uint _3220 = (_3174 * 40u) + 16u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3236 = (_3174 * 40u) + 20u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3252 = (_3174 * 40u) + 24u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3271 = (_3174 * 40u) + 28u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3296 = fma(_2506, _3284.z, fma(_2505, _3284.y, _3284.x * _2504)) + _3284.w;
                            _3297 = !((fma(_2506, _3265.z, fma(_2505, _3265.y, _3265.x * _2504)) + _3265.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3297)
                            {
                                float _3324 = _3189.x - _2504;
                                float _3325 = _3189.y - _2505;
                                float _3326 = _3189.z - _2506;
                                float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                                float _3330 = inversesqrt(_3327);
                                float _3331 = _3330 * _3324;
                                float _3332 = _3330 * _3325;
                                float _3333 = _3330 * _3326;
                                float _3337 = 1.0 - (_3327 / (_3190 * _3190));
                                float _4507 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3342 = sqrt(_3327) * _3205.w;
                                float _3344 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                                float _3345 = _3344 * _3344;
                                float _3348 = ((1.0 - _3345) * dot(vec3(_3331, _3332, _3333), vec3(_733, _736, _739))) + _3345;
                                float _3351 = _3342 * _3342;
                                float _3355 = (fma(_2506, _3233.z, fma(_2505, _3233.y, _3233.x * _2504)) + _3233.w) / _3296;
                                float _3356 = (fma(_2506, _3249.z, fma(_2505, _3249.y, _3249.x * _2504)) + _3249.w) / _3296;
                                float _3360 = 1.0 - dot(vec2(_3355, _3356), vec2(_3355, _3356));
                                float _4523 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3362 = _3361 * (((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3338) / ((_3351 * 0.699999988079071044921875) + 1.0));
                                float _3374 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                                float _3375 = 1.0 - _808;
                                float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                                float _3383 = _3382 * _3382;
                                float _3384 = _3383 * _3383;
                                float _3385 = _3331 - _2801;
                                float _3386 = _3332 - _2802;
                                float _3387 = _3333 - _2803;
                                float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                                float _3395 = dot(vec3(_733, _736, _739), vec3((-0.0) - _2801, (-0.0) - _2802, (-0.0) - _2803));
                                float _4534 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3399 = dot(vec3(_733, _736, _739), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                                float _4545 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                                float _3407 = _3344 * _3383;
                                float _3408 = _3407 * _3407;
                                float _3414 = ((1.0 - _3408) * dot(vec3(_733, _736, _739), vec3(_3331, _3332, _3333))) + _3408;
                                float _4556 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3416 = 1.0 - _3383;
                                float _3426 = (0.5 / (((_3415 * ((_3398 * _3416) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3383) * _3398))) * _3415;
                                float _4567 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3436 = (_3361 * _3338) * (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3406 * _3406) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3362 * _3205.z;
                                frontier_phi_85_pred_1 = _3362 * _3205.y;
                                frontier_phi_85_pred_2 = _3362 * _3205.x;
                                frontier_phi_85_pred_3 = _3436 * _3217.z;
                                frontier_phi_85_pred_4 = _3436 * _3217.y;
                                frontier_phi_85_pred_5 = _3436 * _3217.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3445 = frontier_phi_85_pred;
                            _3444 = frontier_phi_85_pred_1;
                            _3443 = frontier_phi_85_pred_2;
                            _3442 = frontier_phi_85_pred_3;
                            _3441 = frontier_phi_85_pred_4;
                            _3440 = frontier_phi_85_pred_5;
                            _3147 = _3443 + _3160;
                            _3148 = _3444 + _3161;
                            _3149 = _3445 + _3162;
                            _3144 = _3440 + _3157;
                            _3145 = _3441 + _3158;
                            _3146 = _3442 + _3159;
                            if (_3164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3164;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3149;
                        frontier_phi_79_pred_1 = _3148;
                        frontier_phi_79_pred_2 = _3147;
                        frontier_phi_79_pred_3 = _3146;
                        frontier_phi_79_pred_4 = _3145;
                        frontier_phi_79_pred_5 = _3144;
                    }
                    _2786 = frontier_phi_79_pred;
                    _2784 = frontier_phi_79_pred_1;
                    _2782 = frontier_phi_79_pred_2;
                    _2780 = frontier_phi_79_pred_3;
                    _2778 = frontier_phi_79_pred_4;
                    _2776 = frontier_phi_79_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2776;
                        _2936 = _2778;
                        _2937 = _2780;
                        _2938 = _2782;
                        _2939 = _2784;
                        _2940 = _2786;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2782;
                frontier_phi_60_61_ladder_1 = _2786;
                frontier_phi_60_61_ladder_2 = _2784;
                frontier_phi_60_61_ladder_3 = _2780;
                frontier_phi_60_61_ladder_4 = _2778;
                frontier_phi_60_61_ladder_5 = _2776;
            }
            else
            {
                frontier_phi_60_61_ladder = _2661;
                frontier_phi_60_61_ladder_1 = _2665;
                frontier_phi_60_61_ladder_2 = _2663;
                frontier_phi_60_61_ladder_3 = _2659;
                frontier_phi_60_61_ladder_4 = _2657;
                frontier_phi_60_61_ladder_5 = _2655;
            }
            _2775 = frontier_phi_60_61_ladder_5;
            _2777 = frontier_phi_60_61_ladder_4;
            _2779 = frontier_phi_60_61_ladder_3;
            _2781 = frontier_phi_60_61_ladder;
            _2783 = frontier_phi_60_61_ladder_2;
            _2785 = frontier_phi_60_61_ladder_1;
        }
        float _2790 = isnan(1.0) ? _792 : (isnan(_792) ? 1.0 : min(_792, 1.0));
        _2562 = (_2790 * _2781) + _1999;
        _2564 = (_2790 * _2783) + _2001;
        _2566 = (_2790 * _2785) + _2003;
        _2568 = ((_2775 * _777) * _2790) + _2344;
        _2570 = ((_2777 * _779) * _2790) + _2346;
        _2572 = ((_2779 * _780) * _2790) + _2348;
    }
    else
    {
        _2562 = _1999;
        _2564 = _2001;
        _2566 = _2003;
        _2568 = _2344;
        _2570 = _2346;
        _2572 = _2348;
    }
    float _4583 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4594 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4605 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4616 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2590 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2562 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _792))) + ((_2568 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1634)) * cbPerFrame._m0[3u].x);
    float _2591 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2564 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _792))) + ((_2570 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1634)) * cbPerFrame._m0[3u].x);
    float _2592 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2566 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _792))) + ((_2572 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1634)) * cbPerFrame._m0[3u].x);
    float _2593 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2594 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2600 = cbInstanceData._m0[_752 + 6u].w * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)));
    float _2605 = _713 / cbSceneParam._m0[86u].x;
    float _2606 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2620 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2622 = _2620.x;
    float _2623 = _2620.y;
    float _2624 = _2620.z;
    float _2625 = _2620.w;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2680 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2681 = _2680 / _635;
        float _2692 = _2681 * _686;
        float _2693 = _687 * _2681;
        float _2694 = (-0.0) - _2693;
        float _2695 = _2681 * _688;
        float _2697 = (cbSceneParam._m0[77u].w * _2694) / _2680;
        float _2698 = _2697 + cbSceneParam._m0[79u].w;
        float _2699 = cbSceneParam._m0[79u].w - _2693;
        float _2705 = sqrt(((_2692 * _2692) + (_2693 * _2693)) + (_2695 * _2695));
        float _2708 = (1.0 - (cbSceneParam._m0[77u].w / _2680)) * _2705;
        float _2713 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2715 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2892;
        if (abs((_2694 - _2697) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2892 = ((((_2698 > 0.0) ? exp2(_2713 * _2698) : (2.0 - exp2(_2715 * _2698))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2708;
        }
        else
        {
            float _2836 = 1.0 / cbSceneParam._m0[80u].x;
            float _2837 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : max(_2698, _2699));
            float _2838 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : min(_2698, _2699));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            _2892 = ((abs(_2705 / _2694) * cbSceneParam._m0[80u].y) * ((((_2847 - _2848) * 2.0) - ((exp2(_2713 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0)))) - exp2(_2713 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))))) * _2836)) - ((exp2(_2715 * _2847) - exp2(_2715 * _2848)) * _2836))) + (_2708 * cbSceneParam._m0[80u].z);
        }
        vec4 _2894 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, 1.0), 0.0);
        float _2903 = exp2((_2892 * (-1.44269502162933349609375)) * (1.0 - _2894.w));
        float _2904 = log2(_2903);
        float _2920 = log2(_2625);
        _2717 = (exp2(_2920 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].x)) * _2894.x) / cbSceneParam._m0[78u].x)) + _2622;
        _2719 = (exp2(_2920 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].y)) * _2894.y) / cbSceneParam._m0[78u].y)) + _2623;
        _2721 = (exp2(_2920 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].z)) * _2894.z) / cbSceneParam._m0[78u].z)) + _2624;
        _2723 = _2903 * _2625;
    }
    else
    {
        _2717 = _2622;
        _2719 = _2623;
        _2721 = _2624;
        _2723 = _2625;
    }
    bool _2930;
    vec4 _2733;
    vec4 _2755;
    float _2757;
    float _2761;
    float _2762;
    float _2763;
    float _2764;
    bool _2774;
    for (;;)
    {
        _2733 = cbMatDynParam._m0[0u];
        float _2735 = roundEven(_2733.y);
        bool _2736 = _2735 == 3.0;
        float _2737 = log2(_2723);
        float _2744 = exp2(_2737 * cbSceneParam._m0[78u].x) * _2593;
        float _2745 = exp2(_2737 * cbSceneParam._m0[78u].y) * _2594;
        float _2746 = exp2(_2737 * cbSceneParam._m0[78u].z) * _2595;
        float _2753 = _702 + (-0.5);
        _2755 = cbMtdParam._m0[1u];
        _2757 = _2755.y * _2753;
        float _2760 = (_2735 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2761 = _2760 * (_2736 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2717)));
        _2762 = _2760 * (_2736 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2719)));
        _2763 = _2760 * (_2736 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2721)));
        _2764 = _2753 * 0.999000012874603271484375;
        _2774 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2774)
        {
            if ((cbInstanceData._m0[_752 + 7u].x + _2764) < 0.5)
            {
                _2930 = true;
                break;
            }
        }
        uint _2871 = _753 + uint(_2733.w);
        if ((cbInstanceData._m0[_2871].w < 1.0) && ((cbInstanceData._m0[_2871].w + _2764) < 0.5))
        {
            _2930 = true;
            break;
        }
        if ((_2757 + _383) < _2755.x)
        {
            _2930 = true;
            break;
        }
        _2930 = false;
        break;
    }
    float _3135;
    if (_2930)
    {
        discard_state = true;
        _3135 = 0.0;
    }
    else
    {
        _3135 = _2600;
    }
    SV_Target.x = _2761;
    SV_Target.y = _2762;
    SV_Target.z = _2763;
    SV_Target.w = _3135;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2600;
    discard_exit();
}


