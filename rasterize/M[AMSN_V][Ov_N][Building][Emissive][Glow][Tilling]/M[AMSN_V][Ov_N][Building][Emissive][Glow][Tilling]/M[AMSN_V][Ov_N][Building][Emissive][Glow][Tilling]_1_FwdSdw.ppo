#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1222;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _235 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _236 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _237 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _241 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _242 = _241 * _235;
    float _243 = _241 * _236;
    float _244 = _241 * _237;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _262 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _263 = _262 * TANGENT_2.x;
    float _264 = _262 * TANGENT_2.y;
    float _265 = _262 * TANGENT_2.z;
    float _270;
    float _271;
    float _272;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _270 = (-0.0) - _249;
        _271 = (-0.0) - _250;
        _272 = (-0.0) - _251;
    }
    else
    {
        _270 = _249;
        _271 = _250;
        _272 = _251;
    }
    float _294 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _306 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _294) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3863 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _309 = 1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)));
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    float _319 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _294) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3884 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = 1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)));
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _341 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _343 = _341.x;
    float _344 = _341.y;
    float _345 = _341.z;
    float _346 = cbMtdParam._m0[11u].x * _323;
    float _348 = cbMtdParam._m0[11u].y * _323;
    float _350 = cbMtdParam._m0[11u].z * _323;
    float _370 = _321 + _309;
    float _371 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _372 = isnan(1.0) ? _371 : (isnan(_371) ? 1.0 : min(_371, 1.0));
    vec4 _390 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _395 = _390.w;
    float _396 = _390.x * cbMtdParam._m0[10u].x;
    float _397 = _390.y * cbMtdParam._m0[10u].y;
    float _398 = _390.z * cbMtdParam._m0[10u].z;
    float _413 = (_396 - (_372 * _396)) + ((((((_343 * (cbMtdParam._m0[9u].x - _346)) * _311) + (_346 * _343)) * 4.55000019073486328125) * _372) * _396);
    float _415 = (((((((_344 * (cbMtdParam._m0[9u].y - _348)) * _311) + (_348 * _344)) * 4.55000019073486328125) * _372) * _397) + _397) - (_372 * _397);
    float _417 = (((((((_345 * (cbMtdParam._m0[9u].z - _350)) * _311) + (_350 * _345)) * 4.55000019073486328125) * _372) * _398) + _398) - (_372 * _398);
    vec4 _434 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _438 = _434.z;
    float _442 = (_434.x * 2.0) + (-1.0);
    float _444 = (_434.y * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3915 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    float _453 = fma(_450, _270, fma(_444, _263, _442 * _242));
    float _456 = fma(_450, _271, fma(_444, _264, _442 * _243));
    float _459 = fma(_450, _272, fma(_444, _265, _442 * _244));
    float _463 = inversesqrt(dot(vec3(_453, _456, _459), vec3(_453, _456, _459)));
    float _464 = _463 * _453;
    float _465 = _463 * _456;
    float _466 = _463 * _459;
    float _484 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3926 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _490 = (_485 * _485) * (3.0 - (_485 * 2.0));
    float _491 = isnan(cbMtdParam._m0[14u].w) ? _490 : (isnan(_490) ? cbMtdParam._m0[14u].w : max(_490, cbMtdParam._m0[14u].w));
    vec4 _510 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _515 = (isnan(cbMtdParam._m0[12u].y) ? _491 : (isnan(_491) ? cbMtdParam._m0[12u].y : min(_491, cbMtdParam._m0[12u].y))) * cbMtdParam._m0[12u].z;
    vec4 _534 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _540 = (_534.x * 2.0) + (-1.0);
    float _541 = (_534.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3947 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))));
    float _550 = fma(_547, _270, fma(_541, _263, _540 * _242));
    float _553 = fma(_547, _271, fma(_541, _264, _540 * _243));
    float _556 = fma(_547, _272, fma(_541, _265, _540 * _244));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _566 = fma(_563, _225, fma(_562, _224, _561 * _223));
    float _569 = fma(_563, _258, fma(_562, _257, _561 * _256));
    float _572 = fma(_563, _272, fma(_562, _271, _561 * _270));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _580 = fma(_466, _225, fma(_465, _224, _464 * _223));
    float _583 = fma(_466, _258, fma(_465, _257, _464 * _256));
    float _586 = fma(_466, _272, fma(_465, _271, _464 * _270));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _593 = _590 * _586;
    vec4 _606 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _612 = (_606.x * 2.0) + (-1.0);
    float _613 = (_606.y * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _3958 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))));
    float _622 = fma(_619, _270, fma(_613, _263, _612 * _242));
    float _625 = fma(_619, _271, fma(_613, _264, _612 * _243));
    float _628 = fma(_619, _272, fma(_613, _265, _612 * _244));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _638 = fma(_635, _225, fma(_634, _224, _633 * _223));
    float _641 = fma(_635, _258, fma(_634, _257, _633 * _256));
    float _644 = fma(_635, _272, fma(_634, _271, _633 * _270));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _663 = ((_590 * _580) + (((_566 * _311) * _576) * cbMtdParam._m0[14u].z)) + (((_638 * _323) * _648) * cbMtdParam._m0[14u].y);
    float _665 = ((_590 * _583) + (((_569 * _311) * _576) * cbMtdParam._m0[14u].z)) + (((_641 * _323) * _648) * cbMtdParam._m0[14u].y);
    float _668 = fma(_593, _270, fma(_665, _256, _663 * _223));
    float _671 = fma(_593, _271, fma(_665, _257, _663 * _224));
    float _674 = fma(_593, _272, fma(_665, _258, _663 * _225));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3969 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _682 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _683 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _4002 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _4013 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _4024 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _687 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    float _769 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _770 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _789 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _792 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _795 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _808 = uint(roundEven(NORMAL.w)) * 13u;
    uint _809 = _808 + 9u;
    uint _810 = _809 + uint(cbMatDynParam._m0[0u].w);
    float _816 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_810].x;
    float _817 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_810].y;
    float _818 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_810].z;
    float _4035 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _822 = 1.0 - _687;
    float _823 = _819 * _822;
    float _824 = _820 * _822;
    float _825 = _821 * _822;
    float _830 = (_819 + (-0.039999999105930328369140625)) * _687;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _687;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _687;
    float _833 = _830 + 0.039999999105930328369140625;
    float _835 = _831 + 0.039999999105930328369140625;
    float _836 = _832 + 0.039999999105930328369140625;
    vec4 _845 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _769, cbSceneParam._m0[86u].y * _770));
    float _848 = _845.x * TEXCOORD_7.w;
    float _849 = dot(vec3(_679, _680, _681), vec3(_761, _762, _763));
    float _852 = _849 * 2.0;
    float _856 = (_852 * _679) - _761;
    float _857 = (_852 * _680) - _762;
    float _858 = (_852 * _681) - _763;
    float _862 = abs(dot(vec3(_761, _762, _763), vec3(_679, _680, _681)));
    float _4068 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = sqrt(_683);
    float _876 = exp2((_864 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_864 * 3.0));
    float _882 = (1.0 - _876) * ((_864 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _883 = _876 * _864;
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1221;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _946 = fma(_919, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911));
        float _950 = fma(_919, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911));
        float _954 = fma(_919, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911));
        float _979 = _911 + _679;
        float _980 = _915 + _680;
        float _981 = _919 + _681;
        float _991 = fma(_981, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979)) - _946;
        float _992 = fma(_981, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979)) - _950;
        float _993 = fma(_981, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979)) - _954;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_946 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_950 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[34u].z) + ((((((_954 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1049 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1015.x + (-0.5));
        float _1051 = _1049 * (_1015.y + (-0.5));
        float _1052 = _1049 * (_1015.z + (-0.5));
        float _1059 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1022.x + (-0.5));
        float _1061 = _1059 * (_1022.y + (-0.5));
        float _1062 = _1059 * (_1022.z + (-0.5));
        float _1069 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1029.x + (-0.5));
        float _1071 = _1069 * (_1029.y + (-0.5));
        float _1072 = _1069 * (_1029.z + (-0.5));
        float _1079 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1036.x + (-0.5));
        float _1081 = _1079 * (_1036.y + (-0.5));
        float _1082 = _1079 * (_1036.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1103 = (dot(vec3(_679, _680, _681), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1113 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _4116 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1115 + 1.0))) + _1120) * _1083;
        float _1130 = _1051 * 0.5;
        float _1131 = _1061 * 0.5;
        float _1132 = _1071 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_679, _680, _681), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4149 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1157 + 1.0))) + _1162) * _1084;
        float _1172 = _1052 * 0.5;
        float _1173 = _1062 * 0.5;
        float _1174 = _1072 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_679, _680, _681), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _4182 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1199 + 1.0))) + _1204) * _1085;
        _1221 = _1052;
        _1223 = _1051;
        _1224 = _1050;
        _1225 = _1062;
        _1226 = _1061;
        _1227 = _1060;
        _1228 = _1072;
        _1229 = _1071;
        _1230 = _1070;
        _1231 = _1085;
        _1232 = _1084;
        _1233 = _1083;
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _1222;
        _1223 = _1222;
        _1224 = _1222;
        _1225 = _1222;
        _1226 = _1222;
        _1227 = _1222;
        _1228 = _1222;
        _1229 = _1222;
        _1230 = _1222;
        _1231 = _1222;
        _1232 = _1222;
        _1233 = _1222;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1262 = fma(_919, cbModelParam._m0[30u].z, fma(_915, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911));
        float _1266 = fma(_919, cbModelParam._m0[31u].z, fma(_915, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911));
        float _1270 = fma(_919, cbModelParam._m0[32u].z, fma(_915, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911));
        float _1293 = _911 + _679;
        float _1294 = _915 + _680;
        float _1295 = _919 + _681;
        float _1305 = fma(_1295, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1293)) - _1262;
        float _1306 = fma(_1295, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1293)) - _1266;
        float _1307 = fma(_1295, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1293)) - _1270;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1262 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1266 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[35u].z) + ((((((_1270 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1361 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1328.x + (-0.5));
        float _1363 = _1361 * (_1328.y + (-0.5));
        float _1364 = _1361 * (_1328.z + (-0.5));
        float _1371 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1335.x + (-0.5));
        float _1373 = _1371 * (_1335.y + (-0.5));
        float _1374 = _1371 * (_1335.z + (-0.5));
        float _1381 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1342.x + (-0.5));
        float _1383 = _1381 * (_1342.y + (-0.5));
        float _1384 = _1381 * (_1342.z + (-0.5));
        float _1391 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1349.x + (-0.5));
        float _1393 = _1391 * (_1349.y + (-0.5));
        float _1394 = _1391 * (_1349.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_679, _680, _681), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4245 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1425 + 1.0))) + _1430) * _1395;
        float _1440 = _1363 * 0.5;
        float _1441 = _1373 * 0.5;
        float _1442 = _1383 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_679, _680, _681), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4278 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1467 + 1.0))) + _1472) * _1396;
        float _1482 = _1364 * 0.5;
        float _1483 = _1374 * 0.5;
        float _1484 = _1384 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_679, _680, _681), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4311 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1509 + 1.0))) + _1514) * _1397;
        _1531 = _1364;
        _1532 = _1363;
        _1533 = _1362;
        _1534 = _1374;
        _1535 = _1373;
        _1536 = _1372;
        _1537 = _1384;
        _1538 = _1383;
        _1539 = _1382;
        _1540 = _1397;
        _1541 = _1396;
        _1542 = _1395;
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1222;
        _1532 = _1222;
        _1533 = _1222;
        _1534 = _1222;
        _1535 = _1222;
        _1536 = _1222;
        _1537 = _1222;
        _1538 = _1222;
        _1539 = _1222;
        _1540 = _1222;
        _1541 = _1222;
        _1542 = _1222;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1234)) + _1234;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1235)) + _1235;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1236)) + _1236;
    float _1578 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1581 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1584 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1555));
    float _1599 = _856 * 0.5;
    float _1600 = _857 * 0.5;
    float _1601 = _858 * 0.5;
    float _1602 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1605 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1608 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1642;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1615 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1221, _1225, _1228, _1231));
        float _1619 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1623 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1630 = dot(vec4(cbModelParam._m0[39u]), vec4(_1599, _1600, _1601, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1653;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1644 = dot(vec4(cbModelParam._m0[40u]), vec4(_1599, _1600, _1601, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1657 = (_1653 * cbModelParam._m0[1u].x) + (_1642 * (1.0 - cbModelParam._m0[1u].x));
    float _1667 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _683);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1667 : min(cbModelParam._m0[25u].z, _1667));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1715 = fma(_919, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911)) + cbModelParam._m0[13u].w;
        float _1719 = fma(_919, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911)) + cbModelParam._m0[14u].w;
        float _1723 = fma(_919, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911)) + cbModelParam._m0[15u].w;
        float _1726 = fma(_858, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856));
        float _1729 = fma(_858, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856));
        float _1732 = fma(_858, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856));
        float _1760;
        if (_1726 > 0.0)
        {
            _1760 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1760 = frontier_phi_16_14_ladder;
        }
        float _1934;
        if (_1729 > 0.0)
        {
            _1934 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1934 = frontier_phi_25_21_ladder;
        }
        float _2229;
        if (_1732 > 0.0)
        {
            _2229 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2229 = frontier_phi_37_32_ladder;
        }
        float _2231 = isnan(_1934) ? _1760 : (isnan(_1760) ? _1934 : min(_1760, _1934));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1726) + _1715;
        float _2237 = (_2232 * _1729) + _1719;
        float _2238 = (_2232 * _1732) + _1723;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2239;
        float _2243 = _2239 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 > _2243) || ((_2237 < _2241) || ((_2236 < _2241) || (_2236 > _2243))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2238, cbModelParam._m0[9u].z, fma(_2237, cbModelParam._m0[9u].y, _2236 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2238, cbModelParam._m0[10u].z, fma(_2237, cbModelParam._m0[10u].y, _2236 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2238, cbModelParam._m0[11u].z, fma(_2237, cbModelParam._m0[11u].y, _2236 * cbModelParam._m0[11u].x))), _1668);
            frontier_phi_15_37_ladder = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2383.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2383.z * cbModelParam._m0[1u].y;
        }
        _1748 = frontier_phi_15_37_ladder_1;
        _1750 = frontier_phi_15_37_ladder;
        _1752 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_856, _857, _858), _1668);
        _1748 = _1736.x * cbModelParam._m0[1u].y;
        _1750 = _1736.y * cbModelParam._m0[1u].y;
        _1752 = _1736.z * cbModelParam._m0[1u].y;
    }
    float _1756 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _683);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1756 : min(cbModelParam._m0[25u].w, _1756));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1813 = fma(_919, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911)) + cbModelParam._m0[21u].w;
        float _1817 = fma(_919, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911)) + cbModelParam._m0[22u].w;
        float _1821 = fma(_919, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911)) + cbModelParam._m0[23u].w;
        float _1824 = fma(_858, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856));
        float _1827 = fma(_858, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856));
        float _1830 = fma(_858, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856));
        float _1939;
        if (_1824 > 0.0)
        {
            _1939 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1939 = frontier_phi_27_23_ladder;
        }
        float _2256;
        if (_1827 > 0.0)
        {
            _2256 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2256 = frontier_phi_39_34_ladder;
        }
        float _2594;
        if (_1830 > 0.0)
        {
            _2594 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2594 = frontier_phi_49_46_ladder;
        }
        float _2596 = isnan(_2256) ? _1939 : (isnan(_1939) ? _2256 : min(_1939, _2256));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1824) + _1813;
        float _2602 = (_2597 * _1827) + _1817;
        float _2603 = (_2597 * _1830) + _1821;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1757);
            frontier_phi_24_49_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1849 = frontier_phi_24_49_ladder_2;
        _1851 = frontier_phi_24_49_ladder_1;
        _1853 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_856, _857, _858), _1757);
        _1849 = _1833.x * cbModelParam._m0[1u].z;
        _1851 = _1833.y * cbModelParam._m0[1u].z;
        _1853 = _1833.z * cbModelParam._m0[1u].z;
    }
    float _1866 = (((_882 * _833) + _883) * _848) * ((cbModelParam._m0[1u].w * (_1849 - _1748)) + _1748);
    float _1868 = (((_882 * _835) + _883) * _848) * ((cbModelParam._m0[1u].w * (_1851 - _1750)) + _1750);
    float _1870 = (((_882 * _836) + _883) * _848) * ((cbModelParam._m0[1u].w * (_1853 - _1752)) + _1752);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, _1866 * cbSceneParam._m0[91u].x));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1926 = _1913 / _1925;
    float _1927 = _1917 / _1925;
    float _1928 = _1921 / _1925;
    float _2075;
    float _2076;
    float _2077;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1955 = ((uint(_1928 > cbSceneParam._m0[59u].y) + uint(_1928 > cbSceneParam._m0[59u].x)) + uint(_1928 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1956 = _1955 + 43u;
        uint _1964 = _1955 + 44u;
        uint _1972 = _1955 + 45u;
        uint _1980 = _1955 + 46u;
        float _1991 = fma(_1925, cbSceneParam._m0[_1956].w, fma(_1921, cbSceneParam._m0[_1956].z, fma(_1917, cbSceneParam._m0[_1956].y, _1913 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1925, cbSceneParam._m0[_1964].w, fma(_1921, cbSceneParam._m0[_1964].z, fma(_1917, cbSceneParam._m0[_1964].y, _1913 * cbSceneParam._m0[_1964].x)));
        float _2003 = fma(_1925, cbSceneParam._m0[_1980].w, fma(_1921, cbSceneParam._m0[_1980].z, fma(_1917, cbSceneParam._m0[_1980].y, _1913 * cbSceneParam._m0[_1980].x)));
        float _2008 = cbSceneParam._m0[33u].z * _2003;
        float _2010 = cbSceneParam._m0[33u].w * _2003;
        float _2013 = fma(_1925, cbSceneParam._m0[_1972].w, fma(_1921, cbSceneParam._m0[_1972].z, fma(_1917, cbSceneParam._m0[_1972].y, _1913 * cbSceneParam._m0[_1972].x))) / _2003;
        float _2061 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
        float _4437 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2068 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 + _1991) / _2003, (_2010 + _1995) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1991) / _2003, (_1995 - _2008) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2008) / _2003, (_1995 - _2010) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2010) / _2003, (_2008 + _1995) / _2003), _2013), 0.0)).x), vec4(0.25)));
        _2075 = 1.0 - (_2068 * cbSceneParam._m0[34u].x);
        _2076 = 1.0 - (_2068 * cbSceneParam._m0[34u].y);
        _2077 = 1.0 - (_2068 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2075 = 1.0;
        _2076 = 1.0;
        _2077 = 1.0;
    }
    float _2141;
    float _2143;
    float _2145;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2129 = fma(_1925, cbSceneParam._m0[63u].w, fma(_1921, cbSceneParam._m0[63u].z, fma(_1917, cbSceneParam._m0[63u].y, _1913 * cbSceneParam._m0[63u].x)));
        float _2130 = fma(_1925, cbSceneParam._m0[60u].w, fma(_1921, cbSceneParam._m0[60u].z, fma(_1917, cbSceneParam._m0[60u].y, _1913 * cbSceneParam._m0[60u].x))) / _2129;
        float _2131 = fma(_1925, cbSceneParam._m0[61u].w, fma(_1921, cbSceneParam._m0[61u].z, fma(_1917, cbSceneParam._m0[61u].y, _1913 * cbSceneParam._m0[61u].x))) / _2129;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2130 >= cbSceneParam._m0[64u].x) && (_2131 >= cbSceneParam._m0[64u].y)) && (_2130 <= cbSceneParam._m0[64u].z)) && (_2131 <= cbSceneParam._m0[64u].w))
        {
            float _2269 = fma(_1925, cbSceneParam._m0[62u].w, fma(_1921, cbSceneParam._m0[62u].z, fma(_1917, cbSceneParam._m0[62u].y, _1913 * cbSceneParam._m0[62u].x))) / _2129;
            float _2273 = isnan(cbSceneParam._m0[41u].w) ? _2269 : (isnan(_2269) ? cbSceneParam._m0[41u].w : max(_2269, cbSceneParam._m0[41u].w));
            float _2316 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
            float _4453 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
            float _2323 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2130, cbSceneParam._m0[33u].w + _2131), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2130, _2131 - cbSceneParam._m0[33u].z), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].z, _2131 - cbSceneParam._m0[33u].w), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2131), _2273), 0.0)).x), vec4(0.25)));
            float _2327 = 1.0 - (_2323 * cbSceneParam._m0[34u].x);
            float _2328 = 1.0 - (_2323 * cbSceneParam._m0[34u].y);
            float _2329 = 1.0 - (_2323 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
            frontier_phi_36_35_ladder_1 = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
            frontier_phi_36_35_ladder_2 = isnan(_2327) ? _2075 : (isnan(_2075) ? _2327 : min(_2075, _2327));
        }
        else
        {
            frontier_phi_36_35_ladder = _2076;
            frontier_phi_36_35_ladder_1 = _2077;
            frontier_phi_36_35_ladder_2 = _2075;
        }
        _2141 = frontier_phi_36_35_ladder_2;
        _2143 = frontier_phi_36_35_ladder;
        _2145 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2141 = _2075;
        _2143 = _2076;
        _2145 = _2077;
    }
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_808 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2160 = _848 + (-1.0);
    float _2165 = (cbLight._m0[_2153].x * _2160) + 1.0;
    float _2166 = (cbLight._m0[_2153].y * _2160) + 1.0;
    float _2167 = (cbLight._m0[_2153].z * _2160) + 1.0;
    float _2168 = (cbLight._m0[_2153].w * _2160) + 1.0;
    uint _2169 = _2152 + 5u;
    float _2175 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2179 = _2152 + 4u;
    float _2188 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2192 = _2152 | 1u;
    float _2203 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_679, _680, _681));
    float _2206 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_679, _680, _681));
    float _4489 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _4500 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2211 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2213 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2220 = ((cbLight._m0[_2169].x * _2175) * _2213) + (((cbLight._m0[_2179].x * _2141) * _2188) * _2211);
    float _2221 = ((_2175 * cbLight._m0[_2169].y) * _2213) + (((cbLight._m0[_2179].y * _2143) * _2188) * _2211);
    float _2222 = ((_2175 * cbLight._m0[_2169].z) * _2213) + (((cbLight._m0[_2179].z * _2145) * _2188) * _2211);
    uvec4 _2226 = floatBitsToUint(cbLight._m0[_2152 + 12u]);
    bool _2228 = _2226.x == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2228)
    {
        _2330 = _2220;
        _2332 = _2221;
        _2334 = _2222;
    }
    else
    {
        uint _2338 = _2152 + 6u;
        float _2354 = (dot(vec3(cbLight._m0[_2152 + 2u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4511 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2357 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2330 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2220;
        _2332 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2221;
        _2334 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2222;
    }
    bool _2337 = _2226.y == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2337)
    {
        _2392 = _2330;
        _2394 = _2332;
        _2396 = _2334;
    }
    else
    {
        uint _2565 = _2152 + 7u;
        float _2581 = (dot(vec3(cbLight._m0[_2152 + 3u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2582 = _2581 * _2581;
        float _4527 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2583 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2584 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2392 = (((cbLight._m0[_2565].x * 0.3183098733425140380859375) * _2583) * _2584) + _2330;
        _2394 = (((cbLight._m0[_2565].y * 0.3183098733425140380859375) * _2583) * _2584) + _2332;
        _2396 = (((cbLight._m0[_2565].z * 0.3183098733425140380859375) * _2583) * _2584) + _2334;
    }
    uint _2399 = _2152 + 8u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _683) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2152].x + _761;
    float _2415 = cbLight._m0[_2152].y + _762;
    float _2416 = cbLight._m0[_2152].z + _763;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2152].xyz));
    float _4543 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _4554 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _2428 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2429 = dot(vec3(_679, _680, _681), vec3(_2421, _2422, _2423));
    float _4565 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2421, _2422, _2423));
    float _4576 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2413 * _2413;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
    float _2450 = 0.959999978542327880859375 - _830;
    float _2452 = 0.959999978542327880859375 - _831;
    float _2453 = 0.959999978542327880859375 - _832;
    float _2460 = 1.0 - _2413;
    float _2471 = (0.5 / (((_2428 * ((_2427 * _2460) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2460) + _2413) * _2427))) * _2427;
    float _4587 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2473 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    uint _2487 = _2152 + 9u;
    float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _683) * 0.949999988079071044921875);
    float _2499 = _2498 * _2498;
    float _2500 = cbLight._m0[_2192].x + _761;
    float _2501 = cbLight._m0[_2192].y + _762;
    float _2502 = cbLight._m0[_2192].z + _763;
    float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
    float _2507 = _2506 * _2500;
    float _2508 = _2506 * _2501;
    float _2509 = _2506 * _2502;
    float _2510 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2192].xyz));
    float _4598 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2514 = dot(vec3(_679, _680, _681), vec3(_2507, _2508, _2509));
    float _4609 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2518 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2507, _2508, _2509));
    float _4620 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2522 = _2499 * _2499;
    float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
    float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
    float _2540 = 1.0 - _2499;
    float _2550 = (0.5 / (((_2428 * ((_2513 * _2540) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2540) + _2499) * _2513))) * _2513;
    float _4631 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
    float _2562 = (((((_2533 * _2450) + _833) * cbLight._m0[_2487].x) * _2552) * _2175) + ((((cbLight._m0[_2399].x * _2141) * ((_2449 * _2450) + _833)) * _2473) * _2188);
    float _2563 = (((((_2533 * _2452) + _835) * cbLight._m0[_2487].y) * _2552) * _2175) + ((((cbLight._m0[_2399].y * _2143) * ((_2449 * _2452) + _835)) * _2473) * _2188);
    float _2564 = (((((_2533 * _2453) + _836) * cbLight._m0[_2487].z) * _2552) * _2175) + ((((cbLight._m0[_2399].z * _2145) * ((_2449 * _2453) + _836)) * _2473) * _2188);
    float _2620;
    float _2622;
    float _2624;
    if (_2228)
    {
        _2620 = _2562;
        _2622 = _2563;
        _2624 = _2564;
    }
    else
    {
        uint _2626 = _2152 + 2u;
        uint _2630 = _2152 + 10u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _683) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _761;
        float _2647 = cbLight._m0[_2626].y + _762;
        float _2648 = cbLight._m0[_2626].z + _763;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2626].xyz));
        float _4642 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2660 = dot(vec3(_679, _680, _681), vec3(_2653, _2654, _2655));
        float _4653 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4664 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2428 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2686) + _2645) * _2659))) * _2659;
        float _4675 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2620 = (((((_2679 * _2450) + _833) * cbLight._m0[_2630].x) * _2698) * _2699) + _2562;
        _2622 = (((((_2679 * _2452) + _835) * cbLight._m0[_2630].y) * _2698) * _2699) + _2563;
        _2624 = (((((_2679 * _2453) + _836) * cbLight._m0[_2630].z) * _2698) * _2699) + _2564;
    }
    float _2730;
    float _2732;
    float _2734;
    if (_2337)
    {
        _2730 = _2620;
        _2732 = _2622;
        _2734 = _2624;
    }
    else
    {
        uint _2741 = _2152 + 3u;
        uint _2745 = _2152 + 11u;
        float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2741].w)) * _683) * 0.949999988079071044921875);
        float _2760 = _2759 * _2759;
        float _2761 = cbLight._m0[_2741].x + _761;
        float _2762 = cbLight._m0[_2741].y + _762;
        float _2763 = cbLight._m0[_2741].z + _763;
        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
        float _2768 = _2767 * _2761;
        float _2769 = _2767 * _2762;
        float _2770 = _2767 * _2763;
        float _2771 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2741].xyz));
        float _4691 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2775 = dot(vec3(_679, _680, _681), vec3(_2768, _2769, _2770));
        float _4702 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2779 = dot(vec3(cbLight._m0[_2741].xyz), vec3(_2768, _2769, _2770));
        float _4713 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2783 = _2760 * _2760;
        float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
        float _2794 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2801 = 1.0 - _2760;
        float _2811 = (0.5 / (((_2428 * ((_2774 * _2801) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2801) + _2760) * _2774))) * _2774;
        float _4724 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2730 = (((((_2794 * _2450) + _833) * cbLight._m0[_2745].x) * _2813) * _2814) + _2620;
        _2732 = (((((_2794 * _2452) + _835) * cbLight._m0[_2745].y) * _2813) * _2814) + _2622;
        _2734 = (((((_2794 * _2453) + _836) * cbLight._m0[_2745].z) * _2813) * _2814) + _2624;
    }
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_2150.y == 0u)
    {
        uvec4 _2835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2836 = _2835.x;
        uint _2847 = uint((float(_2835.y) * floor(float(uint(cbSceneParam._m0[85u].y * _770) / _2836))) + floor(float(uint(cbSceneParam._m0[85u].x * _769) / _2836)));
        float _2857 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2858 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        uint _2861 = uint(isnan(14.0) ? _2858 : (isnan(_2858) ? 14.0 : min(_2858, 14.0)));
        uvec4 _2866 = texelFetch(g_lightClusterGridBuffer, int(((_2861 << 2u) + (_2847 << 6u)) >> 2u));
        uint _2867 = _2866.x;
        uint _2868 = _2835.z;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((((1u << ((_2868 >> 4u) & 15u)) + 4294967295u) & _2867) == 0u) || ((_2868 & 240u) == 0u))
        {
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
        }
        else
        {
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            uint _3123 = 0u;
            uint _3132;
            bool _3133;
            for (;;)
            {
                _3132 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                _3133 = _3132 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3133)
                {
                    frontier_phi_68_pred = _3122;
                    frontier_phi_68_pred_1 = _3121;
                    frontier_phi_68_pred_2 = _3120;
                    frontier_phi_68_pred_3 = _3118;
                    frontier_phi_68_pred_4 = _3117;
                    frontier_phi_68_pred_5 = _3119;
                }
                else
                {
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    uint _3247;
                    _3241 = _3117;
                    _3242 = _3118;
                    _3243 = _3119;
                    _3244 = _3120;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3132;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    for (;;)
                    {
                        uint _3251 = uint(findLSB(_3247)) + (_3123 << 5u);
                        uint _3248 = (_3247 + 4294967295u) & _3247;
                        uint _3253 = _3251 * 48u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3273 = (_3251 * 48u) + 4u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3292 = (_3251 * 48u) + 8u;
                        vec3 _3303 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x));
                        float _3307 = _3267.x - _1926;
                        float _3308 = _3267.y - _1927;
                        float _3309 = _3267.z - _1928;
                        float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                        float _3313 = inversesqrt(_3310);
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3317 = dot(vec3(_789, _792, _795), vec3(_3314, _3315, _3316));
                        float _3322 = 1.0 - (_3310 * _3267.w);
                        float _4750 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3324 = sqrt(_3310) * _3286.w;
                        float _3327 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3317) + _3328;
                        float _3334 = _3324 * _3324;
                        float _3338 = ((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3323) / ((_3334 * 0.699999988079071044921875) + 1.0);
                        float _3342 = (-0.0) - _1926;
                        float _3343 = (-0.0) - _1927;
                        float _3344 = (-0.0) - _1928;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3358 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                        float _3359 = 1.0 - _864;
                        float _3366 = sqrt(1.0 - ((1.0 - (_3359 * _3359)) * (1.0 - (_3358 * _3358))));
                        float _3367 = _3366 * _3366;
                        float _3368 = _3367 * _3367;
                        float _3369 = _3349 + _3314;
                        float _3370 = _3350 + _3315;
                        float _3371 = _3351 + _3316;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3379 = dot(vec3(_789, _792, _795), vec3(_3349, _3350, _3351));
                        float _4766 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3383 = dot(vec3(_789, _792, _795), vec3(_3375 * _3369, _3375 * _3370, _3375 * _3371));
                        float _4777 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3390 = ((_3386 * _3386) * (_3368 + (-1.0))) + 1.0;
                        float _3391 = _3327 * _3367;
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3317) + _3392;
                        float _4788 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3397 = 1.0 - _3367;
                        float _3407 = (0.5 / (((_3396 * ((_3382 * _3397) + _3367)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3367) * _3382))) * _3396;
                        float _4799 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3418 = (((_3368 * 3.1415927410125732421875) * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) / ((_3390 * _3390) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125))) * _3323;
                        _3176 = (_3338 * _3286.x) + _3244;
                        _3177 = (_3338 * _3286.y) + _3245;
                        _3178 = (_3338 * _3286.z) + _3246;
                        _3173 = (_3418 * _3303.x) + _3241;
                        _3174 = (_3418 * _3303.y) + _3242;
                        _3175 = (_3418 * _3303.z) + _3243;
                        if (_3248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3241 = _3173;
                            _3242 = _3174;
                            _3243 = _3175;
                            _3244 = _3176;
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3248;
                        }
                    }
                    frontier_phi_68_pred = _3178;
                    frontier_phi_68_pred_1 = _3177;
                    frontier_phi_68_pred_2 = _3176;
                    frontier_phi_68_pred_3 = _3174;
                    frontier_phi_68_pred_4 = _3173;
                    frontier_phi_68_pred_5 = _3175;
                }
                _2984 = frontier_phi_68_pred;
                _2982 = frontier_phi_68_pred_1;
                _2980 = frontier_phi_68_pred_2;
                _2976 = frontier_phi_68_pred_3;
                _2974 = frontier_phi_68_pred_4;
                _2978 = frontier_phi_68_pred_5;
                uint _3124 = _3123 + 1u;
                if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3117 = _2974;
                    _3118 = _2976;
                    _3119 = _2978;
                    _3120 = _2980;
                    _3121 = _2982;
                    _3122 = _2984;
                    _3123 = _3124;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
        }
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.z;
        uint _2990 = (_2988 >> 8u) & 15u;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((4294967295u << _2990) & _2867) == 0u)
        {
            _3085 = _2973;
            _3087 = _2975;
            _3089 = _2977;
            _3091 = _2979;
            _3093 = _2981;
            _3095 = _2983;
        }
        else
        {
            float _3110 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float _3111 = _3110 * _1926;
            float _3112 = _3110 * _1927;
            float _3113 = _3110 * _1928;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2990 < ((_2988 >> 12u) & 15u))
            {
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3224 = _2973;
                float _3225 = _2975;
                float _3226 = _2977;
                float _3227 = _2979;
                float _3228 = _2981;
                float _3229 = _2983;
                uint _3230 = _2990;
                uint _3239;
                bool _3240;
                for (;;)
                {
                    _3239 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3230 << 2u)) >> 2u)).x;
                    _3240 = _3239 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3240)
                    {
                        frontier_phi_74_pred = _3226;
                        frontier_phi_74_pred_1 = _3225;
                        frontier_phi_74_pred_2 = _3224;
                        frontier_phi_74_pred_3 = _3229;
                        frontier_phi_74_pred_4 = _3228;
                        frontier_phi_74_pred_5 = _3227;
                    }
                    else
                    {
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3436 = _3224;
                        float _3437 = _3225;
                        float _3438 = _3226;
                        float _3439 = _3227;
                        float _3440 = _3228;
                        float _3441 = _3229;
                        uint _3442 = _3239;
                        uint _3443;
                        vec4 _3468;
                        float _3469;
                        vec4 _3484;
                        vec3 _3496;
                        vec4 _3511;
                        vec4 _3527;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3453 = ((_3230 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3442));
                            _3443 = (_3442 + 4294967295u) & _3442;
                            uint _3455 = _3453 * 40u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3469 = _3468.w;
                            uint _3471 = (_3453 * 40u) + 4u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3453 * 40u) + 8u;
                            _3496 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x));
                            uint _3498 = (_3453 * 40u) + 16u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3514 = (_3453 * 40u) + 20u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3530 = (_3453 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3453 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_1928, _3562.z, fma(_1927, _3562.y, _3562.x * _1926)) + _3562.w;
                            _3575 = !((fma(_1928, _3543.z, fma(_1927, _3543.y, _3543.x * _1926)) + _3543.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3468.x - _1926;
                                float _3603 = _3468.y - _1927;
                                float _3604 = _3468.z - _1928;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3469 * _3469));
                                float _4810 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3620 = sqrt(_3605) * _3484.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_789, _792, _795))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_1928, _3511.z, fma(_1927, _3511.y, _3511.x * _1926)) + _3511.w) / _3574;
                                float _3634 = (fma(_1928, _3527.z, fma(_1927, _3527.y, _3527.x * _1926)) + _3527.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4826 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _864;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3111;
                                float _3664 = _3610 - _3112;
                                float _3665 = _3611 - _3113;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_789, _792, _795), vec3((-0.0) - _3111, (-0.0) - _3112, (-0.0) - _3113));
                                float _4837 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3677 = dot(vec3(_789, _792, _795), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4848 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_789, _792, _795), vec3(_3609, _3610, _3611))) + _3686;
                                float _4859 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4870 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3714 * _3496.z;
                                frontier_phi_80_pred_1 = _3714 * _3496.y;
                                frontier_phi_80_pred_2 = _3714 * _3496.x;
                                frontier_phi_80_pred_3 = _3640 * _3484.z;
                                frontier_phi_80_pred_4 = _3640 * _3484.y;
                                frontier_phi_80_pred_5 = _3640 * _3484.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3720 = frontier_phi_80_pred;
                            _3719 = frontier_phi_80_pred_1;
                            _3718 = frontier_phi_80_pred_2;
                            _3723 = frontier_phi_80_pred_3;
                            _3722 = frontier_phi_80_pred_4;
                            _3721 = frontier_phi_80_pred_5;
                            _3426 = _3721 + _3439;
                            _3427 = _3722 + _3440;
                            _3428 = _3723 + _3441;
                            _3423 = _3718 + _3436;
                            _3424 = _3719 + _3437;
                            _3425 = _3720 + _3438;
                            if (_3443 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3443;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3425;
                        frontier_phi_74_pred_1 = _3424;
                        frontier_phi_74_pred_2 = _3423;
                        frontier_phi_74_pred_3 = _3428;
                        frontier_phi_74_pred_4 = _3427;
                        frontier_phi_74_pred_5 = _3426;
                    }
                    _3090 = frontier_phi_74_pred;
                    _3088 = frontier_phi_74_pred_1;
                    _3086 = frontier_phi_74_pred_2;
                    _3096 = frontier_phi_74_pred_3;
                    _3094 = frontier_phi_74_pred_4;
                    _3092 = frontier_phi_74_pred_5;
                    uint _3231 = _3230 + 1u;
                    if (_3231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3224 = _3086;
                        _3225 = _3088;
                        _3226 = _3090;
                        _3227 = _3092;
                        _3228 = _3094;
                        _3229 = _3096;
                        _3230 = _3231;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3094;
                frontier_phi_62_63_ladder_1 = _3092;
                frontier_phi_62_63_ladder_2 = _3090;
                frontier_phi_62_63_ladder_3 = _3096;
                frontier_phi_62_63_ladder_4 = _3088;
                frontier_phi_62_63_ladder_5 = _3086;
            }
            else
            {
                frontier_phi_62_63_ladder = _2981;
                frontier_phi_62_63_ladder_1 = _2979;
                frontier_phi_62_63_ladder_2 = _2977;
                frontier_phi_62_63_ladder_3 = _2983;
                frontier_phi_62_63_ladder_4 = _2975;
                frontier_phi_62_63_ladder_5 = _2973;
            }
            _3085 = frontier_phi_62_63_ladder_5;
            _3087 = frontier_phi_62_63_ladder_4;
            _3089 = frontier_phi_62_63_ladder_2;
            _3091 = frontier_phi_62_63_ladder_1;
            _3093 = frontier_phi_62_63_ladder;
            _3095 = frontier_phi_62_63_ladder_3;
        }
        float _3100 = isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0));
        _2879 = (_3100 * _3091) + _2392;
        _2881 = (_3100 * _3093) + _2394;
        _2883 = (_3100 * _3095) + _2396;
        _2885 = ((_3085 * _833) * _3100) + _2730;
        _2887 = ((_3087 * _835) * _3100) + _2732;
        _2889 = ((_3089 * _836) * _3100) + _2734;
    }
    else
    {
        _2879 = _2392;
        _2881 = _2394;
        _2883 = _2396;
        _2885 = _2730;
        _2887 = _2732;
        _2889 = _2734;
    }
    uint _2895 = _809 + uint(cbMatDynParam._m0[0u].w);
    float _4886 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4897 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4908 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4919 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2927 = (((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2879 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _848))) + ((_2885 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1657)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * TEXCOORD_7.x) * ((_515 * _510.x) + cbMtdParam._m0[16u].x)) * cbInstanceData._m0[_2895].x);
    float _2929 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.y) * ((_515 * _510.y) + cbMtdParam._m0[16u].y)) * cbInstanceData._m0[_2895].y) + ((_2887 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1657)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2881 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _848)));
    float _2931 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.z) * ((_515 * _510.z) + cbMtdParam._m0[16u].z)) * cbInstanceData._m0[_2895].z) + ((_2889 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1657)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2883 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _848)));
    float _2939 = cbInstanceData._m0[_808 + 6u].w * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)));
    float _2944 = _769 / cbSceneParam._m0[86u].x;
    float _2945 = _770 / cbSceneParam._m0[86u].y;
    vec4 _2959 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2944, _2945, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2961 = _2959.x;
    float _2962 = _2959.y;
    float _2963 = _2959.z;
    float _2964 = _2959.w;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _2998 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _2999 = _2998 / _703;
        float _3010 = _2999 * _754;
        float _3011 = _755 * _2999;
        float _3012 = (-0.0) - _3011;
        float _3013 = _2999 * _756;
        float _3015 = (cbSceneParam._m0[77u].w * _3012) / _2998;
        float _3016 = _3015 + cbSceneParam._m0[79u].w;
        float _3017 = cbSceneParam._m0[79u].w - _3011;
        float _3023 = sqrt(((_3010 * _3010) + (_3011 * _3011)) + (_3013 * _3013));
        float _3026 = (1.0 - (cbSceneParam._m0[77u].w / _2998)) * _3023;
        float _3031 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3033 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3186;
        if (abs((_3012 - _3015) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3186 = ((((_3016 > 0.0) ? exp2(_3031 * _3016) : (2.0 - exp2(_3033 * _3016))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3026;
        }
        else
        {
            float _3146 = 1.0 / cbSceneParam._m0[80u].x;
            float _3147 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : max(_3016, _3017));
            float _3148 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : min(_3016, _3017));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            _3186 = ((abs(_3023 / _3012) * cbSceneParam._m0[80u].y) * ((((_3157 - _3158) * 2.0) - ((exp2(_3031 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0)))) - exp2(_3031 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))))) * _3146)) - ((exp2(_3033 * _3157) - exp2(_3033 * _3158)) * _3146))) + (_3026 * cbSceneParam._m0[80u].z);
        }
        vec4 _3188 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2944, _2945, 1.0), 0.0);
        float _3197 = exp2((_3186 * (-1.44269502162933349609375)) * (1.0 - _3188.w));
        float _3198 = log2(_3197);
        float _3214 = log2(_2964);
        _3035 = (exp2(_3214 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].x)) * _3188.x) / cbSceneParam._m0[78u].x)) + _2961;
        _3037 = (exp2(_3214 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].y)) * _3188.y) / cbSceneParam._m0[78u].y)) + _2962;
        _3039 = (exp2(_3214 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].z)) * _3188.z) / cbSceneParam._m0[78u].z)) + _2963;
        _3041 = _3197 * _2964;
    }
    else
    {
        _3035 = _2961;
        _3037 = _2962;
        _3039 = _2963;
        _3041 = _2964;
    }
    float _3053 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3054 = _3053 == 3.0;
    float _3055 = log2(_3041);
    float _3062 = exp2(_3055 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0)));
    float _3063 = exp2(_3055 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0)));
    float _3064 = exp2(_3055 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)));
    float _3073 = (_3053 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3073 * (_3054 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3035)));
    SV_Target.y = _3073 * (_3054 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3037)));
    SV_Target.z = _3073 * (_3054 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3039)));
    SV_Target.w = _2939;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2939;
}


