#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1198;
float _3615;
float _3616;
float _3617;
float _3618;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _224 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _225 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _226 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _230 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _231 = _230 * _224;
    float _232 = _230 * _225;
    float _233 = _230 * _226;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _251 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _252 = _251 * TANGENT_2.x;
    float _253 = _251 * TANGENT_2.y;
    float _254 = _251 * TANGENT_2.z;
    float _259;
    float _260;
    float _261;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _259 = (-0.0) - _238;
        _260 = (-0.0) - _239;
        _261 = (-0.0) - _240;
    }
    else
    {
        _259 = _238;
        _260 = _239;
        _261 = _240;
    }
    float _284 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _296 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _284) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3627 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _299 = 1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)));
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    float _309 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _284) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3648 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = 1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)));
    float _312 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(1.0) ? _312 : (isnan(_312) ? 1.0 : min(_312, 1.0));
    vec4 _331 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _333 = _331.x;
    float _334 = _331.y;
    float _335 = _331.z;
    float _336 = cbMtdParam._m0[11u].x * _313;
    float _338 = cbMtdParam._m0[11u].y * _313;
    float _340 = cbMtdParam._m0[11u].z * _313;
    float _360 = _311 + _299;
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _362 = isnan(1.0) ? _361 : (isnan(_361) ? 1.0 : min(_361, 1.0));
    vec4 _380 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _385 = _380.w;
    float _386 = _380.x * cbMtdParam._m0[10u].x;
    float _387 = _380.y * cbMtdParam._m0[10u].y;
    float _388 = _380.z * cbMtdParam._m0[10u].z;
    float _403 = (_386 - (_362 * _386)) + ((((((_333 * (cbMtdParam._m0[9u].x - _336)) * _301) + (_336 * _333)) * 4.55000019073486328125) * _362) * _386);
    float _405 = (((((((_334 * (cbMtdParam._m0[9u].y - _338)) * _301) + (_338 * _334)) * 4.55000019073486328125) * _362) * _387) + _387) - (_362 * _387);
    float _407 = (((((((_335 * (cbMtdParam._m0[9u].z - _340)) * _301) + (_340 * _335)) * 4.55000019073486328125) * _362) * _388) + _388) - (_362 * _388);
    vec4 _424 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _428 = _424.z;
    float _432 = (_424.x * 2.0) + (-1.0);
    float _434 = (_424.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_432, _434), vec2(_432, _434));
    float _3679 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    float _443 = fma(_440, _259, fma(_434, _252, _432 * _231));
    float _446 = fma(_440, _260, fma(_434, _253, _432 * _232));
    float _449 = fma(_440, _261, fma(_434, _254, _432 * _233));
    float _453 = inversesqrt(dot(vec3(_443, _446, _449), vec3(_443, _446, _449)));
    float _454 = _453 * _443;
    float _455 = _453 * _446;
    float _456 = _453 * _449;
    vec4 _468 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _474 = (_468.x * 2.0) + (-1.0);
    float _475 = (_468.y * 2.0) + (-1.0);
    float _476 = dot(vec2(_474, _475), vec2(_474, _475));
    float _3690 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    float _484 = fma(_481, _259, fma(_475, _252, _474 * _231));
    float _487 = fma(_481, _260, fma(_475, _253, _474 * _232));
    float _490 = fma(_481, _261, fma(_475, _254, _474 * _233));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    float _495 = _494 * _484;
    float _496 = _494 * _487;
    float _497 = _494 * _490;
    float _500 = fma(_497, _214, fma(_496, _213, _495 * _212));
    float _503 = fma(_497, _247, fma(_496, _246, _495 * _245));
    float _506 = fma(_497, _261, fma(_496, _260, _495 * _259));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _514 = fma(_456, _214, fma(_455, _213, _454 * _212));
    float _517 = fma(_456, _247, fma(_455, _246, _454 * _245));
    float _520 = fma(_456, _261, fma(_455, _260, _454 * _259));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    float _527 = _524 * _520;
    vec4 _540 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _546 = (_540.x * 2.0) + (-1.0);
    float _547 = (_540.y * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3701 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))));
    float _556 = fma(_553, _259, fma(_547, _252, _546 * _231));
    float _559 = fma(_553, _260, fma(_547, _253, _546 * _232));
    float _562 = fma(_553, _261, fma(_547, _254, _546 * _233));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    float _567 = _566 * _556;
    float _568 = _566 * _559;
    float _569 = _566 * _562;
    float _572 = fma(_569, _214, fma(_568, _213, _567 * _212));
    float _575 = fma(_569, _247, fma(_568, _246, _567 * _245));
    float _578 = fma(_569, _261, fma(_568, _260, _567 * _259));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _597 = ((_524 * _514) + (((_500 * _301) * _510) * cbMtdParam._m0[14u].z)) + (((_572 * _313) * _582) * cbMtdParam._m0[14u].y);
    float _599 = ((_524 * _517) + (((_503 * _301) * _510) * cbMtdParam._m0[14u].z)) + (((_575 * _313) * _582) * cbMtdParam._m0[14u].y);
    float _602 = fma(_527, _259, fma(_599, _245, _597 * _212));
    float _605 = fma(_527, _260, fma(_599, _246, _597 * _213));
    float _608 = fma(_527, _261, fma(_599, _247, _597 * _214));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3712 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _616 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _617 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3745 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3756 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3767 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _621 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _637 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _688 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _678);
    float _689 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _678);
    float _690 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _678);
    float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
    float _695 = _688 * _694;
    float _696 = _689 * _694;
    float _697 = _690 * _694;
    vec4 _702 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _704 = _702.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _877 = sqrt(((_688 * _688) + (_689 * _689)) + (_690 * _690));
        float _883 = (cbMatDynParam._m0[5u].x * _877) + cbMatDynParam._m0[5u].y;
        float _3778 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _888 = (cbMatDynParam._m0[5u].z * _877) + cbMatDynParam._m0[5u].w;
        float _3789 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) - _884)) + _884) < ((_704 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _738 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _741 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _754 = uint(roundEven(NORMAL.w)) * 13u;
    uint _755 = _754 + 9u;
    uint _756 = _755 + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3800 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _768 = 1.0 - _621;
    float _769 = _765 * _768;
    float _770 = _766 * _768;
    float _771 = _767 * _768;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _621;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _621;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _621;
    float _779 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _794 = _791.x * TEXCOORD_7.w;
    float _795 = dot(vec3(_613, _614, _615), vec3(_695, _696, _697));
    float _798 = _795 * 2.0;
    float _802 = (_798 * _613) - _695;
    float _803 = (_798 * _614) - _696;
    float _804 = (_798 * _615) - _697;
    float _808 = abs(dot(vec3(_695, _696, _697), vec3(_613, _614, _615)));
    float _3833 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _810 = sqrt(_617);
    float _823 = exp2((_810 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_810 * 3.0));
    float _829 = (1.0 - _823) * ((_810 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _830 = _823 * _810;
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1197;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _922 = fma(_866, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858));
        float _926 = fma(_866, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858));
        float _930 = fma(_866, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858));
        float _955 = _858 + _613;
        float _956 = _862 + _614;
        float _957 = _866 + _615;
        float _967 = fma(_957, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955)) - _922;
        float _968 = fma(_957, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955)) - _926;
        float _969 = fma(_957, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955)) - _930;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_922 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_926 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[34u].z) + ((((((_930 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1025 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_991.x + (-0.5));
        float _1027 = _1025 * (_991.y + (-0.5));
        float _1028 = _1025 * (_991.z + (-0.5));
        float _1035 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_998.x + (-0.5));
        float _1037 = _1035 * (_998.y + (-0.5));
        float _1038 = _1035 * (_998.z + (-0.5));
        float _1045 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1005.x + (-0.5));
        float _1047 = _1045 * (_1005.y + (-0.5));
        float _1048 = _1045 * (_1005.z + (-0.5));
        float _1055 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1012.x + (-0.5));
        float _1057 = _1055 * (_1012.y + (-0.5));
        float _1058 = _1055 * (_1012.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1079 = (dot(vec3(_613, _614, _615), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1089 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3881 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1091 + 1.0))) + _1096) * _1059;
        float _1106 = _1027 * 0.5;
        float _1107 = _1037 * 0.5;
        float _1108 = _1047 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_613, _614, _615), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3914 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1133 + 1.0))) + _1138) * _1060;
        float _1148 = _1028 * 0.5;
        float _1149 = _1038 * 0.5;
        float _1150 = _1048 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_613, _614, _615), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3947 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1175 + 1.0))) + _1180) * _1061;
        _1197 = _1028;
        _1199 = _1027;
        _1200 = _1026;
        _1201 = _1038;
        _1202 = _1037;
        _1203 = _1036;
        _1204 = _1048;
        _1205 = _1047;
        _1206 = _1046;
        _1207 = _1061;
        _1208 = _1060;
        _1209 = _1059;
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _1198;
        _1199 = _1198;
        _1200 = _1198;
        _1201 = _1198;
        _1202 = _1198;
        _1203 = _1198;
        _1204 = _1198;
        _1205 = _1198;
        _1206 = _1198;
        _1207 = _1198;
        _1208 = _1198;
        _1209 = _1198;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1241 = fma(_866, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858));
        float _1245 = fma(_866, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858));
        float _1249 = fma(_866, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858));
        float _1272 = _858 + _613;
        float _1273 = _862 + _614;
        float _1274 = _866 + _615;
        float _1284 = fma(_1274, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272)) - _1241;
        float _1285 = fma(_1274, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272)) - _1245;
        float _1286 = fma(_1274, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272)) - _1249;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1241 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1245 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[35u].z) + ((((((_1249 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1340 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1307.x + (-0.5));
        float _1342 = _1340 * (_1307.y + (-0.5));
        float _1343 = _1340 * (_1307.z + (-0.5));
        float _1350 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1314.x + (-0.5));
        float _1352 = _1350 * (_1314.y + (-0.5));
        float _1353 = _1350 * (_1314.z + (-0.5));
        float _1360 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1321.x + (-0.5));
        float _1362 = _1360 * (_1321.y + (-0.5));
        float _1363 = _1360 * (_1321.z + (-0.5));
        float _1370 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1328.x + (-0.5));
        float _1372 = _1370 * (_1328.y + (-0.5));
        float _1373 = _1370 * (_1328.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_613, _614, _615), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4010 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1404 + 1.0))) + _1409) * _1374;
        float _1419 = _1342 * 0.5;
        float _1420 = _1352 * 0.5;
        float _1421 = _1362 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_613, _614, _615), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4043 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1446 + 1.0))) + _1451) * _1375;
        float _1461 = _1343 * 0.5;
        float _1462 = _1353 * 0.5;
        float _1463 = _1363 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_613, _614, _615), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4076 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1488 + 1.0))) + _1493) * _1376;
        _1510 = _1343;
        _1511 = _1342;
        _1512 = _1341;
        _1513 = _1353;
        _1514 = _1352;
        _1515 = _1351;
        _1516 = _1363;
        _1517 = _1362;
        _1518 = _1361;
        _1519 = _1376;
        _1520 = _1375;
        _1521 = _1374;
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1198;
        _1511 = _1198;
        _1512 = _1198;
        _1513 = _1198;
        _1514 = _1198;
        _1515 = _1198;
        _1516 = _1198;
        _1517 = _1198;
        _1518 = _1198;
        _1519 = _1198;
        _1520 = _1198;
        _1521 = _1198;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1210)) + _1210;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1211)) + _1211;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1212)) + _1212;
    float _1557 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1534));
    float _1578 = _802 * 0.5;
    float _1579 = _803 * 0.5;
    float _1580 = _804 * 0.5;
    float _1581 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1584 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1587 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1621;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1594 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1197, _1201, _1204, _1207));
        float _1598 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1602 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1609 = dot(vec4(cbModelParam._m0[39u]), vec4(_1578, _1579, _1580, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1632;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1623 = dot(vec4(cbModelParam._m0[40u]), vec4(_1578, _1579, _1580, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1636 = (_1632 * cbModelParam._m0[1u].x) + (_1621 * (1.0 - cbModelParam._m0[1u].x));
    float _1646 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1646 : min(cbModelParam._m0[25u].z, _1646));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_866, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_866, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_866, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_804, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802));
        float _1708 = fma(_804, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802));
        float _1711 = fma(_804, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1739 = frontier_phi_19_17_ladder;
        }
        float _1967;
        if (_1708 > 0.0)
        {
            _1967 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1967 = frontier_phi_28_24_ladder;
        }
        float _2224;
        if (_1711 > 0.0)
        {
            _2224 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2224 = frontier_phi_40_35_ladder;
        }
        float _2226 = isnan(_1967) ? _1739 : (isnan(_1739) ? _1967 : min(_1739, _1967));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1705) + _1694;
        float _2232 = (_2227 * _1708) + _1698;
        float _2233 = (_2227 * _1711) + _1702;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2234;
        float _2238 = _2234 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 > _2238) || ((_2232 < _2236) || ((_2231 < _2236) || (_2231 > _2238))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2233, cbModelParam._m0[9u].z, fma(_2232, cbModelParam._m0[9u].y, _2231 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2233, cbModelParam._m0[10u].z, fma(_2232, cbModelParam._m0[10u].y, _2231 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2233, cbModelParam._m0[11u].z, fma(_2232, cbModelParam._m0[11u].y, _2231 * cbModelParam._m0[11u].x))), _1647);
            frontier_phi_18_40_ladder = _2361.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2361.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2361.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_18_40_ladder_2;
        _1729 = frontier_phi_18_40_ladder_1;
        _1731 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_802, _803, _804), _1647);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1793 = fma(_866, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858)) + cbModelParam._m0[21u].w;
        float _1797 = fma(_866, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858)) + cbModelParam._m0[22u].w;
        float _1801 = fma(_866, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858)) + cbModelParam._m0[23u].w;
        float _1804 = fma(_804, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802));
        float _1807 = fma(_804, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802));
        float _1810 = fma(_804, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802));
        float _1972;
        if (_1804 > 0.0)
        {
            _1972 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1972 = frontier_phi_30_26_ladder;
        }
        float _2251;
        if (_1807 > 0.0)
        {
            _2251 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2251 = frontier_phi_42_37_ladder;
        }
        float _2464;
        if (_1810 > 0.0)
        {
            _2464 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2464 = frontier_phi_51_48_ladder;
        }
        float _2466 = isnan(_2251) ? _1972 : (isnan(_1972) ? _2251 : min(_1972, _2251));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1804) + _1793;
        float _2472 = (_2467 * _1807) + _1797;
        float _2473 = (_2467 * _1810) + _1801;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2474;
        float _2477 = _2474 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2473 > _2477) || ((_2473 < _2475) || ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 < _2475) || (_2471 > _2477))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2473, cbModelParam._m0[17u].z, fma(_2472, cbModelParam._m0[17u].y, _2471 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2473, cbModelParam._m0[18u].z, fma(_2472, cbModelParam._m0[18u].y, _2471 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2473, cbModelParam._m0[19u].z, fma(_2472, cbModelParam._m0[19u].y, _2471 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_27_51_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1829 = frontier_phi_27_51_ladder_2;
        _1831 = frontier_phi_27_51_ladder_1;
        _1833 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_802, _803, _804), _1736);
        _1829 = _1813.x * cbModelParam._m0[1u].z;
        _1831 = _1813.y * cbModelParam._m0[1u].z;
        _1833 = _1813.z * cbModelParam._m0[1u].z;
    }
    float _1846 = (((_829 * _779) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1829 - _1727)) + _1727);
    float _1848 = (((_829 * _781) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1831 - _1729)) + _1729);
    float _1850 = (((_829 * _782) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1833 - _1731)) + _1731);
    float _1853 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1848, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1856 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1848, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1859 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1848, cbSceneParam._m0[91u].y, _1846 * cbSceneParam._m0[91u].x));
    vec4 _1867 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_715, _716));
    float _1869 = _1867.w;
    float _1881 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1869);
    float _1882 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1869);
    float _1883 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1869);
    uvec4 _1887 = floatBitsToUint(cbInstanceData._m0[_754 + 5u]);
    uint _1889 = _1887.x * 14u;
    uint _1890 = _1889 + 13u;
    float _1897 = _794 + (-1.0);
    float _1902 = (cbLight._m0[_1890].x * _1897) + 1.0;
    float _1903 = (cbLight._m0[_1890].y * _1897) + 1.0;
    float _1904 = (cbLight._m0[_1890].z * _1897) + 1.0;
    float _1905 = (cbLight._m0[_1890].w * _1897) + 1.0;
    uint _1906 = _1889 + 5u;
    float _1912 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1916 = _1889 + 4u;
    float _1925 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1929 = _1889 | 1u;
    float _1940 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_613, _614, _615));
    float _1943 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_613, _614, _615));
    float _4212 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _4223 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1948 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.3183098733425140380859375;
    float _1950 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _1957 = ((cbLight._m0[_1906].x * _1912) * _1950) + (((cbLight._m0[_1916].x * _1881) * _1925) * _1948);
    float _1958 = ((_1912 * cbLight._m0[_1906].y) * _1950) + (((cbLight._m0[_1916].y * _1882) * _1925) * _1948);
    float _1959 = ((_1912 * cbLight._m0[_1906].z) * _1950) + (((cbLight._m0[_1916].z * _1883) * _1925) * _1948);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1889 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1966)
    {
        _1977 = _1957;
        _1979 = _1958;
        _1981 = _1959;
    }
    else
    {
        uint _1985 = _1889 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1889 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4234 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2004 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1957;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1958;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1959;
    }
    bool _1984 = _1964.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1984)
    {
        _2022 = _1977;
        _2024 = _1979;
        _2026 = _1981;
    }
    else
    {
        uint _2195 = _1889 + 7u;
        float _2211 = (dot(vec3(cbLight._m0[_1889 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4250 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2214 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2022 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _1977;
        _2024 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _1979;
        _2026 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _1981;
    }
    uint _2029 = _1889 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _617) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1889].x + _695;
    float _2045 = cbLight._m0[_1889].y + _696;
    float _2046 = cbLight._m0[_1889].z + _697;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1889].xyz));
    float _4266 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2058 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2059 = dot(vec3(_613, _614, _615), vec3(_2051, _2052, _2053));
    float _4288 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2051, _2052, _2053));
    float _4299 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2079 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2080 = 0.959999978542327880859375 - _776;
    float _2082 = 0.959999978542327880859375 - _777;
    float _2083 = 0.959999978542327880859375 - _778;
    float _2090 = 1.0 - _2043;
    float _2101 = (0.5 / (((_2058 * ((_2057 * _2090) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2090) + _2043) * _2057))) * _2057;
    float _4310 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2117 = _1889 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _617) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1929].x + _695;
    float _2131 = cbLight._m0[_1929].y + _696;
    float _2132 = cbLight._m0[_1929].z + _697;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1929].xyz));
    float _4321 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2144 = dot(vec3(_613, _614, _615), vec3(_2137, _2138, _2139));
    float _4332 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2137, _2138, _2139));
    float _4343 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
    float _2170 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2058 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2170) + _2129) * _2143))) * _2143;
    float _4354 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2192 = (((((_2163 * _2080) + _779) * cbLight._m0[_2117].x) * _2182) * _1912) + ((((cbLight._m0[_2029].x * _1881) * ((_2079 * _2080) + _779)) * _2103) * _1925);
    float _2193 = (((((_2163 * _2082) + _781) * cbLight._m0[_2117].y) * _2182) * _1912) + ((((cbLight._m0[_2029].y * _1882) * ((_2079 * _2082) + _781)) * _2103) * _1925);
    float _2194 = (((((_2163 * _2083) + _782) * cbLight._m0[_2117].z) * _2182) * _1912) + ((((cbLight._m0[_2029].z * _1883) * ((_2079 * _2083) + _782)) * _2103) * _1925);
    float _2256;
    float _2258;
    float _2260;
    if (_1966)
    {
        _2256 = _2192;
        _2258 = _2193;
        _2260 = _2194;
    }
    else
    {
        uint _2262 = _1889 + 2u;
        uint _2266 = _1889 + 10u;
        float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _617) * 0.949999988079071044921875);
        float _2281 = _2280 * _2280;
        float _2282 = cbLight._m0[_2262].x + _695;
        float _2283 = cbLight._m0[_2262].y + _696;
        float _2284 = cbLight._m0[_2262].z + _697;
        float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
        float _2289 = _2288 * _2282;
        float _2290 = _2288 * _2283;
        float _2291 = _2288 * _2284;
        float _2292 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2262].xyz));
        float _4365 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2296 = dot(vec3(_613, _614, _615), vec3(_2289, _2290, _2291));
        float _4376 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2300 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2289, _2290, _2291));
        float _4387 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2304 = _2281 * _2281;
        float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
        float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
        float _2322 = 1.0 - _2281;
        float _2332 = (0.5 / (((_2058 * ((_2295 * _2322) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2322) + _2281) * _2295))) * _2295;
        float _4398 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2256 = (((((_2315 * _2080) + _779) * cbLight._m0[_2266].x) * _2334) * _2335) + _2192;
        _2258 = (((((_2315 * _2082) + _781) * cbLight._m0[_2266].y) * _2334) * _2335) + _2193;
        _2260 = (((((_2315 * _2083) + _782) * cbLight._m0[_2266].z) * _2334) * _2335) + _2194;
    }
    float _2370;
    float _2372;
    float _2374;
    if (_1984)
    {
        _2370 = _2256;
        _2372 = _2258;
        _2374 = _2260;
    }
    else
    {
        uint _2381 = _1889 + 3u;
        uint _2385 = _1889 + 11u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _617) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _695;
        float _2402 = cbLight._m0[_2381].y + _696;
        float _2403 = cbLight._m0[_2381].z + _697;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2381].xyz));
        float _4414 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2415 = dot(vec3(_613, _614, _615), vec3(_2408, _2409, _2410));
        float _4425 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4436 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
        float _2441 = 1.0 - _2400;
        float _2451 = (0.5 / (((_2058 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2441) + _2400) * _2414))) * _2414;
        float _4447 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2370 = (((((_2434 * _2080) + _779) * cbLight._m0[_2385].x) * _2453) * _2454) + _2256;
        _2372 = (((((_2434 * _2082) + _781) * cbLight._m0[_2385].y) * _2453) * _2454) + _2258;
        _2374 = (((((_2434 * _2083) + _782) * cbLight._m0[_2385].z) * _2453) * _2454) + _2260;
    }
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    if (_1887.y == 0u)
    {
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2529;
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2529;
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2529;
        uvec4 _2544 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2545 = _2544.x;
        uint _2556 = uint((float(_2544.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2545))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2545)));
        float _2566 = (log2(_2532 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2567 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        uint _2570 = uint(isnan(14.0) ? _2567 : (isnan(_2567) ? 14.0 : min(_2567, 14.0)));
        uvec4 _2575 = texelFetch(g_lightClusterGridBuffer, int(((_2570 << 2u) + (_2556 << 6u)) >> 2u));
        uint _2576 = _2575.x;
        uint _2577 = _2544.z;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((((1u << ((_2577 >> 4u) & 15u)) + 4294967295u) & _2576) == 0u) || ((_2577 & 240u) == 0u))
        {
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
        }
        else
        {
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            uint _2839 = 0u;
            uint _2848;
            bool _2849;
            for (;;)
            {
                _2848 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                _2849 = _2848 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2849)
                {
                    frontier_phi_68_pred = _2835;
                    frontier_phi_68_pred_1 = _2838;
                    frontier_phi_68_pred_2 = _2837;
                    frontier_phi_68_pred_3 = _2836;
                    frontier_phi_68_pred_4 = _2834;
                    frontier_phi_68_pred_5 = _2833;
                }
                else
                {
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    uint _2984;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2848;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    for (;;)
                    {
                        uint _2988 = uint(findLSB(_2984)) + (_2839 << 5u);
                        uint _2985 = (_2984 + 4294967295u) & _2984;
                        uint _2990 = _2988 * 48u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3010 = (_2988 * 48u) + 4u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3029 = (_2988 * 48u) + 8u;
                        vec3 _3040 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x));
                        float _3044 = _3004.x - _2530;
                        float _3045 = _3004.y - _2531;
                        float _3046 = _3004.z - _2532;
                        float _3047 = dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046));
                        float _3050 = inversesqrt(_3047);
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3054 = dot(vec3(_735, _738, _741), vec3(_3051, _3052, _3053));
                        float _3059 = 1.0 - (_3047 * _3004.w);
                        float _4473 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3061 = sqrt(_3047) * _3023.w;
                        float _3064 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _3054) + _3065;
                        float _3071 = _3061 * _3061;
                        float _3075 = ((isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * _3060) / ((_3071 * 0.699999988079071044921875) + 1.0);
                        float _3079 = (-0.0) - _2530;
                        float _3080 = (-0.0) - _2531;
                        float _3081 = (-0.0) - _2532;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3096 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                        float _3097 = 1.0 - _810;
                        float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                        float _3105 = _3104 * _3104;
                        float _3106 = _3105 * _3105;
                        float _3107 = _3086 + _3051;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3117 = dot(vec3(_735, _738, _741), vec3(_3086, _3087, _3088));
                        float _4489 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3121 = dot(vec3(_735, _738, _741), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                        float _4500 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                        float _3129 = _3064 * _3105;
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3054) + _3130;
                        float _4511 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3135 = 1.0 - _3105;
                        float _3145 = (0.5 / (((_3134 * ((_3120 * _3135) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3105) * _3120))) * _3134;
                        float _4522 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3156 = (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3128 * _3128) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125))) * _3060;
                        _2908 = (_3075 * _3023.x) + _2981;
                        _2909 = (_3075 * _3023.y) + _2982;
                        _2910 = (_3075 * _3023.z) + _2983;
                        _2905 = (_3156 * _3040.x) + _2978;
                        _2906 = (_3156 * _3040.y) + _2979;
                        _2907 = (_3156 * _3040.z) + _2980;
                        if (_2985 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2985;
                        }
                    }
                    frontier_phi_68_pred = _2907;
                    frontier_phi_68_pred_1 = _2910;
                    frontier_phi_68_pred_2 = _2909;
                    frontier_phi_68_pred_3 = _2908;
                    frontier_phi_68_pred_4 = _2906;
                    frontier_phi_68_pred_5 = _2905;
                }
                _2686 = frontier_phi_68_pred;
                _2692 = frontier_phi_68_pred_1;
                _2690 = frontier_phi_68_pred_2;
                _2688 = frontier_phi_68_pred_3;
                _2684 = frontier_phi_68_pred_4;
                _2682 = frontier_phi_68_pred_5;
                uint _2840 = _2839 + 1u;
                if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2833 = _2682;
                    _2834 = _2684;
                    _2835 = _2686;
                    _2836 = _2688;
                    _2837 = _2690;
                    _2838 = _2692;
                    _2839 = _2840;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
        }
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.z;
        uint _2698 = (_2696 >> 8u) & 15u;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((4294967295u << _2698) & _2576) == 0u)
        {
            _2801 = _2681;
            _2803 = _2683;
            _2805 = _2685;
            _2807 = _2687;
            _2809 = _2689;
            _2811 = _2691;
        }
        else
        {
            float _2826 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
            float _2827 = _2826 * _2530;
            float _2828 = _2826 * _2531;
            float _2829 = _2826 * _2532;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2698 < ((_2696 >> 12u) & 15u))
            {
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2961 = _2681;
                float _2962 = _2683;
                float _2963 = _2685;
                float _2964 = _2687;
                float _2965 = _2689;
                float _2966 = _2691;
                uint _2967 = _2698;
                uint _2976;
                bool _2977;
                for (;;)
                {
                    _2976 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                    _2977 = _2976 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2977)
                    {
                        frontier_phi_79_pred = _2966;
                        frontier_phi_79_pred_1 = _2965;
                        frontier_phi_79_pred_2 = _2964;
                        frontier_phi_79_pred_3 = _2963;
                        frontier_phi_79_pred_4 = _2962;
                        frontier_phi_79_pred_5 = _2961;
                    }
                    else
                    {
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3183 = _2961;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        uint _3189 = _2976;
                        uint _3190;
                        vec4 _3215;
                        float _3216;
                        vec4 _3231;
                        vec3 _3243;
                        vec4 _3259;
                        vec4 _3275;
                        float _3322;
                        bool _3323;
                        for (;;)
                        {
                            uint _3200 = ((_2967 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3189));
                            _3190 = (_3189 + 4294967295u) & _3189;
                            uint _3202 = _3200 * 40u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3216 = _3215.w;
                            uint _3218 = (_3200 * 40u) + 4u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3233 = (_3200 * 40u) + 8u;
                            _3243 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x));
                            uint _3246 = (_3200 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3262 = (_3200 * 40u) + 20u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3278 = (_3200 * 40u) + 24u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3297 = (_3200 * 40u) + 28u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3322 = fma(_2532, _3310.z, fma(_2531, _3310.y, _3310.x * _2530)) + _3310.w;
                            _3323 = !((fma(_2532, _3291.z, fma(_2531, _3291.y, _3291.x * _2530)) + _3291.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3323)
                            {
                                float _3350 = _3215.x - _2530;
                                float _3351 = _3215.y - _2531;
                                float _3352 = _3215.z - _2532;
                                float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                                float _3356 = inversesqrt(_3353);
                                float _3357 = _3356 * _3350;
                                float _3358 = _3356 * _3351;
                                float _3359 = _3356 * _3352;
                                float _3363 = 1.0 - (_3353 / (_3216 * _3216));
                                float _4533 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3368 = sqrt(_3353) * _3231.w;
                                float _3370 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                                float _3371 = _3370 * _3370;
                                float _3374 = ((1.0 - _3371) * dot(vec3(_3357, _3358, _3359), vec3(_735, _738, _741))) + _3371;
                                float _3377 = _3368 * _3368;
                                float _3381 = (fma(_2532, _3259.z, fma(_2531, _3259.y, _3259.x * _2530)) + _3259.w) / _3322;
                                float _3382 = (fma(_2532, _3275.z, fma(_2531, _3275.y, _3275.x * _2530)) + _3275.w) / _3322;
                                float _3386 = 1.0 - dot(vec2(_3381, _3382), vec2(_3381, _3382));
                                float _4549 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3388 = _3387 * (((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3364) / ((_3377 * 0.699999988079071044921875) + 1.0));
                                float _3400 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                                float _3401 = 1.0 - _810;
                                float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                                float _3409 = _3408 * _3408;
                                float _3410 = _3409 * _3409;
                                float _3411 = _3357 - _2827;
                                float _3412 = _3358 - _2828;
                                float _3413 = _3359 - _2829;
                                float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                                float _3421 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2827, (-0.0) - _2828, (-0.0) - _2829));
                                float _4560 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3425 = dot(vec3(_735, _738, _741), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                                float _4571 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                                float _3433 = _3370 * _3409;
                                float _3434 = _3433 * _3433;
                                float _3440 = ((1.0 - _3434) * dot(vec3(_735, _738, _741), vec3(_3357, _3358, _3359))) + _3434;
                                float _4582 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3442 = 1.0 - _3409;
                                float _3452 = (0.5 / (((_3441 * ((_3424 * _3442) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3409) * _3424))) * _3441;
                                float _4593 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3462 = (_3387 * _3364) * (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3432 * _3432) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3388 * _3231.z;
                                frontier_phi_85_pred_1 = _3388 * _3231.y;
                                frontier_phi_85_pred_2 = _3388 * _3231.x;
                                frontier_phi_85_pred_3 = _3462 * _3243.z;
                                frontier_phi_85_pred_4 = _3462 * _3243.y;
                                frontier_phi_85_pred_5 = _3462 * _3243.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3471 = frontier_phi_85_pred;
                            _3470 = frontier_phi_85_pred_1;
                            _3469 = frontier_phi_85_pred_2;
                            _3468 = frontier_phi_85_pred_3;
                            _3467 = frontier_phi_85_pred_4;
                            _3466 = frontier_phi_85_pred_5;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            _3175 = _3471 + _3188;
                            _3170 = _3466 + _3183;
                            _3171 = _3467 + _3184;
                            _3172 = _3468 + _3185;
                            if (_3190 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3190;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3175;
                        frontier_phi_79_pred_1 = _3174;
                        frontier_phi_79_pred_2 = _3173;
                        frontier_phi_79_pred_3 = _3172;
                        frontier_phi_79_pred_4 = _3171;
                        frontier_phi_79_pred_5 = _3170;
                    }
                    _2812 = frontier_phi_79_pred;
                    _2810 = frontier_phi_79_pred_1;
                    _2808 = frontier_phi_79_pred_2;
                    _2806 = frontier_phi_79_pred_3;
                    _2804 = frontier_phi_79_pred_4;
                    _2802 = frontier_phi_79_pred_5;
                    uint _2968 = _2967 + 1u;
                    if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2961 = _2802;
                        _2962 = _2804;
                        _2963 = _2806;
                        _2964 = _2808;
                        _2965 = _2810;
                        _2966 = _2812;
                        _2967 = _2968;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2808;
                frontier_phi_60_61_ladder_1 = _2812;
                frontier_phi_60_61_ladder_2 = _2810;
                frontier_phi_60_61_ladder_3 = _2806;
                frontier_phi_60_61_ladder_4 = _2804;
                frontier_phi_60_61_ladder_5 = _2802;
            }
            else
            {
                frontier_phi_60_61_ladder = _2687;
                frontier_phi_60_61_ladder_1 = _2691;
                frontier_phi_60_61_ladder_2 = _2689;
                frontier_phi_60_61_ladder_3 = _2685;
                frontier_phi_60_61_ladder_4 = _2683;
                frontier_phi_60_61_ladder_5 = _2681;
            }
            _2801 = frontier_phi_60_61_ladder_5;
            _2803 = frontier_phi_60_61_ladder_4;
            _2805 = frontier_phi_60_61_ladder_3;
            _2807 = frontier_phi_60_61_ladder;
            _2809 = frontier_phi_60_61_ladder_2;
            _2811 = frontier_phi_60_61_ladder_1;
        }
        float _2816 = isnan(1.0) ? _794 : (isnan(_794) ? 1.0 : min(_794, 1.0));
        _2588 = (_2816 * _2807) + _2022;
        _2590 = (_2816 * _2809) + _2024;
        _2592 = (_2816 * _2811) + _2026;
        _2594 = ((_2801 * _779) * _2816) + _2370;
        _2596 = ((_2803 * _781) * _2816) + _2372;
        _2598 = ((_2805 * _782) * _2816) + _2374;
    }
    else
    {
        _2588 = _2022;
        _2590 = _2024;
        _2592 = _2026;
        _2594 = _2370;
        _2596 = _2372;
        _2598 = _2374;
    }
    float _4609 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4620 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4631 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4642 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2616 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2588 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _794))) + ((_2594 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2617 = ((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2590 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _794))) + ((_2596 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2618 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2592 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _794))) + ((_2598 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2619 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2620 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2626 = cbInstanceData._m0[_754 + 6u].w * (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)));
    float _2631 = _715 / cbSceneParam._m0[86u].x;
    float _2632 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _637 : (isnan(_637) ? cbSceneParam._m0[77u].w : min(_637, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_637 > cbSceneParam._m0[78u].w)
    {
        float _2706 = isnan(_637) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _637 : min(cbSceneParam._m0[80u].w, _637));
        float _2707 = _2706 / _637;
        float _2718 = _2707 * _688;
        float _2719 = _689 * _2707;
        float _2720 = (-0.0) - _2719;
        float _2721 = _2707 * _690;
        float _2723 = (cbSceneParam._m0[77u].w * _2720) / _2706;
        float _2724 = _2723 + cbSceneParam._m0[79u].w;
        float _2725 = cbSceneParam._m0[79u].w - _2719;
        float _2731 = sqrt(((_2718 * _2718) + (_2719 * _2719)) + (_2721 * _2721));
        float _2734 = (1.0 - (cbSceneParam._m0[77u].w / _2706)) * _2731;
        float _2739 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2741 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2918;
        if (abs((_2720 - _2723) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2918 = ((((_2724 > 0.0) ? exp2(_2739 * _2724) : (2.0 - exp2(_2741 * _2724))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2734;
        }
        else
        {
            float _2862 = 1.0 / cbSceneParam._m0[80u].x;
            float _2863 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : max(_2724, _2725));
            float _2864 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : min(_2724, _2725));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            _2918 = ((abs(_2731 / _2720) * cbSceneParam._m0[80u].y) * ((((_2873 - _2874) * 2.0) - ((exp2(_2739 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0)))) - exp2(_2739 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))))) * _2862)) - ((exp2(_2741 * _2873) - exp2(_2741 * _2874)) * _2862))) + (_2734 * cbSceneParam._m0[80u].z);
        }
        vec4 _2920 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2929 = exp2((_2918 * (-1.44269502162933349609375)) * (1.0 - _2920.w));
        float _2930 = log2(_2929);
        float _2946 = log2(_2651);
        _2743 = (exp2(_2946 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].x)) * _2920.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2745 = (exp2(_2946 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].y)) * _2920.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2747 = (exp2(_2946 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].z)) * _2920.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2749 = _2929 * _2651;
    }
    else
    {
        _2743 = _2648;
        _2745 = _2649;
        _2747 = _2650;
        _2749 = _2651;
    }
    bool _2956;
    vec4 _2759;
    vec4 _2781;
    float _2783;
    float _2787;
    float _2788;
    float _2789;
    float _2790;
    bool _2800;
    for (;;)
    {
        _2759 = cbMatDynParam._m0[0u];
        float _2761 = roundEven(_2759.y);
        bool _2762 = _2761 == 3.0;
        float _2763 = log2(_2749);
        float _2770 = exp2(_2763 * cbSceneParam._m0[78u].x) * _2619;
        float _2771 = exp2(_2763 * cbSceneParam._m0[78u].y) * _2620;
        float _2772 = exp2(_2763 * cbSceneParam._m0[78u].z) * _2621;
        float _2779 = _704 + (-0.5);
        _2781 = cbMtdParam._m0[1u];
        _2783 = _2781.y * _2779;
        float _2786 = (_2761 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2787 = _2786 * (_2762 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2743)));
        _2788 = _2786 * (_2762 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2745)));
        _2789 = _2786 * (_2762 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2747)));
        _2790 = _2779 * 0.999000012874603271484375;
        _2800 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2800)
        {
            if ((cbInstanceData._m0[_754 + 7u].x + _2790) < 0.5)
            {
                _2956 = true;
                break;
            }
        }
        uint _2897 = _755 + uint(_2759.w);
        if ((cbInstanceData._m0[_2897].w < 1.0) && ((cbInstanceData._m0[_2897].w + _2790) < 0.5))
        {
            _2956 = true;
            break;
        }
        if ((_2783 + _385) < _2781.x)
        {
            _2956 = true;
            break;
        }
        _2956 = false;
        break;
    }
    float _3161;
    if (_2956)
    {
        discard_state = true;
        _3161 = 0.0;
    }
    else
    {
        _3161 = _2626;
    }
    SV_Target.x = _2787;
    SV_Target.y = _2788;
    SV_Target.z = _2789;
    SV_Target.w = _3161;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2626;
    discard_exit();
}


