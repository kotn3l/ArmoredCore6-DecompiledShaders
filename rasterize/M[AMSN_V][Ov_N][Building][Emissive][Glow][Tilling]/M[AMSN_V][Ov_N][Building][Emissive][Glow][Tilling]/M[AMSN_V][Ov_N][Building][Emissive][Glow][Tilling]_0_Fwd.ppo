#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1151;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _218 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _219 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _220 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _224 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _225 = _224 * _218;
    float _226 = _224 * _219;
    float _227 = _224 * _220;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    float _245 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _246 = _245 * TANGENT_2.x;
    float _247 = _245 * TANGENT_2.y;
    float _248 = _245 * TANGENT_2.z;
    float _253;
    float _254;
    float _255;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _253 = (-0.0) - _232;
        _254 = (-0.0) - _233;
        _255 = (-0.0) - _234;
    }
    else
    {
        _253 = _232;
        _254 = _233;
        _255 = _234;
    }
    float _278 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _290 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _278) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3490 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _293 = 1.0 - (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)));
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    float _303 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _278) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3511 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = 1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)));
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _325 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _327 = _325.x;
    float _328 = _325.y;
    float _329 = _325.z;
    float _330 = cbMtdParam._m0[11u].x * _307;
    float _332 = cbMtdParam._m0[11u].y * _307;
    float _334 = cbMtdParam._m0[11u].z * _307;
    float _354 = _305 + _293;
    float _355 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _356 = isnan(1.0) ? _355 : (isnan(_355) ? 1.0 : min(_355, 1.0));
    vec4 _374 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _379 = _374.w;
    float _380 = _374.x * cbMtdParam._m0[10u].x;
    float _381 = _374.y * cbMtdParam._m0[10u].y;
    float _382 = _374.z * cbMtdParam._m0[10u].z;
    float _397 = (_380 - (_356 * _380)) + ((((((_327 * (cbMtdParam._m0[9u].x - _330)) * _295) + (_330 * _327)) * 4.55000019073486328125) * _356) * _380);
    float _399 = (((((((_328 * (cbMtdParam._m0[9u].y - _332)) * _295) + (_332 * _328)) * 4.55000019073486328125) * _356) * _381) + _381) - (_356 * _381);
    float _401 = (((((((_329 * (cbMtdParam._m0[9u].z - _334)) * _295) + (_334 * _329)) * 4.55000019073486328125) * _356) * _382) + _382) - (_356 * _382);
    vec4 _418 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _422 = _418.z;
    float _426 = (_418.x * 2.0) + (-1.0);
    float _428 = (_418.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_426, _428), vec2(_426, _428));
    float _3542 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    float _437 = fma(_434, _253, fma(_428, _246, _426 * _225));
    float _440 = fma(_434, _254, fma(_428, _247, _426 * _226));
    float _443 = fma(_434, _255, fma(_428, _248, _426 * _227));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    vec4 _462 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _468 = (_462.x * 2.0) + (-1.0);
    float _469 = (_462.y * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3553 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))));
    float _478 = fma(_475, _253, fma(_469, _246, _468 * _225));
    float _481 = fma(_475, _254, fma(_469, _247, _468 * _226));
    float _484 = fma(_475, _255, fma(_469, _248, _468 * _227));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    float _489 = _488 * _478;
    float _490 = _488 * _481;
    float _491 = _488 * _484;
    float _494 = fma(_491, _208, fma(_490, _207, _489 * _206));
    float _497 = fma(_491, _241, fma(_490, _240, _489 * _239));
    float _500 = fma(_491, _255, fma(_490, _254, _489 * _253));
    float _504 = inversesqrt(dot(vec3(_494, _497, _500), vec3(_494, _497, _500)));
    float _508 = fma(_450, _208, fma(_449, _207, _448 * _206));
    float _511 = fma(_450, _241, fma(_449, _240, _448 * _239));
    float _514 = fma(_450, _255, fma(_449, _254, _448 * _253));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _521 = _518 * _514;
    vec4 _534 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _540 = (_534.x * 2.0) + (-1.0);
    float _541 = (_534.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3564 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    float _550 = fma(_547, _253, fma(_541, _246, _540 * _225));
    float _553 = fma(_547, _254, fma(_541, _247, _540 * _226));
    float _556 = fma(_547, _255, fma(_541, _248, _540 * _227));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _566 = fma(_563, _208, fma(_562, _207, _561 * _206));
    float _569 = fma(_563, _241, fma(_562, _240, _561 * _239));
    float _572 = fma(_563, _255, fma(_562, _254, _561 * _253));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _591 = ((_518 * _508) + (((_494 * _295) * _504) * cbMtdParam._m0[14u].z)) + (((_566 * _307) * _576) * cbMtdParam._m0[14u].y);
    float _593 = ((_518 * _511) + (((_497 * _295) * _504) * cbMtdParam._m0[14u].z)) + (((_569 * _307) * _576) * cbMtdParam._m0[14u].y);
    float _596 = fma(_521, _253, fma(_593, _239, _591 * _206));
    float _599 = fma(_521, _254, fma(_593, _240, _591 * _207));
    float _602 = fma(_521, _255, fma(_593, _241, _591 * _208));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3575 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _610 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _611 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3608 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3619 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3630 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _615 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _631 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _682 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _672);
    float _683 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _672);
    float _684 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _672);
    float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
    float _689 = _682 * _688;
    float _690 = _683 * _688;
    float _691 = _684 * _688;
    float _697 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _698 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _717 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _720 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _723 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _736 = uint(roundEven(NORMAL.w)) * 13u;
    uint _738 = (_736 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _744 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_738].x;
    float _745 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_738].y;
    float _746 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_738].z;
    float _3641 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _750 = 1.0 - _615;
    float _751 = _747 * _750;
    float _752 = _748 * _750;
    float _753 = _749 * _750;
    float _758 = (_747 + (-0.039999999105930328369140625)) * _615;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _615;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _615;
    float _761 = _758 + 0.039999999105930328369140625;
    float _763 = _759 + 0.039999999105930328369140625;
    float _764 = _760 + 0.039999999105930328369140625;
    vec4 _773 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _697, cbSceneParam._m0[86u].y * _698));
    float _776 = _773.x * TEXCOORD_7.w;
    float _777 = dot(vec3(_607, _608, _609), vec3(_689, _690, _691));
    float _780 = _777 * 2.0;
    float _784 = (_780 * _607) - _689;
    float _785 = (_780 * _608) - _690;
    float _786 = (_780 * _609) - _691;
    float _790 = abs(dot(vec3(_689, _690, _691), vec3(_607, _608, _609)));
    float _3674 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = sqrt(_611);
    float _805 = exp2((_792 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_792 * 3.0));
    float _811 = (1.0 - _805) * ((_792 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _812 = _805 * _792;
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1150;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _875 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _879 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _883 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _908 = _840 + _607;
        float _909 = _844 + _608;
        float _910 = _848 + _609;
        float _920 = fma(_910, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908)) - _875;
        float _921 = fma(_910, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908)) - _879;
        float _922 = fma(_910, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908)) - _883;
        float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
        float _939 = ((_926 * _920) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_875 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_926 * _921) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_879 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_926 * _922) / cbModelParam._m0[34u].z) + ((((((_883 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        float _978 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_944.x + (-0.5));
        float _980 = _978 * (_944.y + (-0.5));
        float _981 = _978 * (_944.z + (-0.5));
        float _988 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_951.x + (-0.5));
        float _990 = _988 * (_951.y + (-0.5));
        float _991 = _988 * (_951.z + (-0.5));
        float _998 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_958.x + (-0.5));
        float _1000 = _998 * (_958.y + (-0.5));
        float _1001 = _998 * (_958.z + (-0.5));
        float _1008 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_965.x + (-0.5));
        float _1010 = _1008 * (_965.y + (-0.5));
        float _1011 = _1008 * (_965.z + (-0.5));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = _979 * 0.5;
        float _1016 = _989 * 0.5;
        float _1017 = _999 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1032 = (dot(vec3(_607, _608, _609), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1042 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3722 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1044 + 1.0))) + _1049) * _1012;
        float _1059 = _980 * 0.5;
        float _1060 = _990 * 0.5;
        float _1061 = _1000 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_607, _608, _609), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3755 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1086 + 1.0))) + _1091) * _1013;
        float _1101 = _981 * 0.5;
        float _1102 = _991 * 0.5;
        float _1103 = _1001 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_607, _608, _609), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3788 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1128 + 1.0))) + _1133) * _1014;
        _1150 = _981;
        _1152 = _980;
        _1153 = _979;
        _1154 = _991;
        _1155 = _990;
        _1156 = _989;
        _1157 = _1001;
        _1158 = _1000;
        _1159 = _999;
        _1160 = _1014;
        _1161 = _1013;
        _1162 = _1012;
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
    }
    else
    {
        _1150 = _1151;
        _1152 = _1151;
        _1153 = _1151;
        _1154 = _1151;
        _1155 = _1151;
        _1156 = _1151;
        _1157 = _1151;
        _1158 = _1151;
        _1159 = _1151;
        _1160 = _1151;
        _1161 = _1151;
        _1162 = _1151;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1195 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1199 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1222 = _840 + _607;
        float _1223 = _844 + _608;
        float _1224 = _848 + _609;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_607, _608, _609), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3851 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_607, _608, _609), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3884 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_607, _608, _609), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3917 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1151;
        _1461 = _1151;
        _1462 = _1151;
        _1463 = _1151;
        _1464 = _1151;
        _1465 = _1151;
        _1466 = _1151;
        _1467 = _1151;
        _1468 = _1151;
        _1469 = _1151;
        _1470 = _1151;
        _1471 = _1151;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1163)) + _1163;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1164)) + _1164;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1165)) + _1165;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _784 * 0.5;
    float _1529 = _785 * 0.5;
    float _1530 = _786 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1150, _1154, _1157, _1160));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1644 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1648 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1652 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1655 = fma(_786, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784));
        float _1658 = fma(_786, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784));
        float _1661 = fma(_786, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784));
        float _1689;
        if (_1655 > 0.0)
        {
            _1689 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1689 = frontier_phi_16_14_ladder;
        }
        float _1896;
        if (_1658 > 0.0)
        {
            _1896 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1896 = frontier_phi_25_21_ladder;
        }
        float _2150;
        if (_1661 > 0.0)
        {
            _2150 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2150 = frontier_phi_37_32_ladder;
        }
        float _2152 = isnan(_1896) ? _1689 : (isnan(_1689) ? _1896 : min(_1689, _1896));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1655) + _1644;
        float _2158 = (_2153 * _1658) + _1648;
        float _2159 = (_2153 * _1661) + _1652;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2160;
        float _2164 = _2160 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 > _2164) || ((_2158 < _2162) || ((_2157 < _2162) || (_2157 > _2164))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2287 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2159, cbModelParam._m0[9u].z, fma(_2158, cbModelParam._m0[9u].y, _2157 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2159, cbModelParam._m0[10u].z, fma(_2158, cbModelParam._m0[10u].y, _2157 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2159, cbModelParam._m0[11u].z, fma(_2158, cbModelParam._m0[11u].y, _2157 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_15_37_ladder = _2287.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2287.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2287.x * cbModelParam._m0[1u].y;
        }
        _1677 = frontier_phi_15_37_ladder_2;
        _1679 = frontier_phi_15_37_ladder_1;
        _1681 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_784, _785, _786), _1597);
        _1677 = _1665.x * cbModelParam._m0[1u].y;
        _1679 = _1665.y * cbModelParam._m0[1u].y;
        _1681 = _1665.z * cbModelParam._m0[1u].y;
    }
    float _1685 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1685 : min(cbModelParam._m0[25u].w, _1685));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1743 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1747 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1751 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1754 = fma(_786, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784));
        float _1757 = fma(_786, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784));
        float _1760 = fma(_786, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784));
        float _1901;
        if (_1754 > 0.0)
        {
            _1901 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1901 = frontier_phi_27_23_ladder;
        }
        float _2177;
        if (_1757 > 0.0)
        {
            _2177 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2177 = frontier_phi_39_34_ladder;
        }
        float _2390;
        if (_1760 > 0.0)
        {
            _2390 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2390 = frontier_phi_48_45_ladder;
        }
        float _2392 = isnan(_2177) ? _1901 : (isnan(_1901) ? _2177 : min(_1901, _2177));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1754) + _1743;
        float _2398 = (_2393 * _1757) + _1747;
        float _2399 = (_2393 * _1760) + _1751;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1686);
            frontier_phi_24_48_ladder = _2602.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2602.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2602.x * cbModelParam._m0[1u].z;
        }
        _1779 = frontier_phi_24_48_ladder_2;
        _1781 = frontier_phi_24_48_ladder_1;
        _1783 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_784, _785, _786), _1686);
        _1779 = _1763.x * cbModelParam._m0[1u].z;
        _1781 = _1763.y * cbModelParam._m0[1u].z;
        _1783 = _1763.z * cbModelParam._m0[1u].z;
    }
    float _1796 = (((_811 * _761) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1779 - _1677)) + _1677);
    float _1798 = (((_811 * _763) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1781 - _1679)) + _1679);
    float _1800 = (((_811 * _764) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1783 - _1681)) + _1681);
    float _1803 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, _1796 * cbSceneParam._m0[91u].x));
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_736 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1829 = _776 + (-1.0);
    float _1834 = (cbLight._m0[_1822].x * _1829) + 1.0;
    float _1835 = (cbLight._m0[_1822].y * _1829) + 1.0;
    float _1836 = (cbLight._m0[_1822].z * _1829) + 1.0;
    float _1837 = (cbLight._m0[_1822].w * _1829) + 1.0;
    uint _1838 = _1821 + 5u;
    float _1844 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1848 = _1821 + 4u;
    float _1854 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1858 = _1821 | 1u;
    float _1869 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_607, _608, _609));
    float _1872 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_607, _608, _609));
    float _4053 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _4064 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1877 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1879 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1886 = ((cbLight._m0[_1838].x * _1844) * _1879) + ((cbLight._m0[_1848].x * _1854) * _1877);
    float _1887 = ((_1844 * cbLight._m0[_1838].y) * _1879) + ((_1854 * cbLight._m0[_1848].y) * _1877);
    float _1888 = ((_1844 * cbLight._m0[_1838].z) * _1879) + ((_1854 * cbLight._m0[_1848].z) * _1877);
    uvec4 _1893 = floatBitsToUint(cbLight._m0[_1821 + 12u]);
    bool _1895 = _1893.x == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1895)
    {
        _1906 = _1886;
        _1908 = _1887;
        _1910 = _1888;
    }
    else
    {
        uint _1914 = _1821 + 6u;
        float _1930 = (dot(vec3(cbLight._m0[_1821 + 2u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _1931 = _1930 * _1930;
        float _4075 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1933 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1906 = (((cbLight._m0[_1914].x * 0.3183098733425140380859375) * _1932) * _1933) + _1886;
        _1908 = (((cbLight._m0[_1914].y * 0.3183098733425140380859375) * _1932) * _1933) + _1887;
        _1910 = (((cbLight._m0[_1914].z * 0.3183098733425140380859375) * _1932) * _1933) + _1888;
    }
    bool _1913 = _1893.y == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1913)
    {
        _1951 = _1906;
        _1953 = _1908;
        _1955 = _1910;
    }
    else
    {
        uint _2121 = _1821 + 7u;
        float _2137 = (dot(vec3(cbLight._m0[_1821 + 3u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4091 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2140 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1951 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _1906;
        _1953 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _1908;
        _1955 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _1910;
    }
    uint _1958 = _1821 + 8u;
    float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _611) * 0.949999988079071044921875);
    float _1972 = _1971 * _1971;
    float _1973 = cbLight._m0[_1821].x + _689;
    float _1974 = cbLight._m0[_1821].y + _690;
    float _1975 = cbLight._m0[_1821].z + _691;
    float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
    float _1980 = _1979 * _1973;
    float _1981 = _1979 * _1974;
    float _1982 = _1979 * _1975;
    float _1983 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1821].xyz));
    float _4107 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _1987 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1988 = dot(vec3(_607, _608, _609), vec3(_1980, _1981, _1982));
    float _4129 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _1992 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1980, _1981, _1982));
    float _4140 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1996 = _1972 * _1972;
    float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
    float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
    float _2009 = 0.959999978542327880859375 - _758;
    float _2011 = 0.959999978542327880859375 - _759;
    float _2012 = 0.959999978542327880859375 - _760;
    float _2019 = 1.0 - _1972;
    float _2030 = (0.5 / (((_1987 * ((_1986 * _2019) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2019) + _1972) * _1986))) * _1986;
    float _4151 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
    uint _2043 = _1821 + 9u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _611) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1858].x + _689;
    float _2057 = cbLight._m0[_1858].y + _690;
    float _2058 = cbLight._m0[_1858].z + _691;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1858].xyz));
    float _4162 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2070 = dot(vec3(_607, _608, _609), vec3(_2063, _2064, _2065));
    float _4173 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2063, _2064, _2065));
    float _4184 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2055 * _2055;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0);
    float _2096 = 1.0 - _2055;
    float _2106 = (0.5 / (((_1987 * ((_2069 * _2096) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2096) + _2055) * _2069))) * _2069;
    float _4195 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    float _2118 = (((((_2089 * _2009) + _761) * cbLight._m0[_2043].x) * _2108) * _1844) + (((((_2008 * _2009) + _761) * cbLight._m0[_1958].x) * _2032) * _1854);
    float _2119 = (((((_2089 * _2011) + _763) * cbLight._m0[_2043].y) * _2108) * _1844) + (((((_2008 * _2011) + _763) * cbLight._m0[_1958].y) * _2032) * _1854);
    float _2120 = (((((_2089 * _2012) + _764) * cbLight._m0[_2043].z) * _2108) * _1844) + (((((_2008 * _2012) + _764) * cbLight._m0[_1958].z) * _2032) * _1854);
    float _2182;
    float _2184;
    float _2186;
    if (_1895)
    {
        _2182 = _2118;
        _2184 = _2119;
        _2186 = _2120;
    }
    else
    {
        uint _2188 = _1821 + 2u;
        uint _2192 = _1821 + 10u;
        float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _611) * 0.949999988079071044921875);
        float _2207 = _2206 * _2206;
        float _2208 = cbLight._m0[_2188].x + _689;
        float _2209 = cbLight._m0[_2188].y + _690;
        float _2210 = cbLight._m0[_2188].z + _691;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2215 = _2214 * _2208;
        float _2216 = _2214 * _2209;
        float _2217 = _2214 * _2210;
        float _2218 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2188].xyz));
        float _4206 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2222 = dot(vec3(_607, _608, _609), vec3(_2215, _2216, _2217));
        float _4217 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2226 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2215, _2216, _2217));
        float _4228 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2230 = _2207 * _2207;
        float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
        float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0);
        float _2248 = 1.0 - _2207;
        float _2258 = (0.5 / (((_1987 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2248) + _2207) * _2221))) * _2221;
        float _4239 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2182 = (((((_2241 * _2009) + _761) * cbLight._m0[_2192].x) * _2260) * _2261) + _2118;
        _2184 = (((((_2241 * _2011) + _763) * cbLight._m0[_2192].y) * _2260) * _2261) + _2119;
        _2186 = (((((_2241 * _2012) + _764) * cbLight._m0[_2192].z) * _2260) * _2261) + _2120;
    }
    float _2296;
    float _2298;
    float _2300;
    if (_1913)
    {
        _2296 = _2182;
        _2298 = _2184;
        _2300 = _2186;
    }
    else
    {
        uint _2307 = _1821 + 3u;
        uint _2311 = _1821 + 11u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _611) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _689;
        float _2328 = cbLight._m0[_2307].y + _690;
        float _2329 = cbLight._m0[_2307].z + _691;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2307].xyz));
        float _4255 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2341 = dot(vec3(_607, _608, _609), vec3(_2334, _2335, _2336));
        float _4266 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4277 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
        float _2367 = 1.0 - _2326;
        float _2377 = (0.5 / (((_1987 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2367) + _2326) * _2340))) * _2340;
        float _4288 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2296 = (((((_2360 * _2009) + _761) * cbLight._m0[_2311].x) * _2379) * _2380) + _2182;
        _2298 = (((((_2360 * _2011) + _763) * cbLight._m0[_2311].y) * _2379) * _2380) + _2184;
        _2300 = (((((_2360 * _2012) + _764) * cbLight._m0[_2311].z) * _2379) * _2380) + _2186;
    }
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_1819.y == 0u)
    {
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2455;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2455;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2455;
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.x;
        uint _2482 = uint((float(_2470.y) * floor(float(uint(cbSceneParam._m0[85u].y * _698) / _2471))) + floor(float(uint(cbSceneParam._m0[85u].x * _697) / _2471)));
        float _2492 = (log2(_2458 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        uint _2496 = uint(isnan(14.0) ? _2493 : (isnan(_2493) ? 14.0 : min(_2493, 14.0)));
        uvec4 _2501 = texelFetch(g_lightClusterGridBuffer, int(((_2496 << 2u) + (_2482 << 6u)) >> 2u));
        uint _2502 = _2501.x;
        uint _2503 = _2470.z;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((((1u << ((_2503 >> 4u) & 15u)) + 4294967295u) & _2502) == 0u) || ((_2503 & 240u) == 0u))
        {
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
        }
        else
        {
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            uint _2757 = 0u;
            uint _2766;
            bool _2767;
            for (;;)
            {
                _2766 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                _2767 = _2766 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2767)
                {
                    frontier_phi_63_pred = _2756;
                    frontier_phi_63_pred_1 = _2755;
                    frontier_phi_63_pred_2 = _2754;
                    frontier_phi_63_pred_3 = _2753;
                    frontier_phi_63_pred_4 = _2752;
                    frontier_phi_63_pred_5 = _2751;
                }
                else
                {
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    uint _2881;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2766;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    for (;;)
                    {
                        uint _2885 = uint(findLSB(_2881)) + (_2757 << 5u);
                        uint _2882 = (_2881 + 4294967295u) & _2881;
                        uint _2887 = _2885 * 48u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2907 = (_2885 * 48u) + 4u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2926 = (_2885 * 48u) + 8u;
                        vec3 _2937 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x));
                        float _2941 = _2901.x - _2456;
                        float _2942 = _2901.y - _2457;
                        float _2943 = _2901.z - _2458;
                        float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                        float _2947 = inversesqrt(_2944);
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2951 = dot(vec3(_717, _720, _723), vec3(_2948, _2949, _2950));
                        float _2956 = 1.0 - (_2944 * _2901.w);
                        float _4314 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2958 = sqrt(_2944) * _2920.w;
                        float _2961 = 1.39999997615814208984375 / (_2958 + 1.39999997615814208984375);
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2951) + _2962;
                        float _2968 = _2958 * _2958;
                        float _2972 = ((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2957) / ((_2968 * 0.699999988079071044921875) + 1.0);
                        float _2976 = (-0.0) - _2456;
                        float _2977 = (-0.0) - _2457;
                        float _2978 = (-0.0) - _2458;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2993 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                        float _2994 = 1.0 - _792;
                        float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                        float _3002 = _3001 * _3001;
                        float _3003 = _3002 * _3002;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3014 = dot(vec3(_717, _720, _723), vec3(_2983, _2984, _2985));
                        float _4330 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3018 = dot(vec3(_717, _720, _723), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                        float _4341 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                        float _3026 = _2961 * _3002;
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _2951) + _3027;
                        float _4352 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3032 = 1.0 - _3002;
                        float _3042 = (0.5 / (((_3031 * ((_3017 * _3032) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3031 * _3032) + _3002) * _3017))) * _3031;
                        float _4363 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3053 = (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3025 * _3025) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125))) * _2957;
                        _2810 = (_2972 * _2920.x) + _2878;
                        _2811 = (_2972 * _2920.y) + _2879;
                        _2812 = (_2972 * _2920.z) + _2880;
                        _2807 = (_3053 * _2937.x) + _2875;
                        _2808 = (_3053 * _2937.y) + _2876;
                        _2809 = (_3053 * _2937.z) + _2877;
                        if (_2882 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2882;
                        }
                    }
                    frontier_phi_63_pred = _2812;
                    frontier_phi_63_pred_1 = _2811;
                    frontier_phi_63_pred_2 = _2810;
                    frontier_phi_63_pred_3 = _2809;
                    frontier_phi_63_pred_4 = _2808;
                    frontier_phi_63_pred_5 = _2807;
                }
                _2618 = frontier_phi_63_pred;
                _2616 = frontier_phi_63_pred_1;
                _2614 = frontier_phi_63_pred_2;
                _2612 = frontier_phi_63_pred_3;
                _2610 = frontier_phi_63_pred_4;
                _2608 = frontier_phi_63_pred_5;
                uint _2758 = _2757 + 1u;
                if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2751 = _2608;
                    _2752 = _2610;
                    _2753 = _2612;
                    _2754 = _2614;
                    _2755 = _2616;
                    _2756 = _2618;
                    _2757 = _2758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
        }
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.z;
        uint _2624 = (_2622 >> 8u) & 15u;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((4294967295u << _2624) & _2502) == 0u)
        {
            _2719 = _2607;
            _2721 = _2609;
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
            _2729 = _2617;
        }
        else
        {
            float _2744 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
            float _2745 = _2744 * _2456;
            float _2746 = _2744 * _2457;
            float _2747 = _2744 * _2458;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2624 < ((_2622 >> 12u) & 15u))
            {
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2858 = _2607;
                float _2859 = _2609;
                float _2860 = _2611;
                float _2861 = _2613;
                float _2862 = _2615;
                float _2863 = _2617;
                uint _2864 = _2624;
                uint _2873;
                bool _2874;
                for (;;)
                {
                    _2873 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                    _2874 = _2873 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2874)
                    {
                        frontier_phi_69_pred = _2863;
                        frontier_phi_69_pred_1 = _2862;
                        frontier_phi_69_pred_2 = _2861;
                        frontier_phi_69_pred_3 = _2860;
                        frontier_phi_69_pred_4 = _2859;
                        frontier_phi_69_pred_5 = _2858;
                    }
                    else
                    {
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        uint _3077 = _2873;
                        uint _3078;
                        vec4 _3103;
                        float _3104;
                        vec4 _3119;
                        vec3 _3131;
                        vec4 _3147;
                        vec4 _3163;
                        float _3210;
                        bool _3211;
                        for (;;)
                        {
                            uint _3088 = ((_2864 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3077));
                            _3078 = (_3077 + 4294967295u) & _3077;
                            uint _3090 = _3088 * 40u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            _3104 = _3103.w;
                            uint _3106 = (_3088 * 40u) + 4u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3121 = (_3088 * 40u) + 8u;
                            _3131 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x));
                            uint _3134 = (_3088 * 40u) + 16u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3088 * 40u) + 20u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3166 = (_3088 * 40u) + 24u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3185 = (_3088 * 40u) + 28u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3210 = fma(_2458, _3198.z, fma(_2457, _3198.y, _3198.x * _2456)) + _3198.w;
                            _3211 = !((fma(_2458, _3179.z, fma(_2457, _3179.y, _3179.x * _2456)) + _3179.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3211)
                            {
                                float _3238 = _3103.x - _2456;
                                float _3239 = _3103.y - _2457;
                                float _3240 = _3103.z - _2458;
                                float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                                float _3244 = inversesqrt(_3241);
                                float _3245 = _3244 * _3238;
                                float _3246 = _3244 * _3239;
                                float _3247 = _3244 * _3240;
                                float _3251 = 1.0 - (_3241 / (_3104 * _3104));
                                float _4374 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3256 = sqrt(_3241) * _3119.w;
                                float _3258 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                                float _3259 = _3258 * _3258;
                                float _3262 = ((1.0 - _3259) * dot(vec3(_3245, _3246, _3247), vec3(_717, _720, _723))) + _3259;
                                float _3265 = _3256 * _3256;
                                float _3269 = (fma(_2458, _3147.z, fma(_2457, _3147.y, _3147.x * _2456)) + _3147.w) / _3210;
                                float _3270 = (fma(_2458, _3163.z, fma(_2457, _3163.y, _3163.x * _2456)) + _3163.w) / _3210;
                                float _3274 = 1.0 - dot(vec2(_3269, _3270), vec2(_3269, _3270));
                                float _4390 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3276 = _3275 * (((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3252) / ((_3265 * 0.699999988079071044921875) + 1.0));
                                float _3288 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                                float _3289 = 1.0 - _792;
                                float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                                float _3297 = _3296 * _3296;
                                float _3298 = _3297 * _3297;
                                float _3299 = _3245 - _2745;
                                float _3300 = _3246 - _2746;
                                float _3301 = _3247 - _2747;
                                float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                                float _3309 = dot(vec3(_717, _720, _723), vec3((-0.0) - _2745, (-0.0) - _2746, (-0.0) - _2747));
                                float _4401 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3313 = dot(vec3(_717, _720, _723), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                                float _4412 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                                float _3321 = _3258 * _3297;
                                float _3322 = _3321 * _3321;
                                float _3328 = ((1.0 - _3322) * dot(vec3(_717, _720, _723), vec3(_3245, _3246, _3247))) + _3322;
                                float _4423 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3330 = 1.0 - _3297;
                                float _3340 = (0.5 / (((_3329 * ((_3312 * _3330) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3297) * _3312))) * _3329;
                                float _4434 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3350 = (_3275 * _3252) * (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3320 * _3320) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3276 * _3119.z;
                                frontier_phi_75_pred_1 = _3276 * _3119.y;
                                frontier_phi_75_pred_2 = _3276 * _3119.x;
                                frontier_phi_75_pred_3 = _3350 * _3131.z;
                                frontier_phi_75_pred_4 = _3350 * _3131.y;
                                frontier_phi_75_pred_5 = _3350 * _3131.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3359 = frontier_phi_75_pred;
                            _3358 = frontier_phi_75_pred_1;
                            _3357 = frontier_phi_75_pred_2;
                            _3356 = frontier_phi_75_pred_3;
                            _3355 = frontier_phi_75_pred_4;
                            _3354 = frontier_phi_75_pred_5;
                            _3061 = _3357 + _3074;
                            _3062 = _3358 + _3075;
                            _3063 = _3359 + _3076;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            _3060 = _3356 + _3073;
                            if (_3078 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3078;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3063;
                        frontier_phi_69_pred_1 = _3062;
                        frontier_phi_69_pred_2 = _3061;
                        frontier_phi_69_pred_3 = _3060;
                        frontier_phi_69_pred_4 = _3059;
                        frontier_phi_69_pred_5 = _3058;
                    }
                    _2730 = frontier_phi_69_pred;
                    _2728 = frontier_phi_69_pred_1;
                    _2726 = frontier_phi_69_pred_2;
                    _2724 = frontier_phi_69_pred_3;
                    _2722 = frontier_phi_69_pred_4;
                    _2720 = frontier_phi_69_pred_5;
                    uint _2865 = _2864 + 1u;
                    if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2858 = _2720;
                        _2859 = _2722;
                        _2860 = _2724;
                        _2861 = _2726;
                        _2862 = _2728;
                        _2863 = _2730;
                        _2864 = _2865;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2730;
                frontier_phi_57_58_ladder_1 = _2728;
                frontier_phi_57_58_ladder_2 = _2726;
                frontier_phi_57_58_ladder_3 = _2724;
                frontier_phi_57_58_ladder_4 = _2722;
                frontier_phi_57_58_ladder_5 = _2720;
            }
            else
            {
                frontier_phi_57_58_ladder = _2617;
                frontier_phi_57_58_ladder_1 = _2615;
                frontier_phi_57_58_ladder_2 = _2613;
                frontier_phi_57_58_ladder_3 = _2611;
                frontier_phi_57_58_ladder_4 = _2609;
                frontier_phi_57_58_ladder_5 = _2607;
            }
            _2719 = frontier_phi_57_58_ladder_5;
            _2721 = frontier_phi_57_58_ladder_4;
            _2723 = frontier_phi_57_58_ladder_3;
            _2725 = frontier_phi_57_58_ladder_2;
            _2727 = frontier_phi_57_58_ladder_1;
            _2729 = frontier_phi_57_58_ladder;
        }
        float _2734 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
        _2514 = (_2734 * _2725) + _1951;
        _2516 = (_2734 * _2727) + _1953;
        _2518 = (_2734 * _2729) + _1955;
        _2520 = ((_2719 * _761) * _2734) + _2296;
        _2522 = ((_2721 * _763) * _2734) + _2298;
        _2524 = ((_2723 * _764) * _2734) + _2300;
    }
    else
    {
        _2514 = _1951;
        _2516 = _1953;
        _2518 = _1955;
        _2520 = _2296;
        _2522 = _2298;
        _2524 = _2300;
    }
    float _4450 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4461 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4472 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4483 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2542 = ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2514 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _776))) + ((_2520 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1586)) * cbPerFrame._m0[3u].x);
    float _2543 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2516 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _776))) + ((_2522 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1586)) * cbPerFrame._m0[3u].x);
    float _2544 = ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2518 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _776))) + ((_2524 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1586)) * cbPerFrame._m0[3u].x);
    float _2552 = cbInstanceData._m0[_736 + 6u].w * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)));
    float _2557 = _697 / cbSceneParam._m0[86u].x;
    float _2558 = _698 / cbSceneParam._m0[86u].y;
    vec4 _2572 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, (log2((isnan(cbSceneParam._m0[77u].w) ? _631 : (isnan(_631) ? cbSceneParam._m0[77u].w : min(_631, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2574 = _2572.x;
    float _2575 = _2572.y;
    float _2576 = _2572.z;
    float _2577 = _2572.w;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_631 > cbSceneParam._m0[78u].w)
    {
        float _2632 = isnan(_631) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _631 : min(cbSceneParam._m0[80u].w, _631));
        float _2633 = _2632 / _631;
        float _2644 = _2633 * _682;
        float _2645 = _683 * _2633;
        float _2646 = (-0.0) - _2645;
        float _2647 = _2633 * _684;
        float _2649 = (cbSceneParam._m0[77u].w * _2646) / _2632;
        float _2650 = _2649 + cbSceneParam._m0[79u].w;
        float _2651 = cbSceneParam._m0[79u].w - _2645;
        float _2657 = sqrt(((_2644 * _2644) + (_2645 * _2645)) + (_2647 * _2647));
        float _2660 = (1.0 - (cbSceneParam._m0[77u].w / _2632)) * _2657;
        float _2665 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2667 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2820;
        if (abs((_2646 - _2649) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2820 = ((((_2650 > 0.0) ? exp2(_2665 * _2650) : (2.0 - exp2(_2667 * _2650))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2660;
        }
        else
        {
            float _2780 = 1.0 / cbSceneParam._m0[80u].x;
            float _2781 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : max(_2650, _2651));
            float _2782 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : min(_2650, _2651));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            _2820 = ((abs(_2657 / _2646) * cbSceneParam._m0[80u].y) * ((((_2791 - _2792) * 2.0) - ((exp2(_2665 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0)))) - exp2(_2665 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))))) * _2780)) - ((exp2(_2667 * _2791) - exp2(_2667 * _2792)) * _2780))) + (_2660 * cbSceneParam._m0[80u].z);
        }
        vec4 _2822 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, 1.0), 0.0);
        float _2831 = exp2((_2820 * (-1.44269502162933349609375)) * (1.0 - _2822.w));
        float _2832 = log2(_2831);
        float _2848 = log2(_2577);
        _2669 = (exp2(_2848 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].x)) * _2822.x) / cbSceneParam._m0[78u].x)) + _2574;
        _2671 = (exp2(_2848 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].y)) * _2822.y) / cbSceneParam._m0[78u].y)) + _2575;
        _2673 = (exp2(_2848 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].z)) * _2822.z) / cbSceneParam._m0[78u].z)) + _2576;
        _2675 = _2831 * _2577;
    }
    else
    {
        _2669 = _2574;
        _2671 = _2575;
        _2673 = _2576;
        _2675 = _2577;
    }
    float _2687 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2688 = _2687 == 3.0;
    float _2689 = log2(_2675);
    float _2696 = exp2(_2689 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0)));
    float _2697 = exp2(_2689 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)));
    float _2698 = exp2(_2689 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0)));
    float _2707 = (_2687 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2707 * (_2688 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.y = _2707 * (_2688 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.z = _2707 * (_2688 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.w = _2552;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2552;
}


