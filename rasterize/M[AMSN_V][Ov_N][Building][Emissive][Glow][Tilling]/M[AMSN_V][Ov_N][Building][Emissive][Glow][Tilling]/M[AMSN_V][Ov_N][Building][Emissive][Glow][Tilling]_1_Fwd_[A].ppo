#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1263;
float _3675;
float _3676;
float _3677;
float _3678;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _235 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _236 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _237 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _241 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _242 = _241 * _235;
    float _243 = _241 * _236;
    float _244 = _241 * _237;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _262 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _263 = _262 * TANGENT_2.x;
    float _264 = _262 * TANGENT_2.y;
    float _265 = _262 * TANGENT_2.z;
    float _270;
    float _271;
    float _272;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _270 = (-0.0) - _249;
        _271 = (-0.0) - _250;
        _272 = (-0.0) - _251;
    }
    else
    {
        _270 = _249;
        _271 = _250;
        _272 = _251;
    }
    float _294 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _306 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _294) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3687 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _309 = 1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)));
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    float _319 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _294) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3708 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = 1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)));
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _341 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _343 = _341.x;
    float _344 = _341.y;
    float _345 = _341.z;
    float _346 = cbMtdParam._m0[11u].x * _323;
    float _348 = cbMtdParam._m0[11u].y * _323;
    float _350 = cbMtdParam._m0[11u].z * _323;
    float _370 = _321 + _309;
    float _371 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _372 = isnan(1.0) ? _371 : (isnan(_371) ? 1.0 : min(_371, 1.0));
    vec4 _390 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _395 = _390.w;
    float _396 = _390.x * cbMtdParam._m0[10u].x;
    float _397 = _390.y * cbMtdParam._m0[10u].y;
    float _398 = _390.z * cbMtdParam._m0[10u].z;
    float _413 = (_396 - (_372 * _396)) + ((((((_343 * (cbMtdParam._m0[9u].x - _346)) * _311) + (_346 * _343)) * 4.55000019073486328125) * _372) * _396);
    float _415 = (((((((_344 * (cbMtdParam._m0[9u].y - _348)) * _311) + (_348 * _344)) * 4.55000019073486328125) * _372) * _397) + _397) - (_372 * _397);
    float _417 = (((((((_345 * (cbMtdParam._m0[9u].z - _350)) * _311) + (_350 * _345)) * 4.55000019073486328125) * _372) * _398) + _398) - (_372 * _398);
    vec4 _434 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _438 = _434.z;
    float _442 = (_434.x * 2.0) + (-1.0);
    float _444 = (_434.y * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3739 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))));
    float _453 = fma(_450, _270, fma(_444, _263, _442 * _242));
    float _456 = fma(_450, _271, fma(_444, _264, _442 * _243));
    float _459 = fma(_450, _272, fma(_444, _265, _442 * _244));
    float _463 = inversesqrt(dot(vec3(_453, _456, _459), vec3(_453, _456, _459)));
    float _464 = _463 * _453;
    float _465 = _463 * _456;
    float _466 = _463 * _459;
    float _484 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3750 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _490 = (_485 * _485) * (3.0 - (_485 * 2.0));
    float _491 = isnan(cbMtdParam._m0[14u].w) ? _490 : (isnan(_490) ? cbMtdParam._m0[14u].w : max(_490, cbMtdParam._m0[14u].w));
    vec4 _510 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _515 = (isnan(cbMtdParam._m0[12u].y) ? _491 : (isnan(_491) ? cbMtdParam._m0[12u].y : min(_491, cbMtdParam._m0[12u].y))) * cbMtdParam._m0[12u].z;
    vec4 _534 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _540 = (_534.x * 2.0) + (-1.0);
    float _541 = (_534.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3771 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))));
    float _550 = fma(_547, _270, fma(_541, _263, _540 * _242));
    float _553 = fma(_547, _271, fma(_541, _264, _540 * _243));
    float _556 = fma(_547, _272, fma(_541, _265, _540 * _244));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _566 = fma(_563, _225, fma(_562, _224, _561 * _223));
    float _569 = fma(_563, _258, fma(_562, _257, _561 * _256));
    float _572 = fma(_563, _272, fma(_562, _271, _561 * _270));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _580 = fma(_466, _225, fma(_465, _224, _464 * _223));
    float _583 = fma(_466, _258, fma(_465, _257, _464 * _256));
    float _586 = fma(_466, _272, fma(_465, _271, _464 * _270));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _593 = _590 * _586;
    vec4 _606 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _612 = (_606.x * 2.0) + (-1.0);
    float _613 = (_606.y * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _3782 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))));
    float _622 = fma(_619, _270, fma(_613, _263, _612 * _242));
    float _625 = fma(_619, _271, fma(_613, _264, _612 * _243));
    float _628 = fma(_619, _272, fma(_613, _265, _612 * _244));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _638 = fma(_635, _225, fma(_634, _224, _633 * _223));
    float _641 = fma(_635, _258, fma(_634, _257, _633 * _256));
    float _644 = fma(_635, _272, fma(_634, _271, _633 * _270));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _663 = ((_590 * _580) + (((_566 * _311) * _576) * cbMtdParam._m0[14u].z)) + (((_638 * _323) * _648) * cbMtdParam._m0[14u].y);
    float _665 = ((_590 * _583) + (((_569 * _311) * _576) * cbMtdParam._m0[14u].z)) + (((_641 * _323) * _648) * cbMtdParam._m0[14u].y);
    float _668 = fma(_593, _270, fma(_665, _256, _663 * _223));
    float _671 = fma(_593, _271, fma(_665, _257, _663 * _224));
    float _674 = fma(_593, _272, fma(_665, _258, _663 * _225));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3793 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _682 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _683 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3826 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3837 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3848 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _687 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    vec4 _768 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _770 = _768.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _942 = sqrt(((_754 * _754) + (_755 * _755)) + (_756 * _756));
        float _948 = (cbMatDynParam._m0[5u].x * _942) + cbMatDynParam._m0[5u].y;
        float _3859 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _953 = (cbMatDynParam._m0[5u].z * _942) + cbMatDynParam._m0[5u].w;
        float _3870 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) - _949)) + _949) < ((_770 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _804 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _807 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _820 = uint(roundEven(NORMAL.w)) * 13u;
    uint _821 = _820 + 9u;
    uint _822 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_822].z;
    float _3881 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _834 = 1.0 - _687;
    float _835 = _831 * _834;
    float _836 = _832 * _834;
    float _837 = _833 * _834;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _687;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _687;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _687;
    float _845 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _860 = _857.x * TEXCOORD_7.w;
    float _861 = dot(vec3(_679, _680, _681), vec3(_761, _762, _763));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _679) - _761;
    float _869 = (_864 * _680) - _762;
    float _870 = (_864 * _681) - _763;
    float _874 = abs(dot(vec3(_761, _762, _763), vec3(_679, _680, _681)));
    float _3914 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_683);
    float _888 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _894 = (1.0 - _888) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _895 = _888 * _876;
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _991 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _995 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _1020 = _923 + _679;
        float _1021 = _927 + _680;
        float _1022 = _931 + _681;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_679, _680, _681), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3962 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_679, _680, _681), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3995 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_679, _680, _681), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4028 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1310 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1314 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1337 = _923 + _679;
        float _1338 = _927 + _680;
        float _1339 = _931 + _681;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_679, _680, _681), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4091 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_679, _680, _681), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4124 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_679, _680, _681), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4157 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = _1263;
        _1584 = _1263;
        _1585 = _1263;
        _1586 = _1263;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1275)) + _1275;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1276)) + _1276;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1277)) + _1277;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _868 * 0.5;
    float _1644 = _869 * 0.5;
    float _1645 = _870 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _683);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1773 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1776 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1804 = frontier_phi_19_17_ladder;
        }
        float _2009;
        if (_1773 > 0.0)
        {
            _2009 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2009 = frontier_phi_28_24_ladder;
        }
        float _2263;
        if (_1776 > 0.0)
        {
            _2263 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2263 = frontier_phi_40_35_ladder;
        }
        float _2265 = isnan(_2009) ? _1804 : (isnan(_1804) ? _2009 : min(_1804, _2009));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1770) + _1759;
        float _2271 = (_2266 * _1773) + _1763;
        float _2272 = (_2266 * _1776) + _1767;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2273;
        float _2277 = _2273 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 > _2277) || ((_2271 < _2275) || ((_2270 < _2275) || (_2270 > _2277))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2272, cbModelParam._m0[9u].z, fma(_2271, cbModelParam._m0[9u].y, _2270 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2272, cbModelParam._m0[10u].z, fma(_2271, cbModelParam._m0[10u].y, _2270 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2272, cbModelParam._m0[11u].z, fma(_2271, cbModelParam._m0[11u].y, _2270 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_18_40_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_18_40_ladder_2;
        _1794 = frontier_phi_18_40_ladder_1;
        _1796 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1712);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _683);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1857 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1861 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1865 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1868 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1871 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1874 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _2014;
        if (_1868 > 0.0)
        {
            _2014 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2014 = frontier_phi_30_26_ladder;
        }
        float _2290;
        if (_1871 > 0.0)
        {
            _2290 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2290 = frontier_phi_42_37_ladder;
        }
        float _2503;
        if (_1874 > 0.0)
        {
            _2503 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2503 = frontier_phi_51_48_ladder;
        }
        float _2505 = isnan(_2290) ? _2014 : (isnan(_2014) ? _2290 : min(_2014, _2290));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1868) + _1857;
        float _2511 = (_2506 * _1871) + _1861;
        float _2512 = (_2506 * _1874) + _1865;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_27_51_ladder = _2737.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2737.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2737.x * cbModelParam._m0[1u].z;
        }
        _1893 = frontier_phi_27_51_ladder_2;
        _1895 = frontier_phi_27_51_ladder_1;
        _1897 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1801);
        _1893 = _1877.x * cbModelParam._m0[1u].z;
        _1895 = _1877.y * cbModelParam._m0[1u].z;
        _1897 = _1877.z * cbModelParam._m0[1u].z;
    }
    float _1910 = (((_894 * _845) + _895) * _860) * ((cbModelParam._m0[1u].w * (_1893 - _1792)) + _1792);
    float _1912 = (((_894 * _847) + _895) * _860) * ((cbModelParam._m0[1u].w * (_1895 - _1794)) + _1794);
    float _1914 = (((_894 * _848) + _895) * _860) * ((cbModelParam._m0[1u].w * (_1897 - _1796)) + _1796);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1910 * cbSceneParam._m0[91u].x));
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_820 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1943 = _860 + (-1.0);
    float _1948 = (cbLight._m0[_1936].x * _1943) + 1.0;
    float _1949 = (cbLight._m0[_1936].y * _1943) + 1.0;
    float _1950 = (cbLight._m0[_1936].z * _1943) + 1.0;
    float _1951 = (cbLight._m0[_1936].w * _1943) + 1.0;
    uint _1952 = _1935 + 5u;
    float _1958 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1962 = _1935 + 4u;
    float _1968 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1972 = _1935 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_679, _680, _681));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_679, _680, _681));
    float _4293 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _4304 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1952].x * _1958) * _1993) + ((cbLight._m0[_1962].x * _1968) * _1991);
    float _2001 = ((_1958 * cbLight._m0[_1952].y) * _1993) + ((_1968 * cbLight._m0[_1962].y) * _1991);
    float _2002 = ((_1958 * cbLight._m0[_1952].z) * _1993) + ((_1968 * cbLight._m0[_1962].z) * _1991);
    uvec4 _2006 = floatBitsToUint(cbLight._m0[_1935 + 12u]);
    bool _2008 = _2006.x == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_2008)
    {
        _2019 = _2000;
        _2021 = _2001;
        _2023 = _2002;
    }
    else
    {
        uint _2027 = _1935 + 6u;
        float _2043 = (dot(vec3(cbLight._m0[_1935 + 2u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _4315 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2046 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2019 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _2000;
        _2021 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _2001;
        _2023 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _2002;
    }
    bool _2026 = _2006.y == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2026)
    {
        _2064 = _2019;
        _2066 = _2021;
        _2068 = _2023;
    }
    else
    {
        uint _2234 = _1935 + 7u;
        float _2250 = (dot(vec3(cbLight._m0[_1935 + 3u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4331 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2253 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2064 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2019;
        _2066 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2021;
        _2068 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2023;
    }
    uint _2071 = _1935 + 8u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _683) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1935].x + _761;
    float _2087 = cbLight._m0[_1935].y + _762;
    float _2088 = cbLight._m0[_1935].z + _763;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1935].xyz));
    float _4347 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2100 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2101 = dot(vec3(_679, _680, _681), vec3(_2093, _2094, _2095));
    float _4369 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2093, _2094, _2095));
    float _4380 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2085 * _2085;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0);
    float _2122 = 0.959999978542327880859375 - _842;
    float _2124 = 0.959999978542327880859375 - _843;
    float _2125 = 0.959999978542327880859375 - _844;
    float _2132 = 1.0 - _2085;
    float _2143 = (0.5 / (((_2100 * ((_2099 * _2132) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2132) + _2085) * _2099))) * _2099;
    float _4391 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    uint _2156 = _1935 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _683) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_1972].x + _761;
    float _2170 = cbLight._m0[_1972].y + _762;
    float _2171 = cbLight._m0[_1972].z + _763;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1972].xyz));
    float _4402 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2183 = dot(vec3(_679, _680, _681), vec3(_2176, _2177, _2178));
    float _4413 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2176, _2177, _2178));
    float _4424 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
    float _2209 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2100 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2209) + _2168) * _2182))) * _2182;
    float _4435 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2231 = (((((_2202 * _2122) + _845) * cbLight._m0[_2156].x) * _2221) * _1958) + (((((_2121 * _2122) + _845) * cbLight._m0[_2071].x) * _2145) * _1968);
    float _2232 = (((((_2202 * _2124) + _847) * cbLight._m0[_2156].y) * _2221) * _1958) + (((((_2121 * _2124) + _847) * cbLight._m0[_2071].y) * _2145) * _1968);
    float _2233 = (((((_2202 * _2125) + _848) * cbLight._m0[_2156].z) * _2221) * _1958) + (((((_2121 * _2125) + _848) * cbLight._m0[_2071].z) * _2145) * _1968);
    float _2295;
    float _2297;
    float _2299;
    if (_2008)
    {
        _2295 = _2231;
        _2297 = _2232;
        _2299 = _2233;
    }
    else
    {
        uint _2301 = _1935 + 2u;
        uint _2305 = _1935 + 10u;
        float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _683) * 0.949999988079071044921875);
        float _2320 = _2319 * _2319;
        float _2321 = cbLight._m0[_2301].x + _761;
        float _2322 = cbLight._m0[_2301].y + _762;
        float _2323 = cbLight._m0[_2301].z + _763;
        float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
        float _2328 = _2327 * _2321;
        float _2329 = _2327 * _2322;
        float _2330 = _2327 * _2323;
        float _2331 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2301].xyz));
        float _4446 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2335 = dot(vec3(_679, _680, _681), vec3(_2328, _2329, _2330));
        float _4457 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2339 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2328, _2329, _2330));
        float _4468 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _2320 * _2320;
        float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
        float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
        float _2361 = 1.0 - _2320;
        float _2371 = (0.5 / (((_2100 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2361) + _2320) * _2334))) * _2334;
        float _4479 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2295 = (((((_2354 * _2122) + _845) * cbLight._m0[_2305].x) * _2373) * _2374) + _2231;
        _2297 = (((((_2354 * _2124) + _847) * cbLight._m0[_2305].y) * _2373) * _2374) + _2232;
        _2299 = (((((_2354 * _2125) + _848) * cbLight._m0[_2305].z) * _2373) * _2374) + _2233;
    }
    float _2409;
    float _2411;
    float _2413;
    if (_2026)
    {
        _2409 = _2295;
        _2411 = _2297;
        _2413 = _2299;
    }
    else
    {
        uint _2420 = _1935 + 3u;
        uint _2424 = _1935 + 11u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _683) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _761;
        float _2441 = cbLight._m0[_2420].y + _762;
        float _2442 = cbLight._m0[_2420].z + _763;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2420].xyz));
        float _4495 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2454 = dot(vec3(_679, _680, _681), vec3(_2447, _2448, _2449));
        float _4506 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4517 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2100 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2480) + _2439) * _2453))) * _2453;
        float _4528 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2409 = (((((_2473 * _2122) + _845) * cbLight._m0[_2424].x) * _2492) * _2493) + _2295;
        _2411 = (((((_2473 * _2124) + _847) * cbLight._m0[_2424].y) * _2492) * _2493) + _2297;
        _2413 = (((((_2473 * _2125) + _848) * cbLight._m0[_2424].z) * _2492) * _2493) + _2299;
    }
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_1933.y == 0u)
    {
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2568;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2568;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2568;
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2584)));
        float _2605 = (log2(_2571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
        }
        else
        {
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            uint _2900 = 0u;
            uint _2909;
            bool _2910;
            for (;;)
            {
                _2909 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                _2910 = _2909 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2910)
                {
                    frontier_phi_68_pred = _2896;
                    frontier_phi_68_pred_1 = _2899;
                    frontier_phi_68_pred_2 = _2898;
                    frontier_phi_68_pred_3 = _2897;
                    frontier_phi_68_pred_4 = _2895;
                    frontier_phi_68_pred_5 = _2894;
                }
                else
                {
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    uint _3045;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2909;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3049 = uint(findLSB(_3045)) + (_2900 << 5u);
                        uint _3046 = (_3045 + 4294967295u) & _3045;
                        uint _3051 = _3049 * 48u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3071 = (_3049 * 48u) + 4u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3090 = (_3049 * 48u) + 8u;
                        vec3 _3101 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x));
                        float _3105 = _3065.x - _2569;
                        float _3106 = _3065.y - _2570;
                        float _3107 = _3065.z - _2571;
                        float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                        float _3111 = inversesqrt(_3108);
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3115 = dot(vec3(_801, _804, _807), vec3(_3112, _3113, _3114));
                        float _3120 = 1.0 - (_3108 * _3065.w);
                        float _4554 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3122 = sqrt(_3108) * _3084.w;
                        float _3125 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3115) + _3126;
                        float _3132 = _3122 * _3122;
                        float _3136 = ((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3121) / ((_3132 * 0.699999988079071044921875) + 1.0);
                        float _3140 = (-0.0) - _2569;
                        float _3141 = (-0.0) - _2570;
                        float _3142 = (-0.0) - _2571;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3157 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                        float _3158 = 1.0 - _876;
                        float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                        float _3166 = _3165 * _3165;
                        float _3167 = _3166 * _3166;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3178 = dot(vec3(_801, _804, _807), vec3(_3147, _3148, _3149));
                        float _4570 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3182 = dot(vec3(_801, _804, _807), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                        float _4581 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                        float _3190 = _3125 * _3166;
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3115) + _3191;
                        float _4592 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3195 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3196 = 1.0 - _3166;
                        float _3206 = (0.5 / (((_3195 * ((_3181 * _3196) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3166) * _3181))) * _3195;
                        float _4603 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3217 = (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) / ((_3189 * _3189) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125))) * _3121;
                        _2969 = (_3136 * _3084.x) + _3042;
                        _2970 = (_3136 * _3084.y) + _3043;
                        _2971 = (_3136 * _3084.z) + _3044;
                        _2966 = (_3217 * _3101.x) + _3039;
                        _2967 = (_3217 * _3101.y) + _3040;
                        _2968 = (_3217 * _3101.z) + _3041;
                        if (_3046 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _3046;
                        }
                    }
                    frontier_phi_68_pred = _2968;
                    frontier_phi_68_pred_1 = _2971;
                    frontier_phi_68_pred_2 = _2970;
                    frontier_phi_68_pred_3 = _2969;
                    frontier_phi_68_pred_4 = _2967;
                    frontier_phi_68_pred_5 = _2966;
                }
                _2747 = frontier_phi_68_pred;
                _2753 = frontier_phi_68_pred_1;
                _2751 = frontier_phi_68_pred_2;
                _2749 = frontier_phi_68_pred_3;
                _2745 = frontier_phi_68_pred_4;
                _2743 = frontier_phi_68_pred_5;
                uint _2901 = _2900 + 1u;
                if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2894 = _2743;
                    _2895 = _2745;
                    _2896 = _2747;
                    _2897 = _2749;
                    _2898 = _2751;
                    _2899 = _2753;
                    _2900 = _2901;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
        }
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.z;
        uint _2759 = (_2757 >> 8u) & 15u;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((4294967295u << _2759) & _2615) == 0u)
        {
            _2862 = _2742;
            _2864 = _2744;
            _2866 = _2746;
            _2868 = _2748;
            _2870 = _2750;
            _2872 = _2752;
        }
        else
        {
            float _2887 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
            float _2888 = _2887 * _2569;
            float _2889 = _2887 * _2570;
            float _2890 = _2887 * _2571;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2759 < ((_2757 >> 12u) & 15u))
            {
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _3022 = _2742;
                float _3023 = _2744;
                float _3024 = _2746;
                float _3025 = _2748;
                float _3026 = _2750;
                float _3027 = _2752;
                uint _3028 = _2759;
                uint _3037;
                bool _3038;
                for (;;)
                {
                    _3037 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                    _3038 = _3037 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3038)
                    {
                        frontier_phi_79_pred = _3027;
                        frontier_phi_79_pred_1 = _3026;
                        frontier_phi_79_pred_2 = _3025;
                        frontier_phi_79_pred_3 = _3024;
                        frontier_phi_79_pred_4 = _3023;
                        frontier_phi_79_pred_5 = _3022;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        uint _3250 = _3037;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3335;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3261 = ((_3028 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3261 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3338 = (_3261 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3261 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_2571, _3370.z, fma(_2570, _3370.y, _3370.x * _2569)) + _3370.w;
                            _3383 = !((fma(_2571, _3351.z, fma(_2570, _3351.y, _3351.x * _2569)) + _3351.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3276.x - _2569;
                                float _3411 = _3276.y - _2570;
                                float _3412 = _3276.z - _2571;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3277 * _3277));
                                float _4614 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3428 = sqrt(_3413) * _3292.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_801, _804, _807))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_2571, _3319.z, fma(_2570, _3319.y, _3319.x * _2569)) + _3319.w) / _3382;
                                float _3442 = (fma(_2571, _3335.z, fma(_2570, _3335.y, _3335.x * _2569)) + _3335.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4630 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _876;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2888;
                                float _3472 = _3418 - _2889;
                                float _3473 = _3419 - _2890;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_801, _804, _807), vec3((-0.0) - _2888, (-0.0) - _2889, (-0.0) - _2890));
                                float _4641 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3485 = dot(vec3(_801, _804, _807), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4652 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_801, _804, _807), vec3(_3417, _3418, _3419))) + _3494;
                                float _4663 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4674 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3448 * _3292.z;
                                frontier_phi_85_pred_1 = _3448 * _3292.y;
                                frontier_phi_85_pred_2 = _3448 * _3292.x;
                                frontier_phi_85_pred_3 = _3522 * _3304.z;
                                frontier_phi_85_pred_4 = _3522 * _3304.y;
                                frontier_phi_85_pred_5 = _3522 * _3304.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_85_pred;
                            _3530 = frontier_phi_85_pred_1;
                            _3529 = frontier_phi_85_pred_2;
                            _3528 = frontier_phi_85_pred_3;
                            _3527 = frontier_phi_85_pred_4;
                            _3526 = frontier_phi_85_pred_5;
                            _3234 = _3529 + _3247;
                            _3235 = _3530 + _3248;
                            _3236 = _3531 + _3249;
                            _3231 = _3526 + _3244;
                            _3232 = _3527 + _3245;
                            _3233 = _3528 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3236;
                        frontier_phi_79_pred_1 = _3235;
                        frontier_phi_79_pred_2 = _3234;
                        frontier_phi_79_pred_3 = _3233;
                        frontier_phi_79_pred_4 = _3232;
                        frontier_phi_79_pred_5 = _3231;
                    }
                    _2873 = frontier_phi_79_pred;
                    _2871 = frontier_phi_79_pred_1;
                    _2869 = frontier_phi_79_pred_2;
                    _2867 = frontier_phi_79_pred_3;
                    _2865 = frontier_phi_79_pred_4;
                    _2863 = frontier_phi_79_pred_5;
                    uint _3029 = _3028 + 1u;
                    if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3022 = _2863;
                        _3023 = _2865;
                        _3024 = _2867;
                        _3025 = _2869;
                        _3026 = _2871;
                        _3027 = _2873;
                        _3028 = _3029;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2869;
                frontier_phi_60_61_ladder_1 = _2873;
                frontier_phi_60_61_ladder_2 = _2871;
                frontier_phi_60_61_ladder_3 = _2867;
                frontier_phi_60_61_ladder_4 = _2865;
                frontier_phi_60_61_ladder_5 = _2863;
            }
            else
            {
                frontier_phi_60_61_ladder = _2748;
                frontier_phi_60_61_ladder_1 = _2752;
                frontier_phi_60_61_ladder_2 = _2750;
                frontier_phi_60_61_ladder_3 = _2746;
                frontier_phi_60_61_ladder_4 = _2744;
                frontier_phi_60_61_ladder_5 = _2742;
            }
            _2862 = frontier_phi_60_61_ladder_5;
            _2864 = frontier_phi_60_61_ladder_4;
            _2866 = frontier_phi_60_61_ladder_3;
            _2868 = frontier_phi_60_61_ladder;
            _2870 = frontier_phi_60_61_ladder_2;
            _2872 = frontier_phi_60_61_ladder_1;
        }
        float _2877 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2627 = (_2877 * _2868) + _2064;
        _2629 = (_2877 * _2870) + _2066;
        _2631 = (_2877 * _2872) + _2068;
        _2633 = ((_2862 * _845) * _2877) + _2409;
        _2635 = ((_2864 * _847) * _2877) + _2411;
        _2637 = ((_2866 * _848) * _2877) + _2413;
    }
    else
    {
        _2627 = _2064;
        _2629 = _2066;
        _2631 = _2068;
        _2633 = _2409;
        _2635 = _2411;
        _2637 = _2413;
    }
    uint _2643 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _4690 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4701 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4712 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4723 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2675 = (((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2627 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _860))) + ((_2633 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * TEXCOORD_7.x) * ((_515 * _510.x) + cbMtdParam._m0[16u].x)) * cbInstanceData._m0[_2643].x);
    float _2677 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.y) * ((_515 * _510.y) + cbMtdParam._m0[16u].y)) * cbInstanceData._m0[_2643].y) + ((_2635 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2629 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _860)));
    float _2679 = ((((cbMtdParam._m0[12u].x * TEXCOORD_7.z) * ((_515 * _510.z) + cbMtdParam._m0[16u].z)) * cbInstanceData._m0[_2643].z) + ((_2637 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2631 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _860)));
    float _2680 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2681 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2682 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2687 = cbInstanceData._m0[_820 + 6u].w * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)));
    float _2692 = _781 / cbSceneParam._m0[86u].x;
    float _2693 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2707 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2709 = _2707.x;
    float _2710 = _2707.y;
    float _2711 = _2707.z;
    float _2712 = _2707.w;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _2767 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _2768 = _2767 / _703;
        float _2779 = _2768 * _754;
        float _2780 = _755 * _2768;
        float _2781 = (-0.0) - _2780;
        float _2782 = _2768 * _756;
        float _2784 = (cbSceneParam._m0[77u].w * _2781) / _2767;
        float _2785 = _2784 + cbSceneParam._m0[79u].w;
        float _2786 = cbSceneParam._m0[79u].w - _2780;
        float _2792 = sqrt(((_2779 * _2779) + (_2780 * _2780)) + (_2782 * _2782));
        float _2795 = (1.0 - (cbSceneParam._m0[77u].w / _2767)) * _2792;
        float _2800 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2802 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2781 - _2784) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2785 > 0.0) ? exp2(_2800 * _2785) : (2.0 - exp2(_2802 * _2785))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2795;
        }
        else
        {
            float _2923 = 1.0 / cbSceneParam._m0[80u].x;
            float _2924 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : max(_2785, _2786));
            float _2925 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : min(_2785, _2786));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            _2979 = ((abs(_2792 / _2781) * cbSceneParam._m0[80u].y) * ((((_2934 - _2935) * 2.0) - ((exp2(_2800 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)))) - exp2(_2800 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))))) * _2923)) - ((exp2(_2802 * _2934) - exp2(_2802 * _2935)) * _2923))) + (_2795 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2712);
        _2804 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2709;
        _2806 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2710;
        _2808 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2711;
        _2810 = _2990 * _2712;
    }
    else
    {
        _2804 = _2709;
        _2806 = _2710;
        _2808 = _2711;
        _2810 = _2712;
    }
    bool _3017;
    vec4 _2820;
    vec4 _2842;
    float _2844;
    float _2848;
    float _2849;
    float _2850;
    float _2851;
    bool _2861;
    for (;;)
    {
        _2820 = cbMatDynParam._m0[0u];
        float _2822 = roundEven(_2820.y);
        bool _2823 = _2822 == 3.0;
        float _2824 = log2(_2810);
        float _2831 = exp2(_2824 * cbSceneParam._m0[78u].x) * _2680;
        float _2832 = exp2(_2824 * cbSceneParam._m0[78u].y) * _2681;
        float _2833 = exp2(_2824 * cbSceneParam._m0[78u].z) * _2682;
        float _2840 = _770 + (-0.5);
        _2842 = cbMtdParam._m0[1u];
        _2844 = _2842.y * _2840;
        float _2847 = (_2822 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2848 = _2847 * (_2823 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2804)));
        _2849 = _2847 * (_2823 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2806)));
        _2850 = _2847 * (_2823 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2808)));
        _2851 = _2840 * 0.999000012874603271484375;
        _2861 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2861)
        {
            if ((cbInstanceData._m0[_820 + 7u].x + _2851) < 0.5)
            {
                _3017 = true;
                break;
            }
        }
        uint _2958 = _821 + uint(_2820.w);
        if ((cbInstanceData._m0[_2958].w < 1.0) && ((cbInstanceData._m0[_2958].w + _2851) < 0.5))
        {
            _3017 = true;
            break;
        }
        if ((_2844 + _395) < _2842.x)
        {
            _3017 = true;
            break;
        }
        _3017 = false;
        break;
    }
    float _3222;
    if (_3017)
    {
        discard_state = true;
        _3222 = 0.0;
    }
    else
    {
        _3222 = _2687;
    }
    SV_Target.x = _2848;
    SV_Target.y = _2849;
    SV_Target.z = _2850;
    SV_Target.w = _3222;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2687;
    discard_exit();
}


