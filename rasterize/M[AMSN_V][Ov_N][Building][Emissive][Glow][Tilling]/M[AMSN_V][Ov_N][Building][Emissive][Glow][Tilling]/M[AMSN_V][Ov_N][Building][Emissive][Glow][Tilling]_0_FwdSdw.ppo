#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1155;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _222 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _223 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _224 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _228 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _229 = _228 * _222;
    float _230 = _228 * _223;
    float _231 = _228 * _224;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _249 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _250 = _249 * TANGENT_2.x;
    float _251 = _249 * TANGENT_2.y;
    float _252 = _249 * TANGENT_2.z;
    float _257;
    float _258;
    float _259;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _257 = (-0.0) - _236;
        _258 = (-0.0) - _237;
        _259 = (-0.0) - _238;
    }
    else
    {
        _257 = _236;
        _258 = _237;
        _259 = _238;
    }
    float _282 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[13u].x;
    float _294 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _282) + (cbMtdParam._m0[13u].z * TEXCOORD_6))) + 1.0;
    float _3777 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _297 = 1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)));
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _307 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _282) + (cbMtdParam._m0[13u].y * TEXCOORD_5))) + 1.0;
    float _3798 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = 1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)));
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _329 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _331 = _329.x;
    float _332 = _329.y;
    float _333 = _329.z;
    float _334 = cbMtdParam._m0[11u].x * _311;
    float _336 = cbMtdParam._m0[11u].y * _311;
    float _338 = cbMtdParam._m0[11u].z * _311;
    float _358 = _309 + _297;
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0));
    vec4 _378 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _383 = _378.w;
    float _384 = _378.x * cbMtdParam._m0[10u].x;
    float _385 = _378.y * cbMtdParam._m0[10u].y;
    float _386 = _378.z * cbMtdParam._m0[10u].z;
    float _401 = (_384 - (_360 * _384)) + ((((((_331 * (cbMtdParam._m0[9u].x - _334)) * _299) + (_334 * _331)) * 4.55000019073486328125) * _360) * _384);
    float _403 = (((((((_332 * (cbMtdParam._m0[9u].y - _336)) * _299) + (_336 * _332)) * 4.55000019073486328125) * _360) * _385) + _385) - (_360 * _385);
    float _405 = (((((((_333 * (cbMtdParam._m0[9u].z - _338)) * _299) + (_338 * _333)) * 4.55000019073486328125) * _360) * _386) + _386) - (_360 * _386);
    vec4 _422 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _426 = _422.z;
    float _430 = (_422.x * 2.0) + (-1.0);
    float _432 = (_422.y * 2.0) + (-1.0);
    float _433 = dot(vec2(_430, _432), vec2(_430, _432));
    float _3829 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _438 = sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))));
    float _441 = fma(_438, _257, fma(_432, _250, _430 * _229));
    float _444 = fma(_438, _258, fma(_432, _251, _430 * _230));
    float _447 = fma(_438, _259, fma(_432, _252, _430 * _231));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    vec4 _466 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _472 = (_466.x * 2.0) + (-1.0);
    float _473 = (_466.y * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3840 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))));
    float _482 = fma(_479, _257, fma(_473, _250, _472 * _229));
    float _485 = fma(_479, _258, fma(_473, _251, _472 * _230));
    float _488 = fma(_479, _259, fma(_473, _252, _472 * _231));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    float _493 = _492 * _482;
    float _494 = _492 * _485;
    float _495 = _492 * _488;
    float _498 = fma(_495, _212, fma(_494, _211, _493 * _210));
    float _501 = fma(_495, _245, fma(_494, _244, _493 * _243));
    float _504 = fma(_495, _259, fma(_494, _258, _493 * _257));
    float _508 = inversesqrt(dot(vec3(_498, _501, _504), vec3(_498, _501, _504)));
    float _512 = fma(_454, _212, fma(_453, _211, _452 * _210));
    float _515 = fma(_454, _245, fma(_453, _244, _452 * _243));
    float _518 = fma(_454, _259, fma(_453, _258, _452 * _257));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _525 = _522 * _518;
    vec4 _538 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _544 = (_538.x * 2.0) + (-1.0);
    float _545 = (_538.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3851 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))));
    float _554 = fma(_551, _257, fma(_545, _250, _544 * _229));
    float _557 = fma(_551, _258, fma(_545, _251, _544 * _230));
    float _560 = fma(_551, _259, fma(_545, _252, _544 * _231));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    float _565 = _564 * _554;
    float _566 = _564 * _557;
    float _567 = _564 * _560;
    float _570 = fma(_567, _212, fma(_566, _211, _565 * _210));
    float _573 = fma(_567, _245, fma(_566, _244, _565 * _243));
    float _576 = fma(_567, _259, fma(_566, _258, _565 * _257));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _595 = ((_522 * _512) + (((_498 * _299) * _508) * cbMtdParam._m0[14u].z)) + (((_570 * _311) * _580) * cbMtdParam._m0[14u].y);
    float _597 = ((_522 * _515) + (((_501 * _299) * _508) * cbMtdParam._m0[14u].z)) + (((_573 * _311) * _580) * cbMtdParam._m0[14u].y);
    float _600 = fma(_525, _257, fma(_597, _243, _595 * _210));
    float _603 = fma(_525, _258, fma(_597, _244, _595 * _211));
    float _606 = fma(_525, _259, fma(_597, _245, _595 * _212));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3862 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _614 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _615 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3895 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3906 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3917 = isnan(0.0) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.0 : max(cbMtdParam._m0[15u].w, 0.0));
    float _619 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    float _701 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _702 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _724 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _727 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    uint _740 = uint(roundEven(NORMAL.w)) * 13u;
    uint _742 = (_740 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_742].z;
    float _3928 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _754 = 1.0 - _619;
    float _755 = _751 * _754;
    float _756 = _752 * _754;
    float _757 = _753 * _754;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _619;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _619;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _619;
    float _765 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    float _768 = _764 + 0.039999999105930328369140625;
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _701, cbSceneParam._m0[86u].y * _702));
    float _780 = _777.x * TEXCOORD_7.w;
    float _781 = dot(vec3(_611, _612, _613), vec3(_693, _694, _695));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _611) - _693;
    float _789 = (_784 * _612) - _694;
    float _790 = (_784 * _613) - _695;
    float _794 = abs(dot(vec3(_693, _694, _695), vec3(_611, _612, _613)));
    float _3961 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_615);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _815 = (1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _816 = _809 * _796;
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _883 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _887 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _912 = _844 + _611;
        float _913 = _848 + _612;
        float _914 = _852 + _613;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_611, _612, _613), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _4009 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_611, _612, _613), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _4042 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_611, _612, _613), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4075 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1195 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1199 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1203 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1226 = _844 + _611;
        float _1227 = _848 + _612;
        float _1228 = _852 + _613;
        float _1238 = fma(_1228, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1226)) - _1195;
        float _1239 = fma(_1228, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1226)) - _1199;
        float _1240 = fma(_1228, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1226)) - _1203;
        float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
        float _1257 = ((_1244 * _1238) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1195 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1244 * _1239) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1199 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1244 * _1240) / cbModelParam._m0[35u].z) + ((((((_1203 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1294 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1261.x + (-0.5));
        float _1296 = _1294 * (_1261.y + (-0.5));
        float _1297 = _1294 * (_1261.z + (-0.5));
        float _1304 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1268.x + (-0.5));
        float _1306 = _1304 * (_1268.y + (-0.5));
        float _1307 = _1304 * (_1268.z + (-0.5));
        float _1314 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1275.x + (-0.5));
        float _1316 = _1314 * (_1275.y + (-0.5));
        float _1317 = _1314 * (_1275.z + (-0.5));
        float _1324 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1282.x + (-0.5));
        float _1326 = _1324 * (_1282.y + (-0.5));
        float _1327 = _1324 * (_1282.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_611, _612, _613), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4138 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1358 + 1.0))) + _1363) * _1328;
        float _1373 = _1296 * 0.5;
        float _1374 = _1306 * 0.5;
        float _1375 = _1316 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_611, _612, _613), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4171 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1400 + 1.0))) + _1405) * _1329;
        float _1415 = _1297 * 0.5;
        float _1416 = _1307 * 0.5;
        float _1417 = _1317 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_611, _612, _613), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4204 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1442 + 1.0))) + _1447) * _1330;
        _1464 = _1297;
        _1465 = _1296;
        _1466 = _1295;
        _1467 = _1307;
        _1468 = _1306;
        _1469 = _1305;
        _1470 = _1317;
        _1471 = _1316;
        _1472 = _1315;
        _1473 = _1330;
        _1474 = _1329;
        _1475 = _1328;
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1155;
        _1465 = _1155;
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = _1155;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1511 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1488));
    float _1532 = _788 * 0.5;
    float _1533 = _789 * 0.5;
    float _1534 = _790 * 0.5;
    float _1535 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1538 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1541 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1575;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1548 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1552 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1556 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1563 = dot(vec4(cbModelParam._m0[39u]), vec4(_1532, _1533, _1534, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1586;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1577 = dot(vec4(cbModelParam._m0[40u]), vec4(_1532, _1533, _1534, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1590 = (_1586 * cbModelParam._m0[1u].x) + (_1575 * (1.0 - cbModelParam._m0[1u].x));
    float _1600 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1600 : min(cbModelParam._m0[25u].z, _1600));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1648 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1652 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1656 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1659 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1662 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1665 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1693;
        if (_1659 > 0.0)
        {
            _1693 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1693 = frontier_phi_16_14_ladder;
        }
        float _1869;
        if (_1662 > 0.0)
        {
            _1869 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1869 = frontier_phi_25_21_ladder;
        }
        float _2164;
        if (_1665 > 0.0)
        {
            _2164 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2164 = frontier_phi_37_32_ladder;
        }
        float _2166 = isnan(_1869) ? _1693 : (isnan(_1693) ? _1869 : min(_1693, _1869));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1659) + _1648;
        float _2172 = (_2167 * _1662) + _1652;
        float _2173 = (_2167 * _1665) + _1656;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2174;
        float _2178 = _2174 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 > _2178) || ((_2172 < _2176) || ((_2171 < _2176) || (_2171 > _2178))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2173, cbModelParam._m0[9u].z, fma(_2172, cbModelParam._m0[9u].y, _2171 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2173, cbModelParam._m0[10u].z, fma(_2172, cbModelParam._m0[10u].y, _2171 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2173, cbModelParam._m0[11u].z, fma(_2172, cbModelParam._m0[11u].y, _2171 * cbModelParam._m0[11u].x))), _1601);
            frontier_phi_15_37_ladder = _2318.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2318.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2318.z * cbModelParam._m0[1u].y;
        }
        _1681 = frontier_phi_15_37_ladder_1;
        _1683 = frontier_phi_15_37_ladder;
        _1685 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1601);
        _1681 = _1669.x * cbModelParam._m0[1u].y;
        _1683 = _1669.y * cbModelParam._m0[1u].y;
        _1685 = _1669.z * cbModelParam._m0[1u].y;
    }
    float _1689 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1689 : min(cbModelParam._m0[25u].w, _1689));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1761 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1764 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1874;
        if (_1758 > 0.0)
        {
            _1874 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1874 = frontier_phi_27_23_ladder;
        }
        float _2191;
        if (_1761 > 0.0)
        {
            _2191 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2191 = frontier_phi_39_34_ladder;
        }
        float _2529;
        if (_1764 > 0.0)
        {
            _2529 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2529 = frontier_phi_49_46_ladder;
        }
        float _2531 = isnan(_2191) ? _1874 : (isnan(_1874) ? _2191 : min(_1874, _2191));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _1758) + _1747;
        float _2537 = (_2532 * _1761) + _1751;
        float _2538 = (_2532 * _1764) + _1755;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2540 = (-1.0) - _2539;
        float _2542 = _2539 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2538 > _2542) || ((_2538 < _2540) || ((_2537 > _2542) || ((_2537 < _2540) || ((_2536 < _2540) || (_2536 > _2542))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2538, cbModelParam._m0[17u].z, fma(_2537, cbModelParam._m0[17u].y, _2536 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2538, cbModelParam._m0[18u].z, fma(_2537, cbModelParam._m0[18u].y, _2536 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2538, cbModelParam._m0[19u].z, fma(_2537, cbModelParam._m0[19u].y, _2536 * cbModelParam._m0[19u].x))), _1690);
            frontier_phi_24_49_ladder = _2660.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2660.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2660.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_24_49_ladder_2;
        _1785 = frontier_phi_24_49_ladder_1;
        _1787 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1690);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1800 = (((_815 * _765) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1783 - _1681)) + _1681);
    float _1802 = (((_815 * _767) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1785 - _1683)) + _1683);
    float _1804 = (((_815 * _768) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1787 - _1685)) + _1685);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1860 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1861 = _1848 / _1860;
    float _1862 = _1852 / _1860;
    float _1863 = _1856 / _1860;
    float _2010;
    float _2011;
    float _2012;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1890 = ((uint(_1863 > cbSceneParam._m0[59u].y) + uint(_1863 > cbSceneParam._m0[59u].x)) + uint(_1863 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1891 = _1890 + 43u;
        uint _1899 = _1890 + 44u;
        uint _1907 = _1890 + 45u;
        uint _1915 = _1890 + 46u;
        float _1926 = fma(_1860, cbSceneParam._m0[_1891].w, fma(_1856, cbSceneParam._m0[_1891].z, fma(_1852, cbSceneParam._m0[_1891].y, _1848 * cbSceneParam._m0[_1891].x)));
        float _1930 = fma(_1860, cbSceneParam._m0[_1899].w, fma(_1856, cbSceneParam._m0[_1899].z, fma(_1852, cbSceneParam._m0[_1899].y, _1848 * cbSceneParam._m0[_1899].x)));
        float _1938 = fma(_1860, cbSceneParam._m0[_1915].w, fma(_1856, cbSceneParam._m0[_1915].z, fma(_1852, cbSceneParam._m0[_1915].y, _1848 * cbSceneParam._m0[_1915].x)));
        float _1943 = cbSceneParam._m0[33u].z * _1938;
        float _1945 = cbSceneParam._m0[33u].w * _1938;
        float _1948 = fma(_1860, cbSceneParam._m0[_1907].w, fma(_1856, cbSceneParam._m0[_1907].z, fma(_1852, cbSceneParam._m0[_1907].y, _1848 * cbSceneParam._m0[_1907].x))) / _1938;
        float _1996 = (cbSceneParam._m0[33u].x - sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863))) * cbSceneParam._m0[33u].y;
        float _4330 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2003 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1943 + _1926) / _1938, (_1945 + _1930) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 + _1926) / _1938, (_1930 - _1943) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1926 - _1943) / _1938, (_1930 - _1945) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1926 - _1945) / _1938, (_1943 + _1930) / _1938), _1948), 0.0)).x), vec4(0.25)));
        _2010 = 1.0 - (_2003 * cbSceneParam._m0[34u].x);
        _2011 = 1.0 - (_2003 * cbSceneParam._m0[34u].y);
        _2012 = 1.0 - (_2003 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2010 = 1.0;
        _2011 = 1.0;
        _2012 = 1.0;
    }
    float _2076;
    float _2078;
    float _2080;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2064 = fma(_1860, cbSceneParam._m0[63u].w, fma(_1856, cbSceneParam._m0[63u].z, fma(_1852, cbSceneParam._m0[63u].y, _1848 * cbSceneParam._m0[63u].x)));
        float _2065 = fma(_1860, cbSceneParam._m0[60u].w, fma(_1856, cbSceneParam._m0[60u].z, fma(_1852, cbSceneParam._m0[60u].y, _1848 * cbSceneParam._m0[60u].x))) / _2064;
        float _2066 = fma(_1860, cbSceneParam._m0[61u].w, fma(_1856, cbSceneParam._m0[61u].z, fma(_1852, cbSceneParam._m0[61u].y, _1848 * cbSceneParam._m0[61u].x))) / _2064;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2065 >= cbSceneParam._m0[64u].x) && (_2066 >= cbSceneParam._m0[64u].y)) && (_2065 <= cbSceneParam._m0[64u].z)) && (_2066 <= cbSceneParam._m0[64u].w))
        {
            float _2204 = fma(_1860, cbSceneParam._m0[62u].w, fma(_1856, cbSceneParam._m0[62u].z, fma(_1852, cbSceneParam._m0[62u].y, _1848 * cbSceneParam._m0[62u].x))) / _2064;
            float _2208 = isnan(cbSceneParam._m0[41u].w) ? _2204 : (isnan(_2204) ? cbSceneParam._m0[41u].w : max(_2204, cbSceneParam._m0[41u].w));
            float _2251 = (cbSceneParam._m0[33u].x - sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863))) * cbSceneParam._m0[33u].y;
            float _4346 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
            float _2258 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2065, cbSceneParam._m0[33u].w + _2066), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2065, _2066 - cbSceneParam._m0[33u].z), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2065 - cbSceneParam._m0[33u].z, _2066 - cbSceneParam._m0[33u].w), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2065 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2066), _2208), 0.0)).x), vec4(0.25)));
            float _2262 = 1.0 - (_2258 * cbSceneParam._m0[34u].x);
            float _2263 = 1.0 - (_2258 * cbSceneParam._m0[34u].y);
            float _2264 = 1.0 - (_2258 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2263) ? _2011 : (isnan(_2011) ? _2263 : min(_2011, _2263));
            frontier_phi_36_35_ladder_1 = isnan(_2264) ? _2012 : (isnan(_2012) ? _2264 : min(_2012, _2264));
            frontier_phi_36_35_ladder_2 = isnan(_2262) ? _2010 : (isnan(_2010) ? _2262 : min(_2010, _2262));
        }
        else
        {
            frontier_phi_36_35_ladder = _2011;
            frontier_phi_36_35_ladder_1 = _2012;
            frontier_phi_36_35_ladder_2 = _2010;
        }
        _2076 = frontier_phi_36_35_ladder_2;
        _2078 = frontier_phi_36_35_ladder;
        _2080 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2076 = _2010;
        _2078 = _2011;
        _2080 = _2012;
    }
    uvec4 _2085 = floatBitsToUint(cbInstanceData._m0[_740 + 5u]);
    uint _2087 = _2085.x * 14u;
    uint _2088 = _2087 + 13u;
    float _2095 = _780 + (-1.0);
    float _2100 = (cbLight._m0[_2088].x * _2095) + 1.0;
    float _2101 = (cbLight._m0[_2088].y * _2095) + 1.0;
    float _2102 = (cbLight._m0[_2088].z * _2095) + 1.0;
    float _2103 = (cbLight._m0[_2088].w * _2095) + 1.0;
    uint _2104 = _2087 + 5u;
    float _2110 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2114 = _2087 + 4u;
    float _2123 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2127 = _2087 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_611, _612, _613));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_611, _612, _613));
    float _4382 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4393 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2104].x * _2110) * _2148) + (((cbLight._m0[_2114].x * _2076) * _2123) * _2146);
    float _2156 = ((_2110 * cbLight._m0[_2104].y) * _2148) + (((cbLight._m0[_2114].y * _2078) * _2123) * _2146);
    float _2157 = ((_2110 * cbLight._m0[_2104].z) * _2148) + (((cbLight._m0[_2114].z * _2080) * _2123) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2087 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2163)
    {
        _2265 = _2155;
        _2267 = _2156;
        _2269 = _2157;
    }
    else
    {
        uint _2273 = _2087 + 6u;
        float _2289 = (dot(vec3(cbLight._m0[_2087 + 2u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4404 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2292 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2265 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2155;
        _2267 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2156;
        _2269 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2157;
    }
    bool _2272 = _2161.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2272)
    {
        _2327 = _2265;
        _2329 = _2267;
        _2331 = _2269;
    }
    else
    {
        uint _2500 = _2087 + 7u;
        float _2516 = (dot(vec3(cbLight._m0[_2087 + 3u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4420 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2519 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2327 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2265;
        _2329 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2267;
        _2331 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2269;
    }
    uint _2334 = _2087 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _615) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2087].x + _693;
    float _2350 = cbLight._m0[_2087].y + _694;
    float _2351 = cbLight._m0[_2087].z + _695;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2087].xyz));
    float _4436 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2363 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2364 = dot(vec3(_611, _612, _613), vec3(_2356, _2357, _2358));
    float _4458 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2356, _2357, _2358));
    float _4469 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
    float _2385 = 0.959999978542327880859375 - _762;
    float _2387 = 0.959999978542327880859375 - _763;
    float _2388 = 0.959999978542327880859375 - _764;
    float _2395 = 1.0 - _2348;
    float _2406 = (0.5 / (((_2363 * ((_2362 * _2395) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2395) + _2348) * _2362))) * _2362;
    float _4480 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2422 = _2087 + 9u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _615) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2127].x + _693;
    float _2436 = cbLight._m0[_2127].y + _694;
    float _2437 = cbLight._m0[_2127].z + _695;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2127].xyz));
    float _4491 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2449 = dot(vec3(_611, _612, _613), vec3(_2442, _2443, _2444));
    float _4502 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2453 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2442, _2443, _2444));
    float _4513 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2457 = _2434 * _2434;
    float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
    float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
    float _2475 = 1.0 - _2434;
    float _2485 = (0.5 / (((_2363 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2475) + _2434) * _2448))) * _2448;
    float _4524 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
    float _2497 = (((((_2468 * _2385) + _765) * cbLight._m0[_2422].x) * _2487) * _2110) + ((((cbLight._m0[_2334].x * _2076) * ((_2384 * _2385) + _765)) * _2408) * _2123);
    float _2498 = (((((_2468 * _2387) + _767) * cbLight._m0[_2422].y) * _2487) * _2110) + ((((cbLight._m0[_2334].y * _2078) * ((_2384 * _2387) + _767)) * _2408) * _2123);
    float _2499 = (((((_2468 * _2388) + _768) * cbLight._m0[_2422].z) * _2487) * _2110) + ((((cbLight._m0[_2334].z * _2080) * ((_2384 * _2388) + _768)) * _2408) * _2123);
    float _2555;
    float _2557;
    float _2559;
    if (_2163)
    {
        _2555 = _2497;
        _2557 = _2498;
        _2559 = _2499;
    }
    else
    {
        uint _2561 = _2087 + 2u;
        uint _2565 = _2087 + 10u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _615) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _693;
        float _2582 = cbLight._m0[_2561].y + _694;
        float _2583 = cbLight._m0[_2561].z + _695;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2561].xyz));
        float _4535 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2595 = dot(vec3(_611, _612, _613), vec3(_2588, _2589, _2590));
        float _4546 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4557 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2614 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
        float _2621 = 1.0 - _2580;
        float _2631 = (0.5 / (((_2363 * ((_2594 * _2621) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2621) + _2580) * _2594))) * _2594;
        float _4568 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2555 = (((((_2614 * _2385) + _765) * cbLight._m0[_2565].x) * _2633) * _2634) + _2497;
        _2557 = (((((_2614 * _2387) + _767) * cbLight._m0[_2565].y) * _2633) * _2634) + _2498;
        _2559 = (((((_2614 * _2388) + _768) * cbLight._m0[_2565].z) * _2633) * _2634) + _2499;
    }
    float _2665;
    float _2667;
    float _2669;
    if (_2272)
    {
        _2665 = _2555;
        _2667 = _2557;
        _2669 = _2559;
    }
    else
    {
        uint _2676 = _2087 + 3u;
        uint _2680 = _2087 + 11u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _615) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _693;
        float _2697 = cbLight._m0[_2676].y + _694;
        float _2698 = cbLight._m0[_2676].z + _695;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2676].xyz));
        float _4584 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2710 = dot(vec3(_611, _612, _613), vec3(_2703, _2704, _2705));
        float _4595 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4606 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
        float _2736 = 1.0 - _2695;
        float _2746 = (0.5 / (((_2363 * ((_2709 * _2736) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2736) + _2695) * _2709))) * _2709;
        float _4617 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2665 = (((((_2729 * _2385) + _765) * cbLight._m0[_2680].x) * _2748) * _2749) + _2555;
        _2667 = (((((_2729 * _2387) + _767) * cbLight._m0[_2680].y) * _2748) * _2749) + _2557;
        _2669 = (((((_2729 * _2388) + _768) * cbLight._m0[_2680].z) * _2748) * _2749) + _2559;
    }
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_2085.y == 0u)
    {
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.x;
        uint _2782 = uint((float(_2770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _702) / _2771))) + floor(float(uint(cbSceneParam._m0[85u].x * _701) / _2771)));
        float _2792 = (log2(_1863 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2793 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        uint _2796 = uint(isnan(14.0) ? _2793 : (isnan(_2793) ? 14.0 : min(_2793, 14.0)));
        uvec4 _2801 = texelFetch(g_lightClusterGridBuffer, int(((_2796 << 2u) + (_2782 << 6u)) >> 2u));
        uint _2802 = _2801.x;
        uint _2803 = _2770.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2803 >> 4u) & 15u)) + 4294967295u) & _2802) == 0u) || ((_2803 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            uint _3036 = 0u;
            uint _3045;
            bool _3046;
            for (;;)
            {
                _3045 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                _3046 = _3045 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3046)
                {
                    frontier_phi_68_pred = _3035;
                    frontier_phi_68_pred_1 = _3034;
                    frontier_phi_68_pred_2 = _3033;
                    frontier_phi_68_pred_3 = _3031;
                    frontier_phi_68_pred_4 = _3030;
                    frontier_phi_68_pred_5 = _3032;
                }
                else
                {
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    uint _3160;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3045;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    for (;;)
                    {
                        uint _3164 = uint(findLSB(_3160)) + (_3036 << 5u);
                        uint _3161 = (_3160 + 4294967295u) & _3160;
                        uint _3166 = _3164 * 48u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3186 = (_3164 * 48u) + 4u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3205 = (_3164 * 48u) + 8u;
                        vec3 _3216 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x));
                        float _3220 = _3180.x - _1861;
                        float _3221 = _3180.y - _1862;
                        float _3222 = _3180.z - _1863;
                        float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                        float _3226 = inversesqrt(_3223);
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3230 = dot(vec3(_721, _724, _727), vec3(_3227, _3228, _3229));
                        float _3235 = 1.0 - (_3223 * _3180.w);
                        float _4643 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3237 = sqrt(_3223) * _3199.w;
                        float _3240 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3230) + _3241;
                        float _3247 = _3237 * _3237;
                        float _3251 = ((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3236) / ((_3247 * 0.699999988079071044921875) + 1.0);
                        float _3255 = (-0.0) - _1861;
                        float _3256 = (-0.0) - _1862;
                        float _3257 = (-0.0) - _1863;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3271 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                        float _3272 = 1.0 - _796;
                        float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                        float _3280 = _3279 * _3279;
                        float _3281 = _3280 * _3280;
                        float _3282 = _3262 + _3227;
                        float _3283 = _3263 + _3228;
                        float _3284 = _3264 + _3229;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3292 = dot(vec3(_721, _724, _727), vec3(_3262, _3263, _3264));
                        float _4659 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3296 = dot(vec3(_721, _724, _727), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                        float _4670 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                        float _3304 = _3240 * _3280;
                        float _3305 = _3304 * _3304;
                        float _3308 = ((1.0 - _3305) * _3230) + _3305;
                        float _4681 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3310 = 1.0 - _3280;
                        float _3320 = (0.5 / (((_3309 * ((_3295 * _3310) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3280) * _3295))) * _3309;
                        float _4692 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3331 = (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3303 * _3303) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125))) * _3236;
                        _3089 = (_3251 * _3199.x) + _3157;
                        _3090 = (_3251 * _3199.y) + _3158;
                        _3091 = (_3251 * _3199.z) + _3159;
                        _3086 = (_3331 * _3216.x) + _3154;
                        _3087 = (_3331 * _3216.y) + _3155;
                        _3088 = (_3331 * _3216.z) + _3156;
                        if (_3161 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3161;
                        }
                    }
                    frontier_phi_68_pred = _3091;
                    frontier_phi_68_pred_1 = _3090;
                    frontier_phi_68_pred_2 = _3089;
                    frontier_phi_68_pred_3 = _3087;
                    frontier_phi_68_pred_4 = _3086;
                    frontier_phi_68_pred_5 = _3088;
                }
                _2897 = frontier_phi_68_pred;
                _2895 = frontier_phi_68_pred_1;
                _2893 = frontier_phi_68_pred_2;
                _2889 = frontier_phi_68_pred_3;
                _2887 = frontier_phi_68_pred_4;
                _2891 = frontier_phi_68_pred_5;
                uint _3037 = _3036 + 1u;
                if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3030 = _2887;
                    _3031 = _2889;
                    _3032 = _2891;
                    _3033 = _2893;
                    _3034 = _2895;
                    _3035 = _2897;
                    _3036 = _3037;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((4294967295u << _2903) & _2802) == 0u)
        {
            _2998 = _2886;
            _3000 = _2888;
            _3002 = _2890;
            _3004 = _2892;
            _3006 = _2894;
            _3008 = _2896;
        }
        else
        {
            float _3023 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
            float _3024 = _3023 * _1861;
            float _3025 = _3023 * _1862;
            float _3026 = _3023 * _1863;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3137 = _2886;
                float _3138 = _2888;
                float _3139 = _2890;
                float _3140 = _2892;
                float _3141 = _2894;
                float _3142 = _2896;
                uint _3143 = _2903;
                uint _3152;
                bool _3153;
                for (;;)
                {
                    _3152 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                    _3153 = _3152 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3153)
                    {
                        frontier_phi_74_pred = _3139;
                        frontier_phi_74_pred_1 = _3138;
                        frontier_phi_74_pred_2 = _3137;
                        frontier_phi_74_pred_3 = _3142;
                        frontier_phi_74_pred_4 = _3141;
                        frontier_phi_74_pred_5 = _3140;
                    }
                    else
                    {
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        float _3353 = _3141;
                        float _3354 = _3142;
                        uint _3355 = _3152;
                        uint _3356;
                        vec4 _3381;
                        float _3382;
                        vec4 _3397;
                        vec3 _3409;
                        vec4 _3425;
                        vec4 _3441;
                        float _3488;
                        bool _3489;
                        for (;;)
                        {
                            uint _3366 = ((_3143 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3355));
                            _3356 = (_3355 + 4294967295u) & _3355;
                            uint _3368 = _3366 * 40u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3382 = _3381.w;
                            uint _3384 = (_3366 * 40u) + 4u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3366 * 40u) + 8u;
                            _3409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x));
                            uint _3412 = (_3366 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3428 = (_3366 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3444 = (_3366 * 40u) + 24u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3463 = (_3366 * 40u) + 28u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3488 = fma(_1863, _3476.z, fma(_1862, _3476.y, _3476.x * _1861)) + _3476.w;
                            _3489 = !((fma(_1863, _3457.z, fma(_1862, _3457.y, _3457.x * _1861)) + _3457.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3489)
                            {
                                float _3516 = _3381.x - _1861;
                                float _3517 = _3381.y - _1862;
                                float _3518 = _3381.z - _1863;
                                float _3519 = dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518));
                                float _3522 = inversesqrt(_3519);
                                float _3523 = _3522 * _3516;
                                float _3524 = _3522 * _3517;
                                float _3525 = _3522 * _3518;
                                float _3529 = 1.0 - (_3519 / (_3382 * _3382));
                                float _4703 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3534 = sqrt(_3519) * _3397.w;
                                float _3536 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                                float _3537 = _3536 * _3536;
                                float _3540 = ((1.0 - _3537) * dot(vec3(_3523, _3524, _3525), vec3(_721, _724, _727))) + _3537;
                                float _3543 = _3534 * _3534;
                                float _3547 = (fma(_1863, _3425.z, fma(_1862, _3425.y, _3425.x * _1861)) + _3425.w) / _3488;
                                float _3548 = (fma(_1863, _3441.z, fma(_1862, _3441.y, _3441.x * _1861)) + _3441.w) / _3488;
                                float _3552 = 1.0 - dot(vec2(_3547, _3548), vec2(_3547, _3548));
                                float _4719 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3554 = _3553 * (((isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))) * _3530) / ((_3543 * 0.699999988079071044921875) + 1.0));
                                float _3566 = exp2(log2(1.0 / ((_3543 * 3.5) + 5.0)) * 0.25);
                                float _3567 = 1.0 - _796;
                                float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                                float _3575 = _3574 * _3574;
                                float _3576 = _3575 * _3575;
                                float _3577 = _3523 - _3024;
                                float _3578 = _3524 - _3025;
                                float _3579 = _3525 - _3026;
                                float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                                float _3587 = dot(vec3(_721, _724, _727), vec3((-0.0) - _3024, (-0.0) - _3025, (-0.0) - _3026));
                                float _4730 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3591 = dot(vec3(_721, _724, _727), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                                float _4741 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                                float _3599 = _3536 * _3575;
                                float _3600 = _3599 * _3599;
                                float _3606 = ((1.0 - _3600) * dot(vec3(_721, _724, _727), vec3(_3523, _3524, _3525))) + _3600;
                                float _4752 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3608 = 1.0 - _3575;
                                float _3618 = (0.5 / (((_3607 * ((_3590 * _3608) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3575) * _3590))) * _3607;
                                float _4763 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3628 = (_3553 * _3530) * (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3598 * _3598) * ((_3543 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3628 * _3409.z;
                                frontier_phi_80_pred_1 = _3628 * _3409.y;
                                frontier_phi_80_pred_2 = _3628 * _3409.x;
                                frontier_phi_80_pred_3 = _3554 * _3397.z;
                                frontier_phi_80_pred_4 = _3554 * _3397.y;
                                frontier_phi_80_pred_5 = _3554 * _3397.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_80_pred;
                            _3633 = frontier_phi_80_pred_1;
                            _3632 = frontier_phi_80_pred_2;
                            _3637 = frontier_phi_80_pred_3;
                            _3636 = frontier_phi_80_pred_4;
                            _3635 = frontier_phi_80_pred_5;
                            _3339 = _3635 + _3352;
                            _3340 = _3636 + _3353;
                            _3341 = _3637 + _3354;
                            _3336 = _3632 + _3349;
                            _3337 = _3633 + _3350;
                            _3338 = _3634 + _3351;
                            if (_3356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3356;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3338;
                        frontier_phi_74_pred_1 = _3337;
                        frontier_phi_74_pred_2 = _3336;
                        frontier_phi_74_pred_3 = _3341;
                        frontier_phi_74_pred_4 = _3340;
                        frontier_phi_74_pred_5 = _3339;
                    }
                    _3003 = frontier_phi_74_pred;
                    _3001 = frontier_phi_74_pred_1;
                    _2999 = frontier_phi_74_pred_2;
                    _3009 = frontier_phi_74_pred_3;
                    _3007 = frontier_phi_74_pred_4;
                    _3005 = frontier_phi_74_pred_5;
                    uint _3144 = _3143 + 1u;
                    if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3137 = _2999;
                        _3138 = _3001;
                        _3139 = _3003;
                        _3140 = _3005;
                        _3141 = _3007;
                        _3142 = _3009;
                        _3143 = _3144;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3007;
                frontier_phi_62_63_ladder_1 = _3005;
                frontier_phi_62_63_ladder_2 = _3003;
                frontier_phi_62_63_ladder_3 = _3009;
                frontier_phi_62_63_ladder_4 = _3001;
                frontier_phi_62_63_ladder_5 = _2999;
            }
            else
            {
                frontier_phi_62_63_ladder = _2894;
                frontier_phi_62_63_ladder_1 = _2892;
                frontier_phi_62_63_ladder_2 = _2890;
                frontier_phi_62_63_ladder_3 = _2896;
                frontier_phi_62_63_ladder_4 = _2888;
                frontier_phi_62_63_ladder_5 = _2886;
            }
            _2998 = frontier_phi_62_63_ladder_5;
            _3000 = frontier_phi_62_63_ladder_4;
            _3002 = frontier_phi_62_63_ladder_2;
            _3004 = frontier_phi_62_63_ladder_1;
            _3006 = frontier_phi_62_63_ladder;
            _3008 = frontier_phi_62_63_ladder_3;
        }
        float _3013 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2814 = (_3013 * _3004) + _2327;
        _2816 = (_3013 * _3006) + _2329;
        _2818 = (_3013 * _3008) + _2331;
        _2820 = ((_2998 * _765) * _3013) + _2665;
        _2822 = ((_3000 * _767) * _3013) + _2667;
        _2824 = ((_3002 * _768) * _3013) + _2669;
    }
    else
    {
        _2814 = _2327;
        _2816 = _2329;
        _2818 = _2331;
        _2820 = _2665;
        _2822 = _2667;
        _2824 = _2669;
    }
    float _4779 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4790 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4801 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4812 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2842 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2814 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _780))) + ((_2820 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2816 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _780))) + ((_2822 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    float _2844 = ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2818 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _780))) + ((_2824 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    float _2852 = cbInstanceData._m0[_740 + 6u].w * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)));
    float _2857 = _701 / cbSceneParam._m0[86u].x;
    float _2858 = _702 / cbSceneParam._m0[86u].y;
    vec4 _2872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2874 = _2872.x;
    float _2875 = _2872.y;
    float _2876 = _2872.z;
    float _2877 = _2872.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2912 = _2911 / _635;
        float _2923 = _2912 * _686;
        float _2924 = _687 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2926 = _2912 * _688;
        float _2928 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2924;
        float _2936 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3099;
        if (abs((_2925 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3099 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3059 = 1.0 / cbSceneParam._m0[80u].x;
            float _3060 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3061 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            _3099 = ((abs(_2936 / _2925) * cbSceneParam._m0[80u].y) * ((((_3070 - _3071) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))))) * _3059)) - ((exp2(_2946 * _3070) - exp2(_2946 * _3071)) * _3059))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3101 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, 1.0), 0.0);
        float _3110 = exp2((_3099 * (-1.44269502162933349609375)) * (1.0 - _3101.w));
        float _3111 = log2(_3110);
        float _3127 = log2(_2877);
        _2948 = (exp2(_3127 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].x)) * _3101.x) / cbSceneParam._m0[78u].x)) + _2874;
        _2950 = (exp2(_3127 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].y)) * _3101.y) / cbSceneParam._m0[78u].y)) + _2875;
        _2952 = (exp2(_3127 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].z)) * _3101.z) / cbSceneParam._m0[78u].z)) + _2876;
        _2954 = _3110 * _2877;
    }
    else
    {
        _2948 = _2874;
        _2950 = _2875;
        _2952 = _2876;
        _2954 = _2877;
    }
    float _2966 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2967 = _2966 == 3.0;
    float _2968 = log2(_2954);
    float _2975 = exp2(_2968 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0)));
    float _2976 = exp2(_2968 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)));
    float _2977 = exp2(_2968 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0)));
    float _2986 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2986 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.y = _2986 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.z = _2986 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.w = _2852;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2852;
}


