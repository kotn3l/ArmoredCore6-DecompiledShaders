#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _876;
float _3267;
float _3268;
float _3269;
float _3270;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_V_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.w;
    float _240 = _233.x * cbMtdParam._m0[9u].x;
    float _241 = _233.y * cbMtdParam._m0[9u].y;
    float _242 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(M_AMSN_V_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3279 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))));
    float _278 = fma(_275, _211, fma(_268, _203 * TANGENT.x, (_189 * _182) * _266));
    float _281 = fma(_275, _212, fma(_268, _203 * TANGENT.y, (_189 * _183) * _266));
    float _284 = fma(_275, _213, fma(_268, _203 * TANGENT.z, (_189 * _184) * _266));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3290 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _292 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3312 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3323 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3334 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _296 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _312 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _353 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _363 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _353);
    float _364 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _353);
    float _365 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _353);
    float _369 = inversesqrt(dot(vec3(_363, _364, _365), vec3(_363, _364, _365)));
    float _370 = _363 * _369;
    float _371 = _364 * _369;
    float _372 = _365 * _369;
    vec4 _377 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _379 = _377.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _555 = sqrt(((_363 * _363) + (_364 * _364)) + (_365 * _365));
        float _561 = (cbMatDynParam._m0[5u].x * _555) + cbMatDynParam._m0[5u].y;
        float _3345 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        float _562 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _566 = (cbMatDynParam._m0[5u].z * _555) + cbMatDynParam._m0[5u].w;
        float _3356 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) - _562)) + _562) < ((_379 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _412 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _415 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _418 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = _431 + 9u;
    uint _434 = _433 + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3367 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _446 = 1.0 - _296;
    float _447 = _443 * _446;
    float _448 = _444 * _446;
    float _449 = _445 * _446;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _296;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _296;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _296;
    float _457 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _472 = _469.x * TEXCOORD.z;
    float _473 = dot(vec3(_289, _290, _291), vec3(_370, _371, _372));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _289) - _370;
    float _481 = (_476 * _290) - _371;
    float _482 = (_476 * _291) - _372;
    float _486 = abs(dot(vec3(_370, _371, _372), vec3(_289, _290, _291)));
    float _3400 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_292);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _507 = (1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _508 = _501 * _488;
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _875;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _600 = fma(_544, cbModelParam._m0[26u].z, fma(_540, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536));
        float _604 = fma(_544, cbModelParam._m0[27u].z, fma(_540, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536));
        float _608 = fma(_544, cbModelParam._m0[28u].z, fma(_540, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536));
        float _633 = _536 + _289;
        float _634 = _540 + _290;
        float _635 = _544 + _291;
        float _645 = fma(_635, cbModelParam._m0[26u].z, fma(_634, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _633)) - _600;
        float _646 = fma(_635, cbModelParam._m0[27u].z, fma(_634, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _633)) - _604;
        float _647 = fma(_635, cbModelParam._m0[28u].z, fma(_634, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _633)) - _608;
        float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
        float _664 = ((_651 * _645) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_600 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_651 * _646) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_604 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_651 * _647) / cbModelParam._m0[34u].z) + ((((((_608 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        float _703 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_669.x + (-0.5));
        float _705 = _703 * (_669.y + (-0.5));
        float _706 = _703 * (_669.z + (-0.5));
        float _713 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_676.x + (-0.5));
        float _715 = _713 * (_676.y + (-0.5));
        float _716 = _713 * (_676.z + (-0.5));
        float _723 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_683.x + (-0.5));
        float _725 = _723 * (_683.y + (-0.5));
        float _726 = _723 * (_683.z + (-0.5));
        float _733 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_690.x + (-0.5));
        float _735 = _733 * (_690.y + (-0.5));
        float _736 = _733 * (_690.z + (-0.5));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = _704 * 0.5;
        float _741 = _714 * 0.5;
        float _742 = _724 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _757 = (dot(vec3(_289, _290, _291), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _767 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3448 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_769 + 1.0))) + _774) * _737;
        float _784 = _705 * 0.5;
        float _785 = _715 * 0.5;
        float _786 = _725 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_289, _290, _291), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3481 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_811 + 1.0))) + _816) * _738;
        float _826 = _706 * 0.5;
        float _827 = _716 * 0.5;
        float _828 = _726 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _842 = (dot(vec3(_289, _290, _291), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _851 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3514 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_853 + 1.0))) + _858) * _739;
        _875 = _706;
        _877 = _705;
        _878 = _704;
        _879 = _716;
        _880 = _715;
        _881 = _714;
        _882 = _726;
        _883 = _725;
        _884 = _724;
        _885 = _739;
        _886 = _738;
        _887 = _737;
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
    }
    else
    {
        _875 = _876;
        _877 = _876;
        _878 = _876;
        _879 = _876;
        _880 = _876;
        _881 = _876;
        _882 = _876;
        _883 = _876;
        _884 = _876;
        _885 = _876;
        _886 = _876;
        _887 = _876;
        _888 = 0.0;
        _889 = 0.0;
        _890 = 0.0;
    }
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _919 = fma(_544, cbModelParam._m0[30u].z, fma(_540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _536));
        float _923 = fma(_544, cbModelParam._m0[31u].z, fma(_540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _536));
        float _927 = fma(_544, cbModelParam._m0[32u].z, fma(_540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _536));
        float _950 = _536 + _289;
        float _951 = _540 + _290;
        float _952 = _544 + _291;
        float _962 = fma(_952, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950)) - _919;
        float _963 = fma(_952, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950)) - _923;
        float _964 = fma(_952, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950)) - _927;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_919 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_923 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[35u].z) + ((((((_927 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1018 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_985.x + (-0.5));
        float _1020 = _1018 * (_985.y + (-0.5));
        float _1021 = _1018 * (_985.z + (-0.5));
        float _1028 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_992.x + (-0.5));
        float _1030 = _1028 * (_992.y + (-0.5));
        float _1031 = _1028 * (_992.z + (-0.5));
        float _1038 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_999.x + (-0.5));
        float _1040 = _1038 * (_999.y + (-0.5));
        float _1041 = _1038 * (_999.z + (-0.5));
        float _1048 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1006.x + (-0.5));
        float _1050 = _1048 * (_1006.y + (-0.5));
        float _1051 = _1048 * (_1006.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_289, _290, _291), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3577 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1082 + 1.0))) + _1087) * _1052;
        float _1097 = _1020 * 0.5;
        float _1098 = _1030 * 0.5;
        float _1099 = _1040 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_289, _290, _291), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3610 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1124 + 1.0))) + _1129) * _1053;
        float _1139 = _1021 * 0.5;
        float _1140 = _1031 * 0.5;
        float _1141 = _1041 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_289, _290, _291), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3643 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1166 + 1.0))) + _1171) * _1054;
        _1188 = _1021;
        _1189 = _1020;
        _1190 = _1019;
        _1191 = _1031;
        _1192 = _1030;
        _1193 = _1029;
        _1194 = _1041;
        _1195 = _1040;
        _1196 = _1039;
        _1197 = _1054;
        _1198 = _1053;
        _1199 = _1052;
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _876;
        _1189 = _876;
        _1190 = _876;
        _1191 = _876;
        _1192 = _876;
        _1193 = _876;
        _1194 = _876;
        _1195 = _876;
        _1196 = _876;
        _1197 = _876;
        _1198 = _876;
        _1199 = _876;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _888)) + _888;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1235 = fma(_1214, cbSceneParam._m0[89u].z, fma(_1213, cbSceneParam._m0[89u].y, _1212 * cbSceneParam._m0[89u].x));
    float _1238 = fma(_1214, cbSceneParam._m0[90u].z, fma(_1213, cbSceneParam._m0[90u].y, _1212 * cbSceneParam._m0[90u].x));
    float _1241 = fma(_1214, cbSceneParam._m0[91u].z, fma(_1213, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1212));
    float _1256 = _480 * 0.5;
    float _1257 = _481 * 0.5;
    float _1258 = _482 * 0.5;
    float _1259 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1262 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1265 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1299;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1272 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_875, _879, _882, _885));
        float _1276 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_877, _880, _883, _886));
        float _1280 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_878, _881, _884, _887));
        float _1287 = dot(vec4(cbModelParam._m0[39u]), vec4(_1256, _1257, _1258, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1310;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1301 = dot(vec4(cbModelParam._m0[40u]), vec4(_1256, _1257, _1258, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1314 = (_1310 * cbModelParam._m0[1u].x) + (_1299 * (1.0 - cbModelParam._m0[1u].x));
    float _1324 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _292);
    float _1325 = isnan(_1324) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1324 : min(cbModelParam._m0[25u].z, _1324));
    float _1407;
    float _1409;
    float _1411;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1374 = fma(_544, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536)) + cbModelParam._m0[13u].w;
        float _1378 = fma(_544, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536)) + cbModelParam._m0[14u].w;
        float _1382 = fma(_544, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536)) + cbModelParam._m0[15u].w;
        float _1385 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1388 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1391 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1419;
        if (_1385 > 0.0)
        {
            _1419 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1419 = frontier_phi_19_17_ladder;
        }
        float _1627;
        if (_1388 > 0.0)
        {
            _1627 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1627 = frontier_phi_28_24_ladder;
        }
        float _1881;
        if (_1391 > 0.0)
        {
            _1881 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1881 = frontier_phi_40_35_ladder;
        }
        float _1883 = isnan(_1627) ? _1419 : (isnan(_1419) ? _1627 : min(_1419, _1627));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1385) + _1374;
        float _1889 = (_1884 * _1388) + _1378;
        float _1890 = (_1884 * _1391) + _1382;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1891;
        float _1895 = _1891 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 > _1895) || ((_1889 < _1893) || ((_1888 < _1893) || (_1888 > _1895))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1325);
            frontier_phi_18_40_ladder = _2018.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2018.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2018.x * cbModelParam._m0[1u].y;
        }
        _1407 = frontier_phi_18_40_ladder_2;
        _1409 = frontier_phi_18_40_ladder_1;
        _1411 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1325);
        _1407 = _1395.x * cbModelParam._m0[1u].y;
        _1409 = _1395.y * cbModelParam._m0[1u].y;
        _1411 = _1395.z * cbModelParam._m0[1u].y;
    }
    float _1415 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _292);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1415 : min(cbModelParam._m0[25u].w, _1415));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1473 = fma(_544, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536)) + cbModelParam._m0[21u].w;
        float _1477 = fma(_544, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536)) + cbModelParam._m0[22u].w;
        float _1481 = fma(_544, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536)) + cbModelParam._m0[23u].w;
        float _1484 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1487 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1490 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1632;
        if (_1484 > 0.0)
        {
            _1632 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1632 = frontier_phi_30_26_ladder;
        }
        float _1908;
        if (_1487 > 0.0)
        {
            _1908 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1908 = frontier_phi_42_37_ladder;
        }
        float _2121;
        if (_1490 > 0.0)
        {
            _2121 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2121 = frontier_phi_51_48_ladder;
        }
        float _2123 = isnan(_1908) ? _1632 : (isnan(_1632) ? _1908 : min(_1632, _1908));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1484) + _1473;
        float _2129 = (_2124 * _1487) + _1477;
        float _2130 = (_2124 * _1490) + _1481;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2131;
        float _2134 = _2131 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2130 > _2134) || ((_2130 < _2132) || ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 < _2132) || (_2128 > _2134))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2130, cbModelParam._m0[17u].z, fma(_2129, cbModelParam._m0[17u].y, _2128 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2130, cbModelParam._m0[18u].z, fma(_2129, cbModelParam._m0[18u].y, _2128 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2130, cbModelParam._m0[19u].z, fma(_2129, cbModelParam._m0[19u].y, _2128 * cbModelParam._m0[19u].x))), _1416);
            frontier_phi_27_51_ladder = _2328.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2328.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2328.x * cbModelParam._m0[1u].z;
        }
        _1509 = frontier_phi_27_51_ladder_2;
        _1511 = frontier_phi_27_51_ladder_1;
        _1513 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1416);
        _1509 = _1493.x * cbModelParam._m0[1u].z;
        _1511 = _1493.y * cbModelParam._m0[1u].z;
        _1513 = _1493.z * cbModelParam._m0[1u].z;
    }
    float _1526 = (((_507 * _457) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1509 - _1407)) + _1407);
    float _1528 = (((_507 * _459) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1511 - _1409)) + _1409);
    float _1530 = (((_507 * _460) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1533 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, _1526 * cbSceneParam._m0[91u].x));
    uvec4 _1549 = floatBitsToUint(cbInstanceData._m0[_431 + 5u]);
    uint _1551 = _1549.x * 14u;
    uint _1552 = _1551 + 13u;
    float _1559 = _472 + (-1.0);
    float _1564 = (cbLight._m0[_1552].x * _1559) + 1.0;
    float _1565 = (cbLight._m0[_1552].y * _1559) + 1.0;
    float _1566 = (cbLight._m0[_1552].z * _1559) + 1.0;
    float _1567 = (cbLight._m0[_1552].w * _1559) + 1.0;
    uint _1568 = _1551 + 5u;
    float _1574 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1578 = _1551 + 4u;
    float _1585 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1589 = _1551 | 1u;
    float _1600 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_289, _290, _291));
    float _1603 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_289, _290, _291));
    float _3779 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _3790 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1608 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1610 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1617 = ((cbLight._m0[_1568].x * _1574) * _1610) + ((cbLight._m0[_1578].x * _1585) * _1608);
    float _1618 = ((_1574 * cbLight._m0[_1568].y) * _1610) + ((_1585 * cbLight._m0[_1578].y) * _1608);
    float _1619 = ((_1574 * cbLight._m0[_1568].z) * _1610) + ((_1585 * cbLight._m0[_1578].z) * _1608);
    uvec4 _1624 = floatBitsToUint(cbLight._m0[_1551 + 12u]);
    bool _1626 = _1624.x == 0u;
    float _1637;
    float _1639;
    float _1641;
    if (_1626)
    {
        _1637 = _1617;
        _1639 = _1618;
        _1641 = _1619;
    }
    else
    {
        uint _1645 = _1551 + 6u;
        float _1661 = (dot(vec3(cbLight._m0[_1551 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1662 = _1661 * _1661;
        float _3801 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1664 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1637 = (((cbLight._m0[_1645].x * 0.3183098733425140380859375) * _1663) * _1664) + _1617;
        _1639 = (((cbLight._m0[_1645].y * 0.3183098733425140380859375) * _1663) * _1664) + _1618;
        _1641 = (((cbLight._m0[_1645].z * 0.3183098733425140380859375) * _1663) * _1664) + _1619;
    }
    bool _1644 = _1624.y == 0u;
    float _1682;
    float _1684;
    float _1686;
    if (_1644)
    {
        _1682 = _1637;
        _1684 = _1639;
        _1686 = _1641;
    }
    else
    {
        uint _1852 = _1551 + 7u;
        float _1868 = (dot(vec3(cbLight._m0[_1551 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1869 = _1868 * _1868;
        float _3817 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1871 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1682 = (((cbLight._m0[_1852].x * 0.3183098733425140380859375) * _1870) * _1871) + _1637;
        _1684 = (((cbLight._m0[_1852].y * 0.3183098733425140380859375) * _1870) * _1871) + _1639;
        _1686 = (((cbLight._m0[_1852].z * 0.3183098733425140380859375) * _1870) * _1871) + _1641;
    }
    uint _1689 = _1551 + 8u;
    float _1702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _292) * 0.949999988079071044921875);
    float _1703 = _1702 * _1702;
    float _1704 = cbLight._m0[_1551].x + _370;
    float _1705 = cbLight._m0[_1551].y + _371;
    float _1706 = cbLight._m0[_1551].z + _372;
    float _1710 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
    float _1711 = _1710 * _1704;
    float _1712 = _1710 * _1705;
    float _1713 = _1710 * _1706;
    float _1714 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1551].xyz));
    float _3833 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _1718 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1719 = dot(vec3(_289, _290, _291), vec3(_1711, _1712, _1713));
    float _3855 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1723 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1711, _1712, _1713));
    float _3866 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1727 = _1703 * _1703;
    float _1731 = ((_1722 * _1722) * (_1727 + (-1.0))) + 1.0;
    float _1739 = exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0);
    float _1740 = 0.959999978542327880859375 - _454;
    float _1742 = 0.959999978542327880859375 - _455;
    float _1743 = 0.959999978542327880859375 - _456;
    float _1750 = 1.0 - _1703;
    float _1761 = (0.5 / (((_1718 * ((_1717 * _1750) + _1703)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1750) + _1703) * _1717))) * _1717;
    float _3877 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1763 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1727 / ((_1731 * _1731) * 3.141590118408203125));
    uint _1774 = _1551 + 9u;
    float _1785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _292) * 0.949999988079071044921875);
    float _1786 = _1785 * _1785;
    float _1787 = cbLight._m0[_1589].x + _370;
    float _1788 = cbLight._m0[_1589].y + _371;
    float _1789 = cbLight._m0[_1589].z + _372;
    float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
    float _1794 = _1793 * _1787;
    float _1795 = _1793 * _1788;
    float _1796 = _1793 * _1789;
    float _1797 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1589].xyz));
    float _3888 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1801 = dot(vec3(_289, _290, _291), vec3(_1794, _1795, _1796));
    float _3899 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1794, _1795, _1796));
    float _3910 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1809 = _1786 * _1786;
    float _1813 = ((_1804 * _1804) * (_1809 + (-1.0))) + 1.0;
    float _1820 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
    float _1827 = 1.0 - _1786;
    float _1837 = (0.5 / (((_1718 * ((_1800 * _1827) + _1786)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1827) + _1786) * _1800))) * _1800;
    float _3921 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1809 / ((_1813 * _1813) * 3.141590118408203125));
    float _1849 = (((((_1820 * _1740) + _457) * cbLight._m0[_1774].x) * _1839) * _1574) + (((((_1739 * _1740) + _457) * cbLight._m0[_1689].x) * _1763) * _1585);
    float _1850 = (((((_1820 * _1742) + _459) * cbLight._m0[_1774].y) * _1839) * _1574) + (((((_1739 * _1742) + _459) * cbLight._m0[_1689].y) * _1763) * _1585);
    float _1851 = (((((_1820 * _1743) + _460) * cbLight._m0[_1774].z) * _1839) * _1574) + (((((_1739 * _1743) + _460) * cbLight._m0[_1689].z) * _1763) * _1585);
    float _1913;
    float _1915;
    float _1917;
    if (_1626)
    {
        _1913 = _1849;
        _1915 = _1850;
        _1917 = _1851;
    }
    else
    {
        uint _1919 = _1551 + 2u;
        uint _1923 = _1551 + 10u;
        float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _292) * 0.949999988079071044921875);
        float _1938 = _1937 * _1937;
        float _1939 = cbLight._m0[_1919].x + _370;
        float _1940 = cbLight._m0[_1919].y + _371;
        float _1941 = cbLight._m0[_1919].z + _372;
        float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
        float _1946 = _1945 * _1939;
        float _1947 = _1945 * _1940;
        float _1948 = _1945 * _1941;
        float _1949 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1919].xyz));
        float _3932 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1952 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1953 = dot(vec3(_289, _290, _291), vec3(_1946, _1947, _1948));
        float _3943 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1956 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1957 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_1946, _1947, _1948));
        float _3954 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1961 = _1938 * _1938;
        float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
        float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
        float _1979 = 1.0 - _1938;
        float _1989 = (0.5 / (((_1718 * ((_1952 * _1979) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1979) + _1938) * _1952))) * _1952;
        float _3965 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1991 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
        float _1992 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1913 = (((((_1972 * _1740) + _457) * cbLight._m0[_1923].x) * _1991) * _1992) + _1849;
        _1915 = (((((_1972 * _1742) + _459) * cbLight._m0[_1923].y) * _1991) * _1992) + _1850;
        _1917 = (((((_1972 * _1743) + _460) * cbLight._m0[_1923].z) * _1991) * _1992) + _1851;
    }
    float _2027;
    float _2029;
    float _2031;
    if (_1644)
    {
        _2027 = _1913;
        _2029 = _1915;
        _2031 = _1917;
    }
    else
    {
        uint _2038 = _1551 + 3u;
        uint _2042 = _1551 + 11u;
        float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _292) * 0.949999988079071044921875);
        float _2057 = _2056 * _2056;
        float _2058 = cbLight._m0[_2038].x + _370;
        float _2059 = cbLight._m0[_2038].y + _371;
        float _2060 = cbLight._m0[_2038].z + _372;
        float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
        float _2065 = _2064 * _2058;
        float _2066 = _2064 * _2059;
        float _2067 = _2064 * _2060;
        float _2068 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2038].xyz));
        float _3981 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2071 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2072 = dot(vec3(_289, _290, _291), vec3(_2065, _2066, _2067));
        float _3992 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2076 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2065, _2066, _2067));
        float _4003 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2080 = _2057 * _2057;
        float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
        float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0);
        float _2098 = 1.0 - _2057;
        float _2108 = (0.5 / (((_1718 * ((_2071 * _2098) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _2098) + _2057) * _2071))) * _2071;
        float _4014 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2110 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
        float _2111 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _2027 = (((((_2091 * _1740) + _457) * cbLight._m0[_2042].x) * _2110) * _2111) + _1913;
        _2029 = (((((_2091 * _1742) + _459) * cbLight._m0[_2042].y) * _2110) * _2111) + _1915;
        _2031 = (((((_2091 * _1743) + _460) * cbLight._m0[_2042].z) * _2110) * _2111) + _1917;
    }
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    if (_1549.y == 0u)
    {
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2186;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2186;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2186;
        uvec4 _2201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2202 = _2201.x;
        uint _2213 = uint((float(_2201.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2202))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2202)));
        float _2223 = (log2(_2189 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2224 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        uint _2227 = uint(isnan(14.0) ? _2224 : (isnan(_2224) ? 14.0 : min(_2224, 14.0)));
        uvec4 _2232 = texelFetch(g_lightClusterGridBuffer, int(((_2227 << 2u) + (_2213 << 6u)) >> 2u));
        uint _2233 = _2232.x;
        uint _2234 = _2201.z;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((((1u << ((_2234 >> 4u) & 15u)) + 4294967295u) & _2233) == 0u) || ((_2234 & 240u) == 0u))
        {
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
        }
        else
        {
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            uint _2491 = 0u;
            uint _2500;
            bool _2501;
            for (;;)
            {
                _2500 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2491 << 2u)) >> 2u)).x;
                _2501 = _2500 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2501)
                {
                    frontier_phi_68_pred = _2487;
                    frontier_phi_68_pred_1 = _2490;
                    frontier_phi_68_pred_2 = _2489;
                    frontier_phi_68_pred_3 = _2488;
                    frontier_phi_68_pred_4 = _2486;
                    frontier_phi_68_pred_5 = _2485;
                }
                else
                {
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    uint _2636;
                    _2630 = _2485;
                    _2631 = _2486;
                    _2632 = _2487;
                    _2633 = _2488;
                    _2634 = _2489;
                    _2635 = _2490;
                    _2636 = _2500;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2640 = uint(findLSB(_2636)) + (_2491 << 5u);
                        uint _2637 = (_2636 + 4294967295u) & _2636;
                        uint _2642 = _2640 * 48u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2662 = (_2640 * 48u) + 4u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2681 = (_2640 * 48u) + 8u;
                        vec3 _2692 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x));
                        float _2696 = _2656.x - _2187;
                        float _2697 = _2656.y - _2188;
                        float _2698 = _2656.z - _2189;
                        float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                        float _2702 = inversesqrt(_2699);
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2706 = dot(vec3(_412, _415, _418), vec3(_2703, _2704, _2705));
                        float _2711 = 1.0 - (_2699 * _2656.w);
                        float _4040 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2712 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2713 = sqrt(_2699) * _2675.w;
                        float _2716 = 1.39999997615814208984375 / (_2713 + 1.39999997615814208984375);
                        float _2717 = _2716 * _2716;
                        float _2720 = ((1.0 - _2717) * _2706) + _2717;
                        float _2723 = _2713 * _2713;
                        float _2727 = ((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2712) / ((_2723 * 0.699999988079071044921875) + 1.0);
                        float _2731 = (-0.0) - _2187;
                        float _2732 = (-0.0) - _2188;
                        float _2733 = (-0.0) - _2189;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2748 = exp2(log2(1.0 / ((_2723 * 3.5) + 5.0)) * 0.25);
                        float _2749 = 1.0 - _488;
                        float _2756 = sqrt(1.0 - ((1.0 - (_2749 * _2749)) * (1.0 - (_2748 * _2748))));
                        float _2757 = _2756 * _2756;
                        float _2758 = _2757 * _2757;
                        float _2759 = _2738 + _2703;
                        float _2760 = _2739 + _2704;
                        float _2761 = _2740 + _2705;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2769 = dot(vec3(_412, _415, _418), vec3(_2738, _2739, _2740));
                        float _4056 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2772 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2773 = dot(vec3(_412, _415, _418), vec3(_2765 * _2759, _2765 * _2760, _2765 * _2761));
                        float _4067 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2780 = ((_2776 * _2776) * (_2758 + (-1.0))) + 1.0;
                        float _2781 = _2716 * _2757;
                        float _2782 = _2781 * _2781;
                        float _2785 = ((1.0 - _2782) * _2706) + _2782;
                        float _4078 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2787 = 1.0 - _2757;
                        float _2797 = (0.5 / (((_2786 * ((_2772 * _2787) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2787) + _2757) * _2772))) * _2786;
                        float _4089 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2808 = (((_2758 * 3.1415927410125732421875) * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) / ((_2780 * _2780) * ((_2723 * 2.1991131305694580078125) + 3.141590118408203125))) * _2712;
                        _2560 = (_2727 * _2675.x) + _2633;
                        _2561 = (_2727 * _2675.y) + _2634;
                        _2562 = (_2727 * _2675.z) + _2635;
                        _2557 = (_2808 * _2692.x) + _2630;
                        _2558 = (_2808 * _2692.y) + _2631;
                        _2559 = (_2808 * _2692.z) + _2632;
                        if (_2637 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2630 = _2557;
                            _2631 = _2558;
                            _2632 = _2559;
                            _2633 = _2560;
                            _2634 = _2561;
                            _2635 = _2562;
                            _2636 = _2637;
                        }
                    }
                    frontier_phi_68_pred = _2559;
                    frontier_phi_68_pred_1 = _2562;
                    frontier_phi_68_pred_2 = _2561;
                    frontier_phi_68_pred_3 = _2560;
                    frontier_phi_68_pred_4 = _2558;
                    frontier_phi_68_pred_5 = _2557;
                }
                _2338 = frontier_phi_68_pred;
                _2344 = frontier_phi_68_pred_1;
                _2342 = frontier_phi_68_pred_2;
                _2340 = frontier_phi_68_pred_3;
                _2336 = frontier_phi_68_pred_4;
                _2334 = frontier_phi_68_pred_5;
                uint _2492 = _2491 + 1u;
                if (_2492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2485 = _2334;
                    _2486 = _2336;
                    _2487 = _2338;
                    _2488 = _2340;
                    _2489 = _2342;
                    _2490 = _2344;
                    _2491 = _2492;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
        }
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.z;
        uint _2350 = (_2348 >> 8u) & 15u;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        if (((4294967295u << _2350) & _2233) == 0u)
        {
            _2453 = _2333;
            _2455 = _2335;
            _2457 = _2337;
            _2459 = _2339;
            _2461 = _2341;
            _2463 = _2343;
        }
        else
        {
            float _2478 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
            float _2479 = _2478 * _2187;
            float _2480 = _2478 * _2188;
            float _2481 = _2478 * _2189;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2350 < ((_2348 >> 12u) & 15u))
            {
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2464;
                float _2613 = _2333;
                float _2614 = _2335;
                float _2615 = _2337;
                float _2616 = _2339;
                float _2617 = _2341;
                float _2618 = _2343;
                uint _2619 = _2350;
                uint _2628;
                bool _2629;
                for (;;)
                {
                    _2628 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                    _2629 = _2628 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2629)
                    {
                        frontier_phi_79_pred = _2618;
                        frontier_phi_79_pred_1 = _2617;
                        frontier_phi_79_pred_2 = _2616;
                        frontier_phi_79_pred_3 = _2615;
                        frontier_phi_79_pred_4 = _2614;
                        frontier_phi_79_pred_5 = _2613;
                    }
                    else
                    {
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _2835 = _2613;
                        float _2836 = _2614;
                        float _2837 = _2615;
                        float _2838 = _2616;
                        float _2839 = _2617;
                        float _2840 = _2618;
                        uint _2841 = _2628;
                        uint _2842;
                        vec4 _2867;
                        float _2868;
                        vec4 _2883;
                        vec3 _2895;
                        vec4 _2911;
                        vec4 _2927;
                        float _2974;
                        bool _2975;
                        for (;;)
                        {
                            uint _2852 = ((_2619 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2841));
                            _2842 = (_2841 + 4294967295u) & _2841;
                            uint _2854 = _2852 * 40u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            _2868 = _2867.w;
                            uint _2870 = (_2852 * 40u) + 4u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2885 = (_2852 * 40u) + 8u;
                            _2895 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x));
                            uint _2898 = (_2852 * 40u) + 16u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2914 = (_2852 * 40u) + 20u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2930 = (_2852 * 40u) + 24u;
                            vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2949 = (_2852 * 40u) + 28u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2974 = fma(_2189, _2962.z, fma(_2188, _2962.y, _2962.x * _2187)) + _2962.w;
                            _2975 = !((fma(_2189, _2943.z, fma(_2188, _2943.y, _2943.x * _2187)) + _2943.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2975)
                            {
                                float _3002 = _2867.x - _2187;
                                float _3003 = _2867.y - _2188;
                                float _3004 = _2867.z - _2189;
                                float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                                float _3008 = inversesqrt(_3005);
                                float _3009 = _3008 * _3002;
                                float _3010 = _3008 * _3003;
                                float _3011 = _3008 * _3004;
                                float _3015 = 1.0 - (_3005 / (_2868 * _2868));
                                float _4100 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3020 = sqrt(_3005) * _2883.w;
                                float _3022 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                                float _3023 = _3022 * _3022;
                                float _3026 = ((1.0 - _3023) * dot(vec3(_3009, _3010, _3011), vec3(_412, _415, _418))) + _3023;
                                float _3029 = _3020 * _3020;
                                float _3033 = (fma(_2189, _2911.z, fma(_2188, _2911.y, _2911.x * _2187)) + _2911.w) / _2974;
                                float _3034 = (fma(_2189, _2927.z, fma(_2188, _2927.y, _2927.x * _2187)) + _2927.w) / _2974;
                                float _3038 = 1.0 - dot(vec2(_3033, _3034), vec2(_3033, _3034));
                                float _4116 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3040 = _3039 * (((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3016) / ((_3029 * 0.699999988079071044921875) + 1.0));
                                float _3052 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                                float _3053 = 1.0 - _488;
                                float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                                float _3061 = _3060 * _3060;
                                float _3062 = _3061 * _3061;
                                float _3063 = _3009 - _2479;
                                float _3064 = _3010 - _2480;
                                float _3065 = _3011 - _2481;
                                float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                                float _3073 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2479, (-0.0) - _2480, (-0.0) - _2481));
                                float _4127 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3076 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3077 = dot(vec3(_412, _415, _418), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                                float _4138 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                                float _3085 = _3022 * _3061;
                                float _3086 = _3085 * _3085;
                                float _3092 = ((1.0 - _3086) * dot(vec3(_412, _415, _418), vec3(_3009, _3010, _3011))) + _3086;
                                float _4149 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3094 = 1.0 - _3061;
                                float _3104 = (0.5 / (((_3093 * ((_3076 * _3094) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3061) * _3076))) * _3093;
                                float _4160 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3114 = (_3039 * _3016) * (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_3084 * _3084) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3040 * _2883.z;
                                frontier_phi_85_pred_1 = _3040 * _2883.y;
                                frontier_phi_85_pred_2 = _3040 * _2883.x;
                                frontier_phi_85_pred_3 = _3114 * _2895.z;
                                frontier_phi_85_pred_4 = _3114 * _2895.y;
                                frontier_phi_85_pred_5 = _3114 * _2895.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3123 = frontier_phi_85_pred;
                            _3122 = frontier_phi_85_pred_1;
                            _3121 = frontier_phi_85_pred_2;
                            _3120 = frontier_phi_85_pred_3;
                            _3119 = frontier_phi_85_pred_4;
                            _3118 = frontier_phi_85_pred_5;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            if (_2842 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2842;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2827;
                        frontier_phi_79_pred_1 = _2826;
                        frontier_phi_79_pred_2 = _2825;
                        frontier_phi_79_pred_3 = _2824;
                        frontier_phi_79_pred_4 = _2823;
                        frontier_phi_79_pred_5 = _2822;
                    }
                    _2464 = frontier_phi_79_pred;
                    _2462 = frontier_phi_79_pred_1;
                    _2460 = frontier_phi_79_pred_2;
                    _2458 = frontier_phi_79_pred_3;
                    _2456 = frontier_phi_79_pred_4;
                    _2454 = frontier_phi_79_pred_5;
                    uint _2620 = _2619 + 1u;
                    if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2613 = _2454;
                        _2614 = _2456;
                        _2615 = _2458;
                        _2616 = _2460;
                        _2617 = _2462;
                        _2618 = _2464;
                        _2619 = _2620;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2460;
                frontier_phi_60_61_ladder_1 = _2464;
                frontier_phi_60_61_ladder_2 = _2462;
                frontier_phi_60_61_ladder_3 = _2458;
                frontier_phi_60_61_ladder_4 = _2456;
                frontier_phi_60_61_ladder_5 = _2454;
            }
            else
            {
                frontier_phi_60_61_ladder = _2339;
                frontier_phi_60_61_ladder_1 = _2343;
                frontier_phi_60_61_ladder_2 = _2341;
                frontier_phi_60_61_ladder_3 = _2337;
                frontier_phi_60_61_ladder_4 = _2335;
                frontier_phi_60_61_ladder_5 = _2333;
            }
            _2453 = frontier_phi_60_61_ladder_5;
            _2455 = frontier_phi_60_61_ladder_4;
            _2457 = frontier_phi_60_61_ladder_3;
            _2459 = frontier_phi_60_61_ladder;
            _2461 = frontier_phi_60_61_ladder_2;
            _2463 = frontier_phi_60_61_ladder_1;
        }
        float _2468 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2245 = (_2468 * _2459) + _1682;
        _2247 = (_2468 * _2461) + _1684;
        _2249 = (_2468 * _2463) + _1686;
        _2251 = ((_2453 * _457) * _2468) + _2027;
        _2253 = ((_2455 * _459) * _2468) + _2029;
        _2255 = ((_2457 * _460) * _2468) + _2031;
    }
    else
    {
        _2245 = _1682;
        _2247 = _1684;
        _2249 = _1686;
        _2251 = _2027;
        _2253 = _2029;
        _2255 = _2031;
    }
    float _4176 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4187 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4198 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _2272 = ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2245 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _472))) + ((_2251 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1314)) * cbPerFrame._m0[3u].x);
    float _2273 = ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2247 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _472))) + ((_2253 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1314)) * cbPerFrame._m0[3u].x);
    float _2274 = ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2249 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _472))) + ((_2255 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1314)) * cbPerFrame._m0[3u].x);
    uint _2275 = _431 + 6u;
    float _2283 = _391 / cbSceneParam._m0[86u].x;
    float _2284 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, (log2((isnan(cbSceneParam._m0[77u].w) ? _312 : (isnan(_312) ? cbSceneParam._m0[77u].w : min(_312, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2300 = _2298.x;
    float _2301 = _2298.y;
    float _2302 = _2298.z;
    float _2303 = _2298.w;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    if (_312 > cbSceneParam._m0[78u].w)
    {
        float _2358 = isnan(_312) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _312 : min(cbSceneParam._m0[80u].w, _312));
        float _2359 = _2358 / _312;
        float _2370 = _2359 * _363;
        float _2371 = _364 * _2359;
        float _2372 = (-0.0) - _2371;
        float _2373 = _2359 * _365;
        float _2375 = (cbSceneParam._m0[77u].w * _2372) / _2358;
        float _2376 = _2375 + cbSceneParam._m0[79u].w;
        float _2377 = cbSceneParam._m0[79u].w - _2371;
        float _2383 = sqrt(((_2370 * _2370) + (_2371 * _2371)) + (_2373 * _2373));
        float _2386 = (1.0 - (cbSceneParam._m0[77u].w / _2358)) * _2383;
        float _2391 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2393 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2570;
        if (abs((_2372 - _2375) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2570 = ((((_2376 > 0.0) ? exp2(_2391 * _2376) : (2.0 - exp2(_2393 * _2376))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2386;
        }
        else
        {
            float _2514 = 1.0 / cbSceneParam._m0[80u].x;
            float _2515 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : max(_2376, _2377));
            float _2516 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : min(_2376, _2377));
            float _2525 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : min(_2515, 0.0));
            float _2526 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : min(_2516, 0.0));
            _2570 = ((abs(_2383 / _2372) * cbSceneParam._m0[80u].y) * ((((_2525 - _2526) * 2.0) - ((exp2(_2391 * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0)))) - exp2(_2391 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0))))) * _2514)) - ((exp2(_2393 * _2525) - exp2(_2393 * _2526)) * _2514))) + (_2386 * cbSceneParam._m0[80u].z);
        }
        vec4 _2572 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, 1.0), 0.0);
        float _2581 = exp2((_2570 * (-1.44269502162933349609375)) * (1.0 - _2572.w));
        float _2582 = log2(_2581);
        float _2598 = log2(_2303);
        _2395 = (exp2(_2598 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].x)) * _2572.x) / cbSceneParam._m0[78u].x)) + _2300;
        _2397 = (exp2(_2598 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].y)) * _2572.y) / cbSceneParam._m0[78u].y)) + _2301;
        _2399 = (exp2(_2598 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].z)) * _2572.z) / cbSceneParam._m0[78u].z)) + _2302;
        _2401 = _2581 * _2303;
    }
    else
    {
        _2395 = _2300;
        _2397 = _2301;
        _2399 = _2302;
        _2401 = _2303;
    }
    bool _2608;
    vec4 _2411;
    vec4 _2433;
    float _2435;
    float _2439;
    float _2440;
    float _2441;
    float _2442;
    bool _2452;
    for (;;)
    {
        _2411 = cbMatDynParam._m0[0u];
        float _2413 = roundEven(_2411.y);
        bool _2414 = _2413 == 3.0;
        float _2415 = log2(_2401);
        float _2422 = exp2(_2415 * cbSceneParam._m0[78u].x) * _2272;
        float _2423 = exp2(_2415 * cbSceneParam._m0[78u].y) * _2273;
        float _2424 = exp2(_2415 * cbSceneParam._m0[78u].z) * _2274;
        float _2431 = _379 + (-0.5);
        _2433 = cbMtdParam._m0[1u];
        _2435 = _2433.y * _2431;
        float _2438 = (_2413 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2439 = _2438 * (_2414 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2395)));
        _2440 = _2438 * (_2414 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2397)));
        _2441 = _2438 * (_2414 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2399)));
        _2442 = _2431 * 0.999000012874603271484375;
        _2452 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2452)
        {
            if ((cbInstanceData._m0[_431 + 7u].x + _2442) < 0.5)
            {
                _2608 = true;
                break;
            }
        }
        uint _2549 = _433 + uint(_2411.w);
        if ((cbInstanceData._m0[_2549].w < 1.0) && ((cbInstanceData._m0[_2549].w + _2442) < 0.5))
        {
            _2608 = true;
            break;
        }
        if ((_2435 + _239) < _2433.x)
        {
            _2608 = true;
            break;
        }
        _2608 = false;
        break;
    }
    float _2813;
    if (_2608)
    {
        discard_state = true;
        _2813 = 0.0;
    }
    else
    {
        _2813 = cbInstanceData._m0[_2275].w;
    }
    SV_Target.x = _2439;
    SV_Target.y = _2440;
    SV_Target.z = _2441;
    SV_Target.w = _2813;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2275].w;
    discard_exit();
}


