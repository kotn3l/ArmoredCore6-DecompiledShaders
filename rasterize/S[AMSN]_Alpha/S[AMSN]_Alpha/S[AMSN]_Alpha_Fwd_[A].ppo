#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _888;
float _3281;
float _3282;
float _3283;
float _3284;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(S_AMSN_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _236 = _230.w;
    float _237 = _236 * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(S_AMSN_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _253.x + cbMtdParam._m0[9u].x;
    vec4 _268 = texture(sampler2D(S_AMSN_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3293 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))));
    float _288 = fma(_285, _214, fma(_278, _206 * TANGENT.x, (_192 * _184) * _276));
    float _291 = fma(_285, _215, fma(_278, _206 * TANGENT.y, (_192 * _185) * _276));
    float _294 = fma(_285, _216, fma(_278, _206 * TANGENT.z, (_192 * _186) * _276));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3304 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _302 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _303 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3337 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3348 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3359 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _307 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    vec4 _389 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _391 = _389.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _567 = sqrt(((_375 * _375) + (_376 * _376)) + (_377 * _377));
        float _573 = (cbMatDynParam._m0[5u].x * _567) + cbMatDynParam._m0[5u].y;
        float _3370 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
        float _574 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _578 = (cbMatDynParam._m0[5u].z * _567) + cbMatDynParam._m0[5u].w;
        float _3381 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) - _574)) + _574) < ((_391 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _427 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _430 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = _443 + 9u;
    uint _446 = _445 + uint(cbMatDynParam._m0[0u].w);
    float _452 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_446].x;
    float _453 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_446].y;
    float _454 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * cbInstanceData._m0[_446].z;
    float _3392 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _458 = 1.0 - _307;
    float _459 = _455 * _458;
    float _460 = _456 * _458;
    float _461 = _457 * _458;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _307;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _307;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _307;
    float _469 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _484 = _481.x * TEXCOORD_1.w;
    float _485 = dot(vec3(_299, _300, _301), vec3(_382, _383, _384));
    float _488 = _485 * 2.0;
    float _492 = (_488 * _299) - _382;
    float _493 = (_488 * _300) - _383;
    float _494 = (_488 * _301) - _384;
    float _498 = abs(dot(vec3(_382, _383, _384), vec3(_299, _300, _301)));
    float _3425 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = sqrt(_303);
    float _513 = exp2((_500 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_500 * 3.0));
    float _519 = (1.0 - _513) * ((_500 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _520 = _513 * _500;
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _887;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _612 = fma(_556, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548));
        float _616 = fma(_556, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548));
        float _620 = fma(_556, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548));
        float _645 = _548 + _299;
        float _646 = _552 + _300;
        float _647 = _556 + _301;
        float _657 = fma(_647, cbModelParam._m0[26u].z, fma(_646, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645)) - _612;
        float _658 = fma(_647, cbModelParam._m0[27u].z, fma(_646, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645)) - _616;
        float _659 = fma(_647, cbModelParam._m0[28u].z, fma(_646, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645)) - _620;
        float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
        float _676 = ((_663 * _657) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_612 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_663 * _658) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_616 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_663 * _659) / cbModelParam._m0[34u].z) + ((((((_620 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        float _715 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_681.x + (-0.5));
        float _717 = _715 * (_681.y + (-0.5));
        float _718 = _715 * (_681.z + (-0.5));
        float _725 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_688.x + (-0.5));
        float _727 = _725 * (_688.y + (-0.5));
        float _728 = _725 * (_688.z + (-0.5));
        float _735 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_695.x + (-0.5));
        float _737 = _735 * (_695.y + (-0.5));
        float _738 = _735 * (_695.z + (-0.5));
        float _745 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_702.x + (-0.5));
        float _747 = _745 * (_702.y + (-0.5));
        float _748 = _745 * (_702.z + (-0.5));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = _716 * 0.5;
        float _753 = _726 * 0.5;
        float _754 = _736 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _769 = (dot(vec3(_299, _300, _301), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _779 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3473 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_781 + 1.0))) + _786) * _749;
        float _796 = _717 * 0.5;
        float _797 = _727 * 0.5;
        float _798 = _737 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_299, _300, _301), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3506 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_823 + 1.0))) + _828) * _750;
        float _838 = _718 * 0.5;
        float _839 = _728 * 0.5;
        float _840 = _738 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_299, _300, _301), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3539 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_865 + 1.0))) + _870) * _751;
        _887 = _718;
        _889 = _717;
        _890 = _716;
        _891 = _728;
        _892 = _727;
        _893 = _726;
        _894 = _738;
        _895 = _737;
        _896 = _736;
        _897 = _751;
        _898 = _750;
        _899 = _749;
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
    }
    else
    {
        _887 = _888;
        _889 = _888;
        _890 = _888;
        _891 = _888;
        _892 = _888;
        _893 = _888;
        _894 = _888;
        _895 = _888;
        _896 = _888;
        _897 = _888;
        _898 = _888;
        _899 = _888;
        _900 = 0.0;
        _901 = 0.0;
        _902 = 0.0;
    }
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _931 = fma(_556, cbModelParam._m0[30u].z, fma(_552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _548));
        float _935 = fma(_556, cbModelParam._m0[31u].z, fma(_552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _548));
        float _939 = fma(_556, cbModelParam._m0[32u].z, fma(_552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _548));
        float _962 = _548 + _299;
        float _963 = _552 + _300;
        float _964 = _556 + _301;
        float _974 = fma(_964, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962)) - _931;
        float _975 = fma(_964, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962)) - _935;
        float _976 = fma(_964, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962)) - _939;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_931 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_935 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[35u].z) + ((((((_939 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1030 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_997.x + (-0.5));
        float _1032 = _1030 * (_997.y + (-0.5));
        float _1033 = _1030 * (_997.z + (-0.5));
        float _1040 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1004.x + (-0.5));
        float _1042 = _1040 * (_1004.y + (-0.5));
        float _1043 = _1040 * (_1004.z + (-0.5));
        float _1050 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1011.x + (-0.5));
        float _1052 = _1050 * (_1011.y + (-0.5));
        float _1053 = _1050 * (_1011.z + (-0.5));
        float _1060 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1018.x + (-0.5));
        float _1062 = _1060 * (_1018.y + (-0.5));
        float _1063 = _1060 * (_1018.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_299, _300, _301), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3602 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1094 + 1.0))) + _1099) * _1064;
        float _1109 = _1032 * 0.5;
        float _1110 = _1042 * 0.5;
        float _1111 = _1052 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_299, _300, _301), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3635 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1136 + 1.0))) + _1141) * _1065;
        float _1151 = _1033 * 0.5;
        float _1152 = _1043 * 0.5;
        float _1153 = _1053 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_299, _300, _301), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3668 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1178 + 1.0))) + _1183) * _1066;
        _1200 = _1033;
        _1201 = _1032;
        _1202 = _1031;
        _1203 = _1043;
        _1204 = _1042;
        _1205 = _1041;
        _1206 = _1053;
        _1207 = _1052;
        _1208 = _1051;
        _1209 = _1066;
        _1210 = _1065;
        _1211 = _1064;
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _888;
        _1201 = _888;
        _1202 = _888;
        _1203 = _888;
        _1204 = _888;
        _1205 = _888;
        _1206 = _888;
        _1207 = _888;
        _1208 = _888;
        _1209 = _888;
        _1210 = _888;
        _1211 = _888;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _900)) + _900;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1247 = fma(_1226, cbSceneParam._m0[89u].z, fma(_1225, cbSceneParam._m0[89u].y, _1224 * cbSceneParam._m0[89u].x));
    float _1250 = fma(_1226, cbSceneParam._m0[90u].z, fma(_1225, cbSceneParam._m0[90u].y, _1224 * cbSceneParam._m0[90u].x));
    float _1253 = fma(_1226, cbSceneParam._m0[91u].z, fma(_1225, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1224));
    float _1268 = _492 * 0.5;
    float _1269 = _493 * 0.5;
    float _1270 = _494 * 0.5;
    float _1271 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1274 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1277 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1311;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1284 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_887, _891, _894, _897));
        float _1288 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_889, _892, _895, _898));
        float _1292 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_890, _893, _896, _899));
        float _1299 = dot(vec4(cbModelParam._m0[39u]), vec4(_1268, _1269, _1270, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1299) ? 0.0 : (isnan(0.0) ? _1299 : max(0.0, _1299))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1322;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1313 = dot(vec4(cbModelParam._m0[40u]), vec4(_1268, _1269, _1270, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1326 = (_1322 * cbModelParam._m0[1u].x) + (_1311 * (1.0 - cbModelParam._m0[1u].x));
    float _1336 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1337 = isnan(_1336) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1336 : min(cbModelParam._m0[25u].z, _1336));
    float _1419;
    float _1421;
    float _1423;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1386 = fma(_556, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548)) + cbModelParam._m0[13u].w;
        float _1390 = fma(_556, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548)) + cbModelParam._m0[14u].w;
        float _1394 = fma(_556, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548)) + cbModelParam._m0[15u].w;
        float _1397 = fma(_494, cbModelParam._m0[13u].z, fma(_493, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492));
        float _1400 = fma(_494, cbModelParam._m0[14u].z, fma(_493, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492));
        float _1403 = fma(_494, cbModelParam._m0[15u].z, fma(_493, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492));
        float _1431;
        if (_1397 > 0.0)
        {
            _1431 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1431 = frontier_phi_19_17_ladder;
        }
        float _1639;
        if (_1400 > 0.0)
        {
            _1639 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1639 = frontier_phi_28_24_ladder;
        }
        float _1893;
        if (_1403 > 0.0)
        {
            _1893 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1893 = frontier_phi_40_35_ladder;
        }
        float _1895 = isnan(_1639) ? _1431 : (isnan(_1431) ? _1639 : min(_1431, _1639));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1397) + _1386;
        float _1901 = (_1896 * _1400) + _1390;
        float _1902 = (_1896 * _1403) + _1394;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1903;
        float _1907 = _1903 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 > _1907) || ((_1901 < _1905) || ((_1900 < _1905) || (_1900 > _1907))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1902, cbModelParam._m0[9u].z, fma(_1901, cbModelParam._m0[9u].y, _1900 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1902, cbModelParam._m0[10u].z, fma(_1901, cbModelParam._m0[10u].y, _1900 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1902, cbModelParam._m0[11u].z, fma(_1901, cbModelParam._m0[11u].y, _1900 * cbModelParam._m0[11u].x))), _1337);
            frontier_phi_18_40_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1419 = frontier_phi_18_40_ladder_2;
        _1421 = frontier_phi_18_40_ladder_1;
        _1423 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_492, _493, _494), _1337);
        _1419 = _1407.x * cbModelParam._m0[1u].y;
        _1421 = _1407.y * cbModelParam._m0[1u].y;
        _1423 = _1407.z * cbModelParam._m0[1u].y;
    }
    float _1427 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1427 : min(cbModelParam._m0[25u].w, _1427));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1485 = fma(_556, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548)) + cbModelParam._m0[21u].w;
        float _1489 = fma(_556, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548)) + cbModelParam._m0[22u].w;
        float _1493 = fma(_556, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548)) + cbModelParam._m0[23u].w;
        float _1496 = fma(_494, cbModelParam._m0[21u].z, fma(_493, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492));
        float _1499 = fma(_494, cbModelParam._m0[22u].z, fma(_493, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492));
        float _1502 = fma(_494, cbModelParam._m0[23u].z, fma(_493, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492));
        float _1644;
        if (_1496 > 0.0)
        {
            _1644 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1644 = frontier_phi_30_26_ladder;
        }
        float _1920;
        if (_1499 > 0.0)
        {
            _1920 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1920 = frontier_phi_42_37_ladder;
        }
        float _2133;
        if (_1502 > 0.0)
        {
            _2133 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2133 = frontier_phi_51_48_ladder;
        }
        float _2135 = isnan(_1920) ? _1644 : (isnan(_1644) ? _1920 : min(_1644, _1920));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1496) + _1485;
        float _2141 = (_2136 * _1499) + _1489;
        float _2142 = (_2136 * _1502) + _1493;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2143;
        float _2146 = _2143 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2142 > _2146) || ((_2142 < _2144) || ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 < _2144) || (_2140 > _2146))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2142, cbModelParam._m0[17u].z, fma(_2141, cbModelParam._m0[17u].y, _2140 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2142, cbModelParam._m0[18u].z, fma(_2141, cbModelParam._m0[18u].y, _2140 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2142, cbModelParam._m0[19u].z, fma(_2141, cbModelParam._m0[19u].y, _2140 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_27_51_ladder = _2342.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2342.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2342.x * cbModelParam._m0[1u].z;
        }
        _1521 = frontier_phi_27_51_ladder_2;
        _1523 = frontier_phi_27_51_ladder_1;
        _1525 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_492, _493, _494), _1428);
        _1521 = _1505.x * cbModelParam._m0[1u].z;
        _1523 = _1505.y * cbModelParam._m0[1u].z;
        _1525 = _1505.z * cbModelParam._m0[1u].z;
    }
    float _1538 = (((_519 * _469) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1540 = (((_519 * _471) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1542 = (((_519 * _472) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1545 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, _1538 * cbSceneParam._m0[91u].x));
    uvec4 _1561 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1563 = _1561.x * 14u;
    uint _1564 = _1563 + 13u;
    float _1571 = _484 + (-1.0);
    float _1576 = (cbLight._m0[_1564].x * _1571) + 1.0;
    float _1577 = (cbLight._m0[_1564].y * _1571) + 1.0;
    float _1578 = (cbLight._m0[_1564].z * _1571) + 1.0;
    float _1579 = (cbLight._m0[_1564].w * _1571) + 1.0;
    uint _1580 = _1563 + 5u;
    float _1586 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1590 = _1563 + 4u;
    float _1597 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1601 = _1563 | 1u;
    float _1612 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_299, _300, _301));
    float _1615 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_299, _300, _301));
    float _3804 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _3815 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1620 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1622 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.3183098733425140380859375;
    float _1629 = ((cbLight._m0[_1580].x * _1586) * _1622) + ((cbLight._m0[_1590].x * _1597) * _1620);
    float _1630 = ((_1586 * cbLight._m0[_1580].y) * _1622) + ((_1597 * cbLight._m0[_1590].y) * _1620);
    float _1631 = ((_1586 * cbLight._m0[_1580].z) * _1622) + ((_1597 * cbLight._m0[_1590].z) * _1620);
    uvec4 _1636 = floatBitsToUint(cbLight._m0[_1563 + 12u]);
    bool _1638 = _1636.x == 0u;
    float _1649;
    float _1651;
    float _1653;
    if (_1638)
    {
        _1649 = _1629;
        _1651 = _1630;
        _1653 = _1631;
    }
    else
    {
        uint _1657 = _1563 + 6u;
        float _1673 = (dot(vec3(cbLight._m0[_1563 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1674 = _1673 * _1673;
        float _3826 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1676 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1649 = (((cbLight._m0[_1657].x * 0.3183098733425140380859375) * _1675) * _1676) + _1629;
        _1651 = (((cbLight._m0[_1657].y * 0.3183098733425140380859375) * _1675) * _1676) + _1630;
        _1653 = (((cbLight._m0[_1657].z * 0.3183098733425140380859375) * _1675) * _1676) + _1631;
    }
    bool _1656 = _1636.y == 0u;
    float _1694;
    float _1696;
    float _1698;
    if (_1656)
    {
        _1694 = _1649;
        _1696 = _1651;
        _1698 = _1653;
    }
    else
    {
        uint _1864 = _1563 + 7u;
        float _1880 = (dot(vec3(cbLight._m0[_1563 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1881 = _1880 * _1880;
        float _3842 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1883 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1694 = (((cbLight._m0[_1864].x * 0.3183098733425140380859375) * _1882) * _1883) + _1649;
        _1696 = (((cbLight._m0[_1864].y * 0.3183098733425140380859375) * _1882) * _1883) + _1651;
        _1698 = (((cbLight._m0[_1864].z * 0.3183098733425140380859375) * _1882) * _1883) + _1653;
    }
    uint _1701 = _1563 + 8u;
    float _1714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1563].w)) * _303) * 0.949999988079071044921875);
    float _1715 = _1714 * _1714;
    float _1716 = cbLight._m0[_1563].x + _382;
    float _1717 = cbLight._m0[_1563].y + _383;
    float _1718 = cbLight._m0[_1563].z + _384;
    float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
    float _1723 = _1722 * _1716;
    float _1724 = _1722 * _1717;
    float _1725 = _1722 * _1718;
    float _1726 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1563].xyz));
    float _3858 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _1730 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1731 = dot(vec3(_299, _300, _301), vec3(_1723, _1724, _1725));
    float _3880 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1735 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_1723, _1724, _1725));
    float _3891 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1739 = _1715 * _1715;
    float _1743 = ((_1734 * _1734) * (_1739 + (-1.0))) + 1.0;
    float _1751 = exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0);
    float _1752 = 0.959999978542327880859375 - _466;
    float _1754 = 0.959999978542327880859375 - _467;
    float _1755 = 0.959999978542327880859375 - _468;
    float _1762 = 1.0 - _1715;
    float _1773 = (0.5 / (((_1730 * ((_1729 * _1762) + _1715)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1762) + _1715) * _1729))) * _1729;
    float _3902 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1775 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1739 / ((_1743 * _1743) * 3.141590118408203125));
    uint _1786 = _1563 + 9u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1601].w)) * _303) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1601].x + _382;
    float _1800 = cbLight._m0[_1601].y + _383;
    float _1801 = cbLight._m0[_1601].z + _384;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1601].xyz));
    float _3913 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1813 = dot(vec3(_299, _300, _301), vec3(_1806, _1807, _1808));
    float _3924 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_1806, _1807, _1808));
    float _3935 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1798 * _1798;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1832 = exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0);
    float _1839 = 1.0 - _1798;
    float _1849 = (0.5 / (((_1730 * ((_1812 * _1839) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1839) + _1798) * _1812))) * _1812;
    float _3946 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1851 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    float _1861 = (((((_1832 * _1752) + _469) * cbLight._m0[_1786].x) * _1851) * _1586) + (((((_1751 * _1752) + _469) * cbLight._m0[_1701].x) * _1775) * _1597);
    float _1862 = (((((_1832 * _1754) + _471) * cbLight._m0[_1786].y) * _1851) * _1586) + (((((_1751 * _1754) + _471) * cbLight._m0[_1701].y) * _1775) * _1597);
    float _1863 = (((((_1832 * _1755) + _472) * cbLight._m0[_1786].z) * _1851) * _1586) + (((((_1751 * _1755) + _472) * cbLight._m0[_1701].z) * _1775) * _1597);
    float _1925;
    float _1927;
    float _1929;
    if (_1638)
    {
        _1925 = _1861;
        _1927 = _1862;
        _1929 = _1863;
    }
    else
    {
        uint _1931 = _1563 + 2u;
        uint _1935 = _1563 + 10u;
        float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _303) * 0.949999988079071044921875);
        float _1950 = _1949 * _1949;
        float _1951 = cbLight._m0[_1931].x + _382;
        float _1952 = cbLight._m0[_1931].y + _383;
        float _1953 = cbLight._m0[_1931].z + _384;
        float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
        float _1958 = _1957 * _1951;
        float _1959 = _1957 * _1952;
        float _1960 = _1957 * _1953;
        float _1961 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1931].xyz));
        float _3957 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1964 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1965 = dot(vec3(_299, _300, _301), vec3(_1958, _1959, _1960));
        float _3968 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1969 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_1958, _1959, _1960));
        float _3979 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = _1950 * _1950;
        float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
        float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
        float _1991 = 1.0 - _1950;
        float _2001 = (0.5 / (((_1730 * ((_1964 * _1991) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1991) + _1950) * _1964))) * _1964;
        float _3990 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2003 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
        float _2004 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1925 = (((((_1984 * _1752) + _469) * cbLight._m0[_1935].x) * _2003) * _2004) + _1861;
        _1927 = (((((_1984 * _1754) + _471) * cbLight._m0[_1935].y) * _2003) * _2004) + _1862;
        _1929 = (((((_1984 * _1755) + _472) * cbLight._m0[_1935].z) * _2003) * _2004) + _1863;
    }
    float _2039;
    float _2041;
    float _2043;
    if (_1656)
    {
        _2039 = _1925;
        _2041 = _1927;
        _2043 = _1929;
    }
    else
    {
        uint _2050 = _1563 + 3u;
        uint _2054 = _1563 + 11u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _303) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _382;
        float _2071 = cbLight._m0[_2050].y + _383;
        float _2072 = cbLight._m0[_2050].z + _384;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2050].xyz));
        float _4006 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2084 = dot(vec3(_299, _300, _301), vec3(_2077, _2078, _2079));
        float _4017 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4028 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1730 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _2110) + _2069) * _2083))) * _2083;
        float _4039 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _2039 = (((((_2103 * _1752) + _469) * cbLight._m0[_2054].x) * _2122) * _2123) + _1925;
        _2041 = (((((_2103 * _1754) + _471) * cbLight._m0[_2054].y) * _2122) * _2123) + _1927;
        _2043 = (((((_2103 * _1755) + _472) * cbLight._m0[_2054].z) * _2122) * _2123) + _1929;
    }
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    if (_1561.y == 0u)
    {
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2198;
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2198;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2198;
        uvec4 _2213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2214 = _2213.x;
        uint _2225 = uint((float(_2213.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2214))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2214)));
        float _2235 = (log2(_2201 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2236 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        uint _2239 = uint(isnan(14.0) ? _2236 : (isnan(_2236) ? 14.0 : min(_2236, 14.0)));
        uvec4 _2244 = texelFetch(g_lightClusterGridBuffer, int(((_2239 << 2u) + (_2225 << 6u)) >> 2u));
        uint _2245 = _2244.x;
        uint _2246 = _2213.z;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        if (((((1u << ((_2246 >> 4u) & 15u)) + 4294967295u) & _2245) == 0u) || ((_2246 & 240u) == 0u))
        {
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
        }
        else
        {
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            uint _2505 = 0u;
            uint _2514;
            bool _2515;
            for (;;)
            {
                _2514 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2505 << 2u)) >> 2u)).x;
                _2515 = _2514 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2515)
                {
                    frontier_phi_68_pred = _2501;
                    frontier_phi_68_pred_1 = _2504;
                    frontier_phi_68_pred_2 = _2503;
                    frontier_phi_68_pred_3 = _2502;
                    frontier_phi_68_pred_4 = _2500;
                    frontier_phi_68_pred_5 = _2499;
                }
                else
                {
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    uint _2650;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2514;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    for (;;)
                    {
                        uint _2654 = uint(findLSB(_2650)) + (_2505 << 5u);
                        uint _2651 = (_2650 + 4294967295u) & _2650;
                        uint _2656 = _2654 * 48u;
                        vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2656)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 3u)).x));
                        uint _2676 = (_2654 * 48u) + 4u;
                        vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 3u)).x));
                        uint _2695 = (_2654 * 48u) + 8u;
                        vec3 _2706 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x));
                        float _2710 = _2670.x - _2199;
                        float _2711 = _2670.y - _2200;
                        float _2712 = _2670.z - _2201;
                        float _2713 = dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712));
                        float _2716 = inversesqrt(_2713);
                        float _2717 = _2716 * _2710;
                        float _2718 = _2716 * _2711;
                        float _2719 = _2716 * _2712;
                        float _2720 = dot(vec3(_424, _427, _430), vec3(_2717, _2718, _2719));
                        float _2725 = 1.0 - (_2713 * _2670.w);
                        float _4065 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2726 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2727 = sqrt(_2713) * _2689.w;
                        float _2730 = 1.39999997615814208984375 / (_2727 + 1.39999997615814208984375);
                        float _2731 = _2730 * _2730;
                        float _2734 = ((1.0 - _2731) * _2720) + _2731;
                        float _2737 = _2727 * _2727;
                        float _2741 = ((isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0))) * _2726) / ((_2737 * 0.699999988079071044921875) + 1.0);
                        float _2745 = (-0.0) - _2199;
                        float _2746 = (-0.0) - _2200;
                        float _2747 = (-0.0) - _2201;
                        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
                        float _2752 = _2751 * _2745;
                        float _2753 = _2751 * _2746;
                        float _2754 = _2751 * _2747;
                        float _2762 = exp2(log2(1.0 / ((_2737 * 3.5) + 5.0)) * 0.25);
                        float _2763 = 1.0 - _500;
                        float _2770 = sqrt(1.0 - ((1.0 - (_2763 * _2763)) * (1.0 - (_2762 * _2762))));
                        float _2771 = _2770 * _2770;
                        float _2772 = _2771 * _2771;
                        float _2773 = _2752 + _2717;
                        float _2774 = _2753 + _2718;
                        float _2775 = _2754 + _2719;
                        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
                        float _2783 = dot(vec3(_424, _427, _430), vec3(_2752, _2753, _2754));
                        float _4081 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2786 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2787 = dot(vec3(_424, _427, _430), vec3(_2779 * _2773, _2779 * _2774, _2779 * _2775));
                        float _4092 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2790 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2794 = ((_2790 * _2790) * (_2772 + (-1.0))) + 1.0;
                        float _2795 = _2730 * _2771;
                        float _2796 = _2795 * _2795;
                        float _2799 = ((1.0 - _2796) * _2720) + _2796;
                        float _4103 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2800 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2801 = 1.0 - _2771;
                        float _2811 = (0.5 / (((_2800 * ((_2786 * _2801) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2800 * _2801) + _2771) * _2786))) * _2800;
                        float _4114 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2822 = (((_2772 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_2794 * _2794) * ((_2737 * 2.1991131305694580078125) + 3.141590118408203125))) * _2726;
                        _2574 = (_2741 * _2689.x) + _2647;
                        _2575 = (_2741 * _2689.y) + _2648;
                        _2576 = (_2741 * _2689.z) + _2649;
                        _2571 = (_2822 * _2706.x) + _2644;
                        _2572 = (_2822 * _2706.y) + _2645;
                        _2573 = (_2822 * _2706.z) + _2646;
                        if (_2651 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2651;
                        }
                    }
                    frontier_phi_68_pred = _2573;
                    frontier_phi_68_pred_1 = _2576;
                    frontier_phi_68_pred_2 = _2575;
                    frontier_phi_68_pred_3 = _2574;
                    frontier_phi_68_pred_4 = _2572;
                    frontier_phi_68_pred_5 = _2571;
                }
                _2352 = frontier_phi_68_pred;
                _2358 = frontier_phi_68_pred_1;
                _2356 = frontier_phi_68_pred_2;
                _2354 = frontier_phi_68_pred_3;
                _2350 = frontier_phi_68_pred_4;
                _2348 = frontier_phi_68_pred_5;
                uint _2506 = _2505 + 1u;
                if (_2506 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2499 = _2348;
                    _2500 = _2350;
                    _2501 = _2352;
                    _2502 = _2354;
                    _2503 = _2356;
                    _2504 = _2358;
                    _2505 = _2506;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
        }
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.z;
        uint _2364 = (_2362 >> 8u) & 15u;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        if (((4294967295u << _2364) & _2245) == 0u)
        {
            _2467 = _2347;
            _2469 = _2349;
            _2471 = _2351;
            _2473 = _2353;
            _2475 = _2355;
            _2477 = _2357;
        }
        else
        {
            float _2492 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
            float _2493 = _2492 * _2199;
            float _2494 = _2492 * _2200;
            float _2495 = _2492 * _2201;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2364 < ((_2362 >> 12u) & 15u))
            {
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2627 = _2347;
                float _2628 = _2349;
                float _2629 = _2351;
                float _2630 = _2353;
                float _2631 = _2355;
                float _2632 = _2357;
                uint _2633 = _2364;
                uint _2642;
                bool _2643;
                for (;;)
                {
                    _2642 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2633 << 2u)) >> 2u)).x;
                    _2643 = _2642 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2643)
                    {
                        frontier_phi_79_pred = _2632;
                        frontier_phi_79_pred_1 = _2631;
                        frontier_phi_79_pred_2 = _2630;
                        frontier_phi_79_pred_3 = _2629;
                        frontier_phi_79_pred_4 = _2628;
                        frontier_phi_79_pred_5 = _2627;
                    }
                    else
                    {
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _2849 = _2627;
                        float _2850 = _2628;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        uint _2855 = _2642;
                        uint _2856;
                        vec4 _2881;
                        float _2882;
                        vec4 _2897;
                        vec3 _2909;
                        vec4 _2925;
                        vec4 _2941;
                        float _2988;
                        bool _2989;
                        for (;;)
                        {
                            uint _2866 = ((_2633 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2855));
                            _2856 = (_2855 + 4294967295u) & _2855;
                            uint _2868 = _2866 * 40u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2882 = _2881.w;
                            uint _2884 = (_2866 * 40u) + 4u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2899 = (_2866 * 40u) + 8u;
                            _2909 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x));
                            uint _2912 = (_2866 * 40u) + 16u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2866 * 40u) + 20u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2944 = (_2866 * 40u) + 24u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2963 = (_2866 * 40u) + 28u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2988 = fma(_2201, _2976.z, fma(_2200, _2976.y, _2976.x * _2199)) + _2976.w;
                            _2989 = !((fma(_2201, _2957.z, fma(_2200, _2957.y, _2957.x * _2199)) + _2957.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2989)
                            {
                                float _3016 = _2881.x - _2199;
                                float _3017 = _2881.y - _2200;
                                float _3018 = _2881.z - _2201;
                                float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                                float _3022 = inversesqrt(_3019);
                                float _3023 = _3022 * _3016;
                                float _3024 = _3022 * _3017;
                                float _3025 = _3022 * _3018;
                                float _3029 = 1.0 - (_3019 / (_2882 * _2882));
                                float _4125 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3034 = sqrt(_3019) * _2897.w;
                                float _3036 = 1.39999997615814208984375 / (_3034 + 1.39999997615814208984375);
                                float _3037 = _3036 * _3036;
                                float _3040 = ((1.0 - _3037) * dot(vec3(_3023, _3024, _3025), vec3(_424, _427, _430))) + _3037;
                                float _3043 = _3034 * _3034;
                                float _3047 = (fma(_2201, _2925.z, fma(_2200, _2925.y, _2925.x * _2199)) + _2925.w) / _2988;
                                float _3048 = (fma(_2201, _2941.z, fma(_2200, _2941.y, _2941.x * _2199)) + _2941.w) / _2988;
                                float _3052 = 1.0 - dot(vec2(_3047, _3048), vec2(_3047, _3048));
                                float _4141 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3054 = _3053 * (((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3030) / ((_3043 * 0.699999988079071044921875) + 1.0));
                                float _3066 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                                float _3067 = 1.0 - _500;
                                float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                                float _3075 = _3074 * _3074;
                                float _3076 = _3075 * _3075;
                                float _3077 = _3023 - _2493;
                                float _3078 = _3024 - _2494;
                                float _3079 = _3025 - _2495;
                                float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                                float _3087 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2493, (-0.0) - _2494, (-0.0) - _2495));
                                float _4152 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3091 = dot(vec3(_424, _427, _430), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                                float _4163 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3094 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                                float _3099 = _3036 * _3075;
                                float _3100 = _3099 * _3099;
                                float _3106 = ((1.0 - _3100) * dot(vec3(_424, _427, _430), vec3(_3023, _3024, _3025))) + _3100;
                                float _4174 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3108 = 1.0 - _3075;
                                float _3118 = (0.5 / (((_3107 * ((_3090 * _3108) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3075) * _3090))) * _3107;
                                float _4185 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3128 = (_3053 * _3030) * (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_3098 * _3098) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3054 * _2897.z;
                                frontier_phi_85_pred_1 = _3054 * _2897.y;
                                frontier_phi_85_pred_2 = _3054 * _2897.x;
                                frontier_phi_85_pred_3 = _3128 * _2909.z;
                                frontier_phi_85_pred_4 = _3128 * _2909.y;
                                frontier_phi_85_pred_5 = _3128 * _2909.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3137 = frontier_phi_85_pred;
                            _3136 = frontier_phi_85_pred_1;
                            _3135 = frontier_phi_85_pred_2;
                            _3134 = frontier_phi_85_pred_3;
                            _3133 = frontier_phi_85_pred_4;
                            _3132 = frontier_phi_85_pred_5;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            if (_2856 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2856;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2841;
                        frontier_phi_79_pred_1 = _2840;
                        frontier_phi_79_pred_2 = _2839;
                        frontier_phi_79_pred_3 = _2838;
                        frontier_phi_79_pred_4 = _2837;
                        frontier_phi_79_pred_5 = _2836;
                    }
                    _2478 = frontier_phi_79_pred;
                    _2476 = frontier_phi_79_pred_1;
                    _2474 = frontier_phi_79_pred_2;
                    _2472 = frontier_phi_79_pred_3;
                    _2470 = frontier_phi_79_pred_4;
                    _2468 = frontier_phi_79_pred_5;
                    uint _2634 = _2633 + 1u;
                    if (_2634 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2627 = _2468;
                        _2628 = _2470;
                        _2629 = _2472;
                        _2630 = _2474;
                        _2631 = _2476;
                        _2632 = _2478;
                        _2633 = _2634;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2474;
                frontier_phi_60_61_ladder_1 = _2478;
                frontier_phi_60_61_ladder_2 = _2476;
                frontier_phi_60_61_ladder_3 = _2472;
                frontier_phi_60_61_ladder_4 = _2470;
                frontier_phi_60_61_ladder_5 = _2468;
            }
            else
            {
                frontier_phi_60_61_ladder = _2353;
                frontier_phi_60_61_ladder_1 = _2357;
                frontier_phi_60_61_ladder_2 = _2355;
                frontier_phi_60_61_ladder_3 = _2351;
                frontier_phi_60_61_ladder_4 = _2349;
                frontier_phi_60_61_ladder_5 = _2347;
            }
            _2467 = frontier_phi_60_61_ladder_5;
            _2469 = frontier_phi_60_61_ladder_4;
            _2471 = frontier_phi_60_61_ladder_3;
            _2473 = frontier_phi_60_61_ladder;
            _2475 = frontier_phi_60_61_ladder_2;
            _2477 = frontier_phi_60_61_ladder_1;
        }
        float _2482 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2257 = (_2482 * _2473) + _1694;
        _2259 = (_2482 * _2475) + _1696;
        _2261 = (_2482 * _2477) + _1698;
        _2263 = ((_2467 * _469) * _2482) + _2039;
        _2265 = ((_2469 * _471) * _2482) + _2041;
        _2267 = ((_2471 * _472) * _2482) + _2043;
    }
    else
    {
        _2257 = _1694;
        _2259 = _1696;
        _2261 = _1698;
        _2263 = _2039;
        _2265 = _2041;
        _2267 = _2043;
    }
    float _4201 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4212 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4223 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4234 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2285 = ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2257 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _484))) + ((_2263 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1326)) * cbPerFrame._m0[3u].x);
    float _2286 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2259 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _484))) + ((_2265 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1326)) * cbPerFrame._m0[3u].x);
    float _2287 = ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2261 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _484))) + ((_2267 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1326)) * cbPerFrame._m0[3u].x);
    float _2292 = cbInstanceData._m0[_443 + 6u].w * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)));
    float _2297 = _403 / cbSceneParam._m0[86u].x;
    float _2298 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2312 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2297, _2298, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2314 = _2312.x;
    float _2315 = _2312.y;
    float _2316 = _2312.z;
    float _2317 = _2312.w;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2372 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2373 = _2372 / _323;
        float _2384 = _2373 * _375;
        float _2385 = _376 * _2373;
        float _2386 = (-0.0) - _2385;
        float _2387 = _2373 * _377;
        float _2389 = (cbSceneParam._m0[77u].w * _2386) / _2372;
        float _2390 = _2389 + cbSceneParam._m0[79u].w;
        float _2391 = cbSceneParam._m0[79u].w - _2385;
        float _2397 = sqrt(((_2384 * _2384) + (_2385 * _2385)) + (_2387 * _2387));
        float _2400 = (1.0 - (cbSceneParam._m0[77u].w / _2372)) * _2397;
        float _2405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2407 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2584;
        if (abs((_2386 - _2389) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2584 = ((((_2390 > 0.0) ? exp2(_2405 * _2390) : (2.0 - exp2(_2407 * _2390))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2400;
        }
        else
        {
            float _2528 = 1.0 / cbSceneParam._m0[80u].x;
            float _2529 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : max(_2390, _2391));
            float _2530 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : min(_2390, _2391));
            float _2539 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : min(_2529, 0.0));
            float _2540 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : min(_2530, 0.0));
            _2584 = ((abs(_2397 / _2386) * cbSceneParam._m0[80u].y) * ((((_2539 - _2540) * 2.0) - ((exp2(_2405 * (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0)))) - exp2(_2405 * (isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0))))) * _2528)) - ((exp2(_2407 * _2539) - exp2(_2407 * _2540)) * _2528))) + (_2400 * cbSceneParam._m0[80u].z);
        }
        vec4 _2586 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2297, _2298, 1.0), 0.0);
        float _2595 = exp2((_2584 * (-1.44269502162933349609375)) * (1.0 - _2586.w));
        float _2596 = log2(_2595);
        float _2612 = log2(_2317);
        _2409 = (exp2(_2612 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].x)) * _2586.x) / cbSceneParam._m0[78u].x)) + _2314;
        _2411 = (exp2(_2612 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].y)) * _2586.y) / cbSceneParam._m0[78u].y)) + _2315;
        _2413 = (exp2(_2612 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].z)) * _2586.z) / cbSceneParam._m0[78u].z)) + _2316;
        _2415 = _2595 * _2317;
    }
    else
    {
        _2409 = _2314;
        _2411 = _2315;
        _2413 = _2316;
        _2415 = _2317;
    }
    bool _2622;
    vec4 _2425;
    vec4 _2447;
    float _2449;
    float _2453;
    float _2454;
    float _2455;
    float _2456;
    bool _2466;
    for (;;)
    {
        _2425 = cbMatDynParam._m0[0u];
        float _2427 = roundEven(_2425.y);
        bool _2428 = _2427 == 3.0;
        float _2429 = log2(_2415);
        float _2436 = exp2(_2429 * cbSceneParam._m0[78u].x) * _2285;
        float _2437 = exp2(_2429 * cbSceneParam._m0[78u].y) * _2286;
        float _2438 = exp2(_2429 * cbSceneParam._m0[78u].z) * _2287;
        float _2445 = _391 + (-0.5);
        _2447 = cbMtdParam._m0[1u];
        _2449 = _2447.y * _2445;
        float _2452 = (_2427 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2453 = _2452 * (_2428 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2409)));
        _2454 = _2452 * (_2428 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
        _2455 = _2452 * (_2428 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2413)));
        _2456 = _2445 * 0.999000012874603271484375;
        _2466 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2466)
        {
            if ((cbInstanceData._m0[_443 + 7u].x + _2456) < 0.5)
            {
                _2622 = true;
                break;
            }
        }
        uint _2563 = _445 + uint(_2425.w);
        if ((cbInstanceData._m0[_2563].w < 1.0) && ((cbInstanceData._m0[_2563].w + _2456) < 0.5))
        {
            _2622 = true;
            break;
        }
        if ((_2449 + _236) < _2447.x)
        {
            _2622 = true;
            break;
        }
        _2622 = false;
        break;
    }
    float _2827;
    if (_2622)
    {
        discard_state = true;
        _2827 = 0.0;
    }
    else
    {
        _2827 = _2292;
    }
    SV_Target.x = _2453;
    SV_Target.y = _2454;
    SV_Target.z = _2455;
    SV_Target.w = _2827;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2292;
    discard_exit();
}


