#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _902;
float _3319;
float _3320;
float _3321;
float _3322;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _231.x;
    float _235 = _231.y;
    float _236 = _231.z;
    float _237 = _231.w;
    vec4 _254 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _276 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _276.z;
    float _283 = (_276.x * 2.0) + (-1.0);
    float _284 = (_276.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_283, _284), vec2(_283, _284));
    float _3331 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))));
    float _294 = ((_254.z - _280) * cbMtdParam._m0[9u].y) + _280;
    float _3342 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _298 = _283 + (((_254.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _299 = _284 + (((_254.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _302 = fma(_291, _215, fma(_299, _207 * TANGENT.x, (_193 * _186) * _298));
    float _305 = fma(_291, _216, fma(_299, _207 * TANGENT.y, (_193 * _187) * _298));
    float _308 = fma(_291, _217, fma(_299, _207 * TANGENT.z, (_193 * _188) * _298));
    float _312 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _313 = _312 * _302;
    float _314 = _312 * _305;
    float _315 = _312 * _308;
    float _3353 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _316 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _317 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3386 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3397 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3408 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _321 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    vec4 _403 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _405 = _403.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _581 = sqrt(((_389 * _389) + (_390 * _390)) + (_391 * _391));
        float _587 = (cbMatDynParam._m0[5u].x * _581) + cbMatDynParam._m0[5u].y;
        float _3419 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _588 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _592 = (cbMatDynParam._m0[5u].z * _581) + cbMatDynParam._m0[5u].w;
        float _3430 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) - _588)) + _588) < ((_405 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _417 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _418 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _438 = fma(_315, cbSceneParam._m0[5u].z, fma(_314, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _313));
    float _441 = fma(_315, cbSceneParam._m0[6u].z, fma(_314, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _313));
    float _444 = fma(_315, cbSceneParam._m0[7u].z, fma(_314, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _313));
    uint _457 = uint(roundEven(NORMAL.w)) * 13u;
    uint _459 = _457 + 9u;
    uint _460 = _459 + uint(cbMatDynParam._m0[0u].w);
    float _466 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_460].x;
    float _467 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_460].y;
    float _468 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_460].z;
    float _3441 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _472 = 1.0 - _321;
    float _473 = _469 * _472;
    float _474 = _470 * _472;
    float _475 = _471 * _472;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _321;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _321;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _321;
    float _483 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    float _486 = _482 + 0.039999999105930328369140625;
    vec4 _495 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _417, cbSceneParam._m0[86u].y * _418));
    float _498 = _495.x * TEXCOORD.z;
    float _499 = dot(vec3(_313, _314, _315), vec3(_396, _397, _398));
    float _502 = _499 * 2.0;
    float _506 = (_502 * _313) - _396;
    float _507 = (_502 * _314) - _397;
    float _508 = (_502 * _315) - _398;
    float _512 = abs(dot(vec3(_396, _397, _398), vec3(_313, _314, _315)));
    float _3474 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = sqrt(_317);
    float _527 = exp2((_514 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_514 * 3.0));
    float _533 = (1.0 - _527) * ((_514 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _534 = _527 * _514;
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _901;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _626 = fma(_570, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562));
        float _630 = fma(_570, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562));
        float _634 = fma(_570, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562));
        float _659 = _562 + _313;
        float _660 = _566 + _314;
        float _661 = _570 + _315;
        float _671 = fma(_661, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659)) - _626;
        float _672 = fma(_661, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659)) - _630;
        float _673 = fma(_661, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659)) - _634;
        float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
        float _690 = ((_677 * _671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_626 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_677 * _672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_630 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_677 * _673) / cbModelParam._m0[34u].z) + ((((((_634 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        float _729 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_695.x + (-0.5));
        float _731 = _729 * (_695.y + (-0.5));
        float _732 = _729 * (_695.z + (-0.5));
        float _739 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_702.x + (-0.5));
        float _741 = _739 * (_702.y + (-0.5));
        float _742 = _739 * (_702.z + (-0.5));
        float _749 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_709.x + (-0.5));
        float _751 = _749 * (_709.y + (-0.5));
        float _752 = _749 * (_709.z + (-0.5));
        float _759 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_716.x + (-0.5));
        float _761 = _759 * (_716.y + (-0.5));
        float _762 = _759 * (_716.z + (-0.5));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = _730 * 0.5;
        float _767 = _740 * 0.5;
        float _768 = _750 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _783 = (dot(vec3(_313, _314, _315), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _793 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3522 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_795 + 1.0))) + _800) * _763;
        float _810 = _731 * 0.5;
        float _811 = _741 * 0.5;
        float _812 = _751 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_313, _314, _315), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3555 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_837 + 1.0))) + _842) * _764;
        float _852 = _732 * 0.5;
        float _853 = _742 * 0.5;
        float _854 = _752 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_313, _314, _315), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3588 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_879 + 1.0))) + _884) * _765;
        _901 = _732;
        _903 = _731;
        _904 = _730;
        _905 = _742;
        _906 = _741;
        _907 = _740;
        _908 = _752;
        _909 = _751;
        _910 = _750;
        _911 = _765;
        _912 = _764;
        _913 = _763;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
    }
    else
    {
        _901 = _902;
        _903 = _902;
        _904 = _902;
        _905 = _902;
        _906 = _902;
        _907 = _902;
        _908 = _902;
        _909 = _902;
        _910 = _902;
        _911 = _902;
        _912 = _902;
        _913 = _902;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _945 = fma(_570, cbModelParam._m0[30u].z, fma(_566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _562));
        float _949 = fma(_570, cbModelParam._m0[31u].z, fma(_566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _562));
        float _953 = fma(_570, cbModelParam._m0[32u].z, fma(_566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _562));
        float _976 = _562 + _313;
        float _977 = _566 + _314;
        float _978 = _570 + _315;
        float _988 = fma(_978, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976)) - _945;
        float _989 = fma(_978, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976)) - _949;
        float _990 = fma(_978, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976)) - _953;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_945 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_949 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[35u].z) + ((((((_953 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1044 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1011.x + (-0.5));
        float _1046 = _1044 * (_1011.y + (-0.5));
        float _1047 = _1044 * (_1011.z + (-0.5));
        float _1054 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1018.x + (-0.5));
        float _1056 = _1054 * (_1018.y + (-0.5));
        float _1057 = _1054 * (_1018.z + (-0.5));
        float _1064 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1025.x + (-0.5));
        float _1066 = _1064 * (_1025.y + (-0.5));
        float _1067 = _1064 * (_1025.z + (-0.5));
        float _1074 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1032.x + (-0.5));
        float _1076 = _1074 * (_1032.y + (-0.5));
        float _1077 = _1074 * (_1032.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_313, _314, _315), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3651 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1108 + 1.0))) + _1113) * _1078;
        float _1123 = _1046 * 0.5;
        float _1124 = _1056 * 0.5;
        float _1125 = _1066 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_313, _314, _315), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3684 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1150 + 1.0))) + _1155) * _1079;
        float _1165 = _1047 * 0.5;
        float _1166 = _1057 * 0.5;
        float _1167 = _1067 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_313, _314, _315), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3717 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1192 + 1.0))) + _1197) * _1080;
        _1214 = _1047;
        _1215 = _1046;
        _1216 = _1045;
        _1217 = _1057;
        _1218 = _1056;
        _1219 = _1055;
        _1220 = _1067;
        _1221 = _1066;
        _1222 = _1065;
        _1223 = _1080;
        _1224 = _1079;
        _1225 = _1078;
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _902;
        _1215 = _902;
        _1216 = _902;
        _1217 = _902;
        _1218 = _902;
        _1219 = _902;
        _1220 = _902;
        _1221 = _902;
        _1222 = _902;
        _1223 = _902;
        _1224 = _902;
        _1225 = _902;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1261 = fma(_1240, cbSceneParam._m0[89u].z, fma(_1239, cbSceneParam._m0[89u].y, _1238 * cbSceneParam._m0[89u].x));
    float _1264 = fma(_1240, cbSceneParam._m0[90u].z, fma(_1239, cbSceneParam._m0[90u].y, _1238 * cbSceneParam._m0[90u].x));
    float _1267 = fma(_1240, cbSceneParam._m0[91u].z, fma(_1239, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1238));
    float _1282 = _506 * 0.5;
    float _1283 = _507 * 0.5;
    float _1284 = _508 * 0.5;
    float _1285 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1288 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1291 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1325;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1298 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_901, _905, _908, _911));
        float _1302 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_903, _906, _909, _912));
        float _1306 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_904, _907, _910, _913));
        float _1313 = dot(vec4(cbModelParam._m0[39u]), vec4(_1282, _1283, _1284, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1336;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1327 = dot(vec4(cbModelParam._m0[40u]), vec4(_1282, _1283, _1284, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1340 = (_1336 * cbModelParam._m0[1u].x) + (_1325 * (1.0 - cbModelParam._m0[1u].x));
    float _1350 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _317);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1350 : min(cbModelParam._m0[25u].z, _1350));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1400 = fma(_570, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562)) + cbModelParam._m0[13u].w;
        float _1404 = fma(_570, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562)) + cbModelParam._m0[14u].w;
        float _1408 = fma(_570, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562)) + cbModelParam._m0[15u].w;
        float _1411 = fma(_508, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506));
        float _1414 = fma(_508, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506));
        float _1417 = fma(_508, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506));
        float _1445;
        if (_1411 > 0.0)
        {
            _1445 = abs((1.0 - _1400) / _1411);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1400 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1445 = frontier_phi_19_17_ladder;
        }
        float _1674;
        if (_1414 > 0.0)
        {
            _1674 = abs((1.0 - _1404) / _1414);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1404 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1674 = frontier_phi_28_24_ladder;
        }
        float _1931;
        if (_1417 > 0.0)
        {
            _1931 = abs((1.0 - _1408) / _1417);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1408 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1931 = frontier_phi_40_35_ladder;
        }
        float _1933 = isnan(_1674) ? _1445 : (isnan(_1445) ? _1674 : min(_1445, _1674));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1411) + _1400;
        float _1939 = (_1934 * _1414) + _1404;
        float _1940 = (_1934 * _1417) + _1408;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1943 = (-1.0) - _1941;
        float _1945 = _1941 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1940 > _1945) || ((_1940 < _1943) || ((_1939 > _1945) || ((_1939 < _1943) || ((_1938 < _1943) || (_1938 > _1945))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1940, cbModelParam._m0[9u].z, fma(_1939, cbModelParam._m0[9u].y, _1938 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1940, cbModelParam._m0[10u].z, fma(_1939, cbModelParam._m0[10u].y, _1938 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1940, cbModelParam._m0[11u].z, fma(_1939, cbModelParam._m0[11u].y, _1938 * cbModelParam._m0[11u].x))), _1351);
            frontier_phi_18_40_ladder = _2068.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2068.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2068.x * cbModelParam._m0[1u].y;
        }
        _1433 = frontier_phi_18_40_ladder_2;
        _1435 = frontier_phi_18_40_ladder_1;
        _1437 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_506, _507, _508), _1351);
        _1433 = _1421.x * cbModelParam._m0[1u].y;
        _1435 = _1421.y * cbModelParam._m0[1u].y;
        _1437 = _1421.z * cbModelParam._m0[1u].y;
    }
    float _1441 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _317);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1441 : min(cbModelParam._m0[25u].w, _1441));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1499 = fma(_570, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562)) + cbModelParam._m0[21u].w;
        float _1503 = fma(_570, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562)) + cbModelParam._m0[22u].w;
        float _1507 = fma(_570, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562)) + cbModelParam._m0[23u].w;
        float _1510 = fma(_508, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506));
        float _1513 = fma(_508, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506));
        float _1516 = fma(_508, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506));
        float _1679;
        if (_1510 > 0.0)
        {
            _1679 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1679 = frontier_phi_30_26_ladder;
        }
        float _1958;
        if (_1513 > 0.0)
        {
            _1958 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1958 = frontier_phi_42_37_ladder;
        }
        float _2171;
        if (_1516 > 0.0)
        {
            _2171 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2171 = frontier_phi_51_48_ladder;
        }
        float _2173 = isnan(_1958) ? _1679 : (isnan(_1679) ? _1958 : min(_1679, _1958));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1510) + _1499;
        float _2179 = (_2174 * _1513) + _1503;
        float _2180 = (_2174 * _1516) + _1507;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2181;
        float _2184 = _2181 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2180 > _2184) || ((_2180 < _2182) || ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 < _2182) || (_2178 > _2184))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2180, cbModelParam._m0[17u].z, fma(_2179, cbModelParam._m0[17u].y, _2178 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2180, cbModelParam._m0[18u].z, fma(_2179, cbModelParam._m0[18u].y, _2178 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2180, cbModelParam._m0[19u].z, fma(_2179, cbModelParam._m0[19u].y, _2178 * cbModelParam._m0[19u].x))), _1442);
            frontier_phi_27_51_ladder = _2380.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2380.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2380.x * cbModelParam._m0[1u].z;
        }
        _1535 = frontier_phi_27_51_ladder_2;
        _1537 = frontier_phi_27_51_ladder_1;
        _1539 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_506, _507, _508), _1442);
        _1535 = _1519.x * cbModelParam._m0[1u].z;
        _1537 = _1519.y * cbModelParam._m0[1u].z;
        _1539 = _1519.z * cbModelParam._m0[1u].z;
    }
    float _1552 = (((_533 * _483) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_533 * _485) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_533 * _486) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1559 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, _1552 * cbSceneParam._m0[91u].x));
    vec4 _1573 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_417, _418));
    float _1575 = _1573.w;
    float _1587 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1575);
    float _1588 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1575);
    float _1589 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1575);
    uvec4 _1593 = floatBitsToUint(cbInstanceData._m0[_457 + 5u]);
    uint _1595 = _1593.x * 14u;
    uint _1596 = _1595 + 13u;
    float _1603 = _498 + (-1.0);
    float _1608 = (cbLight._m0[_1596].x * _1603) + 1.0;
    float _1609 = (cbLight._m0[_1596].y * _1603) + 1.0;
    float _1610 = (cbLight._m0[_1596].z * _1603) + 1.0;
    float _1611 = (cbLight._m0[_1596].w * _1603) + 1.0;
    uint _1612 = _1595 + 5u;
    float _1618 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    uint _1622 = _1595 + 4u;
    float _1632 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    uint _1636 = _1595 | 1u;
    float _1647 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_313, _314, _315));
    float _1650 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_313, _314, _315));
    float _3853 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _3864 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1655 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.3183098733425140380859375;
    float _1657 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1664 = ((cbLight._m0[_1612].x * _1618) * _1657) + (((cbLight._m0[_1622].x * _1587) * _1632) * _1655);
    float _1665 = ((_1618 * cbLight._m0[_1612].y) * _1657) + (((cbLight._m0[_1622].y * _1588) * _1632) * _1655);
    float _1666 = ((_1618 * cbLight._m0[_1612].z) * _1657) + (((cbLight._m0[_1622].z * _1589) * _1632) * _1655);
    uvec4 _1671 = floatBitsToUint(cbLight._m0[_1595 + 12u]);
    bool _1673 = _1671.x == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1673)
    {
        _1684 = _1664;
        _1686 = _1665;
        _1688 = _1666;
    }
    else
    {
        uint _1692 = _1595 + 6u;
        float _1708 = (dot(vec3(cbLight._m0[_1595 + 2u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1709 = _1708 * _1708;
        float _3875 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1711 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1684 = (((cbLight._m0[_1692].x * 0.3183098733425140380859375) * _1710) * _1711) + _1664;
        _1686 = (((cbLight._m0[_1692].y * 0.3183098733425140380859375) * _1710) * _1711) + _1665;
        _1688 = (((cbLight._m0[_1692].z * 0.3183098733425140380859375) * _1710) * _1711) + _1666;
    }
    bool _1691 = _1671.y == 0u;
    float _1729;
    float _1731;
    float _1733;
    if (_1691)
    {
        _1729 = _1684;
        _1731 = _1686;
        _1733 = _1688;
    }
    else
    {
        uint _1902 = _1595 + 7u;
        float _1918 = (dot(vec3(cbLight._m0[_1595 + 3u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _3891 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1921 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1729 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1684;
        _1731 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1686;
        _1733 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1688;
    }
    uint _1736 = _1595 + 8u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1595].w)) * _317) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1595].x + _396;
    float _1752 = cbLight._m0[_1595].y + _397;
    float _1753 = cbLight._m0[_1595].z + _398;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1595].xyz));
    float _3907 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _1765 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1766 = dot(vec3(_313, _314, _315), vec3(_1758, _1759, _1760));
    float _3929 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_1758, _1759, _1760));
    float _3940 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = _1750 * _1750;
    float _1778 = ((_1769 * _1769) * (_1774 + (-1.0))) + 1.0;
    float _1786 = exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0);
    float _1787 = 0.959999978542327880859375 - _480;
    float _1789 = 0.959999978542327880859375 - _481;
    float _1790 = 0.959999978542327880859375 - _482;
    float _1797 = 1.0 - _1750;
    float _1808 = (0.5 / (((_1765 * ((_1764 * _1797) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1797) + _1750) * _1764))) * _1764;
    float _3951 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1774 / ((_1778 * _1778) * 3.141590118408203125));
    uint _1824 = _1595 + 9u;
    float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1636].w)) * _317) * 0.949999988079071044921875);
    float _1836 = _1835 * _1835;
    float _1837 = cbLight._m0[_1636].x + _396;
    float _1838 = cbLight._m0[_1636].y + _397;
    float _1839 = cbLight._m0[_1636].z + _398;
    float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
    float _1844 = _1843 * _1837;
    float _1845 = _1843 * _1838;
    float _1846 = _1843 * _1839;
    float _1847 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1636].xyz));
    float _3962 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1851 = dot(vec3(_313, _314, _315), vec3(_1844, _1845, _1846));
    float _3973 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_1844, _1845, _1846));
    float _3984 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1836 * _1836;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1870 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1877 = 1.0 - _1836;
    float _1887 = (0.5 / (((_1765 * ((_1850 * _1877) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1877) + _1836) * _1850))) * _1850;
    float _3995 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    float _1899 = (((((_1870 * _1787) + _483) * cbLight._m0[_1824].x) * _1889) * _1618) + ((((cbLight._m0[_1736].x * _1587) * ((_1786 * _1787) + _483)) * _1810) * _1632);
    float _1900 = (((((_1870 * _1789) + _485) * cbLight._m0[_1824].y) * _1889) * _1618) + ((((cbLight._m0[_1736].y * _1588) * ((_1786 * _1789) + _485)) * _1810) * _1632);
    float _1901 = (((((_1870 * _1790) + _486) * cbLight._m0[_1824].z) * _1889) * _1618) + ((((cbLight._m0[_1736].z * _1589) * ((_1786 * _1790) + _486)) * _1810) * _1632);
    float _1963;
    float _1965;
    float _1967;
    if (_1673)
    {
        _1963 = _1899;
        _1965 = _1900;
        _1967 = _1901;
    }
    else
    {
        uint _1969 = _1595 + 2u;
        uint _1973 = _1595 + 10u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _317) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _396;
        float _1990 = cbLight._m0[_1969].y + _397;
        float _1991 = cbLight._m0[_1969].z + _398;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1969].xyz));
        float _4006 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2003 = dot(vec3(_313, _314, _315), vec3(_1996, _1997, _1998));
        float _4017 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _4028 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
        float _2029 = 1.0 - _1988;
        float _2039 = (0.5 / (((_1765 * ((_2002 * _2029) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2029) + _1988) * _2002))) * _2002;
        float _4039 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2041 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2042 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1963 = (((((_2022 * _1787) + _483) * cbLight._m0[_1973].x) * _2041) * _2042) + _1899;
        _1965 = (((((_2022 * _1789) + _485) * cbLight._m0[_1973].y) * _2041) * _2042) + _1900;
        _1967 = (((((_2022 * _1790) + _486) * cbLight._m0[_1973].z) * _2041) * _2042) + _1901;
    }
    float _2077;
    float _2079;
    float _2081;
    if (_1691)
    {
        _2077 = _1963;
        _2079 = _1965;
        _2081 = _1967;
    }
    else
    {
        uint _2088 = _1595 + 3u;
        uint _2092 = _1595 + 11u;
        float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _317) * 0.949999988079071044921875);
        float _2107 = _2106 * _2106;
        float _2108 = cbLight._m0[_2088].x + _396;
        float _2109 = cbLight._m0[_2088].y + _397;
        float _2110 = cbLight._m0[_2088].z + _398;
        float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
        float _2115 = _2114 * _2108;
        float _2116 = _2114 * _2109;
        float _2117 = _2114 * _2110;
        float _2118 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2088].xyz));
        float _4055 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2122 = dot(vec3(_313, _314, _315), vec3(_2115, _2116, _2117));
        float _4066 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2126 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2115, _2116, _2117));
        float _4077 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2130 = _2107 * _2107;
        float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
        float _2141 = exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0);
        float _2148 = 1.0 - _2107;
        float _2158 = (0.5 / (((_1765 * ((_2121 * _2148) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2148) + _2107) * _2121))) * _2121;
        float _4088 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2160 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
        float _2161 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _2077 = (((((_2141 * _1787) + _483) * cbLight._m0[_2092].x) * _2160) * _2161) + _1963;
        _2079 = (((((_2141 * _1789) + _485) * cbLight._m0[_2092].y) * _2160) * _2161) + _1965;
        _2081 = (((((_2141 * _1790) + _486) * cbLight._m0[_2092].z) * _2160) * _2161) + _1967;
    }
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    if (_1593.y == 0u)
    {
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2236;
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2236;
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2236;
        uvec4 _2251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2252 = _2251.x;
        uint _2263 = uint((float(_2251.y) * floor(float(uint(cbSceneParam._m0[85u].y * _418) / _2252))) + floor(float(uint(cbSceneParam._m0[85u].x * _417) / _2252)));
        float _2273 = (log2(_2239 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2274 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        uint _2277 = uint(isnan(14.0) ? _2274 : (isnan(_2274) ? 14.0 : min(_2274, 14.0)));
        uvec4 _2282 = texelFetch(g_lightClusterGridBuffer, int(((_2277 << 2u) + (_2263 << 6u)) >> 2u));
        uint _2283 = _2282.x;
        uint _2284 = _2251.z;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((((1u << ((_2284 >> 4u) & 15u)) + 4294967295u) & _2283) == 0u) || ((_2284 & 240u) == 0u))
        {
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
        }
        else
        {
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            uint _2543 = 0u;
            uint _2552;
            bool _2553;
            for (;;)
            {
                _2552 = texelFetch(g_lightClassification, int((((_2277 << 5u) + (_2263 << 9u)) + (_2543 << 2u)) >> 2u)).x;
                _2553 = _2552 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2553)
                {
                    frontier_phi_68_pred = _2539;
                    frontier_phi_68_pred_1 = _2542;
                    frontier_phi_68_pred_2 = _2541;
                    frontier_phi_68_pred_3 = _2540;
                    frontier_phi_68_pred_4 = _2538;
                    frontier_phi_68_pred_5 = _2537;
                }
                else
                {
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    uint _2688;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2552;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    for (;;)
                    {
                        uint _2692 = uint(findLSB(_2688)) + (_2543 << 5u);
                        uint _2689 = (_2688 + 4294967295u) & _2688;
                        uint _2694 = _2692 * 48u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2714 = (_2692 * 48u) + 4u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2733 = (_2692 * 48u) + 8u;
                        vec3 _2744 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x));
                        float _2748 = _2708.x - _2237;
                        float _2749 = _2708.y - _2238;
                        float _2750 = _2708.z - _2239;
                        float _2751 = dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750));
                        float _2754 = inversesqrt(_2751);
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2758 = dot(vec3(_438, _441, _444), vec3(_2755, _2756, _2757));
                        float _2763 = 1.0 - (_2751 * _2708.w);
                        float _4114 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2765 = sqrt(_2751) * _2727.w;
                        float _2768 = 1.39999997615814208984375 / (_2765 + 1.39999997615814208984375);
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * _2758) + _2769;
                        float _2775 = _2765 * _2765;
                        float _2779 = ((isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))) * _2764) / ((_2775 * 0.699999988079071044921875) + 1.0);
                        float _2783 = (-0.0) - _2237;
                        float _2784 = (-0.0) - _2238;
                        float _2785 = (-0.0) - _2239;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2790 = _2789 * _2783;
                        float _2791 = _2789 * _2784;
                        float _2792 = _2789 * _2785;
                        float _2800 = exp2(log2(1.0 / ((_2775 * 3.5) + 5.0)) * 0.25);
                        float _2801 = 1.0 - _514;
                        float _2808 = sqrt(1.0 - ((1.0 - (_2801 * _2801)) * (1.0 - (_2800 * _2800))));
                        float _2809 = _2808 * _2808;
                        float _2810 = _2809 * _2809;
                        float _2811 = _2790 + _2755;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
                        float _2821 = dot(vec3(_438, _441, _444), vec3(_2790, _2791, _2792));
                        float _4130 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2824 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2825 = dot(vec3(_438, _441, _444), vec3(_2817 * _2811, _2817 * _2812, _2817 * _2813));
                        float _4141 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2828 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2832 = ((_2828 * _2828) * (_2810 + (-1.0))) + 1.0;
                        float _2833 = _2768 * _2809;
                        float _2834 = _2833 * _2833;
                        float _2837 = ((1.0 - _2834) * _2758) + _2834;
                        float _4152 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2839 = 1.0 - _2809;
                        float _2849 = (0.5 / (((_2838 * ((_2824 * _2839) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2838 * _2839) + _2809) * _2824))) * _2838;
                        float _4163 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2860 = (((_2810 * 3.1415927410125732421875) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) / ((_2832 * _2832) * ((_2775 * 2.1991131305694580078125) + 3.141590118408203125))) * _2764;
                        _2612 = (_2779 * _2727.x) + _2685;
                        _2613 = (_2779 * _2727.y) + _2686;
                        _2614 = (_2779 * _2727.z) + _2687;
                        _2609 = (_2860 * _2744.x) + _2682;
                        _2610 = (_2860 * _2744.y) + _2683;
                        _2611 = (_2860 * _2744.z) + _2684;
                        if (_2689 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2689;
                        }
                    }
                    frontier_phi_68_pred = _2611;
                    frontier_phi_68_pred_1 = _2614;
                    frontier_phi_68_pred_2 = _2613;
                    frontier_phi_68_pred_3 = _2612;
                    frontier_phi_68_pred_4 = _2610;
                    frontier_phi_68_pred_5 = _2609;
                }
                _2390 = frontier_phi_68_pred;
                _2396 = frontier_phi_68_pred_1;
                _2394 = frontier_phi_68_pred_2;
                _2392 = frontier_phi_68_pred_3;
                _2388 = frontier_phi_68_pred_4;
                _2386 = frontier_phi_68_pred_5;
                uint _2544 = _2543 + 1u;
                if (_2544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2537 = _2386;
                    _2538 = _2388;
                    _2539 = _2390;
                    _2540 = _2392;
                    _2541 = _2394;
                    _2542 = _2396;
                    _2543 = _2544;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
        }
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.z;
        uint _2402 = (_2400 >> 8u) & 15u;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((4294967295u << _2402) & _2283) == 0u)
        {
            _2505 = _2385;
            _2507 = _2387;
            _2509 = _2389;
            _2511 = _2391;
            _2513 = _2393;
            _2515 = _2395;
        }
        else
        {
            float _2530 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
            float _2531 = _2530 * _2237;
            float _2532 = _2530 * _2238;
            float _2533 = _2530 * _2239;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2402 < ((_2400 >> 12u) & 15u))
            {
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2665 = _2385;
                float _2666 = _2387;
                float _2667 = _2389;
                float _2668 = _2391;
                float _2669 = _2393;
                float _2670 = _2395;
                uint _2671 = _2402;
                uint _2680;
                bool _2681;
                for (;;)
                {
                    _2680 = texelFetch(g_lightClassification, int((((_2277 << 5u) + (_2263 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                    _2681 = _2680 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2681)
                    {
                        frontier_phi_79_pred = _2670;
                        frontier_phi_79_pred_1 = _2669;
                        frontier_phi_79_pred_2 = _2668;
                        frontier_phi_79_pred_3 = _2667;
                        frontier_phi_79_pred_4 = _2666;
                        frontier_phi_79_pred_5 = _2665;
                    }
                    else
                    {
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        uint _2893 = _2680;
                        uint _2894;
                        vec4 _2919;
                        float _2920;
                        vec4 _2935;
                        vec3 _2947;
                        vec4 _2963;
                        vec4 _2979;
                        float _3026;
                        bool _3027;
                        for (;;)
                        {
                            uint _2904 = ((_2671 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2893));
                            _2894 = (_2893 + 4294967295u) & _2893;
                            uint _2906 = _2904 * 40u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2920 = _2919.w;
                            uint _2922 = (_2904 * 40u) + 4u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2937 = (_2904 * 40u) + 8u;
                            _2947 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x));
                            uint _2950 = (_2904 * 40u) + 16u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2966 = (_2904 * 40u) + 20u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2982 = (_2904 * 40u) + 24u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _3001 = (_2904 * 40u) + 28u;
                            vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3026 = fma(_2239, _3014.z, fma(_2238, _3014.y, _3014.x * _2237)) + _3014.w;
                            _3027 = !((fma(_2239, _2995.z, fma(_2238, _2995.y, _2995.x * _2237)) + _2995.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3027)
                            {
                                float _3054 = _2919.x - _2237;
                                float _3055 = _2919.y - _2238;
                                float _3056 = _2919.z - _2239;
                                float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                                float _3060 = inversesqrt(_3057);
                                float _3061 = _3060 * _3054;
                                float _3062 = _3060 * _3055;
                                float _3063 = _3060 * _3056;
                                float _3067 = 1.0 - (_3057 / (_2920 * _2920));
                                float _4174 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3072 = sqrt(_3057) * _2935.w;
                                float _3074 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                                float _3075 = _3074 * _3074;
                                float _3078 = ((1.0 - _3075) * dot(vec3(_3061, _3062, _3063), vec3(_438, _441, _444))) + _3075;
                                float _3081 = _3072 * _3072;
                                float _3085 = (fma(_2239, _2963.z, fma(_2238, _2963.y, _2963.x * _2237)) + _2963.w) / _3026;
                                float _3086 = (fma(_2239, _2979.z, fma(_2238, _2979.y, _2979.x * _2237)) + _2979.w) / _3026;
                                float _3090 = 1.0 - dot(vec2(_3085, _3086), vec2(_3085, _3086));
                                float _4190 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3092 = _3091 * (((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3068) / ((_3081 * 0.699999988079071044921875) + 1.0));
                                float _3104 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                                float _3105 = 1.0 - _514;
                                float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                                float _3113 = _3112 * _3112;
                                float _3114 = _3113 * _3113;
                                float _3115 = _3061 - _2531;
                                float _3116 = _3062 - _2532;
                                float _3117 = _3063 - _2533;
                                float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                                float _3125 = dot(vec3(_438, _441, _444), vec3((-0.0) - _2531, (-0.0) - _2532, (-0.0) - _2533));
                                float _4201 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3128 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3129 = dot(vec3(_438, _441, _444), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                                float _4212 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3132 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                                float _3137 = _3074 * _3113;
                                float _3138 = _3137 * _3137;
                                float _3144 = ((1.0 - _3138) * dot(vec3(_438, _441, _444), vec3(_3061, _3062, _3063))) + _3138;
                                float _4223 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3145 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3146 = 1.0 - _3113;
                                float _3156 = (0.5 / (((_3145 * ((_3128 * _3146) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3113) * _3128))) * _3145;
                                float _4234 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3166 = (_3091 * _3068) * (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_3136 * _3136) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3092 * _2935.z;
                                frontier_phi_85_pred_1 = _3092 * _2935.y;
                                frontier_phi_85_pred_2 = _3092 * _2935.x;
                                frontier_phi_85_pred_3 = _3166 * _2947.z;
                                frontier_phi_85_pred_4 = _3166 * _2947.y;
                                frontier_phi_85_pred_5 = _3166 * _2947.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_85_pred;
                            _3174 = frontier_phi_85_pred_1;
                            _3173 = frontier_phi_85_pred_2;
                            _3172 = frontier_phi_85_pred_3;
                            _3171 = frontier_phi_85_pred_4;
                            _3170 = frontier_phi_85_pred_5;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            if (_2894 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2894;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2879;
                        frontier_phi_79_pred_1 = _2878;
                        frontier_phi_79_pred_2 = _2877;
                        frontier_phi_79_pred_3 = _2876;
                        frontier_phi_79_pred_4 = _2875;
                        frontier_phi_79_pred_5 = _2874;
                    }
                    _2516 = frontier_phi_79_pred;
                    _2514 = frontier_phi_79_pred_1;
                    _2512 = frontier_phi_79_pred_2;
                    _2510 = frontier_phi_79_pred_3;
                    _2508 = frontier_phi_79_pred_4;
                    _2506 = frontier_phi_79_pred_5;
                    uint _2672 = _2671 + 1u;
                    if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2665 = _2506;
                        _2666 = _2508;
                        _2667 = _2510;
                        _2668 = _2512;
                        _2669 = _2514;
                        _2670 = _2516;
                        _2671 = _2672;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2512;
                frontier_phi_60_61_ladder_1 = _2516;
                frontier_phi_60_61_ladder_2 = _2514;
                frontier_phi_60_61_ladder_3 = _2510;
                frontier_phi_60_61_ladder_4 = _2508;
                frontier_phi_60_61_ladder_5 = _2506;
            }
            else
            {
                frontier_phi_60_61_ladder = _2391;
                frontier_phi_60_61_ladder_1 = _2395;
                frontier_phi_60_61_ladder_2 = _2393;
                frontier_phi_60_61_ladder_3 = _2389;
                frontier_phi_60_61_ladder_4 = _2387;
                frontier_phi_60_61_ladder_5 = _2385;
            }
            _2505 = frontier_phi_60_61_ladder_5;
            _2507 = frontier_phi_60_61_ladder_4;
            _2509 = frontier_phi_60_61_ladder_3;
            _2511 = frontier_phi_60_61_ladder;
            _2513 = frontier_phi_60_61_ladder_2;
            _2515 = frontier_phi_60_61_ladder_1;
        }
        float _2520 = isnan(1.0) ? _498 : (isnan(_498) ? 1.0 : min(_498, 1.0));
        _2295 = (_2520 * _2511) + _1729;
        _2297 = (_2520 * _2513) + _1731;
        _2299 = (_2520 * _2515) + _1733;
        _2301 = ((_2505 * _483) * _2520) + _2077;
        _2303 = ((_2507 * _485) * _2520) + _2079;
        _2305 = ((_2509 * _486) * _2520) + _2081;
    }
    else
    {
        _2295 = _1729;
        _2297 = _1731;
        _2299 = _1733;
        _2301 = _2077;
        _2303 = _2079;
        _2305 = _2081;
    }
    float _4250 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4261 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4272 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4283 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _2323 = ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2295 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _498))) + ((_2301 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2324 = ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2297 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _498))) + ((_2303 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2325 = ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2299 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _498))) + ((_2305 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2330 = cbInstanceData._m0[_457 + 6u].w * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)));
    float _2335 = _417 / cbSceneParam._m0[86u].x;
    float _2336 = _418 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2410 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2411 = _2410 / _337;
        float _2422 = _2411 * _389;
        float _2423 = _390 * _2411;
        float _2424 = (-0.0) - _2423;
        float _2425 = _2411 * _391;
        float _2427 = (cbSceneParam._m0[77u].w * _2424) / _2410;
        float _2428 = _2427 + cbSceneParam._m0[79u].w;
        float _2429 = cbSceneParam._m0[79u].w - _2423;
        float _2435 = sqrt(((_2422 * _2422) + (_2423 * _2423)) + (_2425 * _2425));
        float _2438 = (1.0 - (cbSceneParam._m0[77u].w / _2410)) * _2435;
        float _2443 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2445 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2622;
        if (abs((_2424 - _2427) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2622 = ((((_2428 > 0.0) ? exp2(_2443 * _2428) : (2.0 - exp2(_2445 * _2428))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2438;
        }
        else
        {
            float _2566 = 1.0 / cbSceneParam._m0[80u].x;
            float _2567 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : max(_2428, _2429));
            float _2568 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : min(_2428, _2429));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            _2622 = ((abs(_2435 / _2424) * cbSceneParam._m0[80u].y) * ((((_2577 - _2578) * 2.0) - ((exp2(_2443 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0)))) - exp2(_2443 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0))))) * _2566)) - ((exp2(_2445 * _2577) - exp2(_2445 * _2578)) * _2566))) + (_2438 * cbSceneParam._m0[80u].z);
        }
        vec4 _2624 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2633 = exp2((_2622 * (-1.44269502162933349609375)) * (1.0 - _2624.w));
        float _2634 = log2(_2633);
        float _2650 = log2(_2355);
        _2447 = (exp2(_2650 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].x)) * _2624.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2449 = (exp2(_2650 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].y)) * _2624.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2451 = (exp2(_2650 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].z)) * _2624.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2453 = _2633 * _2355;
    }
    else
    {
        _2447 = _2352;
        _2449 = _2353;
        _2451 = _2354;
        _2453 = _2355;
    }
    bool _2660;
    vec4 _2463;
    vec4 _2485;
    float _2487;
    float _2491;
    float _2492;
    float _2493;
    float _2494;
    bool _2504;
    for (;;)
    {
        _2463 = cbMatDynParam._m0[0u];
        float _2465 = roundEven(_2463.y);
        bool _2466 = _2465 == 3.0;
        float _2467 = log2(_2453);
        float _2474 = exp2(_2467 * cbSceneParam._m0[78u].x) * _2323;
        float _2475 = exp2(_2467 * cbSceneParam._m0[78u].y) * _2324;
        float _2476 = exp2(_2467 * cbSceneParam._m0[78u].z) * _2325;
        float _2483 = _405 + (-0.5);
        _2485 = cbMtdParam._m0[1u];
        _2487 = _2485.y * _2483;
        float _2490 = (_2465 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2491 = _2490 * (_2466 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2447)));
        _2492 = _2490 * (_2466 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2449)));
        _2493 = _2490 * (_2466 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2451)));
        _2494 = _2483 * 0.999000012874603271484375;
        _2504 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2504)
        {
            if ((cbInstanceData._m0[_457 + 7u].x + _2494) < 0.5)
            {
                _2660 = true;
                break;
            }
        }
        uint _2601 = _459 + uint(_2463.w);
        if ((cbInstanceData._m0[_2601].w < 1.0) && ((cbInstanceData._m0[_2601].w + _2494) < 0.5))
        {
            _2660 = true;
            break;
        }
        if ((_2487 + _237) < _2485.x)
        {
            _2660 = true;
            break;
        }
        _2660 = false;
        break;
    }
    float _2865;
    if (_2660)
    {
        discard_state = true;
        _2865 = 0.0;
    }
    else
    {
        _2865 = _2330;
    }
    SV_Target.x = _2491;
    SV_Target.y = _2492;
    SV_Target.z = _2493;
    SV_Target.w = _2865;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2330;
    discard_exit();
}


