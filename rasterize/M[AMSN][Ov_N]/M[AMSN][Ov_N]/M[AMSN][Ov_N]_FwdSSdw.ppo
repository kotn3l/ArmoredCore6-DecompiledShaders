#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _857;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _227 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _227.x;
    float _231 = _227.y;
    float _232 = _227.z;
    float _233 = _227.w;
    vec4 _250 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _272 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _279 = (_272.x * 2.0) + (-1.0);
    float _280 = (_272.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_279, _280), vec2(_279, _280));
    float _3220 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))));
    float _290 = ((_250.z - _276) * cbMtdParam._m0[9u].y) + _276;
    float _3231 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _294 = _279 + (((_250.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _295 = _280 + (((_250.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _298 = fma(_287, _211, fma(_295, _203 * TANGENT.x, (_189 * _182) * _294));
    float _301 = fma(_287, _212, fma(_295, _203 * TANGENT.y, (_189 * _183) * _294));
    float _304 = fma(_287, _213, fma(_295, _203 * TANGENT.z, (_189 * _184) * _294));
    float _308 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _309 = _308 * _298;
    float _310 = _308 * _301;
    float _311 = _308 * _304;
    float _3242 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _312 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _3253 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _313 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3275 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3286 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3297 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _317 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    float _400 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _401 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_311, cbSceneParam._m0[5u].z, fma(_310, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _309));
    float _425 = fma(_311, cbSceneParam._m0[6u].z, fma(_310, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _309));
    float _428 = fma(_311, cbSceneParam._m0[7u].z, fma(_310, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _309));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = (_441 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _450 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_444].x;
    float _451 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * cbInstanceData._m0[_444].y;
    float _452 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * cbInstanceData._m0[_444].z;
    float _3308 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _3330 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _456 = 1.0 - _317;
    float _457 = _453 * _456;
    float _458 = _454 * _456;
    float _459 = _455 * _456;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _317;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _317;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _317;
    float _467 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    vec4 _479 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _400, cbSceneParam._m0[86u].y * _401));
    float _482 = _479.x * TEXCOORD.z;
    float _483 = dot(vec3(_309, _310, _311), vec3(_392, _393, _394));
    float _486 = _483 * 2.0;
    float _490 = (_486 * _309) - _392;
    float _491 = (_486 * _310) - _393;
    float _492 = (_486 * _311) - _394;
    float _496 = abs(dot(vec3(_392, _393, _394), vec3(_309, _310, _311)));
    float _3341 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _498 = sqrt(_313);
    float _511 = exp2((_498 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_498 * 3.0));
    float _517 = (1.0 - _511) * ((_498 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _518 = _511 * _498;
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_554, cbModelParam._m0[26u].z, fma(_550, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546));
        float _585 = fma(_554, cbModelParam._m0[27u].z, fma(_550, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546));
        float _589 = fma(_554, cbModelParam._m0[28u].z, fma(_550, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546));
        float _614 = _546 + _309;
        float _615 = _550 + _310;
        float _616 = _554 + _311;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_309, _310, _311), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3389 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_309, _310, _311), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3422 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_309, _310, _311), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3455 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_554, cbModelParam._m0[30u].z, fma(_550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _546));
        float _901 = fma(_554, cbModelParam._m0[31u].z, fma(_550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _546));
        float _905 = fma(_554, cbModelParam._m0[32u].z, fma(_550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _546));
        float _928 = _546 + _309;
        float _929 = _550 + _310;
        float _930 = _554 + _311;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_309, _310, _311), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3518 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_309, _310, _311), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3551 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_309, _310, _311), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3584 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _857;
        _1167 = _857;
        _1168 = _857;
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _490 * 0.5;
    float _1235 = _491 * 0.5;
    float _1236 = _492 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _860, _863, _866));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_858, _861, _864, _867));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_859, _862, _865, _868));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _313);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_554, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_554, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_554, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_492, cbModelParam._m0[13u].z, fma(_491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490));
        float _1366 = fma(_492, cbModelParam._m0[14u].z, fma(_491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490));
        float _1369 = fma(_492, cbModelParam._m0[15u].z, fma(_491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1397 = frontier_phi_16_14_ladder;
        }
        float _1626;
        if (_1366 > 0.0)
        {
            _1626 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1626 = frontier_phi_25_21_ladder;
        }
        float _1883;
        if (_1369 > 0.0)
        {
            _1883 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1883 = frontier_phi_37_32_ladder;
        }
        float _1885 = isnan(_1626) ? _1397 : (isnan(_1397) ? _1626 : min(_1397, _1626));
        float _1886 = isnan(_1883) ? _1885 : (isnan(_1885) ? _1883 : min(_1885, _1883));
        float _1890 = (_1886 * _1363) + _1352;
        float _1891 = (_1886 * _1366) + _1356;
        float _1892 = (_1886 * _1369) + _1360;
        float _1893 = _1886 * 9.9999997473787516355514526367188e-05;
        float _1895 = (-1.0) - _1893;
        float _1897 = _1893 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1892 > _1897) || ((_1892 < _1895) || ((_1891 > _1897) || ((_1891 < _1895) || ((_1890 < _1895) || (_1890 > _1897))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1892, cbModelParam._m0[9u].z, fma(_1891, cbModelParam._m0[9u].y, _1890 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1892, cbModelParam._m0[10u].z, fma(_1891, cbModelParam._m0[10u].y, _1890 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1892, cbModelParam._m0[11u].z, fma(_1891, cbModelParam._m0[11u].y, _1890 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_15_37_ladder = _2020.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2020.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2020.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_15_37_ladder_2;
        _1387 = frontier_phi_15_37_ladder_1;
        _1389 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_490, _491, _492), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _313);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_554, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_554, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_554, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_492, cbModelParam._m0[21u].z, fma(_491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490));
        float _1465 = fma(_492, cbModelParam._m0[22u].z, fma(_491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490));
        float _1468 = fma(_492, cbModelParam._m0[23u].z, fma(_491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490));
        float _1631;
        if (_1462 > 0.0)
        {
            _1631 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1631 = frontier_phi_27_23_ladder;
        }
        float _1910;
        if (_1465 > 0.0)
        {
            _1910 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1910 = frontier_phi_39_34_ladder;
        }
        float _2123;
        if (_1468 > 0.0)
        {
            _2123 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2123 = frontier_phi_48_45_ladder;
        }
        float _2125 = isnan(_1910) ? _1631 : (isnan(_1631) ? _1910 : min(_1631, _1910));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1462) + _1451;
        float _2131 = (_2126 * _1465) + _1455;
        float _2132 = (_2126 * _1468) + _1459;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2133;
        float _2136 = _2133 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2132 > _2136) || ((_2132 < _2134) || ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 < _2134) || (_2130 > _2136))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2132, cbModelParam._m0[17u].z, fma(_2131, cbModelParam._m0[17u].y, _2130 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2132, cbModelParam._m0[18u].z, fma(_2131, cbModelParam._m0[18u].y, _2130 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2132, cbModelParam._m0[19u].z, fma(_2131, cbModelParam._m0[19u].y, _2130 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_24_48_ladder = _2332.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2332.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2332.x * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_24_48_ladder_2;
        _1489 = frontier_phi_24_48_ladder_1;
        _1491 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_490, _491, _492), _1394);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1504 = (((_517 * _467) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_517 * _469) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_517 * _470) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    vec4 _1525 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_400, _401));
    float _1527 = _1525.w;
    float _1539 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1527);
    float _1540 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1527);
    float _1541 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1527);
    uvec4 _1545 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1547 = _1545.x * 14u;
    uint _1548 = _1547 + 13u;
    float _1555 = _482 + (-1.0);
    float _1560 = (cbLight._m0[_1548].x * _1555) + 1.0;
    float _1561 = (cbLight._m0[_1548].y * _1555) + 1.0;
    float _1562 = (cbLight._m0[_1548].z * _1555) + 1.0;
    float _1563 = (cbLight._m0[_1548].w * _1555) + 1.0;
    uint _1564 = _1547 + 5u;
    float _1570 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
    uint _1574 = _1547 + 4u;
    float _1584 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1588 = _1547 | 1u;
    float _1599 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_309, _310, _311));
    float _1602 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_309, _310, _311));
    float _3720 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _3731 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1607 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.3183098733425140380859375;
    float _1609 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.3183098733425140380859375;
    float _1616 = ((cbLight._m0[_1564].x * _1570) * _1609) + (((cbLight._m0[_1574].x * _1539) * _1584) * _1607);
    float _1617 = ((_1570 * cbLight._m0[_1564].y) * _1609) + (((cbLight._m0[_1574].y * _1540) * _1584) * _1607);
    float _1618 = ((_1570 * cbLight._m0[_1564].z) * _1609) + (((cbLight._m0[_1574].z * _1541) * _1584) * _1607);
    uvec4 _1623 = floatBitsToUint(cbLight._m0[_1547 + 12u]);
    bool _1625 = _1623.x == 0u;
    float _1636;
    float _1638;
    float _1640;
    if (_1625)
    {
        _1636 = _1616;
        _1638 = _1617;
        _1640 = _1618;
    }
    else
    {
        uint _1644 = _1547 + 6u;
        float _1660 = (dot(vec3(cbLight._m0[_1547 + 2u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1661 = _1660 * _1660;
        float _3742 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1663 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1636 = (((cbLight._m0[_1644].x * 0.3183098733425140380859375) * _1662) * _1663) + _1616;
        _1638 = (((cbLight._m0[_1644].y * 0.3183098733425140380859375) * _1662) * _1663) + _1617;
        _1640 = (((cbLight._m0[_1644].z * 0.3183098733425140380859375) * _1662) * _1663) + _1618;
    }
    bool _1643 = _1623.y == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1643)
    {
        _1681 = _1636;
        _1683 = _1638;
        _1685 = _1640;
    }
    else
    {
        uint _1854 = _1547 + 7u;
        float _1870 = (dot(vec3(cbLight._m0[_1547 + 3u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3758 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1873 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _1681 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1636;
        _1683 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1638;
        _1685 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1640;
    }
    uint _1688 = _1547 + 8u;
    float _1701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1547].w)) * _313) * 0.949999988079071044921875);
    float _1702 = _1701 * _1701;
    float _1703 = cbLight._m0[_1547].x + _392;
    float _1704 = cbLight._m0[_1547].y + _393;
    float _1705 = cbLight._m0[_1547].z + _394;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1710 = _1709 * _1703;
    float _1711 = _1709 * _1704;
    float _1712 = _1709 * _1705;
    float _1713 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1547].xyz));
    float _3774 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _1717 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1718 = dot(vec3(_309, _310, _311), vec3(_1710, _1711, _1712));
    float _3796 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1722 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_1710, _1711, _1712));
    float _3807 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1726 = _1702 * _1702;
    float _1730 = ((_1721 * _1721) * (_1726 + (-1.0))) + 1.0;
    float _1738 = exp2(log2(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * 5.0);
    float _1739 = 0.959999978542327880859375 - _464;
    float _1741 = 0.959999978542327880859375 - _465;
    float _1742 = 0.959999978542327880859375 - _466;
    float _1749 = 1.0 - _1702;
    float _1760 = (0.5 / (((_1717 * ((_1716 * _1749) + _1702)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1749) + _1702) * _1716))) * _1716;
    float _3818 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1762 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1726 / ((_1730 * _1730) * 3.141590118408203125));
    uint _1776 = _1547 + 9u;
    float _1787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _313) * 0.949999988079071044921875);
    float _1788 = _1787 * _1787;
    float _1789 = cbLight._m0[_1588].x + _392;
    float _1790 = cbLight._m0[_1588].y + _393;
    float _1791 = cbLight._m0[_1588].z + _394;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1796 = _1795 * _1789;
    float _1797 = _1795 * _1790;
    float _1798 = _1795 * _1791;
    float _1799 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1588].xyz));
    float _3829 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1803 = dot(vec3(_309, _310, _311), vec3(_1796, _1797, _1798));
    float _3840 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1796, _1797, _1798));
    float _3851 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1788 * _1788;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1822 = exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0);
    float _1829 = 1.0 - _1788;
    float _1839 = (0.5 / (((_1717 * ((_1802 * _1829) + _1788)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1829) + _1788) * _1802))) * _1802;
    float _3862 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    float _1851 = (((((_1822 * _1739) + _467) * cbLight._m0[_1776].x) * _1841) * _1570) + ((((cbLight._m0[_1688].x * _1539) * ((_1738 * _1739) + _467)) * _1762) * _1584);
    float _1852 = (((((_1822 * _1741) + _469) * cbLight._m0[_1776].y) * _1841) * _1570) + ((((cbLight._m0[_1688].y * _1540) * ((_1738 * _1741) + _469)) * _1762) * _1584);
    float _1853 = (((((_1822 * _1742) + _470) * cbLight._m0[_1776].z) * _1841) * _1570) + ((((cbLight._m0[_1688].z * _1541) * ((_1738 * _1742) + _470)) * _1762) * _1584);
    float _1915;
    float _1917;
    float _1919;
    if (_1625)
    {
        _1915 = _1851;
        _1917 = _1852;
        _1919 = _1853;
    }
    else
    {
        uint _1921 = _1547 + 2u;
        uint _1925 = _1547 + 10u;
        float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _313) * 0.949999988079071044921875);
        float _1940 = _1939 * _1939;
        float _1941 = cbLight._m0[_1921].x + _392;
        float _1942 = cbLight._m0[_1921].y + _393;
        float _1943 = cbLight._m0[_1921].z + _394;
        float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
        float _1948 = _1947 * _1941;
        float _1949 = _1947 * _1942;
        float _1950 = _1947 * _1943;
        float _1951 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1921].xyz));
        float _3873 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1955 = dot(vec3(_309, _310, _311), vec3(_1948, _1949, _1950));
        float _3884 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1959 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_1948, _1949, _1950));
        float _3895 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1963 = _1940 * _1940;
        float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
        float _1974 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
        float _1981 = 1.0 - _1940;
        float _1991 = (0.5 / (((_1717 * ((_1954 * _1981) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1981) + _1940) * _1954))) * _1954;
        float _3906 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1993 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
        float _1994 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1915 = (((((_1974 * _1739) + _467) * cbLight._m0[_1925].x) * _1993) * _1994) + _1851;
        _1917 = (((((_1974 * _1741) + _469) * cbLight._m0[_1925].y) * _1993) * _1994) + _1852;
        _1919 = (((((_1974 * _1742) + _470) * cbLight._m0[_1925].z) * _1993) * _1994) + _1853;
    }
    float _2029;
    float _2031;
    float _2033;
    if (_1643)
    {
        _2029 = _1915;
        _2031 = _1917;
        _2033 = _1919;
    }
    else
    {
        uint _2040 = _1547 + 3u;
        uint _2044 = _1547 + 11u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _313) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _392;
        float _2061 = cbLight._m0[_2040].y + _393;
        float _2062 = cbLight._m0[_2040].z + _394;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_2040].xyz));
        float _3922 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _2074 = dot(vec3(_309, _310, _311), vec3(_2067, _2068, _2069));
        float _3933 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _3944 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0);
        float _2100 = 1.0 - _2059;
        float _2110 = (0.5 / (((_1717 * ((_2073 * _2100) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _2100) + _2059) * _2073))) * _2073;
        float _3955 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _2029 = (((((_2093 * _1739) + _467) * cbLight._m0[_2044].x) * _2112) * _2113) + _1915;
        _2031 = (((((_2093 * _1741) + _469) * cbLight._m0[_2044].y) * _2112) * _2113) + _1917;
        _2033 = (((((_2093 * _1742) + _470) * cbLight._m0[_2044].z) * _2112) * _2113) + _1919;
    }
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_1545.y == 0u)
    {
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2188;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2188;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2188;
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.x;
        uint _2215 = uint((float(_2203.y) * floor(float(uint(cbSceneParam._m0[85u].y * _401) / _2204))) + floor(float(uint(cbSceneParam._m0[85u].x * _400) / _2204)));
        float _2225 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2226 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        uint _2229 = uint(isnan(14.0) ? _2226 : (isnan(_2226) ? 14.0 : min(_2226, 14.0)));
        uvec4 _2234 = texelFetch(g_lightClusterGridBuffer, int(((_2229 << 2u) + (_2215 << 6u)) >> 2u));
        uint _2235 = _2234.x;
        uint _2236 = _2203.z;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        if (((((1u << ((_2236 >> 4u) & 15u)) + 4294967295u) & _2235) == 0u) || ((_2236 & 240u) == 0u))
        {
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
        }
        else
        {
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            uint _2487 = 0u;
            uint _2496;
            bool _2497;
            for (;;)
            {
                _2496 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2487 << 2u)) >> 2u)).x;
                _2497 = _2496 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2497)
                {
                    frontier_phi_63_pred = _2486;
                    frontier_phi_63_pred_1 = _2485;
                    frontier_phi_63_pred_2 = _2484;
                    frontier_phi_63_pred_3 = _2483;
                    frontier_phi_63_pred_4 = _2482;
                    frontier_phi_63_pred_5 = _2481;
                }
                else
                {
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    uint _2611;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2486;
                    _2611 = _2496;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    for (;;)
                    {
                        uint _2615 = uint(findLSB(_2611)) + (_2487 << 5u);
                        uint _2612 = (_2611 + 4294967295u) & _2611;
                        uint _2617 = _2615 * 48u;
                        vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 3u)).x));
                        uint _2637 = (_2615 * 48u) + 4u;
                        vec4 _2650 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 3u)).x));
                        uint _2656 = (_2615 * 48u) + 8u;
                        vec3 _2667 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2656)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 2u)).x));
                        float _2671 = _2631.x - _2189;
                        float _2672 = _2631.y - _2190;
                        float _2673 = _2631.z - _2191;
                        float _2674 = dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673));
                        float _2677 = inversesqrt(_2674);
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2681 = dot(vec3(_422, _425, _428), vec3(_2678, _2679, _2680));
                        float _2686 = 1.0 - (_2674 * _2631.w);
                        float _3981 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2687 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                        float _2688 = sqrt(_2674) * _2650.w;
                        float _2691 = 1.39999997615814208984375 / (_2688 + 1.39999997615814208984375);
                        float _2692 = _2691 * _2691;
                        float _2695 = ((1.0 - _2692) * _2681) + _2692;
                        float _2698 = _2688 * _2688;
                        float _2702 = ((isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))) * _2687) / ((_2698 * 0.699999988079071044921875) + 1.0);
                        float _2706 = (-0.0) - _2189;
                        float _2707 = (-0.0) - _2190;
                        float _2708 = (-0.0) - _2191;
                        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
                        float _2713 = _2712 * _2706;
                        float _2714 = _2712 * _2707;
                        float _2715 = _2712 * _2708;
                        float _2723 = exp2(log2(1.0 / ((_2698 * 3.5) + 5.0)) * 0.25);
                        float _2724 = 1.0 - _498;
                        float _2731 = sqrt(1.0 - ((1.0 - (_2724 * _2724)) * (1.0 - (_2723 * _2723))));
                        float _2732 = _2731 * _2731;
                        float _2733 = _2732 * _2732;
                        float _2734 = _2713 + _2678;
                        float _2735 = _2714 + _2679;
                        float _2736 = _2715 + _2680;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2744 = dot(vec3(_422, _425, _428), vec3(_2713, _2714, _2715));
                        float _3997 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2747 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2748 = dot(vec3(_422, _425, _428), vec3(_2740 * _2734, _2740 * _2735, _2740 * _2736));
                        float _4008 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2751 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2755 = ((_2751 * _2751) * (_2733 + (-1.0))) + 1.0;
                        float _2756 = _2691 * _2732;
                        float _2757 = _2756 * _2756;
                        float _2760 = ((1.0 - _2757) * _2681) + _2757;
                        float _4019 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2761 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2762 = 1.0 - _2732;
                        float _2772 = (0.5 / (((_2761 * ((_2747 * _2762) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _2762) + _2732) * _2747))) * _2761;
                        float _4030 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2783 = (((_2733 * 3.1415927410125732421875) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) / ((_2755 * _2755) * ((_2698 * 2.1991131305694580078125) + 3.141590118408203125))) * _2687;
                        _2540 = (_2702 * _2650.x) + _2608;
                        _2541 = (_2702 * _2650.y) + _2609;
                        _2542 = (_2702 * _2650.z) + _2610;
                        _2537 = (_2783 * _2667.x) + _2605;
                        _2538 = (_2783 * _2667.y) + _2606;
                        _2539 = (_2783 * _2667.z) + _2607;
                        if (_2612 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2542;
                            _2611 = _2612;
                        }
                    }
                    frontier_phi_63_pred = _2542;
                    frontier_phi_63_pred_1 = _2541;
                    frontier_phi_63_pred_2 = _2540;
                    frontier_phi_63_pred_3 = _2539;
                    frontier_phi_63_pred_4 = _2538;
                    frontier_phi_63_pred_5 = _2537;
                }
                _2348 = frontier_phi_63_pred;
                _2346 = frontier_phi_63_pred_1;
                _2344 = frontier_phi_63_pred_2;
                _2342 = frontier_phi_63_pred_3;
                _2340 = frontier_phi_63_pred_4;
                _2338 = frontier_phi_63_pred_5;
                uint _2488 = _2487 + 1u;
                if (_2488 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2481 = _2338;
                    _2482 = _2340;
                    _2483 = _2342;
                    _2484 = _2344;
                    _2485 = _2346;
                    _2486 = _2348;
                    _2487 = _2488;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
        }
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.z;
        uint _2354 = (_2352 >> 8u) & 15u;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        if (((4294967295u << _2354) & _2235) == 0u)
        {
            _2449 = _2337;
            _2451 = _2339;
            _2453 = _2341;
            _2455 = _2343;
            _2457 = _2345;
            _2459 = _2347;
        }
        else
        {
            float _2474 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _2475 = _2474 * _2189;
            float _2476 = _2474 * _2190;
            float _2477 = _2474 * _2191;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2354 < ((_2352 >> 12u) & 15u))
            {
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2588 = _2337;
                float _2589 = _2339;
                float _2590 = _2341;
                float _2591 = _2343;
                float _2592 = _2345;
                float _2593 = _2347;
                uint _2594 = _2354;
                uint _2603;
                bool _2604;
                for (;;)
                {
                    _2603 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                    _2604 = _2603 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2604)
                    {
                        frontier_phi_69_pred = _2593;
                        frontier_phi_69_pred_1 = _2592;
                        frontier_phi_69_pred_2 = _2591;
                        frontier_phi_69_pred_3 = _2590;
                        frontier_phi_69_pred_4 = _2589;
                        frontier_phi_69_pred_5 = _2588;
                    }
                    else
                    {
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        float _2806 = _2593;
                        uint _2807 = _2603;
                        uint _2808;
                        vec4 _2833;
                        float _2834;
                        vec4 _2849;
                        vec3 _2861;
                        vec4 _2877;
                        vec4 _2893;
                        float _2940;
                        bool _2941;
                        for (;;)
                        {
                            uint _2818 = ((_2594 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2807));
                            _2808 = (_2807 + 4294967295u) & _2807;
                            uint _2820 = _2818 * 40u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            _2834 = _2833.w;
                            uint _2836 = (_2818 * 40u) + 4u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2851 = (_2818 * 40u) + 8u;
                            _2861 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x));
                            uint _2864 = (_2818 * 40u) + 16u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2880 = (_2818 * 40u) + 20u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2896 = (_2818 * 40u) + 24u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2915 = (_2818 * 40u) + 28u;
                            vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2940 = fma(_2191, _2928.z, fma(_2190, _2928.y, _2928.x * _2189)) + _2928.w;
                            _2941 = !((fma(_2191, _2909.z, fma(_2190, _2909.y, _2909.x * _2189)) + _2909.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2941)
                            {
                                float _2968 = _2833.x - _2189;
                                float _2969 = _2833.y - _2190;
                                float _2970 = _2833.z - _2191;
                                float _2971 = dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970));
                                float _2974 = inversesqrt(_2971);
                                float _2975 = _2974 * _2968;
                                float _2976 = _2974 * _2969;
                                float _2977 = _2974 * _2970;
                                float _2981 = 1.0 - (_2971 / (_2834 * _2834));
                                float _4041 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                                float _2982 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _2986 = sqrt(_2971) * _2849.w;
                                float _2988 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                                float _2989 = _2988 * _2988;
                                float _2992 = ((1.0 - _2989) * dot(vec3(_2975, _2976, _2977), vec3(_422, _425, _428))) + _2989;
                                float _2995 = _2986 * _2986;
                                float _2999 = (fma(_2191, _2877.z, fma(_2190, _2877.y, _2877.x * _2189)) + _2877.w) / _2940;
                                float _3000 = (fma(_2191, _2893.z, fma(_2190, _2893.y, _2893.x * _2189)) + _2893.w) / _2940;
                                float _3004 = 1.0 - dot(vec2(_2999, _3000), vec2(_2999, _3000));
                                float _4057 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3006 = _3005 * (((isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))) * _2982) / ((_2995 * 0.699999988079071044921875) + 1.0));
                                float _3018 = exp2(log2(1.0 / ((_2995 * 3.5) + 5.0)) * 0.25);
                                float _3019 = 1.0 - _498;
                                float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                                float _3027 = _3026 * _3026;
                                float _3028 = _3027 * _3027;
                                float _3029 = _2975 - _2475;
                                float _3030 = _2976 - _2476;
                                float _3031 = _2977 - _2477;
                                float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                                float _3039 = dot(vec3(_422, _425, _428), vec3((-0.0) - _2475, (-0.0) - _2476, (-0.0) - _2477));
                                float _4068 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3042 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3043 = dot(vec3(_422, _425, _428), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                                float _4079 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3046 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                                float _3051 = _2988 * _3027;
                                float _3052 = _3051 * _3051;
                                float _3058 = ((1.0 - _3052) * dot(vec3(_422, _425, _428), vec3(_2975, _2976, _2977))) + _3052;
                                float _4090 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3060 = 1.0 - _3027;
                                float _3070 = (0.5 / (((_3059 * ((_3042 * _3060) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3027) * _3042))) * _3059;
                                float _4101 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3080 = (_3005 * _2982) * (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) / ((_3050 * _3050) * ((_2995 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3006 * _2849.z;
                                frontier_phi_75_pred_1 = _3006 * _2849.y;
                                frontier_phi_75_pred_2 = _3006 * _2849.x;
                                frontier_phi_75_pred_3 = _3080 * _2861.z;
                                frontier_phi_75_pred_4 = _3080 * _2861.y;
                                frontier_phi_75_pred_5 = _3080 * _2861.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3089 = frontier_phi_75_pred;
                            _3088 = frontier_phi_75_pred_1;
                            _3087 = frontier_phi_75_pred_2;
                            _3086 = frontier_phi_75_pred_3;
                            _3085 = frontier_phi_75_pred_4;
                            _3084 = frontier_phi_75_pred_5;
                            _2791 = _3087 + _2804;
                            _2792 = _3088 + _2805;
                            _2793 = _3089 + _2806;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            _2790 = _3086 + _2803;
                            if (_2808 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2808;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2793;
                        frontier_phi_69_pred_1 = _2792;
                        frontier_phi_69_pred_2 = _2791;
                        frontier_phi_69_pred_3 = _2790;
                        frontier_phi_69_pred_4 = _2789;
                        frontier_phi_69_pred_5 = _2788;
                    }
                    _2460 = frontier_phi_69_pred;
                    _2458 = frontier_phi_69_pred_1;
                    _2456 = frontier_phi_69_pred_2;
                    _2454 = frontier_phi_69_pred_3;
                    _2452 = frontier_phi_69_pred_4;
                    _2450 = frontier_phi_69_pred_5;
                    uint _2595 = _2594 + 1u;
                    if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2588 = _2450;
                        _2589 = _2452;
                        _2590 = _2454;
                        _2591 = _2456;
                        _2592 = _2458;
                        _2593 = _2460;
                        _2594 = _2595;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2460;
                frontier_phi_57_58_ladder_1 = _2458;
                frontier_phi_57_58_ladder_2 = _2456;
                frontier_phi_57_58_ladder_3 = _2454;
                frontier_phi_57_58_ladder_4 = _2452;
                frontier_phi_57_58_ladder_5 = _2450;
            }
            else
            {
                frontier_phi_57_58_ladder = _2347;
                frontier_phi_57_58_ladder_1 = _2345;
                frontier_phi_57_58_ladder_2 = _2343;
                frontier_phi_57_58_ladder_3 = _2341;
                frontier_phi_57_58_ladder_4 = _2339;
                frontier_phi_57_58_ladder_5 = _2337;
            }
            _2449 = frontier_phi_57_58_ladder_5;
            _2451 = frontier_phi_57_58_ladder_4;
            _2453 = frontier_phi_57_58_ladder_3;
            _2455 = frontier_phi_57_58_ladder_2;
            _2457 = frontier_phi_57_58_ladder_1;
            _2459 = frontier_phi_57_58_ladder;
        }
        float _2464 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        _2247 = (_2464 * _2455) + _1681;
        _2249 = (_2464 * _2457) + _1683;
        _2251 = (_2464 * _2459) + _1685;
        _2253 = ((_2449 * _467) * _2464) + _2029;
        _2255 = ((_2451 * _469) * _2464) + _2031;
        _2257 = ((_2453 * _470) * _2464) + _2033;
    }
    else
    {
        _2247 = _1681;
        _2249 = _1683;
        _2251 = _1685;
        _2253 = _2029;
        _2255 = _2031;
        _2257 = _2033;
    }
    float _4117 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4128 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4139 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4150 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _2282 = cbInstanceData._m0[_441 + 6u].w * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)));
    float _2287 = _400 / cbSceneParam._m0[86u].x;
    float _2288 = _401 / cbSceneParam._m0[86u].y;
    vec4 _2302 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2304 = _2302.x;
    float _2305 = _2302.y;
    float _2306 = _2302.z;
    float _2307 = _2302.w;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _2362 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _2363 = _2362 / _333;
        float _2374 = _2363 * _385;
        float _2375 = _386 * _2363;
        float _2376 = (-0.0) - _2375;
        float _2377 = _2363 * _387;
        float _2379 = (cbSceneParam._m0[77u].w * _2376) / _2362;
        float _2380 = _2379 + cbSceneParam._m0[79u].w;
        float _2381 = cbSceneParam._m0[79u].w - _2375;
        float _2387 = sqrt(((_2374 * _2374) + (_2375 * _2375)) + (_2377 * _2377));
        float _2390 = (1.0 - (cbSceneParam._m0[77u].w / _2362)) * _2387;
        float _2395 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2397 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2550;
        if (abs((_2376 - _2379) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2550 = ((((_2380 > 0.0) ? exp2(_2395 * _2380) : (2.0 - exp2(_2397 * _2380))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2390;
        }
        else
        {
            float _2510 = 1.0 / cbSceneParam._m0[80u].x;
            float _2511 = isnan(_2381) ? _2380 : (isnan(_2380) ? _2381 : max(_2380, _2381));
            float _2512 = isnan(_2381) ? _2380 : (isnan(_2380) ? _2381 : min(_2380, _2381));
            float _2521 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : min(_2511, 0.0));
            float _2522 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : min(_2512, 0.0));
            _2550 = ((abs(_2387 / _2376) * cbSceneParam._m0[80u].y) * ((((_2521 - _2522) * 2.0) - ((exp2(_2395 * (isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0)))) - exp2(_2395 * (isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0))))) * _2510)) - ((exp2(_2397 * _2521) - exp2(_2397 * _2522)) * _2510))) + (_2390 * cbSceneParam._m0[80u].z);
        }
        vec4 _2552 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, 1.0), 0.0);
        float _2561 = exp2((_2550 * (-1.44269502162933349609375)) * (1.0 - _2552.w));
        float _2562 = log2(_2561);
        float _2578 = log2(_2307);
        _2399 = (exp2(_2578 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2562 * cbSceneParam._m0[78u].x)) * _2552.x) / cbSceneParam._m0[78u].x)) + _2304;
        _2401 = (exp2(_2578 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2562 * cbSceneParam._m0[78u].y)) * _2552.y) / cbSceneParam._m0[78u].y)) + _2305;
        _2403 = (exp2(_2578 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2562 * cbSceneParam._m0[78u].z)) * _2552.z) / cbSceneParam._m0[78u].z)) + _2306;
        _2405 = _2561 * _2307;
    }
    else
    {
        _2399 = _2304;
        _2401 = _2305;
        _2403 = _2306;
        _2405 = _2307;
    }
    float _2417 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2418 = _2417 == 3.0;
    float _2419 = log2(_2405);
    float _2426 = exp2(_2419 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2247 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _482))) + ((_2253 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2427 = exp2(_2419 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2249 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _482))) + ((_2255 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2428 = exp2(_2419 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2251 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _482))) + ((_2257 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2437 = (_2417 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2437 * (_2418 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2399)));
    SV_Target.y = _2437 * (_2418 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2401)));
    SV_Target.z = _2437 * (_2418 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2403)));
    SV_Target.w = _2282;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2282;
}


