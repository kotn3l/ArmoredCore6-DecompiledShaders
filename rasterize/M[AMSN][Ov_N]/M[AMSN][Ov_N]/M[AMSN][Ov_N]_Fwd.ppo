#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _855;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _225 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _225.x;
    float _229 = _225.y;
    float _230 = _225.z;
    float _231 = _225.w;
    vec4 _248 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _270 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _277 = (_270.x * 2.0) + (-1.0);
    float _278 = (_270.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_277, _278), vec2(_277, _278));
    float _3194 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0))));
    float _288 = ((_248.z - _274) * cbMtdParam._m0[9u].y) + _274;
    float _3205 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _289 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _292 = _277 + (((_248.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _293 = _278 + (((_248.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _296 = fma(_285, _209, fma(_293, _201 * TANGENT.x, (_187 * _180) * _292));
    float _299 = fma(_285, _210, fma(_293, _201 * TANGENT.y, (_187 * _181) * _292));
    float _302 = fma(_285, _211, fma(_293, _201 * TANGENT.z, (_187 * _182) * _292));
    float _306 = inversesqrt(dot(vec3(_296, _299, _302), vec3(_296, _299, _302)));
    float _307 = _306 * _296;
    float _308 = _306 * _299;
    float _309 = _306 * _302;
    float _3216 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _310 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
    float _3227 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _311 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _3238 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3249 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3260 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3271 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _315 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _420 = fma(_309, cbSceneParam._m0[5u].z, fma(_308, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _307));
    float _423 = fma(_309, cbSceneParam._m0[6u].z, fma(_308, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _307));
    float _426 = fma(_309, cbSceneParam._m0[7u].z, fma(_308, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _307));
    uint _439 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = (_439 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _448 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0)))) * cbInstanceData._m0[_442].x;
    float _449 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) * cbInstanceData._m0[_442].y;
    float _450 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) * cbInstanceData._m0[_442].z;
    float _3282 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _3304 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _454 = 1.0 - _315;
    float _455 = _451 * _454;
    float _456 = _452 * _454;
    float _457 = _453 * _454;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _315;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _315;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _315;
    float _465 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    vec4 _477 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _480 = _477.x * TEXCOORD.z;
    float _481 = dot(vec3(_307, _308, _309), vec3(_390, _391, _392));
    float _484 = _481 * 2.0;
    float _488 = (_484 * _307) - _390;
    float _489 = (_484 * _308) - _391;
    float _490 = (_484 * _309) - _392;
    float _494 = abs(dot(vec3(_390, _391, _392), vec3(_307, _308, _309)));
    float _3315 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _496 = sqrt(_311);
    float _509 = exp2((_496 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_496 * 3.0));
    float _515 = (1.0 - _509) * ((_496 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _516 = _509 * _496;
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_552, cbModelParam._m0[26u].z, fma(_548, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544));
        float _583 = fma(_552, cbModelParam._m0[27u].z, fma(_548, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544));
        float _587 = fma(_552, cbModelParam._m0[28u].z, fma(_548, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544));
        float _612 = _544 + _307;
        float _613 = _548 + _308;
        float _614 = _552 + _309;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_307, _308, _309), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3363 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_307, _308, _309), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3396 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_307, _308, _309), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3429 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_552, cbModelParam._m0[30u].z, fma(_548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _544));
        float _899 = fma(_552, cbModelParam._m0[31u].z, fma(_548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _544));
        float _903 = fma(_552, cbModelParam._m0[32u].z, fma(_548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _544));
        float _926 = _544 + _307;
        float _927 = _548 + _308;
        float _928 = _552 + _309;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_307, _308, _309), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3492 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_307, _308, _309), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3525 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_307, _308, _309), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3558 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _855;
        _1165 = _855;
        _1166 = _855;
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _488 * 0.5;
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _858, _861, _864));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_856, _859, _862, _865));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_857, _860, _863, _866));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_552, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_552, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_552, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_490, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488));
        float _1364 = fma(_490, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488));
        float _1367 = fma(_490, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488));
        float _1395;
        if (_1361 > 0.0)
        {
            _1395 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1395 = frontier_phi_16_14_ladder;
        }
        float _1603;
        if (_1364 > 0.0)
        {
            _1603 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1603 = frontier_phi_25_21_ladder;
        }
        float _1857;
        if (_1367 > 0.0)
        {
            _1857 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1857 = frontier_phi_37_32_ladder;
        }
        float _1859 = isnan(_1603) ? _1395 : (isnan(_1395) ? _1603 : min(_1395, _1603));
        float _1860 = isnan(_1857) ? _1859 : (isnan(_1859) ? _1857 : min(_1859, _1857));
        float _1864 = (_1860 * _1361) + _1350;
        float _1865 = (_1860 * _1364) + _1354;
        float _1866 = (_1860 * _1367) + _1358;
        float _1867 = _1860 * 9.9999997473787516355514526367188e-05;
        float _1869 = (-1.0) - _1867;
        float _1871 = _1867 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1866 > _1871) || ((_1866 < _1869) || ((_1865 > _1871) || ((_1865 < _1869) || ((_1864 < _1869) || (_1864 > _1871))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1866, cbModelParam._m0[9u].z, fma(_1865, cbModelParam._m0[9u].y, _1864 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1866, cbModelParam._m0[10u].z, fma(_1865, cbModelParam._m0[10u].y, _1864 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1866, cbModelParam._m0[11u].z, fma(_1865, cbModelParam._m0[11u].y, _1864 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_15_37_ladder = _1994.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1994.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1994.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_15_37_ladder_2;
        _1385 = frontier_phi_15_37_ladder_1;
        _1387 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_488, _489, _490), _1301);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1391 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1391 : min(cbModelParam._m0[25u].w, _1391));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_552, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_552, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_552, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_490, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488));
        float _1463 = fma(_490, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488));
        float _1466 = fma(_490, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488));
        float _1608;
        if (_1460 > 0.0)
        {
            _1608 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1608 = frontier_phi_27_23_ladder;
        }
        float _1884;
        if (_1463 > 0.0)
        {
            _1884 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1884 = frontier_phi_39_34_ladder;
        }
        float _2097;
        if (_1466 > 0.0)
        {
            _2097 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2097 = frontier_phi_48_45_ladder;
        }
        float _2099 = isnan(_1884) ? _1608 : (isnan(_1608) ? _1884 : min(_1608, _1884));
        float _2100 = isnan(_2097) ? _2099 : (isnan(_2099) ? _2097 : min(_2099, _2097));
        float _2104 = (_2100 * _1460) + _1449;
        float _2105 = (_2100 * _1463) + _1453;
        float _2106 = (_2100 * _1466) + _1457;
        float _2107 = _2100 * 9.9999997473787516355514526367188e-05;
        float _2108 = (-1.0) - _2107;
        float _2110 = _2107 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2106 > _2110) || ((_2106 < _2108) || ((_2105 > _2110) || ((_2105 < _2108) || ((_2104 < _2108) || (_2104 > _2110))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2106, cbModelParam._m0[17u].z, fma(_2105, cbModelParam._m0[17u].y, _2104 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2106, cbModelParam._m0[18u].z, fma(_2105, cbModelParam._m0[18u].y, _2104 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2106, cbModelParam._m0[19u].z, fma(_2105, cbModelParam._m0[19u].y, _2104 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_24_48_ladder = _2306.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2306.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2306.x * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_24_48_ladder_2;
        _1487 = frontier_phi_24_48_ladder_1;
        _1489 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_488, _489, _490), _1392);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1502 = (((_515 * _465) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_515 * _467) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_515 * _468) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    uvec4 _1525 = floatBitsToUint(cbInstanceData._m0[_439 + 5u]);
    uint _1527 = _1525.x * 14u;
    uint _1528 = _1527 + 13u;
    float _1535 = _480 + (-1.0);
    float _1540 = (cbLight._m0[_1528].x * _1535) + 1.0;
    float _1541 = (cbLight._m0[_1528].y * _1535) + 1.0;
    float _1542 = (cbLight._m0[_1528].z * _1535) + 1.0;
    float _1543 = (cbLight._m0[_1528].w * _1535) + 1.0;
    uint _1544 = _1527 + 5u;
    float _1550 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    uint _1554 = _1527 + 4u;
    float _1561 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1565 = _1527 | 1u;
    float _1576 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_307, _308, _309));
    float _1579 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_307, _308, _309));
    float _3694 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _3705 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1584 = (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.3183098733425140380859375;
    float _1586 = (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.3183098733425140380859375;
    float _1593 = ((cbLight._m0[_1544].x * _1550) * _1586) + ((cbLight._m0[_1554].x * _1561) * _1584);
    float _1594 = ((_1550 * cbLight._m0[_1544].y) * _1586) + ((_1561 * cbLight._m0[_1554].y) * _1584);
    float _1595 = ((_1550 * cbLight._m0[_1544].z) * _1586) + ((_1561 * cbLight._m0[_1554].z) * _1584);
    uvec4 _1600 = floatBitsToUint(cbLight._m0[_1527 + 12u]);
    bool _1602 = _1600.x == 0u;
    float _1613;
    float _1615;
    float _1617;
    if (_1602)
    {
        _1613 = _1593;
        _1615 = _1594;
        _1617 = _1595;
    }
    else
    {
        uint _1621 = _1527 + 6u;
        float _1637 = (dot(vec3(cbLight._m0[_1527 + 2u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _1638 = _1637 * _1637;
        float _3716 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1640 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1613 = (((cbLight._m0[_1621].x * 0.3183098733425140380859375) * _1639) * _1640) + _1593;
        _1615 = (((cbLight._m0[_1621].y * 0.3183098733425140380859375) * _1639) * _1640) + _1594;
        _1617 = (((cbLight._m0[_1621].z * 0.3183098733425140380859375) * _1639) * _1640) + _1595;
    }
    bool _1620 = _1600.y == 0u;
    float _1658;
    float _1660;
    float _1662;
    if (_1620)
    {
        _1658 = _1613;
        _1660 = _1615;
        _1662 = _1617;
    }
    else
    {
        uint _1828 = _1527 + 7u;
        float _1844 = (dot(vec3(cbLight._m0[_1527 + 3u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _1845 = _1844 * _1844;
        float _3732 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1847 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1658 = (((cbLight._m0[_1828].x * 0.3183098733425140380859375) * _1846) * _1847) + _1613;
        _1660 = (((cbLight._m0[_1828].y * 0.3183098733425140380859375) * _1846) * _1847) + _1615;
        _1662 = (((cbLight._m0[_1828].z * 0.3183098733425140380859375) * _1846) * _1847) + _1617;
    }
    uint _1665 = _1527 + 8u;
    float _1678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1527].w)) * _311) * 0.949999988079071044921875);
    float _1679 = _1678 * _1678;
    float _1680 = cbLight._m0[_1527].x + _390;
    float _1681 = cbLight._m0[_1527].y + _391;
    float _1682 = cbLight._m0[_1527].z + _392;
    float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
    float _1687 = _1686 * _1680;
    float _1688 = _1686 * _1681;
    float _1689 = _1686 * _1682;
    float _1690 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1527].xyz));
    float _3748 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _1694 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1695 = dot(vec3(_307, _308, _309), vec3(_1687, _1688, _1689));
    float _3770 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1699 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1687, _1688, _1689));
    float _3781 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1703 = _1679 * _1679;
    float _1707 = ((_1698 * _1698) * (_1703 + (-1.0))) + 1.0;
    float _1715 = exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0);
    float _1716 = 0.959999978542327880859375 - _462;
    float _1718 = 0.959999978542327880859375 - _463;
    float _1719 = 0.959999978542327880859375 - _464;
    float _1726 = 1.0 - _1679;
    float _1737 = (0.5 / (((_1694 * ((_1693 * _1726) + _1679)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1726) + _1679) * _1693))) * _1693;
    float _3792 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1739 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1703 / ((_1707 * _1707) * 3.141590118408203125));
    uint _1750 = _1527 + 9u;
    float _1761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _311) * 0.949999988079071044921875);
    float _1762 = _1761 * _1761;
    float _1763 = cbLight._m0[_1565].x + _390;
    float _1764 = cbLight._m0[_1565].y + _391;
    float _1765 = cbLight._m0[_1565].z + _392;
    float _1769 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
    float _1770 = _1769 * _1763;
    float _1771 = _1769 * _1764;
    float _1772 = _1769 * _1765;
    float _1773 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1565].xyz));
    float _3803 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1777 = dot(vec3(_307, _308, _309), vec3(_1770, _1771, _1772));
    float _3814 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1770, _1771, _1772));
    float _3825 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1762 * _1762;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1796 = exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0);
    float _1803 = 1.0 - _1762;
    float _1813 = (0.5 / (((_1694 * ((_1776 * _1803) + _1762)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1803) + _1762) * _1776))) * _1776;
    float _3836 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    float _1825 = (((((_1796 * _1716) + _465) * cbLight._m0[_1750].x) * _1815) * _1550) + (((((_1715 * _1716) + _465) * cbLight._m0[_1665].x) * _1739) * _1561);
    float _1826 = (((((_1796 * _1718) + _467) * cbLight._m0[_1750].y) * _1815) * _1550) + (((((_1715 * _1718) + _467) * cbLight._m0[_1665].y) * _1739) * _1561);
    float _1827 = (((((_1796 * _1719) + _468) * cbLight._m0[_1750].z) * _1815) * _1550) + (((((_1715 * _1719) + _468) * cbLight._m0[_1665].z) * _1739) * _1561);
    float _1889;
    float _1891;
    float _1893;
    if (_1602)
    {
        _1889 = _1825;
        _1891 = _1826;
        _1893 = _1827;
    }
    else
    {
        uint _1895 = _1527 + 2u;
        uint _1899 = _1527 + 10u;
        float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _311) * 0.949999988079071044921875);
        float _1914 = _1913 * _1913;
        float _1915 = cbLight._m0[_1895].x + _390;
        float _1916 = cbLight._m0[_1895].y + _391;
        float _1917 = cbLight._m0[_1895].z + _392;
        float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
        float _1922 = _1921 * _1915;
        float _1923 = _1921 * _1916;
        float _1924 = _1921 * _1917;
        float _1925 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1895].xyz));
        float _3847 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1928 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1929 = dot(vec3(_307, _308, _309), vec3(_1922, _1923, _1924));
        float _3858 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1932 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1933 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_1922, _1923, _1924));
        float _3869 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1937 = _1914 * _1914;
        float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
        float _1948 = exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0);
        float _1955 = 1.0 - _1914;
        float _1965 = (0.5 / (((_1694 * ((_1928 * _1955) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1955) + _1914) * _1928))) * _1928;
        float _3880 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1967 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
        float _1968 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1889 = (((((_1948 * _1716) + _465) * cbLight._m0[_1899].x) * _1967) * _1968) + _1825;
        _1891 = (((((_1948 * _1718) + _467) * cbLight._m0[_1899].y) * _1967) * _1968) + _1826;
        _1893 = (((((_1948 * _1719) + _468) * cbLight._m0[_1899].z) * _1967) * _1968) + _1827;
    }
    float _2003;
    float _2005;
    float _2007;
    if (_1620)
    {
        _2003 = _1889;
        _2005 = _1891;
        _2007 = _1893;
    }
    else
    {
        uint _2014 = _1527 + 3u;
        uint _2018 = _1527 + 11u;
        float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _311) * 0.949999988079071044921875);
        float _2033 = _2032 * _2032;
        float _2034 = cbLight._m0[_2014].x + _390;
        float _2035 = cbLight._m0[_2014].y + _391;
        float _2036 = cbLight._m0[_2014].z + _392;
        float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
        float _2041 = _2040 * _2034;
        float _2042 = _2040 * _2035;
        float _2043 = _2040 * _2036;
        float _2044 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_2014].xyz));
        float _3896 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _2048 = dot(vec3(_307, _308, _309), vec3(_2041, _2042, _2043));
        float _3907 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _2052 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2041, _2042, _2043));
        float _3918 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2056 = _2033 * _2033;
        float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
        float _2067 = exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0);
        float _2074 = 1.0 - _2033;
        float _2084 = (0.5 / (((_1694 * ((_2047 * _2074) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _2074) + _2033) * _2047))) * _2047;
        float _3929 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2086 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
        float _2087 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _2003 = (((((_2067 * _1716) + _465) * cbLight._m0[_2018].x) * _2086) * _2087) + _1889;
        _2005 = (((((_2067 * _1718) + _467) * cbLight._m0[_2018].y) * _2086) * _2087) + _1891;
        _2007 = (((((_2067 * _1719) + _468) * cbLight._m0[_2018].z) * _2086) * _2087) + _1893;
    }
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    if (_1525.y == 0u)
    {
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2162;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2162;
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2162;
        uvec4 _2177 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2178 = _2177.x;
        uint _2189 = uint((float(_2177.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2178))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2178)));
        float _2199 = (log2(_2165 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2200 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        uint _2203 = uint(isnan(14.0) ? _2200 : (isnan(_2200) ? 14.0 : min(_2200, 14.0)));
        uvec4 _2208 = texelFetch(g_lightClusterGridBuffer, int(((_2203 << 2u) + (_2189 << 6u)) >> 2u));
        uint _2209 = _2208.x;
        uint _2210 = _2177.z;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        if (((((1u << ((_2210 >> 4u) & 15u)) + 4294967295u) & _2209) == 0u) || ((_2210 & 240u) == 0u))
        {
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
        }
        else
        {
            float _2312;
            float _2314;
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            float _2458 = 0.0;
            float _2459 = 0.0;
            float _2460 = 0.0;
            uint _2461 = 0u;
            uint _2470;
            bool _2471;
            for (;;)
            {
                _2470 = texelFetch(g_lightClassification, int((((_2203 << 5u) + (_2189 << 9u)) + (_2461 << 2u)) >> 2u)).x;
                _2471 = _2470 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2471)
                {
                    frontier_phi_63_pred = _2460;
                    frontier_phi_63_pred_1 = _2459;
                    frontier_phi_63_pred_2 = _2458;
                    frontier_phi_63_pred_3 = _2457;
                    frontier_phi_63_pred_4 = _2456;
                    frontier_phi_63_pred_5 = _2455;
                }
                else
                {
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    uint _2585;
                    _2579 = _2455;
                    _2580 = _2456;
                    _2581 = _2457;
                    _2582 = _2458;
                    _2583 = _2459;
                    _2584 = _2460;
                    _2585 = _2470;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    for (;;)
                    {
                        uint _2589 = uint(findLSB(_2585)) + (_2461 << 5u);
                        uint _2586 = (_2585 + 4294967295u) & _2585;
                        uint _2591 = _2589 * 48u;
                        vec4 _2605 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2591)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 3u)).x));
                        uint _2611 = (_2589 * 48u) + 4u;
                        vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 3u)).x));
                        uint _2630 = (_2589 * 48u) + 8u;
                        vec3 _2641 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2630)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 2u)).x));
                        float _2645 = _2605.x - _2163;
                        float _2646 = _2605.y - _2164;
                        float _2647 = _2605.z - _2165;
                        float _2648 = dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647));
                        float _2651 = inversesqrt(_2648);
                        float _2652 = _2651 * _2645;
                        float _2653 = _2651 * _2646;
                        float _2654 = _2651 * _2647;
                        float _2655 = dot(vec3(_420, _423, _426), vec3(_2652, _2653, _2654));
                        float _2660 = 1.0 - (_2648 * _2605.w);
                        float _3955 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                        float _2661 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                        float _2662 = sqrt(_2648) * _2624.w;
                        float _2665 = 1.39999997615814208984375 / (_2662 + 1.39999997615814208984375);
                        float _2666 = _2665 * _2665;
                        float _2669 = ((1.0 - _2666) * _2655) + _2666;
                        float _2672 = _2662 * _2662;
                        float _2676 = ((isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0))) * _2661) / ((_2672 * 0.699999988079071044921875) + 1.0);
                        float _2680 = (-0.0) - _2163;
                        float _2681 = (-0.0) - _2164;
                        float _2682 = (-0.0) - _2165;
                        float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
                        float _2687 = _2686 * _2680;
                        float _2688 = _2686 * _2681;
                        float _2689 = _2686 * _2682;
                        float _2697 = exp2(log2(1.0 / ((_2672 * 3.5) + 5.0)) * 0.25);
                        float _2698 = 1.0 - _496;
                        float _2705 = sqrt(1.0 - ((1.0 - (_2698 * _2698)) * (1.0 - (_2697 * _2697))));
                        float _2706 = _2705 * _2705;
                        float _2707 = _2706 * _2706;
                        float _2708 = _2687 + _2652;
                        float _2709 = _2688 + _2653;
                        float _2710 = _2689 + _2654;
                        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
                        float _2718 = dot(vec3(_420, _423, _426), vec3(_2687, _2688, _2689));
                        float _3971 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2721 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2722 = dot(vec3(_420, _423, _426), vec3(_2714 * _2708, _2714 * _2709, _2714 * _2710));
                        float _3982 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2725 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2729 = ((_2725 * _2725) * (_2707 + (-1.0))) + 1.0;
                        float _2730 = _2665 * _2706;
                        float _2731 = _2730 * _2730;
                        float _2734 = ((1.0 - _2731) * _2655) + _2731;
                        float _3993 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2736 = 1.0 - _2706;
                        float _2746 = (0.5 / (((_2735 * ((_2721 * _2736) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2735 * _2736) + _2706) * _2721))) * _2735;
                        float _4004 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2757 = (((_2707 * 3.1415927410125732421875) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) / ((_2729 * _2729) * ((_2672 * 2.1991131305694580078125) + 3.141590118408203125))) * _2661;
                        _2514 = (_2676 * _2624.x) + _2582;
                        _2515 = (_2676 * _2624.y) + _2583;
                        _2516 = (_2676 * _2624.z) + _2584;
                        _2511 = (_2757 * _2641.x) + _2579;
                        _2512 = (_2757 * _2641.y) + _2580;
                        _2513 = (_2757 * _2641.z) + _2581;
                        if (_2586 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2513;
                            _2582 = _2514;
                            _2583 = _2515;
                            _2584 = _2516;
                            _2585 = _2586;
                        }
                    }
                    frontier_phi_63_pred = _2516;
                    frontier_phi_63_pred_1 = _2515;
                    frontier_phi_63_pred_2 = _2514;
                    frontier_phi_63_pred_3 = _2513;
                    frontier_phi_63_pred_4 = _2512;
                    frontier_phi_63_pred_5 = _2511;
                }
                _2322 = frontier_phi_63_pred;
                _2320 = frontier_phi_63_pred_1;
                _2318 = frontier_phi_63_pred_2;
                _2316 = frontier_phi_63_pred_3;
                _2314 = frontier_phi_63_pred_4;
                _2312 = frontier_phi_63_pred_5;
                uint _2462 = _2461 + 1u;
                if (_2462 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2455 = _2312;
                    _2456 = _2314;
                    _2457 = _2316;
                    _2458 = _2318;
                    _2459 = _2320;
                    _2460 = _2322;
                    _2461 = _2462;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
        }
        uvec4 _2325 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2326 = _2325.z;
        uint _2328 = (_2326 >> 8u) & 15u;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        if (((4294967295u << _2328) & _2209) == 0u)
        {
            _2423 = _2311;
            _2425 = _2313;
            _2427 = _2315;
            _2429 = _2317;
            _2431 = _2319;
            _2433 = _2321;
        }
        else
        {
            float _2448 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
            float _2449 = _2448 * _2163;
            float _2450 = _2448 * _2164;
            float _2451 = _2448 * _2165;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2328 < ((_2326 >> 12u) & 15u))
            {
                float _2424;
                float _2426;
                float _2428;
                float _2430;
                float _2432;
                float _2434;
                float _2562 = _2311;
                float _2563 = _2313;
                float _2564 = _2315;
                float _2565 = _2317;
                float _2566 = _2319;
                float _2567 = _2321;
                uint _2568 = _2328;
                uint _2577;
                bool _2578;
                for (;;)
                {
                    _2577 = texelFetch(g_lightClassification, int((((_2203 << 5u) + (_2189 << 9u)) + (_2568 << 2u)) >> 2u)).x;
                    _2578 = _2577 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2578)
                    {
                        frontier_phi_69_pred = _2567;
                        frontier_phi_69_pred_1 = _2566;
                        frontier_phi_69_pred_2 = _2565;
                        frontier_phi_69_pred_3 = _2564;
                        frontier_phi_69_pred_4 = _2563;
                        frontier_phi_69_pred_5 = _2562;
                    }
                    else
                    {
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _2775 = _2562;
                        float _2776 = _2563;
                        float _2777 = _2564;
                        float _2778 = _2565;
                        float _2779 = _2566;
                        float _2780 = _2567;
                        uint _2781 = _2577;
                        uint _2782;
                        vec4 _2807;
                        float _2808;
                        vec4 _2823;
                        vec3 _2835;
                        vec4 _2851;
                        vec4 _2867;
                        float _2914;
                        bool _2915;
                        for (;;)
                        {
                            uint _2792 = ((_2568 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2781));
                            _2782 = (_2781 + 4294967295u) & _2781;
                            uint _2794 = _2792 * 40u;
                            _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            _2808 = _2807.w;
                            uint _2810 = (_2792 * 40u) + 4u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            uint _2825 = (_2792 * 40u) + 8u;
                            _2835 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x));
                            uint _2838 = (_2792 * 40u) + 16u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2854 = (_2792 * 40u) + 20u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2870 = (_2792 * 40u) + 24u;
                            vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2889 = (_2792 * 40u) + 28u;
                            vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            _2914 = fma(_2165, _2902.z, fma(_2164, _2902.y, _2902.x * _2163)) + _2902.w;
                            _2915 = !((fma(_2165, _2883.z, fma(_2164, _2883.y, _2883.x * _2163)) + _2883.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2915)
                            {
                                float _2942 = _2807.x - _2163;
                                float _2943 = _2807.y - _2164;
                                float _2944 = _2807.z - _2165;
                                float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                                float _2948 = inversesqrt(_2945);
                                float _2949 = _2948 * _2942;
                                float _2950 = _2948 * _2943;
                                float _2951 = _2948 * _2944;
                                float _2955 = 1.0 - (_2945 / (_2808 * _2808));
                                float _4015 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                                float _2956 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                                float _2960 = sqrt(_2945) * _2823.w;
                                float _2962 = 1.39999997615814208984375 / (_2960 + 1.39999997615814208984375);
                                float _2963 = _2962 * _2962;
                                float _2966 = ((1.0 - _2963) * dot(vec3(_2949, _2950, _2951), vec3(_420, _423, _426))) + _2963;
                                float _2969 = _2960 * _2960;
                                float _2973 = (fma(_2165, _2851.z, fma(_2164, _2851.y, _2851.x * _2163)) + _2851.w) / _2914;
                                float _2974 = (fma(_2165, _2867.z, fma(_2164, _2867.y, _2867.x * _2163)) + _2867.w) / _2914;
                                float _2978 = 1.0 - dot(vec2(_2973, _2974), vec2(_2973, _2974));
                                float _4031 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _2980 = _2979 * (((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2956) / ((_2969 * 0.699999988079071044921875) + 1.0));
                                float _2992 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                                float _2993 = 1.0 - _496;
                                float _3000 = sqrt(1.0 - ((1.0 - (_2993 * _2993)) * (1.0 - (_2992 * _2992))));
                                float _3001 = _3000 * _3000;
                                float _3002 = _3001 * _3001;
                                float _3003 = _2949 - _2449;
                                float _3004 = _2950 - _2450;
                                float _3005 = _2951 - _2451;
                                float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                                float _3013 = dot(vec3(_420, _423, _426), vec3((-0.0) - _2449, (-0.0) - _2450, (-0.0) - _2451));
                                float _4042 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3016 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3017 = dot(vec3(_420, _423, _426), vec3(_3009 * _3003, _3009 * _3004, _3009 * _3005));
                                float _4053 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3020 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3024 = ((_3020 * _3020) * (_3002 + (-1.0))) + 1.0;
                                float _3025 = _2962 * _3001;
                                float _3026 = _3025 * _3025;
                                float _3032 = ((1.0 - _3026) * dot(vec3(_420, _423, _426), vec3(_2949, _2950, _2951))) + _3026;
                                float _4064 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3034 = 1.0 - _3001;
                                float _3044 = (0.5 / (((_3033 * ((_3016 * _3034) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_3033 * _3034) + _3001) * _3016))) * _3033;
                                float _4075 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3054 = (_2979 * _2956) * (((_3002 * 3.1415927410125732421875) * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) / ((_3024 * _3024) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2980 * _2823.z;
                                frontier_phi_75_pred_1 = _2980 * _2823.y;
                                frontier_phi_75_pred_2 = _2980 * _2823.x;
                                frontier_phi_75_pred_3 = _3054 * _2835.z;
                                frontier_phi_75_pred_4 = _3054 * _2835.y;
                                frontier_phi_75_pred_5 = _3054 * _2835.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3063 = frontier_phi_75_pred;
                            _3062 = frontier_phi_75_pred_1;
                            _3061 = frontier_phi_75_pred_2;
                            _3060 = frontier_phi_75_pred_3;
                            _3059 = frontier_phi_75_pred_4;
                            _3058 = frontier_phi_75_pred_5;
                            _2765 = _3061 + _2778;
                            _2766 = _3062 + _2779;
                            _2767 = _3063 + _2780;
                            _2762 = _3058 + _2775;
                            _2763 = _3059 + _2776;
                            _2764 = _3060 + _2777;
                            if (_2782 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2782;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2767;
                        frontier_phi_69_pred_1 = _2766;
                        frontier_phi_69_pred_2 = _2765;
                        frontier_phi_69_pred_3 = _2764;
                        frontier_phi_69_pred_4 = _2763;
                        frontier_phi_69_pred_5 = _2762;
                    }
                    _2434 = frontier_phi_69_pred;
                    _2432 = frontier_phi_69_pred_1;
                    _2430 = frontier_phi_69_pred_2;
                    _2428 = frontier_phi_69_pred_3;
                    _2426 = frontier_phi_69_pred_4;
                    _2424 = frontier_phi_69_pred_5;
                    uint _2569 = _2568 + 1u;
                    if (_2569 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2562 = _2424;
                        _2563 = _2426;
                        _2564 = _2428;
                        _2565 = _2430;
                        _2566 = _2432;
                        _2567 = _2434;
                        _2568 = _2569;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2434;
                frontier_phi_57_58_ladder_1 = _2432;
                frontier_phi_57_58_ladder_2 = _2430;
                frontier_phi_57_58_ladder_3 = _2428;
                frontier_phi_57_58_ladder_4 = _2426;
                frontier_phi_57_58_ladder_5 = _2424;
            }
            else
            {
                frontier_phi_57_58_ladder = _2321;
                frontier_phi_57_58_ladder_1 = _2319;
                frontier_phi_57_58_ladder_2 = _2317;
                frontier_phi_57_58_ladder_3 = _2315;
                frontier_phi_57_58_ladder_4 = _2313;
                frontier_phi_57_58_ladder_5 = _2311;
            }
            _2423 = frontier_phi_57_58_ladder_5;
            _2425 = frontier_phi_57_58_ladder_4;
            _2427 = frontier_phi_57_58_ladder_3;
            _2429 = frontier_phi_57_58_ladder_2;
            _2431 = frontier_phi_57_58_ladder_1;
            _2433 = frontier_phi_57_58_ladder;
        }
        float _2438 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
        _2221 = (_2438 * _2429) + _1658;
        _2223 = (_2438 * _2431) + _1660;
        _2225 = (_2438 * _2433) + _1662;
        _2227 = ((_2423 * _465) * _2438) + _2003;
        _2229 = ((_2425 * _467) * _2438) + _2005;
        _2231 = ((_2427 * _468) * _2438) + _2007;
    }
    else
    {
        _2221 = _1658;
        _2223 = _1660;
        _2225 = _1662;
        _2227 = _2003;
        _2229 = _2005;
        _2231 = _2007;
    }
    float _4091 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4102 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4113 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4124 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _2256 = cbInstanceData._m0[_439 + 6u].w * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)));
    float _2261 = _398 / cbSceneParam._m0[86u].x;
    float _2262 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2276 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2278 = _2276.x;
    float _2279 = _2276.y;
    float _2280 = _2276.z;
    float _2281 = _2276.w;
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2336 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2337 = _2336 / _331;
        float _2348 = _2337 * _383;
        float _2349 = _384 * _2337;
        float _2350 = (-0.0) - _2349;
        float _2351 = _2337 * _385;
        float _2353 = (cbSceneParam._m0[77u].w * _2350) / _2336;
        float _2354 = _2353 + cbSceneParam._m0[79u].w;
        float _2355 = cbSceneParam._m0[79u].w - _2349;
        float _2361 = sqrt(((_2348 * _2348) + (_2349 * _2349)) + (_2351 * _2351));
        float _2364 = (1.0 - (cbSceneParam._m0[77u].w / _2336)) * _2361;
        float _2369 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2371 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2524;
        if (abs((_2350 - _2353) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2524 = ((((_2354 > 0.0) ? exp2(_2369 * _2354) : (2.0 - exp2(_2371 * _2354))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2364;
        }
        else
        {
            float _2484 = 1.0 / cbSceneParam._m0[80u].x;
            float _2485 = isnan(_2355) ? _2354 : (isnan(_2354) ? _2355 : max(_2354, _2355));
            float _2486 = isnan(_2355) ? _2354 : (isnan(_2354) ? _2355 : min(_2354, _2355));
            float _2495 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : min(_2485, 0.0));
            float _2496 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : min(_2486, 0.0));
            _2524 = ((abs(_2361 / _2350) * cbSceneParam._m0[80u].y) * ((((_2495 - _2496) * 2.0) - ((exp2(_2369 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0)))) - exp2(_2369 * (isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0))))) * _2484)) - ((exp2(_2371 * _2495) - exp2(_2371 * _2496)) * _2484))) + (_2364 * cbSceneParam._m0[80u].z);
        }
        vec4 _2526 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, 1.0), 0.0);
        float _2535 = exp2((_2524 * (-1.44269502162933349609375)) * (1.0 - _2526.w));
        float _2536 = log2(_2535);
        float _2552 = log2(_2281);
        _2373 = (exp2(_2552 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2536 * cbSceneParam._m0[78u].x)) * _2526.x) / cbSceneParam._m0[78u].x)) + _2278;
        _2375 = (exp2(_2552 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2536 * cbSceneParam._m0[78u].y)) * _2526.y) / cbSceneParam._m0[78u].y)) + _2279;
        _2377 = (exp2(_2552 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2536 * cbSceneParam._m0[78u].z)) * _2526.z) / cbSceneParam._m0[78u].z)) + _2280;
        _2379 = _2535 * _2281;
    }
    else
    {
        _2373 = _2278;
        _2375 = _2279;
        _2377 = _2280;
        _2379 = _2281;
    }
    float _2391 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2392 = _2391 == 3.0;
    float _2393 = log2(_2379);
    float _2400 = exp2(_2393 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2221 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _480))) + ((_2227 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2401 = exp2(_2393 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2223 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _480))) + ((_2229 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2402 = exp2(_2393 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2225 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _480))) + ((_2231 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2411 = (_2391 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2411 * (_2392 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2373)));
    SV_Target.y = _2411 * (_2392 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2375)));
    SV_Target.z = _2411 * (_2392 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2377)));
    SV_Target.w = _2256;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2256;
}


