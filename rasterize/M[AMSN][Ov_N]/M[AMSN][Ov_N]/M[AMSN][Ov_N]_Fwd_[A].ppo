#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _900;
float _3293;
float _3294;
float _3295;
float _3296;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _229 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _229.x;
    float _233 = _229.y;
    float _234 = _229.z;
    float _235 = _229.w;
    vec4 _252 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _274 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _281 = (_274.x * 2.0) + (-1.0);
    float _282 = (_274.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_281, _282), vec2(_281, _282));
    float _3305 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))));
    float _292 = ((_252.z - _278) * cbMtdParam._m0[9u].y) + _278;
    float _3316 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _296 = _281 + (((_252.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _297 = _282 + (((_252.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _300 = fma(_289, _213, fma(_297, _205 * TANGENT.x, (_191 * _184) * _296));
    float _303 = fma(_289, _214, fma(_297, _205 * TANGENT.y, (_191 * _185) * _296));
    float _306 = fma(_289, _215, fma(_297, _205 * TANGENT.z, (_191 * _186) * _296));
    float _310 = inversesqrt(dot(vec3(_300, _303, _306), vec3(_300, _303, _306)));
    float _311 = _310 * _300;
    float _312 = _310 * _303;
    float _313 = _310 * _306;
    float _3327 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _314 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _315 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3360 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3371 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3382 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _319 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    vec4 _401 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _403 = _401.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _579 = sqrt(((_387 * _387) + (_388 * _388)) + (_389 * _389));
        float _585 = (cbMatDynParam._m0[5u].x * _579) + cbMatDynParam._m0[5u].y;
        float _3393 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _586 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _590 = (cbMatDynParam._m0[5u].z * _579) + cbMatDynParam._m0[5u].w;
        float _3404 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) - _586)) + _586) < ((_403 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _436 = fma(_313, cbSceneParam._m0[5u].z, fma(_312, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _311));
    float _439 = fma(_313, cbSceneParam._m0[6u].z, fma(_312, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _311));
    float _442 = fma(_313, cbSceneParam._m0[7u].z, fma(_312, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _311));
    uint _455 = uint(roundEven(NORMAL.w)) * 13u;
    uint _457 = _455 + 9u;
    uint _458 = _457 + uint(cbMatDynParam._m0[0u].w);
    float _464 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_458].x;
    float _465 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_458].y;
    float _466 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_458].z;
    float _3415 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _470 = 1.0 - _319;
    float _471 = _467 * _470;
    float _472 = _468 * _470;
    float _473 = _469 * _470;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _319;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _319;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _319;
    float _481 = _478 + 0.039999999105930328369140625;
    float _483 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _496 = _493.x * TEXCOORD.z;
    float _497 = dot(vec3(_311, _312, _313), vec3(_394, _395, _396));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _311) - _394;
    float _505 = (_500 * _312) - _395;
    float _506 = (_500 * _313) - _396;
    float _510 = abs(dot(vec3(_394, _395, _396), vec3(_311, _312, _313)));
    float _3448 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_315);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _531 = (1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _532 = _525 * _512;
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _899;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _624 = fma(_568, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560));
        float _628 = fma(_568, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560));
        float _632 = fma(_568, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560));
        float _657 = _560 + _311;
        float _658 = _564 + _312;
        float _659 = _568 + _313;
        float _669 = fma(_659, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657)) - _624;
        float _670 = fma(_659, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657)) - _628;
        float _671 = fma(_659, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657)) - _632;
        float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
        float _688 = ((_675 * _669) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_624 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_675 * _670) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_628 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_675 * _671) / cbModelParam._m0[34u].z) + ((((((_632 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _727 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_693.x + (-0.5));
        float _729 = _727 * (_693.y + (-0.5));
        float _730 = _727 * (_693.z + (-0.5));
        float _737 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_700.x + (-0.5));
        float _739 = _737 * (_700.y + (-0.5));
        float _740 = _737 * (_700.z + (-0.5));
        float _747 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_707.x + (-0.5));
        float _749 = _747 * (_707.y + (-0.5));
        float _750 = _747 * (_707.z + (-0.5));
        float _757 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_714.x + (-0.5));
        float _759 = _757 * (_714.y + (-0.5));
        float _760 = _757 * (_714.z + (-0.5));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = _728 * 0.5;
        float _765 = _738 * 0.5;
        float _766 = _748 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _781 = (dot(vec3(_311, _312, _313), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _791 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3496 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_793 + 1.0))) + _798) * _761;
        float _808 = _729 * 0.5;
        float _809 = _739 * 0.5;
        float _810 = _749 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_311, _312, _313), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3529 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_835 + 1.0))) + _840) * _762;
        float _850 = _730 * 0.5;
        float _851 = _740 * 0.5;
        float _852 = _750 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_311, _312, _313), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3562 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_877 + 1.0))) + _882) * _763;
        _899 = _730;
        _901 = _729;
        _902 = _728;
        _903 = _740;
        _904 = _739;
        _905 = _738;
        _906 = _750;
        _907 = _749;
        _908 = _748;
        _909 = _763;
        _910 = _762;
        _911 = _761;
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
    }
    else
    {
        _899 = _900;
        _901 = _900;
        _902 = _900;
        _903 = _900;
        _904 = _900;
        _905 = _900;
        _906 = _900;
        _907 = _900;
        _908 = _900;
        _909 = _900;
        _910 = _900;
        _911 = _900;
        _912 = 0.0;
        _913 = 0.0;
        _914 = 0.0;
    }
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _943 = fma(_568, cbModelParam._m0[30u].z, fma(_564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _560));
        float _947 = fma(_568, cbModelParam._m0[31u].z, fma(_564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _560));
        float _951 = fma(_568, cbModelParam._m0[32u].z, fma(_564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _560));
        float _974 = _560 + _311;
        float _975 = _564 + _312;
        float _976 = _568 + _313;
        float _986 = fma(_976, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[35u].z) + ((((((_951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1009.x + (-0.5));
        float _1044 = _1042 * (_1009.y + (-0.5));
        float _1045 = _1042 * (_1009.z + (-0.5));
        float _1052 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1016.x + (-0.5));
        float _1054 = _1052 * (_1016.y + (-0.5));
        float _1055 = _1052 * (_1016.z + (-0.5));
        float _1062 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1023.x + (-0.5));
        float _1064 = _1062 * (_1023.y + (-0.5));
        float _1065 = _1062 * (_1023.z + (-0.5));
        float _1072 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1030.x + (-0.5));
        float _1074 = _1072 * (_1030.y + (-0.5));
        float _1075 = _1072 * (_1030.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_311, _312, _313), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3625 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1106 + 1.0))) + _1111) * _1076;
        float _1121 = _1044 * 0.5;
        float _1122 = _1054 * 0.5;
        float _1123 = _1064 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_311, _312, _313), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3658 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1148 + 1.0))) + _1153) * _1077;
        float _1163 = _1045 * 0.5;
        float _1164 = _1055 * 0.5;
        float _1165 = _1065 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_311, _312, _313), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3691 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1190 + 1.0))) + _1195) * _1078;
        _1212 = _1045;
        _1213 = _1044;
        _1214 = _1043;
        _1215 = _1055;
        _1216 = _1054;
        _1217 = _1053;
        _1218 = _1065;
        _1219 = _1064;
        _1220 = _1063;
        _1221 = _1078;
        _1222 = _1077;
        _1223 = _1076;
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _900;
        _1213 = _900;
        _1214 = _900;
        _1215 = _900;
        _1216 = _900;
        _1217 = _900;
        _1218 = _900;
        _1219 = _900;
        _1220 = _900;
        _1221 = _900;
        _1222 = _900;
        _1223 = _900;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1259 = fma(_1238, cbSceneParam._m0[89u].z, fma(_1237, cbSceneParam._m0[89u].y, _1236 * cbSceneParam._m0[89u].x));
    float _1262 = fma(_1238, cbSceneParam._m0[90u].z, fma(_1237, cbSceneParam._m0[90u].y, _1236 * cbSceneParam._m0[90u].x));
    float _1265 = fma(_1238, cbSceneParam._m0[91u].z, fma(_1237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1236));
    float _1280 = _504 * 0.5;
    float _1281 = _505 * 0.5;
    float _1282 = _506 * 0.5;
    float _1283 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1286 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1289 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1323;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1296 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_899, _903, _906, _909));
        float _1300 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_901, _904, _907, _910));
        float _1304 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_902, _905, _908, _911));
        float _1311 = dot(vec4(cbModelParam._m0[39u]), vec4(_1280, _1281, _1282, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1334;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1325 = dot(vec4(cbModelParam._m0[40u]), vec4(_1280, _1281, _1282, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1338 = (_1334 * cbModelParam._m0[1u].x) + (_1323 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _315);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1348 : min(cbModelParam._m0[25u].z, _1348));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1398 = fma(_568, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560)) + cbModelParam._m0[13u].w;
        float _1402 = fma(_568, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560)) + cbModelParam._m0[14u].w;
        float _1406 = fma(_568, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560)) + cbModelParam._m0[15u].w;
        float _1409 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1412 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1415 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1443;
        if (_1409 > 0.0)
        {
            _1443 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1443 = frontier_phi_19_17_ladder;
        }
        float _1651;
        if (_1412 > 0.0)
        {
            _1651 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1651 = frontier_phi_28_24_ladder;
        }
        float _1905;
        if (_1415 > 0.0)
        {
            _1905 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1905 = frontier_phi_40_35_ladder;
        }
        float _1907 = isnan(_1651) ? _1443 : (isnan(_1443) ? _1651 : min(_1443, _1651));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1409) + _1398;
        float _1913 = (_1908 * _1412) + _1402;
        float _1914 = (_1908 * _1415) + _1406;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1349);
            frontier_phi_18_40_ladder = _2042.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2042.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2042.x * cbModelParam._m0[1u].y;
        }
        _1431 = frontier_phi_18_40_ladder_2;
        _1433 = frontier_phi_18_40_ladder_1;
        _1435 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1349);
        _1431 = _1419.x * cbModelParam._m0[1u].y;
        _1433 = _1419.y * cbModelParam._m0[1u].y;
        _1435 = _1419.z * cbModelParam._m0[1u].y;
    }
    float _1439 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _315);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1439 : min(cbModelParam._m0[25u].w, _1439));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1497 = fma(_568, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560)) + cbModelParam._m0[21u].w;
        float _1501 = fma(_568, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560)) + cbModelParam._m0[22u].w;
        float _1505 = fma(_568, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560)) + cbModelParam._m0[23u].w;
        float _1508 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1511 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1514 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1656;
        if (_1508 > 0.0)
        {
            _1656 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1656 = frontier_phi_30_26_ladder;
        }
        float _1932;
        if (_1511 > 0.0)
        {
            _1932 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1932 = frontier_phi_42_37_ladder;
        }
        float _2145;
        if (_1514 > 0.0)
        {
            _2145 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2145 = frontier_phi_51_48_ladder;
        }
        float _2147 = isnan(_1932) ? _1656 : (isnan(_1656) ? _1932 : min(_1656, _1932));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1508) + _1497;
        float _2153 = (_2148 * _1511) + _1501;
        float _2154 = (_2148 * _1514) + _1505;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2154, cbModelParam._m0[17u].z, fma(_2153, cbModelParam._m0[17u].y, _2152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2154, cbModelParam._m0[18u].z, fma(_2153, cbModelParam._m0[18u].y, _2152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2154, cbModelParam._m0[19u].z, fma(_2153, cbModelParam._m0[19u].y, _2152 * cbModelParam._m0[19u].x))), _1440);
            frontier_phi_27_51_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1533 = frontier_phi_27_51_ladder_2;
        _1535 = frontier_phi_27_51_ladder_1;
        _1537 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1440);
        _1533 = _1517.x * cbModelParam._m0[1u].z;
        _1535 = _1517.y * cbModelParam._m0[1u].z;
        _1537 = _1517.z * cbModelParam._m0[1u].z;
    }
    float _1550 = (((_531 * _481) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1552 = (((_531 * _483) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_531 * _484) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1557 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, _1550 * cbSceneParam._m0[91u].x));
    uvec4 _1573 = floatBitsToUint(cbInstanceData._m0[_455 + 5u]);
    uint _1575 = _1573.x * 14u;
    uint _1576 = _1575 + 13u;
    float _1583 = _496 + (-1.0);
    float _1588 = (cbLight._m0[_1576].x * _1583) + 1.0;
    float _1589 = (cbLight._m0[_1576].y * _1583) + 1.0;
    float _1590 = (cbLight._m0[_1576].z * _1583) + 1.0;
    float _1591 = (cbLight._m0[_1576].w * _1583) + 1.0;
    uint _1592 = _1575 + 5u;
    float _1598 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    uint _1602 = _1575 + 4u;
    float _1609 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1613 = _1575 | 1u;
    float _1624 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_311, _312, _313));
    float _1627 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_311, _312, _313));
    float _3827 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _3838 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1632 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1634 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1641 = ((cbLight._m0[_1592].x * _1598) * _1634) + ((cbLight._m0[_1602].x * _1609) * _1632);
    float _1642 = ((_1598 * cbLight._m0[_1592].y) * _1634) + ((_1609 * cbLight._m0[_1602].y) * _1632);
    float _1643 = ((_1598 * cbLight._m0[_1592].z) * _1634) + ((_1609 * cbLight._m0[_1602].z) * _1632);
    uvec4 _1648 = floatBitsToUint(cbLight._m0[_1575 + 12u]);
    bool _1650 = _1648.x == 0u;
    float _1661;
    float _1663;
    float _1665;
    if (_1650)
    {
        _1661 = _1641;
        _1663 = _1642;
        _1665 = _1643;
    }
    else
    {
        uint _1669 = _1575 + 6u;
        float _1685 = (dot(vec3(cbLight._m0[_1575 + 2u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1686 = _1685 * _1685;
        float _3849 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1688 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1661 = (((cbLight._m0[_1669].x * 0.3183098733425140380859375) * _1687) * _1688) + _1641;
        _1663 = (((cbLight._m0[_1669].y * 0.3183098733425140380859375) * _1687) * _1688) + _1642;
        _1665 = (((cbLight._m0[_1669].z * 0.3183098733425140380859375) * _1687) * _1688) + _1643;
    }
    bool _1668 = _1648.y == 0u;
    float _1706;
    float _1708;
    float _1710;
    if (_1668)
    {
        _1706 = _1661;
        _1708 = _1663;
        _1710 = _1665;
    }
    else
    {
        uint _1876 = _1575 + 7u;
        float _1892 = (dot(vec3(cbLight._m0[_1575 + 3u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _3865 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1895 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1706 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1661;
        _1708 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1663;
        _1710 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1665;
    }
    uint _1713 = _1575 + 8u;
    float _1726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _315) * 0.949999988079071044921875);
    float _1727 = _1726 * _1726;
    float _1728 = cbLight._m0[_1575].x + _394;
    float _1729 = cbLight._m0[_1575].y + _395;
    float _1730 = cbLight._m0[_1575].z + _396;
    float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
    float _1735 = _1734 * _1728;
    float _1736 = _1734 * _1729;
    float _1737 = _1734 * _1730;
    float _1738 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1575].xyz));
    float _3881 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1742 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1743 = dot(vec3(_311, _312, _313), vec3(_1735, _1736, _1737));
    float _3903 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1747 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1735, _1736, _1737));
    float _3914 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1751 = _1727 * _1727;
    float _1755 = ((_1746 * _1746) * (_1751 + (-1.0))) + 1.0;
    float _1763 = exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0);
    float _1764 = 0.959999978542327880859375 - _478;
    float _1766 = 0.959999978542327880859375 - _479;
    float _1767 = 0.959999978542327880859375 - _480;
    float _1774 = 1.0 - _1727;
    float _1785 = (0.5 / (((_1742 * ((_1741 * _1774) + _1727)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1774) + _1727) * _1741))) * _1741;
    float _3925 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1787 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1751 / ((_1755 * _1755) * 3.141590118408203125));
    uint _1798 = _1575 + 9u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _315) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1613].x + _394;
    float _1812 = cbLight._m0[_1613].y + _395;
    float _1813 = cbLight._m0[_1613].z + _396;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1613].xyz));
    float _3936 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1825 = dot(vec3(_311, _312, _313), vec3(_1818, _1819, _1820));
    float _3947 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1818, _1819, _1820));
    float _3958 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = _1810 * _1810;
    float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
    float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0);
    float _1851 = 1.0 - _1810;
    float _1861 = (0.5 / (((_1742 * ((_1824 * _1851) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1851) + _1810) * _1824))) * _1824;
    float _3969 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
    float _1873 = (((((_1844 * _1764) + _481) * cbLight._m0[_1798].x) * _1863) * _1598) + (((((_1763 * _1764) + _481) * cbLight._m0[_1713].x) * _1787) * _1609);
    float _1874 = (((((_1844 * _1766) + _483) * cbLight._m0[_1798].y) * _1863) * _1598) + (((((_1763 * _1766) + _483) * cbLight._m0[_1713].y) * _1787) * _1609);
    float _1875 = (((((_1844 * _1767) + _484) * cbLight._m0[_1798].z) * _1863) * _1598) + (((((_1763 * _1767) + _484) * cbLight._m0[_1713].z) * _1787) * _1609);
    float _1937;
    float _1939;
    float _1941;
    if (_1650)
    {
        _1937 = _1873;
        _1939 = _1874;
        _1941 = _1875;
    }
    else
    {
        uint _1943 = _1575 + 2u;
        uint _1947 = _1575 + 10u;
        float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _315) * 0.949999988079071044921875);
        float _1962 = _1961 * _1961;
        float _1963 = cbLight._m0[_1943].x + _394;
        float _1964 = cbLight._m0[_1943].y + _395;
        float _1965 = cbLight._m0[_1943].z + _396;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1970 = _1969 * _1963;
        float _1971 = _1969 * _1964;
        float _1972 = _1969 * _1965;
        float _1973 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1943].xyz));
        float _3980 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1977 = dot(vec3(_311, _312, _313), vec3(_1970, _1971, _1972));
        float _3991 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1981 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_1970, _1971, _1972));
        float _4002 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1985 = _1962 * _1962;
        float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
        float _1996 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
        float _2003 = 1.0 - _1962;
        float _2013 = (0.5 / (((_1742 * ((_1976 * _2003) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _2003) + _1962) * _1976))) * _1976;
        float _4013 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2015 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
        float _2016 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1937 = (((((_1996 * _1764) + _481) * cbLight._m0[_1947].x) * _2015) * _2016) + _1873;
        _1939 = (((((_1996 * _1766) + _483) * cbLight._m0[_1947].y) * _2015) * _2016) + _1874;
        _1941 = (((((_1996 * _1767) + _484) * cbLight._m0[_1947].z) * _2015) * _2016) + _1875;
    }
    float _2051;
    float _2053;
    float _2055;
    if (_1668)
    {
        _2051 = _1937;
        _2053 = _1939;
        _2055 = _1941;
    }
    else
    {
        uint _2062 = _1575 + 3u;
        uint _2066 = _1575 + 11u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _315) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _394;
        float _2083 = cbLight._m0[_2062].y + _395;
        float _2084 = cbLight._m0[_2062].z + _396;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2062].xyz));
        float _4029 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2096 = dot(vec3(_311, _312, _313), vec3(_2089, _2090, _2091));
        float _4040 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4051 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0);
        float _2122 = 1.0 - _2081;
        float _2132 = (0.5 / (((_1742 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _2122) + _2081) * _2095))) * _2095;
        float _4062 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _2051 = (((((_2115 * _1764) + _481) * cbLight._m0[_2066].x) * _2134) * _2135) + _1937;
        _2053 = (((((_2115 * _1766) + _483) * cbLight._m0[_2066].y) * _2134) * _2135) + _1939;
        _2055 = (((((_2115 * _1767) + _484) * cbLight._m0[_2066].z) * _2134) * _2135) + _1941;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1573.y == 0u)
    {
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2210;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2210;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2210;
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2226)));
        float _2247 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            uint _2517 = 0u;
            uint _2526;
            bool _2527;
            for (;;)
            {
                _2526 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                _2527 = _2526 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2527)
                {
                    frontier_phi_68_pred = _2513;
                    frontier_phi_68_pred_1 = _2516;
                    frontier_phi_68_pred_2 = _2515;
                    frontier_phi_68_pred_3 = _2514;
                    frontier_phi_68_pred_4 = _2512;
                    frontier_phi_68_pred_5 = _2511;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2526;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2517 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        float _2722 = _2682.x - _2211;
                        float _2723 = _2682.y - _2212;
                        float _2724 = _2682.z - _2213;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2732 = dot(vec3(_436, _439, _442), vec3(_2729, _2730, _2731));
                        float _2737 = 1.0 - (_2725 * _2682.w);
                        float _4088 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2739 = sqrt(_2725) * _2701.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2732) + _2743;
                        float _2749 = _2739 * _2739;
                        float _2753 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2738) / ((_2749 * 0.699999988079071044921875) + 1.0);
                        float _2757 = (-0.0) - _2211;
                        float _2758 = (-0.0) - _2212;
                        float _2759 = (-0.0) - _2213;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2774 = exp2(log2(1.0 / ((_2749 * 3.5) + 5.0)) * 0.25);
                        float _2775 = 1.0 - _512;
                        float _2782 = sqrt(1.0 - ((1.0 - (_2775 * _2775)) * (1.0 - (_2774 * _2774))));
                        float _2783 = _2782 * _2782;
                        float _2784 = _2783 * _2783;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2795 = dot(vec3(_436, _439, _442), vec3(_2764, _2765, _2766));
                        float _4104 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2799 = dot(vec3(_436, _439, _442), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787));
                        float _4115 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2806 = ((_2802 * _2802) * (_2784 + (-1.0))) + 1.0;
                        float _2807 = _2742 * _2783;
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * _2732) + _2808;
                        float _4126 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2813 = 1.0 - _2783;
                        float _2823 = (0.5 / (((_2812 * ((_2798 * _2813) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2813) + _2783) * _2798))) * _2812;
                        float _4137 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2834 = (((_2784 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_2806 * _2806) * ((_2749 * 2.1991131305694580078125) + 3.141590118408203125))) * _2738;
                        _2586 = (_2753 * _2701.x) + _2659;
                        _2587 = (_2753 * _2701.y) + _2660;
                        _2588 = (_2753 * _2701.z) + _2661;
                        _2583 = (_2834 * _2718.x) + _2656;
                        _2584 = (_2834 * _2718.y) + _2657;
                        _2585 = (_2834 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_68_pred = _2585;
                    frontier_phi_68_pred_1 = _2588;
                    frontier_phi_68_pred_2 = _2587;
                    frontier_phi_68_pred_3 = _2586;
                    frontier_phi_68_pred_4 = _2584;
                    frontier_phi_68_pred_5 = _2583;
                }
                _2364 = frontier_phi_68_pred;
                _2370 = frontier_phi_68_pred_1;
                _2368 = frontier_phi_68_pred_2;
                _2366 = frontier_phi_68_pred_3;
                _2362 = frontier_phi_68_pred_4;
                _2360 = frontier_phi_68_pred_5;
                uint _2518 = _2517 + 1u;
                if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2511 = _2360;
                    _2512 = _2362;
                    _2513 = _2364;
                    _2514 = _2366;
                    _2515 = _2368;
                    _2516 = _2370;
                    _2517 = _2518;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((4294967295u << _2376) & _2257) == 0u)
        {
            _2479 = _2359;
            _2481 = _2361;
            _2483 = _2363;
            _2485 = _2365;
            _2487 = _2367;
            _2489 = _2369;
        }
        else
        {
            float _2504 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _2505 = _2504 * _2211;
            float _2506 = _2504 * _2212;
            float _2507 = _2504 * _2213;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2639 = _2359;
                float _2640 = _2361;
                float _2641 = _2363;
                float _2642 = _2365;
                float _2643 = _2367;
                float _2644 = _2369;
                uint _2645 = _2376;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2655)
                    {
                        frontier_phi_79_pred = _2644;
                        frontier_phi_79_pred_1 = _2643;
                        frontier_phi_79_pred_2 = _2642;
                        frontier_phi_79_pred_3 = _2641;
                        frontier_phi_79_pred_4 = _2640;
                        frontier_phi_79_pred_5 = _2639;
                    }
                    else
                    {
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        float _2866 = _2644;
                        uint _2867 = _2654;
                        uint _2868;
                        vec4 _2893;
                        float _2894;
                        vec4 _2909;
                        vec3 _2921;
                        vec4 _2937;
                        vec4 _2953;
                        float _3000;
                        bool _3001;
                        for (;;)
                        {
                            uint _2878 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2867));
                            _2868 = (_2867 + 4294967295u) & _2867;
                            uint _2880 = _2878 * 40u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2894 = _2893.w;
                            uint _2896 = (_2878 * 40u) + 4u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2911 = (_2878 * 40u) + 8u;
                            _2921 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x));
                            uint _2924 = (_2878 * 40u) + 16u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2878 * 40u) + 20u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2956 = (_2878 * 40u) + 24u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2975 = (_2878 * 40u) + 28u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _3000 = fma(_2213, _2988.z, fma(_2212, _2988.y, _2988.x * _2211)) + _2988.w;
                            _3001 = !((fma(_2213, _2969.z, fma(_2212, _2969.y, _2969.x * _2211)) + _2969.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3001)
                            {
                                float _3028 = _2893.x - _2211;
                                float _3029 = _2893.y - _2212;
                                float _3030 = _2893.z - _2213;
                                float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                                float _3034 = inversesqrt(_3031);
                                float _3035 = _3034 * _3028;
                                float _3036 = _3034 * _3029;
                                float _3037 = _3034 * _3030;
                                float _3041 = 1.0 - (_3031 / (_2894 * _2894));
                                float _4148 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3046 = sqrt(_3031) * _2909.w;
                                float _3048 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                                float _3049 = _3048 * _3048;
                                float _3052 = ((1.0 - _3049) * dot(vec3(_3035, _3036, _3037), vec3(_436, _439, _442))) + _3049;
                                float _3055 = _3046 * _3046;
                                float _3059 = (fma(_2213, _2937.z, fma(_2212, _2937.y, _2937.x * _2211)) + _2937.w) / _3000;
                                float _3060 = (fma(_2213, _2953.z, fma(_2212, _2953.y, _2953.x * _2211)) + _2953.w) / _3000;
                                float _3064 = 1.0 - dot(vec2(_3059, _3060), vec2(_3059, _3060));
                                float _4164 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3066 = _3065 * (((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3042) / ((_3055 * 0.699999988079071044921875) + 1.0));
                                float _3078 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                                float _3079 = 1.0 - _512;
                                float _3086 = sqrt(1.0 - ((1.0 - (_3079 * _3079)) * (1.0 - (_3078 * _3078))));
                                float _3087 = _3086 * _3086;
                                float _3088 = _3087 * _3087;
                                float _3089 = _3035 - _2505;
                                float _3090 = _3036 - _2506;
                                float _3091 = _3037 - _2507;
                                float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                                float _3099 = dot(vec3(_436, _439, _442), vec3((-0.0) - _2505, (-0.0) - _2506, (-0.0) - _2507));
                                float _4175 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3102 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3103 = dot(vec3(_436, _439, _442), vec3(_3095 * _3089, _3095 * _3090, _3095 * _3091));
                                float _4186 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3110 = ((_3106 * _3106) * (_3088 + (-1.0))) + 1.0;
                                float _3111 = _3048 * _3087;
                                float _3112 = _3111 * _3111;
                                float _3118 = ((1.0 - _3112) * dot(vec3(_436, _439, _442), vec3(_3035, _3036, _3037))) + _3112;
                                float _4197 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3120 = 1.0 - _3087;
                                float _3130 = (0.5 / (((_3119 * ((_3102 * _3120) + _3087)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3087) * _3102))) * _3119;
                                float _4208 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3140 = (_3065 * _3042) * (((_3088 * 3.1415927410125732421875) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) / ((_3110 * _3110) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3066 * _2909.z;
                                frontier_phi_85_pred_1 = _3066 * _2909.y;
                                frontier_phi_85_pred_2 = _3066 * _2909.x;
                                frontier_phi_85_pred_3 = _3140 * _2921.z;
                                frontier_phi_85_pred_4 = _3140 * _2921.y;
                                frontier_phi_85_pred_5 = _3140 * _2921.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3149 = frontier_phi_85_pred;
                            _3148 = frontier_phi_85_pred_1;
                            _3147 = frontier_phi_85_pred_2;
                            _3146 = frontier_phi_85_pred_3;
                            _3145 = frontier_phi_85_pred_4;
                            _3144 = frontier_phi_85_pred_5;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            if (_2868 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2868;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2853;
                        frontier_phi_79_pred_1 = _2852;
                        frontier_phi_79_pred_2 = _2851;
                        frontier_phi_79_pred_3 = _2850;
                        frontier_phi_79_pred_4 = _2849;
                        frontier_phi_79_pred_5 = _2848;
                    }
                    _2490 = frontier_phi_79_pred;
                    _2488 = frontier_phi_79_pred_1;
                    _2486 = frontier_phi_79_pred_2;
                    _2484 = frontier_phi_79_pred_3;
                    _2482 = frontier_phi_79_pred_4;
                    _2480 = frontier_phi_79_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2480;
                        _2640 = _2482;
                        _2641 = _2484;
                        _2642 = _2486;
                        _2643 = _2488;
                        _2644 = _2490;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2486;
                frontier_phi_60_61_ladder_1 = _2490;
                frontier_phi_60_61_ladder_2 = _2488;
                frontier_phi_60_61_ladder_3 = _2484;
                frontier_phi_60_61_ladder_4 = _2482;
                frontier_phi_60_61_ladder_5 = _2480;
            }
            else
            {
                frontier_phi_60_61_ladder = _2365;
                frontier_phi_60_61_ladder_1 = _2369;
                frontier_phi_60_61_ladder_2 = _2367;
                frontier_phi_60_61_ladder_3 = _2363;
                frontier_phi_60_61_ladder_4 = _2361;
                frontier_phi_60_61_ladder_5 = _2359;
            }
            _2479 = frontier_phi_60_61_ladder_5;
            _2481 = frontier_phi_60_61_ladder_4;
            _2483 = frontier_phi_60_61_ladder_3;
            _2485 = frontier_phi_60_61_ladder;
            _2487 = frontier_phi_60_61_ladder_2;
            _2489 = frontier_phi_60_61_ladder_1;
        }
        float _2494 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2269 = (_2494 * _2485) + _1706;
        _2271 = (_2494 * _2487) + _1708;
        _2273 = (_2494 * _2489) + _1710;
        _2275 = ((_2479 * _481) * _2494) + _2051;
        _2277 = ((_2481 * _483) * _2494) + _2053;
        _2279 = ((_2483 * _484) * _2494) + _2055;
    }
    else
    {
        _2269 = _1706;
        _2271 = _1708;
        _2273 = _1710;
        _2275 = _2051;
        _2277 = _2053;
        _2279 = _2055;
    }
    float _4224 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4235 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4246 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4257 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _2297 = ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2269 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _496))) + ((_2275 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2298 = ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2271 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _496))) + ((_2277 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2299 = ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2273 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _496))) + ((_2279 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2304 = cbInstanceData._m0[_455 + 6u].w * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)));
    float _2309 = _415 / cbSceneParam._m0[86u].x;
    float _2310 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2385 = _2384 / _335;
        float _2396 = _2385 * _387;
        float _2397 = _388 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2399 = _2385 * _389;
        float _2401 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2402 = _2401 + cbSceneParam._m0[79u].w;
        float _2403 = cbSceneParam._m0[79u].w - _2397;
        float _2409 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2399 * _2399));
        float _2412 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2409;
        float _2417 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2419 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2398 - _2401) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2402 > 0.0) ? exp2(_2417 * _2402) : (2.0 - exp2(_2419 * _2402))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2412;
        }
        else
        {
            float _2540 = 1.0 / cbSceneParam._m0[80u].x;
            float _2541 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : max(_2402, _2403));
            float _2542 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : min(_2402, _2403));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            _2596 = ((abs(_2409 / _2398) * cbSceneParam._m0[80u].y) * ((((_2551 - _2552) * 2.0) - ((exp2(_2417 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0)))) - exp2(_2417 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))))) * _2540)) - ((exp2(_2419 * _2551) - exp2(_2419 * _2552)) * _2540))) + (_2412 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2329);
        _2421 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2423 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2425 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2427 = _2607 * _2329;
    }
    else
    {
        _2421 = _2326;
        _2423 = _2327;
        _2425 = _2328;
        _2427 = _2329;
    }
    bool _2634;
    vec4 _2437;
    vec4 _2459;
    float _2461;
    float _2465;
    float _2466;
    float _2467;
    float _2468;
    bool _2478;
    for (;;)
    {
        _2437 = cbMatDynParam._m0[0u];
        float _2439 = roundEven(_2437.y);
        bool _2440 = _2439 == 3.0;
        float _2441 = log2(_2427);
        float _2448 = exp2(_2441 * cbSceneParam._m0[78u].x) * _2297;
        float _2449 = exp2(_2441 * cbSceneParam._m0[78u].y) * _2298;
        float _2450 = exp2(_2441 * cbSceneParam._m0[78u].z) * _2299;
        float _2457 = _403 + (-0.5);
        _2459 = cbMtdParam._m0[1u];
        _2461 = _2459.y * _2457;
        float _2464 = (_2439 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2465 = _2464 * (_2440 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2421)));
        _2466 = _2464 * (_2440 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2423)));
        _2467 = _2464 * (_2440 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2425)));
        _2468 = _2457 * 0.999000012874603271484375;
        _2478 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2478)
        {
            if ((cbInstanceData._m0[_455 + 7u].x + _2468) < 0.5)
            {
                _2634 = true;
                break;
            }
        }
        uint _2575 = _457 + uint(_2437.w);
        if ((cbInstanceData._m0[_2575].w < 1.0) && ((cbInstanceData._m0[_2575].w + _2468) < 0.5))
        {
            _2634 = true;
            break;
        }
        if ((_2461 + _235) < _2459.x)
        {
            _2634 = true;
            break;
        }
        _2634 = false;
        break;
    }
    float _2839;
    if (_2634)
    {
        discard_state = true;
        _2839 = 0.0;
    }
    else
    {
        _2839 = _2304;
    }
    SV_Target.x = _2465;
    SV_Target.y = _2466;
    SV_Target.z = _2467;
    SV_Target.w = _2839;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2304;
    discard_exit();
}


