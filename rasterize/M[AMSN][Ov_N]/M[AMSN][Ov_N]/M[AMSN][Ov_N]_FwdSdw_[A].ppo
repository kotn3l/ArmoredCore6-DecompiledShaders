#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _904;
float _3580;
float _3581;
float _3582;
float _3583;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _233.x;
    float _237 = _233.y;
    float _238 = _233.z;
    float _239 = _233.w;
    vec4 _256 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _278 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _278.z;
    float _285 = (_278.x * 2.0) + (-1.0);
    float _286 = (_278.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_285, _286), vec2(_285, _286));
    float _3592 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))));
    float _296 = ((_256.z - _282) * cbMtdParam._m0[9u].y) + _282;
    float _3603 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _300 = _285 + (((_256.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _301 = _286 + (((_256.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _304 = fma(_293, _217, fma(_301, _209 * TANGENT.x, (_195 * _188) * _300));
    float _307 = fma(_293, _218, fma(_301, _209 * TANGENT.y, (_195 * _189) * _300));
    float _310 = fma(_293, _219, fma(_301, _209 * TANGENT.z, (_195 * _190) * _300));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _3614 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _318 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _319 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3647 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3658 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3669 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _323 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _339 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    vec4 _405 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _407 = _405.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _583 = sqrt(((_391 * _391) + (_392 * _392)) + (_393 * _393));
        float _589 = (cbMatDynParam._m0[5u].x * _583) + cbMatDynParam._m0[5u].y;
        float _3680 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _594 = (cbMatDynParam._m0[5u].z * _583) + cbMatDynParam._m0[5u].w;
        float _3691 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) - _590)) + _590) < ((_407 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _440 = fma(_317, cbSceneParam._m0[5u].z, fma(_316, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _315));
    float _443 = fma(_317, cbSceneParam._m0[6u].z, fma(_316, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _315));
    float _446 = fma(_317, cbSceneParam._m0[7u].z, fma(_316, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _315));
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _461 = _459 + 9u;
    uint _462 = _461 + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3702 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _474 = 1.0 - _323;
    float _475 = _471 * _474;
    float _476 = _472 * _474;
    float _477 = _473 * _474;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _323;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _323;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _323;
    float _485 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    float _488 = _484 + 0.039999999105930328369140625;
    vec4 _497 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _500 = _497.x * TEXCOORD.z;
    float _501 = dot(vec3(_315, _316, _317), vec3(_398, _399, _400));
    float _504 = _501 * 2.0;
    float _508 = (_504 * _315) - _398;
    float _509 = (_504 * _316) - _399;
    float _510 = (_504 * _317) - _400;
    float _514 = abs(dot(vec3(_398, _399, _400), vec3(_315, _316, _317)));
    float _3735 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = sqrt(_319);
    float _529 = exp2((_516 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_516 * 3.0));
    float _535 = (1.0 - _529) * ((_516 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _536 = _529 * _516;
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _903;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _628 = fma(_572, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564));
        float _632 = fma(_572, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564));
        float _636 = fma(_572, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564));
        float _661 = _564 + _315;
        float _662 = _568 + _316;
        float _663 = _572 + _317;
        float _673 = fma(_663, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661)) - _628;
        float _674 = fma(_663, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661)) - _632;
        float _675 = fma(_663, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661)) - _636;
        float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
        float _692 = ((_679 * _673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_628 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_679 * _674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_632 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_679 * _675) / cbModelParam._m0[34u].z) + ((((((_636 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_697.x + (-0.5));
        float _733 = _731 * (_697.y + (-0.5));
        float _734 = _731 * (_697.z + (-0.5));
        float _741 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_704.x + (-0.5));
        float _743 = _741 * (_704.y + (-0.5));
        float _744 = _741 * (_704.z + (-0.5));
        float _751 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_711.x + (-0.5));
        float _753 = _751 * (_711.y + (-0.5));
        float _754 = _751 * (_711.z + (-0.5));
        float _761 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_718.x + (-0.5));
        float _763 = _761 * (_718.y + (-0.5));
        float _764 = _761 * (_718.z + (-0.5));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = _732 * 0.5;
        float _769 = _742 * 0.5;
        float _770 = _752 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _785 = (dot(vec3(_315, _316, _317), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _795 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3783 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_797 + 1.0))) + _802) * _765;
        float _812 = _733 * 0.5;
        float _813 = _743 * 0.5;
        float _814 = _753 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_315, _316, _317), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3816 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_839 + 1.0))) + _844) * _766;
        float _854 = _734 * 0.5;
        float _855 = _744 * 0.5;
        float _856 = _754 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_315, _316, _317), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3849 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_881 + 1.0))) + _886) * _767;
        _903 = _734;
        _905 = _733;
        _906 = _732;
        _907 = _744;
        _908 = _743;
        _909 = _742;
        _910 = _754;
        _911 = _753;
        _912 = _752;
        _913 = _767;
        _914 = _766;
        _915 = _765;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
    }
    else
    {
        _903 = _904;
        _905 = _904;
        _906 = _904;
        _907 = _904;
        _908 = _904;
        _909 = _904;
        _910 = _904;
        _911 = _904;
        _912 = _904;
        _913 = _904;
        _914 = _904;
        _915 = _904;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_572, cbModelParam._m0[30u].z, fma(_568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _564));
        float _951 = fma(_572, cbModelParam._m0[31u].z, fma(_568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _564));
        float _955 = fma(_572, cbModelParam._m0[32u].z, fma(_568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _564));
        float _978 = _564 + _315;
        float _979 = _568 + _316;
        float _980 = _572 + _317;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_315, _316, _317), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3912 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_315, _316, _317), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3945 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_315, _316, _317), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3978 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _904;
        _1217 = _904;
        _1218 = _904;
        _1219 = _904;
        _1220 = _904;
        _1221 = _904;
        _1222 = _904;
        _1223 = _904;
        _1224 = _904;
        _1225 = _904;
        _1226 = _904;
        _1227 = _904;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _508 * 0.5;
    float _1285 = _509 * 0.5;
    float _1286 = _510 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_903, _907, _910, _913));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_905, _908, _911, _914));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _909, _912, _915));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _319);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_572, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_572, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_572, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_510, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508));
        float _1416 = fma(_510, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508));
        float _1419 = fma(_510, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1447 = frontier_phi_19_17_ladder;
        }
        float _1623;
        if (_1416 > 0.0)
        {
            _1623 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1623 = frontier_phi_28_24_ladder;
        }
        float _1919;
        if (_1419 > 0.0)
        {
            _1919 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1919 = frontier_phi_40_35_ladder;
        }
        float _1921 = isnan(_1623) ? _1447 : (isnan(_1447) ? _1623 : min(_1447, _1623));
        float _1922 = isnan(_1919) ? _1921 : (isnan(_1921) ? _1919 : min(_1921, _1919));
        float _1926 = (_1922 * _1413) + _1402;
        float _1927 = (_1922 * _1416) + _1406;
        float _1928 = (_1922 * _1419) + _1410;
        float _1929 = _1922 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1929;
        float _1933 = _1929 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 > _1933) || ((_1927 < _1931) || ((_1926 < _1931) || (_1926 > _1933))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1928, cbModelParam._m0[9u].z, fma(_1927, cbModelParam._m0[9u].y, _1926 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1928, cbModelParam._m0[10u].z, fma(_1927, cbModelParam._m0[10u].y, _1926 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1928, cbModelParam._m0[11u].z, fma(_1927, cbModelParam._m0[11u].y, _1926 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_18_40_ladder = _2073.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2073.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2073.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_18_40_ladder_2;
        _1437 = frontier_phi_18_40_ladder_1;
        _1439 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_508, _509, _510), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _319);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_572, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_572, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_572, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_510, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508));
        float _1515 = fma(_510, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508));
        float _1518 = fma(_510, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508));
        float _1628;
        if (_1512 > 0.0)
        {
            _1628 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1628 = frontier_phi_30_26_ladder;
        }
        float _1946;
        if (_1515 > 0.0)
        {
            _1946 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1946 = frontier_phi_42_37_ladder;
        }
        float _2284;
        if (_1518 > 0.0)
        {
            _2284 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2284 = frontier_phi_52_49_ladder;
        }
        float _2286 = isnan(_1946) ? _1628 : (isnan(_1628) ? _1946 : min(_1628, _1946));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1512) + _1501;
        float _2292 = (_2287 * _1515) + _1505;
        float _2293 = (_2287 * _1518) + _1509;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_27_52_ladder = _2415.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2415.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2415.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_27_52_ladder_2;
        _1539 = frontier_phi_27_52_ladder_1;
        _1541 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_508, _509, _510), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_535 * _485) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_535 * _487) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_535 * _488) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    float _1602 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1610 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1614 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1615 = _1602 / _1614;
    float _1616 = _1606 / _1614;
    float _1617 = _1610 / _1614;
    float _1764;
    float _1765;
    float _1766;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1644 = ((uint(_1617 > cbSceneParam._m0[59u].y) + uint(_1617 > cbSceneParam._m0[59u].x)) + uint(_1617 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1645 = _1644 + 43u;
        uint _1653 = _1644 + 44u;
        uint _1661 = _1644 + 45u;
        uint _1669 = _1644 + 46u;
        float _1680 = fma(_1614, cbSceneParam._m0[_1645].w, fma(_1610, cbSceneParam._m0[_1645].z, fma(_1606, cbSceneParam._m0[_1645].y, _1602 * cbSceneParam._m0[_1645].x)));
        float _1684 = fma(_1614, cbSceneParam._m0[_1653].w, fma(_1610, cbSceneParam._m0[_1653].z, fma(_1606, cbSceneParam._m0[_1653].y, _1602 * cbSceneParam._m0[_1653].x)));
        float _1692 = fma(_1614, cbSceneParam._m0[_1669].w, fma(_1610, cbSceneParam._m0[_1669].z, fma(_1606, cbSceneParam._m0[_1669].y, _1602 * cbSceneParam._m0[_1669].x)));
        float _1697 = cbSceneParam._m0[33u].z * _1692;
        float _1699 = cbSceneParam._m0[33u].w * _1692;
        float _1702 = fma(_1614, cbSceneParam._m0[_1661].w, fma(_1610, cbSceneParam._m0[_1661].z, fma(_1606, cbSceneParam._m0[_1661].y, _1602 * cbSceneParam._m0[_1661].x))) / _1692;
        float _1750 = (cbSceneParam._m0[33u].x - sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617))) * cbSceneParam._m0[33u].y;
        float _4104 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1757 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1697 + _1680) / _1692, (_1699 + _1684) / _1692), _1702), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1699 + _1680) / _1692, (_1684 - _1697) / _1692), _1702), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1680 - _1697) / _1692, (_1684 - _1699) / _1692), _1702), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1680 - _1699) / _1692, (_1697 + _1684) / _1692), _1702), 0.0)).x), vec4(0.25)));
        _1764 = 1.0 - (_1757 * cbSceneParam._m0[34u].x);
        _1765 = 1.0 - (_1757 * cbSceneParam._m0[34u].y);
        _1766 = 1.0 - (_1757 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1764 = 1.0;
        _1765 = 1.0;
        _1766 = 1.0;
    }
    float _1830;
    float _1832;
    float _1834;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1818 = fma(_1614, cbSceneParam._m0[63u].w, fma(_1610, cbSceneParam._m0[63u].z, fma(_1606, cbSceneParam._m0[63u].y, _1602 * cbSceneParam._m0[63u].x)));
        float _1819 = fma(_1614, cbSceneParam._m0[60u].w, fma(_1610, cbSceneParam._m0[60u].z, fma(_1606, cbSceneParam._m0[60u].y, _1602 * cbSceneParam._m0[60u].x))) / _1818;
        float _1820 = fma(_1614, cbSceneParam._m0[61u].w, fma(_1610, cbSceneParam._m0[61u].z, fma(_1606, cbSceneParam._m0[61u].y, _1602 * cbSceneParam._m0[61u].x))) / _1818;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1819 >= cbSceneParam._m0[64u].x) && (_1820 >= cbSceneParam._m0[64u].y)) && (_1819 <= cbSceneParam._m0[64u].z)) && (_1820 <= cbSceneParam._m0[64u].w))
        {
            float _1959 = fma(_1614, cbSceneParam._m0[62u].w, fma(_1610, cbSceneParam._m0[62u].z, fma(_1606, cbSceneParam._m0[62u].y, _1602 * cbSceneParam._m0[62u].x))) / _1818;
            float _1963 = isnan(cbSceneParam._m0[41u].w) ? _1959 : (isnan(_1959) ? cbSceneParam._m0[41u].w : max(_1959, cbSceneParam._m0[41u].w));
            float _2006 = (cbSceneParam._m0[33u].x - sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617))) * cbSceneParam._m0[33u].y;
            float _4120 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
            float _2013 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1819, cbSceneParam._m0[33u].w + _1820), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1819, _1820 - cbSceneParam._m0[33u].z), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1819 - cbSceneParam._m0[33u].z, _1820 - cbSceneParam._m0[33u].w), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1819 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1820), _1963), 0.0)).x), vec4(0.25)));
            float _2017 = 1.0 - (_2013 * cbSceneParam._m0[34u].x);
            float _2018 = 1.0 - (_2013 * cbSceneParam._m0[34u].y);
            float _2019 = 1.0 - (_2013 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2018) ? _1765 : (isnan(_1765) ? _2018 : min(_1765, _2018));
            frontier_phi_39_38_ladder_1 = isnan(_2017) ? _1764 : (isnan(_1764) ? _2017 : min(_1764, _2017));
            frontier_phi_39_38_ladder_2 = isnan(_2019) ? _1766 : (isnan(_1766) ? _2019 : min(_1766, _2019));
        }
        else
        {
            frontier_phi_39_38_ladder = _1765;
            frontier_phi_39_38_ladder_1 = _1764;
            frontier_phi_39_38_ladder_2 = _1766;
        }
        _1830 = frontier_phi_39_38_ladder_1;
        _1832 = frontier_phi_39_38_ladder;
        _1834 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1830 = _1764;
        _1832 = _1765;
        _1834 = _1766;
    }
    uvec4 _1839 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1841 = _1839.x * 14u;
    uint _1842 = _1841 + 13u;
    float _1849 = _500 + (-1.0);
    float _1854 = (cbLight._m0[_1842].x * _1849) + 1.0;
    float _1855 = (cbLight._m0[_1842].y * _1849) + 1.0;
    float _1856 = (cbLight._m0[_1842].z * _1849) + 1.0;
    float _1857 = (cbLight._m0[_1842].w * _1849) + 1.0;
    uint _1858 = _1841 + 5u;
    float _1864 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1868 = _1841 + 4u;
    float _1878 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1882 = _1841 | 1u;
    float _1893 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_315, _316, _317));
    float _1896 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_315, _316, _317));
    float _4156 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _4167 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1901 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _1903 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _1910 = ((cbLight._m0[_1858].x * _1864) * _1903) + (((cbLight._m0[_1868].x * _1830) * _1878) * _1901);
    float _1911 = ((_1864 * cbLight._m0[_1858].y) * _1903) + (((cbLight._m0[_1868].y * _1832) * _1878) * _1901);
    float _1912 = ((_1864 * cbLight._m0[_1858].z) * _1903) + (((cbLight._m0[_1868].z * _1834) * _1878) * _1901);
    uvec4 _1916 = floatBitsToUint(cbLight._m0[_1841 + 12u]);
    bool _1918 = _1916.x == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_1918)
    {
        _2020 = _1910;
        _2022 = _1911;
        _2024 = _1912;
    }
    else
    {
        uint _2028 = _1841 + 6u;
        float _2044 = (dot(vec3(cbLight._m0[_1841 + 2u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4178 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2047 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2020 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1910;
        _2022 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1911;
        _2024 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1912;
    }
    bool _2027 = _1916.y == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2027)
    {
        _2082 = _2020;
        _2084 = _2022;
        _2086 = _2024;
    }
    else
    {
        uint _2255 = _1841 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1841 + 3u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4194 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2274 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2082 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2020;
        _2084 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2022;
        _2086 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2024;
    }
    uint _2089 = _1841 + 8u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _319) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1841].x + _398;
    float _2105 = cbLight._m0[_1841].y + _399;
    float _2106 = cbLight._m0[_1841].z + _400;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1841].xyz));
    float _4210 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _2118 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2119 = dot(vec3(_315, _316, _317), vec3(_2111, _2112, _2113));
    float _4232 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2123 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_2111, _2112, _2113));
    float _4243 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = _2103 * _2103;
    float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
    float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
    float _2140 = 0.959999978542327880859375 - _482;
    float _2142 = 0.959999978542327880859375 - _483;
    float _2143 = 0.959999978542327880859375 - _484;
    float _2150 = 1.0 - _2103;
    float _2161 = (0.5 / (((_2118 * ((_2117 * _2150) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2150) + _2103) * _2117))) * _2117;
    float _4254 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
    uint _2177 = _1841 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _319) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1882].x + _398;
    float _2191 = cbLight._m0[_1882].y + _399;
    float _2192 = cbLight._m0[_1882].z + _400;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1882].xyz));
    float _4265 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2204 = dot(vec3(_315, _316, _317), vec3(_2197, _2198, _2199));
    float _4276 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2197, _2198, _2199));
    float _4287 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2230 = 1.0 - _2189;
    float _2240 = (0.5 / (((_2118 * ((_2203 * _2230) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2230) + _2189) * _2203))) * _2203;
    float _4298 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2252 = (((((_2223 * _2140) + _485) * cbLight._m0[_2177].x) * _2242) * _1864) + ((((cbLight._m0[_2089].x * _1830) * ((_2139 * _2140) + _485)) * _2163) * _1878);
    float _2253 = (((((_2223 * _2142) + _487) * cbLight._m0[_2177].y) * _2242) * _1864) + ((((cbLight._m0[_2089].y * _1832) * ((_2139 * _2142) + _487)) * _2163) * _1878);
    float _2254 = (((((_2223 * _2143) + _488) * cbLight._m0[_2177].z) * _2242) * _1864) + ((((cbLight._m0[_2089].z * _1834) * ((_2139 * _2143) + _488)) * _2163) * _1878);
    float _2310;
    float _2312;
    float _2314;
    if (_1918)
    {
        _2310 = _2252;
        _2312 = _2253;
        _2314 = _2254;
    }
    else
    {
        uint _2316 = _1841 + 2u;
        uint _2320 = _1841 + 10u;
        float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _319) * 0.949999988079071044921875);
        float _2335 = _2334 * _2334;
        float _2336 = cbLight._m0[_2316].x + _398;
        float _2337 = cbLight._m0[_2316].y + _399;
        float _2338 = cbLight._m0[_2316].z + _400;
        float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
        float _2343 = _2342 * _2336;
        float _2344 = _2342 * _2337;
        float _2345 = _2342 * _2338;
        float _2346 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2316].xyz));
        float _4309 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2350 = dot(vec3(_315, _316, _317), vec3(_2343, _2344, _2345));
        float _4320 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2354 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2343, _2344, _2345));
        float _4331 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _2335 * _2335;
        float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
        float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
        float _2376 = 1.0 - _2335;
        float _2386 = (0.5 / (((_2118 * ((_2349 * _2376) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2376) + _2335) * _2349))) * _2349;
        float _4342 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2310 = (((((_2369 * _2140) + _485) * cbLight._m0[_2320].x) * _2388) * _2389) + _2252;
        _2312 = (((((_2369 * _2142) + _487) * cbLight._m0[_2320].y) * _2388) * _2389) + _2253;
        _2314 = (((((_2369 * _2143) + _488) * cbLight._m0[_2320].z) * _2388) * _2389) + _2254;
    }
    float _2420;
    float _2422;
    float _2424;
    if (_2027)
    {
        _2420 = _2310;
        _2422 = _2312;
        _2424 = _2314;
    }
    else
    {
        uint _2431 = _1841 + 3u;
        uint _2435 = _1841 + 11u;
        float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _319) * 0.949999988079071044921875);
        float _2450 = _2449 * _2449;
        float _2451 = cbLight._m0[_2431].x + _398;
        float _2452 = cbLight._m0[_2431].y + _399;
        float _2453 = cbLight._m0[_2431].z + _400;
        float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
        float _2458 = _2457 * _2451;
        float _2459 = _2457 * _2452;
        float _2460 = _2457 * _2453;
        float _2461 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2431].xyz));
        float _4358 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2465 = dot(vec3(_315, _316, _317), vec3(_2458, _2459, _2460));
        float _4369 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2469 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2458, _2459, _2460));
        float _4380 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2473 = _2450 * _2450;
        float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
        float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0);
        float _2491 = 1.0 - _2450;
        float _2501 = (0.5 / (((_2118 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2491) + _2450) * _2464))) * _2464;
        float _4391 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2503 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
        float _2504 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2420 = (((((_2484 * _2140) + _485) * cbLight._m0[_2435].x) * _2503) * _2504) + _2310;
        _2422 = (((((_2484 * _2142) + _487) * cbLight._m0[_2435].y) * _2503) * _2504) + _2312;
        _2424 = (((((_2484 * _2143) + _488) * cbLight._m0[_2435].z) * _2503) * _2504) + _2314;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1839.y == 0u)
    {
        uvec4 _2525 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2526 = _2525.x;
        uint _2537 = uint((float(_2525.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2526))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2526)));
        float _2547 = (log2(_1617 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2548 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        uint _2551 = uint(isnan(14.0) ? _2548 : (isnan(_2548) ? 14.0 : min(_2548, 14.0)));
        uvec4 _2556 = texelFetch(g_lightClusterGridBuffer, int(((_2551 << 2u) + (_2537 << 6u)) >> 2u));
        uint _2557 = _2556.x;
        uint _2558 = _2525.z;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((((1u << ((_2558 >> 4u) & 15u)) + 4294967295u) & _2557) == 0u) || ((_2558 & 240u) == 0u))
        {
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
        }
        else
        {
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            uint _2796 = 0u;
            uint _2805;
            bool _2806;
            for (;;)
            {
                _2805 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                _2806 = _2805 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2806)
                {
                    frontier_phi_73_pred = _2795;
                    frontier_phi_73_pred_1 = _2794;
                    frontier_phi_73_pred_2 = _2793;
                    frontier_phi_73_pred_3 = _2792;
                    frontier_phi_73_pred_4 = _2791;
                    frontier_phi_73_pred_5 = _2790;
                }
                else
                {
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    uint _2941;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2795;
                    _2941 = _2805;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    for (;;)
                    {
                        uint _2945 = uint(findLSB(_2941)) + (_2796 << 5u);
                        uint _2942 = (_2941 + 4294967295u) & _2941;
                        uint _2947 = _2945 * 48u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2967 = (_2945 * 48u) + 4u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2986 = (_2945 * 48u) + 8u;
                        vec3 _2997 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x));
                        float _3001 = _2961.x - _1615;
                        float _3002 = _2961.y - _1616;
                        float _3003 = _2961.z - _1617;
                        float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                        float _3007 = inversesqrt(_3004);
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3011 = dot(vec3(_440, _443, _446), vec3(_3008, _3009, _3010));
                        float _3016 = 1.0 - (_3004 * _2961.w);
                        float _4417 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3018 = sqrt(_3004) * _2980.w;
                        float _3021 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _3011) + _3022;
                        float _3028 = _3018 * _3018;
                        float _3032 = ((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3017) / ((_3028 * 0.699999988079071044921875) + 1.0);
                        float _3036 = (-0.0) - _1615;
                        float _3037 = (-0.0) - _1616;
                        float _3038 = (-0.0) - _1617;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3052 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                        float _3053 = 1.0 - _516;
                        float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                        float _3061 = _3060 * _3060;
                        float _3062 = _3061 * _3061;
                        float _3063 = _3043 + _3008;
                        float _3064 = _3044 + _3009;
                        float _3065 = _3045 + _3010;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3073 = dot(vec3(_440, _443, _446), vec3(_3043, _3044, _3045));
                        float _4433 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3077 = dot(vec3(_440, _443, _446), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                        float _4444 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3080 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                        float _3085 = _3021 * _3061;
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3011) + _3086;
                        float _4455 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3091 = 1.0 - _3061;
                        float _3101 = (0.5 / (((_3090 * ((_3076 * _3091) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3061) * _3076))) * _3090;
                        float _4466 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3112 = (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3084 * _3084) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125))) * _3017;
                        _2865 = (_3032 * _2980.x) + _2938;
                        _2866 = (_3032 * _2980.y) + _2939;
                        _2867 = (_3032 * _2980.z) + _2940;
                        _2862 = (_3112 * _2997.x) + _2935;
                        _2863 = (_3112 * _2997.y) + _2936;
                        _2864 = (_3112 * _2997.z) + _2937;
                        if (_2942 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2942;
                        }
                    }
                    frontier_phi_73_pred = _2867;
                    frontier_phi_73_pred_1 = _2866;
                    frontier_phi_73_pred_2 = _2865;
                    frontier_phi_73_pred_3 = _2864;
                    frontier_phi_73_pred_4 = _2863;
                    frontier_phi_73_pred_5 = _2862;
                }
                _2649 = frontier_phi_73_pred;
                _2647 = frontier_phi_73_pred_1;
                _2645 = frontier_phi_73_pred_2;
                _2643 = frontier_phi_73_pred_3;
                _2641 = frontier_phi_73_pred_4;
                _2639 = frontier_phi_73_pred_5;
                uint _2797 = _2796 + 1u;
                if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2790 = _2639;
                    _2791 = _2641;
                    _2792 = _2643;
                    _2793 = _2645;
                    _2794 = _2647;
                    _2795 = _2649;
                    _2796 = _2797;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
        }
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.z;
        uint _2655 = (_2653 >> 8u) & 15u;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((4294967295u << _2655) & _2557) == 0u)
        {
            _2758 = _2638;
            _2760 = _2640;
            _2762 = _2642;
            _2764 = _2644;
            _2766 = _2646;
            _2768 = _2648;
        }
        else
        {
            float _2783 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
            float _2784 = _2783 * _1615;
            float _2785 = _2783 * _1616;
            float _2786 = _2783 * _1617;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2655 < ((_2653 >> 12u) & 15u))
            {
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2918 = _2638;
                float _2919 = _2640;
                float _2920 = _2642;
                float _2921 = _2644;
                float _2922 = _2646;
                float _2923 = _2648;
                uint _2924 = _2655;
                uint _2933;
                bool _2934;
                for (;;)
                {
                    _2933 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                    _2934 = _2933 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2934)
                    {
                        frontier_phi_84_pred = _2922;
                        frontier_phi_84_pred_1 = _2921;
                        frontier_phi_84_pred_2 = _2920;
                        frontier_phi_84_pred_3 = _2919;
                        frontier_phi_84_pred_4 = _2918;
                        frontier_phi_84_pred_5 = _2923;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3139 = _2918;
                        float _3140 = _2919;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        float _3144 = _2923;
                        uint _3145 = _2933;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3215;
                        vec4 _3231;
                        float _3278;
                        bool _3279;
                        for (;;)
                        {
                            uint _3156 = ((_2924 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3202 = (_3156 * 40u) + 16u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3218 = (_3156 * 40u) + 20u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3234 = (_3156 * 40u) + 24u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3253 = (_3156 * 40u) + 28u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3278 = fma(_1617, _3266.z, fma(_1616, _3266.y, _3266.x * _1615)) + _3266.w;
                            _3279 = !((fma(_1617, _3247.z, fma(_1616, _3247.y, _3247.x * _1615)) + _3247.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3279)
                            {
                                float _3306 = _3171.x - _1615;
                                float _3307 = _3171.y - _1616;
                                float _3308 = _3171.z - _1617;
                                float _3309 = dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308));
                                float _3312 = inversesqrt(_3309);
                                float _3313 = _3312 * _3306;
                                float _3314 = _3312 * _3307;
                                float _3315 = _3312 * _3308;
                                float _3319 = 1.0 - (_3309 / (_3172 * _3172));
                                float _4477 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3324 = sqrt(_3309) * _3187.w;
                                float _3326 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                                float _3327 = _3326 * _3326;
                                float _3330 = ((1.0 - _3327) * dot(vec3(_3313, _3314, _3315), vec3(_440, _443, _446))) + _3327;
                                float _3333 = _3324 * _3324;
                                float _3337 = (fma(_1617, _3215.z, fma(_1616, _3215.y, _3215.x * _1615)) + _3215.w) / _3278;
                                float _3338 = (fma(_1617, _3231.z, fma(_1616, _3231.y, _3231.x * _1615)) + _3231.w) / _3278;
                                float _3342 = 1.0 - dot(vec2(_3337, _3338), vec2(_3337, _3338));
                                float _4493 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3344 = _3343 * (((isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))) * _3320) / ((_3333 * 0.699999988079071044921875) + 1.0));
                                float _3356 = exp2(log2(1.0 / ((_3333 * 3.5) + 5.0)) * 0.25);
                                float _3357 = 1.0 - _516;
                                float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                                float _3365 = _3364 * _3364;
                                float _3366 = _3365 * _3365;
                                float _3367 = _3313 - _2784;
                                float _3368 = _3314 - _2785;
                                float _3369 = _3315 - _2786;
                                float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                                float _3377 = dot(vec3(_440, _443, _446), vec3((-0.0) - _2784, (-0.0) - _2785, (-0.0) - _2786));
                                float _4504 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3381 = dot(vec3(_440, _443, _446), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                                float _4515 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                                float _3389 = _3326 * _3365;
                                float _3390 = _3389 * _3389;
                                float _3396 = ((1.0 - _3390) * dot(vec3(_440, _443, _446), vec3(_3313, _3314, _3315))) + _3390;
                                float _4526 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3398 = 1.0 - _3365;
                                float _3408 = (0.5 / (((_3397 * ((_3380 * _3398) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3365) * _3380))) * _3397;
                                float _4537 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3418 = (_3343 * _3320) * (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3388 * _3388) * ((_3333 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3344 * _3187.y;
                                frontier_phi_90_pred_1 = _3344 * _3187.x;
                                frontier_phi_90_pred_2 = _3418 * _3199.z;
                                frontier_phi_90_pred_3 = _3418 * _3199.y;
                                frontier_phi_90_pred_4 = _3418 * _3199.x;
                                frontier_phi_90_pred_5 = _3344 * _3187.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3426 = frontier_phi_90_pred;
                            _3425 = frontier_phi_90_pred_1;
                            _3424 = frontier_phi_90_pred_2;
                            _3423 = frontier_phi_90_pred_3;
                            _3422 = frontier_phi_90_pred_4;
                            _3427 = frontier_phi_90_pred_5;
                            _3129 = _3425 + _3142;
                            _3130 = _3426 + _3143;
                            _3131 = _3427 + _3144;
                            _3126 = _3422 + _3139;
                            _3127 = _3423 + _3140;
                            _3128 = _3424 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3130;
                        frontier_phi_84_pred_1 = _3129;
                        frontier_phi_84_pred_2 = _3128;
                        frontier_phi_84_pred_3 = _3127;
                        frontier_phi_84_pred_4 = _3126;
                        frontier_phi_84_pred_5 = _3131;
                    }
                    _2767 = frontier_phi_84_pred;
                    _2765 = frontier_phi_84_pred_1;
                    _2763 = frontier_phi_84_pred_2;
                    _2761 = frontier_phi_84_pred_3;
                    _2759 = frontier_phi_84_pred_4;
                    _2769 = frontier_phi_84_pred_5;
                    uint _2925 = _2924 + 1u;
                    if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2918 = _2759;
                        _2919 = _2761;
                        _2920 = _2763;
                        _2921 = _2765;
                        _2922 = _2767;
                        _2923 = _2769;
                        _2924 = _2925;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2769;
                frontier_phi_65_66_ladder_1 = _2765;
                frontier_phi_65_66_ladder_2 = _2767;
                frontier_phi_65_66_ladder_3 = _2761;
                frontier_phi_65_66_ladder_4 = _2759;
                frontier_phi_65_66_ladder_5 = _2763;
            }
            else
            {
                frontier_phi_65_66_ladder = _2648;
                frontier_phi_65_66_ladder_1 = _2644;
                frontier_phi_65_66_ladder_2 = _2646;
                frontier_phi_65_66_ladder_3 = _2640;
                frontier_phi_65_66_ladder_4 = _2638;
                frontier_phi_65_66_ladder_5 = _2642;
            }
            _2758 = frontier_phi_65_66_ladder_4;
            _2760 = frontier_phi_65_66_ladder_3;
            _2762 = frontier_phi_65_66_ladder_5;
            _2764 = frontier_phi_65_66_ladder_1;
            _2766 = frontier_phi_65_66_ladder_2;
            _2768 = frontier_phi_65_66_ladder;
        }
        float _2773 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        _2569 = (_2773 * _2764) + _2082;
        _2571 = (_2773 * _2766) + _2084;
        _2573 = (_2773 * _2768) + _2086;
        _2575 = ((_2758 * _485) * _2773) + _2420;
        _2577 = ((_2760 * _487) * _2773) + _2422;
        _2579 = ((_2762 * _488) * _2773) + _2424;
    }
    else
    {
        _2569 = _2082;
        _2571 = _2084;
        _2573 = _2086;
        _2575 = _2420;
        _2577 = _2422;
        _2579 = _2424;
    }
    float _4553 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4564 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4575 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4586 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _2597 = ((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2569 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _500))) + ((_2575 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2598 = ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2571 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _500))) + ((_2577 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2599 = ((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2573 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _500))) + ((_2579 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2604 = cbInstanceData._m0[_459 + 6u].w * (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)));
    float _2609 = _419 / cbSceneParam._m0[86u].x;
    float _2610 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2663 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2664 = _2663 / _339;
        float _2675 = _2664 * _391;
        float _2676 = _392 * _2664;
        float _2677 = (-0.0) - _2676;
        float _2678 = _2664 * _393;
        float _2680 = (cbSceneParam._m0[77u].w * _2677) / _2663;
        float _2681 = _2680 + cbSceneParam._m0[79u].w;
        float _2682 = cbSceneParam._m0[79u].w - _2676;
        float _2688 = sqrt(((_2675 * _2675) + (_2676 * _2676)) + (_2678 * _2678));
        float _2691 = (1.0 - (cbSceneParam._m0[77u].w / _2663)) * _2688;
        float _2696 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2698 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2875;
        if (abs((_2677 - _2680) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2875 = ((((_2681 > 0.0) ? exp2(_2696 * _2681) : (2.0 - exp2(_2698 * _2681))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2691;
        }
        else
        {
            float _2819 = 1.0 / cbSceneParam._m0[80u].x;
            float _2820 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : max(_2681, _2682));
            float _2821 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : min(_2681, _2682));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            _2875 = ((abs(_2688 / _2677) * cbSceneParam._m0[80u].y) * ((((_2830 - _2831) * 2.0) - ((exp2(_2696 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0)))) - exp2(_2696 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))))) * _2819)) - ((exp2(_2698 * _2830) - exp2(_2698 * _2831)) * _2819))) + (_2691 * cbSceneParam._m0[80u].z);
        }
        vec4 _2877 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _2886 = exp2((_2875 * (-1.44269502162933349609375)) * (1.0 - _2877.w));
        float _2887 = log2(_2886);
        float _2903 = log2(_2629);
        _2700 = (exp2(_2903 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].x)) * _2877.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2702 = (exp2(_2903 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].y)) * _2877.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2704 = (exp2(_2903 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].z)) * _2877.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2706 = _2886 * _2629;
    }
    else
    {
        _2700 = _2626;
        _2702 = _2627;
        _2704 = _2628;
        _2706 = _2629;
    }
    bool _2913;
    vec4 _2716;
    vec4 _2738;
    float _2740;
    float _2744;
    float _2745;
    float _2746;
    float _2747;
    bool _2757;
    for (;;)
    {
        _2716 = cbMatDynParam._m0[0u];
        float _2718 = roundEven(_2716.y);
        bool _2719 = _2718 == 3.0;
        float _2720 = log2(_2706);
        float _2727 = exp2(_2720 * cbSceneParam._m0[78u].x) * _2597;
        float _2728 = exp2(_2720 * cbSceneParam._m0[78u].y) * _2598;
        float _2729 = exp2(_2720 * cbSceneParam._m0[78u].z) * _2599;
        float _2736 = _407 + (-0.5);
        _2738 = cbMtdParam._m0[1u];
        _2740 = _2738.y * _2736;
        float _2743 = (_2718 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2744 = _2743 * (_2719 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2700)));
        _2745 = _2743 * (_2719 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2702)));
        _2746 = _2743 * (_2719 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2704)));
        _2747 = _2736 * 0.999000012874603271484375;
        _2757 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2757)
        {
            if ((cbInstanceData._m0[_459 + 7u].x + _2747) < 0.5)
            {
                _2913 = true;
                break;
            }
        }
        uint _2854 = _461 + uint(_2716.w);
        if ((cbInstanceData._m0[_2854].w < 1.0) && ((cbInstanceData._m0[_2854].w + _2747) < 0.5))
        {
            _2913 = true;
            break;
        }
        if ((_2740 + _239) < _2738.x)
        {
            _2913 = true;
            break;
        }
        _2913 = false;
        break;
    }
    float _3117;
    if (_2913)
    {
        discard_state = true;
        _3117 = 0.0;
    }
    else
    {
        _3117 = _2604;
    }
    SV_Target.x = _2744;
    SV_Target.y = _2745;
    SV_Target.z = _2746;
    SV_Target.w = _3117;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2604;
    discard_exit();
}


