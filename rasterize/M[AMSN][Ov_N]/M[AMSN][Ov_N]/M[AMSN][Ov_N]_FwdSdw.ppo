#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _859;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _229 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _229.x;
    float _233 = _229.y;
    float _234 = _229.z;
    float _235 = _229.w;
    vec4 _252 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _274 = texture(sampler2D(M_AMSN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _281 = (_274.x * 2.0) + (-1.0);
    float _282 = (_274.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_281, _282), vec2(_281, _282));
    float _3481 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))));
    float _292 = ((_252.z - _278) * cbMtdParam._m0[9u].y) + _278;
    float _3492 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _296 = _281 + (((_252.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _297 = _282 + (((_252.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _300 = fma(_289, _213, fma(_297, _205 * TANGENT.x, (_191 * _184) * _296));
    float _303 = fma(_289, _214, fma(_297, _205 * TANGENT.y, (_191 * _185) * _296));
    float _306 = fma(_289, _215, fma(_297, _205 * TANGENT.z, (_191 * _186) * _296));
    float _310 = inversesqrt(dot(vec3(_300, _303, _306), vec3(_300, _303, _306)));
    float _311 = _310 * _300;
    float _312 = _310 * _303;
    float _313 = _310 * _306;
    float _3503 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _314 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _315 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3536 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3547 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3558 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _319 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_313, cbSceneParam._m0[5u].z, fma(_312, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _311));
    float _427 = fma(_313, cbSceneParam._m0[6u].z, fma(_312, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _311));
    float _430 = fma(_313, cbSceneParam._m0[7u].z, fma(_312, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _311));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = (_443 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _452 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_446].x;
    float _453 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_446].y;
    float _454 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_446].z;
    float _3569 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _458 = 1.0 - _319;
    float _459 = _455 * _458;
    float _460 = _456 * _458;
    float _461 = _457 * _458;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _319;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _319;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _319;
    float _469 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _484 = _481.x * TEXCOORD.z;
    float _485 = dot(vec3(_311, _312, _313), vec3(_394, _395, _396));
    float _488 = _485 * 2.0;
    float _492 = (_488 * _311) - _394;
    float _493 = (_488 * _312) - _395;
    float _494 = (_488 * _313) - _396;
    float _498 = abs(dot(vec3(_394, _395, _396), vec3(_311, _312, _313)));
    float _3602 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = sqrt(_315);
    float _513 = exp2((_500 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_500 * 3.0));
    float _519 = (1.0 - _513) * ((_500 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _520 = _513 * _500;
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_556, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548));
        float _587 = fma(_556, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548));
        float _591 = fma(_556, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548));
        float _616 = _548 + _311;
        float _617 = _552 + _312;
        float _618 = _556 + _313;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_652.x + (-0.5));
        float _688 = _686 * (_652.y + (-0.5));
        float _689 = _686 * (_652.z + (-0.5));
        float _696 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_659.x + (-0.5));
        float _698 = _696 * (_659.y + (-0.5));
        float _699 = _696 * (_659.z + (-0.5));
        float _706 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_666.x + (-0.5));
        float _708 = _706 * (_666.y + (-0.5));
        float _709 = _706 * (_666.z + (-0.5));
        float _716 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_673.x + (-0.5));
        float _718 = _716 * (_673.y + (-0.5));
        float _719 = _716 * (_673.z + (-0.5));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = _687 * 0.5;
        float _724 = _697 * 0.5;
        float _725 = _707 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _740 = (dot(vec3(_311, _312, _313), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _750 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3650 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_752 + 1.0))) + _757) * _720;
        float _767 = _688 * 0.5;
        float _768 = _698 * 0.5;
        float _769 = _708 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_311, _312, _313), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3683 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_794 + 1.0))) + _799) * _721;
        float _809 = _689 * 0.5;
        float _810 = _699 * 0.5;
        float _811 = _709 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_311, _312, _313), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3716 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_836 + 1.0))) + _841) * _722;
        _858 = _689;
        _860 = _688;
        _861 = _687;
        _862 = _699;
        _863 = _698;
        _864 = _697;
        _865 = _709;
        _866 = _708;
        _867 = _707;
        _868 = _722;
        _869 = _721;
        _870 = _720;
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = _859;
        _860 = _859;
        _861 = _859;
        _862 = _859;
        _863 = _859;
        _864 = _859;
        _865 = _859;
        _866 = _859;
        _867 = _859;
        _868 = _859;
        _869 = _859;
        _870 = _859;
        _871 = 0.0;
        _872 = 0.0;
        _873 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_556, cbModelParam._m0[30u].z, fma(_552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _548));
        float _903 = fma(_556, cbModelParam._m0[31u].z, fma(_552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _548));
        float _907 = fma(_556, cbModelParam._m0[32u].z, fma(_552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _548));
        float _930 = _548 + _311;
        float _931 = _552 + _312;
        float _932 = _556 + _313;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_311, _312, _313), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3779 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_311, _312, _313), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3812 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_311, _312, _313), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3845 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _859;
        _1169 = _859;
        _1170 = _859;
        _1171 = _859;
        _1172 = _859;
        _1173 = _859;
        _1174 = _859;
        _1175 = _859;
        _1176 = _859;
        _1177 = _859;
        _1178 = _859;
        _1179 = _859;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _492 * 0.5;
    float _1237 = _493 * 0.5;
    float _1238 = _494 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _862, _865, _868));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_860, _863, _866, _869));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_861, _864, _867, _870));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _315);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1354 = fma(_556, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548)) + cbModelParam._m0[13u].w;
        float _1358 = fma(_556, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548)) + cbModelParam._m0[14u].w;
        float _1362 = fma(_556, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548)) + cbModelParam._m0[15u].w;
        float _1365 = fma(_494, cbModelParam._m0[13u].z, fma(_493, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492));
        float _1368 = fma(_494, cbModelParam._m0[14u].z, fma(_493, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492));
        float _1371 = fma(_494, cbModelParam._m0[15u].z, fma(_493, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492));
        float _1399;
        if (_1365 > 0.0)
        {
            _1399 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1399 = frontier_phi_16_14_ladder;
        }
        float _1575;
        if (_1368 > 0.0)
        {
            _1575 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1575 = frontier_phi_25_21_ladder;
        }
        float _1871;
        if (_1371 > 0.0)
        {
            _1871 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1871 = frontier_phi_37_32_ladder;
        }
        float _1873 = isnan(_1575) ? _1399 : (isnan(_1399) ? _1575 : min(_1399, _1575));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1365) + _1354;
        float _1879 = (_1874 * _1368) + _1358;
        float _1880 = (_1874 * _1371) + _1362;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1881;
        float _1885 = _1881 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 > _1885) || ((_1879 < _1883) || ((_1878 < _1883) || (_1878 > _1885))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1880, cbModelParam._m0[9u].z, fma(_1879, cbModelParam._m0[9u].y, _1878 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1880, cbModelParam._m0[10u].z, fma(_1879, cbModelParam._m0[10u].y, _1878 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1880, cbModelParam._m0[11u].z, fma(_1879, cbModelParam._m0[11u].y, _1878 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_15_37_ladder = _2025.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2025.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2025.z * cbModelParam._m0[1u].y;
        }
        _1387 = frontier_phi_15_37_ladder_1;
        _1389 = frontier_phi_15_37_ladder;
        _1391 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_492, _493, _494), _1305);
        _1387 = _1375.x * cbModelParam._m0[1u].y;
        _1389 = _1375.y * cbModelParam._m0[1u].y;
        _1391 = _1375.z * cbModelParam._m0[1u].y;
    }
    float _1395 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _315);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1395 : min(cbModelParam._m0[25u].w, _1395));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1453 = fma(_556, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548)) + cbModelParam._m0[21u].w;
        float _1457 = fma(_556, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548)) + cbModelParam._m0[22u].w;
        float _1461 = fma(_556, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548)) + cbModelParam._m0[23u].w;
        float _1464 = fma(_494, cbModelParam._m0[21u].z, fma(_493, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492));
        float _1467 = fma(_494, cbModelParam._m0[22u].z, fma(_493, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492));
        float _1470 = fma(_494, cbModelParam._m0[23u].z, fma(_493, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492));
        float _1580;
        if (_1464 > 0.0)
        {
            _1580 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1580 = frontier_phi_27_23_ladder;
        }
        float _1898;
        if (_1467 > 0.0)
        {
            _1898 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1898 = frontier_phi_39_34_ladder;
        }
        float _2236;
        if (_1470 > 0.0)
        {
            _2236 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2236 = frontier_phi_49_46_ladder;
        }
        float _2238 = isnan(_1898) ? _1580 : (isnan(_1580) ? _1898 : min(_1580, _1898));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1464) + _1453;
        float _2244 = (_2239 * _1467) + _1457;
        float _2245 = (_2239 * _1470) + _1461;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2246;
        float _2249 = _2246 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2245 > _2249) || ((_2245 < _2247) || ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 < _2247) || (_2243 > _2249))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2245, cbModelParam._m0[17u].z, fma(_2244, cbModelParam._m0[17u].y, _2243 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2245, cbModelParam._m0[18u].z, fma(_2244, cbModelParam._m0[18u].y, _2243 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2245, cbModelParam._m0[19u].z, fma(_2244, cbModelParam._m0[19u].y, _2243 * cbModelParam._m0[19u].x))), _1396);
            frontier_phi_24_49_ladder = _2367.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2367.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2367.x * cbModelParam._m0[1u].z;
        }
        _1489 = frontier_phi_24_49_ladder_2;
        _1491 = frontier_phi_24_49_ladder_1;
        _1493 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_492, _493, _494), _1396);
        _1489 = _1473.x * cbModelParam._m0[1u].z;
        _1491 = _1473.y * cbModelParam._m0[1u].z;
        _1493 = _1473.z * cbModelParam._m0[1u].z;
    }
    float _1506 = (((_519 * _469) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_519 * _471) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_519 * _472) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, _1506 * cbSceneParam._m0[91u].x));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1562 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1567 = _1554 / _1566;
    float _1568 = _1558 / _1566;
    float _1569 = _1562 / _1566;
    float _1716;
    float _1717;
    float _1718;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1596 = ((uint(_1569 > cbSceneParam._m0[59u].y) + uint(_1569 > cbSceneParam._m0[59u].x)) + uint(_1569 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1597 = _1596 + 43u;
        uint _1605 = _1596 + 44u;
        uint _1613 = _1596 + 45u;
        uint _1621 = _1596 + 46u;
        float _1632 = fma(_1566, cbSceneParam._m0[_1597].w, fma(_1562, cbSceneParam._m0[_1597].z, fma(_1558, cbSceneParam._m0[_1597].y, _1554 * cbSceneParam._m0[_1597].x)));
        float _1636 = fma(_1566, cbSceneParam._m0[_1605].w, fma(_1562, cbSceneParam._m0[_1605].z, fma(_1558, cbSceneParam._m0[_1605].y, _1554 * cbSceneParam._m0[_1605].x)));
        float _1644 = fma(_1566, cbSceneParam._m0[_1621].w, fma(_1562, cbSceneParam._m0[_1621].z, fma(_1558, cbSceneParam._m0[_1621].y, _1554 * cbSceneParam._m0[_1621].x)));
        float _1649 = cbSceneParam._m0[33u].z * _1644;
        float _1651 = cbSceneParam._m0[33u].w * _1644;
        float _1654 = fma(_1566, cbSceneParam._m0[_1613].w, fma(_1562, cbSceneParam._m0[_1613].z, fma(_1558, cbSceneParam._m0[_1613].y, _1554 * cbSceneParam._m0[_1613].x))) / _1644;
        float _1702 = (cbSceneParam._m0[33u].x - sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569))) * cbSceneParam._m0[33u].y;
        float _3971 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1709 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1649 + _1632) / _1644, (_1651 + _1636) / _1644), _1654), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 + _1632) / _1644, (_1636 - _1649) / _1644), _1654), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1632 - _1649) / _1644, (_1636 - _1651) / _1644), _1654), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1632 - _1651) / _1644, (_1649 + _1636) / _1644), _1654), 0.0)).x), vec4(0.25)));
        _1716 = 1.0 - (_1709 * cbSceneParam._m0[34u].x);
        _1717 = 1.0 - (_1709 * cbSceneParam._m0[34u].y);
        _1718 = 1.0 - (_1709 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1716 = 1.0;
        _1717 = 1.0;
        _1718 = 1.0;
    }
    float _1782;
    float _1784;
    float _1786;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1770 = fma(_1566, cbSceneParam._m0[63u].w, fma(_1562, cbSceneParam._m0[63u].z, fma(_1558, cbSceneParam._m0[63u].y, _1554 * cbSceneParam._m0[63u].x)));
        float _1771 = fma(_1566, cbSceneParam._m0[60u].w, fma(_1562, cbSceneParam._m0[60u].z, fma(_1558, cbSceneParam._m0[60u].y, _1554 * cbSceneParam._m0[60u].x))) / _1770;
        float _1772 = fma(_1566, cbSceneParam._m0[61u].w, fma(_1562, cbSceneParam._m0[61u].z, fma(_1558, cbSceneParam._m0[61u].y, _1554 * cbSceneParam._m0[61u].x))) / _1770;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1771 >= cbSceneParam._m0[64u].x) && (_1772 >= cbSceneParam._m0[64u].y)) && (_1771 <= cbSceneParam._m0[64u].z)) && (_1772 <= cbSceneParam._m0[64u].w))
        {
            float _1911 = fma(_1566, cbSceneParam._m0[62u].w, fma(_1562, cbSceneParam._m0[62u].z, fma(_1558, cbSceneParam._m0[62u].y, _1554 * cbSceneParam._m0[62u].x))) / _1770;
            float _1915 = isnan(cbSceneParam._m0[41u].w) ? _1911 : (isnan(_1911) ? cbSceneParam._m0[41u].w : max(_1911, cbSceneParam._m0[41u].w));
            float _1958 = (cbSceneParam._m0[33u].x - sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569))) * cbSceneParam._m0[33u].y;
            float _3987 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
            float _1965 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1771, cbSceneParam._m0[33u].w + _1772), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1771, _1772 - cbSceneParam._m0[33u].z), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1771 - cbSceneParam._m0[33u].z, _1772 - cbSceneParam._m0[33u].w), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1771 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1772), _1915), 0.0)).x), vec4(0.25)));
            float _1969 = 1.0 - (_1965 * cbSceneParam._m0[34u].x);
            float _1970 = 1.0 - (_1965 * cbSceneParam._m0[34u].y);
            float _1971 = 1.0 - (_1965 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1970) ? _1717 : (isnan(_1717) ? _1970 : min(_1717, _1970));
            frontier_phi_36_35_ladder_1 = isnan(_1971) ? _1718 : (isnan(_1718) ? _1971 : min(_1718, _1971));
            frontier_phi_36_35_ladder_2 = isnan(_1969) ? _1716 : (isnan(_1716) ? _1969 : min(_1716, _1969));
        }
        else
        {
            frontier_phi_36_35_ladder = _1717;
            frontier_phi_36_35_ladder_1 = _1718;
            frontier_phi_36_35_ladder_2 = _1716;
        }
        _1782 = frontier_phi_36_35_ladder_2;
        _1784 = frontier_phi_36_35_ladder;
        _1786 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1782 = _1716;
        _1784 = _1717;
        _1786 = _1718;
    }
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1801 = _484 + (-1.0);
    float _1806 = (cbLight._m0[_1794].x * _1801) + 1.0;
    float _1807 = (cbLight._m0[_1794].y * _1801) + 1.0;
    float _1808 = (cbLight._m0[_1794].z * _1801) + 1.0;
    float _1809 = (cbLight._m0[_1794].w * _1801) + 1.0;
    uint _1810 = _1793 + 5u;
    float _1816 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1820 = _1793 + 4u;
    float _1830 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1834 = _1793 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_311, _312, _313));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_311, _312, _313));
    float _4023 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _4034 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1810].x * _1816) * _1855) + (((cbLight._m0[_1820].x * _1782) * _1830) * _1853);
    float _1863 = ((_1816 * cbLight._m0[_1810].y) * _1855) + (((cbLight._m0[_1820].y * _1784) * _1830) * _1853);
    float _1864 = ((_1816 * cbLight._m0[_1810].z) * _1855) + (((cbLight._m0[_1820].z * _1786) * _1830) * _1853);
    uvec4 _1868 = floatBitsToUint(cbLight._m0[_1793 + 12u]);
    bool _1870 = _1868.x == 0u;
    float _1972;
    float _1974;
    float _1976;
    if (_1870)
    {
        _1972 = _1862;
        _1974 = _1863;
        _1976 = _1864;
    }
    else
    {
        uint _1980 = _1793 + 6u;
        float _1996 = (dot(vec3(cbLight._m0[_1793 + 2u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _4045 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1999 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1972 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1862;
        _1974 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1863;
        _1976 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1864;
    }
    bool _1979 = _1868.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1979)
    {
        _2034 = _1972;
        _2036 = _1974;
        _2038 = _1976;
    }
    else
    {
        uint _2207 = _1793 + 7u;
        float _2223 = (dot(vec3(cbLight._m0[_1793 + 3u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4061 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2226 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2034 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _1972;
        _2036 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _1974;
        _2038 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _1976;
    }
    uint _2041 = _1793 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _315) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1793].x + _394;
    float _2057 = cbLight._m0[_1793].y + _395;
    float _2058 = cbLight._m0[_1793].z + _396;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1793].xyz));
    float _4077 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _2070 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2071 = dot(vec3(_311, _312, _313), vec3(_2063, _2064, _2065));
    float _4099 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_2063, _2064, _2065));
    float _4110 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _2092 = 0.959999978542327880859375 - _466;
    float _2094 = 0.959999978542327880859375 - _467;
    float _2095 = 0.959999978542327880859375 - _468;
    float _2102 = 1.0 - _2055;
    float _2113 = (0.5 / (((_2070 * ((_2069 * _2102) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2102) + _2055) * _2069))) * _2069;
    float _4121 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2129 = _1793 + 9u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _315) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1834].x + _394;
    float _2143 = cbLight._m0[_1834].y + _395;
    float _2144 = cbLight._m0[_1834].z + _396;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1834].xyz));
    float _4132 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2156 = dot(vec3(_311, _312, _313), vec3(_2149, _2150, _2151));
    float _4143 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2160 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2149, _2150, _2151));
    float _4154 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2164 = _2141 * _2141;
    float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
    float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
    float _2182 = 1.0 - _2141;
    float _2192 = (0.5 / (((_2070 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2182) + _2141) * _2155))) * _2155;
    float _4165 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
    float _2204 = (((((_2175 * _2092) + _469) * cbLight._m0[_2129].x) * _2194) * _1816) + ((((cbLight._m0[_2041].x * _1782) * ((_2091 * _2092) + _469)) * _2115) * _1830);
    float _2205 = (((((_2175 * _2094) + _471) * cbLight._m0[_2129].y) * _2194) * _1816) + ((((cbLight._m0[_2041].y * _1784) * ((_2091 * _2094) + _471)) * _2115) * _1830);
    float _2206 = (((((_2175 * _2095) + _472) * cbLight._m0[_2129].z) * _2194) * _1816) + ((((cbLight._m0[_2041].z * _1786) * ((_2091 * _2095) + _472)) * _2115) * _1830);
    float _2262;
    float _2264;
    float _2266;
    if (_1870)
    {
        _2262 = _2204;
        _2264 = _2205;
        _2266 = _2206;
    }
    else
    {
        uint _2268 = _1793 + 2u;
        uint _2272 = _1793 + 10u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _315) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _394;
        float _2289 = cbLight._m0[_2268].y + _395;
        float _2290 = cbLight._m0[_2268].z + _396;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2268].xyz));
        float _4176 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2302 = dot(vec3(_311, _312, _313), vec3(_2295, _2296, _2297));
        float _4187 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4198 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_2070 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2328) + _2287) * _2301))) * _2301;
        float _4209 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2262 = (((((_2321 * _2092) + _469) * cbLight._m0[_2272].x) * _2340) * _2341) + _2204;
        _2264 = (((((_2321 * _2094) + _471) * cbLight._m0[_2272].y) * _2340) * _2341) + _2205;
        _2266 = (((((_2321 * _2095) + _472) * cbLight._m0[_2272].z) * _2340) * _2341) + _2206;
    }
    float _2372;
    float _2374;
    float _2376;
    if (_1979)
    {
        _2372 = _2262;
        _2374 = _2264;
        _2376 = _2266;
    }
    else
    {
        uint _2383 = _1793 + 3u;
        uint _2387 = _1793 + 11u;
        float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _315) * 0.949999988079071044921875);
        float _2402 = _2401 * _2401;
        float _2403 = cbLight._m0[_2383].x + _394;
        float _2404 = cbLight._m0[_2383].y + _395;
        float _2405 = cbLight._m0[_2383].z + _396;
        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
        float _2410 = _2409 * _2403;
        float _2411 = _2409 * _2404;
        float _2412 = _2409 * _2405;
        float _2413 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2383].xyz));
        float _4225 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2417 = dot(vec3(_311, _312, _313), vec3(_2410, _2411, _2412));
        float _4236 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2421 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2410, _2411, _2412));
        float _4247 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2425 = _2402 * _2402;
        float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
        float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
        float _2443 = 1.0 - _2402;
        float _2453 = (0.5 / (((_2070 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2443) + _2402) * _2416))) * _2416;
        float _4258 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2455 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
        float _2456 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2372 = (((((_2436 * _2092) + _469) * cbLight._m0[_2387].x) * _2455) * _2456) + _2262;
        _2374 = (((((_2436 * _2094) + _471) * cbLight._m0[_2387].y) * _2455) * _2456) + _2264;
        _2376 = (((((_2436 * _2095) + _472) * cbLight._m0[_2387].z) * _2455) * _2456) + _2266;
    }
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_1791.y == 0u)
    {
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.x;
        uint _2489 = uint((float(_2477.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2478))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2478)));
        float _2499 = (log2(_1569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2500 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        uint _2503 = uint(isnan(14.0) ? _2500 : (isnan(_2500) ? 14.0 : min(_2500, 14.0)));
        uvec4 _2508 = texelFetch(g_lightClusterGridBuffer, int(((_2503 << 2u) + (_2489 << 6u)) >> 2u));
        uint _2509 = _2508.x;
        uint _2510 = _2477.z;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2510 >> 4u) & 15u)) + 4294967295u) & _2509) == 0u) || ((_2510 & 240u) == 0u))
        {
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2750)
                {
                    frontier_phi_68_pred = _2739;
                    frontier_phi_68_pred_1 = _2738;
                    frontier_phi_68_pred_2 = _2737;
                    frontier_phi_68_pred_3 = _2735;
                    frontier_phi_68_pred_4 = _2734;
                    frontier_phi_68_pred_5 = _2736;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2749;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2740 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _1567;
                        float _2925 = _2884.y - _1568;
                        float _2926 = _2884.z - _1569;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_424, _427, _430), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4284 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _1567;
                        float _2960 = (-0.0) - _1568;
                        float _2961 = (-0.0) - _1569;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2975 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2976 = 1.0 - _500;
                        float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                        float _2984 = _2983 * _2983;
                        float _2985 = _2984 * _2984;
                        float _2986 = _2966 + _2931;
                        float _2987 = _2967 + _2932;
                        float _2988 = _2968 + _2933;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2996 = dot(vec3(_424, _427, _430), vec3(_2966, _2967, _2968));
                        float _4300 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3000 = dot(vec3(_424, _427, _430), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                        float _4311 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                        float _3008 = _2944 * _2984;
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2934) + _3009;
                        float _4322 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3014 = 1.0 - _2984;
                        float _3024 = (0.5 / (((_3013 * ((_2999 * _3014) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2984) * _2999))) * _3013;
                        float _4333 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3035 = (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3007 * _3007) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2793 = (_2955 * _2903.x) + _2861;
                        _2794 = (_2955 * _2903.y) + _2862;
                        _2795 = (_2955 * _2903.z) + _2863;
                        _2790 = (_3035 * _2920.x) + _2858;
                        _2791 = (_3035 * _2920.y) + _2859;
                        _2792 = (_3035 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_68_pred = _2795;
                    frontier_phi_68_pred_1 = _2794;
                    frontier_phi_68_pred_2 = _2793;
                    frontier_phi_68_pred_3 = _2791;
                    frontier_phi_68_pred_4 = _2790;
                    frontier_phi_68_pred_5 = _2792;
                }
                _2601 = frontier_phi_68_pred;
                _2599 = frontier_phi_68_pred_1;
                _2597 = frontier_phi_68_pred_2;
                _2593 = frontier_phi_68_pred_3;
                _2591 = frontier_phi_68_pred_4;
                _2595 = frontier_phi_68_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2591;
                    _2735 = _2593;
                    _2736 = _2595;
                    _2737 = _2597;
                    _2738 = _2599;
                    _2739 = _2601;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2607) & _2509) == 0u)
        {
            _2702 = _2590;
            _2704 = _2592;
            _2706 = _2594;
            _2708 = _2596;
            _2710 = _2598;
            _2712 = _2600;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
            float _2728 = _2727 * _1567;
            float _2729 = _2727 * _1568;
            float _2730 = _2727 * _1569;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2841 = _2590;
                float _2842 = _2592;
                float _2843 = _2594;
                float _2844 = _2596;
                float _2845 = _2598;
                float _2846 = _2600;
                uint _2847 = _2607;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2857)
                    {
                        frontier_phi_74_pred = _2843;
                        frontier_phi_74_pred_1 = _2842;
                        frontier_phi_74_pred_2 = _2841;
                        frontier_phi_74_pred_3 = _2846;
                        frontier_phi_74_pred_4 = _2845;
                        frontier_phi_74_pred_5 = _2844;
                    }
                    else
                    {
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        uint _3059 = _2856;
                        uint _3060;
                        vec4 _3085;
                        float _3086;
                        vec4 _3101;
                        vec3 _3113;
                        vec4 _3129;
                        vec4 _3145;
                        float _3192;
                        bool _3193;
                        for (;;)
                        {
                            uint _3070 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3059));
                            _3060 = (_3059 + 4294967295u) & _3059;
                            uint _3072 = _3070 * 40u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3086 = _3085.w;
                            uint _3088 = (_3070 * 40u) + 4u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3070 * 40u) + 8u;
                            _3113 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x));
                            uint _3116 = (_3070 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3070 * 40u) + 20u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3148 = (_3070 * 40u) + 24u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3167 = (_3070 * 40u) + 28u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3192 = fma(_1569, _3180.z, fma(_1568, _3180.y, _3180.x * _1567)) + _3180.w;
                            _3193 = !((fma(_1569, _3161.z, fma(_1568, _3161.y, _3161.x * _1567)) + _3161.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3193)
                            {
                                float _3220 = _3085.x - _1567;
                                float _3221 = _3085.y - _1568;
                                float _3222 = _3085.z - _1569;
                                float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                                float _3226 = inversesqrt(_3223);
                                float _3227 = _3226 * _3220;
                                float _3228 = _3226 * _3221;
                                float _3229 = _3226 * _3222;
                                float _3233 = 1.0 - (_3223 / (_3086 * _3086));
                                float _4344 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3238 = sqrt(_3223) * _3101.w;
                                float _3240 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                                float _3241 = _3240 * _3240;
                                float _3244 = ((1.0 - _3241) * dot(vec3(_3227, _3228, _3229), vec3(_424, _427, _430))) + _3241;
                                float _3247 = _3238 * _3238;
                                float _3251 = (fma(_1569, _3129.z, fma(_1568, _3129.y, _3129.x * _1567)) + _3129.w) / _3192;
                                float _3252 = (fma(_1569, _3145.z, fma(_1568, _3145.y, _3145.x * _1567)) + _3145.w) / _3192;
                                float _3256 = 1.0 - dot(vec2(_3251, _3252), vec2(_3251, _3252));
                                float _4360 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3258 = _3257 * (((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3234) / ((_3247 * 0.699999988079071044921875) + 1.0));
                                float _3270 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                                float _3271 = 1.0 - _500;
                                float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                                float _3279 = _3278 * _3278;
                                float _3280 = _3279 * _3279;
                                float _3281 = _3227 - _2728;
                                float _3282 = _3228 - _2729;
                                float _3283 = _3229 - _2730;
                                float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                                float _3291 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4371 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3295 = dot(vec3(_424, _427, _430), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                                float _4382 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                                float _3303 = _3240 * _3279;
                                float _3304 = _3303 * _3303;
                                float _3310 = ((1.0 - _3304) * dot(vec3(_424, _427, _430), vec3(_3227, _3228, _3229))) + _3304;
                                float _4393 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3312 = 1.0 - _3279;
                                float _3322 = (0.5 / (((_3311 * ((_3294 * _3312) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3279) * _3294))) * _3311;
                                float _4404 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3332 = (_3257 * _3234) * (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3302 * _3302) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3332 * _3113.z;
                                frontier_phi_80_pred_1 = _3332 * _3113.y;
                                frontier_phi_80_pred_2 = _3332 * _3113.x;
                                frontier_phi_80_pred_3 = _3258 * _3101.z;
                                frontier_phi_80_pred_4 = _3258 * _3101.y;
                                frontier_phi_80_pred_5 = _3258 * _3101.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3338 = frontier_phi_80_pred;
                            _3337 = frontier_phi_80_pred_1;
                            _3336 = frontier_phi_80_pred_2;
                            _3341 = frontier_phi_80_pred_3;
                            _3340 = frontier_phi_80_pred_4;
                            _3339 = frontier_phi_80_pred_5;
                            _3043 = _3339 + _3056;
                            _3044 = _3340 + _3057;
                            _3045 = _3341 + _3058;
                            _3040 = _3336 + _3053;
                            _3041 = _3337 + _3054;
                            _3042 = _3338 + _3055;
                            if (_3060 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3060;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3042;
                        frontier_phi_74_pred_1 = _3041;
                        frontier_phi_74_pred_2 = _3040;
                        frontier_phi_74_pred_3 = _3045;
                        frontier_phi_74_pred_4 = _3044;
                        frontier_phi_74_pred_5 = _3043;
                    }
                    _2707 = frontier_phi_74_pred;
                    _2705 = frontier_phi_74_pred_1;
                    _2703 = frontier_phi_74_pred_2;
                    _2713 = frontier_phi_74_pred_3;
                    _2711 = frontier_phi_74_pred_4;
                    _2709 = frontier_phi_74_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2703;
                        _2842 = _2705;
                        _2843 = _2707;
                        _2844 = _2709;
                        _2845 = _2711;
                        _2846 = _2713;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2711;
                frontier_phi_62_63_ladder_1 = _2709;
                frontier_phi_62_63_ladder_2 = _2707;
                frontier_phi_62_63_ladder_3 = _2713;
                frontier_phi_62_63_ladder_4 = _2705;
                frontier_phi_62_63_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_62_63_ladder = _2598;
                frontier_phi_62_63_ladder_1 = _2596;
                frontier_phi_62_63_ladder_2 = _2594;
                frontier_phi_62_63_ladder_3 = _2600;
                frontier_phi_62_63_ladder_4 = _2592;
                frontier_phi_62_63_ladder_5 = _2590;
            }
            _2702 = frontier_phi_62_63_ladder_5;
            _2704 = frontier_phi_62_63_ladder_4;
            _2706 = frontier_phi_62_63_ladder_2;
            _2708 = frontier_phi_62_63_ladder_1;
            _2710 = frontier_phi_62_63_ladder;
            _2712 = frontier_phi_62_63_ladder_3;
        }
        float _2717 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2521 = (_2717 * _2708) + _2034;
        _2523 = (_2717 * _2710) + _2036;
        _2525 = (_2717 * _2712) + _2038;
        _2527 = ((_2702 * _469) * _2717) + _2372;
        _2529 = ((_2704 * _471) * _2717) + _2374;
        _2531 = ((_2706 * _472) * _2717) + _2376;
    }
    else
    {
        _2521 = _2034;
        _2523 = _2036;
        _2525 = _2038;
        _2527 = _2372;
        _2529 = _2374;
        _2531 = _2376;
    }
    float _4420 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4431 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4442 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4453 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _2556 = cbInstanceData._m0[_443 + 6u].w * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)));
    float _2561 = _402 / cbSceneParam._m0[86u].x;
    float _2562 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2616 = _2615 / _335;
        float _2627 = _2616 * _387;
        float _2628 = _388 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2630 = _2616 * _389;
        float _2632 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2628;
        float _2640 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2629 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2765 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2803 = ((abs(_2640 / _2629) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2650 * _2774) - exp2(_2650 * _2775)) * _2763))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2581);
        _2652 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2654 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2656 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2658 = _2814 * _2581;
    }
    else
    {
        _2652 = _2578;
        _2654 = _2579;
        _2656 = _2580;
        _2658 = _2581;
    }
    float _2670 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2671 = _2670 == 3.0;
    float _2672 = log2(_2658);
    float _2679 = exp2(_2672 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2521 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _484))) + ((_2527 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2672 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2523 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _484))) + ((_2529 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2681 = exp2(_2672 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2525 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _484))) + ((_2531 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2690 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2690 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.y = _2690 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.z = _2690 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
    SV_Target.w = _2556;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2556;
}


