#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _858;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    float _259 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _260 = _232.w * TEXCOORD.x;
    float _271 = (_260 < 0.5) ? 0.0 : 1.0;
    float _281 = (((((_260 * 2.0) * (1.0 - _271)) * _259) + (-0.5)) + ((1.0 - (((1.0 - _260) * 2.0) * (1.0 - _259))) * _271)) * cbMtdParam._m0[10u].z;
    precise float _285 = _281 * ((_281 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _286 = cbMtdParam._m0[10u].y + _285;
    float _3459 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _287 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _292 = (_287 * _287) * (3.0 - (_287 * 2.0));
    vec4 _304 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _308 = _304.z;
    float _311 = (_304.x * 2.0) + (-1.0);
    float _313 = (_304.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3470 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _319 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    float _322 = fma(_319, _202 * NORMAL.x, fma(_313, _209 * TANGENT.x, (_195 * _187) * _311));
    float _325 = fma(_319, _202 * NORMAL.y, fma(_313, _209 * TANGENT.y, (_195 * _188) * _311));
    float _328 = fma(_319, _202 * NORMAL.z, fma(_313, _209 * TANGENT.z, (_195 * _189) * _311));
    float _332 = inversesqrt(dot(vec3(_322, _325, _328), vec3(_322, _325, _328)));
    float _333 = _332 * _322;
    float _334 = _332 * _325;
    float _335 = _332 * _328;
    float _3481 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _336 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _337 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3514 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3525 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _356 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _407 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _397);
    float _408 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _397);
    float _409 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _397);
    float _413 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _414 = _407 * _413;
    float _415 = _408 * _413;
    float _416 = _409 * _413;
    float _422 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _423 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_335, cbSceneParam._m0[5u].z, fma(_334, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _333));
    float _447 = fma(_335, cbSceneParam._m0[6u].z, fma(_334, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _333));
    float _450 = fma(_335, cbSceneParam._m0[7u].z, fma(_334, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _333));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _466 = (_463 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3536 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _422, cbSceneParam._m0[86u].y * _423));
    float _489 = _486.x * TEXCOORD.y;
    float _490 = dot(vec3(_333, _334, _335), vec3(_414, _415, _416));
    float _493 = _490 * 2.0;
    float _497 = (_493 * _333) - _414;
    float _498 = (_493 * _334) - _415;
    float _499 = (_493 * _335) - _416;
    float _503 = abs(dot(vec3(_414, _415, _416), vec3(_333, _334, _335)));
    float _3569 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = sqrt(_337);
    float _517 = exp2((_505 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_505 * 3.0));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _857;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _584 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _588 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _592 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _615 = _549 + _333;
        float _616 = _553 + _334;
        float _617 = _557 + _335;
        float _627 = fma(_617, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) - _584;
        float _628 = fma(_617, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) - _588;
        float _629 = fma(_617, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) - _592;
        float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
        float _646 = ((_633 * _627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_584 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_633 * _628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_588 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_633 * _629) / cbModelParam._m0[34u].z) + ((((((_592 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        float _685 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_651.x + (-0.5));
        float _687 = _685 * (_651.y + (-0.5));
        float _688 = _685 * (_651.z + (-0.5));
        float _695 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_658.x + (-0.5));
        float _697 = _695 * (_658.y + (-0.5));
        float _698 = _695 * (_658.z + (-0.5));
        float _705 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_665.x + (-0.5));
        float _707 = _705 * (_665.y + (-0.5));
        float _708 = _705 * (_665.z + (-0.5));
        float _715 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_672.x + (-0.5));
        float _717 = _715 * (_672.y + (-0.5));
        float _718 = _715 * (_672.z + (-0.5));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = _686 * 0.5;
        float _723 = _696 * 0.5;
        float _724 = _706 * 0.5;
        float _725 = dot(vec3(_722, _723, _724), vec3(_722, _723, _724));
        float _730 = (_725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_725);
        float _739 = (dot(vec3(_333, _334, _335), vec3(_730 * _722, _730 * _723, _730 * _724)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _749 = sqrt(((_723 * _723) + (_722 * _722)) + (_724 * _724)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _751 = _750 * 2.0;
        float _755 = (1.0 - _750) / (_750 + 1.0);
        float _3617 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _765 = ((((1.0 - _756) * (_751 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_751 + 1.0))) + _756) * _719;
        float _766 = _687 * 0.5;
        float _767 = _697 * 0.5;
        float _768 = _707 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_333, _334, _335), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3650 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_793 + 1.0))) + _798) * _720;
        float _808 = _688 * 0.5;
        float _809 = _698 * 0.5;
        float _810 = _708 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_333, _334, _335), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3683 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_835 + 1.0))) + _840) * _721;
        _857 = _688;
        _859 = _687;
        _860 = _686;
        _861 = _698;
        _862 = _697;
        _863 = _696;
        _864 = _708;
        _865 = _707;
        _866 = _706;
        _867 = _721;
        _868 = _720;
        _869 = _719;
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
    }
    else
    {
        _857 = _858;
        _859 = _858;
        _860 = _858;
        _861 = _858;
        _862 = _858;
        _863 = _858;
        _864 = _858;
        _865 = _858;
        _866 = _858;
        _867 = _858;
        _868 = _858;
        _869 = _858;
        _870 = 0.0;
        _871 = 0.0;
        _872 = 0.0;
    }
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _898 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _902 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _906 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _929 = _549 + _333;
        float _930 = _553 + _334;
        float _931 = _557 + _335;
        float _941 = fma(_931, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929)) - _898;
        float _942 = fma(_931, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929)) - _902;
        float _943 = fma(_931, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929)) - _906;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_898 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_902 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[35u].z) + ((((((_906 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _997 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_964.x + (-0.5));
        float _999 = _997 * (_964.y + (-0.5));
        float _1000 = _997 * (_964.z + (-0.5));
        float _1007 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_971.x + (-0.5));
        float _1009 = _1007 * (_971.y + (-0.5));
        float _1010 = _1007 * (_971.z + (-0.5));
        float _1017 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_978.x + (-0.5));
        float _1019 = _1017 * (_978.y + (-0.5));
        float _1020 = _1017 * (_978.z + (-0.5));
        float _1027 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_985.x + (-0.5));
        float _1029 = _1027 * (_985.y + (-0.5));
        float _1030 = _1027 * (_985.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_333, _334, _335), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3746 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1061 + 1.0))) + _1066) * _1031;
        float _1076 = _999 * 0.5;
        float _1077 = _1009 * 0.5;
        float _1078 = _1019 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_333, _334, _335), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3779 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1103 + 1.0))) + _1108) * _1032;
        float _1118 = _1000 * 0.5;
        float _1119 = _1010 * 0.5;
        float _1120 = _1020 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_333, _334, _335), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3812 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1145 + 1.0))) + _1150) * _1033;
        _1167 = _1000;
        _1168 = _999;
        _1169 = _998;
        _1170 = _1010;
        _1171 = _1009;
        _1172 = _1008;
        _1173 = _1020;
        _1174 = _1019;
        _1175 = _1018;
        _1176 = _1033;
        _1177 = _1032;
        _1178 = _1031;
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _858;
        _1168 = _858;
        _1169 = _858;
        _1170 = _858;
        _1171 = _858;
        _1172 = _858;
        _1173 = _858;
        _1174 = _858;
        _1175 = _858;
        _1176 = _858;
        _1177 = _858;
        _1178 = _858;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1214 = fma(_1193, cbSceneParam._m0[89u].z, fma(_1192, cbSceneParam._m0[89u].y, _1191 * cbSceneParam._m0[89u].x));
    float _1217 = fma(_1193, cbSceneParam._m0[90u].z, fma(_1192, cbSceneParam._m0[90u].y, _1191 * cbSceneParam._m0[90u].x));
    float _1220 = fma(_1193, cbSceneParam._m0[91u].z, fma(_1192, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1191));
    float _1235 = _497 * 0.5;
    float _1236 = _498 * 0.5;
    float _1237 = _499 * 0.5;
    float _1238 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1241 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1244 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1278;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1251 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_857, _861, _864, _867));
        float _1255 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_859, _862, _865, _868));
        float _1259 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_860, _863, _866, _869));
        float _1266 = dot(vec4(cbModelParam._m0[39u]), vec4(_1235, _1236, _1237, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1289;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1280 = dot(vec4(cbModelParam._m0[40u]), vec4(_1235, _1236, _1237, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1293 = (_1289 * cbModelParam._m0[1u].x) + (_1278 * (1.0 - cbModelParam._m0[1u].x));
    float _1303 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1304 = isnan(_1303) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1303 : min(cbModelParam._m0[25u].z, _1303));
    float _1386;
    float _1388;
    float _1390;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1353 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1357 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1361 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1364 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1367 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1370 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1398;
        if (_1364 > 0.0)
        {
            _1398 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1398 = frontier_phi_14_12_ladder;
        }
        float _1572;
        if (_1367 > 0.0)
        {
            _1572 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1572 = frontier_phi_23_19_ladder;
        }
        float _1868;
        if (_1370 > 0.0)
        {
            _1868 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1868 = frontier_phi_35_30_ladder;
        }
        float _1870 = isnan(_1572) ? _1398 : (isnan(_1398) ? _1572 : min(_1398, _1572));
        float _1871 = isnan(_1868) ? _1870 : (isnan(_1870) ? _1868 : min(_1870, _1868));
        float _1875 = (_1871 * _1364) + _1353;
        float _1876 = (_1871 * _1367) + _1357;
        float _1877 = (_1871 * _1370) + _1361;
        float _1878 = _1871 * 9.9999997473787516355514526367188e-05;
        float _1880 = (-1.0) - _1878;
        float _1882 = _1878 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1877 > _1882) || ((_1877 < _1880) || ((_1876 > _1882) || ((_1876 < _1880) || ((_1875 < _1880) || (_1875 > _1882))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2022 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1877, cbModelParam._m0[9u].z, fma(_1876, cbModelParam._m0[9u].y, _1875 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1877, cbModelParam._m0[10u].z, fma(_1876, cbModelParam._m0[10u].y, _1875 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1877, cbModelParam._m0[11u].z, fma(_1876, cbModelParam._m0[11u].y, _1875 * cbModelParam._m0[11u].x))), _1304);
            frontier_phi_13_35_ladder = _2022.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2022.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2022.x * cbModelParam._m0[1u].y;
        }
        _1386 = frontier_phi_13_35_ladder_2;
        _1388 = frontier_phi_13_35_ladder_1;
        _1390 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1304);
        _1386 = _1374.x * cbModelParam._m0[1u].y;
        _1388 = _1374.y * cbModelParam._m0[1u].y;
        _1390 = _1374.z * cbModelParam._m0[1u].y;
    }
    float _1394 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1394 : min(cbModelParam._m0[25u].w, _1394));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1452 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1456 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1460 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1463 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1466 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1469 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1577;
        if (_1463 > 0.0)
        {
            _1577 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1577 = frontier_phi_25_21_ladder;
        }
        float _1895;
        if (_1466 > 0.0)
        {
            _1895 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1895 = frontier_phi_37_32_ladder;
        }
        float _2222;
        if (_1469 > 0.0)
        {
            _2222 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2222 = frontier_phi_47_44_ladder;
        }
        float _2224 = isnan(_1895) ? _1577 : (isnan(_1577) ? _1895 : min(_1577, _1895));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1463) + _1452;
        float _2230 = (_2225 * _1466) + _1456;
        float _2231 = (_2225 * _1469) + _1460;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2232;
        float _2235 = _2232 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2231 > _2235) || ((_2231 < _2233) || ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 < _2233) || (_2229 > _2235))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2231, cbModelParam._m0[17u].z, fma(_2230, cbModelParam._m0[17u].y, _2229 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2231, cbModelParam._m0[18u].z, fma(_2230, cbModelParam._m0[18u].y, _2229 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2231, cbModelParam._m0[19u].z, fma(_2230, cbModelParam._m0[19u].y, _2229 * cbModelParam._m0[19u].x))), _1395);
            frontier_phi_22_47_ladder = _2349.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2349.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2349.x * cbModelParam._m0[1u].z;
        }
        _1488 = frontier_phi_22_47_ladder_2;
        _1490 = frontier_phi_22_47_ladder_1;
        _1492 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1395);
        _1488 = _1472.x * cbModelParam._m0[1u].z;
        _1490 = _1472.y * cbModelParam._m0[1u].z;
        _1492 = _1472.z * cbModelParam._m0[1u].z;
    }
    float _1504 = ((((1.0 - _517) * ((_505 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_517 * _505)) * _489;
    float _1505 = _1504 * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1506 = _1504 * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1507 = _1504 * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1510 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1505 * cbSceneParam._m0[91u].x));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1563 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1564 = _1551 / _1563;
    float _1565 = _1555 / _1563;
    float _1566 = _1559 / _1563;
    float _1713;
    float _1714;
    float _1715;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1593 = ((uint(_1566 > cbSceneParam._m0[59u].y) + uint(_1566 > cbSceneParam._m0[59u].x)) + uint(_1566 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1594 = _1593 + 43u;
        uint _1602 = _1593 + 44u;
        uint _1610 = _1593 + 45u;
        uint _1618 = _1593 + 46u;
        float _1629 = fma(_1563, cbSceneParam._m0[_1594].w, fma(_1559, cbSceneParam._m0[_1594].z, fma(_1555, cbSceneParam._m0[_1594].y, _1551 * cbSceneParam._m0[_1594].x)));
        float _1633 = fma(_1563, cbSceneParam._m0[_1602].w, fma(_1559, cbSceneParam._m0[_1602].z, fma(_1555, cbSceneParam._m0[_1602].y, _1551 * cbSceneParam._m0[_1602].x)));
        float _1641 = fma(_1563, cbSceneParam._m0[_1618].w, fma(_1559, cbSceneParam._m0[_1618].z, fma(_1555, cbSceneParam._m0[_1618].y, _1551 * cbSceneParam._m0[_1618].x)));
        float _1646 = cbSceneParam._m0[33u].z * _1641;
        float _1648 = cbSceneParam._m0[33u].w * _1641;
        float _1651 = fma(_1563, cbSceneParam._m0[_1610].w, fma(_1559, cbSceneParam._m0[_1610].z, fma(_1555, cbSceneParam._m0[_1610].y, _1551 * cbSceneParam._m0[_1610].x))) / _1641;
        float _1699 = (cbSceneParam._m0[33u].x - sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566))) * cbSceneParam._m0[33u].y;
        float _3938 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1706 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 + _1629) / _1641, (_1648 + _1633) / _1641), _1651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 + _1629) / _1641, (_1633 - _1646) / _1641), _1651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1629 - _1646) / _1641, (_1633 - _1648) / _1641), _1651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1629 - _1648) / _1641, (_1646 + _1633) / _1641), _1651), 0.0)).x), vec4(0.25)));
        _1713 = 1.0 - (_1706 * cbSceneParam._m0[34u].x);
        _1714 = 1.0 - (_1706 * cbSceneParam._m0[34u].y);
        _1715 = 1.0 - (_1706 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1713 = 1.0;
        _1714 = 1.0;
        _1715 = 1.0;
    }
    float _1779;
    float _1781;
    float _1783;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1767 = fma(_1563, cbSceneParam._m0[63u].w, fma(_1559, cbSceneParam._m0[63u].z, fma(_1555, cbSceneParam._m0[63u].y, _1551 * cbSceneParam._m0[63u].x)));
        float _1768 = fma(_1563, cbSceneParam._m0[60u].w, fma(_1559, cbSceneParam._m0[60u].z, fma(_1555, cbSceneParam._m0[60u].y, _1551 * cbSceneParam._m0[60u].x))) / _1767;
        float _1769 = fma(_1563, cbSceneParam._m0[61u].w, fma(_1559, cbSceneParam._m0[61u].z, fma(_1555, cbSceneParam._m0[61u].y, _1551 * cbSceneParam._m0[61u].x))) / _1767;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1768 >= cbSceneParam._m0[64u].x) && (_1769 >= cbSceneParam._m0[64u].y)) && (_1768 <= cbSceneParam._m0[64u].z)) && (_1769 <= cbSceneParam._m0[64u].w))
        {
            float _1908 = fma(_1563, cbSceneParam._m0[62u].w, fma(_1559, cbSceneParam._m0[62u].z, fma(_1555, cbSceneParam._m0[62u].y, _1551 * cbSceneParam._m0[62u].x))) / _1767;
            float _1912 = isnan(cbSceneParam._m0[41u].w) ? _1908 : (isnan(_1908) ? cbSceneParam._m0[41u].w : max(_1908, cbSceneParam._m0[41u].w));
            float _1955 = (cbSceneParam._m0[33u].x - sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566))) * cbSceneParam._m0[33u].y;
            float _3954 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
            float _1962 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1768, cbSceneParam._m0[33u].w + _1769), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1768, _1769 - cbSceneParam._m0[33u].z), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1768 - cbSceneParam._m0[33u].z, _1769 - cbSceneParam._m0[33u].w), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1768 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1769), _1912), 0.0)).x), vec4(0.25)));
            float _1966 = 1.0 - (_1962 * cbSceneParam._m0[34u].x);
            float _1967 = 1.0 - (_1962 * cbSceneParam._m0[34u].y);
            float _1968 = 1.0 - (_1962 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1968) ? _1715 : (isnan(_1715) ? _1968 : min(_1715, _1968));
            frontier_phi_34_33_ladder_1 = isnan(_1967) ? _1714 : (isnan(_1714) ? _1967 : min(_1714, _1967));
            frontier_phi_34_33_ladder_2 = isnan(_1966) ? _1713 : (isnan(_1713) ? _1966 : min(_1713, _1966));
        }
        else
        {
            frontier_phi_34_33_ladder = _1715;
            frontier_phi_34_33_ladder_1 = _1714;
            frontier_phi_34_33_ladder_2 = _1713;
        }
        _1779 = frontier_phi_34_33_ladder_2;
        _1781 = frontier_phi_34_33_ladder_1;
        _1783 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1779 = _1713;
        _1781 = _1714;
        _1783 = _1715;
    }
    uvec4 _1788 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1790 = _1788.x * 14u;
    uint _1791 = _1790 + 13u;
    float _1798 = _489 + (-1.0);
    float _1803 = (cbLight._m0[_1791].x * _1798) + 1.0;
    float _1804 = (cbLight._m0[_1791].y * _1798) + 1.0;
    float _1805 = (cbLight._m0[_1791].z * _1798) + 1.0;
    float _1806 = (cbLight._m0[_1791].w * _1798) + 1.0;
    uint _1807 = _1790 + 5u;
    float _1813 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1817 = _1790 + 4u;
    float _1827 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1831 = _1790 | 1u;
    float _1842 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_333, _334, _335));
    float _1845 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_333, _334, _335));
    float _3990 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _4001 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1850 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1852 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _1859 = ((cbLight._m0[_1807].x * _1813) * _1852) + (((cbLight._m0[_1817].x * _1779) * _1827) * _1850);
    float _1860 = ((_1813 * cbLight._m0[_1807].y) * _1852) + (((cbLight._m0[_1817].y * _1781) * _1827) * _1850);
    float _1861 = ((_1813 * cbLight._m0[_1807].z) * _1852) + (((cbLight._m0[_1817].z * _1783) * _1827) * _1850);
    uvec4 _1865 = floatBitsToUint(cbLight._m0[_1790 + 12u]);
    bool _1867 = _1865.x == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1867)
    {
        _1969 = _1859;
        _1971 = _1860;
        _1973 = _1861;
    }
    else
    {
        uint _1977 = _1790 + 6u;
        float _1993 = (dot(vec3(cbLight._m0[_1790 + 2u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _1994 = _1993 * _1993;
        float _4012 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1995 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1996 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _1969 = (((cbLight._m0[_1977].x * 0.3183098733425140380859375) * _1995) * _1996) + _1859;
        _1971 = (((cbLight._m0[_1977].y * 0.3183098733425140380859375) * _1995) * _1996) + _1860;
        _1973 = (((cbLight._m0[_1977].z * 0.3183098733425140380859375) * _1995) * _1996) + _1861;
    }
    bool _1976 = _1865.y == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1976)
    {
        _2031 = _1969;
        _2033 = _1971;
        _2035 = _1973;
    }
    else
    {
        uint _2193 = _1790 + 7u;
        float _2209 = (dot(vec3(cbLight._m0[_1790 + 3u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _2210 = _2209 * _2209;
        float _4028 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2211 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2212 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2031 = (((cbLight._m0[_2193].x * 0.3183098733425140380859375) * _2211) * _2212) + _1969;
        _2033 = (((cbLight._m0[_2193].y * 0.3183098733425140380859375) * _2211) * _2212) + _1971;
        _2035 = (((cbLight._m0[_2193].z * 0.3183098733425140380859375) * _2211) * _2212) + _1973;
    }
    uint _2038 = _1790 + 8u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _337) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1790].x + _414;
    float _2054 = cbLight._m0[_1790].y + _415;
    float _2055 = cbLight._m0[_1790].z + _416;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1790].xyz));
    float _4044 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _2067 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2068 = dot(vec3(_333, _334, _335), vec3(_2060, _2061, _2062));
    float _4066 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_2060, _2061, _2062));
    float _4077 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2052 * _2052;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2091 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2092 = 1.0 - _2052;
    float _2103 = (0.5 / (((_2067 * ((_2066 * _2092) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2092) + _2052) * _2066))) * _2066;
    float _4088 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    uint _2119 = _1790 + 9u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _337) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1831].x + _414;
    float _2133 = cbLight._m0[_1831].y + _415;
    float _2134 = cbLight._m0[_1831].z + _416;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1831].xyz));
    float _4099 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2146 = dot(vec3(_333, _334, _335), vec3(_2139, _2140, _2141));
    float _4110 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_2139, _2140, _2141));
    float _4121 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2131 * _2131;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2168 = 1.0 - _2131;
    float _2178 = (0.5 / (((_2067 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2168) + _2131) * _2145))) * _2145;
    float _4132 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    float _2190 = (((_2167 * cbLight._m0[_2119].x) * _2180) * _1813) + ((((cbLight._m0[_2038].x * _1779) * _2091) * _2105) * _1827);
    float _2191 = (((_2167 * cbLight._m0[_2119].y) * _2180) * _1813) + ((((cbLight._m0[_2038].y * _1781) * _2091) * _2105) * _1827);
    float _2192 = (((_2167 * cbLight._m0[_2119].z) * _2180) * _1813) + ((((cbLight._m0[_2038].z * _1783) * _2091) * _2105) * _1827);
    float _2248;
    float _2250;
    float _2252;
    if (_1867)
    {
        _2248 = _2190;
        _2250 = _2191;
        _2252 = _2192;
    }
    else
    {
        uint _2254 = _1790 + 2u;
        uint _2258 = _1790 + 10u;
        float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _337) * 0.949999988079071044921875);
        float _2273 = _2272 * _2272;
        float _2274 = cbLight._m0[_2254].x + _414;
        float _2275 = cbLight._m0[_2254].y + _415;
        float _2276 = cbLight._m0[_2254].z + _416;
        float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
        float _2281 = _2280 * _2274;
        float _2282 = _2280 * _2275;
        float _2283 = _2280 * _2276;
        float _2284 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_2254].xyz));
        float _4143 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2288 = dot(vec3(_333, _334, _335), vec3(_2281, _2282, _2283));
        float _4154 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2292 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2281, _2282, _2283));
        float _4165 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2296 = _2273 * _2273;
        float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
        float _2309 = (exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2310 = 1.0 - _2273;
        float _2320 = (0.5 / (((_2067 * ((_2287 * _2310) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2310) + _2273) * _2287))) * _2287;
        float _4176 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2322 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
        float _2323 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _2248 = (((_2309 * cbLight._m0[_2258].x) * _2322) * _2323) + _2190;
        _2250 = (((_2309 * cbLight._m0[_2258].y) * _2322) * _2323) + _2191;
        _2252 = (((_2309 * cbLight._m0[_2258].z) * _2322) * _2323) + _2192;
    }
    float _2354;
    float _2356;
    float _2358;
    if (_1976)
    {
        _2354 = _2248;
        _2356 = _2250;
        _2358 = _2252;
    }
    else
    {
        uint _2365 = _1790 + 3u;
        uint _2369 = _1790 + 11u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _337) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _414;
        float _2386 = cbLight._m0[_2365].y + _415;
        float _2387 = cbLight._m0[_2365].z + _416;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_2365].xyz));
        float _4192 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2399 = dot(vec3(_333, _334, _335), vec3(_2392, _2393, _2394));
        float _4203 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4214 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2421 = 1.0 - _2384;
        float _2431 = (0.5 / (((_2067 * ((_2398 * _2421) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2421) + _2384) * _2398))) * _2398;
        float _4225 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2354 = (((_2420 * cbLight._m0[_2369].x) * _2433) * _2434) + _2248;
        _2356 = (((_2420 * cbLight._m0[_2369].y) * _2433) * _2434) + _2250;
        _2358 = (((_2420 * cbLight._m0[_2369].z) * _2433) * _2434) + _2252;
    }
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    if (_1788.y == 0u)
    {
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.x;
        uint _2467 = uint((float(_2455.y) * floor(float(uint(cbSceneParam._m0[85u].y * _423) / _2456))) + floor(float(uint(cbSceneParam._m0[85u].x * _422) / _2456)));
        float _2477 = (log2(_1566 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2478 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        uint _2481 = uint(isnan(14.0) ? _2478 : (isnan(_2478) ? 14.0 : min(_2478, 14.0)));
        uvec4 _2486 = texelFetch(g_lightClusterGridBuffer, int(((_2481 << 2u) + (_2467 << 6u)) >> 2u));
        uint _2487 = _2486.x;
        uint _2488 = _2455.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2488 >> 4u) & 15u)) + 4294967295u) & _2487) == 0u) || ((_2488 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            uint _2720 = 0u;
            uint _2729;
            bool _2730;
            for (;;)
            {
                _2729 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                _2730 = _2729 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2730)
                {
                    frontier_phi_66_pred = _2719;
                    frontier_phi_66_pred_1 = _2718;
                    frontier_phi_66_pred_2 = _2717;
                    frontier_phi_66_pred_3 = _2716;
                    frontier_phi_66_pred_4 = _2715;
                    frontier_phi_66_pred_5 = _2714;
                }
                else
                {
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    uint _2844;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2729;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    for (;;)
                    {
                        uint _2848 = uint(findLSB(_2844)) + (_2720 << 5u);
                        uint _2845 = (_2844 + 4294967295u) & _2844;
                        uint _2850 = _2848 * 48u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2870 = (_2848 * 48u) + 4u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2889 = (_2848 * 48u) + 8u;
                        vec3 _2900 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x));
                        float _2904 = _2864.x - _1564;
                        float _2905 = _2864.y - _1565;
                        float _2906 = _2864.z - _1566;
                        float _2907 = dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906));
                        float _2910 = inversesqrt(_2907);
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2914 = dot(vec3(_444, _447, _450), vec3(_2911, _2912, _2913));
                        float _2919 = 1.0 - (_2907 * _2864.w);
                        float _4251 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2921 = sqrt(_2907) * _2883.w;
                        float _2924 = 1.39999997615814208984375 / (_2921 + 1.39999997615814208984375);
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2914) + _2925;
                        float _2931 = _2921 * _2921;
                        float _2935 = ((isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))) * _2920) / ((_2931 * 0.699999988079071044921875) + 1.0);
                        float _2939 = (-0.0) - _1564;
                        float _2940 = (-0.0) - _1565;
                        float _2941 = (-0.0) - _1566;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2955 = exp2(log2(1.0 / ((_2931 * 3.5) + 5.0)) * 0.25);
                        float _2956 = 1.0 - _505;
                        float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                        float _2964 = _2963 * _2963;
                        float _2965 = _2964 * _2964;
                        float _2966 = _2946 + _2911;
                        float _2967 = _2947 + _2912;
                        float _2968 = _2948 + _2913;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2976 = dot(vec3(_444, _447, _450), vec3(_2946, _2947, _2948));
                        float _4267 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2980 = dot(vec3(_444, _447, _450), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                        float _4278 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                        float _2988 = _2924 * _2964;
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2914) + _2989;
                        float _4289 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2994 = 1.0 - _2964;
                        float _3004 = (0.5 / (((_2993 * ((_2979 * _2994) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2964) * _2979))) * _2993;
                        float _4300 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3015 = (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_2987 * _2987) * ((_2931 * 2.1991131305694580078125) + 3.141590118408203125))) * _2920;
                        _2773 = (_2935 * _2883.x) + _2841;
                        _2774 = (_2935 * _2883.y) + _2842;
                        _2775 = (_2935 * _2883.z) + _2843;
                        _2770 = (_3015 * _2900.x) + _2838;
                        _2771 = (_3015 * _2900.y) + _2839;
                        _2772 = (_3015 * _2900.z) + _2840;
                        if (_2845 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2845;
                        }
                    }
                    frontier_phi_66_pred = _2775;
                    frontier_phi_66_pred_1 = _2774;
                    frontier_phi_66_pred_2 = _2773;
                    frontier_phi_66_pred_3 = _2772;
                    frontier_phi_66_pred_4 = _2771;
                    frontier_phi_66_pred_5 = _2770;
                }
                _2580 = frontier_phi_66_pred;
                _2578 = frontier_phi_66_pred_1;
                _2576 = frontier_phi_66_pred_2;
                _2574 = frontier_phi_66_pred_3;
                _2572 = frontier_phi_66_pred_4;
                _2570 = frontier_phi_66_pred_5;
                uint _2721 = _2720 + 1u;
                if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2714 = _2570;
                    _2715 = _2572;
                    _2716 = _2574;
                    _2717 = _2576;
                    _2718 = _2578;
                    _2719 = _2580;
                    _2720 = _2721;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((4294967295u << _2586) & _2487) == 0u)
        {
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
            _2688 = _2575;
            _2690 = _2577;
            _2692 = _2579;
        }
        else
        {
            float _2707 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
            float _2708 = _2707 * _1564;
            float _2709 = _2707 * _1565;
            float _2710 = _2707 * _1566;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2821 = _2569;
                float _2822 = _2571;
                float _2823 = _2573;
                float _2824 = _2575;
                float _2825 = _2577;
                float _2826 = _2579;
                uint _2827 = _2586;
                uint _2836;
                bool _2837;
                for (;;)
                {
                    _2836 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                    _2837 = _2836 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2837)
                    {
                        frontier_phi_72_pred = _2826;
                        frontier_phi_72_pred_1 = _2825;
                        frontier_phi_72_pred_2 = _2824;
                        frontier_phi_72_pred_3 = _2823;
                        frontier_phi_72_pred_4 = _2822;
                        frontier_phi_72_pred_5 = _2821;
                    }
                    else
                    {
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3033 = _2821;
                        float _3034 = _2822;
                        float _3035 = _2823;
                        float _3036 = _2824;
                        float _3037 = _2825;
                        float _3038 = _2826;
                        uint _3039 = _2836;
                        uint _3040;
                        vec4 _3065;
                        float _3066;
                        vec4 _3081;
                        vec3 _3093;
                        vec4 _3109;
                        vec4 _3125;
                        float _3172;
                        bool _3173;
                        for (;;)
                        {
                            uint _3050 = ((_2827 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3039));
                            _3040 = (_3039 + 4294967295u) & _3039;
                            uint _3052 = _3050 * 40u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3066 = _3065.w;
                            uint _3068 = (_3050 * 40u) + 4u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3050 * 40u) + 8u;
                            _3093 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x));
                            uint _3096 = (_3050 * 40u) + 16u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3112 = (_3050 * 40u) + 20u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3128 = (_3050 * 40u) + 24u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3147 = (_3050 * 40u) + 28u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3172 = fma(_1566, _3160.z, fma(_1565, _3160.y, _3160.x * _1564)) + _3160.w;
                            _3173 = !((fma(_1566, _3141.z, fma(_1565, _3141.y, _3141.x * _1564)) + _3141.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3173)
                            {
                                float _3200 = _3065.x - _1564;
                                float _3201 = _3065.y - _1565;
                                float _3202 = _3065.z - _1566;
                                float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                                float _3206 = inversesqrt(_3203);
                                float _3207 = _3206 * _3200;
                                float _3208 = _3206 * _3201;
                                float _3209 = _3206 * _3202;
                                float _3213 = 1.0 - (_3203 / (_3066 * _3066));
                                float _4311 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3218 = sqrt(_3203) * _3081.w;
                                float _3220 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                                float _3221 = _3220 * _3220;
                                float _3224 = ((1.0 - _3221) * dot(vec3(_3207, _3208, _3209), vec3(_444, _447, _450))) + _3221;
                                float _3227 = _3218 * _3218;
                                float _3231 = (fma(_1566, _3109.z, fma(_1565, _3109.y, _3109.x * _1564)) + _3109.w) / _3172;
                                float _3232 = (fma(_1566, _3125.z, fma(_1565, _3125.y, _3125.x * _1564)) + _3125.w) / _3172;
                                float _3236 = 1.0 - dot(vec2(_3231, _3232), vec2(_3231, _3232));
                                float _4327 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3238 = _3237 * (((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3214) / ((_3227 * 0.699999988079071044921875) + 1.0));
                                float _3250 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                                float _3251 = 1.0 - _505;
                                float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                                float _3259 = _3258 * _3258;
                                float _3260 = _3259 * _3259;
                                float _3261 = _3207 - _2708;
                                float _3262 = _3208 - _2709;
                                float _3263 = _3209 - _2710;
                                float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                                float _3271 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2708, (-0.0) - _2709, (-0.0) - _2710));
                                float _4338 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3275 = dot(vec3(_444, _447, _450), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                                float _4349 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                                float _3283 = _3220 * _3259;
                                float _3284 = _3283 * _3283;
                                float _3290 = ((1.0 - _3284) * dot(vec3(_444, _447, _450), vec3(_3207, _3208, _3209))) + _3284;
                                float _4360 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3292 = 1.0 - _3259;
                                float _3302 = (0.5 / (((_3291 * ((_3274 * _3292) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3259) * _3274))) * _3291;
                                float _4371 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3312 = (_3237 * _3214) * (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3282 * _3282) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3238 * _3081.y;
                                frontier_phi_78_pred_1 = _3238 * _3081.x;
                                frontier_phi_78_pred_2 = _3312 * _3093.z;
                                frontier_phi_78_pred_3 = _3312 * _3093.y;
                                frontier_phi_78_pred_4 = _3312 * _3093.x;
                                frontier_phi_78_pred_5 = _3238 * _3081.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3320 = frontier_phi_78_pred;
                            _3319 = frontier_phi_78_pred_1;
                            _3318 = frontier_phi_78_pred_2;
                            _3317 = frontier_phi_78_pred_3;
                            _3316 = frontier_phi_78_pred_4;
                            _3321 = frontier_phi_78_pred_5;
                            _3023 = _3319 + _3036;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            _3020 = _3316 + _3033;
                            _3021 = _3317 + _3034;
                            _3022 = _3318 + _3035;
                            if (_3040 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3040;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3025;
                        frontier_phi_72_pred_1 = _3024;
                        frontier_phi_72_pred_2 = _3023;
                        frontier_phi_72_pred_3 = _3022;
                        frontier_phi_72_pred_4 = _3021;
                        frontier_phi_72_pred_5 = _3020;
                    }
                    _2693 = frontier_phi_72_pred;
                    _2691 = frontier_phi_72_pred_1;
                    _2689 = frontier_phi_72_pred_2;
                    _2687 = frontier_phi_72_pred_3;
                    _2685 = frontier_phi_72_pred_4;
                    _2683 = frontier_phi_72_pred_5;
                    uint _2828 = _2827 + 1u;
                    if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2821 = _2683;
                        _2822 = _2685;
                        _2823 = _2687;
                        _2824 = _2689;
                        _2825 = _2691;
                        _2826 = _2693;
                        _2827 = _2828;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2693;
                frontier_phi_60_61_ladder_1 = _2691;
                frontier_phi_60_61_ladder_2 = _2687;
                frontier_phi_60_61_ladder_3 = _2685;
                frontier_phi_60_61_ladder_4 = _2683;
                frontier_phi_60_61_ladder_5 = _2689;
            }
            else
            {
                frontier_phi_60_61_ladder = _2579;
                frontier_phi_60_61_ladder_1 = _2577;
                frontier_phi_60_61_ladder_2 = _2573;
                frontier_phi_60_61_ladder_3 = _2571;
                frontier_phi_60_61_ladder_4 = _2569;
                frontier_phi_60_61_ladder_5 = _2575;
            }
            _2682 = frontier_phi_60_61_ladder_4;
            _2684 = frontier_phi_60_61_ladder_3;
            _2686 = frontier_phi_60_61_ladder_2;
            _2688 = frontier_phi_60_61_ladder_5;
            _2690 = frontier_phi_60_61_ladder_1;
            _2692 = frontier_phi_60_61_ladder;
        }
        float _2697 = isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0));
        _2500 = (_2697 * _2688) + _2031;
        _2502 = (_2697 * _2690) + _2033;
        _2504 = (_2697 * _2692) + _2035;
        _2506 = ((_2682 * 0.039999999105930328369140625) * _2697) + _2354;
        _2508 = ((_2684 * 0.039999999105930328369140625) * _2697) + _2356;
        _2510 = ((_2686 * 0.039999999105930328369140625) * _2697) + _2358;
    }
    else
    {
        _2500 = _2031;
        _2502 = _2033;
        _2504 = _2035;
        _2506 = _2354;
        _2508 = _2356;
        _2510 = _2358;
    }
    float _4387 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4398 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4409 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4420 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _2535 = cbInstanceData._m0[_463 + 6u].w * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)));
    float _2540 = _422 / cbSceneParam._m0[86u].x;
    float _2541 = _423 / cbSceneParam._m0[86u].y;
    vec4 _2555 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, (log2((isnan(cbSceneParam._m0[77u].w) ? _356 : (isnan(_356) ? cbSceneParam._m0[77u].w : min(_356, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2557 = _2555.x;
    float _2558 = _2555.y;
    float _2559 = _2555.z;
    float _2560 = _2555.w;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_356 > cbSceneParam._m0[78u].w)
    {
        float _2594 = isnan(_356) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _356 : min(cbSceneParam._m0[80u].w, _356));
        float _2595 = _2594 / _356;
        float _2606 = _2595 * _407;
        float _2607 = _408 * _2595;
        float _2608 = (-0.0) - _2607;
        float _2610 = _2595 * _409;
        float _2612 = (cbSceneParam._m0[77u].w * _2608) / _2594;
        float _2613 = _2612 + cbSceneParam._m0[79u].w;
        float _2614 = cbSceneParam._m0[79u].w - _2607;
        float _2620 = sqrt(((_2606 * _2606) + (_2607 * _2607)) + (_2610 * _2610));
        float _2623 = (1.0 - (cbSceneParam._m0[77u].w / _2594)) * _2620;
        float _2628 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2630 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2783;
        if (abs((_2608 - _2612) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2783 = ((((_2613 > 0.0) ? exp2(_2628 * _2613) : (2.0 - exp2(_2630 * _2613))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2623;
        }
        else
        {
            float _2743 = 1.0 / cbSceneParam._m0[80u].x;
            float _2744 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : max(_2613, _2614));
            float _2745 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : min(_2613, _2614));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            _2783 = ((abs(_2620 / _2608) * cbSceneParam._m0[80u].y) * ((((_2754 - _2755) * 2.0) - ((exp2(_2628 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0)))) - exp2(_2628 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))))) * _2743)) - ((exp2(_2630 * _2754) - exp2(_2630 * _2755)) * _2743))) + (_2623 * cbSceneParam._m0[80u].z);
        }
        vec4 _2785 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, 1.0), 0.0);
        float _2794 = exp2((_2783 * (-1.44269502162933349609375)) * (1.0 - _2785.w));
        float _2795 = log2(_2794);
        float _2811 = log2(_2560);
        _2632 = (exp2(_2811 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].x)) * _2785.x) / cbSceneParam._m0[78u].x)) + _2557;
        _2634 = (exp2(_2811 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].y)) * _2785.y) / cbSceneParam._m0[78u].y)) + _2558;
        _2636 = (exp2(_2811 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].z)) * _2785.z) / cbSceneParam._m0[78u].z)) + _2559;
        _2638 = _2794 * _2560;
    }
    else
    {
        _2632 = _2557;
        _2634 = _2558;
        _2636 = _2559;
        _2638 = _2560;
    }
    float _2650 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2651 = _2650 == 3.0;
    float _2652 = log2(_2638);
    float _2659 = exp2(_2652 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2500 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _489))) + ((_2506 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2660 = exp2(_2652 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2502 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _489))) + ((_2508 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2661 = exp2(_2652 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2504 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _489))) + ((_2510 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2670 = (_2650 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2670 * (_2651 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2632)));
    SV_Target.y = _2670 * (_2651 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2634)));
    SV_Target.z = _2670 * (_2651 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.w = _2535;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2535;
}


