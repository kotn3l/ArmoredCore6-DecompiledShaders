#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _891;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    float _259 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _260 = _232.w * TEXCOORD.x;
    float _271 = (_260 < 0.5) ? 0.0 : 1.0;
    float _281 = (((((_260 * 2.0) * (1.0 - _271)) * _259) + (-0.5)) + ((1.0 - (((1.0 - _260) * 2.0) * (1.0 - _259))) * _271)) * cbMtdParam._m0[10u].z;
    precise float _285 = _281 * ((_281 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _286 = cbMtdParam._m0[10u].y + _285;
    float _3254 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _287 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _292 = (_287 * _287) * (3.0 - (_287 * 2.0));
    vec4 _304 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _306 = _304.x;
    vec4 _318 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _322 = _318.z;
    float _325 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3265 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))));
    float _336 = fma(_333, _202 * NORMAL.x, fma(_327, _209 * TANGENT.x, (_195 * _187) * _325));
    float _339 = fma(_333, _202 * NORMAL.y, fma(_327, _209 * TANGENT.y, (_195 * _188) * _325));
    float _342 = fma(_333, _202 * NORMAL.z, fma(_327, _209 * TANGENT.z, (_195 * _189) * _325));
    float _346 = inversesqrt(dot(vec3(_336, _339, _342), vec3(_336, _339, _342)));
    float _347 = _346 * _336;
    float _348 = _346 * _339;
    float _349 = _346 * _342;
    float _3276 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _350 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _351 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3309 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3320 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3331 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _355 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _371 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _422 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _412);
    float _423 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _412);
    float _424 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _412);
    float _428 = inversesqrt(dot(vec3(_422, _423, _424), vec3(_422, _423, _424)));
    float _429 = _422 * _428;
    float _430 = _423 * _428;
    float _431 = _424 * _428;
    float _437 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _438 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _459 = fma(_349, cbSceneParam._m0[5u].z, fma(_348, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _347));
    float _462 = fma(_349, cbSceneParam._m0[6u].z, fma(_348, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _347));
    float _465 = fma(_349, cbSceneParam._m0[7u].z, fma(_348, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _347));
    uint _478 = uint(roundEven(NORMAL.w)) * 13u;
    uint _481 = (_478 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _487 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_481].x;
    float _488 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_481].y;
    float _489 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_481].z;
    float _3342 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _493 = 1.0 - _355;
    float _494 = _490 * _493;
    float _495 = _491 * _493;
    float _496 = _492 * _493;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _355;
    float _502 = (_491 + (-0.039999999105930328369140625)) * _355;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _355;
    float _504 = _501 + 0.039999999105930328369140625;
    float _506 = _502 + 0.039999999105930328369140625;
    float _507 = _503 + 0.039999999105930328369140625;
    vec4 _516 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _437, cbSceneParam._m0[86u].y * _438));
    float _519 = _516.x * TEXCOORD.y;
    float _520 = dot(vec3(_347, _348, _349), vec3(_429, _430, _431));
    float _523 = _520 * 2.0;
    float _527 = (_523 * _347) - _429;
    float _528 = (_523 * _348) - _430;
    float _529 = (_523 * _349) - _431;
    float _533 = abs(dot(vec3(_429, _430, _431), vec3(_347, _348, _349)));
    float _3375 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _535 = sqrt(_351);
    float _547 = exp2((_535 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_535 * 3.0));
    float _553 = (1.0 - _547) * ((_535 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _554 = _547 * _535;
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_590, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582));
        float _621 = fma(_590, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582));
        float _625 = fma(_590, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582));
        float _648 = _582 + _347;
        float _649 = _586 + _348;
        float _650 = _590 + _349;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _617;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _621;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _625;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_347, _348, _349), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3423 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_347, _348, _349), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3456 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_347, _348, _349), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3489 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _931 = fma(_590, cbModelParam._m0[30u].z, fma(_586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _582));
        float _935 = fma(_590, cbModelParam._m0[31u].z, fma(_586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _582));
        float _939 = fma(_590, cbModelParam._m0[32u].z, fma(_586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _582));
        float _962 = _582 + _347;
        float _963 = _586 + _348;
        float _964 = _590 + _349;
        float _974 = fma(_964, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962)) - _931;
        float _975 = fma(_964, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962)) - _935;
        float _976 = fma(_964, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962)) - _939;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_931 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_935 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[35u].z) + ((((((_939 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1030 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_997.x + (-0.5));
        float _1032 = _1030 * (_997.y + (-0.5));
        float _1033 = _1030 * (_997.z + (-0.5));
        float _1040 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1004.x + (-0.5));
        float _1042 = _1040 * (_1004.y + (-0.5));
        float _1043 = _1040 * (_1004.z + (-0.5));
        float _1050 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1011.x + (-0.5));
        float _1052 = _1050 * (_1011.y + (-0.5));
        float _1053 = _1050 * (_1011.z + (-0.5));
        float _1060 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1018.x + (-0.5));
        float _1062 = _1060 * (_1018.y + (-0.5));
        float _1063 = _1060 * (_1018.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_347, _348, _349), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3552 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1094 + 1.0))) + _1099) * _1064;
        float _1109 = _1032 * 0.5;
        float _1110 = _1042 * 0.5;
        float _1111 = _1052 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_347, _348, _349), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3585 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1136 + 1.0))) + _1141) * _1065;
        float _1151 = _1033 * 0.5;
        float _1152 = _1043 * 0.5;
        float _1153 = _1053 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_347, _348, _349), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3618 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1178 + 1.0))) + _1183) * _1066;
        _1200 = _1033;
        _1201 = _1032;
        _1202 = _1031;
        _1203 = _1043;
        _1204 = _1042;
        _1205 = _1041;
        _1206 = _1053;
        _1207 = _1052;
        _1208 = _1051;
        _1209 = _1066;
        _1210 = _1065;
        _1211 = _1064;
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _891;
        _1201 = _891;
        _1202 = _891;
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1247 = fma(_1226, cbSceneParam._m0[89u].z, fma(_1225, cbSceneParam._m0[89u].y, _1224 * cbSceneParam._m0[89u].x));
    float _1250 = fma(_1226, cbSceneParam._m0[90u].z, fma(_1225, cbSceneParam._m0[90u].y, _1224 * cbSceneParam._m0[90u].x));
    float _1253 = fma(_1226, cbSceneParam._m0[91u].z, fma(_1225, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1224));
    float _1268 = _527 * 0.5;
    float _1269 = _528 * 0.5;
    float _1270 = _529 * 0.5;
    float _1271 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1274 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1277 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1311;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1284 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_890, _894, _897, _900));
        float _1288 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_892, _895, _898, _901));
        float _1292 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_893, _896, _899, _902));
        float _1299 = dot(vec4(cbModelParam._m0[39u]), vec4(_1268, _1269, _1270, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1299) ? 0.0 : (isnan(0.0) ? _1299 : max(0.0, _1299))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1322;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1313 = dot(vec4(cbModelParam._m0[40u]), vec4(_1268, _1269, _1270, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1326 = (_1322 * cbModelParam._m0[1u].x) + (_1311 * (1.0 - cbModelParam._m0[1u].x));
    float _1336 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _351);
    float _1337 = isnan(_1336) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1336 : min(cbModelParam._m0[25u].z, _1336));
    float _1419;
    float _1421;
    float _1423;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1386 = fma(_590, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _582)) + cbModelParam._m0[13u].w;
        float _1390 = fma(_590, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _582)) + cbModelParam._m0[14u].w;
        float _1394 = fma(_590, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _582)) + cbModelParam._m0[15u].w;
        float _1397 = fma(_529, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527));
        float _1400 = fma(_529, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527));
        float _1403 = fma(_529, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527));
        float _1431;
        if (_1397 > 0.0)
        {
            _1431 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1431 = frontier_phi_14_12_ladder;
        }
        float _1660;
        if (_1400 > 0.0)
        {
            _1660 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1660 = frontier_phi_23_19_ladder;
        }
        float _1917;
        if (_1403 > 0.0)
        {
            _1917 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1917 = frontier_phi_35_30_ladder;
        }
        float _1919 = isnan(_1660) ? _1431 : (isnan(_1431) ? _1660 : min(_1431, _1660));
        float _1920 = isnan(_1917) ? _1919 : (isnan(_1919) ? _1917 : min(_1919, _1917));
        float _1924 = (_1920 * _1397) + _1386;
        float _1925 = (_1920 * _1400) + _1390;
        float _1926 = (_1920 * _1403) + _1394;
        float _1927 = _1920 * 9.9999997473787516355514526367188e-05;
        float _1929 = (-1.0) - _1927;
        float _1931 = _1927 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1926 > _1931) || ((_1926 < _1929) || ((_1925 > _1931) || ((_1925 < _1929) || ((_1924 < _1929) || (_1924 > _1931))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1926, cbModelParam._m0[9u].z, fma(_1925, cbModelParam._m0[9u].y, _1924 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1926, cbModelParam._m0[10u].z, fma(_1925, cbModelParam._m0[10u].y, _1924 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1926, cbModelParam._m0[11u].z, fma(_1925, cbModelParam._m0[11u].y, _1924 * cbModelParam._m0[11u].x))), _1337);
            frontier_phi_13_35_ladder = _2054.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2054.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2054.x * cbModelParam._m0[1u].y;
        }
        _1419 = frontier_phi_13_35_ladder_2;
        _1421 = frontier_phi_13_35_ladder_1;
        _1423 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_527, _528, _529), _1337);
        _1419 = _1407.x * cbModelParam._m0[1u].y;
        _1421 = _1407.y * cbModelParam._m0[1u].y;
        _1423 = _1407.z * cbModelParam._m0[1u].y;
    }
    float _1427 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _351);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1427 : min(cbModelParam._m0[25u].w, _1427));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1485 = fma(_590, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _582)) + cbModelParam._m0[21u].w;
        float _1489 = fma(_590, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _582)) + cbModelParam._m0[22u].w;
        float _1493 = fma(_590, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _582)) + cbModelParam._m0[23u].w;
        float _1496 = fma(_529, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527));
        float _1499 = fma(_529, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527));
        float _1502 = fma(_529, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527));
        float _1665;
        if (_1496 > 0.0)
        {
            _1665 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1665 = frontier_phi_25_21_ladder;
        }
        float _1944;
        if (_1499 > 0.0)
        {
            _1944 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1944 = frontier_phi_37_32_ladder;
        }
        float _2157;
        if (_1502 > 0.0)
        {
            _2157 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2157 = frontier_phi_46_43_ladder;
        }
        float _2159 = isnan(_1944) ? _1665 : (isnan(_1665) ? _1944 : min(_1665, _1944));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1496) + _1485;
        float _2165 = (_2160 * _1499) + _1489;
        float _2166 = (_2160 * _1502) + _1493;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2167;
        float _2170 = _2167 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2166 > _2170) || ((_2166 < _2168) || ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 < _2168) || (_2164 > _2170))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2166, cbModelParam._m0[17u].z, fma(_2165, cbModelParam._m0[17u].y, _2164 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2166, cbModelParam._m0[18u].z, fma(_2165, cbModelParam._m0[18u].y, _2164 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2166, cbModelParam._m0[19u].z, fma(_2165, cbModelParam._m0[19u].y, _2164 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_22_46_ladder = _2367.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2367.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2367.x * cbModelParam._m0[1u].z;
        }
        _1521 = frontier_phi_22_46_ladder_2;
        _1523 = frontier_phi_22_46_ladder_1;
        _1525 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_527, _528, _529), _1428);
        _1521 = _1505.x * cbModelParam._m0[1u].z;
        _1523 = _1505.y * cbModelParam._m0[1u].z;
        _1525 = _1505.z * cbModelParam._m0[1u].z;
    }
    float _1538 = (((_553 * _504) + _554) * _519) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1540 = (((_553 * _506) + _554) * _519) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1542 = (((_553 * _507) + _554) * _519) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1545 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, _1538 * cbSceneParam._m0[91u].x));
    vec4 _1559 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_437, _438));
    float _1561 = _1559.w;
    float _1573 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1561);
    float _1574 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1561);
    float _1575 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1561);
    uvec4 _1579 = floatBitsToUint(cbInstanceData._m0[_478 + 5u]);
    uint _1581 = _1579.x * 14u;
    uint _1582 = _1581 + 13u;
    float _1589 = _519 + (-1.0);
    float _1594 = (cbLight._m0[_1582].x * _1589) + 1.0;
    float _1595 = (cbLight._m0[_1582].y * _1589) + 1.0;
    float _1596 = (cbLight._m0[_1582].z * _1589) + 1.0;
    float _1597 = (cbLight._m0[_1582].w * _1589) + 1.0;
    uint _1598 = _1581 + 5u;
    float _1604 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1608 = _1581 + 4u;
    float _1618 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1622 = _1581 | 1u;
    float _1633 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_347, _348, _349));
    float _1636 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_347, _348, _349));
    float _3754 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _3765 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1641 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1643 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1650 = ((cbLight._m0[_1598].x * _1604) * _1643) + (((cbLight._m0[_1608].x * _1573) * _1618) * _1641);
    float _1651 = ((_1604 * cbLight._m0[_1598].y) * _1643) + (((cbLight._m0[_1608].y * _1574) * _1618) * _1641);
    float _1652 = ((_1604 * cbLight._m0[_1598].z) * _1643) + (((cbLight._m0[_1608].z * _1575) * _1618) * _1641);
    uvec4 _1657 = floatBitsToUint(cbLight._m0[_1581 + 12u]);
    bool _1659 = _1657.x == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1659)
    {
        _1670 = _1650;
        _1672 = _1651;
        _1674 = _1652;
    }
    else
    {
        uint _1678 = _1581 + 6u;
        float _1694 = (dot(vec3(cbLight._m0[_1581 + 2u].xyz), vec3(_347, _348, _349)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3776 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1697 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1670 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1650;
        _1672 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1651;
        _1674 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1652;
    }
    bool _1677 = _1657.y == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1677)
    {
        _1715 = _1670;
        _1717 = _1672;
        _1719 = _1674;
    }
    else
    {
        uint _1888 = _1581 + 7u;
        float _1904 = (dot(vec3(cbLight._m0[_1581 + 3u].xyz), vec3(_347, _348, _349)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3792 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1907 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1715 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1670;
        _1717 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1672;
        _1719 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1674;
    }
    uint _1722 = _1581 + 8u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _351) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1581].x + _429;
    float _1738 = cbLight._m0[_1581].y + _430;
    float _1739 = cbLight._m0[_1581].z + _431;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_1581].xyz));
    float _3808 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _1751 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1752 = dot(vec3(_347, _348, _349), vec3(_1744, _1745, _1746));
    float _3830 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1744, _1745, _1746));
    float _3841 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1736 * _1736;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1772 = exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0);
    float _1773 = 0.959999978542327880859375 - _501;
    float _1775 = 0.959999978542327880859375 - _502;
    float _1776 = 0.959999978542327880859375 - _503;
    float _1783 = 1.0 - _1736;
    float _1794 = (0.5 / (((_1751 * ((_1750 * _1783) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1783) + _1736) * _1750))) * _1750;
    float _3852 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    uint _1810 = _1581 + 9u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1622].w)) * _351) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1622].x + _429;
    float _1824 = cbLight._m0[_1622].y + _430;
    float _1825 = cbLight._m0[_1622].z + _431;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_1622].xyz));
    float _3863 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1837 = dot(vec3(_347, _348, _349), vec3(_1830, _1831, _1832));
    float _3874 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_1830, _1831, _1832));
    float _3885 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1822 * _1822;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1856 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
    float _1863 = 1.0 - _1822;
    float _1873 = (0.5 / (((_1751 * ((_1836 * _1863) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1863) + _1822) * _1836))) * _1836;
    float _3896 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    float _1885 = (((((_1856 * _1773) + _504) * cbLight._m0[_1810].x) * _1875) * _1604) + ((((cbLight._m0[_1722].x * _1573) * ((_1772 * _1773) + _504)) * _1796) * _1618);
    float _1886 = (((((_1856 * _1775) + _506) * cbLight._m0[_1810].y) * _1875) * _1604) + ((((cbLight._m0[_1722].y * _1574) * ((_1772 * _1775) + _506)) * _1796) * _1618);
    float _1887 = (((((_1856 * _1776) + _507) * cbLight._m0[_1810].z) * _1875) * _1604) + ((((cbLight._m0[_1722].z * _1575) * ((_1772 * _1776) + _507)) * _1796) * _1618);
    float _1949;
    float _1951;
    float _1953;
    if (_1659)
    {
        _1949 = _1885;
        _1951 = _1886;
        _1953 = _1887;
    }
    else
    {
        uint _1955 = _1581 + 2u;
        uint _1959 = _1581 + 10u;
        float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _351) * 0.949999988079071044921875);
        float _1974 = _1973 * _1973;
        float _1975 = cbLight._m0[_1955].x + _429;
        float _1976 = cbLight._m0[_1955].y + _430;
        float _1977 = cbLight._m0[_1955].z + _431;
        float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
        float _1982 = _1981 * _1975;
        float _1983 = _1981 * _1976;
        float _1984 = _1981 * _1977;
        float _1985 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_1955].xyz));
        float _3907 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1989 = dot(vec3(_347, _348, _349), vec3(_1982, _1983, _1984));
        float _3918 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1993 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_1982, _1983, _1984));
        float _3929 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1997 = _1974 * _1974;
        float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
        float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
        float _2015 = 1.0 - _1974;
        float _2025 = (0.5 / (((_1751 * ((_1988 * _2015) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2015) + _1974) * _1988))) * _1988;
        float _3940 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2027 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
        float _2028 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1949 = (((((_2008 * _1773) + _504) * cbLight._m0[_1959].x) * _2027) * _2028) + _1885;
        _1951 = (((((_2008 * _1775) + _506) * cbLight._m0[_1959].y) * _2027) * _2028) + _1886;
        _1953 = (((((_2008 * _1776) + _507) * cbLight._m0[_1959].z) * _2027) * _2028) + _1887;
    }
    float _2063;
    float _2065;
    float _2067;
    if (_1677)
    {
        _2063 = _1949;
        _2065 = _1951;
        _2067 = _1953;
    }
    else
    {
        uint _2074 = _1581 + 3u;
        uint _2078 = _1581 + 11u;
        float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _351) * 0.949999988079071044921875);
        float _2093 = _2092 * _2092;
        float _2094 = cbLight._m0[_2074].x + _429;
        float _2095 = cbLight._m0[_2074].y + _430;
        float _2096 = cbLight._m0[_2074].z + _431;
        float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
        float _2101 = _2100 * _2094;
        float _2102 = _2100 * _2095;
        float _2103 = _2100 * _2096;
        float _2104 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_2074].xyz));
        float _3956 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2108 = dot(vec3(_347, _348, _349), vec3(_2101, _2102, _2103));
        float _3967 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2112 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2101, _2102, _2103));
        float _3978 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2116 = _2093 * _2093;
        float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
        float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
        float _2134 = 1.0 - _2093;
        float _2144 = (0.5 / (((_1751 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2134) + _2093) * _2107))) * _2107;
        float _3989 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2146 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
        float _2147 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _2063 = (((((_2127 * _1773) + _504) * cbLight._m0[_2078].x) * _2146) * _2147) + _1949;
        _2065 = (((((_2127 * _1775) + _506) * cbLight._m0[_2078].y) * _2146) * _2147) + _1951;
        _2067 = (((((_2127 * _1776) + _507) * cbLight._m0[_2078].z) * _2146) * _2147) + _1953;
    }
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    if (_1579.y == 0u)
    {
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2222;
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2222;
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2222;
        uvec4 _2237 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2238 = _2237.x;
        uint _2249 = uint((float(_2237.y) * floor(float(uint(cbSceneParam._m0[85u].y * _438) / _2238))) + floor(float(uint(cbSceneParam._m0[85u].x * _437) / _2238)));
        float _2259 = (log2(_2225 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2260 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        uint _2263 = uint(isnan(14.0) ? _2260 : (isnan(_2260) ? 14.0 : min(_2260, 14.0)));
        uvec4 _2268 = texelFetch(g_lightClusterGridBuffer, int(((_2263 << 2u) + (_2249 << 6u)) >> 2u));
        uint _2269 = _2268.x;
        uint _2270 = _2237.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2270 >> 4u) & 15u)) + 4294967295u) & _2269) == 0u) || ((_2270 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            uint _2523 = 0u;
            uint _2532;
            bool _2533;
            for (;;)
            {
                _2532 = texelFetch(g_lightClassification, int((((_2263 << 5u) + (_2249 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                _2533 = _2532 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2533)
                {
                    frontier_phi_61_pred = _2517;
                    frontier_phi_61_pred_1 = _2522;
                    frontier_phi_61_pred_2 = _2521;
                    frontier_phi_61_pred_3 = _2520;
                    frontier_phi_61_pred_4 = _2519;
                    frontier_phi_61_pred_5 = _2518;
                }
                else
                {
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    uint _2647;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2532;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2651 = uint(findLSB(_2647)) + (_2523 << 5u);
                        uint _2648 = (_2647 + 4294967295u) & _2647;
                        uint _2653 = _2651 * 48u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2673 = (_2651 * 48u) + 4u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2692 = (_2651 * 48u) + 8u;
                        vec3 _2703 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x));
                        float _2707 = _2667.x - _2223;
                        float _2708 = _2667.y - _2224;
                        float _2709 = _2667.z - _2225;
                        float _2710 = dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709));
                        float _2713 = inversesqrt(_2710);
                        float _2714 = _2713 * _2707;
                        float _2715 = _2713 * _2708;
                        float _2716 = _2713 * _2709;
                        float _2717 = dot(vec3(_459, _462, _465), vec3(_2714, _2715, _2716));
                        float _2722 = 1.0 - (_2710 * _2667.w);
                        float _4015 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2723 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2724 = sqrt(_2710) * _2686.w;
                        float _2727 = 1.39999997615814208984375 / (_2724 + 1.39999997615814208984375);
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * _2717) + _2728;
                        float _2734 = _2724 * _2724;
                        float _2738 = ((isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))) * _2723) / ((_2734 * 0.699999988079071044921875) + 1.0);
                        float _2742 = (-0.0) - _2223;
                        float _2743 = (-0.0) - _2224;
                        float _2744 = (-0.0) - _2225;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2749 = _2748 * _2742;
                        float _2750 = _2748 * _2743;
                        float _2751 = _2748 * _2744;
                        float _2759 = exp2(log2(1.0 / ((_2734 * 3.5) + 5.0)) * 0.25);
                        float _2760 = 1.0 - _535;
                        float _2767 = sqrt(1.0 - ((1.0 - (_2760 * _2760)) * (1.0 - (_2759 * _2759))));
                        float _2768 = _2767 * _2767;
                        float _2769 = _2768 * _2768;
                        float _2770 = _2749 + _2714;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2780 = dot(vec3(_459, _462, _465), vec3(_2749, _2750, _2751));
                        float _4031 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2784 = dot(vec3(_459, _462, _465), vec3(_2776 * _2770, _2776 * _2771, _2776 * _2772));
                        float _4042 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2791 = ((_2787 * _2787) * (_2769 + (-1.0))) + 1.0;
                        float _2792 = _2727 * _2768;
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * _2717) + _2793;
                        float _4053 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2798 = 1.0 - _2768;
                        float _2808 = (0.5 / (((_2797 * ((_2783 * _2798) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2797 * _2798) + _2768) * _2783))) * _2797;
                        float _4064 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2819 = (((_2769 * 3.1415927410125732421875) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) / ((_2791 * _2791) * ((_2734 * 2.1991131305694580078125) + 3.141590118408203125))) * _2723;
                        _2576 = (_2738 * _2686.x) + _2644;
                        _2577 = (_2738 * _2686.y) + _2645;
                        _2578 = (_2738 * _2686.z) + _2646;
                        _2573 = (_2819 * _2703.x) + _2641;
                        _2574 = (_2819 * _2703.y) + _2642;
                        _2575 = (_2819 * _2703.z) + _2643;
                        if (_2648 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2648;
                        }
                    }
                    frontier_phi_61_pred = _2573;
                    frontier_phi_61_pred_1 = _2578;
                    frontier_phi_61_pred_2 = _2577;
                    frontier_phi_61_pred_3 = _2576;
                    frontier_phi_61_pred_4 = _2575;
                    frontier_phi_61_pred_5 = _2574;
                }
                _2373 = frontier_phi_61_pred;
                _2383 = frontier_phi_61_pred_1;
                _2381 = frontier_phi_61_pred_2;
                _2379 = frontier_phi_61_pred_3;
                _2377 = frontier_phi_61_pred_4;
                _2375 = frontier_phi_61_pred_5;
                uint _2524 = _2523 + 1u;
                if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2517 = _2373;
                    _2518 = _2375;
                    _2519 = _2377;
                    _2520 = _2379;
                    _2521 = _2381;
                    _2522 = _2383;
                    _2523 = _2524;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((4294967295u << _2389) & _2269) == 0u)
        {
            _2485 = _2372;
            _2487 = _2374;
            _2489 = _2376;
            _2491 = _2378;
            _2493 = _2380;
            _2495 = _2382;
        }
        else
        {
            float _2510 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
            float _2511 = _2510 * _2223;
            float _2512 = _2510 * _2224;
            float _2513 = _2510 * _2225;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2624 = _2372;
                float _2625 = _2374;
                float _2626 = _2376;
                float _2627 = _2378;
                float _2628 = _2380;
                float _2629 = _2382;
                uint _2630 = _2389;
                uint _2639;
                bool _2640;
                for (;;)
                {
                    _2639 = texelFetch(g_lightClassification, int((((_2263 << 5u) + (_2249 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                    _2640 = _2639 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2640)
                    {
                        frontier_phi_67_pred = _2627;
                        frontier_phi_67_pred_1 = _2628;
                        frontier_phi_67_pred_2 = _2629;
                        frontier_phi_67_pred_3 = _2626;
                        frontier_phi_67_pred_4 = _2625;
                        frontier_phi_67_pred_5 = _2624;
                    }
                    else
                    {
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _2837 = _2624;
                        float _2838 = _2625;
                        float _2839 = _2626;
                        float _2840 = _2627;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        uint _2843 = _2639;
                        uint _2844;
                        vec4 _2869;
                        float _2870;
                        vec4 _2885;
                        vec3 _2897;
                        vec4 _2913;
                        vec4 _2929;
                        float _2976;
                        bool _2977;
                        for (;;)
                        {
                            uint _2854 = ((_2630 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2843));
                            _2844 = (_2843 + 4294967295u) & _2843;
                            uint _2856 = _2854 * 40u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            _2870 = _2869.w;
                            uint _2872 = (_2854 * 40u) + 4u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2887 = (_2854 * 40u) + 8u;
                            _2897 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x));
                            uint _2900 = (_2854 * 40u) + 16u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2854 * 40u) + 20u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2932 = (_2854 * 40u) + 24u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2951 = (_2854 * 40u) + 28u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2976 = fma(_2225, _2964.z, fma(_2224, _2964.y, _2964.x * _2223)) + _2964.w;
                            _2977 = !((fma(_2225, _2945.z, fma(_2224, _2945.y, _2945.x * _2223)) + _2945.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2977)
                            {
                                float _3004 = _2869.x - _2223;
                                float _3005 = _2869.y - _2224;
                                float _3006 = _2869.z - _2225;
                                float _3007 = dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006));
                                float _3010 = inversesqrt(_3007);
                                float _3011 = _3010 * _3004;
                                float _3012 = _3010 * _3005;
                                float _3013 = _3010 * _3006;
                                float _3017 = 1.0 - (_3007 / (_2870 * _2870));
                                float _4075 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3022 = sqrt(_3007) * _2885.w;
                                float _3024 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                                float _3025 = _3024 * _3024;
                                float _3028 = ((1.0 - _3025) * dot(vec3(_3011, _3012, _3013), vec3(_459, _462, _465))) + _3025;
                                float _3031 = _3022 * _3022;
                                float _3035 = (fma(_2225, _2913.z, fma(_2224, _2913.y, _2913.x * _2223)) + _2913.w) / _2976;
                                float _3036 = (fma(_2225, _2929.z, fma(_2224, _2929.y, _2929.x * _2223)) + _2929.w) / _2976;
                                float _3040 = 1.0 - dot(vec2(_3035, _3036), vec2(_3035, _3036));
                                float _4091 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3042 = _3041 * (((isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))) * _3018) / ((_3031 * 0.699999988079071044921875) + 1.0));
                                float _3054 = exp2(log2(1.0 / ((_3031 * 3.5) + 5.0)) * 0.25);
                                float _3055 = 1.0 - _535;
                                float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                                float _3063 = _3062 * _3062;
                                float _3064 = _3063 * _3063;
                                float _3065 = _3011 - _2511;
                                float _3066 = _3012 - _2512;
                                float _3067 = _3013 - _2513;
                                float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                                float _3075 = dot(vec3(_459, _462, _465), vec3((-0.0) - _2511, (-0.0) - _2512, (-0.0) - _2513));
                                float _4102 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3079 = dot(vec3(_459, _462, _465), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                                float _4113 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                                float _3087 = _3024 * _3063;
                                float _3088 = _3087 * _3087;
                                float _3094 = ((1.0 - _3088) * dot(vec3(_459, _462, _465), vec3(_3011, _3012, _3013))) + _3088;
                                float _4124 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3096 = 1.0 - _3063;
                                float _3106 = (0.5 / (((_3095 * ((_3078 * _3096) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3063) * _3078))) * _3095;
                                float _4135 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3116 = (_3041 * _3018) * (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) / ((_3086 * _3086) * ((_3031 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3116 * _2897.x;
                                frontier_phi_73_pred_1 = _3116 * _2897.y;
                                frontier_phi_73_pred_2 = _3042 * _2885.z;
                                frontier_phi_73_pred_3 = _3042 * _2885.y;
                                frontier_phi_73_pred_4 = _3042 * _2885.x;
                                frontier_phi_73_pred_5 = _3116 * _2897.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_73_pred;
                            _3121 = frontier_phi_73_pred_1;
                            _3125 = frontier_phi_73_pred_2;
                            _3124 = frontier_phi_73_pred_3;
                            _3123 = frontier_phi_73_pred_4;
                            _3122 = frontier_phi_73_pred_5;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            if (_2844 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2844;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2827;
                        frontier_phi_67_pred_1 = _2828;
                        frontier_phi_67_pred_2 = _2829;
                        frontier_phi_67_pred_3 = _2826;
                        frontier_phi_67_pred_4 = _2825;
                        frontier_phi_67_pred_5 = _2824;
                    }
                    _2492 = frontier_phi_67_pred;
                    _2494 = frontier_phi_67_pred_1;
                    _2496 = frontier_phi_67_pred_2;
                    _2490 = frontier_phi_67_pred_3;
                    _2488 = frontier_phi_67_pred_4;
                    _2486 = frontier_phi_67_pred_5;
                    uint _2631 = _2630 + 1u;
                    if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2624 = _2486;
                        _2625 = _2488;
                        _2626 = _2490;
                        _2627 = _2492;
                        _2628 = _2494;
                        _2629 = _2496;
                        _2630 = _2631;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2494;
                frontier_phi_55_56_ladder_1 = _2496;
                frontier_phi_55_56_ladder_2 = _2492;
                frontier_phi_55_56_ladder_3 = _2490;
                frontier_phi_55_56_ladder_4 = _2488;
                frontier_phi_55_56_ladder_5 = _2486;
            }
            else
            {
                frontier_phi_55_56_ladder = _2380;
                frontier_phi_55_56_ladder_1 = _2382;
                frontier_phi_55_56_ladder_2 = _2378;
                frontier_phi_55_56_ladder_3 = _2376;
                frontier_phi_55_56_ladder_4 = _2374;
                frontier_phi_55_56_ladder_5 = _2372;
            }
            _2485 = frontier_phi_55_56_ladder_5;
            _2487 = frontier_phi_55_56_ladder_4;
            _2489 = frontier_phi_55_56_ladder_3;
            _2491 = frontier_phi_55_56_ladder_2;
            _2493 = frontier_phi_55_56_ladder;
            _2495 = frontier_phi_55_56_ladder_1;
        }
        float _2500 = isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0));
        _2282 = (_2500 * _2491) + _1715;
        _2284 = (_2500 * _2493) + _1717;
        _2286 = (_2500 * _2495) + _1719;
        _2288 = ((_2485 * _504) * _2500) + _2063;
        _2290 = ((_2487 * _506) * _2500) + _2065;
        _2292 = ((_2489 * _507) * _2500) + _2067;
    }
    else
    {
        _2282 = _1715;
        _2284 = _1717;
        _2286 = _1719;
        _2288 = _2063;
        _2290 = _2065;
        _2292 = _2067;
    }
    float _4151 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4162 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4173 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4184 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _2317 = cbInstanceData._m0[_478 + 6u].w * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)));
    float _2322 = _437 / cbSceneParam._m0[86u].x;
    float _2323 = _438 / cbSceneParam._m0[86u].y;
    vec4 _2337 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, (log2((isnan(cbSceneParam._m0[77u].w) ? _371 : (isnan(_371) ? cbSceneParam._m0[77u].w : min(_371, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2339 = _2337.x;
    float _2340 = _2337.y;
    float _2341 = _2337.z;
    float _2342 = _2337.w;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_371 > cbSceneParam._m0[78u].w)
    {
        float _2397 = isnan(_371) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _371 : min(cbSceneParam._m0[80u].w, _371));
        float _2398 = _2397 / _371;
        float _2409 = _2398 * _422;
        float _2410 = _423 * _2398;
        float _2411 = (-0.0) - _2410;
        float _2413 = _2398 * _424;
        float _2415 = (cbSceneParam._m0[77u].w * _2411) / _2397;
        float _2416 = _2415 + cbSceneParam._m0[79u].w;
        float _2417 = cbSceneParam._m0[79u].w - _2410;
        float _2423 = sqrt(((_2409 * _2409) + (_2410 * _2410)) + (_2413 * _2413));
        float _2426 = (1.0 - (cbSceneParam._m0[77u].w / _2397)) * _2423;
        float _2431 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2433 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2411 - _2415) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2416 > 0.0) ? exp2(_2431 * _2416) : (2.0 - exp2(_2433 * _2416))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2426;
        }
        else
        {
            float _2546 = 1.0 / cbSceneParam._m0[80u].x;
            float _2547 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : max(_2416, _2417));
            float _2548 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : min(_2416, _2417));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            _2586 = ((abs(_2423 / _2411) * cbSceneParam._m0[80u].y) * ((((_2557 - _2558) * 2.0) - ((exp2(_2431 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)))) - exp2(_2431 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))))) * _2546)) - ((exp2(_2433 * _2557) - exp2(_2433 * _2558)) * _2546))) + (_2426 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2342);
        _2435 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2339;
        _2437 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2340;
        _2439 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2341;
        _2441 = _2597 * _2342;
    }
    else
    {
        _2435 = _2339;
        _2437 = _2340;
        _2439 = _2341;
        _2441 = _2342;
    }
    float _2453 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2454 = _2453 == 3.0;
    float _2455 = log2(_2441);
    float _2462 = exp2(_2455 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2282 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _519))) + ((_2288 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1326)) * cbPerFrame._m0[3u].x));
    float _2463 = exp2(_2455 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2284 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _519))) + ((_2290 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1326)) * cbPerFrame._m0[3u].x));
    float _2464 = exp2(_2455 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2286 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _519))) + ((_2292 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1326)) * cbPerFrame._m0[3u].x));
    float _2473 = (_2453 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2473 * (_2454 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2435)));
    SV_Target.y = _2473 * (_2454 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2437)));
    SV_Target.z = _2473 * (_2454 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.w = _2317;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2317;
}


