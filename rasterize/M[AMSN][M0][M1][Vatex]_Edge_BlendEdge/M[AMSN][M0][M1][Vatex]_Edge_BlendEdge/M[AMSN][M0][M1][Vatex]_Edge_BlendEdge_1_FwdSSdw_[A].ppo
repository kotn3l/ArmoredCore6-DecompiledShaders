#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _901;
float _3297;
float _3298;
float _3299;
float _3300;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    float _261 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _262 = _234.w * TEXCOORD.x;
    float _273 = (_262 < 0.5) ? 0.0 : 1.0;
    float _283 = (((((_262 * 2.0) * (1.0 - _273)) * _261) + (-0.5)) + ((1.0 - (((1.0 - _262) * 2.0) * (1.0 - _261))) * _273)) * cbMtdParam._m0[10u].z;
    precise float _287 = _283 * ((_283 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _288 = cbMtdParam._m0[10u].y + _287;
    float _3309 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _289 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _294 = (_289 * _289) * (3.0 - (_289 * 2.0));
    vec4 _306 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _310 = _306.z;
    float _313 = (_306.x * 2.0) + (-1.0);
    float _315 = (_306.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3320 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _321 = sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))));
    float _324 = fma(_321, _204 * NORMAL.x, fma(_315, _211 * TANGENT.x, (_197 * _189) * _313));
    float _327 = fma(_321, _204 * NORMAL.y, fma(_315, _211 * TANGENT.y, (_197 * _190) * _313));
    float _330 = fma(_321, _204 * NORMAL.z, fma(_315, _211 * TANGENT.z, (_197 * _191) * _313));
    float _334 = inversesqrt(dot(vec3(_324, _327, _330), vec3(_324, _327, _330)));
    float _335 = _334 * _324;
    float _336 = _334 * _327;
    float _337 = _334 * _330;
    float _3331 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _338 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _339 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3364 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3375 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _358 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _409 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _399);
    float _410 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _399);
    float _411 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _399);
    float _415 = inversesqrt(dot(vec3(_409, _410, _411), vec3(_409, _410, _411)));
    float _416 = _409 * _415;
    float _417 = _410 * _415;
    float _418 = _411 * _415;
    vec4 _423 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _425 = _423.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _582 = sqrt(((_409 * _409) + (_410 * _410)) + (_411 * _411));
        float _588 = (cbMatDynParam._m0[5u].x * _582) + cbMatDynParam._m0[5u].y;
        float _3386 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _589 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _593 = (cbMatDynParam._m0[5u].z * _582) + cbMatDynParam._m0[5u].w;
        float _3397 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) - _589)) + _589) < ((_425 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _437 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _438 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _458 = fma(_337, cbSceneParam._m0[5u].z, fma(_336, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _335));
    float _461 = fma(_337, cbSceneParam._m0[6u].z, fma(_336, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _335));
    float _464 = fma(_337, cbSceneParam._m0[7u].z, fma(_336, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _335));
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _477 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3408 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    vec4 _500 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _437, cbSceneParam._m0[86u].y * _438));
    float _503 = _500.x * TEXCOORD.y;
    float _504 = dot(vec3(_335, _336, _337), vec3(_416, _417, _418));
    float _507 = _504 * 2.0;
    float _511 = (_507 * _335) - _416;
    float _512 = (_507 * _336) - _417;
    float _513 = (_507 * _337) - _418;
    float _517 = abs(dot(vec3(_416, _417, _418), vec3(_335, _336, _337)));
    float _3441 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _519 = sqrt(_339);
    float _531 = exp2((_519 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_519 * 3.0));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _900;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _627 = fma(_571, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _563));
        float _631 = fma(_571, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _563));
        float _635 = fma(_571, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _563));
        float _658 = _563 + _335;
        float _659 = _567 + _336;
        float _660 = _571 + _337;
        float _670 = fma(_660, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) - _627;
        float _671 = fma(_660, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) - _631;
        float _672 = fma(_660, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) - _635;
        float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
        float _689 = ((_676 * _670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_627 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_676 * _671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_631 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_676 * _672) / cbModelParam._m0[34u].z) + ((((((_635 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        float _728 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_694.x + (-0.5));
        float _730 = _728 * (_694.y + (-0.5));
        float _731 = _728 * (_694.z + (-0.5));
        float _738 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_701.x + (-0.5));
        float _740 = _738 * (_701.y + (-0.5));
        float _741 = _738 * (_701.z + (-0.5));
        float _748 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_708.x + (-0.5));
        float _750 = _748 * (_708.y + (-0.5));
        float _751 = _748 * (_708.z + (-0.5));
        float _758 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_715.x + (-0.5));
        float _760 = _758 * (_715.y + (-0.5));
        float _761 = _758 * (_715.z + (-0.5));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = _729 * 0.5;
        float _766 = _739 * 0.5;
        float _767 = _749 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _782 = (dot(vec3(_335, _336, _337), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _792 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3489 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_794 + 1.0))) + _799) * _762;
        float _809 = _730 * 0.5;
        float _810 = _740 * 0.5;
        float _811 = _750 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_335, _336, _337), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3522 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_836 + 1.0))) + _841) * _763;
        float _851 = _731 * 0.5;
        float _852 = _741 * 0.5;
        float _853 = _751 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_335, _336, _337), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3555 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_878 + 1.0))) + _883) * _764;
        _900 = _731;
        _902 = _730;
        _903 = _729;
        _904 = _741;
        _905 = _740;
        _906 = _739;
        _907 = _751;
        _908 = _750;
        _909 = _749;
        _910 = _764;
        _911 = _763;
        _912 = _762;
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
    }
    else
    {
        _900 = _901;
        _902 = _901;
        _903 = _901;
        _904 = _901;
        _905 = _901;
        _906 = _901;
        _907 = _901;
        _908 = _901;
        _909 = _901;
        _910 = _901;
        _911 = _901;
        _912 = _901;
        _913 = 0.0;
        _914 = 0.0;
        _915 = 0.0;
    }
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _944 = fma(_571, cbModelParam._m0[30u].z, fma(_567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _563));
        float _948 = fma(_571, cbModelParam._m0[31u].z, fma(_567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _563));
        float _952 = fma(_571, cbModelParam._m0[32u].z, fma(_567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _563));
        float _975 = _563 + _335;
        float _976 = _567 + _336;
        float _977 = _571 + _337;
        float _987 = fma(_977, cbModelParam._m0[30u].z, fma(_976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975)) - _944;
        float _988 = fma(_977, cbModelParam._m0[31u].z, fma(_976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975)) - _948;
        float _989 = fma(_977, cbModelParam._m0[32u].z, fma(_976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975)) - _952;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_944 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_948 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[35u].z) + ((((((_952 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1043 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1010.x + (-0.5));
        float _1045 = _1043 * (_1010.y + (-0.5));
        float _1046 = _1043 * (_1010.z + (-0.5));
        float _1053 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1017.x + (-0.5));
        float _1055 = _1053 * (_1017.y + (-0.5));
        float _1056 = _1053 * (_1017.z + (-0.5));
        float _1063 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1024.x + (-0.5));
        float _1065 = _1063 * (_1024.y + (-0.5));
        float _1066 = _1063 * (_1024.z + (-0.5));
        float _1073 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1031.x + (-0.5));
        float _1075 = _1073 * (_1031.y + (-0.5));
        float _1076 = _1073 * (_1031.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_335, _336, _337), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3618 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1107 + 1.0))) + _1112) * _1077;
        float _1122 = _1045 * 0.5;
        float _1123 = _1055 * 0.5;
        float _1124 = _1065 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_335, _336, _337), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3651 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1149 + 1.0))) + _1154) * _1078;
        float _1164 = _1046 * 0.5;
        float _1165 = _1056 * 0.5;
        float _1166 = _1066 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_335, _336, _337), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3684 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1191 + 1.0))) + _1196) * _1079;
        _1213 = _1046;
        _1214 = _1045;
        _1215 = _1044;
        _1216 = _1056;
        _1217 = _1055;
        _1218 = _1054;
        _1219 = _1066;
        _1220 = _1065;
        _1221 = _1064;
        _1222 = _1079;
        _1223 = _1078;
        _1224 = _1077;
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _901;
        _1214 = _901;
        _1215 = _901;
        _1216 = _901;
        _1217 = _901;
        _1218 = _901;
        _1219 = _901;
        _1220 = _901;
        _1221 = _901;
        _1222 = _901;
        _1223 = _901;
        _1224 = _901;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1260 = fma(_1239, cbSceneParam._m0[89u].z, fma(_1238, cbSceneParam._m0[89u].y, _1237 * cbSceneParam._m0[89u].x));
    float _1263 = fma(_1239, cbSceneParam._m0[90u].z, fma(_1238, cbSceneParam._m0[90u].y, _1237 * cbSceneParam._m0[90u].x));
    float _1266 = fma(_1239, cbSceneParam._m0[91u].z, fma(_1238, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1237));
    float _1281 = _511 * 0.5;
    float _1282 = _512 * 0.5;
    float _1283 = _513 * 0.5;
    float _1284 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1287 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1290 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1324;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1297 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_900, _904, _907, _910));
        float _1301 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_902, _905, _908, _911));
        float _1305 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_903, _906, _909, _912));
        float _1312 = dot(vec4(cbModelParam._m0[39u]), vec4(_1281, _1282, _1283, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1335;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1326 = dot(vec4(cbModelParam._m0[40u]), vec4(_1281, _1282, _1283, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1326) ? 0.0 : (isnan(0.0) ? _1326 : max(0.0, _1326))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1339 = (_1335 * cbModelParam._m0[1u].x) + (_1324 * (1.0 - cbModelParam._m0[1u].x));
    float _1349 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1350 = isnan(_1349) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1349 : min(cbModelParam._m0[25u].z, _1349));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1399 = fma(_571, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563)) + cbModelParam._m0[13u].w;
        float _1403 = fma(_571, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563)) + cbModelParam._m0[14u].w;
        float _1407 = fma(_571, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563)) + cbModelParam._m0[15u].w;
        float _1410 = fma(_513, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511));
        float _1413 = fma(_513, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511));
        float _1416 = fma(_513, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511));
        float _1444;
        if (_1410 > 0.0)
        {
            _1444 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1444 = frontier_phi_17_15_ladder;
        }
        float _1671;
        if (_1413 > 0.0)
        {
            _1671 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1671 = frontier_phi_26_22_ladder;
        }
        float _1917;
        if (_1416 > 0.0)
        {
            _1917 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1917 = frontier_phi_38_33_ladder;
        }
        float _1919 = isnan(_1671) ? _1444 : (isnan(_1444) ? _1671 : min(_1444, _1671));
        float _1920 = isnan(_1917) ? _1919 : (isnan(_1919) ? _1917 : min(_1919, _1917));
        float _1924 = (_1920 * _1410) + _1399;
        float _1925 = (_1920 * _1413) + _1403;
        float _1926 = (_1920 * _1416) + _1407;
        float _1927 = _1920 * 9.9999997473787516355514526367188e-05;
        float _1929 = (-1.0) - _1927;
        float _1931 = _1927 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1926 > _1931) || ((_1926 < _1929) || ((_1925 > _1931) || ((_1925 < _1929) || ((_1924 < _1929) || (_1924 > _1931))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1926, cbModelParam._m0[9u].z, fma(_1925, cbModelParam._m0[9u].y, _1924 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1926, cbModelParam._m0[10u].z, fma(_1925, cbModelParam._m0[10u].y, _1924 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1926, cbModelParam._m0[11u].z, fma(_1925, cbModelParam._m0[11u].y, _1924 * cbModelParam._m0[11u].x))), _1350);
            frontier_phi_16_38_ladder = _2050.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2050.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2050.x * cbModelParam._m0[1u].y;
        }
        _1432 = frontier_phi_16_38_ladder_2;
        _1434 = frontier_phi_16_38_ladder_1;
        _1436 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_511, _512, _513), _1350);
        _1432 = _1420.x * cbModelParam._m0[1u].y;
        _1434 = _1420.y * cbModelParam._m0[1u].y;
        _1436 = _1420.z * cbModelParam._m0[1u].y;
    }
    float _1440 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1440 : min(cbModelParam._m0[25u].w, _1440));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1498 = fma(_571, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563)) + cbModelParam._m0[21u].w;
        float _1502 = fma(_571, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563)) + cbModelParam._m0[22u].w;
        float _1506 = fma(_571, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563)) + cbModelParam._m0[23u].w;
        float _1509 = fma(_513, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511));
        float _1512 = fma(_513, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511));
        float _1515 = fma(_513, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511));
        float _1676;
        if (_1509 > 0.0)
        {
            _1676 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1676 = frontier_phi_28_24_ladder;
        }
        float _1944;
        if (_1512 > 0.0)
        {
            _1944 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1944 = frontier_phi_40_35_ladder;
        }
        float _2149;
        if (_1515 > 0.0)
        {
            _2149 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2149 = frontier_phi_49_46_ladder;
        }
        float _2151 = isnan(_1944) ? _1676 : (isnan(_1676) ? _1944 : min(_1676, _1944));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1509) + _1498;
        float _2157 = (_2152 * _1512) + _1502;
        float _2158 = (_2152 * _1515) + _1506;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2159;
        float _2162 = _2159 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2158 > _2162) || ((_2158 < _2160) || ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 < _2160) || (_2156 > _2162))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2158, cbModelParam._m0[17u].z, fma(_2157, cbModelParam._m0[17u].y, _2156 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2158, cbModelParam._m0[18u].z, fma(_2157, cbModelParam._m0[18u].y, _2156 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2158, cbModelParam._m0[19u].z, fma(_2157, cbModelParam._m0[19u].y, _2156 * cbModelParam._m0[19u].x))), _1441);
            frontier_phi_25_49_ladder = _2359.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2359.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2359.x * cbModelParam._m0[1u].z;
        }
        _1534 = frontier_phi_25_49_ladder_2;
        _1536 = frontier_phi_25_49_ladder_1;
        _1538 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_511, _512, _513), _1441);
        _1534 = _1518.x * cbModelParam._m0[1u].z;
        _1536 = _1518.y * cbModelParam._m0[1u].z;
        _1538 = _1518.z * cbModelParam._m0[1u].z;
    }
    float _1550 = ((((1.0 - _531) * ((_519 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_531 * _519)) * _503;
    float _1551 = _1550 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1552 = _1550 * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1553 = _1550 * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1556 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, _1551 * cbSceneParam._m0[91u].x));
    vec4 _1570 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_437, _438));
    float _1572 = _1570.w;
    float _1584 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1572);
    float _1585 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1572);
    float _1586 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1572);
    uvec4 _1590 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1592 = _1590.x * 14u;
    uint _1593 = _1592 + 13u;
    float _1600 = _503 + (-1.0);
    float _1605 = (cbLight._m0[_1593].x * _1600) + 1.0;
    float _1606 = (cbLight._m0[_1593].y * _1600) + 1.0;
    float _1607 = (cbLight._m0[_1593].z * _1600) + 1.0;
    float _1608 = (cbLight._m0[_1593].w * _1600) + 1.0;
    uint _1609 = _1592 + 5u;
    float _1615 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
    uint _1619 = _1592 + 4u;
    float _1629 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
    uint _1633 = _1592 | 1u;
    float _1644 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_335, _336, _337));
    float _1647 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_335, _336, _337));
    float _3820 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _3831 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1652 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1654 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1661 = ((cbLight._m0[_1609].x * _1615) * _1654) + (((cbLight._m0[_1619].x * _1584) * _1629) * _1652);
    float _1662 = ((_1615 * cbLight._m0[_1609].y) * _1654) + (((cbLight._m0[_1619].y * _1585) * _1629) * _1652);
    float _1663 = ((_1615 * cbLight._m0[_1609].z) * _1654) + (((cbLight._m0[_1619].z * _1586) * _1629) * _1652);
    uvec4 _1668 = floatBitsToUint(cbLight._m0[_1592 + 12u]);
    bool _1670 = _1668.x == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1670)
    {
        _1681 = _1661;
        _1683 = _1662;
        _1685 = _1663;
    }
    else
    {
        uint _1689 = _1592 + 6u;
        float _1705 = (dot(vec3(cbLight._m0[_1592 + 2u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _1706 = _1705 * _1705;
        float _3842 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1708 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _1681 = (((cbLight._m0[_1689].x * 0.3183098733425140380859375) * _1707) * _1708) + _1661;
        _1683 = (((cbLight._m0[_1689].y * 0.3183098733425140380859375) * _1707) * _1708) + _1662;
        _1685 = (((cbLight._m0[_1689].z * 0.3183098733425140380859375) * _1707) * _1708) + _1663;
    }
    bool _1688 = _1668.y == 0u;
    float _1726;
    float _1728;
    float _1730;
    if (_1688)
    {
        _1726 = _1681;
        _1728 = _1683;
        _1730 = _1685;
    }
    else
    {
        uint _1888 = _1592 + 7u;
        float _1904 = (dot(vec3(cbLight._m0[_1592 + 3u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3858 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1907 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1726 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1681;
        _1728 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1683;
        _1730 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1685;
    }
    uint _1733 = _1592 + 8u;
    float _1746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1592].w)) * _339) * 0.949999988079071044921875);
    float _1747 = _1746 * _1746;
    float _1748 = cbLight._m0[_1592].x + _416;
    float _1749 = cbLight._m0[_1592].y + _417;
    float _1750 = cbLight._m0[_1592].z + _418;
    float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
    float _1755 = _1754 * _1748;
    float _1756 = _1754 * _1749;
    float _1757 = _1754 * _1750;
    float _1758 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1592].xyz));
    float _3874 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _1762 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1763 = dot(vec3(_335, _336, _337), vec3(_1755, _1756, _1757));
    float _3896 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1767 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_1755, _1756, _1757));
    float _3907 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1771 = _1747 * _1747;
    float _1775 = ((_1766 * _1766) * (_1771 + (-1.0))) + 1.0;
    float _1786 = (exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1787 = 1.0 - _1747;
    float _1798 = (0.5 / (((_1762 * ((_1761 * _1787) + _1747)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _1787) + _1747) * _1761))) * _1761;
    float _3918 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1800 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1771 / ((_1775 * _1775) * 3.141590118408203125));
    uint _1814 = _1592 + 9u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1633].w)) * _339) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1633].x + _416;
    float _1828 = cbLight._m0[_1633].y + _417;
    float _1829 = cbLight._m0[_1633].z + _418;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1633].xyz));
    float _3929 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1841 = dot(vec3(_335, _336, _337), vec3(_1834, _1835, _1836));
    float _3940 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1845 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_1834, _1835, _1836));
    float _3951 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1849 = _1826 * _1826;
    float _1853 = ((_1844 * _1844) * (_1849 + (-1.0))) + 1.0;
    float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1863 = 1.0 - _1826;
    float _1873 = (0.5 / (((_1762 * ((_1840 * _1863) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _1863) + _1826) * _1840))) * _1840;
    float _3962 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1849 / ((_1853 * _1853) * 3.141590118408203125));
    float _1885 = (((_1862 * cbLight._m0[_1814].x) * _1875) * _1615) + ((((cbLight._m0[_1733].x * _1584) * _1786) * _1800) * _1629);
    float _1886 = (((_1862 * cbLight._m0[_1814].y) * _1875) * _1615) + ((((cbLight._m0[_1733].y * _1585) * _1786) * _1800) * _1629);
    float _1887 = (((_1862 * cbLight._m0[_1814].z) * _1875) * _1615) + ((((cbLight._m0[_1733].z * _1586) * _1786) * _1800) * _1629);
    float _1949;
    float _1951;
    float _1953;
    if (_1670)
    {
        _1949 = _1885;
        _1951 = _1886;
        _1953 = _1887;
    }
    else
    {
        uint _1955 = _1592 + 2u;
        uint _1959 = _1592 + 10u;
        float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _339) * 0.949999988079071044921875);
        float _1974 = _1973 * _1973;
        float _1975 = cbLight._m0[_1955].x + _416;
        float _1976 = cbLight._m0[_1955].y + _417;
        float _1977 = cbLight._m0[_1955].z + _418;
        float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
        float _1982 = _1981 * _1975;
        float _1983 = _1981 * _1976;
        float _1984 = _1981 * _1977;
        float _1985 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1955].xyz));
        float _3973 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1989 = dot(vec3(_335, _336, _337), vec3(_1982, _1983, _1984));
        float _3984 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1993 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_1982, _1983, _1984));
        float _3995 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1997 = _1974 * _1974;
        float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
        float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2011 = 1.0 - _1974;
        float _2021 = (0.5 / (((_1762 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _2011) + _1974) * _1988))) * _1988;
        float _4006 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2023 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
        float _2024 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _1949 = (((_2010 * cbLight._m0[_1959].x) * _2023) * _2024) + _1885;
        _1951 = (((_2010 * cbLight._m0[_1959].y) * _2023) * _2024) + _1886;
        _1953 = (((_2010 * cbLight._m0[_1959].z) * _2023) * _2024) + _1887;
    }
    float _2059;
    float _2061;
    float _2063;
    if (_1688)
    {
        _2059 = _1949;
        _2061 = _1951;
        _2063 = _1953;
    }
    else
    {
        uint _2070 = _1592 + 3u;
        uint _2074 = _1592 + 11u;
        float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _339) * 0.949999988079071044921875);
        float _2089 = _2088 * _2088;
        float _2090 = cbLight._m0[_2070].x + _416;
        float _2091 = cbLight._m0[_2070].y + _417;
        float _2092 = cbLight._m0[_2070].z + _418;
        float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
        float _2097 = _2096 * _2090;
        float _2098 = _2096 * _2091;
        float _2099 = _2096 * _2092;
        float _2100 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_2070].xyz));
        float _4022 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2104 = dot(vec3(_335, _336, _337), vec3(_2097, _2098, _2099));
        float _4033 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2108 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2097, _2098, _2099));
        float _4044 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2112 = _2089 * _2089;
        float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
        float _2125 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2126 = 1.0 - _2089;
        float _2136 = (0.5 / (((_1762 * ((_2103 * _2126) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _2126) + _2089) * _2103))) * _2103;
        float _4055 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _2059 = (((_2125 * cbLight._m0[_2074].x) * _2138) * _2139) + _1949;
        _2061 = (((_2125 * cbLight._m0[_2074].y) * _2138) * _2139) + _1951;
        _2063 = (((_2125 * cbLight._m0[_2074].z) * _2138) * _2139) + _1953;
    }
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    if (_1590.y == 0u)
    {
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2214;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2214;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2214;
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.x;
        uint _2241 = uint((float(_2229.y) * floor(float(uint(cbSceneParam._m0[85u].y * _438) / _2230))) + floor(float(uint(cbSceneParam._m0[85u].x * _437) / _2230)));
        float _2251 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2252 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        uint _2255 = uint(isnan(14.0) ? _2252 : (isnan(_2252) ? 14.0 : min(_2252, 14.0)));
        uvec4 _2260 = texelFetch(g_lightClusterGridBuffer, int(((_2255 << 2u) + (_2241 << 6u)) >> 2u));
        uint _2261 = _2260.x;
        uint _2262 = _2229.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2262 >> 4u) & 15u)) + 4294967295u) & _2261) == 0u) || ((_2262 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            uint _2523 = 0u;
            uint _2532;
            bool _2533;
            for (;;)
            {
                _2532 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                _2533 = _2532 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2533)
                {
                    frontier_phi_66_pred = _2517;
                    frontier_phi_66_pred_1 = _2522;
                    frontier_phi_66_pred_2 = _2521;
                    frontier_phi_66_pred_3 = _2520;
                    frontier_phi_66_pred_4 = _2519;
                    frontier_phi_66_pred_5 = _2518;
                }
                else
                {
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    uint _2668;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2532;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    for (;;)
                    {
                        uint _2672 = uint(findLSB(_2668)) + (_2523 << 5u);
                        uint _2669 = (_2668 + 4294967295u) & _2668;
                        uint _2674 = _2672 * 48u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2694 = (_2672 * 48u) + 4u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2713 = (_2672 * 48u) + 8u;
                        vec3 _2724 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x));
                        float _2728 = _2688.x - _2215;
                        float _2729 = _2688.y - _2216;
                        float _2730 = _2688.z - _2217;
                        float _2731 = dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730));
                        float _2734 = inversesqrt(_2731);
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2738 = dot(vec3(_458, _461, _464), vec3(_2735, _2736, _2737));
                        float _2743 = 1.0 - (_2731 * _2688.w);
                        float _4081 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2745 = sqrt(_2731) * _2707.w;
                        float _2748 = 1.39999997615814208984375 / (_2745 + 1.39999997615814208984375);
                        float _2749 = _2748 * _2748;
                        float _2752 = ((1.0 - _2749) * _2738) + _2749;
                        float _2755 = _2745 * _2745;
                        float _2759 = ((isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))) * _2744) / ((_2755 * 0.699999988079071044921875) + 1.0);
                        float _2763 = (-0.0) - _2215;
                        float _2764 = (-0.0) - _2216;
                        float _2765 = (-0.0) - _2217;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2780 = exp2(log2(1.0 / ((_2755 * 3.5) + 5.0)) * 0.25);
                        float _2781 = 1.0 - _519;
                        float _2788 = sqrt(1.0 - ((1.0 - (_2781 * _2781)) * (1.0 - (_2780 * _2780))));
                        float _2789 = _2788 * _2788;
                        float _2790 = _2789 * _2789;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
                        float _2801 = dot(vec3(_458, _461, _464), vec3(_2770, _2771, _2772));
                        float _4097 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2804 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2805 = dot(vec3(_458, _461, _464), vec3(_2797 * _2791, _2797 * _2792, _2797 * _2793));
                        float _4108 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2808 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2812 = ((_2808 * _2808) * (_2790 + (-1.0))) + 1.0;
                        float _2813 = _2748 * _2789;
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * _2738) + _2814;
                        float _4119 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2818 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2819 = 1.0 - _2789;
                        float _2829 = (0.5 / (((_2818 * ((_2804 * _2819) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2818 * _2819) + _2789) * _2804))) * _2818;
                        float _4130 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2840 = (((_2790 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2812 * _2812) * ((_2755 * 2.1991131305694580078125) + 3.141590118408203125))) * _2744;
                        _2592 = (_2759 * _2707.x) + _2665;
                        _2593 = (_2759 * _2707.y) + _2666;
                        _2594 = (_2759 * _2707.z) + _2667;
                        _2589 = (_2840 * _2724.x) + _2662;
                        _2590 = (_2840 * _2724.y) + _2663;
                        _2591 = (_2840 * _2724.z) + _2664;
                        if (_2669 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2669;
                        }
                    }
                    frontier_phi_66_pred = _2589;
                    frontier_phi_66_pred_1 = _2594;
                    frontier_phi_66_pred_2 = _2593;
                    frontier_phi_66_pred_3 = _2592;
                    frontier_phi_66_pred_4 = _2591;
                    frontier_phi_66_pred_5 = _2590;
                }
                _2365 = frontier_phi_66_pred;
                _2375 = frontier_phi_66_pred_1;
                _2373 = frontier_phi_66_pred_2;
                _2371 = frontier_phi_66_pred_3;
                _2369 = frontier_phi_66_pred_4;
                _2367 = frontier_phi_66_pred_5;
                uint _2524 = _2523 + 1u;
                if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2517 = _2365;
                    _2518 = _2367;
                    _2519 = _2369;
                    _2520 = _2371;
                    _2521 = _2373;
                    _2522 = _2375;
                    _2523 = _2524;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((4294967295u << _2381) & _2261) == 0u)
        {
            _2485 = _2364;
            _2487 = _2366;
            _2489 = _2368;
            _2491 = _2370;
            _2493 = _2372;
            _2495 = _2374;
        }
        else
        {
            float _2510 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _2511 = _2510 * _2215;
            float _2512 = _2510 * _2216;
            float _2513 = _2510 * _2217;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2645 = _2364;
                float _2646 = _2366;
                float _2647 = _2368;
                float _2648 = _2370;
                float _2649 = _2372;
                float _2650 = _2374;
                uint _2651 = _2381;
                uint _2660;
                bool _2661;
                for (;;)
                {
                    _2660 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2651 << 2u)) >> 2u)).x;
                    _2661 = _2660 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2661)
                    {
                        frontier_phi_77_pred = _2650;
                        frontier_phi_77_pred_1 = _2649;
                        frontier_phi_77_pred_2 = _2648;
                        frontier_phi_77_pred_3 = _2647;
                        frontier_phi_77_pred_4 = _2646;
                        frontier_phi_77_pred_5 = _2645;
                    }
                    else
                    {
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        uint _2873 = _2660;
                        uint _2874;
                        vec4 _2899;
                        float _2900;
                        vec4 _2915;
                        vec3 _2927;
                        vec4 _2943;
                        vec4 _2959;
                        float _3006;
                        bool _3007;
                        for (;;)
                        {
                            uint _2884 = ((_2651 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2873));
                            _2874 = (_2873 + 4294967295u) & _2873;
                            uint _2886 = _2884 * 40u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2900 = _2899.w;
                            uint _2902 = (_2884 * 40u) + 4u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2917 = (_2884 * 40u) + 8u;
                            _2927 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x));
                            uint _2930 = (_2884 * 40u) + 16u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2946 = (_2884 * 40u) + 20u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2962 = (_2884 * 40u) + 24u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2981 = (_2884 * 40u) + 28u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _3006 = fma(_2217, _2994.z, fma(_2216, _2994.y, _2994.x * _2215)) + _2994.w;
                            _3007 = !((fma(_2217, _2975.z, fma(_2216, _2975.y, _2975.x * _2215)) + _2975.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3007)
                            {
                                float _3034 = _2899.x - _2215;
                                float _3035 = _2899.y - _2216;
                                float _3036 = _2899.z - _2217;
                                float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                                float _3040 = inversesqrt(_3037);
                                float _3041 = _3040 * _3034;
                                float _3042 = _3040 * _3035;
                                float _3043 = _3040 * _3036;
                                float _3047 = 1.0 - (_3037 / (_2900 * _2900));
                                float _4141 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3052 = sqrt(_3037) * _2915.w;
                                float _3054 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                                float _3055 = _3054 * _3054;
                                float _3058 = ((1.0 - _3055) * dot(vec3(_3041, _3042, _3043), vec3(_458, _461, _464))) + _3055;
                                float _3061 = _3052 * _3052;
                                float _3065 = (fma(_2217, _2943.z, fma(_2216, _2943.y, _2943.x * _2215)) + _2943.w) / _3006;
                                float _3066 = (fma(_2217, _2959.z, fma(_2216, _2959.y, _2959.x * _2215)) + _2959.w) / _3006;
                                float _3070 = 1.0 - dot(vec2(_3065, _3066), vec2(_3065, _3066));
                                float _4157 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3072 = _3071 * (((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3048) / ((_3061 * 0.699999988079071044921875) + 1.0));
                                float _3084 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                                float _3085 = 1.0 - _519;
                                float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                                float _3093 = _3092 * _3092;
                                float _3094 = _3093 * _3093;
                                float _3095 = _3041 - _2511;
                                float _3096 = _3042 - _2512;
                                float _3097 = _3043 - _2513;
                                float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                                float _3105 = dot(vec3(_458, _461, _464), vec3((-0.0) - _2511, (-0.0) - _2512, (-0.0) - _2513));
                                float _4168 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3109 = dot(vec3(_458, _461, _464), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                                float _4179 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                                float _3117 = _3054 * _3093;
                                float _3118 = _3117 * _3117;
                                float _3124 = ((1.0 - _3118) * dot(vec3(_458, _461, _464), vec3(_3041, _3042, _3043))) + _3118;
                                float _4190 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3126 = 1.0 - _3093;
                                float _3136 = (0.5 / (((_3125 * ((_3108 * _3126) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3093) * _3108))) * _3125;
                                float _4201 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3146 = (_3071 * _3048) * (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3116 * _3116) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3072 * _2915.y;
                                frontier_phi_83_pred_1 = _3072 * _2915.x;
                                frontier_phi_83_pred_2 = _3146 * _2927.z;
                                frontier_phi_83_pred_3 = _3146 * _2927.y;
                                frontier_phi_83_pred_4 = _3146 * _2927.x;
                                frontier_phi_83_pred_5 = _3072 * _2915.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3154 = frontier_phi_83_pred;
                            _3153 = frontier_phi_83_pred_1;
                            _3152 = frontier_phi_83_pred_2;
                            _3151 = frontier_phi_83_pred_3;
                            _3150 = frontier_phi_83_pred_4;
                            _3155 = frontier_phi_83_pred_5;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            if (_2874 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2874;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2859;
                        frontier_phi_77_pred_1 = _2858;
                        frontier_phi_77_pred_2 = _2857;
                        frontier_phi_77_pred_3 = _2856;
                        frontier_phi_77_pred_4 = _2855;
                        frontier_phi_77_pred_5 = _2854;
                    }
                    _2496 = frontier_phi_77_pred;
                    _2494 = frontier_phi_77_pred_1;
                    _2492 = frontier_phi_77_pred_2;
                    _2490 = frontier_phi_77_pred_3;
                    _2488 = frontier_phi_77_pred_4;
                    _2486 = frontier_phi_77_pred_5;
                    uint _2652 = _2651 + 1u;
                    if (_2652 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2645 = _2486;
                        _2646 = _2488;
                        _2647 = _2490;
                        _2648 = _2492;
                        _2649 = _2494;
                        _2650 = _2496;
                        _2651 = _2652;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2490;
                frontier_phi_58_59_ladder_1 = _2496;
                frontier_phi_58_59_ladder_2 = _2494;
                frontier_phi_58_59_ladder_3 = _2492;
                frontier_phi_58_59_ladder_4 = _2488;
                frontier_phi_58_59_ladder_5 = _2486;
            }
            else
            {
                frontier_phi_58_59_ladder = _2368;
                frontier_phi_58_59_ladder_1 = _2374;
                frontier_phi_58_59_ladder_2 = _2372;
                frontier_phi_58_59_ladder_3 = _2370;
                frontier_phi_58_59_ladder_4 = _2366;
                frontier_phi_58_59_ladder_5 = _2364;
            }
            _2485 = frontier_phi_58_59_ladder_5;
            _2487 = frontier_phi_58_59_ladder_4;
            _2489 = frontier_phi_58_59_ladder;
            _2491 = frontier_phi_58_59_ladder_3;
            _2493 = frontier_phi_58_59_ladder_2;
            _2495 = frontier_phi_58_59_ladder_1;
        }
        float _2500 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
        _2274 = (_2500 * _2491) + _1726;
        _2276 = (_2500 * _2493) + _1728;
        _2278 = (_2500 * _2495) + _1730;
        _2280 = ((_2485 * 0.039999999105930328369140625) * _2500) + _2059;
        _2282 = ((_2487 * 0.039999999105930328369140625) * _2500) + _2061;
        _2284 = ((_2489 * 0.039999999105930328369140625) * _2500) + _2063;
    }
    else
    {
        _2274 = _1726;
        _2276 = _1728;
        _2278 = _1730;
        _2280 = _2059;
        _2282 = _2061;
        _2284 = _2063;
    }
    float _4217 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4228 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4239 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4250 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _2302 = ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2274 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _503))) + ((_2280 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    float _2303 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2276 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _503))) + ((_2282 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    float _2304 = ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2278 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _503))) + ((_2284 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    float _2309 = cbInstanceData._m0[_477 + 6u].w * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)));
    float _2314 = _437 / cbSceneParam._m0[86u].x;
    float _2315 = _438 / cbSceneParam._m0[86u].y;
    vec4 _2329 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, (log2((isnan(cbSceneParam._m0[77u].w) ? _358 : (isnan(_358) ? cbSceneParam._m0[77u].w : min(_358, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2331 = _2329.x;
    float _2332 = _2329.y;
    float _2333 = _2329.z;
    float _2334 = _2329.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_358 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_358) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _358 : min(cbSceneParam._m0[80u].w, _358));
        float _2390 = _2389 / _358;
        float _2401 = _2390 * _409;
        float _2402 = _410 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2405 = _2390 * _411;
        float _2407 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2408 = _2407 + cbSceneParam._m0[79u].w;
        float _2409 = cbSceneParam._m0[79u].w - _2402;
        float _2415 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2405 * _2405));
        float _2418 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2415;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2602;
        if (abs((_2403 - _2407) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2602 = ((((_2408 > 0.0) ? exp2(_2423 * _2408) : (2.0 - exp2(_2425 * _2408))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2418;
        }
        else
        {
            float _2546 = 1.0 / cbSceneParam._m0[80u].x;
            float _2547 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : max(_2408, _2409));
            float _2548 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : min(_2408, _2409));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            _2602 = ((abs(_2415 / _2403) * cbSceneParam._m0[80u].y) * ((((_2557 - _2558) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))))) * _2546)) - ((exp2(_2425 * _2557) - exp2(_2425 * _2558)) * _2546))) + (_2418 * cbSceneParam._m0[80u].z);
        }
        vec4 _2604 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, 1.0), 0.0);
        float _2613 = exp2((_2602 * (-1.44269502162933349609375)) * (1.0 - _2604.w));
        float _2614 = log2(_2613);
        float _2630 = log2(_2334);
        _2427 = (exp2(_2630 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].x)) * _2604.x) / cbSceneParam._m0[78u].x)) + _2331;
        _2429 = (exp2(_2630 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].y)) * _2604.y) / cbSceneParam._m0[78u].y)) + _2332;
        _2431 = (exp2(_2630 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].z)) * _2604.z) / cbSceneParam._m0[78u].z)) + _2333;
        _2433 = _2613 * _2334;
    }
    else
    {
        _2427 = _2331;
        _2429 = _2332;
        _2431 = _2333;
        _2433 = _2334;
    }
    bool _2640;
    vec4 _2443;
    vec4 _2465;
    float _2467;
    float _2471;
    float _2472;
    float _2473;
    float _2474;
    bool _2484;
    for (;;)
    {
        _2443 = cbMatDynParam._m0[0u];
        float _2445 = roundEven(_2443.y);
        bool _2446 = _2445 == 3.0;
        float _2447 = log2(_2433);
        float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * _2302;
        float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * _2303;
        float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * _2304;
        float _2463 = _425 + (-0.5);
        _2465 = cbMtdParam._m0[1u];
        _2467 = _2465.y * _2463;
        float _2470 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2471 = _2470 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
        _2472 = _2470 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
        _2473 = _2470 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
        _2474 = _2463 * 0.999000012874603271484375;
        _2484 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2484)
        {
            if ((cbInstanceData._m0[_477 + 7u].x + _2474) < 0.5)
            {
                _2640 = true;
                break;
            }
        }
        uint _2581 = _479 + uint(_2443.w);
        if ((cbInstanceData._m0[_2581].w < 1.0) && ((cbInstanceData._m0[_2581].w + _2474) < 0.5))
        {
            _2640 = true;
            break;
        }
        if ((_2467 + _294) < _2465.x)
        {
            _2640 = true;
            break;
        }
        _2640 = false;
        break;
    }
    float _2845;
    if (_2640)
    {
        discard_state = true;
        _2845 = 0.0;
    }
    else
    {
        _2845 = _2309;
    }
    SV_Target.x = _2471;
    SV_Target.y = _2472;
    SV_Target.z = _2473;
    SV_Target.w = _2845;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2309;
    discard_exit();
}


