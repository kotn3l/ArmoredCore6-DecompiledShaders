#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 6) in vec4 TEXCOORD_8;
layout(location = 7) in vec4 TEXCOORD_9;
layout(location = 8) in vec3 TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _148 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _149 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w)).w * TEXCOORD.x;
    float _160 = (_149 < 0.5) ? 0.0 : 1.0;
    float _170 = (((((_149 * 2.0) * (1.0 - _160)) * _148) + (-0.5)) + ((1.0 - (((1.0 - _149) * 2.0) * (1.0 - _148))) * _160)) * cbMtdParam._m0[10u].z;
    precise float _174 = _170 * ((_170 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _175 = cbMtdParam._m0[10u].y + _174;
    float _388 = isnan(0.0) ? _175 : (isnan(_175) ? 0.0 : max(_175, 0.0));
    float _177 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
    float _182 = (_177 * _177) * (3.0 - (_177 * 2.0));
    uint _184 = uint(roundEven(NORMAL.w));
    float _198 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? TEXCOORD_8.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * TEXCOORD_8.z));
    float _240 = fma(TEXCOORD_8.w, cbSceneParam._m0[11u].w, fma(TEXCOORD_8.z, cbSceneParam._m0[11u].z, fma(TEXCOORD_8.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * TEXCOORD_8.x)));
    float _250 = cbSceneParam._m0[71u].x - (fma(TEXCOORD_8.w, cbSceneParam._m0[8u].w, fma(TEXCOORD_8.z, cbSceneParam._m0[8u].z, fma(TEXCOORD_8.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * TEXCOORD_8.x))) / _240);
    float _251 = cbSceneParam._m0[71u].y - (fma(TEXCOORD_8.w, cbSceneParam._m0[9u].w, fma(TEXCOORD_8.z, cbSceneParam._m0[9u].z, fma(TEXCOORD_8.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * TEXCOORD_8.x))) / _240);
    float _252 = cbSceneParam._m0[71u].z - (fma(TEXCOORD_8.w, cbSceneParam._m0[10u].w, fma(TEXCOORD_8.z, cbSceneParam._m0[10u].z, fma(TEXCOORD_8.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * TEXCOORD_8.x))) / _240);
    vec4 _257 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _259 = _257.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _294 = sqrt(((_250 * _250) + (_251 * _251)) + (_252 * _252));
        float _301 = (cbMatDynParam._m0[5u].x * _294) + cbMatDynParam._m0[5u].y;
        float _399 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
        float _302 = isnan(1.0) ? _399 : (isnan(_399) ? 1.0 : min(_399, 1.0));
        float _306 = (cbMatDynParam._m0[5u].z * _294) + cbMatDynParam._m0[5u].w;
        float _410 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0))) - _302)) + _302) < ((_259 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _338;
    float _270;
    float _271;
    vec4 _274;
    float _276;
    float _277;
    bool _288;
    for (;;)
    {
        _270 = (TEXCOORD_8.x / TEXCOORD_8.w) - (TEXCOORD_9.x / TEXCOORD_9.w);
        _271 = (TEXCOORD_8.y / TEXCOORD_8.w) - (TEXCOORD_9.y / TEXCOORD_9.w);
        float _272 = _259 + (-0.5);
        _274 = cbMtdParam._m0[1u];
        _276 = _274.y * _272;
        _277 = _272 * 0.999000012874603271484375;
        _288 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_288)
        {
            if ((cbInstanceData._m0[(_184 * 13u) + 7u].x + _277) < 0.5)
            {
                _338 = true;
                break;
            }
        }
        if ((cbInstanceData._m0[6u].w < 1.0) && ((cbInstanceData._m0[6u].w + _277) < 0.5))
        {
            _338 = true;
            break;
        }
        if ((_276 + _182) < _274.x)
        {
            _338 = true;
            break;
        }
        _338 = false;
        break;
    }
    if (_338)
    {
        discard_state = true;
    }
    SV_Target.x = ((cbModelParam._m0[0u].x * _270) * cbSceneParam._m0[70u].x) + cbSceneParam._m0[70u].y;
    SV_Target.y = ((cbModelParam._m0[0u].y * _271) * cbSceneParam._m0[70u].x) + cbSceneParam._m0[70u].y;
    SV_Target.z = _198 / (_198 + 10.0);
    SV_Target.w = 1.0;
    discard_exit();
}


