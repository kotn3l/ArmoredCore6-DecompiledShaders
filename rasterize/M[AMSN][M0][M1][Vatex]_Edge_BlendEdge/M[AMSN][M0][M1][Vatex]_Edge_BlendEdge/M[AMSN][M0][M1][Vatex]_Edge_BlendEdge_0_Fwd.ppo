#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _889;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    float _257 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _258 = _230.w * TEXCOORD.x;
    float _269 = (_258 < 0.5) ? 0.0 : 1.0;
    float _279 = (((((_258 * 2.0) * (1.0 - _269)) * _257) + (-0.5)) + ((1.0 - (((1.0 - _258) * 2.0) * (1.0 - _257))) * _269)) * cbMtdParam._m0[10u].z;
    precise float _283 = _279 * ((_279 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _284 = cbMtdParam._m0[10u].y + _283;
    float _3228 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _290 = (_285 * _285) * (3.0 - (_285 * 2.0));
    vec4 _302 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _304 = _302.x;
    vec4 _316 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _320 = _316.z;
    float _323 = (_316.x * 2.0) + (-1.0);
    float _325 = (_316.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3239 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))));
    float _334 = fma(_331, _200 * NORMAL.x, fma(_325, _207 * TANGENT.x, (_193 * _185) * _323));
    float _337 = fma(_331, _200 * NORMAL.y, fma(_325, _207 * TANGENT.y, (_193 * _186) * _323));
    float _340 = fma(_331, _200 * NORMAL.z, fma(_325, _207 * TANGENT.z, (_193 * _187) * _323));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    float _345 = _344 * _334;
    float _346 = _344 * _337;
    float _347 = _344 * _340;
    float _3250 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _348 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _349 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _3272 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3283 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3294 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3305 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _353 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _369 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _410 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _420 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _410);
    float _421 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _410);
    float _422 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _410);
    float _426 = inversesqrt(dot(vec3(_420, _421, _422), vec3(_420, _421, _422)));
    float _427 = _420 * _426;
    float _428 = _421 * _426;
    float _429 = _422 * _426;
    float _435 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _436 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _457 = fma(_347, cbSceneParam._m0[5u].z, fma(_346, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _345));
    float _460 = fma(_347, cbSceneParam._m0[6u].z, fma(_346, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _345));
    float _463 = fma(_347, cbSceneParam._m0[7u].z, fma(_346, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _345));
    uint _476 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = (_476 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _485 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_479].x;
    float _486 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_479].y;
    float _487 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_479].z;
    float _3316 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _491 = 1.0 - _353;
    float _492 = _488 * _491;
    float _493 = _489 * _491;
    float _494 = _490 * _491;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _353;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _353;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _353;
    float _502 = _499 + 0.039999999105930328369140625;
    float _504 = _500 + 0.039999999105930328369140625;
    float _505 = _501 + 0.039999999105930328369140625;
    vec4 _514 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _435, cbSceneParam._m0[86u].y * _436));
    float _517 = _514.x * TEXCOORD.y;
    float _518 = dot(vec3(_345, _346, _347), vec3(_427, _428, _429));
    float _521 = _518 * 2.0;
    float _525 = (_521 * _345) - _427;
    float _526 = (_521 * _346) - _428;
    float _527 = (_521 * _347) - _429;
    float _531 = abs(dot(vec3(_427, _428, _429), vec3(_345, _346, _347)));
    float _3349 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _533 = sqrt(_349);
    float _545 = exp2((_533 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_533 * 3.0));
    float _551 = (1.0 - _545) * ((_533 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _552 = _545 * _533;
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_588, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580));
        float _619 = fma(_588, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580));
        float _623 = fma(_588, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580));
        float _646 = _580 + _345;
        float _647 = _584 + _346;
        float _648 = _588 + _347;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _615;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _619;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _623;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_345, _346, _347), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3397 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_345, _346, _347), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3430 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_345, _346, _347), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3463 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _929 = fma(_588, cbModelParam._m0[30u].z, fma(_584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _580));
        float _933 = fma(_588, cbModelParam._m0[31u].z, fma(_584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _580));
        float _937 = fma(_588, cbModelParam._m0[32u].z, fma(_584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _580));
        float _960 = _580 + _345;
        float _961 = _584 + _346;
        float _962 = _588 + _347;
        float _972 = fma(_962, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960)) - _929;
        float _973 = fma(_962, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960)) - _933;
        float _974 = fma(_962, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960)) - _937;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_929 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_933 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[35u].z) + ((((((_937 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1028 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_995.x + (-0.5));
        float _1030 = _1028 * (_995.y + (-0.5));
        float _1031 = _1028 * (_995.z + (-0.5));
        float _1038 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1002.x + (-0.5));
        float _1040 = _1038 * (_1002.y + (-0.5));
        float _1041 = _1038 * (_1002.z + (-0.5));
        float _1048 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1009.x + (-0.5));
        float _1050 = _1048 * (_1009.y + (-0.5));
        float _1051 = _1048 * (_1009.z + (-0.5));
        float _1058 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1016.x + (-0.5));
        float _1060 = _1058 * (_1016.y + (-0.5));
        float _1061 = _1058 * (_1016.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_345, _346, _347), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3526 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1092 + 1.0))) + _1097) * _1062;
        float _1107 = _1030 * 0.5;
        float _1108 = _1040 * 0.5;
        float _1109 = _1050 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_345, _346, _347), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3559 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1134 + 1.0))) + _1139) * _1063;
        float _1149 = _1031 * 0.5;
        float _1150 = _1041 * 0.5;
        float _1151 = _1051 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_345, _346, _347), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3592 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1176 + 1.0))) + _1181) * _1064;
        _1198 = _1031;
        _1199 = _1030;
        _1200 = _1029;
        _1201 = _1041;
        _1202 = _1040;
        _1203 = _1039;
        _1204 = _1051;
        _1205 = _1050;
        _1206 = _1049;
        _1207 = _1064;
        _1208 = _1063;
        _1209 = _1062;
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _889;
        _1199 = _889;
        _1200 = _889;
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _901)) + _901;
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _902)) + _902;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1245 = fma(_1224, cbSceneParam._m0[89u].z, fma(_1223, cbSceneParam._m0[89u].y, _1222 * cbSceneParam._m0[89u].x));
    float _1248 = fma(_1224, cbSceneParam._m0[90u].z, fma(_1223, cbSceneParam._m0[90u].y, _1222 * cbSceneParam._m0[90u].x));
    float _1251 = fma(_1224, cbSceneParam._m0[91u].z, fma(_1223, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1222));
    float _1266 = _525 * 0.5;
    float _1267 = _526 * 0.5;
    float _1268 = _527 * 0.5;
    float _1269 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1272 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1275 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1309;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1282 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_888, _892, _895, _898));
        float _1286 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_890, _893, _896, _899));
        float _1290 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_891, _894, _897, _900));
        float _1297 = dot(vec4(cbModelParam._m0[39u]), vec4(_1266, _1267, _1268, 1.0));
        _1309 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1297) ? 0.0 : (isnan(0.0) ? _1297 : max(0.0, _1297))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1309 = 1.0;
    }
    float _1320;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1311 = dot(vec4(cbModelParam._m0[40u]), vec4(_1266, _1267, _1268, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1324 = (_1320 * cbModelParam._m0[1u].x) + (_1309 * (1.0 - cbModelParam._m0[1u].x));
    float _1334 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _349);
    float _1335 = isnan(_1334) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1334 : min(cbModelParam._m0[25u].z, _1334));
    float _1417;
    float _1419;
    float _1421;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1384 = fma(_588, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580)) + cbModelParam._m0[13u].w;
        float _1388 = fma(_588, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580)) + cbModelParam._m0[14u].w;
        float _1392 = fma(_588, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580)) + cbModelParam._m0[15u].w;
        float _1395 = fma(_527, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525));
        float _1398 = fma(_527, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525));
        float _1401 = fma(_527, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525));
        float _1429;
        if (_1395 > 0.0)
        {
            _1429 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1429 = frontier_phi_14_12_ladder;
        }
        float _1637;
        if (_1398 > 0.0)
        {
            _1637 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1637 = frontier_phi_23_19_ladder;
        }
        float _1891;
        if (_1401 > 0.0)
        {
            _1891 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1891 = frontier_phi_35_30_ladder;
        }
        float _1893 = isnan(_1637) ? _1429 : (isnan(_1429) ? _1637 : min(_1429, _1637));
        float _1894 = isnan(_1891) ? _1893 : (isnan(_1893) ? _1891 : min(_1893, _1891));
        float _1898 = (_1894 * _1395) + _1384;
        float _1899 = (_1894 * _1398) + _1388;
        float _1900 = (_1894 * _1401) + _1392;
        float _1901 = _1894 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1901;
        float _1905 = _1901 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 > _1905) || ((_1899 < _1903) || ((_1898 < _1903) || (_1898 > _1905))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1900, cbModelParam._m0[9u].z, fma(_1899, cbModelParam._m0[9u].y, _1898 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1900, cbModelParam._m0[10u].z, fma(_1899, cbModelParam._m0[10u].y, _1898 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1900, cbModelParam._m0[11u].z, fma(_1899, cbModelParam._m0[11u].y, _1898 * cbModelParam._m0[11u].x))), _1335);
            frontier_phi_13_35_ladder = _2028.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2028.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2028.x * cbModelParam._m0[1u].y;
        }
        _1417 = frontier_phi_13_35_ladder_2;
        _1419 = frontier_phi_13_35_ladder_1;
        _1421 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_525, _526, _527), _1335);
        _1417 = _1405.x * cbModelParam._m0[1u].y;
        _1419 = _1405.y * cbModelParam._m0[1u].y;
        _1421 = _1405.z * cbModelParam._m0[1u].y;
    }
    float _1425 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _349);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1425 : min(cbModelParam._m0[25u].w, _1425));
    float _1519;
    float _1521;
    float _1523;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1483 = fma(_588, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580)) + cbModelParam._m0[21u].w;
        float _1487 = fma(_588, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580)) + cbModelParam._m0[22u].w;
        float _1491 = fma(_588, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580)) + cbModelParam._m0[23u].w;
        float _1494 = fma(_527, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525));
        float _1497 = fma(_527, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525));
        float _1500 = fma(_527, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525));
        float _1642;
        if (_1494 > 0.0)
        {
            _1642 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1642 = frontier_phi_25_21_ladder;
        }
        float _1918;
        if (_1497 > 0.0)
        {
            _1918 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1918 = frontier_phi_37_32_ladder;
        }
        float _2131;
        if (_1500 > 0.0)
        {
            _2131 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2131 = frontier_phi_46_43_ladder;
        }
        float _2133 = isnan(_1918) ? _1642 : (isnan(_1642) ? _1918 : min(_1642, _1918));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1494) + _1483;
        float _2139 = (_2134 * _1497) + _1487;
        float _2140 = (_2134 * _1500) + _1491;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2141;
        float _2144 = _2141 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2140 > _2144) || ((_2140 < _2142) || ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 < _2142) || (_2138 > _2144))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2140, cbModelParam._m0[17u].z, fma(_2139, cbModelParam._m0[17u].y, _2138 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2140, cbModelParam._m0[18u].z, fma(_2139, cbModelParam._m0[18u].y, _2138 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2140, cbModelParam._m0[19u].z, fma(_2139, cbModelParam._m0[19u].y, _2138 * cbModelParam._m0[19u].x))), _1426);
            frontier_phi_22_46_ladder = _2341.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2341.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2341.x * cbModelParam._m0[1u].z;
        }
        _1519 = frontier_phi_22_46_ladder_2;
        _1521 = frontier_phi_22_46_ladder_1;
        _1523 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1503 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_525, _526, _527), _1426);
        _1519 = _1503.x * cbModelParam._m0[1u].z;
        _1521 = _1503.y * cbModelParam._m0[1u].z;
        _1523 = _1503.z * cbModelParam._m0[1u].z;
    }
    float _1536 = (((_551 * _502) + _552) * _517) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1538 = (((_551 * _504) + _552) * _517) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1540 = (((_551 * _505) + _552) * _517) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1543 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, _1536 * cbSceneParam._m0[91u].x));
    uvec4 _1559 = floatBitsToUint(cbInstanceData._m0[_476 + 5u]);
    uint _1561 = _1559.x * 14u;
    uint _1562 = _1561 + 13u;
    float _1569 = _517 + (-1.0);
    float _1574 = (cbLight._m0[_1562].x * _1569) + 1.0;
    float _1575 = (cbLight._m0[_1562].y * _1569) + 1.0;
    float _1576 = (cbLight._m0[_1562].z * _1569) + 1.0;
    float _1577 = (cbLight._m0[_1562].w * _1569) + 1.0;
    uint _1578 = _1561 + 5u;
    float _1584 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1588 = _1561 + 4u;
    float _1595 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
    uint _1599 = _1561 | 1u;
    float _1610 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_345, _346, _347));
    float _1613 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_345, _346, _347));
    float _3728 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _3739 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1618 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1620 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.3183098733425140380859375;
    float _1627 = ((cbLight._m0[_1578].x * _1584) * _1620) + ((cbLight._m0[_1588].x * _1595) * _1618);
    float _1628 = ((_1584 * cbLight._m0[_1578].y) * _1620) + ((_1595 * cbLight._m0[_1588].y) * _1618);
    float _1629 = ((_1584 * cbLight._m0[_1578].z) * _1620) + ((_1595 * cbLight._m0[_1588].z) * _1618);
    uvec4 _1634 = floatBitsToUint(cbLight._m0[_1561 + 12u]);
    bool _1636 = _1634.x == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1636)
    {
        _1647 = _1627;
        _1649 = _1628;
        _1651 = _1629;
    }
    else
    {
        uint _1655 = _1561 + 6u;
        float _1671 = (dot(vec3(cbLight._m0[_1561 + 2u].xyz), vec3(_345, _346, _347)) * 0.5) + 0.5;
        float _1672 = _1671 * _1671;
        float _3750 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1674 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _1647 = (((cbLight._m0[_1655].x * 0.3183098733425140380859375) * _1673) * _1674) + _1627;
        _1649 = (((cbLight._m0[_1655].y * 0.3183098733425140380859375) * _1673) * _1674) + _1628;
        _1651 = (((cbLight._m0[_1655].z * 0.3183098733425140380859375) * _1673) * _1674) + _1629;
    }
    bool _1654 = _1634.y == 0u;
    float _1692;
    float _1694;
    float _1696;
    if (_1654)
    {
        _1692 = _1647;
        _1694 = _1649;
        _1696 = _1651;
    }
    else
    {
        uint _1862 = _1561 + 7u;
        float _1878 = (dot(vec3(cbLight._m0[_1561 + 3u].xyz), vec3(_345, _346, _347)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _3766 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1881 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1692 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1647;
        _1694 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1649;
        _1696 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1651;
    }
    uint _1699 = _1561 + 8u;
    float _1712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1561].w)) * _349) * 0.949999988079071044921875);
    float _1713 = _1712 * _1712;
    float _1714 = cbLight._m0[_1561].x + _427;
    float _1715 = cbLight._m0[_1561].y + _428;
    float _1716 = cbLight._m0[_1561].z + _429;
    float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
    float _1721 = _1720 * _1714;
    float _1722 = _1720 * _1715;
    float _1723 = _1720 * _1716;
    float _1724 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1561].xyz));
    float _3782 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _1728 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1729 = dot(vec3(_345, _346, _347), vec3(_1721, _1722, _1723));
    float _3804 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1733 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_1721, _1722, _1723));
    float _3815 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1737 = _1713 * _1713;
    float _1741 = ((_1732 * _1732) * (_1737 + (-1.0))) + 1.0;
    float _1749 = exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0);
    float _1750 = 0.959999978542327880859375 - _499;
    float _1752 = 0.959999978542327880859375 - _500;
    float _1753 = 0.959999978542327880859375 - _501;
    float _1760 = 1.0 - _1713;
    float _1771 = (0.5 / (((_1728 * ((_1727 * _1760) + _1713)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1760) + _1713) * _1727))) * _1727;
    float _3826 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1773 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1737 / ((_1741 * _1741) * 3.141590118408203125));
    uint _1784 = _1561 + 9u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _349) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1599].x + _427;
    float _1798 = cbLight._m0[_1599].y + _428;
    float _1799 = cbLight._m0[_1599].z + _429;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1599].xyz));
    float _3837 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1811 = dot(vec3(_345, _346, _347), vec3(_1804, _1805, _1806));
    float _3848 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1804, _1805, _1806));
    float _3859 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1796 * _1796;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0);
    float _1837 = 1.0 - _1796;
    float _1847 = (0.5 / (((_1728 * ((_1810 * _1837) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1837) + _1796) * _1810))) * _1810;
    float _3870 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    float _1859 = (((((_1830 * _1750) + _502) * cbLight._m0[_1784].x) * _1849) * _1584) + (((((_1749 * _1750) + _502) * cbLight._m0[_1699].x) * _1773) * _1595);
    float _1860 = (((((_1830 * _1752) + _504) * cbLight._m0[_1784].y) * _1849) * _1584) + (((((_1749 * _1752) + _504) * cbLight._m0[_1699].y) * _1773) * _1595);
    float _1861 = (((((_1830 * _1753) + _505) * cbLight._m0[_1784].z) * _1849) * _1584) + (((((_1749 * _1753) + _505) * cbLight._m0[_1699].z) * _1773) * _1595);
    float _1923;
    float _1925;
    float _1927;
    if (_1636)
    {
        _1923 = _1859;
        _1925 = _1860;
        _1927 = _1861;
    }
    else
    {
        uint _1929 = _1561 + 2u;
        uint _1933 = _1561 + 10u;
        float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _349) * 0.949999988079071044921875);
        float _1948 = _1947 * _1947;
        float _1949 = cbLight._m0[_1929].x + _427;
        float _1950 = cbLight._m0[_1929].y + _428;
        float _1951 = cbLight._m0[_1929].z + _429;
        float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
        float _1956 = _1955 * _1949;
        float _1957 = _1955 * _1950;
        float _1958 = _1955 * _1951;
        float _1959 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1929].xyz));
        float _3881 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1963 = dot(vec3(_345, _346, _347), vec3(_1956, _1957, _1958));
        float _3892 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1967 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1956, _1957, _1958));
        float _3903 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = _1948 * _1948;
        float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
        float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
        float _1989 = 1.0 - _1948;
        float _1999 = (0.5 / (((_1728 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1989) + _1948) * _1962))) * _1962;
        float _3914 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2001 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
        float _2002 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _1923 = (((((_1982 * _1750) + _502) * cbLight._m0[_1933].x) * _2001) * _2002) + _1859;
        _1925 = (((((_1982 * _1752) + _504) * cbLight._m0[_1933].y) * _2001) * _2002) + _1860;
        _1927 = (((((_1982 * _1753) + _505) * cbLight._m0[_1933].z) * _2001) * _2002) + _1861;
    }
    float _2037;
    float _2039;
    float _2041;
    if (_1654)
    {
        _2037 = _1923;
        _2039 = _1925;
        _2041 = _1927;
    }
    else
    {
        uint _2048 = _1561 + 3u;
        uint _2052 = _1561 + 11u;
        float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _349) * 0.949999988079071044921875);
        float _2067 = _2066 * _2066;
        float _2068 = cbLight._m0[_2048].x + _427;
        float _2069 = cbLight._m0[_2048].y + _428;
        float _2070 = cbLight._m0[_2048].z + _429;
        float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
        float _2075 = _2074 * _2068;
        float _2076 = _2074 * _2069;
        float _2077 = _2074 * _2070;
        float _2078 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_2048].xyz));
        float _3930 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2082 = dot(vec3(_345, _346, _347), vec3(_2075, _2076, _2077));
        float _3941 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2086 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2075, _2076, _2077));
        float _3952 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = _2067 * _2067;
        float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
        float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0);
        float _2108 = 1.0 - _2067;
        float _2118 = (0.5 / (((_1728 * ((_2081 * _2108) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _2108) + _2067) * _2081))) * _2081;
        float _3963 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2120 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
        float _2121 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _2037 = (((((_2101 * _1750) + _502) * cbLight._m0[_2052].x) * _2120) * _2121) + _1923;
        _2039 = (((((_2101 * _1752) + _504) * cbLight._m0[_2052].y) * _2120) * _2121) + _1925;
        _2041 = (((((_2101 * _1753) + _505) * cbLight._m0[_2052].z) * _2120) * _2121) + _1927;
    }
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    if (_1559.y == 0u)
    {
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2196;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2196;
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2196;
        uvec4 _2211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2212 = _2211.x;
        uint _2223 = uint((float(_2211.y) * floor(float(uint(cbSceneParam._m0[85u].y * _436) / _2212))) + floor(float(uint(cbSceneParam._m0[85u].x * _435) / _2212)));
        float _2233 = (log2(_2199 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2234 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        uint _2237 = uint(isnan(14.0) ? _2234 : (isnan(_2234) ? 14.0 : min(_2234, 14.0)));
        uvec4 _2242 = texelFetch(g_lightClusterGridBuffer, int(((_2237 << 2u) + (_2223 << 6u)) >> 2u));
        uint _2243 = _2242.x;
        uint _2244 = _2211.z;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((((1u << ((_2244 >> 4u) & 15u)) + 4294967295u) & _2243) == 0u) || ((_2244 & 240u) == 0u))
        {
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
        }
        else
        {
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            uint _2497 = 0u;
            uint _2506;
            bool _2507;
            for (;;)
            {
                _2506 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2497 << 2u)) >> 2u)).x;
                _2507 = _2506 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2507)
                {
                    frontier_phi_61_pred = _2491;
                    frontier_phi_61_pred_1 = _2496;
                    frontier_phi_61_pred_2 = _2495;
                    frontier_phi_61_pred_3 = _2494;
                    frontier_phi_61_pred_4 = _2493;
                    frontier_phi_61_pred_5 = _2492;
                }
                else
                {
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    uint _2621;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2494;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2506;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    for (;;)
                    {
                        uint _2625 = uint(findLSB(_2621)) + (_2497 << 5u);
                        uint _2622 = (_2621 + 4294967295u) & _2621;
                        uint _2627 = _2625 * 48u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2647 = (_2625 * 48u) + 4u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2666 = (_2625 * 48u) + 8u;
                        vec3 _2677 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x));
                        float _2681 = _2641.x - _2197;
                        float _2682 = _2641.y - _2198;
                        float _2683 = _2641.z - _2199;
                        float _2684 = dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683));
                        float _2687 = inversesqrt(_2684);
                        float _2688 = _2687 * _2681;
                        float _2689 = _2687 * _2682;
                        float _2690 = _2687 * _2683;
                        float _2691 = dot(vec3(_457, _460, _463), vec3(_2688, _2689, _2690));
                        float _2696 = 1.0 - (_2684 * _2641.w);
                        float _3989 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2697 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2698 = sqrt(_2684) * _2660.w;
                        float _2701 = 1.39999997615814208984375 / (_2698 + 1.39999997615814208984375);
                        float _2702 = _2701 * _2701;
                        float _2705 = ((1.0 - _2702) * _2691) + _2702;
                        float _2708 = _2698 * _2698;
                        float _2712 = ((isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))) * _2697) / ((_2708 * 0.699999988079071044921875) + 1.0);
                        float _2716 = (-0.0) - _2197;
                        float _2717 = (-0.0) - _2198;
                        float _2718 = (-0.0) - _2199;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2723 = _2722 * _2716;
                        float _2724 = _2722 * _2717;
                        float _2725 = _2722 * _2718;
                        float _2733 = exp2(log2(1.0 / ((_2708 * 3.5) + 5.0)) * 0.25);
                        float _2734 = 1.0 - _533;
                        float _2741 = sqrt(1.0 - ((1.0 - (_2734 * _2734)) * (1.0 - (_2733 * _2733))));
                        float _2742 = _2741 * _2741;
                        float _2743 = _2742 * _2742;
                        float _2744 = _2723 + _2688;
                        float _2745 = _2724 + _2689;
                        float _2746 = _2725 + _2690;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2754 = dot(vec3(_457, _460, _463), vec3(_2723, _2724, _2725));
                        float _4005 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2757 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2758 = dot(vec3(_457, _460, _463), vec3(_2750 * _2744, _2750 * _2745, _2750 * _2746));
                        float _4016 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2765 = ((_2761 * _2761) * (_2743 + (-1.0))) + 1.0;
                        float _2766 = _2701 * _2742;
                        float _2767 = _2766 * _2766;
                        float _2770 = ((1.0 - _2767) * _2691) + _2767;
                        float _4027 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2771 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2772 = 1.0 - _2742;
                        float _2782 = (0.5 / (((_2771 * ((_2757 * _2772) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2771 * _2772) + _2742) * _2757))) * _2771;
                        float _4038 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2793 = (((_2743 * 3.1415927410125732421875) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) / ((_2765 * _2765) * ((_2708 * 2.1991131305694580078125) + 3.141590118408203125))) * _2697;
                        _2550 = (_2712 * _2660.x) + _2618;
                        _2551 = (_2712 * _2660.y) + _2619;
                        _2552 = (_2712 * _2660.z) + _2620;
                        _2547 = (_2793 * _2677.x) + _2615;
                        _2548 = (_2793 * _2677.y) + _2616;
                        _2549 = (_2793 * _2677.z) + _2617;
                        if (_2622 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2550;
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2622;
                        }
                    }
                    frontier_phi_61_pred = _2547;
                    frontier_phi_61_pred_1 = _2552;
                    frontier_phi_61_pred_2 = _2551;
                    frontier_phi_61_pred_3 = _2550;
                    frontier_phi_61_pred_4 = _2549;
                    frontier_phi_61_pred_5 = _2548;
                }
                _2347 = frontier_phi_61_pred;
                _2357 = frontier_phi_61_pred_1;
                _2355 = frontier_phi_61_pred_2;
                _2353 = frontier_phi_61_pred_3;
                _2351 = frontier_phi_61_pred_4;
                _2349 = frontier_phi_61_pred_5;
                uint _2498 = _2497 + 1u;
                if (_2498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2491 = _2347;
                    _2492 = _2349;
                    _2493 = _2351;
                    _2494 = _2353;
                    _2495 = _2355;
                    _2496 = _2357;
                    _2497 = _2498;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
        }
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.z;
        uint _2363 = (_2361 >> 8u) & 15u;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        if (((4294967295u << _2363) & _2243) == 0u)
        {
            _2459 = _2346;
            _2461 = _2348;
            _2463 = _2350;
            _2465 = _2352;
            _2467 = _2354;
            _2469 = _2356;
        }
        else
        {
            float _2484 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
            float _2485 = _2484 * _2197;
            float _2486 = _2484 * _2198;
            float _2487 = _2484 * _2199;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2363 < ((_2361 >> 12u) & 15u))
            {
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2598 = _2346;
                float _2599 = _2348;
                float _2600 = _2350;
                float _2601 = _2352;
                float _2602 = _2354;
                float _2603 = _2356;
                uint _2604 = _2363;
                uint _2613;
                bool _2614;
                for (;;)
                {
                    _2613 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2604 << 2u)) >> 2u)).x;
                    _2614 = _2613 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2614)
                    {
                        frontier_phi_67_pred = _2601;
                        frontier_phi_67_pred_1 = _2602;
                        frontier_phi_67_pred_2 = _2603;
                        frontier_phi_67_pred_3 = _2600;
                        frontier_phi_67_pred_4 = _2599;
                        frontier_phi_67_pred_5 = _2598;
                    }
                    else
                    {
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        float _2814 = _2601;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        uint _2817 = _2613;
                        uint _2818;
                        vec4 _2843;
                        float _2844;
                        vec4 _2859;
                        vec3 _2871;
                        vec4 _2887;
                        vec4 _2903;
                        float _2950;
                        bool _2951;
                        for (;;)
                        {
                            uint _2828 = ((_2604 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2817));
                            _2818 = (_2817 + 4294967295u) & _2817;
                            uint _2830 = _2828 * 40u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            _2844 = _2843.w;
                            uint _2846 = (_2828 * 40u) + 4u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2861 = (_2828 * 40u) + 8u;
                            _2871 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x));
                            uint _2874 = (_2828 * 40u) + 16u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2890 = (_2828 * 40u) + 20u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2906 = (_2828 * 40u) + 24u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2925 = (_2828 * 40u) + 28u;
                            vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2950 = fma(_2199, _2938.z, fma(_2198, _2938.y, _2938.x * _2197)) + _2938.w;
                            _2951 = !((fma(_2199, _2919.z, fma(_2198, _2919.y, _2919.x * _2197)) + _2919.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2951)
                            {
                                float _2978 = _2843.x - _2197;
                                float _2979 = _2843.y - _2198;
                                float _2980 = _2843.z - _2199;
                                float _2981 = dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980));
                                float _2984 = inversesqrt(_2981);
                                float _2985 = _2984 * _2978;
                                float _2986 = _2984 * _2979;
                                float _2987 = _2984 * _2980;
                                float _2991 = 1.0 - (_2981 / (_2844 * _2844));
                                float _4049 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2992 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _2996 = sqrt(_2981) * _2859.w;
                                float _2998 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                                float _2999 = _2998 * _2998;
                                float _3002 = ((1.0 - _2999) * dot(vec3(_2985, _2986, _2987), vec3(_457, _460, _463))) + _2999;
                                float _3005 = _2996 * _2996;
                                float _3009 = (fma(_2199, _2887.z, fma(_2198, _2887.y, _2887.x * _2197)) + _2887.w) / _2950;
                                float _3010 = (fma(_2199, _2903.z, fma(_2198, _2903.y, _2903.x * _2197)) + _2903.w) / _2950;
                                float _3014 = 1.0 - dot(vec2(_3009, _3010), vec2(_3009, _3010));
                                float _4065 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3016 = _3015 * (((isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))) * _2992) / ((_3005 * 0.699999988079071044921875) + 1.0));
                                float _3028 = exp2(log2(1.0 / ((_3005 * 3.5) + 5.0)) * 0.25);
                                float _3029 = 1.0 - _533;
                                float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                                float _3037 = _3036 * _3036;
                                float _3038 = _3037 * _3037;
                                float _3039 = _2985 - _2485;
                                float _3040 = _2986 - _2486;
                                float _3041 = _2987 - _2487;
                                float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                                float _3049 = dot(vec3(_457, _460, _463), vec3((-0.0) - _2485, (-0.0) - _2486, (-0.0) - _2487));
                                float _4076 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3052 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3053 = dot(vec3(_457, _460, _463), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                                float _4087 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                                float _3061 = _2998 * _3037;
                                float _3062 = _3061 * _3061;
                                float _3068 = ((1.0 - _3062) * dot(vec3(_457, _460, _463), vec3(_2985, _2986, _2987))) + _3062;
                                float _4098 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3070 = 1.0 - _3037;
                                float _3080 = (0.5 / (((_3069 * ((_3052 * _3070) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3037) * _3052))) * _3069;
                                float _4109 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3090 = (_3015 * _2992) * (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) / ((_3060 * _3060) * ((_3005 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3090 * _2871.x;
                                frontier_phi_73_pred_1 = _3090 * _2871.y;
                                frontier_phi_73_pred_2 = _3016 * _2859.z;
                                frontier_phi_73_pred_3 = _3016 * _2859.y;
                                frontier_phi_73_pred_4 = _3016 * _2859.x;
                                frontier_phi_73_pred_5 = _3090 * _2871.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3094 = frontier_phi_73_pred;
                            _3095 = frontier_phi_73_pred_1;
                            _3099 = frontier_phi_73_pred_2;
                            _3098 = frontier_phi_73_pred_3;
                            _3097 = frontier_phi_73_pred_4;
                            _3096 = frontier_phi_73_pred_5;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            if (_2818 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2818;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2801;
                        frontier_phi_67_pred_1 = _2802;
                        frontier_phi_67_pred_2 = _2803;
                        frontier_phi_67_pred_3 = _2800;
                        frontier_phi_67_pred_4 = _2799;
                        frontier_phi_67_pred_5 = _2798;
                    }
                    _2466 = frontier_phi_67_pred;
                    _2468 = frontier_phi_67_pred_1;
                    _2470 = frontier_phi_67_pred_2;
                    _2464 = frontier_phi_67_pred_3;
                    _2462 = frontier_phi_67_pred_4;
                    _2460 = frontier_phi_67_pred_5;
                    uint _2605 = _2604 + 1u;
                    if (_2605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2598 = _2460;
                        _2599 = _2462;
                        _2600 = _2464;
                        _2601 = _2466;
                        _2602 = _2468;
                        _2603 = _2470;
                        _2604 = _2605;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2468;
                frontier_phi_55_56_ladder_1 = _2470;
                frontier_phi_55_56_ladder_2 = _2466;
                frontier_phi_55_56_ladder_3 = _2464;
                frontier_phi_55_56_ladder_4 = _2462;
                frontier_phi_55_56_ladder_5 = _2460;
            }
            else
            {
                frontier_phi_55_56_ladder = _2354;
                frontier_phi_55_56_ladder_1 = _2356;
                frontier_phi_55_56_ladder_2 = _2352;
                frontier_phi_55_56_ladder_3 = _2350;
                frontier_phi_55_56_ladder_4 = _2348;
                frontier_phi_55_56_ladder_5 = _2346;
            }
            _2459 = frontier_phi_55_56_ladder_5;
            _2461 = frontier_phi_55_56_ladder_4;
            _2463 = frontier_phi_55_56_ladder_3;
            _2465 = frontier_phi_55_56_ladder_2;
            _2467 = frontier_phi_55_56_ladder;
            _2469 = frontier_phi_55_56_ladder_1;
        }
        float _2474 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _2256 = (_2474 * _2465) + _1692;
        _2258 = (_2474 * _2467) + _1694;
        _2260 = (_2474 * _2469) + _1696;
        _2262 = ((_2459 * _502) * _2474) + _2037;
        _2264 = ((_2461 * _504) * _2474) + _2039;
        _2266 = ((_2463 * _505) * _2474) + _2041;
    }
    else
    {
        _2256 = _1692;
        _2258 = _1694;
        _2260 = _1696;
        _2262 = _2037;
        _2264 = _2039;
        _2266 = _2041;
    }
    float _4125 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4136 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4147 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4158 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _2291 = cbInstanceData._m0[_476 + 6u].w * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)));
    float _2296 = _435 / cbSceneParam._m0[86u].x;
    float _2297 = _436 / cbSceneParam._m0[86u].y;
    vec4 _2311 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, (log2((isnan(cbSceneParam._m0[77u].w) ? _369 : (isnan(_369) ? cbSceneParam._m0[77u].w : min(_369, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2313 = _2311.x;
    float _2314 = _2311.y;
    float _2315 = _2311.z;
    float _2316 = _2311.w;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_369 > cbSceneParam._m0[78u].w)
    {
        float _2371 = isnan(_369) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _369 : min(cbSceneParam._m0[80u].w, _369));
        float _2372 = _2371 / _369;
        float _2383 = _2372 * _420;
        float _2384 = _421 * _2372;
        float _2385 = (-0.0) - _2384;
        float _2387 = _2372 * _422;
        float _2389 = (cbSceneParam._m0[77u].w * _2385) / _2371;
        float _2390 = _2389 + cbSceneParam._m0[79u].w;
        float _2391 = cbSceneParam._m0[79u].w - _2384;
        float _2397 = sqrt(((_2383 * _2383) + (_2384 * _2384)) + (_2387 * _2387));
        float _2400 = (1.0 - (cbSceneParam._m0[77u].w / _2371)) * _2397;
        float _2405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2407 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2560;
        if (abs((_2385 - _2389) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2560 = ((((_2390 > 0.0) ? exp2(_2405 * _2390) : (2.0 - exp2(_2407 * _2390))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2400;
        }
        else
        {
            float _2520 = 1.0 / cbSceneParam._m0[80u].x;
            float _2521 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : max(_2390, _2391));
            float _2522 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : min(_2390, _2391));
            float _2531 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : min(_2521, 0.0));
            float _2532 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : min(_2522, 0.0));
            _2560 = ((abs(_2397 / _2385) * cbSceneParam._m0[80u].y) * ((((_2531 - _2532) * 2.0) - ((exp2(_2405 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)))) - exp2(_2405 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0))))) * _2520)) - ((exp2(_2407 * _2531) - exp2(_2407 * _2532)) * _2520))) + (_2400 * cbSceneParam._m0[80u].z);
        }
        vec4 _2562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, 1.0), 0.0);
        float _2571 = exp2((_2560 * (-1.44269502162933349609375)) * (1.0 - _2562.w));
        float _2572 = log2(_2571);
        float _2588 = log2(_2316);
        _2409 = (exp2(_2588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].x)) * _2562.x) / cbSceneParam._m0[78u].x)) + _2313;
        _2411 = (exp2(_2588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].y)) * _2562.y) / cbSceneParam._m0[78u].y)) + _2314;
        _2413 = (exp2(_2588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].z)) * _2562.z) / cbSceneParam._m0[78u].z)) + _2315;
        _2415 = _2571 * _2316;
    }
    else
    {
        _2409 = _2313;
        _2411 = _2314;
        _2413 = _2315;
        _2415 = _2316;
    }
    float _2427 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2428 = _2427 == 3.0;
    float _2429 = log2(_2415);
    float _2436 = exp2(_2429 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2256 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _517))) + ((_2262 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1324)) * cbPerFrame._m0[3u].x));
    float _2437 = exp2(_2429 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2258 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _517))) + ((_2264 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1324)) * cbPerFrame._m0[3u].x));
    float _2438 = exp2(_2429 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2260 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _517))) + ((_2266 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1324)) * cbPerFrame._m0[3u].x));
    float _2447 = (_2427 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2447 * (_2428 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2409)));
    SV_Target.y = _2447 * (_2428 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.z = _2447 * (_2428 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.w = _2291;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2291;
}


