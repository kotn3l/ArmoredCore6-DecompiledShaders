#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _936;
float _3353;
float _3354;
float _3355;
float _3356;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _242 = _236.x * cbMtdParam._m0[9u].x;
    float _243 = _236.y * cbMtdParam._m0[9u].y;
    float _244 = _236.z * cbMtdParam._m0[9u].z;
    float _263 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _264 = _236.w * TEXCOORD.x;
    float _275 = (_264 < 0.5) ? 0.0 : 1.0;
    float _285 = (((((_264 * 2.0) * (1.0 - _275)) * _263) + (-0.5)) + ((1.0 - (((1.0 - _264) * 2.0) * (1.0 - _263))) * _275)) * cbMtdParam._m0[10u].z;
    precise float _289 = _285 * ((_285 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _290 = cbMtdParam._m0[10u].y + _289;
    float _3365 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _296 = (_291 * _291) * (3.0 - (_291 * 2.0));
    vec4 _308 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _310 = _308.x;
    vec4 _322 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _326 = _322.z;
    float _329 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3376 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))));
    float _340 = fma(_337, _206 * NORMAL.x, fma(_331, _213 * TANGENT.x, (_199 * _191) * _329));
    float _343 = fma(_337, _206 * NORMAL.y, fma(_331, _213 * TANGENT.y, (_199 * _192) * _329));
    float _346 = fma(_337, _206 * NORMAL.z, fma(_331, _213 * TANGENT.z, (_199 * _193) * _329));
    float _350 = inversesqrt(dot(vec3(_340, _343, _346), vec3(_340, _343, _346)));
    float _351 = _350 * _340;
    float _352 = _350 * _343;
    float _353 = _350 * _346;
    float _3387 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _354 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _355 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3420 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3431 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3442 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _359 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _375 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    vec4 _440 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _442 = _440.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _617 = sqrt(((_426 * _426) + (_427 * _427)) + (_428 * _428));
        float _623 = (cbMatDynParam._m0[5u].x * _617) + cbMatDynParam._m0[5u].y;
        float _3453 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _628 = (cbMatDynParam._m0[5u].z * _617) + cbMatDynParam._m0[5u].w;
        float _3464 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) - _624)) + _624) < ((_442 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _454 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _455 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _475 = fma(_353, cbSceneParam._m0[5u].z, fma(_352, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _351));
    float _478 = fma(_353, cbSceneParam._m0[6u].z, fma(_352, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _351));
    float _481 = fma(_353, cbSceneParam._m0[7u].z, fma(_352, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _351));
    uint _494 = uint(roundEven(NORMAL.w)) * 13u;
    uint _496 = _494 + 9u;
    uint _497 = _496 + uint(cbMatDynParam._m0[0u].w);
    float _503 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_497].x;
    float _504 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_497].y;
    float _505 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_497].z;
    float _3475 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _509 = 1.0 - _359;
    float _510 = _506 * _509;
    float _511 = _507 * _509;
    float _512 = _508 * _509;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _359;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _359;
    float _519 = (_508 + (-0.039999999105930328369140625)) * _359;
    float _520 = _517 + 0.039999999105930328369140625;
    float _522 = _518 + 0.039999999105930328369140625;
    float _523 = _519 + 0.039999999105930328369140625;
    vec4 _532 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _454, cbSceneParam._m0[86u].y * _455));
    float _535 = _532.x * TEXCOORD.y;
    float _536 = dot(vec3(_351, _352, _353), vec3(_433, _434, _435));
    float _539 = _536 * 2.0;
    float _543 = (_539 * _351) - _433;
    float _544 = (_539 * _352) - _434;
    float _545 = (_539 * _353) - _435;
    float _549 = abs(dot(vec3(_433, _434, _435), vec3(_351, _352, _353)));
    float _3508 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _551 = sqrt(_355);
    float _563 = exp2((_551 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_551 * 3.0));
    float _569 = (1.0 - _563) * ((_551 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _570 = _563 * _551;
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _662 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _666 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _670 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _693 = _598 + _351;
        float _694 = _602 + _352;
        float _695 = _606 + _353;
        float _705 = fma(_695, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) - _662;
        float _706 = fma(_695, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) - _666;
        float _707 = fma(_695, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) - _670;
        float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
        float _724 = ((_711 * _705) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_662 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_711 * _706) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_666 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_711 * _707) / cbModelParam._m0[34u].z) + ((((((_670 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_729.x + (-0.5));
        float _765 = _763 * (_729.y + (-0.5));
        float _766 = _763 * (_729.z + (-0.5));
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_736.x + (-0.5));
        float _775 = _773 * (_736.y + (-0.5));
        float _776 = _773 * (_736.z + (-0.5));
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_743.x + (-0.5));
        float _785 = _783 * (_743.y + (-0.5));
        float _786 = _783 * (_743.z + (-0.5));
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = _764 * 0.5;
        float _801 = _774 * 0.5;
        float _802 = _784 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _817 = (dot(vec3(_351, _352, _353), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _827 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3556 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_829 + 1.0))) + _834) * _797;
        float _844 = _765 * 0.5;
        float _845 = _775 * 0.5;
        float _846 = _785 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_351, _352, _353), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3589 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_871 + 1.0))) + _876) * _798;
        float _886 = _766 * 0.5;
        float _887 = _776 * 0.5;
        float _888 = _786 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_351, _352, _353), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3622 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_913 + 1.0))) + _918) * _799;
        _935 = _766;
        _937 = _765;
        _938 = _764;
        _939 = _776;
        _940 = _775;
        _941 = _774;
        _942 = _786;
        _943 = _785;
        _944 = _784;
        _945 = _799;
        _946 = _798;
        _947 = _797;
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
    }
    else
    {
        _935 = _936;
        _937 = _936;
        _938 = _936;
        _939 = _936;
        _940 = _936;
        _941 = _936;
        _942 = _936;
        _943 = _936;
        _944 = _936;
        _945 = _936;
        _946 = _936;
        _947 = _936;
        _948 = 0.0;
        _949 = 0.0;
        _950 = 0.0;
    }
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _979 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _983 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _987 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _1010 = _598 + _351;
        float _1011 = _602 + _352;
        float _1012 = _606 + _353;
        float _1022 = fma(_1012, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010)) - _979;
        float _1023 = fma(_1012, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010)) - _983;
        float _1024 = fma(_1012, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010)) - _987;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_979 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_983 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[35u].z) + ((((((_987 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1078 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1045.x + (-0.5));
        float _1080 = _1078 * (_1045.y + (-0.5));
        float _1081 = _1078 * (_1045.z + (-0.5));
        float _1088 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1052.x + (-0.5));
        float _1090 = _1088 * (_1052.y + (-0.5));
        float _1091 = _1088 * (_1052.z + (-0.5));
        float _1098 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1059.x + (-0.5));
        float _1100 = _1098 * (_1059.y + (-0.5));
        float _1101 = _1098 * (_1059.z + (-0.5));
        float _1108 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1066.x + (-0.5));
        float _1110 = _1108 * (_1066.y + (-0.5));
        float _1111 = _1108 * (_1066.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_351, _352, _353), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3685 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1142 + 1.0))) + _1147) * _1112;
        float _1157 = _1080 * 0.5;
        float _1158 = _1090 * 0.5;
        float _1159 = _1100 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_351, _352, _353), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3718 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1184 + 1.0))) + _1189) * _1113;
        float _1199 = _1081 * 0.5;
        float _1200 = _1091 * 0.5;
        float _1201 = _1101 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_351, _352, _353), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3751 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1226 + 1.0))) + _1231) * _1114;
        _1248 = _1081;
        _1249 = _1080;
        _1250 = _1079;
        _1251 = _1091;
        _1252 = _1090;
        _1253 = _1089;
        _1254 = _1101;
        _1255 = _1100;
        _1256 = _1099;
        _1257 = _1114;
        _1258 = _1113;
        _1259 = _1112;
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _936;
        _1249 = _936;
        _1250 = _936;
        _1251 = _936;
        _1252 = _936;
        _1253 = _936;
        _1254 = _936;
        _1255 = _936;
        _1256 = _936;
        _1257 = _936;
        _1258 = _936;
        _1259 = _936;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _949)) + _949;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _950)) + _950;
    float _1295 = fma(_1274, cbSceneParam._m0[89u].z, fma(_1273, cbSceneParam._m0[89u].y, _1272 * cbSceneParam._m0[89u].x));
    float _1298 = fma(_1274, cbSceneParam._m0[90u].z, fma(_1273, cbSceneParam._m0[90u].y, _1272 * cbSceneParam._m0[90u].x));
    float _1301 = fma(_1274, cbSceneParam._m0[91u].z, fma(_1273, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1272));
    float _1316 = _543 * 0.5;
    float _1317 = _544 * 0.5;
    float _1318 = _545 * 0.5;
    float _1319 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1322 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1325 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1359;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1332 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_935, _939, _942, _945));
        float _1336 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_937, _940, _943, _946));
        float _1340 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_938, _941, _944, _947));
        float _1347 = dot(vec4(cbModelParam._m0[39u]), vec4(_1316, _1317, _1318, 1.0));
        _1359 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1359 = 1.0;
    }
    float _1370;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1361 = dot(vec4(cbModelParam._m0[40u]), vec4(_1316, _1317, _1318, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1374 = (_1370 * cbModelParam._m0[1u].x) + (_1359 * (1.0 - cbModelParam._m0[1u].x));
    float _1384 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1384 : min(cbModelParam._m0[25u].z, _1384));
    float _1467;
    float _1469;
    float _1471;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1434 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1438 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1442 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1445 = fma(_545, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _543));
        float _1448 = fma(_545, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _543));
        float _1451 = fma(_545, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _543));
        float _1479;
        if (_1445 > 0.0)
        {
            _1479 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1479 = frontier_phi_17_15_ladder;
        }
        float _1708;
        if (_1448 > 0.0)
        {
            _1708 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1708 = frontier_phi_26_22_ladder;
        }
        float _1965;
        if (_1451 > 0.0)
        {
            _1965 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1965 = frontier_phi_38_33_ladder;
        }
        float _1967 = isnan(_1708) ? _1479 : (isnan(_1479) ? _1708 : min(_1479, _1708));
        float _1968 = isnan(_1965) ? _1967 : (isnan(_1967) ? _1965 : min(_1967, _1965));
        float _1972 = (_1968 * _1445) + _1434;
        float _1973 = (_1968 * _1448) + _1438;
        float _1974 = (_1968 * _1451) + _1442;
        float _1975 = _1968 * 9.9999997473787516355514526367188e-05;
        float _1977 = (-1.0) - _1975;
        float _1979 = _1975 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1974 > _1979) || ((_1974 < _1977) || ((_1973 > _1979) || ((_1973 < _1977) || ((_1972 < _1977) || (_1972 > _1979))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1974, cbModelParam._m0[9u].z, fma(_1973, cbModelParam._m0[9u].y, _1972 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1974, cbModelParam._m0[10u].z, fma(_1973, cbModelParam._m0[10u].y, _1972 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1974, cbModelParam._m0[11u].z, fma(_1973, cbModelParam._m0[11u].y, _1972 * cbModelParam._m0[11u].x))), _1385);
            frontier_phi_16_38_ladder = _2102.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2102.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2102.x * cbModelParam._m0[1u].y;
        }
        _1467 = frontier_phi_16_38_ladder_2;
        _1469 = frontier_phi_16_38_ladder_1;
        _1471 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_543, _544, _545), _1385);
        _1467 = _1455.x * cbModelParam._m0[1u].y;
        _1469 = _1455.y * cbModelParam._m0[1u].y;
        _1471 = _1455.z * cbModelParam._m0[1u].y;
    }
    float _1475 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1475 : min(cbModelParam._m0[25u].w, _1475));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1533 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1537 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1541 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1544 = fma(_545, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _543));
        float _1547 = fma(_545, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _543));
        float _1550 = fma(_545, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _543));
        float _1713;
        if (_1544 > 0.0)
        {
            _1713 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1713 = frontier_phi_28_24_ladder;
        }
        float _1992;
        if (_1547 > 0.0)
        {
            _1992 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1992 = frontier_phi_40_35_ladder;
        }
        float _2205;
        if (_1550 > 0.0)
        {
            _2205 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2205 = frontier_phi_49_46_ladder;
        }
        float _2207 = isnan(_1992) ? _1713 : (isnan(_1713) ? _1992 : min(_1713, _1992));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1544) + _1533;
        float _2213 = (_2208 * _1547) + _1537;
        float _2214 = (_2208 * _1550) + _1541;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2216 = (-1.0) - _2215;
        float _2218 = _2215 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2214 > _2218) || ((_2214 < _2216) || ((_2213 > _2218) || ((_2213 < _2216) || ((_2212 < _2216) || (_2212 > _2218))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2214, cbModelParam._m0[17u].z, fma(_2213, cbModelParam._m0[17u].y, _2212 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2214, cbModelParam._m0[18u].z, fma(_2213, cbModelParam._m0[18u].y, _2212 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2214, cbModelParam._m0[19u].z, fma(_2213, cbModelParam._m0[19u].y, _2212 * cbModelParam._m0[19u].x))), _1476);
            frontier_phi_25_49_ladder = _2415.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2415.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2415.x * cbModelParam._m0[1u].z;
        }
        _1569 = frontier_phi_25_49_ladder_2;
        _1571 = frontier_phi_25_49_ladder_1;
        _1573 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_543, _544, _545), _1476);
        _1569 = _1553.x * cbModelParam._m0[1u].z;
        _1571 = _1553.y * cbModelParam._m0[1u].z;
        _1573 = _1553.z * cbModelParam._m0[1u].z;
    }
    float _1586 = (((_569 * _520) + _570) * _535) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_569 * _522) + _570) * _535) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1590 = (((_569 * _523) + _570) * _535) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1593 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, _1586 * cbSceneParam._m0[91u].x));
    vec4 _1607 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_454, _455));
    float _1609 = _1607.w;
    float _1621 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1609);
    float _1622 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1609);
    float _1623 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1609);
    uvec4 _1627 = floatBitsToUint(cbInstanceData._m0[_494 + 5u]);
    uint _1629 = _1627.x * 14u;
    uint _1630 = _1629 + 13u;
    float _1637 = _535 + (-1.0);
    float _1642 = (cbLight._m0[_1630].x * _1637) + 1.0;
    float _1643 = (cbLight._m0[_1630].y * _1637) + 1.0;
    float _1644 = (cbLight._m0[_1630].z * _1637) + 1.0;
    float _1645 = (cbLight._m0[_1630].w * _1637) + 1.0;
    uint _1646 = _1629 + 5u;
    float _1652 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1656 = _1629 + 4u;
    float _1666 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    uint _1670 = _1629 | 1u;
    float _1681 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_351, _352, _353));
    float _1684 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_351, _352, _353));
    float _3887 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _3898 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1689 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _1691 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.3183098733425140380859375;
    float _1698 = ((cbLight._m0[_1646].x * _1652) * _1691) + (((cbLight._m0[_1656].x * _1621) * _1666) * _1689);
    float _1699 = ((_1652 * cbLight._m0[_1646].y) * _1691) + (((cbLight._m0[_1656].y * _1622) * _1666) * _1689);
    float _1700 = ((_1652 * cbLight._m0[_1646].z) * _1691) + (((cbLight._m0[_1656].z * _1623) * _1666) * _1689);
    uvec4 _1705 = floatBitsToUint(cbLight._m0[_1629 + 12u]);
    bool _1707 = _1705.x == 0u;
    float _1718;
    float _1720;
    float _1722;
    if (_1707)
    {
        _1718 = _1698;
        _1720 = _1699;
        _1722 = _1700;
    }
    else
    {
        uint _1726 = _1629 + 6u;
        float _1742 = (dot(vec3(cbLight._m0[_1629 + 2u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1743 = _1742 * _1742;
        float _3909 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1745 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1718 = (((cbLight._m0[_1726].x * 0.3183098733425140380859375) * _1744) * _1745) + _1698;
        _1720 = (((cbLight._m0[_1726].y * 0.3183098733425140380859375) * _1744) * _1745) + _1699;
        _1722 = (((cbLight._m0[_1726].z * 0.3183098733425140380859375) * _1744) * _1745) + _1700;
    }
    bool _1725 = _1705.y == 0u;
    float _1763;
    float _1765;
    float _1767;
    if (_1725)
    {
        _1763 = _1718;
        _1765 = _1720;
        _1767 = _1722;
    }
    else
    {
        uint _1936 = _1629 + 7u;
        float _1952 = (dot(vec3(cbLight._m0[_1629 + 3u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1953 = _1952 * _1952;
        float _3925 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1955 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1763 = (((cbLight._m0[_1936].x * 0.3183098733425140380859375) * _1954) * _1955) + _1718;
        _1765 = (((cbLight._m0[_1936].y * 0.3183098733425140380859375) * _1954) * _1955) + _1720;
        _1767 = (((cbLight._m0[_1936].z * 0.3183098733425140380859375) * _1954) * _1955) + _1722;
    }
    uint _1770 = _1629 + 8u;
    float _1783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _355) * 0.949999988079071044921875);
    float _1784 = _1783 * _1783;
    float _1785 = cbLight._m0[_1629].x + _433;
    float _1786 = cbLight._m0[_1629].y + _434;
    float _1787 = cbLight._m0[_1629].z + _435;
    float _1791 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
    float _1792 = _1791 * _1785;
    float _1793 = _1791 * _1786;
    float _1794 = _1791 * _1787;
    float _1795 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1629].xyz));
    float _3941 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _1799 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1800 = dot(vec3(_351, _352, _353), vec3(_1792, _1793, _1794));
    float _3963 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1792, _1793, _1794));
    float _3974 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = _1784 * _1784;
    float _1812 = ((_1803 * _1803) * (_1808 + (-1.0))) + 1.0;
    float _1820 = exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0);
    float _1821 = 0.959999978542327880859375 - _517;
    float _1823 = 0.959999978542327880859375 - _518;
    float _1824 = 0.959999978542327880859375 - _519;
    float _1831 = 1.0 - _1784;
    float _1842 = (0.5 / (((_1799 * ((_1798 * _1831) + _1784)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _1831) + _1784) * _1798))) * _1798;
    float _3985 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1808 / ((_1812 * _1812) * 3.141590118408203125));
    uint _1858 = _1629 + 9u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1670].w)) * _355) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1670].x + _433;
    float _1872 = cbLight._m0[_1670].y + _434;
    float _1873 = cbLight._m0[_1670].z + _435;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1670].xyz));
    float _3996 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1885 = dot(vec3(_351, _352, _353), vec3(_1878, _1879, _1880));
    float _4007 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_1878, _1879, _1880));
    float _4018 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1870 * _1870;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
    float _1911 = 1.0 - _1870;
    float _1921 = (0.5 / (((_1799 * ((_1884 * _1911) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _1911) + _1870) * _1884))) * _1884;
    float _4029 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1923 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    float _1933 = (((((_1904 * _1821) + _520) * cbLight._m0[_1858].x) * _1923) * _1652) + ((((cbLight._m0[_1770].x * _1621) * ((_1820 * _1821) + _520)) * _1844) * _1666);
    float _1934 = (((((_1904 * _1823) + _522) * cbLight._m0[_1858].y) * _1923) * _1652) + ((((cbLight._m0[_1770].y * _1622) * ((_1820 * _1823) + _522)) * _1844) * _1666);
    float _1935 = (((((_1904 * _1824) + _523) * cbLight._m0[_1858].z) * _1923) * _1652) + ((((cbLight._m0[_1770].z * _1623) * ((_1820 * _1824) + _523)) * _1844) * _1666);
    float _1997;
    float _1999;
    float _2001;
    if (_1707)
    {
        _1997 = _1933;
        _1999 = _1934;
        _2001 = _1935;
    }
    else
    {
        uint _2003 = _1629 + 2u;
        uint _2007 = _1629 + 10u;
        float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _355) * 0.949999988079071044921875);
        float _2022 = _2021 * _2021;
        float _2023 = cbLight._m0[_2003].x + _433;
        float _2024 = cbLight._m0[_2003].y + _434;
        float _2025 = cbLight._m0[_2003].z + _435;
        float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
        float _2030 = _2029 * _2023;
        float _2031 = _2029 * _2024;
        float _2032 = _2029 * _2025;
        float _2033 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_2003].xyz));
        float _4040 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2037 = dot(vec3(_351, _352, _353), vec3(_2030, _2031, _2032));
        float _4051 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2041 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2030, _2031, _2032));
        float _4062 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2045 = _2022 * _2022;
        float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
        float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
        float _2063 = 1.0 - _2022;
        float _2073 = (0.5 / (((_1799 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _2063) + _2022) * _2036))) * _2036;
        float _4073 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2075 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
        float _2076 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1997 = (((((_2056 * _1821) + _520) * cbLight._m0[_2007].x) * _2075) * _2076) + _1933;
        _1999 = (((((_2056 * _1823) + _522) * cbLight._m0[_2007].y) * _2075) * _2076) + _1934;
        _2001 = (((((_2056 * _1824) + _523) * cbLight._m0[_2007].z) * _2075) * _2076) + _1935;
    }
    float _2111;
    float _2113;
    float _2115;
    if (_1725)
    {
        _2111 = _1997;
        _2113 = _1999;
        _2115 = _2001;
    }
    else
    {
        uint _2122 = _1629 + 3u;
        uint _2126 = _1629 + 11u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _355) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _433;
        float _2143 = cbLight._m0[_2122].y + _434;
        float _2144 = cbLight._m0[_2122].z + _435;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_2122].xyz));
        float _4089 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2156 = dot(vec3(_351, _352, _353), vec3(_2149, _2150, _2151));
        float _4100 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4111 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0);
        float _2182 = 1.0 - _2141;
        float _2192 = (0.5 / (((_1799 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _2182) + _2141) * _2155))) * _2155;
        float _4122 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2194 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2195 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _2111 = (((((_2175 * _1821) + _520) * cbLight._m0[_2126].x) * _2194) * _2195) + _1997;
        _2113 = (((((_2175 * _1823) + _522) * cbLight._m0[_2126].y) * _2194) * _2195) + _1999;
        _2115 = (((((_2175 * _1824) + _523) * cbLight._m0[_2126].z) * _2194) * _2195) + _2001;
    }
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    if (_1627.y == 0u)
    {
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2270;
        float _2272 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2270;
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2270;
        uvec4 _2285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2286 = _2285.x;
        uint _2297 = uint((float(_2285.y) * floor(float(uint(cbSceneParam._m0[85u].y * _455) / _2286))) + floor(float(uint(cbSceneParam._m0[85u].x * _454) / _2286)));
        float _2307 = (log2(_2273 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2308 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        uint _2311 = uint(isnan(14.0) ? _2308 : (isnan(_2308) ? 14.0 : min(_2308, 14.0)));
        uvec4 _2316 = texelFetch(g_lightClusterGridBuffer, int(((_2311 << 2u) + (_2297 << 6u)) >> 2u));
        uint _2317 = _2316.x;
        uint _2318 = _2285.z;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((((1u << ((_2318 >> 4u) & 15u)) + 4294967295u) & _2317) == 0u) || ((_2318 & 240u) == 0u))
        {
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
        }
        else
        {
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            uint _2579 = 0u;
            uint _2588;
            bool _2589;
            for (;;)
            {
                _2588 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2579 << 2u)) >> 2u)).x;
                _2589 = _2588 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2589)
                {
                    frontier_phi_66_pred = _2573;
                    frontier_phi_66_pred_1 = _2578;
                    frontier_phi_66_pred_2 = _2577;
                    frontier_phi_66_pred_3 = _2576;
                    frontier_phi_66_pred_4 = _2575;
                    frontier_phi_66_pred_5 = _2574;
                }
                else
                {
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    uint _2724;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2588;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    for (;;)
                    {
                        uint _2728 = uint(findLSB(_2724)) + (_2579 << 5u);
                        uint _2725 = (_2724 + 4294967295u) & _2724;
                        uint _2730 = _2728 * 48u;
                        vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 3u)).x));
                        uint _2750 = (_2728 * 48u) + 4u;
                        vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2769 = (_2728 * 48u) + 8u;
                        vec3 _2780 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x));
                        float _2784 = _2744.x - _2271;
                        float _2785 = _2744.y - _2272;
                        float _2786 = _2744.z - _2273;
                        float _2787 = dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786));
                        float _2790 = inversesqrt(_2787);
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2794 = dot(vec3(_475, _478, _481), vec3(_2791, _2792, _2793));
                        float _2799 = 1.0 - (_2787 * _2744.w);
                        float _4148 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2800 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2801 = sqrt(_2787) * _2763.w;
                        float _2804 = 1.39999997615814208984375 / (_2801 + 1.39999997615814208984375);
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2794) + _2805;
                        float _2811 = _2801 * _2801;
                        float _2815 = ((isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))) * _2800) / ((_2811 * 0.699999988079071044921875) + 1.0);
                        float _2819 = (-0.0) - _2271;
                        float _2820 = (-0.0) - _2272;
                        float _2821 = (-0.0) - _2273;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2836 = exp2(log2(1.0 / ((_2811 * 3.5) + 5.0)) * 0.25);
                        float _2837 = 1.0 - _551;
                        float _2844 = sqrt(1.0 - ((1.0 - (_2837 * _2837)) * (1.0 - (_2836 * _2836))));
                        float _2845 = _2844 * _2844;
                        float _2846 = _2845 * _2845;
                        float _2847 = _2826 + _2791;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2857 = dot(vec3(_475, _478, _481), vec3(_2826, _2827, _2828));
                        float _4164 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2861 = dot(vec3(_475, _478, _481), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849));
                        float _4175 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2868 = ((_2864 * _2864) * (_2846 + (-1.0))) + 1.0;
                        float _2869 = _2804 * _2845;
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2794) + _2870;
                        float _4186 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2875 = 1.0 - _2845;
                        float _2885 = (0.5 / (((_2874 * ((_2860 * _2875) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2874 * _2875) + _2845) * _2860))) * _2874;
                        float _4197 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2896 = (((_2846 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_2868 * _2868) * ((_2811 * 2.1991131305694580078125) + 3.141590118408203125))) * _2800;
                        _2648 = (_2815 * _2763.x) + _2721;
                        _2649 = (_2815 * _2763.y) + _2722;
                        _2650 = (_2815 * _2763.z) + _2723;
                        _2645 = (_2896 * _2780.x) + _2718;
                        _2646 = (_2896 * _2780.y) + _2719;
                        _2647 = (_2896 * _2780.z) + _2720;
                        if (_2725 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2725;
                        }
                    }
                    frontier_phi_66_pred = _2645;
                    frontier_phi_66_pred_1 = _2650;
                    frontier_phi_66_pred_2 = _2649;
                    frontier_phi_66_pred_3 = _2648;
                    frontier_phi_66_pred_4 = _2647;
                    frontier_phi_66_pred_5 = _2646;
                }
                _2421 = frontier_phi_66_pred;
                _2431 = frontier_phi_66_pred_1;
                _2429 = frontier_phi_66_pred_2;
                _2427 = frontier_phi_66_pred_3;
                _2425 = frontier_phi_66_pred_4;
                _2423 = frontier_phi_66_pred_5;
                uint _2580 = _2579 + 1u;
                if (_2580 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2573 = _2421;
                    _2574 = _2423;
                    _2575 = _2425;
                    _2576 = _2427;
                    _2577 = _2429;
                    _2578 = _2431;
                    _2579 = _2580;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
        }
        uvec4 _2434 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2435 = _2434.z;
        uint _2437 = (_2435 >> 8u) & 15u;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        if (((4294967295u << _2437) & _2317) == 0u)
        {
            _2541 = _2420;
            _2543 = _2422;
            _2545 = _2424;
            _2547 = _2426;
            _2549 = _2428;
            _2551 = _2430;
        }
        else
        {
            float _2566 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
            float _2567 = _2566 * _2271;
            float _2568 = _2566 * _2272;
            float _2569 = _2566 * _2273;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2437 < ((_2435 >> 12u) & 15u))
            {
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2701 = _2420;
                float _2702 = _2422;
                float _2703 = _2424;
                float _2704 = _2426;
                float _2705 = _2428;
                float _2706 = _2430;
                uint _2707 = _2437;
                uint _2716;
                bool _2717;
                for (;;)
                {
                    _2716 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                    _2717 = _2716 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2717)
                    {
                        frontier_phi_77_pred = _2706;
                        frontier_phi_77_pred_1 = _2705;
                        frontier_phi_77_pred_2 = _2704;
                        frontier_phi_77_pred_3 = _2703;
                        frontier_phi_77_pred_4 = _2702;
                        frontier_phi_77_pred_5 = _2701;
                    }
                    else
                    {
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        uint _2929 = _2716;
                        uint _2930;
                        vec4 _2955;
                        float _2956;
                        vec4 _2971;
                        vec3 _2983;
                        vec4 _2999;
                        vec4 _3015;
                        float _3062;
                        bool _3063;
                        for (;;)
                        {
                            uint _2940 = ((_2707 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2929));
                            _2930 = (_2929 + 4294967295u) & _2929;
                            uint _2942 = _2940 * 40u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            _2956 = _2955.w;
                            uint _2958 = (_2940 * 40u) + 4u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2973 = (_2940 * 40u) + 8u;
                            _2983 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x));
                            uint _2986 = (_2940 * 40u) + 16u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2940 * 40u) + 20u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3018 = (_2940 * 40u) + 24u;
                            vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3037 = (_2940 * 40u) + 28u;
                            vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3062 = fma(_2273, _3050.z, fma(_2272, _3050.y, _3050.x * _2271)) + _3050.w;
                            _3063 = !((fma(_2273, _3031.z, fma(_2272, _3031.y, _3031.x * _2271)) + _3031.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3063)
                            {
                                float _3090 = _2955.x - _2271;
                                float _3091 = _2955.y - _2272;
                                float _3092 = _2955.z - _2273;
                                float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                                float _3096 = inversesqrt(_3093);
                                float _3097 = _3096 * _3090;
                                float _3098 = _3096 * _3091;
                                float _3099 = _3096 * _3092;
                                float _3103 = 1.0 - (_3093 / (_2956 * _2956));
                                float _4208 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3108 = sqrt(_3093) * _2971.w;
                                float _3110 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                                float _3111 = _3110 * _3110;
                                float _3114 = ((1.0 - _3111) * dot(vec3(_3097, _3098, _3099), vec3(_475, _478, _481))) + _3111;
                                float _3117 = _3108 * _3108;
                                float _3121 = (fma(_2273, _2999.z, fma(_2272, _2999.y, _2999.x * _2271)) + _2999.w) / _3062;
                                float _3122 = (fma(_2273, _3015.z, fma(_2272, _3015.y, _3015.x * _2271)) + _3015.w) / _3062;
                                float _3126 = 1.0 - dot(vec2(_3121, _3122), vec2(_3121, _3122));
                                float _4224 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3128 = _3127 * (((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3104) / ((_3117 * 0.699999988079071044921875) + 1.0));
                                float _3140 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                                float _3141 = 1.0 - _551;
                                float _3148 = sqrt(1.0 - ((1.0 - (_3141 * _3141)) * (1.0 - (_3140 * _3140))));
                                float _3149 = _3148 * _3148;
                                float _3150 = _3149 * _3149;
                                float _3151 = _3097 - _2567;
                                float _3152 = _3098 - _2568;
                                float _3153 = _3099 - _2569;
                                float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                                float _3161 = dot(vec3(_475, _478, _481), vec3((-0.0) - _2567, (-0.0) - _2568, (-0.0) - _2569));
                                float _4235 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3165 = dot(vec3(_475, _478, _481), vec3(_3157 * _3151, _3157 * _3152, _3157 * _3153));
                                float _4246 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3168 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3172 = ((_3168 * _3168) * (_3150 + (-1.0))) + 1.0;
                                float _3173 = _3110 * _3149;
                                float _3174 = _3173 * _3173;
                                float _3180 = ((1.0 - _3174) * dot(vec3(_475, _478, _481), vec3(_3097, _3098, _3099))) + _3174;
                                float _4257 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3182 = 1.0 - _3149;
                                float _3192 = (0.5 / (((_3181 * ((_3164 * _3182) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_3181 * _3182) + _3149) * _3164))) * _3181;
                                float _4268 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3202 = (_3127 * _3104) * (((_3150 * 3.1415927410125732421875) * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) / ((_3172 * _3172) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3128 * _2971.y;
                                frontier_phi_83_pred_1 = _3128 * _2971.x;
                                frontier_phi_83_pred_2 = _3202 * _2983.z;
                                frontier_phi_83_pred_3 = _3202 * _2983.y;
                                frontier_phi_83_pred_4 = _3202 * _2983.x;
                                frontier_phi_83_pred_5 = _3128 * _2971.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3210 = frontier_phi_83_pred;
                            _3209 = frontier_phi_83_pred_1;
                            _3208 = frontier_phi_83_pred_2;
                            _3207 = frontier_phi_83_pred_3;
                            _3206 = frontier_phi_83_pred_4;
                            _3211 = frontier_phi_83_pred_5;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            if (_2930 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2930;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2915;
                        frontier_phi_77_pred_1 = _2914;
                        frontier_phi_77_pred_2 = _2913;
                        frontier_phi_77_pred_3 = _2912;
                        frontier_phi_77_pred_4 = _2911;
                        frontier_phi_77_pred_5 = _2910;
                    }
                    _2552 = frontier_phi_77_pred;
                    _2550 = frontier_phi_77_pred_1;
                    _2548 = frontier_phi_77_pred_2;
                    _2546 = frontier_phi_77_pred_3;
                    _2544 = frontier_phi_77_pred_4;
                    _2542 = frontier_phi_77_pred_5;
                    uint _2708 = _2707 + 1u;
                    if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2701 = _2542;
                        _2702 = _2544;
                        _2703 = _2546;
                        _2704 = _2548;
                        _2705 = _2550;
                        _2706 = _2552;
                        _2707 = _2708;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2546;
                frontier_phi_58_59_ladder_1 = _2552;
                frontier_phi_58_59_ladder_2 = _2550;
                frontier_phi_58_59_ladder_3 = _2548;
                frontier_phi_58_59_ladder_4 = _2544;
                frontier_phi_58_59_ladder_5 = _2542;
            }
            else
            {
                frontier_phi_58_59_ladder = _2424;
                frontier_phi_58_59_ladder_1 = _2430;
                frontier_phi_58_59_ladder_2 = _2428;
                frontier_phi_58_59_ladder_3 = _2426;
                frontier_phi_58_59_ladder_4 = _2422;
                frontier_phi_58_59_ladder_5 = _2420;
            }
            _2541 = frontier_phi_58_59_ladder_5;
            _2543 = frontier_phi_58_59_ladder_4;
            _2545 = frontier_phi_58_59_ladder;
            _2547 = frontier_phi_58_59_ladder_3;
            _2549 = frontier_phi_58_59_ladder_2;
            _2551 = frontier_phi_58_59_ladder_1;
        }
        float _2556 = isnan(1.0) ? _535 : (isnan(_535) ? 1.0 : min(_535, 1.0));
        _2330 = (_2556 * _2547) + _1763;
        _2332 = (_2556 * _2549) + _1765;
        _2334 = (_2556 * _2551) + _1767;
        _2336 = ((_2541 * _520) * _2556) + _2111;
        _2338 = ((_2543 * _522) * _2556) + _2113;
        _2340 = ((_2545 * _523) * _2556) + _2115;
    }
    else
    {
        _2330 = _1763;
        _2332 = _1765;
        _2334 = _1767;
        _2336 = _2111;
        _2338 = _2113;
        _2340 = _2115;
    }
    float _4284 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4295 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4306 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4317 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _2358 = ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2330 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _535))) + ((_2336 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1374)) * cbPerFrame._m0[3u].x);
    float _2359 = ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2332 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _535))) + ((_2338 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1374)) * cbPerFrame._m0[3u].x);
    float _2360 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2334 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _535))) + ((_2340 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1374)) * cbPerFrame._m0[3u].x);
    float _2365 = cbInstanceData._m0[_494 + 6u].w * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)));
    float _2370 = _454 / cbSceneParam._m0[86u].x;
    float _2371 = _455 / cbSceneParam._m0[86u].y;
    vec4 _2385 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2370, _2371, (log2((isnan(cbSceneParam._m0[77u].w) ? _375 : (isnan(_375) ? cbSceneParam._m0[77u].w : min(_375, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2387 = _2385.x;
    float _2388 = _2385.y;
    float _2389 = _2385.z;
    float _2390 = _2385.w;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    if (_375 > cbSceneParam._m0[78u].w)
    {
        float _2445 = isnan(_375) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _375 : min(cbSceneParam._m0[80u].w, _375));
        float _2446 = _2445 / _375;
        float _2457 = _2446 * _426;
        float _2458 = _427 * _2446;
        float _2459 = (-0.0) - _2458;
        float _2461 = _2446 * _428;
        float _2463 = (cbSceneParam._m0[77u].w * _2459) / _2445;
        float _2464 = _2463 + cbSceneParam._m0[79u].w;
        float _2465 = cbSceneParam._m0[79u].w - _2458;
        float _2471 = sqrt(((_2457 * _2457) + (_2458 * _2458)) + (_2461 * _2461));
        float _2474 = (1.0 - (cbSceneParam._m0[77u].w / _2445)) * _2471;
        float _2479 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2481 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2658;
        if (abs((_2459 - _2463) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2658 = ((((_2464 > 0.0) ? exp2(_2479 * _2464) : (2.0 - exp2(_2481 * _2464))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2474;
        }
        else
        {
            float _2602 = 1.0 / cbSceneParam._m0[80u].x;
            float _2603 = isnan(_2465) ? _2464 : (isnan(_2464) ? _2465 : max(_2464, _2465));
            float _2604 = isnan(_2465) ? _2464 : (isnan(_2464) ? _2465 : min(_2464, _2465));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            _2658 = ((abs(_2471 / _2459) * cbSceneParam._m0[80u].y) * ((((_2613 - _2614) * 2.0) - ((exp2(_2479 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0)))) - exp2(_2479 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))))) * _2602)) - ((exp2(_2481 * _2613) - exp2(_2481 * _2614)) * _2602))) + (_2474 * cbSceneParam._m0[80u].z);
        }
        vec4 _2660 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2370, _2371, 1.0), 0.0);
        float _2669 = exp2((_2658 * (-1.44269502162933349609375)) * (1.0 - _2660.w));
        float _2670 = log2(_2669);
        float _2686 = log2(_2390);
        _2483 = (exp2(_2686 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].x)) * _2660.x) / cbSceneParam._m0[78u].x)) + _2387;
        _2485 = (exp2(_2686 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].y)) * _2660.y) / cbSceneParam._m0[78u].y)) + _2388;
        _2487 = (exp2(_2686 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].z)) * _2660.z) / cbSceneParam._m0[78u].z)) + _2389;
        _2489 = _2669 * _2390;
    }
    else
    {
        _2483 = _2387;
        _2485 = _2388;
        _2487 = _2389;
        _2489 = _2390;
    }
    bool _2696;
    vec4 _2499;
    vec4 _2521;
    float _2523;
    float _2527;
    float _2528;
    float _2529;
    float _2530;
    bool _2540;
    for (;;)
    {
        _2499 = cbMatDynParam._m0[0u];
        float _2501 = roundEven(_2499.y);
        bool _2502 = _2501 == 3.0;
        float _2503 = log2(_2489);
        float _2510 = exp2(_2503 * cbSceneParam._m0[78u].x) * _2358;
        float _2511 = exp2(_2503 * cbSceneParam._m0[78u].y) * _2359;
        float _2512 = exp2(_2503 * cbSceneParam._m0[78u].z) * _2360;
        float _2519 = _442 + (-0.5);
        _2521 = cbMtdParam._m0[1u];
        _2523 = _2521.y * _2519;
        float _2526 = (_2501 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2527 = _2526 * (_2502 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2483)));
        _2528 = _2526 * (_2502 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2485)));
        _2529 = _2526 * (_2502 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2487)));
        _2530 = _2519 * 0.999000012874603271484375;
        _2540 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2540)
        {
            if ((cbInstanceData._m0[_494 + 7u].x + _2530) < 0.5)
            {
                _2696 = true;
                break;
            }
        }
        uint _2637 = _496 + uint(_2499.w);
        if ((cbInstanceData._m0[_2637].w < 1.0) && ((cbInstanceData._m0[_2637].w + _2530) < 0.5))
        {
            _2696 = true;
            break;
        }
        if ((_2523 + _296) < _2521.x)
        {
            _2696 = true;
            break;
        }
        _2696 = false;
        break;
    }
    float _2901;
    if (_2696)
    {
        discard_state = true;
        _2901 = 0.0;
    }
    else
    {
        _2901 = _2365;
    }
    SV_Target.x = _2527;
    SV_Target.y = _2528;
    SV_Target.z = _2529;
    SV_Target.w = _2901;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2365;
    discard_exit();
}


