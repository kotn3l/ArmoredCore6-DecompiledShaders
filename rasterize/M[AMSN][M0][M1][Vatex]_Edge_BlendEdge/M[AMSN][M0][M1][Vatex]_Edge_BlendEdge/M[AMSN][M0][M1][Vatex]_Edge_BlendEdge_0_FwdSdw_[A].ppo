#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _938;
float _3614;
float _3615;
float _3616;
float _3617;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    float _265 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _266 = _238.w * TEXCOORD.x;
    float _277 = (_266 < 0.5) ? 0.0 : 1.0;
    float _287 = (((((_266 * 2.0) * (1.0 - _277)) * _265) + (-0.5)) + ((1.0 - (((1.0 - _266) * 2.0) * (1.0 - _265))) * _277)) * cbMtdParam._m0[10u].z;
    precise float _291 = _287 * ((_287 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _292 = cbMtdParam._m0[10u].y + _291;
    float _3626 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _298 = (_293 * _293) * (3.0 - (_293 * 2.0));
    vec4 _310 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _312 = _310.x;
    vec4 _324 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _328 = _324.z;
    float _331 = (_324.x * 2.0) + (-1.0);
    float _333 = (_324.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_331, _333), vec2(_331, _333));
    float _3637 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))));
    float _342 = fma(_339, _208 * NORMAL.x, fma(_333, _215 * TANGENT.x, (_201 * _193) * _331));
    float _345 = fma(_339, _208 * NORMAL.y, fma(_333, _215 * TANGENT.y, (_201 * _194) * _331));
    float _348 = fma(_339, _208 * NORMAL.z, fma(_333, _215 * TANGENT.z, (_201 * _195) * _331));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    float _353 = _352 * _342;
    float _354 = _352 * _345;
    float _355 = _352 * _348;
    float _3648 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _356 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _357 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3681 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3692 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3703 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _361 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _377 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _428 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _418);
    float _429 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _418);
    float _430 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _418);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _435 = _428 * _434;
    float _436 = _429 * _434;
    float _437 = _430 * _434;
    vec4 _442 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _444 = _442.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _619 = sqrt(((_428 * _428) + (_429 * _429)) + (_430 * _430));
        float _625 = (cbMatDynParam._m0[5u].x * _619) + cbMatDynParam._m0[5u].y;
        float _3714 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _630 = (cbMatDynParam._m0[5u].z * _619) + cbMatDynParam._m0[5u].w;
        float _3725 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) - _626)) + _626) < ((_444 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _456 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _457 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _477 = fma(_355, cbSceneParam._m0[5u].z, fma(_354, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _353));
    float _480 = fma(_355, cbSceneParam._m0[6u].z, fma(_354, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _353));
    float _483 = fma(_355, cbSceneParam._m0[7u].z, fma(_354, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _353));
    uint _496 = uint(roundEven(NORMAL.w)) * 13u;
    uint _498 = _496 + 9u;
    uint _499 = _498 + uint(cbMatDynParam._m0[0u].w);
    float _505 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_499].x;
    float _506 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_499].y;
    float _507 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_499].z;
    float _3736 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _511 = 1.0 - _361;
    float _512 = _508 * _511;
    float _513 = _509 * _511;
    float _514 = _510 * _511;
    float _519 = (_508 + (-0.039999999105930328369140625)) * _361;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _361;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _361;
    float _522 = _519 + 0.039999999105930328369140625;
    float _524 = _520 + 0.039999999105930328369140625;
    float _525 = _521 + 0.039999999105930328369140625;
    vec4 _534 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _456, cbSceneParam._m0[86u].y * _457));
    float _537 = _534.x * TEXCOORD.y;
    float _538 = dot(vec3(_353, _354, _355), vec3(_435, _436, _437));
    float _541 = _538 * 2.0;
    float _545 = (_541 * _353) - _435;
    float _546 = (_541 * _354) - _436;
    float _547 = (_541 * _355) - _437;
    float _551 = abs(dot(vec3(_435, _436, _437), vec3(_353, _354, _355)));
    float _3769 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _553 = sqrt(_357);
    float _565 = exp2((_553 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_553 * 3.0));
    float _571 = (1.0 - _565) * ((_553 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _572 = _565 * _553;
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _664 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _668 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _672 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _695 = _600 + _353;
        float _696 = _604 + _354;
        float _697 = _608 + _355;
        float _707 = fma(_697, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) - _664;
        float _708 = fma(_697, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) - _668;
        float _709 = fma(_697, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) - _672;
        float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
        float _726 = ((_713 * _707) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_664 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_713 * _708) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_668 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_713 * _709) / cbModelParam._m0[34u].z) + ((((((_672 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        float _765 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_731.x + (-0.5));
        float _767 = _765 * (_731.y + (-0.5));
        float _768 = _765 * (_731.z + (-0.5));
        float _775 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_738.x + (-0.5));
        float _777 = _775 * (_738.y + (-0.5));
        float _778 = _775 * (_738.z + (-0.5));
        float _785 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_745.x + (-0.5));
        float _787 = _785 * (_745.y + (-0.5));
        float _788 = _785 * (_745.z + (-0.5));
        float _795 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_752.x + (-0.5));
        float _797 = _795 * (_752.y + (-0.5));
        float _798 = _795 * (_752.z + (-0.5));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = _766 * 0.5;
        float _803 = _776 * 0.5;
        float _804 = _786 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _819 = (dot(vec3(_353, _354, _355), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _829 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3817 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_831 + 1.0))) + _836) * _799;
        float _846 = _767 * 0.5;
        float _847 = _777 * 0.5;
        float _848 = _787 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_353, _354, _355), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3850 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_873 + 1.0))) + _878) * _800;
        float _888 = _768 * 0.5;
        float _889 = _778 * 0.5;
        float _890 = _788 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_353, _354, _355), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3883 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_915 + 1.0))) + _920) * _801;
        _937 = _768;
        _939 = _767;
        _940 = _766;
        _941 = _778;
        _942 = _777;
        _943 = _776;
        _944 = _788;
        _945 = _787;
        _946 = _786;
        _947 = _801;
        _948 = _800;
        _949 = _799;
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
    }
    else
    {
        _937 = _938;
        _939 = _938;
        _940 = _938;
        _941 = _938;
        _942 = _938;
        _943 = _938;
        _944 = _938;
        _945 = _938;
        _946 = _938;
        _947 = _938;
        _948 = _938;
        _949 = _938;
        _950 = 0.0;
        _951 = 0.0;
        _952 = 0.0;
    }
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _981 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _985 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _989 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _1012 = _600 + _353;
        float _1013 = _604 + _354;
        float _1014 = _608 + _355;
        float _1024 = fma(_1014, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012)) - _981;
        float _1025 = fma(_1014, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012)) - _985;
        float _1026 = fma(_1014, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012)) - _989;
        float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
        float _1043 = ((_1030 * _1024) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_981 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1030 * _1025) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_985 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1030 * _1026) / cbModelParam._m0[35u].z) + ((((((_989 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        float _1080 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1047.x + (-0.5));
        float _1082 = _1080 * (_1047.y + (-0.5));
        float _1083 = _1080 * (_1047.z + (-0.5));
        float _1090 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1054.x + (-0.5));
        float _1092 = _1090 * (_1054.y + (-0.5));
        float _1093 = _1090 * (_1054.z + (-0.5));
        float _1100 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1061.x + (-0.5));
        float _1102 = _1100 * (_1061.y + (-0.5));
        float _1103 = _1100 * (_1061.z + (-0.5));
        float _1110 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1068.x + (-0.5));
        float _1112 = _1110 * (_1068.y + (-0.5));
        float _1113 = _1110 * (_1068.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_353, _354, _355), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3946 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1144 + 1.0))) + _1149) * _1114;
        float _1159 = _1082 * 0.5;
        float _1160 = _1092 * 0.5;
        float _1161 = _1102 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_353, _354, _355), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3979 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1186 + 1.0))) + _1191) * _1115;
        float _1201 = _1083 * 0.5;
        float _1202 = _1093 * 0.5;
        float _1203 = _1103 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_353, _354, _355), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4012 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1228 + 1.0))) + _1233) * _1116;
        _1250 = _1083;
        _1251 = _1082;
        _1252 = _1081;
        _1253 = _1093;
        _1254 = _1092;
        _1255 = _1091;
        _1256 = _1103;
        _1257 = _1102;
        _1258 = _1101;
        _1259 = _1116;
        _1260 = _1115;
        _1261 = _1114;
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _938;
        _1251 = _938;
        _1252 = _938;
        _1253 = _938;
        _1254 = _938;
        _1255 = _938;
        _1256 = _938;
        _1257 = _938;
        _1258 = _938;
        _1259 = _938;
        _1260 = _938;
        _1261 = _938;
        _1262 = 0.0;
        _1263 = 0.0;
        _1264 = 0.0;
    }
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _950)) + _950;
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _951)) + _951;
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _952)) + _952;
    float _1297 = fma(_1276, cbSceneParam._m0[89u].z, fma(_1275, cbSceneParam._m0[89u].y, _1274 * cbSceneParam._m0[89u].x));
    float _1300 = fma(_1276, cbSceneParam._m0[90u].z, fma(_1275, cbSceneParam._m0[90u].y, _1274 * cbSceneParam._m0[90u].x));
    float _1303 = fma(_1276, cbSceneParam._m0[91u].z, fma(_1275, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1274));
    float _1318 = _545 * 0.5;
    float _1319 = _546 * 0.5;
    float _1320 = _547 * 0.5;
    float _1321 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1324 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1327 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1361;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1334 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_937, _941, _944, _947));
        float _1338 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_939, _942, _945, _948));
        float _1342 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_940, _943, _946, _949));
        float _1349 = dot(vec4(cbModelParam._m0[39u]), vec4(_1318, _1319, _1320, 1.0));
        _1361 = dot(vec3(isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1361 = 1.0;
    }
    float _1372;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1363 = dot(vec4(cbModelParam._m0[40u]), vec4(_1318, _1319, _1320, 1.0));
        _1372 = dot(vec3(isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1372 = 1.0;
    }
    float _1376 = (_1372 * cbModelParam._m0[1u].x) + (_1361 * (1.0 - cbModelParam._m0[1u].x));
    float _1386 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _357);
    float _1387 = isnan(_1386) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1386 : min(cbModelParam._m0[25u].z, _1386));
    float _1469;
    float _1471;
    float _1473;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1436 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1440 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1444 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1447 = fma(_547, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545));
        float _1450 = fma(_547, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545));
        float _1453 = fma(_547, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545));
        float _1481;
        if (_1447 > 0.0)
        {
            _1481 = abs((1.0 - _1436) / _1447);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1436 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1481 = frontier_phi_17_15_ladder;
        }
        float _1657;
        if (_1450 > 0.0)
        {
            _1657 = abs((1.0 - _1440) / _1450);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1440 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1657 = frontier_phi_26_22_ladder;
        }
        float _1953;
        if (_1453 > 0.0)
        {
            _1953 = abs((1.0 - _1444) / _1453);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1444 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1953 = frontier_phi_38_33_ladder;
        }
        float _1955 = isnan(_1657) ? _1481 : (isnan(_1481) ? _1657 : min(_1481, _1657));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1447) + _1436;
        float _1961 = (_1956 * _1450) + _1440;
        float _1962 = (_1956 * _1453) + _1444;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1387);
            frontier_phi_16_38_ladder = _2107.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2107.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2107.x * cbModelParam._m0[1u].y;
        }
        _1469 = frontier_phi_16_38_ladder_2;
        _1471 = frontier_phi_16_38_ladder_1;
        _1473 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_545, _546, _547), _1387);
        _1469 = _1457.x * cbModelParam._m0[1u].y;
        _1471 = _1457.y * cbModelParam._m0[1u].y;
        _1473 = _1457.z * cbModelParam._m0[1u].y;
    }
    float _1477 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _357);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1477 : min(cbModelParam._m0[25u].w, _1477));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1535 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1539 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1543 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1546 = fma(_547, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545));
        float _1549 = fma(_547, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545));
        float _1552 = fma(_547, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545));
        float _1662;
        if (_1546 > 0.0)
        {
            _1662 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1662 = frontier_phi_28_24_ladder;
        }
        float _1980;
        if (_1549 > 0.0)
        {
            _1980 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1980 = frontier_phi_40_35_ladder;
        }
        float _2318;
        if (_1552 > 0.0)
        {
            _2318 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2318 = frontier_phi_50_47_ladder;
        }
        float _2320 = isnan(_1980) ? _1662 : (isnan(_1662) ? _1980 : min(_1662, _1980));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1546) + _1535;
        float _2326 = (_2321 * _1549) + _1539;
        float _2327 = (_2321 * _1552) + _1543;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2328;
        float _2331 = _2328 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2327 > _2331) || ((_2327 < _2329) || ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 < _2329) || (_2325 > _2331))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2327, cbModelParam._m0[17u].z, fma(_2326, cbModelParam._m0[17u].y, _2325 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2327, cbModelParam._m0[18u].z, fma(_2326, cbModelParam._m0[18u].y, _2325 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2327, cbModelParam._m0[19u].z, fma(_2326, cbModelParam._m0[19u].y, _2325 * cbModelParam._m0[19u].x))), _1478);
            frontier_phi_25_50_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1571 = frontier_phi_25_50_ladder_2;
        _1573 = frontier_phi_25_50_ladder_1;
        _1575 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_545, _546, _547), _1478);
        _1571 = _1555.x * cbModelParam._m0[1u].z;
        _1573 = _1555.y * cbModelParam._m0[1u].z;
        _1575 = _1555.z * cbModelParam._m0[1u].z;
    }
    float _1588 = (((_571 * _522) + _572) * _537) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1590 = (((_571 * _524) + _572) * _537) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1592 = (((_571 * _525) + _572) * _537) * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1595 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, _1588 * cbSceneParam._m0[91u].x));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1644 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1648 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1649 = _1636 / _1648;
    float _1650 = _1640 / _1648;
    float _1651 = _1644 / _1648;
    float _1798;
    float _1799;
    float _1800;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1678 = ((uint(_1651 > cbSceneParam._m0[59u].y) + uint(_1651 > cbSceneParam._m0[59u].x)) + uint(_1651 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1679 = _1678 + 43u;
        uint _1687 = _1678 + 44u;
        uint _1695 = _1678 + 45u;
        uint _1703 = _1678 + 46u;
        float _1714 = fma(_1648, cbSceneParam._m0[_1679].w, fma(_1644, cbSceneParam._m0[_1679].z, fma(_1640, cbSceneParam._m0[_1679].y, _1636 * cbSceneParam._m0[_1679].x)));
        float _1718 = fma(_1648, cbSceneParam._m0[_1687].w, fma(_1644, cbSceneParam._m0[_1687].z, fma(_1640, cbSceneParam._m0[_1687].y, _1636 * cbSceneParam._m0[_1687].x)));
        float _1726 = fma(_1648, cbSceneParam._m0[_1703].w, fma(_1644, cbSceneParam._m0[_1703].z, fma(_1640, cbSceneParam._m0[_1703].y, _1636 * cbSceneParam._m0[_1703].x)));
        float _1731 = cbSceneParam._m0[33u].z * _1726;
        float _1733 = cbSceneParam._m0[33u].w * _1726;
        float _1736 = fma(_1648, cbSceneParam._m0[_1695].w, fma(_1644, cbSceneParam._m0[_1695].z, fma(_1640, cbSceneParam._m0[_1695].y, _1636 * cbSceneParam._m0[_1695].x))) / _1726;
        float _1784 = (cbSceneParam._m0[33u].x - sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651))) * cbSceneParam._m0[33u].y;
        float _4138 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1791 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1731 + _1714) / _1726, (_1733 + _1718) / _1726), _1736), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1733 + _1714) / _1726, (_1718 - _1731) / _1726), _1736), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1714 - _1731) / _1726, (_1718 - _1733) / _1726), _1736), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1714 - _1733) / _1726, (_1731 + _1718) / _1726), _1736), 0.0)).x), vec4(0.25)));
        _1798 = 1.0 - (_1791 * cbSceneParam._m0[34u].x);
        _1799 = 1.0 - (_1791 * cbSceneParam._m0[34u].y);
        _1800 = 1.0 - (_1791 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1798 = 1.0;
        _1799 = 1.0;
        _1800 = 1.0;
    }
    float _1864;
    float _1866;
    float _1868;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1852 = fma(_1648, cbSceneParam._m0[63u].w, fma(_1644, cbSceneParam._m0[63u].z, fma(_1640, cbSceneParam._m0[63u].y, _1636 * cbSceneParam._m0[63u].x)));
        float _1853 = fma(_1648, cbSceneParam._m0[60u].w, fma(_1644, cbSceneParam._m0[60u].z, fma(_1640, cbSceneParam._m0[60u].y, _1636 * cbSceneParam._m0[60u].x))) / _1852;
        float _1854 = fma(_1648, cbSceneParam._m0[61u].w, fma(_1644, cbSceneParam._m0[61u].z, fma(_1640, cbSceneParam._m0[61u].y, _1636 * cbSceneParam._m0[61u].x))) / _1852;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1853 >= cbSceneParam._m0[64u].x) && (_1854 >= cbSceneParam._m0[64u].y)) && (_1853 <= cbSceneParam._m0[64u].z)) && (_1854 <= cbSceneParam._m0[64u].w))
        {
            float _1993 = fma(_1648, cbSceneParam._m0[62u].w, fma(_1644, cbSceneParam._m0[62u].z, fma(_1640, cbSceneParam._m0[62u].y, _1636 * cbSceneParam._m0[62u].x))) / _1852;
            float _1997 = isnan(cbSceneParam._m0[41u].w) ? _1993 : (isnan(_1993) ? cbSceneParam._m0[41u].w : max(_1993, cbSceneParam._m0[41u].w));
            float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651))) * cbSceneParam._m0[33u].y;
            float _4154 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
            float _2047 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1853, cbSceneParam._m0[33u].w + _1854), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1853, _1854 - cbSceneParam._m0[33u].z), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1853 - cbSceneParam._m0[33u].z, _1854 - cbSceneParam._m0[33u].w), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1853 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1854), _1997), 0.0)).x), vec4(0.25)));
            float _2051 = 1.0 - (_2047 * cbSceneParam._m0[34u].x);
            float _2052 = 1.0 - (_2047 * cbSceneParam._m0[34u].y);
            float _2053 = 1.0 - (_2047 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2053) ? _1800 : (isnan(_1800) ? _2053 : min(_1800, _2053));
            frontier_phi_37_36_ladder_1 = isnan(_2052) ? _1799 : (isnan(_1799) ? _2052 : min(_1799, _2052));
            frontier_phi_37_36_ladder_2 = isnan(_2051) ? _1798 : (isnan(_1798) ? _2051 : min(_1798, _2051));
        }
        else
        {
            frontier_phi_37_36_ladder = _1800;
            frontier_phi_37_36_ladder_1 = _1799;
            frontier_phi_37_36_ladder_2 = _1798;
        }
        _1864 = frontier_phi_37_36_ladder_2;
        _1866 = frontier_phi_37_36_ladder_1;
        _1868 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1864 = _1798;
        _1866 = _1799;
        _1868 = _1800;
    }
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_496 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _537 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1912 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1916 = _1875 | 1u;
    float _1927 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_353, _354, _355));
    float _1930 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_353, _354, _355));
    float _4190 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _4201 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1935 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _1937 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _1944 = ((cbLight._m0[_1892].x * _1898) * _1937) + (((cbLight._m0[_1902].x * _1864) * _1912) * _1935);
    float _1945 = ((_1898 * cbLight._m0[_1892].y) * _1937) + (((cbLight._m0[_1902].y * _1866) * _1912) * _1935);
    float _1946 = ((_1898 * cbLight._m0[_1892].z) * _1937) + (((cbLight._m0[_1902].z * _1868) * _1912) * _1935);
    uvec4 _1950 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1952 = _1950.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_1952)
    {
        _2054 = _1944;
        _2056 = _1945;
        _2058 = _1946;
    }
    else
    {
        uint _2062 = _1875 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4212 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2081 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1944;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1945;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1946;
    }
    bool _2061 = _1950.y == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2061)
    {
        _2116 = _2054;
        _2118 = _2056;
        _2120 = _2058;
    }
    else
    {
        uint _2289 = _1875 + 7u;
        float _2305 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _2306 = _2305 * _2305;
        float _4228 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2307 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2308 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2116 = (((cbLight._m0[_2289].x * 0.3183098733425140380859375) * _2307) * _2308) + _2054;
        _2118 = (((cbLight._m0[_2289].y * 0.3183098733425140380859375) * _2307) * _2308) + _2056;
        _2120 = (((cbLight._m0[_2289].z * 0.3183098733425140380859375) * _2307) * _2308) + _2058;
    }
    uint _2123 = _1875 + 8u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _357) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1875].x + _435;
    float _2139 = cbLight._m0[_1875].y + _436;
    float _2140 = cbLight._m0[_1875].z + _437;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1875].xyz));
    float _4244 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _2152 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2153 = dot(vec3(_353, _354, _355), vec3(_2145, _2146, _2147));
    float _4266 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2145, _2146, _2147));
    float _4277 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2137 * _2137;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
    float _2174 = 0.959999978542327880859375 - _519;
    float _2176 = 0.959999978542327880859375 - _520;
    float _2177 = 0.959999978542327880859375 - _521;
    float _2184 = 1.0 - _2137;
    float _2195 = (0.5 / (((_2152 * ((_2151 * _2184) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2184) + _2137) * _2151))) * _2151;
    float _4288 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    uint _2211 = _1875 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _357) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_1916].x + _435;
    float _2225 = cbLight._m0[_1916].y + _436;
    float _2226 = cbLight._m0[_1916].z + _437;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1916].xyz));
    float _4299 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2238 = dot(vec3(_353, _354, _355), vec3(_2231, _2232, _2233));
    float _4310 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2231, _2232, _2233));
    float _4321 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2257 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
    float _2264 = 1.0 - _2223;
    float _2274 = (0.5 / (((_2152 * ((_2237 * _2264) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2264) + _2223) * _2237))) * _2237;
    float _4332 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2276 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2286 = (((((_2257 * _2174) + _522) * cbLight._m0[_2211].x) * _2276) * _1898) + ((((cbLight._m0[_2123].x * _1864) * ((_2173 * _2174) + _522)) * _2197) * _1912);
    float _2287 = (((((_2257 * _2176) + _524) * cbLight._m0[_2211].y) * _2276) * _1898) + ((((cbLight._m0[_2123].y * _1866) * ((_2173 * _2176) + _524)) * _2197) * _1912);
    float _2288 = (((((_2257 * _2177) + _525) * cbLight._m0[_2211].z) * _2276) * _1898) + ((((cbLight._m0[_2123].z * _1868) * ((_2173 * _2177) + _525)) * _2197) * _1912);
    float _2344;
    float _2346;
    float _2348;
    if (_1952)
    {
        _2344 = _2286;
        _2346 = _2287;
        _2348 = _2288;
    }
    else
    {
        uint _2350 = _1875 + 2u;
        uint _2354 = _1875 + 10u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _357) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _435;
        float _2371 = cbLight._m0[_2350].y + _436;
        float _2372 = cbLight._m0[_2350].z + _437;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2350].xyz));
        float _4343 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2384 = dot(vec3(_353, _354, _355), vec3(_2377, _2378, _2379));
        float _4354 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4365 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
        float _2410 = 1.0 - _2369;
        float _2420 = (0.5 / (((_2152 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2410) + _2369) * _2383))) * _2383;
        float _4376 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2344 = (((((_2403 * _2174) + _522) * cbLight._m0[_2354].x) * _2422) * _2423) + _2286;
        _2346 = (((((_2403 * _2176) + _524) * cbLight._m0[_2354].y) * _2422) * _2423) + _2287;
        _2348 = (((((_2403 * _2177) + _525) * cbLight._m0[_2354].z) * _2422) * _2423) + _2288;
    }
    float _2454;
    float _2456;
    float _2458;
    if (_2061)
    {
        _2454 = _2344;
        _2456 = _2346;
        _2458 = _2348;
    }
    else
    {
        uint _2465 = _1875 + 3u;
        uint _2469 = _1875 + 11u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _357) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _435;
        float _2486 = cbLight._m0[_2465].y + _436;
        float _2487 = cbLight._m0[_2465].z + _437;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2465].xyz));
        float _4392 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2499 = dot(vec3(_353, _354, _355), vec3(_2492, _2493, _2494));
        float _4403 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4414 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2152 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2525) + _2484) * _2498))) * _2498;
        float _4425 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2454 = (((((_2518 * _2174) + _522) * cbLight._m0[_2469].x) * _2537) * _2538) + _2344;
        _2456 = (((((_2518 * _2176) + _524) * cbLight._m0[_2469].y) * _2537) * _2538) + _2346;
        _2458 = (((((_2518 * _2177) + _525) * cbLight._m0[_2469].z) * _2537) * _2538) + _2348;
    }
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_1873.y == 0u)
    {
        uvec4 _2559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2560 = _2559.x;
        uint _2571 = uint((float(_2559.y) * floor(float(uint(cbSceneParam._m0[85u].y * _457) / _2560))) + floor(float(uint(cbSceneParam._m0[85u].x * _456) / _2560)));
        float _2581 = (log2(_1651 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2582 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        uint _2585 = uint(isnan(14.0) ? _2582 : (isnan(_2582) ? 14.0 : min(_2582, 14.0)));
        uvec4 _2590 = texelFetch(g_lightClusterGridBuffer, int(((_2585 << 2u) + (_2571 << 6u)) >> 2u));
        uint _2591 = _2590.x;
        uint _2592 = _2559.z;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((((1u << ((_2592 >> 4u) & 15u)) + 4294967295u) & _2591) == 0u) || ((_2592 & 240u) == 0u))
        {
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
        }
        else
        {
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2842)
                {
                    frontier_phi_71_pred = _2831;
                    frontier_phi_71_pred_1 = _2830;
                    frontier_phi_71_pred_2 = _2829;
                    frontier_phi_71_pred_3 = _2828;
                    frontier_phi_71_pred_4 = _2827;
                    frontier_phi_71_pred_5 = _2826;
                }
                else
                {
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    uint _2977;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2841;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    for (;;)
                    {
                        uint _2981 = uint(findLSB(_2977)) + (_2832 << 5u);
                        uint _2978 = (_2977 + 4294967295u) & _2977;
                        uint _2983 = _2981 * 48u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 3u)).x));
                        uint _3003 = (_2981 * 48u) + 4u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3022 = (_2981 * 48u) + 8u;
                        vec3 _3033 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x));
                        float _3037 = _2997.x - _1649;
                        float _3038 = _2997.y - _1650;
                        float _3039 = _2997.z - _1651;
                        float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                        float _3043 = inversesqrt(_3040);
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3047 = dot(vec3(_477, _480, _483), vec3(_3044, _3045, _3046));
                        float _3052 = 1.0 - (_3040 * _2997.w);
                        float _4451 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3054 = sqrt(_3040) * _3016.w;
                        float _3057 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                        float _3058 = _3057 * _3057;
                        float _3061 = ((1.0 - _3058) * _3047) + _3058;
                        float _3064 = _3054 * _3054;
                        float _3068 = ((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3053) / ((_3064 * 0.699999988079071044921875) + 1.0);
                        float _3072 = (-0.0) - _1649;
                        float _3073 = (-0.0) - _1650;
                        float _3074 = (-0.0) - _1651;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3088 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                        float _3089 = 1.0 - _553;
                        float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                        float _3097 = _3096 * _3096;
                        float _3098 = _3097 * _3097;
                        float _3099 = _3079 + _3044;
                        float _3100 = _3080 + _3045;
                        float _3101 = _3081 + _3046;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3109 = dot(vec3(_477, _480, _483), vec3(_3079, _3080, _3081));
                        float _4467 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3113 = dot(vec3(_477, _480, _483), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                        float _4478 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                        float _3121 = _3057 * _3097;
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3047) + _3122;
                        float _4489 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3127 = 1.0 - _3097;
                        float _3137 = (0.5 / (((_3126 * ((_3112 * _3127) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3097) * _3112))) * _3126;
                        float _4500 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3148 = (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3120 * _3120) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125))) * _3053;
                        _2901 = (_3068 * _3016.x) + _2974;
                        _2902 = (_3068 * _3016.y) + _2975;
                        _2903 = (_3068 * _3016.z) + _2976;
                        _2898 = (_3148 * _3033.x) + _2971;
                        _2899 = (_3148 * _3033.y) + _2972;
                        _2900 = (_3148 * _3033.z) + _2973;
                        if (_2978 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2978;
                        }
                    }
                    frontier_phi_71_pred = _2903;
                    frontier_phi_71_pred_1 = _2902;
                    frontier_phi_71_pred_2 = _2901;
                    frontier_phi_71_pred_3 = _2900;
                    frontier_phi_71_pred_4 = _2899;
                    frontier_phi_71_pred_5 = _2898;
                }
                _2684 = frontier_phi_71_pred;
                _2682 = frontier_phi_71_pred_1;
                _2680 = frontier_phi_71_pred_2;
                _2678 = frontier_phi_71_pred_3;
                _2676 = frontier_phi_71_pred_4;
                _2674 = frontier_phi_71_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2674;
                    _2827 = _2676;
                    _2828 = _2678;
                    _2829 = _2680;
                    _2830 = _2682;
                    _2831 = _2684;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
        }
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.z;
        uint _2690 = (_2688 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2690) & _2591) == 0u)
        {
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
            _2802 = _2681;
            _2804 = _2683;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651)));
            float _2820 = _2819 * _1649;
            float _2821 = _2819 * _1650;
            float _2822 = _2819 * _1651;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2690 < ((_2688 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2954 = _2673;
                float _2955 = _2675;
                float _2956 = _2677;
                float _2957 = _2679;
                float _2958 = _2681;
                float _2959 = _2683;
                uint _2960 = _2690;
                uint _2969;
                bool _2970;
                for (;;)
                {
                    _2969 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                    _2970 = _2969 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2970)
                    {
                        frontier_phi_82_pred = _2959;
                        frontier_phi_82_pred_1 = _2958;
                        frontier_phi_82_pred_2 = _2957;
                        frontier_phi_82_pred_3 = _2956;
                        frontier_phi_82_pred_4 = _2955;
                        frontier_phi_82_pred_5 = _2954;
                    }
                    else
                    {
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3175 = _2954;
                        float _3176 = _2955;
                        float _3177 = _2956;
                        float _3178 = _2957;
                        float _3179 = _2958;
                        float _3180 = _2959;
                        uint _3181 = _2969;
                        uint _3182;
                        vec4 _3207;
                        float _3208;
                        vec4 _3223;
                        vec3 _3235;
                        vec4 _3251;
                        vec4 _3267;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            uint _3192 = ((_2960 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3181));
                            _3182 = (_3181 + 4294967295u) & _3181;
                            uint _3194 = _3192 * 40u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3208 = _3207.w;
                            uint _3210 = (_3192 * 40u) + 4u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3192 * 40u) + 8u;
                            _3235 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x));
                            uint _3238 = (_3192 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3254 = (_3192 * 40u) + 20u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3270 = (_3192 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3192 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_1651, _3302.z, fma(_1650, _3302.y, _3302.x * _1649)) + _3302.w;
                            _3315 = !((fma(_1651, _3283.z, fma(_1650, _3283.y, _3283.x * _1649)) + _3283.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3315)
                            {
                                float _3342 = _3207.x - _1649;
                                float _3343 = _3207.y - _1650;
                                float _3344 = _3207.z - _1651;
                                float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                                float _3348 = inversesqrt(_3345);
                                float _3349 = _3348 * _3342;
                                float _3350 = _3348 * _3343;
                                float _3351 = _3348 * _3344;
                                float _3355 = 1.0 - (_3345 / (_3208 * _3208));
                                float _4511 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3360 = sqrt(_3345) * _3223.w;
                                float _3362 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                                float _3363 = _3362 * _3362;
                                float _3366 = ((1.0 - _3363) * dot(vec3(_3349, _3350, _3351), vec3(_477, _480, _483))) + _3363;
                                float _3369 = _3360 * _3360;
                                float _3373 = (fma(_1651, _3251.z, fma(_1650, _3251.y, _3251.x * _1649)) + _3251.w) / _3314;
                                float _3374 = (fma(_1651, _3267.z, fma(_1650, _3267.y, _3267.x * _1649)) + _3267.w) / _3314;
                                float _3378 = 1.0 - dot(vec2(_3373, _3374), vec2(_3373, _3374));
                                float _4527 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3380 = _3379 * (((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3356) / ((_3369 * 0.699999988079071044921875) + 1.0));
                                float _3392 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                                float _3393 = 1.0 - _553;
                                float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                                float _3401 = _3400 * _3400;
                                float _3402 = _3401 * _3401;
                                float _3403 = _3349 - _2820;
                                float _3404 = _3350 - _2821;
                                float _3405 = _3351 - _2822;
                                float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                                float _3413 = dot(vec3(_477, _480, _483), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4538 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3417 = dot(vec3(_477, _480, _483), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                                float _4549 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                                float _3425 = _3362 * _3401;
                                float _3426 = _3425 * _3425;
                                float _3432 = ((1.0 - _3426) * dot(vec3(_477, _480, _483), vec3(_3349, _3350, _3351))) + _3426;
                                float _4560 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3434 = 1.0 - _3401;
                                float _3444 = (0.5 / (((_3433 * ((_3416 * _3434) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3401) * _3416))) * _3433;
                                float _4571 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3454 = (_3379 * _3356) * (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3424 * _3424) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3380 * _3223.z;
                                frontier_phi_88_pred_1 = _3380 * _3223.y;
                                frontier_phi_88_pred_2 = _3380 * _3223.x;
                                frontier_phi_88_pred_3 = _3454 * _3235.z;
                                frontier_phi_88_pred_4 = _3454 * _3235.y;
                                frontier_phi_88_pred_5 = _3454 * _3235.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3463 = frontier_phi_88_pred;
                            _3462 = frontier_phi_88_pred_1;
                            _3461 = frontier_phi_88_pred_2;
                            _3460 = frontier_phi_88_pred_3;
                            _3459 = frontier_phi_88_pred_4;
                            _3458 = frontier_phi_88_pred_5;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            _3167 = _3463 + _3180;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            _3164 = _3460 + _3177;
                            if (_3182 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3182;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3167;
                        frontier_phi_82_pred_1 = _3166;
                        frontier_phi_82_pred_2 = _3165;
                        frontier_phi_82_pred_3 = _3164;
                        frontier_phi_82_pred_4 = _3163;
                        frontier_phi_82_pred_5 = _3162;
                    }
                    _2805 = frontier_phi_82_pred;
                    _2803 = frontier_phi_82_pred_1;
                    _2801 = frontier_phi_82_pred_2;
                    _2799 = frontier_phi_82_pred_3;
                    _2797 = frontier_phi_82_pred_4;
                    _2795 = frontier_phi_82_pred_5;
                    uint _2961 = _2960 + 1u;
                    if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2954 = _2795;
                        _2955 = _2797;
                        _2956 = _2799;
                        _2957 = _2801;
                        _2958 = _2803;
                        _2959 = _2805;
                        _2960 = _2961;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2801;
                frontier_phi_63_64_ladder_1 = _2805;
                frontier_phi_63_64_ladder_2 = _2803;
                frontier_phi_63_64_ladder_3 = _2799;
                frontier_phi_63_64_ladder_4 = _2797;
                frontier_phi_63_64_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_63_64_ladder = _2679;
                frontier_phi_63_64_ladder_1 = _2683;
                frontier_phi_63_64_ladder_2 = _2681;
                frontier_phi_63_64_ladder_3 = _2677;
                frontier_phi_63_64_ladder_4 = _2675;
                frontier_phi_63_64_ladder_5 = _2673;
            }
            _2794 = frontier_phi_63_64_ladder_5;
            _2796 = frontier_phi_63_64_ladder_4;
            _2798 = frontier_phi_63_64_ladder_3;
            _2800 = frontier_phi_63_64_ladder;
            _2802 = frontier_phi_63_64_ladder_2;
            _2804 = frontier_phi_63_64_ladder_1;
        }
        float _2809 = isnan(1.0) ? _537 : (isnan(_537) ? 1.0 : min(_537, 1.0));
        _2604 = (_2809 * _2800) + _2116;
        _2606 = (_2809 * _2802) + _2118;
        _2608 = (_2809 * _2804) + _2120;
        _2610 = ((_2794 * _522) * _2809) + _2454;
        _2612 = ((_2796 * _524) * _2809) + _2456;
        _2614 = ((_2798 * _525) * _2809) + _2458;
    }
    else
    {
        _2604 = _2116;
        _2606 = _2118;
        _2608 = _2120;
        _2610 = _2454;
        _2612 = _2456;
        _2614 = _2458;
    }
    float _4587 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4598 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4609 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4620 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _2632 = ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2604 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _537))) + ((_2610 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1376)) * cbPerFrame._m0[3u].x);
    float _2633 = ((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2606 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _537))) + ((_2612 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _1376)) * cbPerFrame._m0[3u].x);
    float _2634 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2608 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _537))) + ((_2614 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1376)) * cbPerFrame._m0[3u].x);
    float _2639 = cbInstanceData._m0[_496 + 6u].w * (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)));
    float _2644 = _456 / cbSceneParam._m0[86u].x;
    float _2645 = _457 / cbSceneParam._m0[86u].y;
    vec4 _2659 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, (log2((isnan(cbSceneParam._m0[77u].w) ? _377 : (isnan(_377) ? cbSceneParam._m0[77u].w : min(_377, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2661 = _2659.x;
    float _2662 = _2659.y;
    float _2663 = _2659.z;
    float _2664 = _2659.w;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_377 > cbSceneParam._m0[78u].w)
    {
        float _2698 = isnan(_377) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _377 : min(cbSceneParam._m0[80u].w, _377));
        float _2699 = _2698 / _377;
        float _2710 = _2699 * _428;
        float _2711 = _429 * _2699;
        float _2712 = (-0.0) - _2711;
        float _2714 = _2699 * _430;
        float _2716 = (cbSceneParam._m0[77u].w * _2712) / _2698;
        float _2717 = _2716 + cbSceneParam._m0[79u].w;
        float _2718 = cbSceneParam._m0[79u].w - _2711;
        float _2724 = sqrt(((_2710 * _2710) + (_2711 * _2711)) + (_2714 * _2714));
        float _2727 = (1.0 - (cbSceneParam._m0[77u].w / _2698)) * _2724;
        float _2732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2911;
        if (abs((_2712 - _2716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2911 = ((((_2717 > 0.0) ? exp2(_2732 * _2717) : (2.0 - exp2(_2734 * _2717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2727;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : max(_2717, _2718));
            float _2857 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : min(_2717, _2718));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2911 = ((abs(_2724 / _2712) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2732 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2732 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2734 * _2866) - exp2(_2734 * _2867)) * _2855))) + (_2727 * cbSceneParam._m0[80u].z);
        }
        vec4 _2913 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, 1.0), 0.0);
        float _2922 = exp2((_2911 * (-1.44269502162933349609375)) * (1.0 - _2913.w));
        float _2923 = log2(_2922);
        float _2939 = log2(_2664);
        _2736 = (exp2(_2939 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].x)) * _2913.x) / cbSceneParam._m0[78u].x)) + _2661;
        _2738 = (exp2(_2939 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].y)) * _2913.y) / cbSceneParam._m0[78u].y)) + _2662;
        _2740 = (exp2(_2939 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].z)) * _2913.z) / cbSceneParam._m0[78u].z)) + _2663;
        _2742 = _2922 * _2664;
    }
    else
    {
        _2736 = _2661;
        _2738 = _2662;
        _2740 = _2663;
        _2742 = _2664;
    }
    bool _2949;
    vec4 _2752;
    vec4 _2774;
    float _2776;
    float _2780;
    float _2781;
    float _2782;
    float _2783;
    bool _2793;
    for (;;)
    {
        _2752 = cbMatDynParam._m0[0u];
        float _2754 = roundEven(_2752.y);
        bool _2755 = _2754 == 3.0;
        float _2756 = log2(_2742);
        float _2763 = exp2(_2756 * cbSceneParam._m0[78u].x) * _2632;
        float _2764 = exp2(_2756 * cbSceneParam._m0[78u].y) * _2633;
        float _2765 = exp2(_2756 * cbSceneParam._m0[78u].z) * _2634;
        float _2772 = _444 + (-0.5);
        _2774 = cbMtdParam._m0[1u];
        _2776 = _2774.y * _2772;
        float _2779 = (_2754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2780 = _2779 * (_2755 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2736)));
        _2781 = _2779 * (_2755 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2738)));
        _2782 = _2779 * (_2755 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2740)));
        _2783 = _2772 * 0.999000012874603271484375;
        _2793 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2793)
        {
            if ((cbInstanceData._m0[_496 + 7u].x + _2783) < 0.5)
            {
                _2949 = true;
                break;
            }
        }
        uint _2890 = _498 + uint(_2752.w);
        if ((cbInstanceData._m0[_2890].w < 1.0) && ((cbInstanceData._m0[_2890].w + _2783) < 0.5))
        {
            _2949 = true;
            break;
        }
        if ((_2776 + _298) < _2774.x)
        {
            _2949 = true;
            break;
        }
        _2949 = false;
        break;
    }
    float _3153;
    if (_2949)
    {
        discard_state = true;
        _3153 = 0.0;
    }
    else
    {
        _3153 = _2639;
    }
    SV_Target.x = _2780;
    SV_Target.y = _2781;
    SV_Target.z = _2782;
    SV_Target.w = _3153;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2639;
    discard_exit();
}


