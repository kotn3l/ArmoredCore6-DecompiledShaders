#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _934;
float _3327;
float _3328;
float _3329;
float _3330;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    float _261 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.w) + cbTextureTilingScale._m0[1u].w)).x * cbMtdParam._m0[10u].x;
    float _262 = _234.w * TEXCOORD.x;
    float _273 = (_262 < 0.5) ? 0.0 : 1.0;
    float _283 = (((((_262 * 2.0) * (1.0 - _273)) * _261) + (-0.5)) + ((1.0 - (((1.0 - _262) * 2.0) * (1.0 - _261))) * _273)) * cbMtdParam._m0[10u].z;
    precise float _287 = _283 * ((_283 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _288 = cbMtdParam._m0[10u].y + _287;
    float _3339 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _289 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _294 = (_289 * _289) * (3.0 - (_289 * 2.0));
    vec4 _306 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _308 = _306.x;
    vec4 _320 = texture(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _324 = _320.z;
    float _327 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3350 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))));
    float _338 = fma(_335, _204 * NORMAL.x, fma(_329, _211 * TANGENT.x, (_197 * _189) * _327));
    float _341 = fma(_335, _204 * NORMAL.y, fma(_329, _211 * TANGENT.y, (_197 * _190) * _327));
    float _344 = fma(_335, _204 * NORMAL.z, fma(_329, _211 * TANGENT.z, (_197 * _191) * _327));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _349 = _348 * _338;
    float _350 = _348 * _341;
    float _351 = _348 * _344;
    float _3361 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _352 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _353 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3394 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3405 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3416 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _357 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _373 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _424 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _414);
    float _425 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _414);
    float _426 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _414);
    float _430 = inversesqrt(dot(vec3(_424, _425, _426), vec3(_424, _425, _426)));
    float _431 = _424 * _430;
    float _432 = _425 * _430;
    float _433 = _426 * _430;
    vec4 _438 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _440 = _438.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _615 = sqrt(((_424 * _424) + (_425 * _425)) + (_426 * _426));
        float _621 = (cbMatDynParam._m0[5u].x * _615) + cbMatDynParam._m0[5u].y;
        float _3427 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _626 = (cbMatDynParam._m0[5u].z * _615) + cbMatDynParam._m0[5u].w;
        float _3438 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) - _622)) + _622) < ((_440 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _452 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _453 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _473 = fma(_351, cbSceneParam._m0[5u].z, fma(_350, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _349));
    float _476 = fma(_351, cbSceneParam._m0[6u].z, fma(_350, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _349));
    float _479 = fma(_351, cbSceneParam._m0[7u].z, fma(_350, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _349));
    uint _492 = uint(roundEven(NORMAL.w)) * 13u;
    uint _494 = _492 + 9u;
    uint _495 = _494 + uint(cbMatDynParam._m0[0u].w);
    float _501 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_495].x;
    float _502 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_495].y;
    float _503 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_495].z;
    float _3449 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _507 = 1.0 - _357;
    float _508 = _504 * _507;
    float _509 = _505 * _507;
    float _510 = _506 * _507;
    float _515 = (_504 + (-0.039999999105930328369140625)) * _357;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _357;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _357;
    float _518 = _515 + 0.039999999105930328369140625;
    float _520 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    vec4 _530 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _452, cbSceneParam._m0[86u].y * _453));
    float _533 = _530.x * TEXCOORD.y;
    float _534 = dot(vec3(_349, _350, _351), vec3(_431, _432, _433));
    float _537 = _534 * 2.0;
    float _541 = (_537 * _349) - _431;
    float _542 = (_537 * _350) - _432;
    float _543 = (_537 * _351) - _433;
    float _547 = abs(dot(vec3(_431, _432, _433), vec3(_349, _350, _351)));
    float _3482 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _549 = sqrt(_353);
    float _561 = exp2((_549 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_549 * 3.0));
    float _567 = (1.0 - _561) * ((_549 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _568 = _561 * _549;
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _660 = fma(_604, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596));
        float _664 = fma(_604, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596));
        float _668 = fma(_604, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596));
        float _691 = _596 + _349;
        float _692 = _600 + _350;
        float _693 = _604 + _351;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _660;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _664;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _668;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_660 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_664 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_668 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_349, _350, _351), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3530 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_349, _350, _351), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3563 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_349, _350, _351), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3596 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _977 = fma(_604, cbModelParam._m0[30u].z, fma(_600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _596));
        float _981 = fma(_604, cbModelParam._m0[31u].z, fma(_600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _596));
        float _985 = fma(_604, cbModelParam._m0[32u].z, fma(_600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _596));
        float _1008 = _596 + _349;
        float _1009 = _600 + _350;
        float _1010 = _604 + _351;
        float _1020 = fma(_1010, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_977 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_981 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[35u].z) + ((((((_985 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1076 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1043.x + (-0.5));
        float _1078 = _1076 * (_1043.y + (-0.5));
        float _1079 = _1076 * (_1043.z + (-0.5));
        float _1086 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1050.x + (-0.5));
        float _1088 = _1086 * (_1050.y + (-0.5));
        float _1089 = _1086 * (_1050.z + (-0.5));
        float _1096 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1057.x + (-0.5));
        float _1098 = _1096 * (_1057.y + (-0.5));
        float _1099 = _1096 * (_1057.z + (-0.5));
        float _1106 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1064.x + (-0.5));
        float _1108 = _1106 * (_1064.y + (-0.5));
        float _1109 = _1106 * (_1064.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_349, _350, _351), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3659 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1140 + 1.0))) + _1145) * _1110;
        float _1155 = _1078 * 0.5;
        float _1156 = _1088 * 0.5;
        float _1157 = _1098 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_349, _350, _351), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3692 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1182 + 1.0))) + _1187) * _1111;
        float _1197 = _1079 * 0.5;
        float _1198 = _1089 * 0.5;
        float _1199 = _1099 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_349, _350, _351), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3725 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1224 + 1.0))) + _1229) * _1112;
        _1246 = _1079;
        _1247 = _1078;
        _1248 = _1077;
        _1249 = _1089;
        _1250 = _1088;
        _1251 = _1087;
        _1252 = _1099;
        _1253 = _1098;
        _1254 = _1097;
        _1255 = _1112;
        _1256 = _1111;
        _1257 = _1110;
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = _934;
        _1256 = _934;
        _1257 = _934;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _947)) + _947;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1293 = fma(_1272, cbSceneParam._m0[89u].z, fma(_1271, cbSceneParam._m0[89u].y, _1270 * cbSceneParam._m0[89u].x));
    float _1296 = fma(_1272, cbSceneParam._m0[90u].z, fma(_1271, cbSceneParam._m0[90u].y, _1270 * cbSceneParam._m0[90u].x));
    float _1299 = fma(_1272, cbSceneParam._m0[91u].z, fma(_1271, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1270));
    float _1314 = _541 * 0.5;
    float _1315 = _542 * 0.5;
    float _1316 = _543 * 0.5;
    float _1317 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1320 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1323 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1357;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1330 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_933, _937, _940, _943));
        float _1334 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_935, _938, _941, _944));
        float _1338 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_936, _939, _942, _945));
        float _1345 = dot(vec4(cbModelParam._m0[39u]), vec4(_1314, _1315, _1316, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1368;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1359 = dot(vec4(cbModelParam._m0[40u]), vec4(_1314, _1315, _1316, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1372 = (_1368 * cbModelParam._m0[1u].x) + (_1357 * (1.0 - cbModelParam._m0[1u].x));
    float _1382 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1382 : min(cbModelParam._m0[25u].z, _1382));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_604, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_604, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_604, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_543, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541));
        float _1446 = fma(_543, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541));
        float _1449 = fma(_543, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1477 = frontier_phi_17_15_ladder;
        }
        float _1685;
        if (_1446 > 0.0)
        {
            _1685 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1685 = frontier_phi_26_22_ladder;
        }
        float _1939;
        if (_1449 > 0.0)
        {
            _1939 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1939 = frontier_phi_38_33_ladder;
        }
        float _1941 = isnan(_1685) ? _1477 : (isnan(_1477) ? _1685 : min(_1477, _1685));
        float _1942 = isnan(_1939) ? _1941 : (isnan(_1941) ? _1939 : min(_1941, _1939));
        float _1946 = (_1942 * _1443) + _1432;
        float _1947 = (_1942 * _1446) + _1436;
        float _1948 = (_1942 * _1449) + _1440;
        float _1949 = _1942 * 9.9999997473787516355514526367188e-05;
        float _1951 = (-1.0) - _1949;
        float _1953 = _1949 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1948 > _1953) || ((_1948 < _1951) || ((_1947 > _1953) || ((_1947 < _1951) || ((_1946 < _1951) || (_1946 > _1953))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1948, cbModelParam._m0[9u].z, fma(_1947, cbModelParam._m0[9u].y, _1946 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1948, cbModelParam._m0[10u].z, fma(_1947, cbModelParam._m0[10u].y, _1946 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1948, cbModelParam._m0[11u].z, fma(_1947, cbModelParam._m0[11u].y, _1946 * cbModelParam._m0[11u].x))), _1383);
            frontier_phi_16_38_ladder = _2076.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2076.x * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_16_38_ladder_2;
        _1467 = frontier_phi_16_38_ladder_1;
        _1469 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_541, _542, _543), _1383);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1531 = fma(_604, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596)) + cbModelParam._m0[21u].w;
        float _1535 = fma(_604, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596)) + cbModelParam._m0[22u].w;
        float _1539 = fma(_604, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596)) + cbModelParam._m0[23u].w;
        float _1542 = fma(_543, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541));
        float _1545 = fma(_543, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541));
        float _1548 = fma(_543, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541));
        float _1690;
        if (_1542 > 0.0)
        {
            _1690 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1690 = frontier_phi_28_24_ladder;
        }
        float _1966;
        if (_1545 > 0.0)
        {
            _1966 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1966 = frontier_phi_40_35_ladder;
        }
        float _2179;
        if (_1548 > 0.0)
        {
            _2179 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2179 = frontier_phi_49_46_ladder;
        }
        float _2181 = isnan(_1966) ? _1690 : (isnan(_1690) ? _1966 : min(_1690, _1966));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1542) + _1531;
        float _2187 = (_2182 * _1545) + _1535;
        float _2188 = (_2182 * _1548) + _1539;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2189;
        float _2192 = _2189 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2188 > _2192) || ((_2188 < _2190) || ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 < _2190) || (_2186 > _2192))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2188, cbModelParam._m0[17u].z, fma(_2187, cbModelParam._m0[17u].y, _2186 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2188, cbModelParam._m0[18u].z, fma(_2187, cbModelParam._m0[18u].y, _2186 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2188, cbModelParam._m0[19u].z, fma(_2187, cbModelParam._m0[19u].y, _2186 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_25_49_ladder = _2389.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2389.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2389.x * cbModelParam._m0[1u].z;
        }
        _1567 = frontier_phi_25_49_ladder_2;
        _1569 = frontier_phi_25_49_ladder_1;
        _1571 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_541, _542, _543), _1474);
        _1567 = _1551.x * cbModelParam._m0[1u].z;
        _1569 = _1551.y * cbModelParam._m0[1u].z;
        _1571 = _1551.z * cbModelParam._m0[1u].z;
    }
    float _1584 = (((_567 * _518) + _568) * _533) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_567 * _520) + _568) * _533) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_567 * _521) + _568) * _533) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1591 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, _1584 * cbSceneParam._m0[91u].x));
    uvec4 _1607 = floatBitsToUint(cbInstanceData._m0[_492 + 5u]);
    uint _1609 = _1607.x * 14u;
    uint _1610 = _1609 + 13u;
    float _1617 = _533 + (-1.0);
    float _1622 = (cbLight._m0[_1610].x * _1617) + 1.0;
    float _1623 = (cbLight._m0[_1610].y * _1617) + 1.0;
    float _1624 = (cbLight._m0[_1610].z * _1617) + 1.0;
    float _1625 = (cbLight._m0[_1610].w * _1617) + 1.0;
    uint _1626 = _1609 + 5u;
    float _1632 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1636 = _1609 + 4u;
    float _1643 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
    uint _1647 = _1609 | 1u;
    float _1658 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_349, _350, _351));
    float _1661 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_349, _350, _351));
    float _3861 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _3872 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1666 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1668 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
    float _1675 = ((cbLight._m0[_1626].x * _1632) * _1668) + ((cbLight._m0[_1636].x * _1643) * _1666);
    float _1676 = ((_1632 * cbLight._m0[_1626].y) * _1668) + ((_1643 * cbLight._m0[_1636].y) * _1666);
    float _1677 = ((_1632 * cbLight._m0[_1626].z) * _1668) + ((_1643 * cbLight._m0[_1636].z) * _1666);
    uvec4 _1682 = floatBitsToUint(cbLight._m0[_1609 + 12u]);
    bool _1684 = _1682.x == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1684)
    {
        _1695 = _1675;
        _1697 = _1676;
        _1699 = _1677;
    }
    else
    {
        uint _1703 = _1609 + 6u;
        float _1719 = (dot(vec3(cbLight._m0[_1609 + 2u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1720 = _1719 * _1719;
        float _3883 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1722 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1695 = (((cbLight._m0[_1703].x * 0.3183098733425140380859375) * _1721) * _1722) + _1675;
        _1697 = (((cbLight._m0[_1703].y * 0.3183098733425140380859375) * _1721) * _1722) + _1676;
        _1699 = (((cbLight._m0[_1703].z * 0.3183098733425140380859375) * _1721) * _1722) + _1677;
    }
    bool _1702 = _1682.y == 0u;
    float _1740;
    float _1742;
    float _1744;
    if (_1702)
    {
        _1740 = _1695;
        _1742 = _1697;
        _1744 = _1699;
    }
    else
    {
        uint _1910 = _1609 + 7u;
        float _1926 = (dot(vec3(cbLight._m0[_1609 + 3u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1927 = _1926 * _1926;
        float _3899 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1929 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1740 = (((cbLight._m0[_1910].x * 0.3183098733425140380859375) * _1928) * _1929) + _1695;
        _1742 = (((cbLight._m0[_1910].y * 0.3183098733425140380859375) * _1928) * _1929) + _1697;
        _1744 = (((cbLight._m0[_1910].z * 0.3183098733425140380859375) * _1928) * _1929) + _1699;
    }
    uint _1747 = _1609 + 8u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1609].w)) * _353) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1609].x + _431;
    float _1763 = cbLight._m0[_1609].y + _432;
    float _1764 = cbLight._m0[_1609].z + _433;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1609].xyz));
    float _3915 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _1776 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1777 = dot(vec3(_349, _350, _351), vec3(_1769, _1770, _1771));
    float _3937 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_1769, _1770, _1771));
    float _3948 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1761 * _1761;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1797 = exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0);
    float _1798 = 0.959999978542327880859375 - _515;
    float _1800 = 0.959999978542327880859375 - _516;
    float _1801 = 0.959999978542327880859375 - _517;
    float _1808 = 1.0 - _1761;
    float _1819 = (0.5 / (((_1776 * ((_1775 * _1808) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1808) + _1761) * _1775))) * _1775;
    float _3959 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1821 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    uint _1832 = _1609 + 9u;
    float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _353) * 0.949999988079071044921875);
    float _1844 = _1843 * _1843;
    float _1845 = cbLight._m0[_1647].x + _431;
    float _1846 = cbLight._m0[_1647].y + _432;
    float _1847 = cbLight._m0[_1647].z + _433;
    float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
    float _1852 = _1851 * _1845;
    float _1853 = _1851 * _1846;
    float _1854 = _1851 * _1847;
    float _1855 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1647].xyz));
    float _3970 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1859 = dot(vec3(_349, _350, _351), vec3(_1852, _1853, _1854));
    float _3981 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1863 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1852, _1853, _1854));
    float _3992 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1867 = _1844 * _1844;
    float _1871 = ((_1862 * _1862) * (_1867 + (-1.0))) + 1.0;
    float _1878 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
    float _1885 = 1.0 - _1844;
    float _1895 = (0.5 / (((_1776 * ((_1858 * _1885) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1885) + _1844) * _1858))) * _1858;
    float _4003 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1867 / ((_1871 * _1871) * 3.141590118408203125));
    float _1907 = (((((_1878 * _1798) + _518) * cbLight._m0[_1832].x) * _1897) * _1632) + (((((_1797 * _1798) + _518) * cbLight._m0[_1747].x) * _1821) * _1643);
    float _1908 = (((((_1878 * _1800) + _520) * cbLight._m0[_1832].y) * _1897) * _1632) + (((((_1797 * _1800) + _520) * cbLight._m0[_1747].y) * _1821) * _1643);
    float _1909 = (((((_1878 * _1801) + _521) * cbLight._m0[_1832].z) * _1897) * _1632) + (((((_1797 * _1801) + _521) * cbLight._m0[_1747].z) * _1821) * _1643);
    float _1971;
    float _1973;
    float _1975;
    if (_1684)
    {
        _1971 = _1907;
        _1973 = _1908;
        _1975 = _1909;
    }
    else
    {
        uint _1977 = _1609 + 2u;
        uint _1981 = _1609 + 10u;
        float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _353) * 0.949999988079071044921875);
        float _1996 = _1995 * _1995;
        float _1997 = cbLight._m0[_1977].x + _431;
        float _1998 = cbLight._m0[_1977].y + _432;
        float _1999 = cbLight._m0[_1977].z + _433;
        float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
        float _2004 = _2003 * _1997;
        float _2005 = _2003 * _1998;
        float _2006 = _2003 * _1999;
        float _2007 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1977].xyz));
        float _4014 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2011 = dot(vec3(_349, _350, _351), vec3(_2004, _2005, _2006));
        float _4025 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2015 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2004, _2005, _2006));
        float _4036 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2019 = _1996 * _1996;
        float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
        float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
        float _2037 = 1.0 - _1996;
        float _2047 = (0.5 / (((_1776 * ((_2010 * _2037) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2037) + _1996) * _2010))) * _2010;
        float _4047 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2049 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
        float _2050 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1971 = (((((_2030 * _1798) + _518) * cbLight._m0[_1981].x) * _2049) * _2050) + _1907;
        _1973 = (((((_2030 * _1800) + _520) * cbLight._m0[_1981].y) * _2049) * _2050) + _1908;
        _1975 = (((((_2030 * _1801) + _521) * cbLight._m0[_1981].z) * _2049) * _2050) + _1909;
    }
    float _2085;
    float _2087;
    float _2089;
    if (_1702)
    {
        _2085 = _1971;
        _2087 = _1973;
        _2089 = _1975;
    }
    else
    {
        uint _2096 = _1609 + 3u;
        uint _2100 = _1609 + 11u;
        float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _353) * 0.949999988079071044921875);
        float _2115 = _2114 * _2114;
        float _2116 = cbLight._m0[_2096].x + _431;
        float _2117 = cbLight._m0[_2096].y + _432;
        float _2118 = cbLight._m0[_2096].z + _433;
        float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
        float _2123 = _2122 * _2116;
        float _2124 = _2122 * _2117;
        float _2125 = _2122 * _2118;
        float _2126 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2096].xyz));
        float _4063 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2130 = dot(vec3(_349, _350, _351), vec3(_2123, _2124, _2125));
        float _4074 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2134 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2123, _2124, _2125));
        float _4085 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2138 = _2115 * _2115;
        float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
        float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0);
        float _2156 = 1.0 - _2115;
        float _2166 = (0.5 / (((_1776 * ((_2129 * _2156) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2156) + _2115) * _2129))) * _2129;
        float _4096 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2168 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
        float _2169 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _2085 = (((((_2149 * _1798) + _518) * cbLight._m0[_2100].x) * _2168) * _2169) + _1971;
        _2087 = (((((_2149 * _1800) + _520) * cbLight._m0[_2100].y) * _2168) * _2169) + _1973;
        _2089 = (((((_2149 * _1801) + _521) * cbLight._m0[_2100].z) * _2168) * _2169) + _1975;
    }
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    if (_1607.y == 0u)
    {
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2244;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2244;
        float _2247 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2244;
        uvec4 _2259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2260 = _2259.x;
        uint _2271 = uint((float(_2259.y) * floor(float(uint(cbSceneParam._m0[85u].y * _453) / _2260))) + floor(float(uint(cbSceneParam._m0[85u].x * _452) / _2260)));
        float _2281 = (log2(_2247 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        uint _2285 = uint(isnan(14.0) ? _2282 : (isnan(_2282) ? 14.0 : min(_2282, 14.0)));
        uvec4 _2290 = texelFetch(g_lightClusterGridBuffer, int(((_2285 << 2u) + (_2271 << 6u)) >> 2u));
        uint _2291 = _2290.x;
        uint _2292 = _2259.z;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        if (((((1u << ((_2292 >> 4u) & 15u)) + 4294967295u) & _2291) == 0u) || ((_2292 & 240u) == 0u))
        {
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
        }
        else
        {
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            uint _2553 = 0u;
            uint _2562;
            bool _2563;
            for (;;)
            {
                _2562 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2553 << 2u)) >> 2u)).x;
                _2563 = _2562 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2563)
                {
                    frontier_phi_66_pred = _2547;
                    frontier_phi_66_pred_1 = _2552;
                    frontier_phi_66_pred_2 = _2551;
                    frontier_phi_66_pred_3 = _2550;
                    frontier_phi_66_pred_4 = _2549;
                    frontier_phi_66_pred_5 = _2548;
                }
                else
                {
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    uint _2698;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2549;
                    _2695 = _2550;
                    _2696 = _2551;
                    _2697 = _2552;
                    _2698 = _2562;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    for (;;)
                    {
                        uint _2702 = uint(findLSB(_2698)) + (_2553 << 5u);
                        uint _2699 = (_2698 + 4294967295u) & _2698;
                        uint _2704 = _2702 * 48u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        uint _2724 = (_2702 * 48u) + 4u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 3u)).x));
                        uint _2743 = (_2702 * 48u) + 8u;
                        vec3 _2754 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x));
                        float _2758 = _2718.x - _2245;
                        float _2759 = _2718.y - _2246;
                        float _2760 = _2718.z - _2247;
                        float _2761 = dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760));
                        float _2764 = inversesqrt(_2761);
                        float _2765 = _2764 * _2758;
                        float _2766 = _2764 * _2759;
                        float _2767 = _2764 * _2760;
                        float _2768 = dot(vec3(_473, _476, _479), vec3(_2765, _2766, _2767));
                        float _2773 = 1.0 - (_2761 * _2718.w);
                        float _4122 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2774 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2775 = sqrt(_2761) * _2737.w;
                        float _2778 = 1.39999997615814208984375 / (_2775 + 1.39999997615814208984375);
                        float _2779 = _2778 * _2778;
                        float _2782 = ((1.0 - _2779) * _2768) + _2779;
                        float _2785 = _2775 * _2775;
                        float _2789 = ((isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))) * _2774) / ((_2785 * 0.699999988079071044921875) + 1.0);
                        float _2793 = (-0.0) - _2245;
                        float _2794 = (-0.0) - _2246;
                        float _2795 = (-0.0) - _2247;
                        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
                        float _2800 = _2799 * _2793;
                        float _2801 = _2799 * _2794;
                        float _2802 = _2799 * _2795;
                        float _2810 = exp2(log2(1.0 / ((_2785 * 3.5) + 5.0)) * 0.25);
                        float _2811 = 1.0 - _549;
                        float _2818 = sqrt(1.0 - ((1.0 - (_2811 * _2811)) * (1.0 - (_2810 * _2810))));
                        float _2819 = _2818 * _2818;
                        float _2820 = _2819 * _2819;
                        float _2821 = _2800 + _2765;
                        float _2822 = _2801 + _2766;
                        float _2823 = _2802 + _2767;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2831 = dot(vec3(_473, _476, _479), vec3(_2800, _2801, _2802));
                        float _4138 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2835 = dot(vec3(_473, _476, _479), vec3(_2827 * _2821, _2827 * _2822, _2827 * _2823));
                        float _4149 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2842 = ((_2838 * _2838) * (_2820 + (-1.0))) + 1.0;
                        float _2843 = _2778 * _2819;
                        float _2844 = _2843 * _2843;
                        float _2847 = ((1.0 - _2844) * _2768) + _2844;
                        float _4160 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2848 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2849 = 1.0 - _2819;
                        float _2859 = (0.5 / (((_2848 * ((_2834 * _2849) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2848 * _2849) + _2819) * _2834))) * _2848;
                        float _4171 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2870 = (((_2820 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_2842 * _2842) * ((_2785 * 2.1991131305694580078125) + 3.141590118408203125))) * _2774;
                        _2622 = (_2789 * _2737.x) + _2695;
                        _2623 = (_2789 * _2737.y) + _2696;
                        _2624 = (_2789 * _2737.z) + _2697;
                        _2619 = (_2870 * _2754.x) + _2692;
                        _2620 = (_2870 * _2754.y) + _2693;
                        _2621 = (_2870 * _2754.z) + _2694;
                        if (_2699 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2621;
                            _2695 = _2622;
                            _2696 = _2623;
                            _2697 = _2624;
                            _2698 = _2699;
                        }
                    }
                    frontier_phi_66_pred = _2619;
                    frontier_phi_66_pred_1 = _2624;
                    frontier_phi_66_pred_2 = _2623;
                    frontier_phi_66_pred_3 = _2622;
                    frontier_phi_66_pred_4 = _2621;
                    frontier_phi_66_pred_5 = _2620;
                }
                _2395 = frontier_phi_66_pred;
                _2405 = frontier_phi_66_pred_1;
                _2403 = frontier_phi_66_pred_2;
                _2401 = frontier_phi_66_pred_3;
                _2399 = frontier_phi_66_pred_4;
                _2397 = frontier_phi_66_pred_5;
                uint _2554 = _2553 + 1u;
                if (_2554 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2547 = _2395;
                    _2548 = _2397;
                    _2549 = _2399;
                    _2550 = _2401;
                    _2551 = _2403;
                    _2552 = _2405;
                    _2553 = _2554;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
        }
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.z;
        uint _2411 = (_2409 >> 8u) & 15u;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        if (((4294967295u << _2411) & _2291) == 0u)
        {
            _2515 = _2394;
            _2517 = _2396;
            _2519 = _2398;
            _2521 = _2400;
            _2523 = _2402;
            _2525 = _2404;
        }
        else
        {
            float _2540 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
            float _2541 = _2540 * _2245;
            float _2542 = _2540 * _2246;
            float _2543 = _2540 * _2247;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2411 < ((_2409 >> 12u) & 15u))
            {
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2675 = _2394;
                float _2676 = _2396;
                float _2677 = _2398;
                float _2678 = _2400;
                float _2679 = _2402;
                float _2680 = _2404;
                uint _2681 = _2411;
                uint _2690;
                bool _2691;
                for (;;)
                {
                    _2690 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2681 << 2u)) >> 2u)).x;
                    _2691 = _2690 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2691)
                    {
                        frontier_phi_77_pred = _2680;
                        frontier_phi_77_pred_1 = _2679;
                        frontier_phi_77_pred_2 = _2678;
                        frontier_phi_77_pred_3 = _2677;
                        frontier_phi_77_pred_4 = _2676;
                        frontier_phi_77_pred_5 = _2675;
                    }
                    else
                    {
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        float _2899 = _2677;
                        float _2900 = _2678;
                        float _2901 = _2679;
                        float _2902 = _2680;
                        uint _2903 = _2690;
                        uint _2904;
                        vec4 _2929;
                        float _2930;
                        vec4 _2945;
                        vec3 _2957;
                        vec4 _2973;
                        vec4 _2989;
                        float _3036;
                        bool _3037;
                        for (;;)
                        {
                            uint _2914 = ((_2681 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2903));
                            _2904 = (_2903 + 4294967295u) & _2903;
                            uint _2916 = _2914 * 40u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2930 = _2929.w;
                            uint _2932 = (_2914 * 40u) + 4u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2947 = (_2914 * 40u) + 8u;
                            _2957 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x));
                            uint _2960 = (_2914 * 40u) + 16u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2976 = (_2914 * 40u) + 20u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2992 = (_2914 * 40u) + 24u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3011 = (_2914 * 40u) + 28u;
                            vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3036 = fma(_2247, _3024.z, fma(_2246, _3024.y, _3024.x * _2245)) + _3024.w;
                            _3037 = !((fma(_2247, _3005.z, fma(_2246, _3005.y, _3005.x * _2245)) + _3005.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3037)
                            {
                                float _3064 = _2929.x - _2245;
                                float _3065 = _2929.y - _2246;
                                float _3066 = _2929.z - _2247;
                                float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                                float _3070 = inversesqrt(_3067);
                                float _3071 = _3070 * _3064;
                                float _3072 = _3070 * _3065;
                                float _3073 = _3070 * _3066;
                                float _3077 = 1.0 - (_3067 / (_2930 * _2930));
                                float _4182 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3078 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3082 = sqrt(_3067) * _2945.w;
                                float _3084 = 1.39999997615814208984375 / (_3082 + 1.39999997615814208984375);
                                float _3085 = _3084 * _3084;
                                float _3088 = ((1.0 - _3085) * dot(vec3(_3071, _3072, _3073), vec3(_473, _476, _479))) + _3085;
                                float _3091 = _3082 * _3082;
                                float _3095 = (fma(_2247, _2973.z, fma(_2246, _2973.y, _2973.x * _2245)) + _2973.w) / _3036;
                                float _3096 = (fma(_2247, _2989.z, fma(_2246, _2989.y, _2989.x * _2245)) + _2989.w) / _3036;
                                float _3100 = 1.0 - dot(vec2(_3095, _3096), vec2(_3095, _3096));
                                float _4198 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3102 = _3101 * (((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3078) / ((_3091 * 0.699999988079071044921875) + 1.0));
                                float _3114 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                                float _3115 = 1.0 - _549;
                                float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                                float _3123 = _3122 * _3122;
                                float _3124 = _3123 * _3123;
                                float _3125 = _3071 - _2541;
                                float _3126 = _3072 - _2542;
                                float _3127 = _3073 - _2543;
                                float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                                float _3135 = dot(vec3(_473, _476, _479), vec3((-0.0) - _2541, (-0.0) - _2542, (-0.0) - _2543));
                                float _4209 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3138 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3139 = dot(vec3(_473, _476, _479), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                                float _4220 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3142 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                                float _3147 = _3084 * _3123;
                                float _3148 = _3147 * _3147;
                                float _3154 = ((1.0 - _3148) * dot(vec3(_473, _476, _479), vec3(_3071, _3072, _3073))) + _3148;
                                float _4231 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3156 = 1.0 - _3123;
                                float _3166 = (0.5 / (((_3155 * ((_3138 * _3156) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3123) * _3138))) * _3155;
                                float _4242 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3176 = (_3101 * _3078) * (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_3146 * _3146) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3102 * _2945.y;
                                frontier_phi_83_pred_1 = _3102 * _2945.x;
                                frontier_phi_83_pred_2 = _3176 * _2957.z;
                                frontier_phi_83_pred_3 = _3176 * _2957.y;
                                frontier_phi_83_pred_4 = _3176 * _2957.x;
                                frontier_phi_83_pred_5 = _3102 * _2945.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3184 = frontier_phi_83_pred;
                            _3183 = frontier_phi_83_pred_1;
                            _3182 = frontier_phi_83_pred_2;
                            _3181 = frontier_phi_83_pred_3;
                            _3180 = frontier_phi_83_pred_4;
                            _3185 = frontier_phi_83_pred_5;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            _2889 = _3185 + _2902;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            if (_2904 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2904;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2889;
                        frontier_phi_77_pred_1 = _2888;
                        frontier_phi_77_pred_2 = _2887;
                        frontier_phi_77_pred_3 = _2886;
                        frontier_phi_77_pred_4 = _2885;
                        frontier_phi_77_pred_5 = _2884;
                    }
                    _2526 = frontier_phi_77_pred;
                    _2524 = frontier_phi_77_pred_1;
                    _2522 = frontier_phi_77_pred_2;
                    _2520 = frontier_phi_77_pred_3;
                    _2518 = frontier_phi_77_pred_4;
                    _2516 = frontier_phi_77_pred_5;
                    uint _2682 = _2681 + 1u;
                    if (_2682 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2675 = _2516;
                        _2676 = _2518;
                        _2677 = _2520;
                        _2678 = _2522;
                        _2679 = _2524;
                        _2680 = _2526;
                        _2681 = _2682;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2520;
                frontier_phi_58_59_ladder_1 = _2526;
                frontier_phi_58_59_ladder_2 = _2524;
                frontier_phi_58_59_ladder_3 = _2522;
                frontier_phi_58_59_ladder_4 = _2518;
                frontier_phi_58_59_ladder_5 = _2516;
            }
            else
            {
                frontier_phi_58_59_ladder = _2398;
                frontier_phi_58_59_ladder_1 = _2404;
                frontier_phi_58_59_ladder_2 = _2402;
                frontier_phi_58_59_ladder_3 = _2400;
                frontier_phi_58_59_ladder_4 = _2396;
                frontier_phi_58_59_ladder_5 = _2394;
            }
            _2515 = frontier_phi_58_59_ladder_5;
            _2517 = frontier_phi_58_59_ladder_4;
            _2519 = frontier_phi_58_59_ladder;
            _2521 = frontier_phi_58_59_ladder_3;
            _2523 = frontier_phi_58_59_ladder_2;
            _2525 = frontier_phi_58_59_ladder_1;
        }
        float _2530 = isnan(1.0) ? _533 : (isnan(_533) ? 1.0 : min(_533, 1.0));
        _2304 = (_2530 * _2521) + _1740;
        _2306 = (_2530 * _2523) + _1742;
        _2308 = (_2530 * _2525) + _1744;
        _2310 = ((_2515 * _518) * _2530) + _2085;
        _2312 = ((_2517 * _520) * _2530) + _2087;
        _2314 = ((_2519 * _521) * _2530) + _2089;
    }
    else
    {
        _2304 = _1740;
        _2306 = _1742;
        _2308 = _1744;
        _2310 = _2085;
        _2312 = _2087;
        _2314 = _2089;
    }
    float _4258 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4269 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4280 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4291 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2332 = ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2304 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _533))) + ((_2310 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1372)) * cbPerFrame._m0[3u].x);
    float _2333 = ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2306 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _533))) + ((_2312 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1372)) * cbPerFrame._m0[3u].x);
    float _2334 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2308 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _533))) + ((_2314 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1372)) * cbPerFrame._m0[3u].x);
    float _2339 = cbInstanceData._m0[_492 + 6u].w * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)));
    float _2344 = _452 / cbSceneParam._m0[86u].x;
    float _2345 = _453 / cbSceneParam._m0[86u].y;
    vec4 _2359 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, (log2((isnan(cbSceneParam._m0[77u].w) ? _373 : (isnan(_373) ? cbSceneParam._m0[77u].w : min(_373, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2361 = _2359.x;
    float _2362 = _2359.y;
    float _2363 = _2359.z;
    float _2364 = _2359.w;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_373 > cbSceneParam._m0[78u].w)
    {
        float _2419 = isnan(_373) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _373 : min(cbSceneParam._m0[80u].w, _373));
        float _2420 = _2419 / _373;
        float _2431 = _2420 * _424;
        float _2432 = _425 * _2420;
        float _2433 = (-0.0) - _2432;
        float _2435 = _2420 * _426;
        float _2437 = (cbSceneParam._m0[77u].w * _2433) / _2419;
        float _2438 = _2437 + cbSceneParam._m0[79u].w;
        float _2439 = cbSceneParam._m0[79u].w - _2432;
        float _2445 = sqrt(((_2431 * _2431) + (_2432 * _2432)) + (_2435 * _2435));
        float _2448 = (1.0 - (cbSceneParam._m0[77u].w / _2419)) * _2445;
        float _2453 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2455 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2632;
        if (abs((_2433 - _2437) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2632 = ((((_2438 > 0.0) ? exp2(_2453 * _2438) : (2.0 - exp2(_2455 * _2438))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2448;
        }
        else
        {
            float _2576 = 1.0 / cbSceneParam._m0[80u].x;
            float _2577 = isnan(_2439) ? _2438 : (isnan(_2438) ? _2439 : max(_2438, _2439));
            float _2578 = isnan(_2439) ? _2438 : (isnan(_2438) ? _2439 : min(_2438, _2439));
            float _2587 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : min(_2577, 0.0));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            _2632 = ((abs(_2445 / _2433) * cbSceneParam._m0[80u].y) * ((((_2587 - _2588) * 2.0) - ((exp2(_2453 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)))) - exp2(_2453 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0))))) * _2576)) - ((exp2(_2455 * _2587) - exp2(_2455 * _2588)) * _2576))) + (_2448 * cbSceneParam._m0[80u].z);
        }
        vec4 _2634 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, 1.0), 0.0);
        float _2643 = exp2((_2632 * (-1.44269502162933349609375)) * (1.0 - _2634.w));
        float _2644 = log2(_2643);
        float _2660 = log2(_2364);
        _2457 = (exp2(_2660 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2644 * cbSceneParam._m0[78u].x)) * _2634.x) / cbSceneParam._m0[78u].x)) + _2361;
        _2459 = (exp2(_2660 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2644 * cbSceneParam._m0[78u].y)) * _2634.y) / cbSceneParam._m0[78u].y)) + _2362;
        _2461 = (exp2(_2660 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2644 * cbSceneParam._m0[78u].z)) * _2634.z) / cbSceneParam._m0[78u].z)) + _2363;
        _2463 = _2643 * _2364;
    }
    else
    {
        _2457 = _2361;
        _2459 = _2362;
        _2461 = _2363;
        _2463 = _2364;
    }
    bool _2670;
    vec4 _2473;
    vec4 _2495;
    float _2497;
    float _2501;
    float _2502;
    float _2503;
    float _2504;
    bool _2514;
    for (;;)
    {
        _2473 = cbMatDynParam._m0[0u];
        float _2475 = roundEven(_2473.y);
        bool _2476 = _2475 == 3.0;
        float _2477 = log2(_2463);
        float _2484 = exp2(_2477 * cbSceneParam._m0[78u].x) * _2332;
        float _2485 = exp2(_2477 * cbSceneParam._m0[78u].y) * _2333;
        float _2486 = exp2(_2477 * cbSceneParam._m0[78u].z) * _2334;
        float _2493 = _440 + (-0.5);
        _2495 = cbMtdParam._m0[1u];
        _2497 = _2495.y * _2493;
        float _2500 = (_2475 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2501 = _2500 * (_2476 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2457)));
        _2502 = _2500 * (_2476 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2459)));
        _2503 = _2500 * (_2476 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2461)));
        _2504 = _2493 * 0.999000012874603271484375;
        _2514 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2514)
        {
            if ((cbInstanceData._m0[_492 + 7u].x + _2504) < 0.5)
            {
                _2670 = true;
                break;
            }
        }
        uint _2611 = _494 + uint(_2473.w);
        if ((cbInstanceData._m0[_2611].w < 1.0) && ((cbInstanceData._m0[_2611].w + _2504) < 0.5))
        {
            _2670 = true;
            break;
        }
        if ((_2497 + _294) < _2495.x)
        {
            _2670 = true;
            break;
        }
        _2670 = false;
        break;
    }
    float _2875;
    if (_2670)
    {
        discard_state = true;
        _2875 = 0.0;
    }
    else
    {
        _2875 = _2339;
    }
    SV_Target.x = _2501;
    SV_Target.y = _2502;
    SV_Target.z = _2503;
    SV_Target.w = _2875;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2339;
    discard_exit();
}


